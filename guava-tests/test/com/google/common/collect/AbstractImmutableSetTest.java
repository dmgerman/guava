begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2008 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.collect
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|IteratorFeature
operator|.
name|UNMODIFIABLE
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Arrays
operator|.
name|asList
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|truth0
operator|.
name|Truth
operator|.
name|ASSERT
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtCompatible
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtIncompatible
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|Helpers
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|IteratorTester
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|MinimalCollection
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|MinimalIterable
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**  * Base class for {@link ImmutableSet} and  {@link ImmutableSortedSet} tests.  *  * @author Kevin Bourrillion  * @author Jared Levy  */
end_comment

begin_class
annotation|@
name|GwtCompatible
argument_list|(
name|emulated
operator|=
literal|true
argument_list|)
DECL|class|AbstractImmutableSetTest
specifier|public
specifier|abstract
class|class
name|AbstractImmutableSetTest
extends|extends
name|TestCase
block|{
DECL|method|of ()
specifier|protected
specifier|abstract
name|Set
argument_list|<
name|String
argument_list|>
name|of
parameter_list|()
function_decl|;
DECL|method|of (String e)
specifier|protected
specifier|abstract
name|Set
argument_list|<
name|String
argument_list|>
name|of
parameter_list|(
name|String
name|e
parameter_list|)
function_decl|;
DECL|method|of (String e1, String e2)
specifier|protected
specifier|abstract
name|Set
argument_list|<
name|String
argument_list|>
name|of
parameter_list|(
name|String
name|e1
parameter_list|,
name|String
name|e2
parameter_list|)
function_decl|;
DECL|method|of (String e1, String e2, String e3)
specifier|protected
specifier|abstract
name|Set
argument_list|<
name|String
argument_list|>
name|of
parameter_list|(
name|String
name|e1
parameter_list|,
name|String
name|e2
parameter_list|,
name|String
name|e3
parameter_list|)
function_decl|;
DECL|method|of (String e1, String e2, String e3, String e4)
specifier|protected
specifier|abstract
name|Set
argument_list|<
name|String
argument_list|>
name|of
parameter_list|(
name|String
name|e1
parameter_list|,
name|String
name|e2
parameter_list|,
name|String
name|e3
parameter_list|,
name|String
name|e4
parameter_list|)
function_decl|;
DECL|method|of (String e1, String e2, String e3, String e4, String e5)
specifier|protected
specifier|abstract
name|Set
argument_list|<
name|String
argument_list|>
name|of
parameter_list|(
name|String
name|e1
parameter_list|,
name|String
name|e2
parameter_list|,
name|String
name|e3
parameter_list|,
name|String
name|e4
parameter_list|,
name|String
name|e5
parameter_list|)
function_decl|;
DECL|method|of (String e1, String e2, String e3, String e4, String e5, String e6, String... rest)
specifier|protected
specifier|abstract
name|Set
argument_list|<
name|String
argument_list|>
name|of
parameter_list|(
name|String
name|e1
parameter_list|,
name|String
name|e2
parameter_list|,
name|String
name|e3
parameter_list|,
name|String
name|e4
parameter_list|,
name|String
name|e5
parameter_list|,
name|String
name|e6
parameter_list|,
name|String
modifier|...
name|rest
parameter_list|)
function_decl|;
DECL|method|copyOf (String[] elements)
specifier|protected
specifier|abstract
name|Set
argument_list|<
name|String
argument_list|>
name|copyOf
parameter_list|(
name|String
index|[]
name|elements
parameter_list|)
function_decl|;
DECL|method|copyOf (Collection<String> elements)
specifier|protected
specifier|abstract
name|Set
argument_list|<
name|String
argument_list|>
name|copyOf
parameter_list|(
name|Collection
argument_list|<
name|String
argument_list|>
name|elements
parameter_list|)
function_decl|;
DECL|method|copyOf (Iterable<String> elements)
specifier|protected
specifier|abstract
name|Set
argument_list|<
name|String
argument_list|>
name|copyOf
parameter_list|(
name|Iterable
argument_list|<
name|String
argument_list|>
name|elements
parameter_list|)
function_decl|;
DECL|method|copyOf (Iterator<String> elements)
specifier|protected
specifier|abstract
name|Set
argument_list|<
name|String
argument_list|>
name|copyOf
parameter_list|(
name|Iterator
argument_list|<
name|String
argument_list|>
name|elements
parameter_list|)
function_decl|;
DECL|method|testCreation_noArgs ()
specifier|public
name|void
name|testCreation_noArgs
parameter_list|()
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|set
init|=
name|of
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
expr|<
name|String
operator|>
name|emptySet
argument_list|()
argument_list|,
name|set
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|of
argument_list|()
argument_list|,
name|set
argument_list|)
expr_stmt|;
block|}
DECL|method|testCreation_oneElement ()
specifier|public
name|void
name|testCreation_oneElement
parameter_list|()
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|set
init|=
name|of
argument_list|(
literal|"a"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
literal|"a"
argument_list|)
argument_list|,
name|set
argument_list|)
expr_stmt|;
block|}
DECL|method|testCreation_twoElements ()
specifier|public
name|void
name|testCreation_twoElements
parameter_list|()
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|set
init|=
name|of
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Sets
operator|.
name|newHashSet
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
argument_list|,
name|set
argument_list|)
expr_stmt|;
block|}
DECL|method|testCreation_threeElements ()
specifier|public
name|void
name|testCreation_threeElements
parameter_list|()
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|set
init|=
name|of
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Sets
operator|.
name|newHashSet
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|)
argument_list|,
name|set
argument_list|)
expr_stmt|;
block|}
DECL|method|testCreation_fourElements ()
specifier|public
name|void
name|testCreation_fourElements
parameter_list|()
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|set
init|=
name|of
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|,
literal|"d"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Sets
operator|.
name|newHashSet
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|,
literal|"d"
argument_list|)
argument_list|,
name|set
argument_list|)
expr_stmt|;
block|}
DECL|method|testCreation_fiveElements ()
specifier|public
name|void
name|testCreation_fiveElements
parameter_list|()
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|set
init|=
name|of
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|,
literal|"d"
argument_list|,
literal|"e"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Sets
operator|.
name|newHashSet
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|,
literal|"d"
argument_list|,
literal|"e"
argument_list|)
argument_list|,
name|set
argument_list|)
expr_stmt|;
block|}
DECL|method|testCreation_sixElements ()
specifier|public
name|void
name|testCreation_sixElements
parameter_list|()
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|set
init|=
name|of
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|,
literal|"d"
argument_list|,
literal|"e"
argument_list|,
literal|"f"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Sets
operator|.
name|newHashSet
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|,
literal|"d"
argument_list|,
literal|"e"
argument_list|,
literal|"f"
argument_list|)
argument_list|,
name|set
argument_list|)
expr_stmt|;
block|}
DECL|method|testCreation_sevenElements ()
specifier|public
name|void
name|testCreation_sevenElements
parameter_list|()
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|set
init|=
name|of
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|,
literal|"d"
argument_list|,
literal|"e"
argument_list|,
literal|"f"
argument_list|,
literal|"g"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Sets
operator|.
name|newHashSet
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|,
literal|"d"
argument_list|,
literal|"e"
argument_list|,
literal|"f"
argument_list|,
literal|"g"
argument_list|)
argument_list|,
name|set
argument_list|)
expr_stmt|;
block|}
DECL|method|testCreation_eightElements ()
specifier|public
name|void
name|testCreation_eightElements
parameter_list|()
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|set
init|=
name|of
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|,
literal|"d"
argument_list|,
literal|"e"
argument_list|,
literal|"f"
argument_list|,
literal|"g"
argument_list|,
literal|"h"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Sets
operator|.
name|newHashSet
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|,
literal|"d"
argument_list|,
literal|"e"
argument_list|,
literal|"f"
argument_list|,
literal|"g"
argument_list|,
literal|"h"
argument_list|)
argument_list|,
name|set
argument_list|)
expr_stmt|;
block|}
DECL|method|testCopyOf_emptyArray ()
specifier|public
name|void
name|testCopyOf_emptyArray
parameter_list|()
block|{
name|String
index|[]
name|array
init|=
operator|new
name|String
index|[
literal|0
index|]
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|set
init|=
name|copyOf
argument_list|(
name|array
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
expr|<
name|String
operator|>
name|emptySet
argument_list|()
argument_list|,
name|set
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|of
argument_list|()
argument_list|,
name|set
argument_list|)
expr_stmt|;
block|}
DECL|method|testCopyOf_arrayOfOneElement ()
specifier|public
name|void
name|testCopyOf_arrayOfOneElement
parameter_list|()
block|{
name|String
index|[]
name|array
init|=
operator|new
name|String
index|[]
block|{
literal|"a"
block|}
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|set
init|=
name|copyOf
argument_list|(
name|array
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
literal|"a"
argument_list|)
argument_list|,
name|set
argument_list|)
expr_stmt|;
block|}
DECL|method|testCopyOf_nullArray ()
specifier|public
name|void
name|testCopyOf_nullArray
parameter_list|()
block|{
try|try
block|{
name|copyOf
argument_list|(
operator|(
name|String
index|[]
operator|)
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testCopyOf_arrayContainingOnlyNull ()
specifier|public
name|void
name|testCopyOf_arrayContainingOnlyNull
parameter_list|()
block|{
name|String
index|[]
name|array
init|=
operator|new
name|String
index|[]
block|{
literal|null
block|}
decl_stmt|;
try|try
block|{
name|copyOf
argument_list|(
name|array
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testCopyOf_collection_empty ()
specifier|public
name|void
name|testCopyOf_collection_empty
parameter_list|()
block|{
comment|// "<String>" is required to work around a javac 1.5 bug.
name|Collection
argument_list|<
name|String
argument_list|>
name|c
init|=
name|MinimalCollection
operator|.
expr|<
name|String
operator|>
name|of
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|set
init|=
name|copyOf
argument_list|(
name|c
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
expr|<
name|String
operator|>
name|emptySet
argument_list|()
argument_list|,
name|set
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|of
argument_list|()
argument_list|,
name|set
argument_list|)
expr_stmt|;
block|}
DECL|method|testCopyOf_collection_oneElement ()
specifier|public
name|void
name|testCopyOf_collection_oneElement
parameter_list|()
block|{
name|Collection
argument_list|<
name|String
argument_list|>
name|c
init|=
name|MinimalCollection
operator|.
name|of
argument_list|(
literal|"a"
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|set
init|=
name|copyOf
argument_list|(
name|c
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
literal|"a"
argument_list|)
argument_list|,
name|set
argument_list|)
expr_stmt|;
block|}
DECL|method|testCopyOf_collection_oneElementRepeated ()
specifier|public
name|void
name|testCopyOf_collection_oneElementRepeated
parameter_list|()
block|{
name|Collection
argument_list|<
name|String
argument_list|>
name|c
init|=
name|MinimalCollection
operator|.
name|of
argument_list|(
literal|"a"
argument_list|,
literal|"a"
argument_list|,
literal|"a"
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|set
init|=
name|copyOf
argument_list|(
name|c
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
literal|"a"
argument_list|)
argument_list|,
name|set
argument_list|)
expr_stmt|;
block|}
DECL|method|testCopyOf_collection_general ()
specifier|public
name|void
name|testCopyOf_collection_general
parameter_list|()
block|{
name|Collection
argument_list|<
name|String
argument_list|>
name|c
init|=
name|MinimalCollection
operator|.
name|of
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"a"
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|set
init|=
name|copyOf
argument_list|(
name|c
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|set
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|set
operator|.
name|contains
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|set
operator|.
name|contains
argument_list|(
literal|"b"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testCopyOf_collectionContainingNull ()
specifier|public
name|void
name|testCopyOf_collectionContainingNull
parameter_list|()
block|{
name|Collection
argument_list|<
name|String
argument_list|>
name|c
init|=
name|MinimalCollection
operator|.
name|of
argument_list|(
literal|"a"
argument_list|,
literal|null
argument_list|,
literal|"b"
argument_list|)
decl_stmt|;
try|try
block|{
name|copyOf
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testCopyOf_iterator_empty ()
specifier|public
name|void
name|testCopyOf_iterator_empty
parameter_list|()
block|{
name|Iterator
argument_list|<
name|String
argument_list|>
name|iterator
init|=
name|Iterators
operator|.
name|emptyIterator
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|set
init|=
name|copyOf
argument_list|(
name|iterator
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
expr|<
name|String
operator|>
name|emptySet
argument_list|()
argument_list|,
name|set
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|of
argument_list|()
argument_list|,
name|set
argument_list|)
expr_stmt|;
block|}
DECL|method|testCopyOf_iterator_oneElement ()
specifier|public
name|void
name|testCopyOf_iterator_oneElement
parameter_list|()
block|{
name|Iterator
argument_list|<
name|String
argument_list|>
name|iterator
init|=
name|Iterators
operator|.
name|singletonIterator
argument_list|(
literal|"a"
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|set
init|=
name|copyOf
argument_list|(
name|iterator
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
literal|"a"
argument_list|)
argument_list|,
name|set
argument_list|)
expr_stmt|;
block|}
DECL|method|testCopyOf_iterator_oneElementRepeated ()
specifier|public
name|void
name|testCopyOf_iterator_oneElementRepeated
parameter_list|()
block|{
name|Iterator
argument_list|<
name|String
argument_list|>
name|iterator
init|=
name|Iterators
operator|.
name|forArray
argument_list|(
literal|"a"
argument_list|,
literal|"a"
argument_list|,
literal|"a"
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|set
init|=
name|copyOf
argument_list|(
name|iterator
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
literal|"a"
argument_list|)
argument_list|,
name|set
argument_list|)
expr_stmt|;
block|}
DECL|method|testCopyOf_iterator_general ()
specifier|public
name|void
name|testCopyOf_iterator_general
parameter_list|()
block|{
name|Iterator
argument_list|<
name|String
argument_list|>
name|iterator
init|=
name|Iterators
operator|.
name|forArray
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"a"
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|set
init|=
name|copyOf
argument_list|(
name|iterator
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|set
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|set
operator|.
name|contains
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|set
operator|.
name|contains
argument_list|(
literal|"b"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testCopyOf_iteratorContainingNull ()
specifier|public
name|void
name|testCopyOf_iteratorContainingNull
parameter_list|()
block|{
name|Iterator
argument_list|<
name|String
argument_list|>
name|c
init|=
name|Iterators
operator|.
name|forArray
argument_list|(
literal|"a"
argument_list|,
literal|null
argument_list|,
literal|"b"
argument_list|)
decl_stmt|;
try|try
block|{
name|copyOf
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|expected
parameter_list|)
block|{     }
block|}
DECL|class|CountingIterable
specifier|private
specifier|static
class|class
name|CountingIterable
implements|implements
name|Iterable
argument_list|<
name|String
argument_list|>
block|{
DECL|field|count
name|int
name|count
init|=
literal|0
decl_stmt|;
annotation|@
name|Override
DECL|method|iterator ()
specifier|public
name|Iterator
argument_list|<
name|String
argument_list|>
name|iterator
parameter_list|()
block|{
name|count
operator|++
expr_stmt|;
return|return
name|Iterators
operator|.
name|forArray
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"a"
argument_list|)
return|;
block|}
block|}
DECL|method|testCopyOf_plainIterable ()
specifier|public
name|void
name|testCopyOf_plainIterable
parameter_list|()
block|{
name|CountingIterable
name|iterable
init|=
operator|new
name|CountingIterable
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|set
init|=
name|copyOf
argument_list|(
name|iterable
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|set
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|set
operator|.
name|contains
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|set
operator|.
name|contains
argument_list|(
literal|"b"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testCopyOf_plainIterable_iteratesOnce ()
specifier|public
name|void
name|testCopyOf_plainIterable_iteratesOnce
parameter_list|()
block|{
name|CountingIterable
name|iterable
init|=
operator|new
name|CountingIterable
argument_list|()
decl_stmt|;
name|copyOf
argument_list|(
name|iterable
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|iterable
operator|.
name|count
argument_list|)
expr_stmt|;
block|}
DECL|method|testCopyOf_shortcut_empty ()
specifier|public
name|void
name|testCopyOf_shortcut_empty
parameter_list|()
block|{
name|Collection
argument_list|<
name|String
argument_list|>
name|c
init|=
name|of
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
expr|<
name|String
operator|>
name|emptySet
argument_list|()
argument_list|,
name|copyOf
argument_list|(
name|c
argument_list|)
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|c
argument_list|,
name|copyOf
argument_list|(
name|c
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testCopyOf_shortcut_singleton ()
specifier|public
name|void
name|testCopyOf_shortcut_singleton
parameter_list|()
block|{
name|Collection
argument_list|<
name|String
argument_list|>
name|c
init|=
name|of
argument_list|(
literal|"a"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
literal|"a"
argument_list|)
argument_list|,
name|copyOf
argument_list|(
name|c
argument_list|)
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|c
argument_list|,
name|copyOf
argument_list|(
name|c
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testCopyOf_shortcut_sameType ()
specifier|public
name|void
name|testCopyOf_shortcut_sameType
parameter_list|()
block|{
name|Collection
argument_list|<
name|String
argument_list|>
name|c
init|=
name|of
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
name|c
argument_list|,
name|copyOf
argument_list|(
name|c
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testToString ()
specifier|public
name|void
name|testToString
parameter_list|()
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|set
init|=
name|of
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|,
literal|"d"
argument_list|,
literal|"e"
argument_list|,
literal|"f"
argument_list|,
literal|"g"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"[a, b, c, d, e, f, g]"
argument_list|,
name|set
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
argument_list|(
literal|"slow (~40s)"
argument_list|)
DECL|method|testIterator_oneElement ()
specifier|public
name|void
name|testIterator_oneElement
parameter_list|()
block|{
operator|new
name|IteratorTester
argument_list|<
name|String
argument_list|>
argument_list|(
literal|5
argument_list|,
name|UNMODIFIABLE
argument_list|,
name|Collections
operator|.
name|singleton
argument_list|(
literal|"a"
argument_list|)
argument_list|,
name|IteratorTester
operator|.
name|KnownOrder
operator|.
name|KNOWN_ORDER
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|Iterator
argument_list|<
name|String
argument_list|>
name|newTargetIterator
parameter_list|()
block|{
return|return
name|of
argument_list|(
literal|"a"
argument_list|)
operator|.
name|iterator
argument_list|()
return|;
block|}
block|}
operator|.
name|test
argument_list|()
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
argument_list|(
literal|"slow (~30s)"
argument_list|)
DECL|method|testIterator_general ()
specifier|public
name|void
name|testIterator_general
parameter_list|()
block|{
operator|new
name|IteratorTester
argument_list|<
name|String
argument_list|>
argument_list|(
literal|5
argument_list|,
name|UNMODIFIABLE
argument_list|,
name|asList
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|)
argument_list|,
name|IteratorTester
operator|.
name|KnownOrder
operator|.
name|KNOWN_ORDER
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|Iterator
argument_list|<
name|String
argument_list|>
name|newTargetIterator
parameter_list|()
block|{
return|return
name|of
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|)
operator|.
name|iterator
argument_list|()
return|;
block|}
block|}
operator|.
name|test
argument_list|()
expr_stmt|;
block|}
DECL|method|testContainsAll_sameType ()
specifier|public
name|void
name|testContainsAll_sameType
parameter_list|()
block|{
name|Collection
argument_list|<
name|String
argument_list|>
name|c
init|=
name|of
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|c
operator|.
name|containsAll
argument_list|(
name|of
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|,
literal|"d"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|c
operator|.
name|containsAll
argument_list|(
name|of
argument_list|(
literal|"a"
argument_list|,
literal|"d"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|c
operator|.
name|containsAll
argument_list|(
name|of
argument_list|(
literal|"a"
argument_list|,
literal|"c"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|c
operator|.
name|containsAll
argument_list|(
name|of
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testEquals_sameType ()
specifier|public
name|void
name|testEquals_sameType
parameter_list|()
block|{
name|Collection
argument_list|<
name|String
argument_list|>
name|c
init|=
name|of
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|c
operator|.
name|equals
argument_list|(
name|of
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|c
operator|.
name|equals
argument_list|(
name|of
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"d"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|builder ()
specifier|abstract
parameter_list|<
name|E
extends|extends
name|Comparable
argument_list|<
name|E
argument_list|>
parameter_list|>
name|ImmutableSet
operator|.
name|Builder
argument_list|<
name|E
argument_list|>
name|builder
parameter_list|()
function_decl|;
DECL|method|testBuilderWithNonDuplicateElements ()
specifier|public
name|void
name|testBuilderWithNonDuplicateElements
parameter_list|()
block|{
name|ImmutableSet
argument_list|<
name|String
argument_list|>
name|set
init|=
name|this
operator|.
expr|<
name|String
operator|>
name|builder
argument_list|()
operator|.
name|add
argument_list|(
literal|"a"
argument_list|)
operator|.
name|add
argument_list|(
literal|"b"
argument_list|,
literal|"c"
argument_list|)
operator|.
name|add
argument_list|(
literal|"d"
argument_list|,
literal|"e"
argument_list|,
literal|"f"
argument_list|)
operator|.
name|add
argument_list|(
literal|"g"
argument_list|,
literal|"h"
argument_list|,
literal|"i"
argument_list|,
literal|"j"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|ASSERT
operator|.
name|that
argument_list|(
name|set
argument_list|)
operator|.
name|has
argument_list|()
operator|.
name|allOf
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|,
literal|"d"
argument_list|,
literal|"e"
argument_list|,
literal|"f"
argument_list|,
literal|"g"
argument_list|,
literal|"h"
argument_list|,
literal|"i"
argument_list|,
literal|"j"
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
block|}
DECL|method|testReuseBuilderWithNonDuplicateElements ()
specifier|public
name|void
name|testReuseBuilderWithNonDuplicateElements
parameter_list|()
block|{
name|ImmutableSet
operator|.
name|Builder
argument_list|<
name|String
argument_list|>
name|builder
init|=
name|this
operator|.
expr|<
name|String
operator|>
name|builder
argument_list|()
operator|.
name|add
argument_list|(
literal|"a"
argument_list|)
operator|.
name|add
argument_list|(
literal|"b"
argument_list|)
decl_stmt|;
name|ASSERT
operator|.
name|that
argument_list|(
name|builder
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|has
argument_list|()
operator|.
name|allOf
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
name|builder
operator|.
name|add
argument_list|(
literal|"c"
argument_list|,
literal|"d"
argument_list|)
expr_stmt|;
name|ASSERT
operator|.
name|that
argument_list|(
name|builder
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|has
argument_list|()
operator|.
name|allOf
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|,
literal|"d"
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
block|}
DECL|method|testBuilderWithDuplicateElements ()
specifier|public
name|void
name|testBuilderWithDuplicateElements
parameter_list|()
block|{
name|ImmutableSet
argument_list|<
name|String
argument_list|>
name|set
init|=
name|this
operator|.
expr|<
name|String
operator|>
name|builder
argument_list|()
operator|.
name|add
argument_list|(
literal|"a"
argument_list|)
operator|.
name|add
argument_list|(
literal|"a"
argument_list|,
literal|"a"
argument_list|)
operator|.
name|add
argument_list|(
literal|"a"
argument_list|,
literal|"a"
argument_list|,
literal|"a"
argument_list|)
operator|.
name|add
argument_list|(
literal|"a"
argument_list|,
literal|"a"
argument_list|,
literal|"a"
argument_list|,
literal|"a"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|set
operator|.
name|contains
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|set
operator|.
name|contains
argument_list|(
literal|"b"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|set
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testReuseBuilderWithDuplicateElements ()
specifier|public
name|void
name|testReuseBuilderWithDuplicateElements
parameter_list|()
block|{
name|ImmutableSet
operator|.
name|Builder
argument_list|<
name|String
argument_list|>
name|builder
init|=
name|this
operator|.
expr|<
name|String
operator|>
name|builder
argument_list|()
operator|.
name|add
argument_list|(
literal|"a"
argument_list|)
operator|.
name|add
argument_list|(
literal|"a"
argument_list|,
literal|"a"
argument_list|)
operator|.
name|add
argument_list|(
literal|"b"
argument_list|)
decl_stmt|;
name|ASSERT
operator|.
name|that
argument_list|(
name|builder
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|has
argument_list|()
operator|.
name|allOf
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
name|builder
operator|.
name|add
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|,
literal|"c"
argument_list|)
expr_stmt|;
name|ASSERT
operator|.
name|that
argument_list|(
name|builder
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|has
argument_list|()
operator|.
name|allOf
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
block|}
DECL|method|testBuilderAddAll ()
specifier|public
name|void
name|testBuilderAddAll
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|a
init|=
name|asList
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|b
init|=
name|asList
argument_list|(
literal|"c"
argument_list|,
literal|"d"
argument_list|,
literal|"e"
argument_list|)
decl_stmt|;
name|ImmutableSet
argument_list|<
name|String
argument_list|>
name|set
init|=
name|this
operator|.
expr|<
name|String
operator|>
name|builder
argument_list|()
operator|.
name|addAll
argument_list|(
name|a
argument_list|)
operator|.
name|addAll
argument_list|(
name|b
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|ASSERT
operator|.
name|that
argument_list|(
name|set
argument_list|)
operator|.
name|has
argument_list|()
operator|.
name|allOf
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|,
literal|"d"
argument_list|,
literal|"e"
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
block|}
DECL|field|LAST_COLOR_ADDED
specifier|static
specifier|final
name|int
name|LAST_COLOR_ADDED
init|=
literal|0x00BFFF
decl_stmt|;
DECL|method|testComplexBuilder ()
specifier|public
name|void
name|testComplexBuilder
parameter_list|()
block|{
name|List
argument_list|<
name|Integer
argument_list|>
name|colorElem
init|=
name|asList
argument_list|(
literal|0x00
argument_list|,
literal|0x33
argument_list|,
literal|0x66
argument_list|,
literal|0x99
argument_list|,
literal|0xCC
argument_list|,
literal|0xFF
argument_list|)
decl_stmt|;
comment|// javac won't compile this without "this.<Integer>"
name|ImmutableSet
operator|.
name|Builder
argument_list|<
name|Integer
argument_list|>
name|webSafeColorsBuilder
init|=
name|this
operator|.
expr|<
name|Integer
operator|>
name|builder
argument_list|()
decl_stmt|;
for|for
control|(
name|Integer
name|red
range|:
name|colorElem
control|)
block|{
for|for
control|(
name|Integer
name|green
range|:
name|colorElem
control|)
block|{
for|for
control|(
name|Integer
name|blue
range|:
name|colorElem
control|)
block|{
name|webSafeColorsBuilder
operator|.
name|add
argument_list|(
operator|(
name|red
operator|<<
literal|16
operator|)
operator|+
operator|(
name|green
operator|<<
literal|8
operator|)
operator|+
name|blue
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|ImmutableSet
argument_list|<
name|Integer
argument_list|>
name|webSafeColors
init|=
name|webSafeColorsBuilder
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|216
argument_list|,
name|webSafeColors
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Integer
index|[]
name|webSafeColorArray
init|=
name|webSafeColors
operator|.
name|toArray
argument_list|(
operator|new
name|Integer
index|[
name|webSafeColors
operator|.
name|size
argument_list|()
index|]
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0x000000
argument_list|,
operator|(
name|int
operator|)
name|webSafeColorArray
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0x000033
argument_list|,
operator|(
name|int
operator|)
name|webSafeColorArray
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0x000066
argument_list|,
operator|(
name|int
operator|)
name|webSafeColorArray
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0x003300
argument_list|,
operator|(
name|int
operator|)
name|webSafeColorArray
index|[
literal|6
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0x330000
argument_list|,
operator|(
name|int
operator|)
name|webSafeColorArray
index|[
literal|36
index|]
argument_list|)
expr_stmt|;
name|ImmutableSet
argument_list|<
name|Integer
argument_list|>
name|addedColor
init|=
name|webSafeColorsBuilder
operator|.
name|add
argument_list|(
name|LAST_COLOR_ADDED
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Modifying the builder should not have changed any already built sets"
argument_list|,
literal|216
argument_list|,
name|webSafeColors
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"the new array should be one bigger than webSafeColors"
argument_list|,
literal|217
argument_list|,
name|addedColor
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Integer
index|[]
name|appendColorArray
init|=
name|addedColor
operator|.
name|toArray
argument_list|(
operator|new
name|Integer
index|[
name|addedColor
operator|.
name|size
argument_list|()
index|]
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|getComplexBuilderSetLastElement
argument_list|()
argument_list|,
operator|(
name|int
operator|)
name|appendColorArray
index|[
literal|216
index|]
argument_list|)
expr_stmt|;
block|}
DECL|method|getComplexBuilderSetLastElement ()
specifier|abstract
name|int
name|getComplexBuilderSetLastElement
parameter_list|()
function_decl|;
DECL|method|testBuilderAddHandlesNullsCorrectly ()
specifier|public
name|void
name|testBuilderAddHandlesNullsCorrectly
parameter_list|()
block|{
name|ImmutableSet
operator|.
name|Builder
argument_list|<
name|String
argument_list|>
name|builder
init|=
name|this
operator|.
expr|<
name|String
operator|>
name|builder
argument_list|()
decl_stmt|;
try|try
block|{
name|builder
operator|.
name|add
argument_list|(
operator|(
name|String
operator|)
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected NullPointerException"
argument_list|)
expr_stmt|;
comment|// COV_NF_LINE
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|expected
parameter_list|)
block|{     }
name|builder
operator|=
name|this
operator|.
expr|<
name|String
operator|>
name|builder
argument_list|()
expr_stmt|;
try|try
block|{
name|builder
operator|.
name|add
argument_list|(
operator|(
name|String
index|[]
operator|)
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected NullPointerException"
argument_list|)
expr_stmt|;
comment|// COV_NF_LINE
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|expected
parameter_list|)
block|{     }
name|builder
operator|=
name|this
operator|.
expr|<
name|String
operator|>
name|builder
argument_list|()
expr_stmt|;
try|try
block|{
name|builder
operator|.
name|add
argument_list|(
literal|"a"
argument_list|,
operator|(
name|String
operator|)
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected NullPointerException"
argument_list|)
expr_stmt|;
comment|// COV_NF_LINE
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|expected
parameter_list|)
block|{     }
name|builder
operator|=
name|this
operator|.
expr|<
name|String
operator|>
name|builder
argument_list|()
expr_stmt|;
try|try
block|{
name|builder
operator|.
name|add
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
operator|(
name|String
operator|)
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected NullPointerException"
argument_list|)
expr_stmt|;
comment|// COV_NF_LINE
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|expected
parameter_list|)
block|{     }
name|builder
operator|=
name|this
operator|.
expr|<
name|String
operator|>
name|builder
argument_list|()
expr_stmt|;
try|try
block|{
name|builder
operator|.
name|add
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected NullPointerException"
argument_list|)
expr_stmt|;
comment|// COV_NF_LINE
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|expected
parameter_list|)
block|{     }
name|builder
operator|=
name|this
operator|.
expr|<
name|String
operator|>
name|builder
argument_list|()
expr_stmt|;
try|try
block|{
name|builder
operator|.
name|add
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|null
argument_list|,
literal|"c"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected NullPointerException"
argument_list|)
expr_stmt|;
comment|// COV_NF_LINE
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testBuilderAddAllHandlesNullsCorrectly ()
specifier|public
name|void
name|testBuilderAddAllHandlesNullsCorrectly
parameter_list|()
block|{
name|ImmutableSet
operator|.
name|Builder
argument_list|<
name|String
argument_list|>
name|builder
init|=
name|this
operator|.
expr|<
name|String
operator|>
name|builder
argument_list|()
decl_stmt|;
try|try
block|{
name|builder
operator|.
name|addAll
argument_list|(
operator|(
name|Iterable
argument_list|<
name|String
argument_list|>
operator|)
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected NullPointerException"
argument_list|)
expr_stmt|;
comment|// COV_NF_LINE
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|expected
parameter_list|)
block|{     }
try|try
block|{
name|builder
operator|.
name|addAll
argument_list|(
operator|(
name|Iterator
argument_list|<
name|String
argument_list|>
operator|)
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected NullPointerException"
argument_list|)
expr_stmt|;
comment|// COV_NF_LINE
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|expected
parameter_list|)
block|{     }
name|builder
operator|=
name|this
operator|.
expr|<
name|String
operator|>
name|builder
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|listWithNulls
init|=
name|asList
argument_list|(
literal|"a"
argument_list|,
literal|null
argument_list|,
literal|"b"
argument_list|)
decl_stmt|;
try|try
block|{
name|builder
operator|.
name|addAll
argument_list|(
name|listWithNulls
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected NullPointerException"
argument_list|)
expr_stmt|;
comment|// COV_NF_LINE
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|expected
parameter_list|)
block|{     }
name|Iterable
argument_list|<
name|String
argument_list|>
name|iterableWithNulls
init|=
name|MinimalIterable
operator|.
name|of
argument_list|(
literal|"a"
argument_list|,
literal|null
argument_list|,
literal|"b"
argument_list|)
decl_stmt|;
try|try
block|{
name|builder
operator|.
name|addAll
argument_list|(
name|iterableWithNulls
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected NullPointerException"
argument_list|)
expr_stmt|;
comment|// COV_NF_LINE
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|expected
parameter_list|)
block|{     }
block|}
comment|/**    * Verify thread safety by using a collection whose size() may be inconsistent    * with the actual number of elements.  Tests using this method might fail in    * GWT because the GWT emulations might count on size() during copy.  It is    * safe to do so in GWT because javascript is single-threaded.    */
comment|// TODO(benyu): turn this into a test once all copyOf(Collection) are
comment|// thread-safe
annotation|@
name|GwtIncompatible
argument_list|(
literal|"GWT is single threaded"
argument_list|)
DECL|method|verifyThreadSafe ()
name|void
name|verifyThreadSafe
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|sample
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|delta
range|:
operator|new
name|int
index|[]
block|{
operator|-
literal|1
block|,
literal|0
block|,
literal|1
block|}
control|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sample
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Collection
argument_list|<
name|String
argument_list|>
name|misleading
init|=
name|Helpers
operator|.
name|misleadingSizeCollection
argument_list|(
name|delta
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|expected
init|=
name|sample
operator|.
name|subList
argument_list|(
literal|0
argument_list|,
name|i
argument_list|)
decl_stmt|;
name|misleading
operator|.
name|addAll
argument_list|(
name|expected
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"delta: "
operator|+
name|delta
operator|+
literal|" sample size: "
operator|+
name|i
argument_list|,
name|Sets
operator|.
name|newHashSet
argument_list|(
name|expected
argument_list|)
argument_list|,
name|copyOf
argument_list|(
name|misleading
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

