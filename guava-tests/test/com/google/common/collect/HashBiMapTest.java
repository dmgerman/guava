begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2007 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.collect
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtCompatible
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|IdentityHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**  * Tests for {@link HashBiMap}.  *  * @author Mike Bostock  */
end_comment

begin_class
annotation|@
name|GwtCompatible
DECL|class|HashBiMapTest
specifier|public
class|class
name|HashBiMapTest
extends|extends
name|AbstractBiMapTest
block|{
DECL|method|create ()
annotation|@
name|Override
specifier|protected
name|BiMap
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|create
parameter_list|()
block|{
return|return
name|HashBiMap
operator|.
name|create
argument_list|()
return|;
block|}
DECL|method|testCreate ()
specifier|public
name|void
name|testCreate
parameter_list|()
block|{
name|BiMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|bimap
init|=
name|HashBiMap
operator|.
name|create
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|bimap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|bimap
operator|.
name|put
argument_list|(
literal|"canada"
argument_list|,
literal|"dollar"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"dollar"
argument_list|,
name|bimap
operator|.
name|get
argument_list|(
literal|"canada"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"canada"
argument_list|,
name|bimap
operator|.
name|inverse
argument_list|()
operator|.
name|get
argument_list|(
literal|"dollar"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testMapConstructor ()
specifier|public
name|void
name|testMapConstructor
parameter_list|()
block|{
comment|/* Test with non-empty Map. */
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"canada"
argument_list|,
literal|"dollar"
argument_list|,
literal|"chile"
argument_list|,
literal|"peso"
argument_list|,
literal|"switzerland"
argument_list|,
literal|"franc"
argument_list|)
decl_stmt|;
name|HashBiMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|bimap
init|=
name|HashBiMap
operator|.
name|create
argument_list|(
name|map
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"dollar"
argument_list|,
name|bimap
operator|.
name|get
argument_list|(
literal|"canada"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"canada"
argument_list|,
name|bimap
operator|.
name|inverse
argument_list|()
operator|.
name|get
argument_list|(
literal|"dollar"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|field|N
specifier|private
specifier|static
specifier|final
name|int
name|N
init|=
literal|1000
decl_stmt|;
DECL|method|testBashIt ()
specifier|public
name|void
name|testBashIt
parameter_list|()
throws|throws
name|Exception
block|{
name|BiMap
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|bimap
init|=
name|HashBiMap
operator|.
name|create
argument_list|(
name|N
argument_list|)
decl_stmt|;
name|BiMap
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|inverse
init|=
name|bimap
operator|.
name|inverse
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|N
condition|;
name|i
operator|++
control|)
block|{
name|assertNull
argument_list|(
name|bimap
operator|.
name|put
argument_list|(
literal|2
operator|*
name|i
argument_list|,
literal|2
operator|*
name|i
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|N
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
literal|2
operator|*
name|i
operator|+
literal|1
argument_list|,
operator|(
name|int
operator|)
name|bimap
operator|.
name|get
argument_list|(
literal|2
operator|*
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|N
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
literal|2
operator|*
name|i
argument_list|,
operator|(
name|int
operator|)
name|inverse
operator|.
name|get
argument_list|(
literal|2
operator|*
name|i
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|N
condition|;
name|i
operator|++
control|)
block|{
name|int
name|oldValue
init|=
name|bimap
operator|.
name|get
argument_list|(
literal|2
operator|*
name|i
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
operator|*
name|i
operator|+
literal|1
argument_list|,
operator|(
name|int
operator|)
name|bimap
operator|.
name|put
argument_list|(
literal|2
operator|*
name|i
argument_list|,
name|oldValue
operator|-
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|N
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
literal|2
operator|*
name|i
operator|-
literal|1
argument_list|,
operator|(
name|int
operator|)
name|bimap
operator|.
name|get
argument_list|(
literal|2
operator|*
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|N
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
literal|2
operator|*
name|i
argument_list|,
operator|(
name|int
operator|)
name|inverse
operator|.
name|get
argument_list|(
literal|2
operator|*
name|i
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Set
argument_list|<
name|Entry
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
argument_list|>
name|entries
init|=
name|bimap
operator|.
name|entrySet
argument_list|()
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|entry
range|:
name|entries
control|)
block|{
name|entry
operator|.
name|setValue
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
operator|+
literal|2
operator|*
name|N
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|N
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
literal|2
operator|*
name|N
operator|+
literal|2
operator|*
name|i
operator|-
literal|1
argument_list|,
operator|(
name|int
operator|)
name|bimap
operator|.
name|get
argument_list|(
literal|2
operator|*
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// The next two tests verify that map entries are not accessed after they're
comment|// removed, since IdentityHashMap throws an exception when that occurs.
DECL|method|testIdentityKeySetIteratorRemove ()
specifier|public
name|void
name|testIdentityKeySetIteratorRemove
parameter_list|()
block|{
name|bimap
operator|=
operator|new
name|AbstractBiMap
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
argument_list|(
operator|new
name|IdentityHashMap
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
argument_list|()
argument_list|,
operator|new
name|IdentityHashMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|()
argument_list|)
block|{}
expr_stmt|;
name|putOneTwoThree
argument_list|()
expr_stmt|;
name|Iterator
argument_list|<
name|Integer
argument_list|>
name|iterator
init|=
name|bimap
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|iterator
operator|.
name|next
argument_list|()
expr_stmt|;
name|iterator
operator|.
name|next
argument_list|()
expr_stmt|;
name|iterator
operator|.
name|remove
argument_list|()
expr_stmt|;
name|iterator
operator|.
name|next
argument_list|()
expr_stmt|;
name|iterator
operator|.
name|remove
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|bimap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|bimap
operator|.
name|inverse
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testIdentityEntrySetIteratorRemove ()
specifier|public
name|void
name|testIdentityEntrySetIteratorRemove
parameter_list|()
block|{
name|bimap
operator|=
operator|new
name|AbstractBiMap
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
argument_list|(
operator|new
name|IdentityHashMap
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
argument_list|()
argument_list|,
operator|new
name|IdentityHashMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|()
argument_list|)
block|{}
expr_stmt|;
name|putOneTwoThree
argument_list|()
expr_stmt|;
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
argument_list|>
name|iterator
init|=
name|bimap
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|iterator
operator|.
name|next
argument_list|()
expr_stmt|;
name|iterator
operator|.
name|next
argument_list|()
expr_stmt|;
name|iterator
operator|.
name|remove
argument_list|()
expr_stmt|;
name|iterator
operator|.
name|next
argument_list|()
expr_stmt|;
name|iterator
operator|.
name|remove
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|bimap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|bimap
operator|.
name|inverse
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

