begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2007 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.collect
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|Helpers
operator|.
name|mapEntry
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
operator|.
name|counting
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
operator|.
name|toList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtCompatible
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtIncompatible
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|features
operator|.
name|CollectionFeature
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|features
operator|.
name|CollectionSize
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|features
operator|.
name|MapFeature
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|google
operator|.
name|BiMapTestSuiteBuilder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|google
operator|.
name|TestBiMapGenerator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|google
operator|.
name|TestStringBiMapGenerator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|errorprone
operator|.
name|annotations
operator|.
name|CanIgnoreReturnValue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestSuite
import|;
end_import

begin_import
import|import
name|org
operator|.
name|checkerframework
operator|.
name|checker
operator|.
name|nullness
operator|.
name|compatqual
operator|.
name|NullableDecl
import|;
end_import

begin_comment
comment|/**  * Tests for {@link HashBiMap}.  *  * @author Mike Bostock  */
end_comment

begin_class
annotation|@
name|GwtCompatible
argument_list|(
name|emulated
operator|=
literal|true
argument_list|)
DECL|class|HashBiMapTest
specifier|public
class|class
name|HashBiMapTest
extends|extends
name|TestCase
block|{
DECL|field|GENERATORS
specifier|private
specifier|static
specifier|final
name|ImmutableList
argument_list|<
name|HashBiMapGenerator
argument_list|>
name|GENERATORS
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
operator|new
name|HashBiMapGenerator
argument_list|()
argument_list|,
operator|new
name|HashBiMapJdkBackedGenerator
argument_list|()
argument_list|)
decl_stmt|;
DECL|class|HashBiMapGenerator
specifier|public
specifier|static
class|class
name|HashBiMapGenerator
extends|extends
name|TestStringBiMapGenerator
block|{
annotation|@
name|Override
DECL|method|create (Entry<String, String>[] entries)
specifier|protected
name|HashBiMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|create
parameter_list|(
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
index|[]
name|entries
parameter_list|)
block|{
name|HashBiMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|result
init|=
name|HashBiMap
operator|.
name|create
argument_list|()
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|entries
control|)
block|{
name|result
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
block|}
DECL|class|HashBiMapJdkBackedGenerator
specifier|private
specifier|static
specifier|final
class|class
name|HashBiMapJdkBackedGenerator
extends|extends
name|HashBiMapGenerator
block|{
annotation|@
name|Override
DECL|method|create (Entry<String, String>[] entries)
specifier|protected
name|HashBiMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|create
parameter_list|(
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
index|[]
name|entries
parameter_list|)
block|{
name|HashBiMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
name|super
operator|.
name|create
argument_list|(
name|entries
argument_list|)
decl_stmt|;
name|map
operator|.
name|switchToFloodProtection
argument_list|()
expr_stmt|;
return|return
name|map
return|;
block|}
block|}
annotation|@
name|GwtIncompatible
comment|// suite
DECL|method|suite ()
specifier|public
specifier|static
name|Test
name|suite
parameter_list|()
block|{
name|TestSuite
name|suite
init|=
operator|new
name|TestSuite
argument_list|()
decl_stmt|;
name|suite
operator|.
name|addTest
argument_list|(
name|BiMapTestSuiteBuilder
operator|.
name|using
argument_list|(
operator|new
name|HashBiMapGenerator
argument_list|()
argument_list|)
operator|.
name|named
argument_list|(
literal|"HashBiMap"
argument_list|)
operator|.
name|withFeatures
argument_list|(
name|CollectionSize
operator|.
name|ANY
argument_list|,
name|CollectionFeature
operator|.
name|SERIALIZABLE
argument_list|,
name|CollectionFeature
operator|.
name|SUPPORTS_ITERATOR_REMOVE
argument_list|,
name|CollectionFeature
operator|.
name|KNOWN_ORDER
argument_list|,
name|MapFeature
operator|.
name|ALLOWS_NULL_KEYS
argument_list|,
name|MapFeature
operator|.
name|ALLOWS_NULL_VALUES
argument_list|,
name|MapFeature
operator|.
name|ALLOWS_ANY_NULL_QUERIES
argument_list|,
name|MapFeature
operator|.
name|GENERAL_PURPOSE
argument_list|)
operator|.
name|createTestSuite
argument_list|()
argument_list|)
expr_stmt|;
name|suite
operator|.
name|addTest
argument_list|(
name|BiMapTestSuiteBuilder
operator|.
name|using
argument_list|(
operator|new
name|HashBiMapJdkBackedGenerator
argument_list|()
argument_list|)
operator|.
name|named
argument_list|(
literal|"HashBiMap [JDK backed]"
argument_list|)
operator|.
name|withFeatures
argument_list|(
name|CollectionSize
operator|.
name|ANY
argument_list|,
name|CollectionFeature
operator|.
name|SERIALIZABLE
argument_list|,
name|CollectionFeature
operator|.
name|SUPPORTS_ITERATOR_REMOVE
argument_list|,
name|CollectionFeature
operator|.
name|KNOWN_ORDER
argument_list|,
name|MapFeature
operator|.
name|ALLOWS_NULL_KEYS
argument_list|,
name|MapFeature
operator|.
name|ALLOWS_NULL_VALUES
argument_list|,
name|MapFeature
operator|.
name|ALLOWS_ANY_NULL_QUERIES
argument_list|,
name|MapFeature
operator|.
name|GENERAL_PURPOSE
argument_list|)
operator|.
name|createTestSuite
argument_list|()
argument_list|)
expr_stmt|;
name|suite
operator|.
name|addTestSuite
argument_list|(
name|HashBiMapTest
operator|.
name|class
argument_list|)
expr_stmt|;
return|return
name|suite
return|;
block|}
DECL|method|testMapConstructor ()
specifier|public
name|void
name|testMapConstructor
parameter_list|()
block|{
comment|/* Test with non-empty Map. */
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"canada"
argument_list|,
literal|"dollar"
argument_list|,
literal|"chile"
argument_list|,
literal|"peso"
argument_list|,
literal|"switzerland"
argument_list|,
literal|"franc"
argument_list|)
decl_stmt|;
name|HashBiMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|bimap
init|=
name|HashBiMap
operator|.
name|create
argument_list|(
name|map
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"dollar"
argument_list|,
name|bimap
operator|.
name|get
argument_list|(
literal|"canada"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"canada"
argument_list|,
name|bimap
operator|.
name|inverse
argument_list|()
operator|.
name|get
argument_list|(
literal|"dollar"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|field|N
specifier|private
specifier|static
specifier|final
name|int
name|N
init|=
literal|1000
decl_stmt|;
DECL|method|testBashIt ()
specifier|public
name|void
name|testBashIt
parameter_list|()
throws|throws
name|Exception
block|{
name|BiMap
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|bimap
init|=
name|HashBiMap
operator|.
name|create
argument_list|(
name|N
argument_list|)
decl_stmt|;
name|BiMap
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|inverse
init|=
name|bimap
operator|.
name|inverse
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|N
condition|;
name|i
operator|++
control|)
block|{
name|assertNull
argument_list|(
name|bimap
operator|.
name|put
argument_list|(
literal|2
operator|*
name|i
argument_list|,
literal|2
operator|*
name|i
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|N
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
literal|2
operator|*
name|i
operator|+
literal|1
argument_list|,
operator|(
name|int
operator|)
name|bimap
operator|.
name|get
argument_list|(
literal|2
operator|*
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|N
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
literal|2
operator|*
name|i
argument_list|,
operator|(
name|int
operator|)
name|inverse
operator|.
name|get
argument_list|(
literal|2
operator|*
name|i
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|N
condition|;
name|i
operator|++
control|)
block|{
name|int
name|oldValue
init|=
name|bimap
operator|.
name|get
argument_list|(
literal|2
operator|*
name|i
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
operator|*
name|i
operator|+
literal|1
argument_list|,
operator|(
name|int
operator|)
name|bimap
operator|.
name|put
argument_list|(
literal|2
operator|*
name|i
argument_list|,
name|oldValue
operator|-
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|N
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
literal|2
operator|*
name|i
operator|-
literal|1
argument_list|,
operator|(
name|int
operator|)
name|bimap
operator|.
name|get
argument_list|(
literal|2
operator|*
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|N
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
literal|2
operator|*
name|i
argument_list|,
operator|(
name|int
operator|)
name|inverse
operator|.
name|get
argument_list|(
literal|2
operator|*
name|i
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Set
argument_list|<
name|Entry
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
argument_list|>
name|entries
init|=
name|bimap
operator|.
name|entrySet
argument_list|()
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|entry
range|:
name|entries
control|)
block|{
name|entry
operator|.
name|setValue
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
operator|+
literal|2
operator|*
name|N
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|N
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
literal|2
operator|*
name|N
operator|+
literal|2
operator|*
name|i
operator|-
literal|1
argument_list|,
operator|(
name|int
operator|)
name|bimap
operator|.
name|get
argument_list|(
literal|2
operator|*
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testBiMapEntrySetIteratorRemove ()
specifier|public
name|void
name|testBiMapEntrySetIteratorRemove
parameter_list|()
block|{
for|for
control|(
name|TestBiMapGenerator
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|generator
range|:
name|GENERATORS
control|)
block|{
name|BiMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
name|generator
operator|.
name|create
argument_list|(
name|mapEntry
argument_list|(
literal|"1"
argument_list|,
literal|"one"
argument_list|)
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|entries
init|=
name|map
operator|.
name|entrySet
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|iterator
init|=
name|entries
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|entry
operator|.
name|setValue
argument_list|(
literal|"two"
argument_list|)
expr_stmt|;
comment|// changes the iterator's current entry value
name|assertEquals
argument_list|(
literal|"two"
argument_list|,
name|map
operator|.
name|get
argument_list|(
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1"
argument_list|,
name|map
operator|.
name|inverse
argument_list|()
operator|.
name|get
argument_list|(
literal|"two"
argument_list|)
argument_list|)
expr_stmt|;
name|iterator
operator|.
name|remove
argument_list|()
expr_stmt|;
comment|// removes the updated entry
name|assertTrue
argument_list|(
name|map
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testInsertionOrder ()
specifier|public
name|void
name|testInsertionOrder
parameter_list|()
block|{
for|for
control|(
name|TestBiMapGenerator
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|generator
range|:
name|GENERATORS
control|)
block|{
name|BiMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
name|generator
operator|.
name|create
argument_list|(
name|mapEntry
argument_list|(
literal|"foo"
argument_list|,
literal|"1"
argument_list|)
argument_list|,
name|mapEntry
argument_list|(
literal|"bar"
argument_list|,
literal|"2"
argument_list|)
argument_list|,
name|mapEntry
argument_list|(
literal|"quux"
argument_list|,
literal|"3"
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|map
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|"foo"
argument_list|,
literal|"1"
argument_list|,
literal|"bar"
argument_list|,
literal|"2"
argument_list|,
literal|"quux"
argument_list|,
literal|"3"
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|testInsertionOrderAfterRemoveFirst ()
specifier|public
name|void
name|testInsertionOrderAfterRemoveFirst
parameter_list|()
block|{
for|for
control|(
name|TestBiMapGenerator
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|generator
range|:
name|GENERATORS
control|)
block|{
name|BiMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
name|generator
operator|.
name|create
argument_list|(
name|mapEntry
argument_list|(
literal|"foo"
argument_list|,
literal|"1"
argument_list|)
argument_list|,
name|mapEntry
argument_list|(
literal|"bar"
argument_list|,
literal|"2"
argument_list|)
argument_list|,
name|mapEntry
argument_list|(
literal|"quux"
argument_list|,
literal|"3"
argument_list|)
argument_list|)
decl_stmt|;
name|map
operator|.
name|remove
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|map
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|"bar"
argument_list|,
literal|"2"
argument_list|,
literal|"quux"
argument_list|,
literal|"3"
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|testInsertionOrderAfterRemoveMiddle ()
specifier|public
name|void
name|testInsertionOrderAfterRemoveMiddle
parameter_list|()
block|{
for|for
control|(
name|TestBiMapGenerator
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|generator
range|:
name|GENERATORS
control|)
block|{
name|BiMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
name|generator
operator|.
name|create
argument_list|(
name|mapEntry
argument_list|(
literal|"foo"
argument_list|,
literal|"1"
argument_list|)
argument_list|,
name|mapEntry
argument_list|(
literal|"bar"
argument_list|,
literal|"2"
argument_list|)
argument_list|,
name|mapEntry
argument_list|(
literal|"quux"
argument_list|,
literal|"3"
argument_list|)
argument_list|)
decl_stmt|;
name|map
operator|.
name|remove
argument_list|(
literal|"bar"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|map
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|"foo"
argument_list|,
literal|"1"
argument_list|,
literal|"quux"
argument_list|,
literal|"3"
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|testInsertionOrderAfterRemoveLast ()
specifier|public
name|void
name|testInsertionOrderAfterRemoveLast
parameter_list|()
block|{
for|for
control|(
name|TestBiMapGenerator
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|generator
range|:
name|GENERATORS
control|)
block|{
name|BiMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
name|generator
operator|.
name|create
argument_list|(
name|mapEntry
argument_list|(
literal|"foo"
argument_list|,
literal|"1"
argument_list|)
argument_list|,
name|mapEntry
argument_list|(
literal|"bar"
argument_list|,
literal|"2"
argument_list|)
argument_list|,
name|mapEntry
argument_list|(
literal|"quux"
argument_list|,
literal|"3"
argument_list|)
argument_list|)
decl_stmt|;
name|map
operator|.
name|remove
argument_list|(
literal|"quux"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|map
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|"foo"
argument_list|,
literal|"1"
argument_list|,
literal|"bar"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|testInsertionOrderAfterForcePut ()
specifier|public
name|void
name|testInsertionOrderAfterForcePut
parameter_list|()
block|{
for|for
control|(
name|TestBiMapGenerator
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|generator
range|:
name|GENERATORS
control|)
block|{
name|BiMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
name|generator
operator|.
name|create
argument_list|(
name|mapEntry
argument_list|(
literal|"foo"
argument_list|,
literal|"1"
argument_list|)
argument_list|,
name|mapEntry
argument_list|(
literal|"bar"
argument_list|,
literal|"2"
argument_list|)
argument_list|,
name|mapEntry
argument_list|(
literal|"quux"
argument_list|,
literal|"3"
argument_list|)
argument_list|)
decl_stmt|;
name|map
operator|.
name|forcePut
argument_list|(
literal|"quux"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|map
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|"bar"
argument_list|,
literal|"2"
argument_list|,
literal|"quux"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|map
operator|.
name|inverse
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|"2"
argument_list|,
literal|"bar"
argument_list|,
literal|"1"
argument_list|,
literal|"quux"
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|testInsertionOrderAfterInverseForcePut ()
specifier|public
name|void
name|testInsertionOrderAfterInverseForcePut
parameter_list|()
block|{
for|for
control|(
name|TestBiMapGenerator
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|generator
range|:
name|GENERATORS
control|)
block|{
name|BiMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
name|generator
operator|.
name|create
argument_list|(
name|mapEntry
argument_list|(
literal|"foo"
argument_list|,
literal|"1"
argument_list|)
argument_list|,
name|mapEntry
argument_list|(
literal|"bar"
argument_list|,
literal|"2"
argument_list|)
argument_list|,
name|mapEntry
argument_list|(
literal|"quux"
argument_list|,
literal|"3"
argument_list|)
argument_list|)
decl_stmt|;
name|map
operator|.
name|inverse
argument_list|()
operator|.
name|forcePut
argument_list|(
literal|"1"
argument_list|,
literal|"quux"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|map
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|"bar"
argument_list|,
literal|"2"
argument_list|,
literal|"quux"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|map
operator|.
name|inverse
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|"2"
argument_list|,
literal|"bar"
argument_list|,
literal|"1"
argument_list|,
literal|"quux"
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|testInverseInsertionOrderAfterInverse ()
specifier|public
name|void
name|testInverseInsertionOrderAfterInverse
parameter_list|()
block|{
for|for
control|(
name|TestBiMapGenerator
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|generator
range|:
name|GENERATORS
control|)
block|{
name|BiMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
name|generator
operator|.
name|create
argument_list|(
name|mapEntry
argument_list|(
literal|"bar"
argument_list|,
literal|"2"
argument_list|)
argument_list|,
name|mapEntry
argument_list|(
literal|"quux"
argument_list|,
literal|"1"
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|map
operator|.
name|inverse
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|"2"
argument_list|,
literal|"bar"
argument_list|,
literal|"1"
argument_list|,
literal|"quux"
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|testInverseInsertionOrderAfterInverseForcePutPresentKey ()
specifier|public
name|void
name|testInverseInsertionOrderAfterInverseForcePutPresentKey
parameter_list|()
block|{
for|for
control|(
name|TestBiMapGenerator
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|generator
range|:
name|GENERATORS
control|)
block|{
name|BiMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
name|generator
operator|.
name|create
argument_list|(
name|mapEntry
argument_list|(
literal|"foo"
argument_list|,
literal|"1"
argument_list|)
argument_list|,
name|mapEntry
argument_list|(
literal|"bar"
argument_list|,
literal|"2"
argument_list|)
argument_list|,
name|mapEntry
argument_list|(
literal|"quux"
argument_list|,
literal|"3"
argument_list|)
argument_list|,
name|mapEntry
argument_list|(
literal|"nab"
argument_list|,
literal|"4"
argument_list|)
argument_list|)
decl_stmt|;
name|map
operator|.
name|inverse
argument_list|()
operator|.
name|forcePut
argument_list|(
literal|"4"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|map
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|"foo"
argument_list|,
literal|"1"
argument_list|,
literal|"bar"
argument_list|,
literal|"4"
argument_list|,
literal|"quux"
argument_list|,
literal|"3"
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|testInverseEntrySetValueNewKey ()
specifier|public
name|void
name|testInverseEntrySetValueNewKey
parameter_list|()
block|{
name|BiMap
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|map
init|=
name|HashBiMap
operator|.
name|create
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|1
argument_list|,
literal|"a"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|2
argument_list|,
literal|"b"
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|>
name|inverseEntryItr
init|=
name|map
operator|.
name|inverse
argument_list|()
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|Entry
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|entry
init|=
name|inverseEntryItr
operator|.
name|next
argument_list|()
decl_stmt|;
name|entry
operator|.
name|setValue
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Maps
operator|.
name|immutableEntry
argument_list|(
literal|"b"
argument_list|,
literal|2
argument_list|)
argument_list|,
name|inverseEntryItr
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|inverseEntryItr
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|map
operator|.
name|entrySet
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|Maps
operator|.
name|immutableEntry
argument_list|(
literal|2
argument_list|,
literal|"b"
argument_list|)
argument_list|,
name|Maps
operator|.
name|immutableEntry
argument_list|(
literal|3
argument_list|,
literal|"a"
argument_list|)
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
block|}
comment|/**    * A Comparable wrapper around a String which executes callbacks on calls to hashCode, equals, and    * compareTo.    */
DECL|class|CountsHashCodeAndEquals
specifier|private
specifier|static
class|class
name|CountsHashCodeAndEquals
implements|implements
name|Comparable
argument_list|<
name|CountsHashCodeAndEquals
argument_list|>
block|{
DECL|field|delegateString
specifier|private
specifier|final
name|String
name|delegateString
decl_stmt|;
DECL|field|onHashCode
specifier|private
specifier|final
name|Runnable
name|onHashCode
decl_stmt|;
DECL|field|onEquals
specifier|private
specifier|final
name|Runnable
name|onEquals
decl_stmt|;
DECL|field|onCompareTo
specifier|private
specifier|final
name|Runnable
name|onCompareTo
decl_stmt|;
DECL|method|CountsHashCodeAndEquals ( String delegateString, Runnable onHashCode, Runnable onEquals, Runnable onCompareTo)
name|CountsHashCodeAndEquals
parameter_list|(
name|String
name|delegateString
parameter_list|,
name|Runnable
name|onHashCode
parameter_list|,
name|Runnable
name|onEquals
parameter_list|,
name|Runnable
name|onCompareTo
parameter_list|)
block|{
name|this
operator|.
name|delegateString
operator|=
name|delegateString
expr_stmt|;
name|this
operator|.
name|onHashCode
operator|=
name|onHashCode
expr_stmt|;
name|this
operator|.
name|onEquals
operator|=
name|onEquals
expr_stmt|;
name|this
operator|.
name|onCompareTo
operator|=
name|onCompareTo
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|onHashCode
operator|.
name|run
argument_list|()
expr_stmt|;
return|return
name|delegateString
operator|.
name|hashCode
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|equals (@ullableDecl Object other)
specifier|public
name|boolean
name|equals
parameter_list|(
annotation|@
name|NullableDecl
name|Object
name|other
parameter_list|)
block|{
name|onEquals
operator|.
name|run
argument_list|()
expr_stmt|;
return|return
name|other
operator|instanceof
name|CountsHashCodeAndEquals
operator|&&
name|delegateString
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|CountsHashCodeAndEquals
operator|)
name|other
operator|)
operator|.
name|delegateString
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|compareTo (CountsHashCodeAndEquals o)
specifier|public
name|int
name|compareTo
parameter_list|(
name|CountsHashCodeAndEquals
name|o
parameter_list|)
block|{
name|onCompareTo
operator|.
name|run
argument_list|()
expr_stmt|;
return|return
name|delegateString
operator|.
name|compareTo
argument_list|(
name|o
operator|.
name|delegateString
argument_list|)
return|;
block|}
block|}
comment|/** A holder of counters for calls to hashCode, equals, and compareTo. */
DECL|class|CallsCounter
specifier|private
specifier|static
specifier|final
class|class
name|CallsCounter
block|{
DECL|field|hashCode
name|long
name|hashCode
decl_stmt|;
DECL|field|equals
name|long
name|equals
decl_stmt|;
DECL|field|compareTo
name|long
name|compareTo
decl_stmt|;
DECL|method|total ()
name|long
name|total
parameter_list|()
block|{
return|return
name|hashCode
operator|+
name|equals
operator|+
name|compareTo
return|;
block|}
DECL|method|zero ()
name|void
name|zero
parameter_list|()
block|{
name|hashCode
operator|=
literal|0
expr_stmt|;
name|equals
operator|=
literal|0
expr_stmt|;
name|compareTo
operator|=
literal|0
expr_stmt|;
block|}
block|}
comment|/** All the ways to create an ImmutableBiMap. */
DECL|enum|ConstructionPathway
enum|enum
name|ConstructionPathway
block|{
DECL|enumConstant|COPY_OF_MAP
name|COPY_OF_MAP
block|{
annotation|@
name|Override
name|BiMap
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|create
parameter_list|(
name|List
argument_list|<
name|?
extends|extends
name|Entry
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
argument_list|>
name|entries
parameter_list|,
name|CallsCounter
name|counter
parameter_list|)
block|{
name|Map
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|sourceMap
init|=
name|Maps
operator|.
name|newLinkedHashMap
argument_list|()
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|entry
range|:
name|entries
control|)
block|{
if|if
condition|(
name|sourceMap
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"duplicate key"
argument_list|)
throw|;
block|}
block|}
name|counter
operator|.
name|zero
argument_list|()
expr_stmt|;
return|return
name|HashBiMap
operator|.
name|create
argument_list|(
name|sourceMap
argument_list|)
return|;
block|}
block|}
block|,
DECL|enumConstant|PUT_ONE_BY_ONE
name|PUT_ONE_BY_ONE
block|{
annotation|@
name|Override
name|BiMap
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|create
parameter_list|(
name|List
argument_list|<
name|?
extends|extends
name|Entry
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
argument_list|>
name|entries
parameter_list|,
name|CallsCounter
name|counter
parameter_list|)
block|{
name|BiMap
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|map
init|=
name|HashBiMap
operator|.
name|create
argument_list|()
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|entry
range|:
name|entries
control|)
block|{
name|map
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|map
return|;
block|}
block|}
block|,
DECL|enumConstant|PUT_ALL_MAP
name|PUT_ALL_MAP
block|{
annotation|@
name|Override
name|BiMap
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|create
parameter_list|(
name|List
argument_list|<
name|?
extends|extends
name|Entry
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
argument_list|>
name|entries
parameter_list|,
name|CallsCounter
name|counter
parameter_list|)
block|{
name|Map
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|sourceMap
init|=
name|Maps
operator|.
name|newLinkedHashMap
argument_list|()
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|entry
range|:
name|entries
control|)
block|{
if|if
condition|(
name|sourceMap
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"duplicate key"
argument_list|)
throw|;
block|}
block|}
name|counter
operator|.
name|zero
argument_list|()
expr_stmt|;
name|BiMap
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|map
init|=
name|HashBiMap
operator|.
name|create
argument_list|()
decl_stmt|;
name|map
operator|.
name|putAll
argument_list|(
name|sourceMap
argument_list|)
expr_stmt|;
return|return
name|map
return|;
block|}
block|}
block|;
annotation|@
name|CanIgnoreReturnValue
DECL|method|create (List<? extends Entry<?, ?>> entries, CallsCounter counter)
specifier|abstract
name|BiMap
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|create
parameter_list|(
name|List
argument_list|<
name|?
extends|extends
name|Entry
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
argument_list|>
name|entries
parameter_list|,
name|CallsCounter
name|counter
parameter_list|)
function_decl|;
block|}
comment|/**    * Returns a list of objects with the same hash code, of size 2^power, counting calls to equals,    * hashCode, and compareTo in counter.    */
DECL|method|createAdversarialObjects (int power, CallsCounter counter)
specifier|static
name|List
argument_list|<
name|CountsHashCodeAndEquals
argument_list|>
name|createAdversarialObjects
parameter_list|(
name|int
name|power
parameter_list|,
name|CallsCounter
name|counter
parameter_list|)
block|{
name|String
name|str1
init|=
literal|"Aa"
decl_stmt|;
name|String
name|str2
init|=
literal|"BB"
decl_stmt|;
name|assertEquals
argument_list|(
name|str1
operator|.
name|hashCode
argument_list|()
argument_list|,
name|str2
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|haveSameHashes2
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|str1
argument_list|,
name|str2
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|CountsHashCodeAndEquals
argument_list|>
name|result
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|Lists
operator|.
name|transform
argument_list|(
name|Lists
operator|.
name|cartesianProduct
argument_list|(
name|Collections
operator|.
name|nCopies
argument_list|(
name|power
argument_list|,
name|haveSameHashes2
argument_list|)
argument_list|)
argument_list|,
name|strs
lambda|->
operator|new
name|CountsHashCodeAndEquals
argument_list|(
name|String
operator|.
name|join
argument_list|(
literal|""
argument_list|,
name|strs
argument_list|)
argument_list|,
parameter_list|()
lambda|->
name|counter
operator|.
name|hashCode
operator|++
argument_list|,
parameter_list|()
lambda|->
name|counter
operator|.
name|equals
operator|++
argument_list|,
parameter_list|()
lambda|->
name|counter
operator|.
name|compareTo
operator|++
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|result
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|delegateString
operator|.
name|hashCode
argument_list|()
argument_list|,
name|result
operator|.
name|get
argument_list|(
name|result
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
operator|.
name|delegateString
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
DECL|enum|AdversaryType
enum|enum
name|AdversaryType
block|{
DECL|enumConstant|ADVERSARIAL_KEYS
name|ADVERSARIAL_KEYS
block|{
annotation|@
name|Override
name|List
argument_list|<
name|?
extends|extends
name|Entry
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
argument_list|>
name|createAdversarialEntries
parameter_list|(
name|int
name|power
parameter_list|,
name|CallsCounter
name|counter
parameter_list|)
block|{
return|return
name|createAdversarialObjects
argument_list|(
name|power
argument_list|,
name|counter
argument_list|)
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|k
lambda|->
name|Maps
operator|.
name|immutableEntry
argument_list|(
name|k
argument_list|,
operator|new
name|Object
argument_list|()
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|toList
argument_list|()
argument_list|)
return|;
block|}
block|}
block|,
DECL|enumConstant|ADVERSARIAL_VALUES
name|ADVERSARIAL_VALUES
block|{
annotation|@
name|Override
name|List
argument_list|<
name|?
extends|extends
name|Entry
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
argument_list|>
name|createAdversarialEntries
parameter_list|(
name|int
name|power
parameter_list|,
name|CallsCounter
name|counter
parameter_list|)
block|{
return|return
name|createAdversarialObjects
argument_list|(
name|power
argument_list|,
name|counter
argument_list|)
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|k
lambda|->
name|Maps
operator|.
name|immutableEntry
argument_list|(
operator|new
name|Object
argument_list|()
argument_list|,
name|k
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|toList
argument_list|()
argument_list|)
return|;
block|}
block|}
block|,
DECL|enumConstant|ADVERSARIAL_KEYS_AND_VALUES
name|ADVERSARIAL_KEYS_AND_VALUES
block|{
annotation|@
name|Override
name|List
argument_list|<
name|?
extends|extends
name|Entry
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
argument_list|>
name|createAdversarialEntries
parameter_list|(
name|int
name|power
parameter_list|,
name|CallsCounter
name|counter
parameter_list|)
block|{
name|List
argument_list|<
name|?
argument_list|>
name|keys
init|=
name|createAdversarialObjects
argument_list|(
name|power
argument_list|,
name|counter
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|?
argument_list|>
name|values
init|=
name|createAdversarialObjects
argument_list|(
name|power
argument_list|,
name|counter
argument_list|)
decl_stmt|;
return|return
name|Streams
operator|.
name|zip
argument_list|(
name|keys
operator|.
name|stream
argument_list|()
argument_list|,
name|values
operator|.
name|stream
argument_list|()
argument_list|,
name|Maps
operator|::
name|immutableEntry
argument_list|)
operator|.
name|collect
argument_list|(
name|toList
argument_list|()
argument_list|)
return|;
block|}
block|}
block|;
DECL|method|createAdversarialEntries (int power, CallsCounter counter)
specifier|abstract
name|List
argument_list|<
name|?
extends|extends
name|Entry
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
argument_list|>
name|createAdversarialEntries
parameter_list|(
name|int
name|power
parameter_list|,
name|CallsCounter
name|counter
parameter_list|)
function_decl|;
block|}
annotation|@
name|GwtIncompatible
DECL|method|testResistsHashFloodingInConstruction ()
specifier|public
name|void
name|testResistsHashFloodingInConstruction
parameter_list|()
block|{
for|for
control|(
name|AdversaryType
name|adversary
range|:
name|AdversaryType
operator|.
name|values
argument_list|()
control|)
block|{
name|CallsCounter
name|smallCounter
init|=
operator|new
name|CallsCounter
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|?
extends|extends
name|Entry
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
argument_list|>
name|smallEntries
init|=
name|adversary
operator|.
name|createAdversarialEntries
argument_list|(
literal|10
argument_list|,
name|smallCounter
argument_list|)
decl_stmt|;
name|int
name|smallSize
init|=
name|smallEntries
operator|.
name|size
argument_list|()
decl_stmt|;
name|CallsCounter
name|largeCounter
init|=
operator|new
name|CallsCounter
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|?
extends|extends
name|Entry
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
argument_list|>
name|largeEntries
init|=
name|adversary
operator|.
name|createAdversarialEntries
argument_list|(
literal|15
argument_list|,
name|largeCounter
argument_list|)
decl_stmt|;
name|int
name|largeSize
init|=
name|largeEntries
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|ConstructionPathway
name|pathway
range|:
name|ConstructionPathway
operator|.
name|values
argument_list|()
control|)
block|{
name|smallCounter
operator|.
name|zero
argument_list|()
expr_stmt|;
name|pathway
operator|.
name|create
argument_list|(
name|smallEntries
argument_list|,
name|smallCounter
argument_list|)
expr_stmt|;
name|long
name|smallOps
init|=
name|smallCounter
operator|.
name|total
argument_list|()
decl_stmt|;
name|largeCounter
operator|.
name|zero
argument_list|()
expr_stmt|;
name|pathway
operator|.
name|create
argument_list|(
name|largeEntries
argument_list|,
name|largeCounter
argument_list|)
expr_stmt|;
name|long
name|largeOps
init|=
name|largeCounter
operator|.
name|total
argument_list|()
decl_stmt|;
name|double
name|ratio
init|=
operator|(
name|double
operator|)
name|largeOps
operator|/
name|smallOps
decl_stmt|;
name|assertThat
argument_list|(
name|ratio
argument_list|)
operator|.
name|named
argument_list|(
literal|"ratio of equals/hashCode/compareTo operations to build an HashBiMap with %s"
operator|+
literal|" via %s with %s entries versus %s entries"
argument_list|,
name|adversary
argument_list|,
name|pathway
argument_list|,
name|largeSize
argument_list|,
name|smallSize
argument_list|)
operator|.
name|isAtMost
argument_list|(
literal|2
operator|*
operator|(
name|largeSize
operator|*
name|Math
operator|.
name|log
argument_list|(
name|largeSize
argument_list|)
operator|)
operator|/
operator|(
name|smallSize
operator|*
name|Math
operator|.
name|log
argument_list|(
name|smallSize
argument_list|)
operator|)
argument_list|)
expr_stmt|;
comment|// allow up to 2x wobble in the constant factors
block|}
block|}
block|}
annotation|@
name|GwtIncompatible
DECL|method|testResistsHashFloodingOnForwardGet ()
specifier|public
name|void
name|testResistsHashFloodingOnForwardGet
parameter_list|()
block|{
for|for
control|(
name|AdversaryType
name|adversary
range|:
name|AdversaryType
operator|.
name|values
argument_list|()
control|)
block|{
name|CallsCounter
name|smallCounter
init|=
operator|new
name|CallsCounter
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|?
extends|extends
name|Entry
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
argument_list|>
name|smallEntries
init|=
name|adversary
operator|.
name|createAdversarialEntries
argument_list|(
literal|10
argument_list|,
name|smallCounter
argument_list|)
decl_stmt|;
name|BiMap
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|smallMap
init|=
name|ConstructionPathway
operator|.
name|PUT_ONE_BY_ONE
operator|.
name|create
argument_list|(
name|smallEntries
argument_list|,
name|smallCounter
argument_list|)
decl_stmt|;
name|int
name|smallSize
init|=
name|smallEntries
operator|.
name|size
argument_list|()
decl_stmt|;
name|long
name|smallOps
init|=
name|worstCaseQueryOperations
argument_list|(
name|smallMap
argument_list|,
name|smallCounter
argument_list|)
decl_stmt|;
name|CallsCounter
name|largeCounter
init|=
operator|new
name|CallsCounter
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|?
extends|extends
name|Entry
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
argument_list|>
name|largeEntries
init|=
name|adversary
operator|.
name|createAdversarialEntries
argument_list|(
literal|15
argument_list|,
name|largeCounter
argument_list|)
decl_stmt|;
name|BiMap
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|largeMap
init|=
name|ConstructionPathway
operator|.
name|PUT_ONE_BY_ONE
operator|.
name|create
argument_list|(
name|largeEntries
argument_list|,
name|largeCounter
argument_list|)
decl_stmt|;
name|int
name|largeSize
init|=
name|largeEntries
operator|.
name|size
argument_list|()
decl_stmt|;
name|long
name|largeOps
init|=
name|worstCaseQueryOperations
argument_list|(
name|largeMap
argument_list|,
name|largeCounter
argument_list|)
decl_stmt|;
if|if
condition|(
name|smallOps
operator|==
literal|0
operator|&&
name|largeOps
operator|==
literal|0
condition|)
block|{
continue|continue;
comment|// no queries on the CHCAE objects
block|}
name|double
name|ratio
init|=
operator|(
name|double
operator|)
name|largeOps
operator|/
name|smallOps
decl_stmt|;
name|assertThat
argument_list|(
name|ratio
argument_list|)
operator|.
name|named
argument_list|(
literal|"Ratio of worst case get operations for an HashBiMap with %s of size "
operator|+
literal|"%s versus %s"
argument_list|,
name|adversary
argument_list|,
name|largeSize
argument_list|,
name|smallSize
argument_list|)
operator|.
name|isAtMost
argument_list|(
literal|2
operator|*
name|Math
operator|.
name|log
argument_list|(
name|largeSize
argument_list|)
operator|/
name|Math
operator|.
name|log
argument_list|(
name|smallSize
argument_list|)
argument_list|)
expr_stmt|;
comment|// allow up to 2x wobble in the constant factors
block|}
block|}
annotation|@
name|GwtIncompatible
DECL|method|testResistsHashFloodingOnInverseGet ()
specifier|public
name|void
name|testResistsHashFloodingOnInverseGet
parameter_list|()
block|{
for|for
control|(
name|AdversaryType
name|adversary
range|:
name|AdversaryType
operator|.
name|values
argument_list|()
control|)
block|{
name|CallsCounter
name|smallCounter
init|=
operator|new
name|CallsCounter
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|?
extends|extends
name|Entry
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
argument_list|>
name|smallEntries
init|=
name|adversary
operator|.
name|createAdversarialEntries
argument_list|(
literal|10
argument_list|,
name|smallCounter
argument_list|)
decl_stmt|;
name|BiMap
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|smallMap
init|=
name|ConstructionPathway
operator|.
name|PUT_ONE_BY_ONE
operator|.
name|create
argument_list|(
name|smallEntries
argument_list|,
name|smallCounter
argument_list|)
decl_stmt|;
name|int
name|smallSize
init|=
name|smallEntries
operator|.
name|size
argument_list|()
decl_stmt|;
name|long
name|smallOps
init|=
name|worstCaseQueryOperations
argument_list|(
name|smallMap
operator|.
name|inverse
argument_list|()
argument_list|,
name|smallCounter
argument_list|)
decl_stmt|;
name|CallsCounter
name|largeCounter
init|=
operator|new
name|CallsCounter
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|?
extends|extends
name|Entry
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
argument_list|>
name|largeEntries
init|=
name|adversary
operator|.
name|createAdversarialEntries
argument_list|(
literal|15
argument_list|,
name|largeCounter
argument_list|)
decl_stmt|;
name|BiMap
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|largeMap
init|=
name|ConstructionPathway
operator|.
name|PUT_ONE_BY_ONE
operator|.
name|create
argument_list|(
name|largeEntries
argument_list|,
name|largeCounter
argument_list|)
decl_stmt|;
name|int
name|largeSize
init|=
name|largeEntries
operator|.
name|size
argument_list|()
decl_stmt|;
name|long
name|largeOps
init|=
name|worstCaseQueryOperations
argument_list|(
name|largeMap
operator|.
name|inverse
argument_list|()
argument_list|,
name|largeCounter
argument_list|)
decl_stmt|;
if|if
condition|(
name|smallOps
operator|==
literal|0
operator|&&
name|largeOps
operator|==
literal|0
condition|)
block|{
continue|continue;
comment|// no queries on the CHCAE objects
block|}
name|double
name|ratio
init|=
operator|(
name|double
operator|)
name|largeOps
operator|/
name|smallOps
decl_stmt|;
name|assertThat
argument_list|(
name|ratio
argument_list|)
operator|.
name|named
argument_list|(
literal|"Ratio of worst case get operations for an HashBiMap with %s of size "
operator|+
literal|"%s versus %s"
argument_list|,
name|adversary
argument_list|,
name|largeSize
argument_list|,
name|smallSize
argument_list|)
operator|.
name|isAtMost
argument_list|(
literal|2
operator|*
name|Math
operator|.
name|log
argument_list|(
name|largeSize
argument_list|)
operator|/
name|Math
operator|.
name|log
argument_list|(
name|smallSize
argument_list|)
argument_list|)
expr_stmt|;
comment|// allow up to 2x wobble in the constant factors
block|}
block|}
DECL|method|worstCaseQueryOperations (Map<?, ?> map, CallsCounter counter)
specifier|private
specifier|static
name|long
name|worstCaseQueryOperations
parameter_list|(
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|map
parameter_list|,
name|CallsCounter
name|counter
parameter_list|)
block|{
name|long
name|worstCalls
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Object
name|k
range|:
name|map
operator|.
name|keySet
argument_list|()
control|)
block|{
name|counter
operator|.
name|zero
argument_list|()
expr_stmt|;
name|Object
name|unused
init|=
name|map
operator|.
name|get
argument_list|(
name|k
argument_list|)
decl_stmt|;
name|worstCalls
operator|=
name|Math
operator|.
name|max
argument_list|(
name|worstCalls
argument_list|,
name|counter
operator|.
name|total
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|worstCalls
return|;
block|}
block|}
end_class

end_unit

