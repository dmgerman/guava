begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2007 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.collect
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertThat
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtCompatible
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtIncompatible
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|features
operator|.
name|CollectionFeature
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|features
operator|.
name|CollectionSize
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|features
operator|.
name|MapFeature
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|google
operator|.
name|BiMapTestSuiteBuilder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|google
operator|.
name|TestStringBiMapGenerator
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestSuite
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**  * Tests for {@link HashBiMap}.  *  * @author Mike Bostock  */
end_comment

begin_class
annotation|@
name|GwtCompatible
argument_list|(
name|emulated
operator|=
literal|true
argument_list|)
DECL|class|HashBiMapTest
specifier|public
class|class
name|HashBiMapTest
extends|extends
name|TestCase
block|{
DECL|class|HashBiMapGenerator
specifier|public
specifier|static
specifier|final
class|class
name|HashBiMapGenerator
extends|extends
name|TestStringBiMapGenerator
block|{
annotation|@
name|Override
DECL|method|create (Entry<String, String>[] entries)
specifier|protected
name|BiMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|create
parameter_list|(
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
index|[]
name|entries
parameter_list|)
block|{
name|BiMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|result
init|=
name|HashBiMap
operator|.
name|create
argument_list|()
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|entries
control|)
block|{
name|result
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
block|}
annotation|@
name|GwtIncompatible
comment|// suite
DECL|method|suite ()
specifier|public
specifier|static
name|Test
name|suite
parameter_list|()
block|{
name|TestSuite
name|suite
init|=
operator|new
name|TestSuite
argument_list|()
decl_stmt|;
name|suite
operator|.
name|addTest
argument_list|(
name|BiMapTestSuiteBuilder
operator|.
name|using
argument_list|(
operator|new
name|HashBiMapGenerator
argument_list|()
argument_list|)
operator|.
name|named
argument_list|(
literal|"HashBiMap"
argument_list|)
operator|.
name|withFeatures
argument_list|(
name|CollectionSize
operator|.
name|ANY
argument_list|,
name|CollectionFeature
operator|.
name|SERIALIZABLE
argument_list|,
name|CollectionFeature
operator|.
name|SUPPORTS_ITERATOR_REMOVE
argument_list|,
name|CollectionFeature
operator|.
name|KNOWN_ORDER
argument_list|,
name|MapFeature
operator|.
name|ALLOWS_NULL_KEYS
argument_list|,
name|MapFeature
operator|.
name|ALLOWS_NULL_VALUES
argument_list|,
name|MapFeature
operator|.
name|ALLOWS_ANY_NULL_QUERIES
argument_list|,
name|MapFeature
operator|.
name|GENERAL_PURPOSE
argument_list|)
operator|.
name|createTestSuite
argument_list|()
argument_list|)
expr_stmt|;
name|suite
operator|.
name|addTestSuite
argument_list|(
name|HashBiMapTest
operator|.
name|class
argument_list|)
expr_stmt|;
return|return
name|suite
return|;
block|}
DECL|method|testMapConstructor ()
specifier|public
name|void
name|testMapConstructor
parameter_list|()
block|{
comment|/* Test with non-empty Map. */
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"canada"
argument_list|,
literal|"dollar"
argument_list|,
literal|"chile"
argument_list|,
literal|"peso"
argument_list|,
literal|"switzerland"
argument_list|,
literal|"franc"
argument_list|)
decl_stmt|;
name|HashBiMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|bimap
init|=
name|HashBiMap
operator|.
name|create
argument_list|(
name|map
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"dollar"
argument_list|,
name|bimap
operator|.
name|get
argument_list|(
literal|"canada"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"canada"
argument_list|,
name|bimap
operator|.
name|inverse
argument_list|()
operator|.
name|get
argument_list|(
literal|"dollar"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|field|N
specifier|private
specifier|static
specifier|final
name|int
name|N
init|=
literal|1000
decl_stmt|;
DECL|method|testBashIt ()
specifier|public
name|void
name|testBashIt
parameter_list|()
throws|throws
name|Exception
block|{
name|BiMap
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|bimap
init|=
name|HashBiMap
operator|.
name|create
argument_list|(
name|N
argument_list|)
decl_stmt|;
name|BiMap
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|inverse
init|=
name|bimap
operator|.
name|inverse
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|N
condition|;
name|i
operator|++
control|)
block|{
name|assertNull
argument_list|(
name|bimap
operator|.
name|put
argument_list|(
literal|2
operator|*
name|i
argument_list|,
literal|2
operator|*
name|i
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|N
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
literal|2
operator|*
name|i
operator|+
literal|1
argument_list|,
operator|(
name|int
operator|)
name|bimap
operator|.
name|get
argument_list|(
literal|2
operator|*
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|N
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
literal|2
operator|*
name|i
argument_list|,
operator|(
name|int
operator|)
name|inverse
operator|.
name|get
argument_list|(
literal|2
operator|*
name|i
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|N
condition|;
name|i
operator|++
control|)
block|{
name|int
name|oldValue
init|=
name|bimap
operator|.
name|get
argument_list|(
literal|2
operator|*
name|i
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
operator|*
name|i
operator|+
literal|1
argument_list|,
operator|(
name|int
operator|)
name|bimap
operator|.
name|put
argument_list|(
literal|2
operator|*
name|i
argument_list|,
name|oldValue
operator|-
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|N
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
literal|2
operator|*
name|i
operator|-
literal|1
argument_list|,
operator|(
name|int
operator|)
name|bimap
operator|.
name|get
argument_list|(
literal|2
operator|*
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|N
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
literal|2
operator|*
name|i
argument_list|,
operator|(
name|int
operator|)
name|inverse
operator|.
name|get
argument_list|(
literal|2
operator|*
name|i
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Set
argument_list|<
name|Entry
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
argument_list|>
name|entries
init|=
name|bimap
operator|.
name|entrySet
argument_list|()
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|entry
range|:
name|entries
control|)
block|{
name|entry
operator|.
name|setValue
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
operator|+
literal|2
operator|*
name|N
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|N
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
literal|2
operator|*
name|N
operator|+
literal|2
operator|*
name|i
operator|-
literal|1
argument_list|,
operator|(
name|int
operator|)
name|bimap
operator|.
name|get
argument_list|(
literal|2
operator|*
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testBiMapEntrySetIteratorRemove ()
specifier|public
name|void
name|testBiMapEntrySetIteratorRemove
parameter_list|()
block|{
name|BiMap
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|map
init|=
name|HashBiMap
operator|.
name|create
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|1
argument_list|,
literal|"one"
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
argument_list|>
name|entries
init|=
name|map
operator|.
name|entrySet
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
argument_list|>
name|iterator
init|=
name|entries
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|Map
operator|.
name|Entry
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|entry
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|entry
operator|.
name|setValue
argument_list|(
literal|"two"
argument_list|)
expr_stmt|;
comment|// changes the iterator's current entry value
name|assertEquals
argument_list|(
literal|"two"
argument_list|,
name|map
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|1
argument_list|)
argument_list|,
name|map
operator|.
name|inverse
argument_list|()
operator|.
name|get
argument_list|(
literal|"two"
argument_list|)
argument_list|)
expr_stmt|;
name|iterator
operator|.
name|remove
argument_list|()
expr_stmt|;
comment|// removes the updated entry
name|assertTrue
argument_list|(
name|map
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
comment|// insertion order currently not preserved in GWT
DECL|method|testInsertionOrder ()
specifier|public
name|void
name|testInsertionOrder
parameter_list|()
block|{
name|BiMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|map
init|=
name|HashBiMap
operator|.
name|create
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"foo"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"bar"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"quux"
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|map
operator|.
name|entrySet
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|Maps
operator|.
name|immutableEntry
argument_list|(
literal|"foo"
argument_list|,
literal|1
argument_list|)
argument_list|,
name|Maps
operator|.
name|immutableEntry
argument_list|(
literal|"bar"
argument_list|,
literal|2
argument_list|)
argument_list|,
name|Maps
operator|.
name|immutableEntry
argument_list|(
literal|"quux"
argument_list|,
literal|3
argument_list|)
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
comment|// insertion order currently not preserved in GWT
DECL|method|testInsertionOrderAfterRemoveFirst ()
specifier|public
name|void
name|testInsertionOrderAfterRemoveFirst
parameter_list|()
block|{
name|BiMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|map
init|=
name|HashBiMap
operator|.
name|create
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"foo"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"bar"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"quux"
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|map
operator|.
name|remove
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|map
operator|.
name|entrySet
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|Maps
operator|.
name|immutableEntry
argument_list|(
literal|"bar"
argument_list|,
literal|2
argument_list|)
argument_list|,
name|Maps
operator|.
name|immutableEntry
argument_list|(
literal|"quux"
argument_list|,
literal|3
argument_list|)
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
comment|// insertion order currently not preserved in GWT
DECL|method|testInsertionOrderAfterRemoveMiddle ()
specifier|public
name|void
name|testInsertionOrderAfterRemoveMiddle
parameter_list|()
block|{
name|BiMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|map
init|=
name|HashBiMap
operator|.
name|create
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"foo"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"bar"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"quux"
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|map
operator|.
name|remove
argument_list|(
literal|"bar"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|map
operator|.
name|entrySet
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|Maps
operator|.
name|immutableEntry
argument_list|(
literal|"foo"
argument_list|,
literal|1
argument_list|)
argument_list|,
name|Maps
operator|.
name|immutableEntry
argument_list|(
literal|"quux"
argument_list|,
literal|3
argument_list|)
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
comment|// insertion order currently not preserved in GWT
DECL|method|testInsertionOrderAfterRemoveLast ()
specifier|public
name|void
name|testInsertionOrderAfterRemoveLast
parameter_list|()
block|{
name|BiMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|map
init|=
name|HashBiMap
operator|.
name|create
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"foo"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"bar"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"quux"
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|map
operator|.
name|remove
argument_list|(
literal|"quux"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|map
operator|.
name|entrySet
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|Maps
operator|.
name|immutableEntry
argument_list|(
literal|"foo"
argument_list|,
literal|1
argument_list|)
argument_list|,
name|Maps
operator|.
name|immutableEntry
argument_list|(
literal|"bar"
argument_list|,
literal|2
argument_list|)
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
comment|// insertion order currently not preserved in GWT
DECL|method|testInsertionOrderAfterForcePut ()
specifier|public
name|void
name|testInsertionOrderAfterForcePut
parameter_list|()
block|{
name|BiMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|map
init|=
name|HashBiMap
operator|.
name|create
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"foo"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"bar"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"quux"
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|map
operator|.
name|forcePut
argument_list|(
literal|"quux"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|map
operator|.
name|entrySet
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|Maps
operator|.
name|immutableEntry
argument_list|(
literal|"bar"
argument_list|,
literal|2
argument_list|)
argument_list|,
name|Maps
operator|.
name|immutableEntry
argument_list|(
literal|"quux"
argument_list|,
literal|1
argument_list|)
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
comment|// insertion order currently not preserved in GWT
DECL|method|testInsertionOrderAfterInverseForcePut ()
specifier|public
name|void
name|testInsertionOrderAfterInverseForcePut
parameter_list|()
block|{
name|BiMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|map
init|=
name|HashBiMap
operator|.
name|create
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"foo"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"bar"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"quux"
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|map
operator|.
name|inverse
argument_list|()
operator|.
name|forcePut
argument_list|(
literal|1
argument_list|,
literal|"quux"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|map
operator|.
name|entrySet
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|Maps
operator|.
name|immutableEntry
argument_list|(
literal|"bar"
argument_list|,
literal|2
argument_list|)
argument_list|,
name|Maps
operator|.
name|immutableEntry
argument_list|(
literal|"quux"
argument_list|,
literal|1
argument_list|)
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
comment|// insertion order currently not preserved in GWT
DECL|method|testInverseInsertionOrderAfterInverseForcePut ()
specifier|public
name|void
name|testInverseInsertionOrderAfterInverseForcePut
parameter_list|()
block|{
name|BiMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|map
init|=
name|HashBiMap
operator|.
name|create
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"foo"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"bar"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"quux"
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|map
operator|.
name|inverse
argument_list|()
operator|.
name|forcePut
argument_list|(
literal|1
argument_list|,
literal|"quux"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|map
operator|.
name|inverse
argument_list|()
operator|.
name|entrySet
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|Maps
operator|.
name|immutableEntry
argument_list|(
literal|2
argument_list|,
literal|"bar"
argument_list|)
argument_list|,
name|Maps
operator|.
name|immutableEntry
argument_list|(
literal|1
argument_list|,
literal|"quux"
argument_list|)
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
block|}
DECL|method|testInverseEntrySetValue ()
specifier|public
name|void
name|testInverseEntrySetValue
parameter_list|()
block|{
name|BiMap
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|map
init|=
name|HashBiMap
operator|.
name|create
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|1
argument_list|,
literal|"one"
argument_list|)
expr_stmt|;
name|Entry
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|inverseEntry
init|=
name|Iterables
operator|.
name|getOnlyElement
argument_list|(
name|map
operator|.
name|inverse
argument_list|()
operator|.
name|entrySet
argument_list|()
argument_list|)
decl_stmt|;
name|inverseEntry
operator|.
name|setValue
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|2
argument_list|)
argument_list|,
name|inverseEntry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

