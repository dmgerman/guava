begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2008 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.collect
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Objects
operator|.
name|equal
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Platform
operator|.
name|reduceExponentIfGwt
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Platform
operator|.
name|reduceIterationsIfGwt
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertThat
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtCompatible
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtIncompatible
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|IteratorFeature
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|IteratorTester
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|QueueTestSuiteBuilder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|TestStringQueueGenerator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|features
operator|.
name|CollectionFeature
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|features
operator|.
name|CollectionSize
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|testing
operator|.
name|NullPointerTester
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ConcurrentModificationException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NoSuchElementException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|PriorityQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Queue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestSuite
import|;
end_import

begin_comment
comment|/**  * Unit test for {@link MinMaxPriorityQueue}.  *  * @author Alexei Stolboushkin  * @author Sverre Sundsdal  */
end_comment

begin_class
annotation|@
name|GwtCompatible
argument_list|(
name|emulated
operator|=
literal|true
argument_list|)
DECL|class|MinMaxPriorityQueueTest
specifier|public
class|class
name|MinMaxPriorityQueueTest
extends|extends
name|TestCase
block|{
DECL|field|SOME_COMPARATOR
specifier|private
specifier|static
specifier|final
name|Ordering
argument_list|<
name|Integer
argument_list|>
name|SOME_COMPARATOR
init|=
name|Ordering
operator|.
name|natural
argument_list|()
operator|.
name|reverse
argument_list|()
decl_stmt|;
annotation|@
name|GwtIncompatible
comment|// suite
DECL|method|suite ()
specifier|public
specifier|static
name|Test
name|suite
parameter_list|()
block|{
name|TestSuite
name|suite
init|=
operator|new
name|TestSuite
argument_list|()
decl_stmt|;
name|suite
operator|.
name|addTestSuite
argument_list|(
name|MinMaxPriorityQueueTest
operator|.
name|class
argument_list|)
expr_stmt|;
name|suite
operator|.
name|addTest
argument_list|(
name|QueueTestSuiteBuilder
operator|.
name|using
argument_list|(
operator|new
name|TestStringQueueGenerator
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|Queue
argument_list|<
name|String
argument_list|>
name|create
parameter_list|(
name|String
index|[]
name|elements
parameter_list|)
block|{
return|return
name|MinMaxPriorityQueue
operator|.
name|create
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|elements
argument_list|)
argument_list|)
return|;
block|}
block|}
argument_list|)
operator|.
name|named
argument_list|(
literal|"MinMaxPriorityQueue"
argument_list|)
operator|.
name|withFeatures
argument_list|(
name|CollectionSize
operator|.
name|ANY
argument_list|,
name|CollectionFeature
operator|.
name|GENERAL_PURPOSE
argument_list|)
operator|.
name|createTestSuite
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|suite
return|;
block|}
comment|// Overkill alert!  Test all combinations of 0-2 options during creation.
DECL|method|testCreation_simple ()
specifier|public
name|void
name|testCreation_simple
parameter_list|()
block|{
name|MinMaxPriorityQueue
argument_list|<
name|Integer
argument_list|>
name|queue
init|=
name|MinMaxPriorityQueue
operator|.
name|create
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|11
argument_list|,
name|queue
operator|.
name|capacity
argument_list|()
argument_list|)
expr_stmt|;
name|checkUnbounded
argument_list|(
name|queue
argument_list|)
expr_stmt|;
name|checkNatural
argument_list|(
name|queue
argument_list|)
expr_stmt|;
block|}
DECL|method|testCreation_comparator ()
specifier|public
name|void
name|testCreation_comparator
parameter_list|()
block|{
name|MinMaxPriorityQueue
argument_list|<
name|Integer
argument_list|>
name|queue
init|=
name|MinMaxPriorityQueue
operator|.
name|orderedBy
argument_list|(
name|SOME_COMPARATOR
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|11
argument_list|,
name|queue
operator|.
name|capacity
argument_list|()
argument_list|)
expr_stmt|;
name|checkUnbounded
argument_list|(
name|queue
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|SOME_COMPARATOR
argument_list|,
name|queue
operator|.
name|comparator
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testCreation_expectedSize ()
specifier|public
name|void
name|testCreation_expectedSize
parameter_list|()
block|{
name|MinMaxPriorityQueue
argument_list|<
name|Integer
argument_list|>
name|queue
init|=
name|MinMaxPriorityQueue
operator|.
name|expectedSize
argument_list|(
literal|8
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|8
argument_list|,
name|queue
operator|.
name|capacity
argument_list|()
argument_list|)
expr_stmt|;
name|checkUnbounded
argument_list|(
name|queue
argument_list|)
expr_stmt|;
name|checkNatural
argument_list|(
name|queue
argument_list|)
expr_stmt|;
block|}
DECL|method|testCreation_expectedSize_comparator ()
specifier|public
name|void
name|testCreation_expectedSize_comparator
parameter_list|()
block|{
name|MinMaxPriorityQueue
argument_list|<
name|Integer
argument_list|>
name|queue
init|=
name|MinMaxPriorityQueue
operator|.
name|orderedBy
argument_list|(
name|SOME_COMPARATOR
argument_list|)
operator|.
name|expectedSize
argument_list|(
literal|8
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|8
argument_list|,
name|queue
operator|.
name|capacity
argument_list|()
argument_list|)
expr_stmt|;
name|checkUnbounded
argument_list|(
name|queue
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|SOME_COMPARATOR
argument_list|,
name|queue
operator|.
name|comparator
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testCreation_maximumSize ()
specifier|public
name|void
name|testCreation_maximumSize
parameter_list|()
block|{
name|MinMaxPriorityQueue
argument_list|<
name|Integer
argument_list|>
name|queue
init|=
name|MinMaxPriorityQueue
operator|.
name|maximumSize
argument_list|(
literal|42
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|11
argument_list|,
name|queue
operator|.
name|capacity
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|42
argument_list|,
name|queue
operator|.
name|maximumSize
argument_list|)
expr_stmt|;
name|checkNatural
argument_list|(
name|queue
argument_list|)
expr_stmt|;
block|}
DECL|method|testCreation_comparator_maximumSize ()
specifier|public
name|void
name|testCreation_comparator_maximumSize
parameter_list|()
block|{
name|MinMaxPriorityQueue
argument_list|<
name|Integer
argument_list|>
name|queue
init|=
name|MinMaxPriorityQueue
operator|.
name|orderedBy
argument_list|(
name|SOME_COMPARATOR
argument_list|)
operator|.
name|maximumSize
argument_list|(
literal|42
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|11
argument_list|,
name|queue
operator|.
name|capacity
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|42
argument_list|,
name|queue
operator|.
name|maximumSize
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|SOME_COMPARATOR
argument_list|,
name|queue
operator|.
name|comparator
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testCreation_expectedSize_maximumSize ()
specifier|public
name|void
name|testCreation_expectedSize_maximumSize
parameter_list|()
block|{
name|MinMaxPriorityQueue
argument_list|<
name|Integer
argument_list|>
name|queue
init|=
name|MinMaxPriorityQueue
operator|.
name|expectedSize
argument_list|(
literal|8
argument_list|)
operator|.
name|maximumSize
argument_list|(
literal|42
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|8
argument_list|,
name|queue
operator|.
name|capacity
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|42
argument_list|,
name|queue
operator|.
name|maximumSize
argument_list|)
expr_stmt|;
name|checkNatural
argument_list|(
name|queue
argument_list|)
expr_stmt|;
block|}
DECL|field|NUMBERS
specifier|private
specifier|static
specifier|final
name|ImmutableList
argument_list|<
name|Integer
argument_list|>
name|NUMBERS
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
literal|4
argument_list|,
literal|8
argument_list|,
literal|15
argument_list|,
literal|16
argument_list|,
literal|23
argument_list|,
literal|42
argument_list|)
decl_stmt|;
DECL|method|testCreation_withContents ()
specifier|public
name|void
name|testCreation_withContents
parameter_list|()
block|{
name|MinMaxPriorityQueue
argument_list|<
name|Integer
argument_list|>
name|queue
init|=
name|MinMaxPriorityQueue
operator|.
name|create
argument_list|(
name|NUMBERS
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|queue
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|11
argument_list|,
name|queue
operator|.
name|capacity
argument_list|()
argument_list|)
expr_stmt|;
name|checkUnbounded
argument_list|(
name|queue
argument_list|)
expr_stmt|;
name|checkNatural
argument_list|(
name|queue
argument_list|)
expr_stmt|;
block|}
DECL|method|testCreation_comparator_withContents ()
specifier|public
name|void
name|testCreation_comparator_withContents
parameter_list|()
block|{
name|MinMaxPriorityQueue
argument_list|<
name|Integer
argument_list|>
name|queue
init|=
name|MinMaxPriorityQueue
operator|.
name|orderedBy
argument_list|(
name|SOME_COMPARATOR
argument_list|)
operator|.
name|create
argument_list|(
name|NUMBERS
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|queue
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|11
argument_list|,
name|queue
operator|.
name|capacity
argument_list|()
argument_list|)
expr_stmt|;
name|checkUnbounded
argument_list|(
name|queue
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|SOME_COMPARATOR
argument_list|,
name|queue
operator|.
name|comparator
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testCreation_expectedSize_withContents ()
specifier|public
name|void
name|testCreation_expectedSize_withContents
parameter_list|()
block|{
name|MinMaxPriorityQueue
argument_list|<
name|Integer
argument_list|>
name|queue
init|=
name|MinMaxPriorityQueue
operator|.
name|expectedSize
argument_list|(
literal|8
argument_list|)
operator|.
name|create
argument_list|(
name|NUMBERS
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|queue
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|8
argument_list|,
name|queue
operator|.
name|capacity
argument_list|()
argument_list|)
expr_stmt|;
name|checkUnbounded
argument_list|(
name|queue
argument_list|)
expr_stmt|;
name|checkNatural
argument_list|(
name|queue
argument_list|)
expr_stmt|;
block|}
DECL|method|testCreation_maximumSize_withContents ()
specifier|public
name|void
name|testCreation_maximumSize_withContents
parameter_list|()
block|{
name|MinMaxPriorityQueue
argument_list|<
name|Integer
argument_list|>
name|queue
init|=
name|MinMaxPriorityQueue
operator|.
name|maximumSize
argument_list|(
literal|42
argument_list|)
operator|.
name|create
argument_list|(
name|NUMBERS
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|queue
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|11
argument_list|,
name|queue
operator|.
name|capacity
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|42
argument_list|,
name|queue
operator|.
name|maximumSize
argument_list|)
expr_stmt|;
name|checkNatural
argument_list|(
name|queue
argument_list|)
expr_stmt|;
block|}
comment|// Now test everything at once
DECL|method|testCreation_allOptions ()
specifier|public
name|void
name|testCreation_allOptions
parameter_list|()
block|{
name|MinMaxPriorityQueue
argument_list|<
name|Integer
argument_list|>
name|queue
init|=
name|MinMaxPriorityQueue
operator|.
name|orderedBy
argument_list|(
name|SOME_COMPARATOR
argument_list|)
operator|.
name|expectedSize
argument_list|(
literal|8
argument_list|)
operator|.
name|maximumSize
argument_list|(
literal|42
argument_list|)
operator|.
name|create
argument_list|(
name|NUMBERS
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|queue
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|8
argument_list|,
name|queue
operator|.
name|capacity
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|42
argument_list|,
name|queue
operator|.
name|maximumSize
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|SOME_COMPARATOR
argument_list|,
name|queue
operator|.
name|comparator
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// TODO: tests that check the weird interplay between expected size,
comment|// maximum size, size of initial contents, default capacity...
DECL|method|checkNatural (MinMaxPriorityQueue<Integer> queue)
specifier|private
specifier|static
name|void
name|checkNatural
parameter_list|(
name|MinMaxPriorityQueue
argument_list|<
name|Integer
argument_list|>
name|queue
parameter_list|)
block|{
name|assertSame
argument_list|(
name|Ordering
operator|.
name|natural
argument_list|()
argument_list|,
name|queue
operator|.
name|comparator
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|checkUnbounded (MinMaxPriorityQueue<Integer> queue)
specifier|private
specifier|static
name|void
name|checkUnbounded
parameter_list|(
name|MinMaxPriorityQueue
argument_list|<
name|Integer
argument_list|>
name|queue
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
name|queue
operator|.
name|maximumSize
argument_list|)
expr_stmt|;
block|}
DECL|method|testHeapIntact ()
specifier|public
name|void
name|testHeapIntact
parameter_list|()
block|{
name|Random
name|random
init|=
operator|new
name|Random
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|int
name|heapSize
init|=
literal|99
decl_stmt|;
name|int
name|numberOfModifications
init|=
literal|100
decl_stmt|;
name|MinMaxPriorityQueue
argument_list|<
name|Integer
argument_list|>
name|mmHeap
init|=
name|MinMaxPriorityQueue
operator|.
name|expectedSize
argument_list|(
name|heapSize
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
comment|/*      * this map would contain the same exact elements as the MinMaxHeap; the      * value in the map is the number of occurrences of the key.      */
name|SortedMap
argument_list|<
name|Integer
argument_list|,
name|AtomicInteger
argument_list|>
name|replica
init|=
name|Maps
operator|.
name|newTreeMap
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Empty heap should be OK"
argument_list|,
name|mmHeap
operator|.
name|isIntact
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|heapSize
condition|;
name|i
operator|++
control|)
block|{
name|int
name|randomInt
init|=
name|random
operator|.
name|nextInt
argument_list|()
decl_stmt|;
name|mmHeap
operator|.
name|offer
argument_list|(
name|randomInt
argument_list|)
expr_stmt|;
name|insertIntoReplica
argument_list|(
name|replica
argument_list|,
name|randomInt
argument_list|)
expr_stmt|;
block|}
name|assertIntact
argument_list|(
name|mmHeap
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|heapSize
argument_list|,
name|mmHeap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|currentHeapSize
init|=
name|heapSize
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numberOfModifications
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|random
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
comment|/* insert a new element */
name|int
name|randomInt
init|=
name|random
operator|.
name|nextInt
argument_list|()
decl_stmt|;
name|mmHeap
operator|.
name|offer
argument_list|(
name|randomInt
argument_list|)
expr_stmt|;
name|insertIntoReplica
argument_list|(
name|replica
argument_list|,
name|randomInt
argument_list|)
expr_stmt|;
name|currentHeapSize
operator|++
expr_stmt|;
block|}
else|else
block|{
comment|/* remove either min or max */
if|if
condition|(
name|random
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
name|removeMinFromReplica
argument_list|(
name|replica
argument_list|,
name|mmHeap
operator|.
name|poll
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|removeMaxFromReplica
argument_list|(
name|replica
argument_list|,
name|mmHeap
operator|.
name|pollLast
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Integer
name|v
range|:
name|replica
operator|.
name|keySet
argument_list|()
control|)
block|{
name|assertThat
argument_list|(
name|mmHeap
argument_list|)
operator|.
name|contains
argument_list|(
name|v
argument_list|)
expr_stmt|;
block|}
name|assertIntact
argument_list|(
name|mmHeap
argument_list|)
expr_stmt|;
name|currentHeapSize
operator|--
expr_stmt|;
name|assertEquals
argument_list|(
name|currentHeapSize
argument_list|,
name|mmHeap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|assertEquals
argument_list|(
name|currentHeapSize
argument_list|,
name|mmHeap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertIntact
argument_list|(
name|mmHeap
argument_list|)
expr_stmt|;
block|}
DECL|method|testSmall ()
specifier|public
name|void
name|testSmall
parameter_list|()
block|{
name|MinMaxPriorityQueue
argument_list|<
name|Integer
argument_list|>
name|mmHeap
init|=
name|MinMaxPriorityQueue
operator|.
name|create
argument_list|()
decl_stmt|;
name|mmHeap
operator|.
name|add
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|mmHeap
operator|.
name|add
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|mmHeap
operator|.
name|add
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|mmHeap
operator|.
name|add
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
operator|(
name|int
operator|)
name|mmHeap
operator|.
name|pollLast
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
operator|(
name|int
operator|)
name|mmHeap
operator|.
name|peekLast
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
operator|(
name|int
operator|)
name|mmHeap
operator|.
name|pollLast
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
operator|(
name|int
operator|)
name|mmHeap
operator|.
name|peek
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
operator|(
name|int
operator|)
name|mmHeap
operator|.
name|peekLast
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
operator|(
name|int
operator|)
name|mmHeap
operator|.
name|pollLast
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
operator|(
name|int
operator|)
name|mmHeap
operator|.
name|peek
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
operator|(
name|int
operator|)
name|mmHeap
operator|.
name|peekLast
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
operator|(
name|int
operator|)
name|mmHeap
operator|.
name|pollLast
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|mmHeap
operator|.
name|peek
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|mmHeap
operator|.
name|peekLast
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|mmHeap
operator|.
name|pollLast
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testSmallMinHeap ()
specifier|public
name|void
name|testSmallMinHeap
parameter_list|()
block|{
name|MinMaxPriorityQueue
argument_list|<
name|Integer
argument_list|>
name|mmHeap
init|=
name|MinMaxPriorityQueue
operator|.
name|create
argument_list|()
decl_stmt|;
name|mmHeap
operator|.
name|add
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|mmHeap
operator|.
name|add
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|mmHeap
operator|.
name|add
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
operator|(
name|int
operator|)
name|mmHeap
operator|.
name|peek
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
operator|(
name|int
operator|)
name|mmHeap
operator|.
name|poll
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
operator|(
name|int
operator|)
name|mmHeap
operator|.
name|peekLast
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
operator|(
name|int
operator|)
name|mmHeap
operator|.
name|peek
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
operator|(
name|int
operator|)
name|mmHeap
operator|.
name|poll
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
operator|(
name|int
operator|)
name|mmHeap
operator|.
name|peekLast
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
operator|(
name|int
operator|)
name|mmHeap
operator|.
name|peek
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
operator|(
name|int
operator|)
name|mmHeap
operator|.
name|poll
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|mmHeap
operator|.
name|peekLast
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|mmHeap
operator|.
name|peek
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|mmHeap
operator|.
name|poll
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testRemove ()
specifier|public
name|void
name|testRemove
parameter_list|()
block|{
name|MinMaxPriorityQueue
argument_list|<
name|Integer
argument_list|>
name|mmHeap
init|=
name|MinMaxPriorityQueue
operator|.
name|create
argument_list|()
decl_stmt|;
name|mmHeap
operator|.
name|addAll
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|,
literal|47
argument_list|,
literal|1
argument_list|,
literal|5
argument_list|,
literal|3
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Heap is not intact initally"
argument_list|,
name|mmHeap
operator|.
name|isIntact
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|9
argument_list|,
name|mmHeap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|mmHeap
operator|.
name|remove
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|8
argument_list|,
name|mmHeap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Heap is not intact after remove()"
argument_list|,
name|mmHeap
operator|.
name|isIntact
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|47
argument_list|,
operator|(
name|int
operator|)
name|mmHeap
operator|.
name|pollLast
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
operator|(
name|int
operator|)
name|mmHeap
operator|.
name|pollLast
argument_list|()
argument_list|)
expr_stmt|;
name|mmHeap
operator|.
name|removeAll
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|2
argument_list|,
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|mmHeap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Heap is not intact after removeAll()"
argument_list|,
name|mmHeap
operator|.
name|isIntact
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testContains ()
specifier|public
name|void
name|testContains
parameter_list|()
block|{
name|MinMaxPriorityQueue
argument_list|<
name|Integer
argument_list|>
name|mmHeap
init|=
name|MinMaxPriorityQueue
operator|.
name|create
argument_list|()
decl_stmt|;
name|mmHeap
operator|.
name|addAll
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|mmHeap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Heap does not contain null"
argument_list|,
name|mmHeap
operator|.
name|contains
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Heap does not contain 3"
argument_list|,
name|mmHeap
operator|.
name|contains
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Heap does not contain 3"
argument_list|,
name|mmHeap
operator|.
name|remove
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|mmHeap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Heap is not intact after remove()"
argument_list|,
name|mmHeap
operator|.
name|isIntact
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Heap contains two 1's"
argument_list|,
name|mmHeap
operator|.
name|contains
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Heap contains two 1's"
argument_list|,
name|mmHeap
operator|.
name|remove
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Heap contains 1"
argument_list|,
name|mmHeap
operator|.
name|contains
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Heap contains 1"
argument_list|,
name|mmHeap
operator|.
name|remove
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Heap does not contain 1"
argument_list|,
name|mmHeap
operator|.
name|contains
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Heap contains 2"
argument_list|,
name|mmHeap
operator|.
name|remove
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|mmHeap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Heap does not contain anything"
argument_list|,
name|mmHeap
operator|.
name|contains
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Heap does not contain anything"
argument_list|,
name|mmHeap
operator|.
name|remove
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testIteratorPastEndException ()
specifier|public
name|void
name|testIteratorPastEndException
parameter_list|()
block|{
name|MinMaxPriorityQueue
argument_list|<
name|Integer
argument_list|>
name|mmHeap
init|=
name|MinMaxPriorityQueue
operator|.
name|create
argument_list|()
decl_stmt|;
name|mmHeap
operator|.
name|addAll
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|Integer
argument_list|>
name|it
init|=
name|mmHeap
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Iterator has reached end prematurely"
argument_list|,
name|it
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
try|try
block|{
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"No exception thrown when iterating past end of heap"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchElementException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testIteratorConcurrentModification ()
specifier|public
name|void
name|testIteratorConcurrentModification
parameter_list|()
block|{
name|MinMaxPriorityQueue
argument_list|<
name|Integer
argument_list|>
name|mmHeap
init|=
name|MinMaxPriorityQueue
operator|.
name|create
argument_list|()
decl_stmt|;
name|mmHeap
operator|.
name|addAll
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|Integer
argument_list|>
name|it
init|=
name|mmHeap
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Iterator has reached end prematurely"
argument_list|,
name|it
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
name|mmHeap
operator|.
name|remove
argument_list|(
literal|4
argument_list|)
expr_stmt|;
try|try
block|{
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"No exception thrown when iterating a modified heap"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ConcurrentModificationException
name|expected
parameter_list|)
block|{     }
block|}
comment|/** Tests a failure caused by fix to childless uncle issue. */
DECL|method|testIteratorRegressionChildlessUncle ()
specifier|public
name|void
name|testIteratorRegressionChildlessUncle
parameter_list|()
block|{
specifier|final
name|ArrayList
argument_list|<
name|Integer
argument_list|>
name|initial
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|1
argument_list|,
literal|15
argument_list|,
literal|13
argument_list|,
literal|8
argument_list|,
literal|9
argument_list|,
literal|10
argument_list|,
literal|11
argument_list|,
literal|14
argument_list|)
decl_stmt|;
name|MinMaxPriorityQueue
argument_list|<
name|Integer
argument_list|>
name|q
init|=
name|MinMaxPriorityQueue
operator|.
name|create
argument_list|(
name|initial
argument_list|)
decl_stmt|;
name|assertIntact
argument_list|(
name|q
argument_list|)
expr_stmt|;
name|q
operator|.
name|remove
argument_list|(
literal|9
argument_list|)
expr_stmt|;
name|q
operator|.
name|remove
argument_list|(
literal|11
argument_list|)
expr_stmt|;
name|q
operator|.
name|remove
argument_list|(
literal|10
argument_list|)
expr_stmt|;
comment|// Now we're in the critical state: [1, 15, 13, 8, 14]
comment|// Removing 8 while iterating caused duplicates in iteration result.
name|List
argument_list|<
name|Integer
argument_list|>
name|result
init|=
name|Lists
operator|.
name|newArrayListWithCapacity
argument_list|(
name|initial
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Integer
argument_list|>
name|iter
init|=
name|q
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Integer
name|value
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|result
operator|.
name|add
argument_list|(
name|value
argument_list|)
expr_stmt|;
if|if
condition|(
name|value
operator|==
literal|8
condition|)
block|{
name|iter
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
name|assertIntact
argument_list|(
name|q
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|result
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|1
argument_list|,
literal|15
argument_list|,
literal|13
argument_list|,
literal|8
argument_list|,
literal|14
argument_list|)
expr_stmt|;
block|}
comment|/**    * This tests a special case of the removeAt() call. Moving an element sideways on the heap could    * break the invariants. Sometimes we need to bubble an element up instead of trickling down. See    * implementation.    */
DECL|method|testInvalidatingRemove ()
specifier|public
name|void
name|testInvalidatingRemove
parameter_list|()
block|{
name|MinMaxPriorityQueue
argument_list|<
name|Integer
argument_list|>
name|mmHeap
init|=
name|MinMaxPriorityQueue
operator|.
name|create
argument_list|()
decl_stmt|;
name|mmHeap
operator|.
name|addAll
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|1
argument_list|,
literal|20
argument_list|,
literal|1000
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|30
argument_list|,
literal|40
argument_list|,
literal|10
argument_list|,
literal|11
argument_list|,
literal|12
argument_list|,
literal|13
argument_list|,
literal|300
argument_list|,
literal|400
argument_list|,
literal|500
argument_list|,
literal|600
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|15
argument_list|,
name|mmHeap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Heap is not intact initially"
argument_list|,
name|mmHeap
operator|.
name|isIntact
argument_list|()
argument_list|)
expr_stmt|;
name|mmHeap
operator|.
name|remove
argument_list|(
literal|12
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|14
argument_list|,
name|mmHeap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Heap is not intact after remove()"
argument_list|,
name|mmHeap
operator|.
name|isIntact
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/** This tests a more obscure special case, but otherwise similar to above. */
DECL|method|testInvalidatingRemove2 ()
specifier|public
name|void
name|testInvalidatingRemove2
parameter_list|()
block|{
name|MinMaxPriorityQueue
argument_list|<
name|Integer
argument_list|>
name|mmHeap
init|=
name|MinMaxPriorityQueue
operator|.
name|create
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|values
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|1
argument_list|,
literal|20
argument_list|,
literal|1000
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|30
argument_list|,
literal|40
argument_list|,
literal|10
argument_list|,
literal|11
argument_list|,
literal|12
argument_list|,
literal|13
argument_list|,
literal|300
argument_list|,
literal|400
argument_list|,
literal|500
argument_list|,
literal|600
argument_list|,
literal|4
argument_list|,
literal|5
argument_list|,
literal|6
argument_list|,
literal|7
argument_list|,
literal|8
argument_list|,
literal|9
argument_list|,
literal|4
argument_list|,
literal|5
argument_list|,
literal|200
argument_list|,
literal|250
argument_list|)
decl_stmt|;
name|mmHeap
operator|.
name|addAll
argument_list|(
name|values
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|25
argument_list|,
name|mmHeap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Heap is not intact initially"
argument_list|,
name|mmHeap
operator|.
name|isIntact
argument_list|()
argument_list|)
expr_stmt|;
name|mmHeap
operator|.
name|remove
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|24
argument_list|,
name|mmHeap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Heap is not intact after remove()"
argument_list|,
name|mmHeap
operator|.
name|isIntact
argument_list|()
argument_list|)
expr_stmt|;
name|values
operator|.
name|removeAll
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|values
operator|.
name|size
argument_list|()
argument_list|,
name|mmHeap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|values
operator|.
name|containsAll
argument_list|(
name|mmHeap
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|mmHeap
operator|.
name|containsAll
argument_list|(
name|values
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testIteratorInvalidatingIteratorRemove ()
specifier|public
name|void
name|testIteratorInvalidatingIteratorRemove
parameter_list|()
block|{
name|MinMaxPriorityQueue
argument_list|<
name|Integer
argument_list|>
name|mmHeap
init|=
name|MinMaxPriorityQueue
operator|.
name|create
argument_list|()
decl_stmt|;
name|mmHeap
operator|.
name|addAll
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|1
argument_list|,
literal|20
argument_list|,
literal|100
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|30
argument_list|,
literal|40
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|7
argument_list|,
name|mmHeap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Heap is not intact initially"
argument_list|,
name|mmHeap
operator|.
name|isIntact
argument_list|()
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|Integer
argument_list|>
name|it
init|=
name|mmHeap
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
operator|(
name|Integer
operator|)
literal|1
argument_list|,
name|it
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
name|Integer
operator|)
literal|20
argument_list|,
name|it
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
name|Integer
operator|)
literal|100
argument_list|,
name|it
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
name|Integer
operator|)
literal|2
argument_list|,
name|it
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|it
operator|.
name|remove
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|mmHeap
operator|.
name|contains
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|it
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
name|Integer
operator|)
literal|3
argument_list|,
name|it
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|it
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
name|Integer
operator|)
literal|30
argument_list|,
name|it
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|it
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
name|Integer
operator|)
literal|40
argument_list|,
name|it
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|it
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|mmHeap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Heap is not intact after remove()"
argument_list|,
name|mmHeap
operator|.
name|isIntact
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|mmHeap
operator|.
name|contains
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
comment|// This tests that it.remove() above actually changed the order. It
comment|// indicates that the value 40 was stored in forgetMeNot, so it is
comment|// returned in the last call to it.next(). Without it, 30 should be the last
comment|// item returned by the iterator.
name|Integer
name|lastItem
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Integer
name|tmp
range|:
name|mmHeap
control|)
block|{
name|lastItem
operator|=
name|tmp
expr_stmt|;
block|}
name|assertEquals
argument_list|(
operator|(
name|Integer
operator|)
literal|30
argument_list|,
name|lastItem
argument_list|)
expr_stmt|;
block|}
comment|/**    * This tests a special case where removeAt has to trickle an element first down one level from a    * min to a max level, then up one level above the index of the removed element. It also tests    * that skipMe in the iterator plays nicely with forgetMeNot.    */
DECL|method|testIteratorInvalidatingIteratorRemove2 ()
specifier|public
name|void
name|testIteratorInvalidatingIteratorRemove2
parameter_list|()
block|{
name|MinMaxPriorityQueue
argument_list|<
name|Integer
argument_list|>
name|mmHeap
init|=
name|MinMaxPriorityQueue
operator|.
name|create
argument_list|()
decl_stmt|;
name|mmHeap
operator|.
name|addAll
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|1
argument_list|,
literal|20
argument_list|,
literal|1000
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|30
argument_list|,
literal|40
argument_list|,
literal|10
argument_list|,
literal|11
argument_list|,
literal|12
argument_list|,
literal|13
argument_list|,
literal|200
argument_list|,
literal|300
argument_list|,
literal|500
argument_list|,
literal|400
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Heap is not intact initially"
argument_list|,
name|mmHeap
operator|.
name|isIntact
argument_list|()
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|Integer
argument_list|>
name|it
init|=
name|mmHeap
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
operator|(
name|Integer
operator|)
literal|1
argument_list|,
name|it
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
name|Integer
operator|)
literal|20
argument_list|,
name|it
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
name|Integer
operator|)
literal|1000
argument_list|,
name|it
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
name|Integer
operator|)
literal|2
argument_list|,
name|it
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|it
operator|.
name|remove
argument_list|()
expr_stmt|;
comment|// After this remove, 400 has moved up and 20 down past cursor
name|assertTrue
argument_list|(
literal|"Heap is not intact after remove"
argument_list|,
name|mmHeap
operator|.
name|isIntact
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
name|Integer
operator|)
literal|10
argument_list|,
name|it
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
name|Integer
operator|)
literal|3
argument_list|,
name|it
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|it
operator|.
name|remove
argument_list|()
expr_stmt|;
comment|// After this remove, 400 moved down again and 500 up past the cursor
name|assertTrue
argument_list|(
literal|"Heap is not intact after remove"
argument_list|,
name|mmHeap
operator|.
name|isIntact
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
name|Integer
operator|)
literal|12
argument_list|,
name|it
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
name|Integer
operator|)
literal|30
argument_list|,
name|it
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
name|Integer
operator|)
literal|40
argument_list|,
name|it
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
comment|// Skipping 20
name|assertEquals
argument_list|(
operator|(
name|Integer
operator|)
literal|11
argument_list|,
name|it
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
comment|// Not skipping 400, because it moved back down
name|assertEquals
argument_list|(
operator|(
name|Integer
operator|)
literal|400
argument_list|,
name|it
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
name|Integer
operator|)
literal|13
argument_list|,
name|it
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
name|Integer
operator|)
literal|200
argument_list|,
name|it
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
name|Integer
operator|)
literal|300
argument_list|,
name|it
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
comment|// Last from forgetMeNot.
name|assertEquals
argument_list|(
operator|(
name|Integer
operator|)
literal|500
argument_list|,
name|it
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testRemoveFromStringHeap ()
specifier|public
name|void
name|testRemoveFromStringHeap
parameter_list|()
block|{
name|MinMaxPriorityQueue
argument_list|<
name|String
argument_list|>
name|mmHeap
init|=
name|MinMaxPriorityQueue
operator|.
name|expectedSize
argument_list|(
literal|5
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|Collections
operator|.
name|addAll
argument_list|(
name|mmHeap
argument_list|,
literal|"foo"
argument_list|,
literal|"bar"
argument_list|,
literal|"foobar"
argument_list|,
literal|"barfoo"
argument_list|,
literal|"larry"
argument_list|,
literal|"sergey"
argument_list|,
literal|"eric"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Heap is not intact initially"
argument_list|,
name|mmHeap
operator|.
name|isIntact
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"bar"
argument_list|,
name|mmHeap
operator|.
name|peek
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"sergey"
argument_list|,
name|mmHeap
operator|.
name|peekLast
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|7
argument_list|,
name|mmHeap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Could not remove larry"
argument_list|,
name|mmHeap
operator|.
name|remove
argument_list|(
literal|"larry"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|mmHeap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"heap contains larry which has been removed"
argument_list|,
name|mmHeap
operator|.
name|contains
argument_list|(
literal|"larry"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"heap does not contain sergey"
argument_list|,
name|mmHeap
operator|.
name|contains
argument_list|(
literal|"sergey"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Could not remove larry"
argument_list|,
name|mmHeap
operator|.
name|removeAll
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"sergey"
argument_list|,
literal|"eric"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Could remove nikesh which is not in the heap"
argument_list|,
name|mmHeap
operator|.
name|remove
argument_list|(
literal|"nikesh"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|mmHeap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testCreateWithOrdering ()
specifier|public
name|void
name|testCreateWithOrdering
parameter_list|()
block|{
name|MinMaxPriorityQueue
argument_list|<
name|String
argument_list|>
name|mmHeap
init|=
name|MinMaxPriorityQueue
operator|.
name|orderedBy
argument_list|(
name|Ordering
operator|.
name|natural
argument_list|()
operator|.
name|reverse
argument_list|()
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|Collections
operator|.
name|addAll
argument_list|(
name|mmHeap
argument_list|,
literal|"foo"
argument_list|,
literal|"bar"
argument_list|,
literal|"foobar"
argument_list|,
literal|"barfoo"
argument_list|,
literal|"larry"
argument_list|,
literal|"sergey"
argument_list|,
literal|"eric"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Heap is not intact initially"
argument_list|,
name|mmHeap
operator|.
name|isIntact
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"sergey"
argument_list|,
name|mmHeap
operator|.
name|peek
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"bar"
argument_list|,
name|mmHeap
operator|.
name|peekLast
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testCreateWithCapacityAndOrdering ()
specifier|public
name|void
name|testCreateWithCapacityAndOrdering
parameter_list|()
block|{
name|MinMaxPriorityQueue
argument_list|<
name|Integer
argument_list|>
name|mmHeap
init|=
name|MinMaxPriorityQueue
operator|.
name|orderedBy
argument_list|(
name|Ordering
operator|.
name|natural
argument_list|()
operator|.
name|reverse
argument_list|()
argument_list|)
operator|.
name|expectedSize
argument_list|(
literal|5
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|Collections
operator|.
name|addAll
argument_list|(
name|mmHeap
argument_list|,
literal|1
argument_list|,
literal|7
argument_list|,
literal|2
argument_list|,
literal|56
argument_list|,
literal|2
argument_list|,
literal|5
argument_list|,
literal|23
argument_list|,
literal|68
argument_list|,
literal|0
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Heap is not intact initially"
argument_list|,
name|mmHeap
operator|.
name|isIntact
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|68
argument_list|,
operator|(
name|int
operator|)
name|mmHeap
operator|.
name|peek
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
operator|(
name|int
operator|)
name|mmHeap
operator|.
name|peekLast
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|runIterator (final List<T> values, int steps)
specifier|private
parameter_list|<
name|T
extends|extends
name|Comparable
argument_list|<
name|T
argument_list|>
parameter_list|>
name|void
name|runIterator
parameter_list|(
specifier|final
name|List
argument_list|<
name|T
argument_list|>
name|values
parameter_list|,
name|int
name|steps
parameter_list|)
throws|throws
name|Exception
block|{
name|IteratorTester
argument_list|<
name|T
argument_list|>
name|tester
init|=
operator|new
name|IteratorTester
argument_list|<
name|T
argument_list|>
argument_list|(
name|steps
argument_list|,
name|IteratorFeature
operator|.
name|MODIFIABLE
argument_list|,
name|Lists
operator|.
name|newLinkedList
argument_list|(
name|values
argument_list|)
argument_list|,
name|IteratorTester
operator|.
name|KnownOrder
operator|.
name|UNKNOWN_ORDER
argument_list|)
block|{
specifier|private
name|MinMaxPriorityQueue
argument_list|<
name|T
argument_list|>
name|mmHeap
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|Iterator
argument_list|<
name|T
argument_list|>
name|newTargetIterator
parameter_list|()
block|{
name|mmHeap
operator|=
name|MinMaxPriorityQueue
operator|.
name|create
argument_list|(
name|values
argument_list|)
expr_stmt|;
return|return
name|mmHeap
operator|.
name|iterator
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|verify
parameter_list|(
name|List
argument_list|<
name|T
argument_list|>
name|elements
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|Sets
operator|.
name|newHashSet
argument_list|(
name|elements
argument_list|)
argument_list|,
name|Sets
operator|.
name|newHashSet
argument_list|(
name|mmHeap
operator|.
name|iterator
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertIntact
argument_list|(
name|mmHeap
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|tester
operator|.
name|test
argument_list|()
expr_stmt|;
block|}
DECL|method|testIteratorTester ()
specifier|public
name|void
name|testIteratorTester
parameter_list|()
throws|throws
name|Exception
block|{
name|Random
name|random
init|=
operator|new
name|Random
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|list
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|3
condition|;
name|i
operator|++
control|)
block|{
name|list
operator|.
name|add
argument_list|(
name|random
operator|.
name|nextInt
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|runIterator
argument_list|(
name|list
argument_list|,
literal|6
argument_list|)
expr_stmt|;
block|}
DECL|method|testIteratorTesterLarger ()
specifier|public
name|void
name|testIteratorTesterLarger
parameter_list|()
throws|throws
name|Exception
block|{
name|runIterator
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|,
literal|5
argument_list|,
literal|6
argument_list|,
literal|7
argument_list|,
literal|8
argument_list|,
literal|9
argument_list|,
literal|10
argument_list|)
argument_list|,
literal|5
argument_list|)
expr_stmt|;
block|}
DECL|method|testRemoveAt ()
specifier|public
name|void
name|testRemoveAt
parameter_list|()
block|{
name|long
name|seed
init|=
operator|new
name|Random
argument_list|()
operator|.
name|nextLong
argument_list|()
decl_stmt|;
name|Random
name|random
init|=
operator|new
name|Random
argument_list|(
name|seed
argument_list|)
decl_stmt|;
name|int
name|heapSize
init|=
literal|999
decl_stmt|;
name|int
name|numberOfModifications
init|=
name|reduceIterationsIfGwt
argument_list|(
literal|500
argument_list|)
decl_stmt|;
name|MinMaxPriorityQueue
argument_list|<
name|Integer
argument_list|>
name|mmHeap
init|=
name|MinMaxPriorityQueue
operator|.
name|expectedSize
argument_list|(
name|heapSize
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|heapSize
condition|;
name|i
operator|++
control|)
block|{
name|mmHeap
operator|.
name|add
argument_list|(
name|random
operator|.
name|nextInt
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numberOfModifications
condition|;
name|i
operator|++
control|)
block|{
name|mmHeap
operator|.
name|removeAt
argument_list|(
name|random
operator|.
name|nextInt
argument_list|(
name|mmHeap
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertIntactUsingSeed
argument_list|(
name|seed
argument_list|,
name|mmHeap
argument_list|)
expr_stmt|;
name|mmHeap
operator|.
name|add
argument_list|(
name|random
operator|.
name|nextInt
argument_list|()
argument_list|)
expr_stmt|;
name|assertIntactUsingSeed
argument_list|(
name|seed
argument_list|,
name|mmHeap
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testRemoveAt_exhaustive ()
specifier|public
name|void
name|testRemoveAt_exhaustive
parameter_list|()
block|{
name|int
name|size
init|=
name|reduceExponentIfGwt
argument_list|(
literal|8
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|expected
init|=
name|createOrderedList
argument_list|(
name|size
argument_list|)
decl_stmt|;
for|for
control|(
name|Collection
argument_list|<
name|Integer
argument_list|>
name|perm
range|:
name|Collections2
operator|.
name|permutations
argument_list|(
name|expected
argument_list|)
control|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|perm
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|MinMaxPriorityQueue
argument_list|<
name|Integer
argument_list|>
name|q
init|=
name|MinMaxPriorityQueue
operator|.
name|create
argument_list|(
name|perm
argument_list|)
decl_stmt|;
name|q
operator|.
name|removeAt
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|assertIntactUsingStartedWith
argument_list|(
name|perm
argument_list|,
name|q
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/** Regression test for bug found. */
DECL|method|testCorrectOrdering_regression ()
specifier|public
name|void
name|testCorrectOrdering_regression
parameter_list|()
block|{
name|MinMaxPriorityQueue
argument_list|<
name|Integer
argument_list|>
name|q
init|=
name|MinMaxPriorityQueue
operator|.
name|create
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
literal|3
argument_list|,
literal|5
argument_list|,
literal|1
argument_list|,
literal|4
argument_list|,
literal|7
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|expected
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
literal|1
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|,
literal|5
argument_list|,
literal|7
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|actual
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|5
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|expected
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|actual
operator|.
name|add
argument_list|(
name|q
operator|.
name|pollFirst
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
block|}
DECL|method|testCorrectOrdering_smallHeapsPollFirst ()
specifier|public
name|void
name|testCorrectOrdering_smallHeapsPollFirst
parameter_list|()
block|{
for|for
control|(
name|int
name|size
init|=
literal|2
init|;
name|size
operator|<
literal|16
condition|;
name|size
operator|++
control|)
block|{
for|for
control|(
name|int
name|attempts
init|=
literal|0
init|;
name|attempts
operator|<
name|size
operator|*
operator|(
name|size
operator|-
literal|1
operator|)
condition|;
name|attempts
operator|++
control|)
block|{
name|ArrayList
argument_list|<
name|Integer
argument_list|>
name|elements
init|=
name|createOrderedList
argument_list|(
name|size
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|expected
init|=
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|elements
argument_list|)
decl_stmt|;
name|MinMaxPriorityQueue
argument_list|<
name|Integer
argument_list|>
name|q
init|=
name|MinMaxPriorityQueue
operator|.
name|create
argument_list|()
decl_stmt|;
name|long
name|seed
init|=
name|insertRandomly
argument_list|(
name|elements
argument_list|,
name|q
argument_list|)
decl_stmt|;
while|while
condition|(
operator|!
name|q
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|elements
operator|.
name|add
argument_list|(
name|q
operator|.
name|pollFirst
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertEqualsUsingSeed
argument_list|(
name|seed
argument_list|,
name|expected
argument_list|,
name|elements
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|testCorrectOrdering_smallHeapsPollLast ()
specifier|public
name|void
name|testCorrectOrdering_smallHeapsPollLast
parameter_list|()
block|{
for|for
control|(
name|int
name|size
init|=
literal|2
init|;
name|size
operator|<
literal|16
condition|;
name|size
operator|++
control|)
block|{
for|for
control|(
name|int
name|attempts
init|=
literal|0
init|;
name|attempts
operator|<
name|size
operator|*
operator|(
name|size
operator|-
literal|1
operator|)
condition|;
name|attempts
operator|++
control|)
block|{
name|ArrayList
argument_list|<
name|Integer
argument_list|>
name|elements
init|=
name|createOrderedList
argument_list|(
name|size
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|expected
init|=
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|elements
argument_list|)
decl_stmt|;
name|MinMaxPriorityQueue
argument_list|<
name|Integer
argument_list|>
name|q
init|=
name|MinMaxPriorityQueue
operator|.
name|create
argument_list|()
decl_stmt|;
name|long
name|seed
init|=
name|insertRandomly
argument_list|(
name|elements
argument_list|,
name|q
argument_list|)
decl_stmt|;
while|while
condition|(
operator|!
name|q
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|elements
operator|.
name|add
argument_list|(
literal|0
argument_list|,
name|q
operator|.
name|pollLast
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertEqualsUsingSeed
argument_list|(
name|seed
argument_list|,
name|expected
argument_list|,
name|elements
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|testCorrectOrdering_mediumHeapsPollFirst ()
specifier|public
name|void
name|testCorrectOrdering_mediumHeapsPollFirst
parameter_list|()
block|{
for|for
control|(
name|int
name|attempts
init|=
literal|0
init|;
name|attempts
operator|<
name|reduceIterationsIfGwt
argument_list|(
literal|5000
argument_list|)
condition|;
name|attempts
operator|++
control|)
block|{
name|int
name|size
init|=
operator|new
name|Random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|256
argument_list|)
operator|+
literal|16
decl_stmt|;
name|ArrayList
argument_list|<
name|Integer
argument_list|>
name|elements
init|=
name|createOrderedList
argument_list|(
name|size
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|expected
init|=
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|elements
argument_list|)
decl_stmt|;
name|MinMaxPriorityQueue
argument_list|<
name|Integer
argument_list|>
name|q
init|=
name|MinMaxPriorityQueue
operator|.
name|create
argument_list|()
decl_stmt|;
name|long
name|seed
init|=
name|insertRandomly
argument_list|(
name|elements
argument_list|,
name|q
argument_list|)
decl_stmt|;
while|while
condition|(
operator|!
name|q
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|elements
operator|.
name|add
argument_list|(
name|q
operator|.
name|pollFirst
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertEqualsUsingSeed
argument_list|(
name|seed
argument_list|,
name|expected
argument_list|,
name|elements
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Regression test for bug found in random testing. */
DECL|method|testCorrectOrdering_73ElementBug ()
specifier|public
name|void
name|testCorrectOrdering_73ElementBug
parameter_list|()
block|{
name|int
name|size
init|=
literal|73
decl_stmt|;
name|long
name|seed
init|=
literal|7522346378524621981L
decl_stmt|;
name|ArrayList
argument_list|<
name|Integer
argument_list|>
name|elements
init|=
name|createOrderedList
argument_list|(
name|size
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|expected
init|=
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|elements
argument_list|)
decl_stmt|;
name|MinMaxPriorityQueue
argument_list|<
name|Integer
argument_list|>
name|q
init|=
name|MinMaxPriorityQueue
operator|.
name|create
argument_list|()
decl_stmt|;
name|insertRandomly
argument_list|(
name|elements
argument_list|,
name|q
argument_list|,
operator|new
name|Random
argument_list|(
name|seed
argument_list|)
argument_list|)
expr_stmt|;
name|assertIntact
argument_list|(
name|q
argument_list|)
expr_stmt|;
while|while
condition|(
operator|!
name|q
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|elements
operator|.
name|add
argument_list|(
name|q
operator|.
name|pollFirst
argument_list|()
argument_list|)
expr_stmt|;
name|assertIntact
argument_list|(
name|q
argument_list|)
expr_stmt|;
block|}
name|assertEqualsUsingSeed
argument_list|(
name|seed
argument_list|,
name|expected
argument_list|,
name|elements
argument_list|)
expr_stmt|;
block|}
DECL|method|testCorrectOrdering_mediumHeapsPollLast ()
specifier|public
name|void
name|testCorrectOrdering_mediumHeapsPollLast
parameter_list|()
block|{
for|for
control|(
name|int
name|attempts
init|=
literal|0
init|;
name|attempts
operator|<
name|reduceIterationsIfGwt
argument_list|(
literal|5000
argument_list|)
condition|;
name|attempts
operator|++
control|)
block|{
name|int
name|size
init|=
operator|new
name|Random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|256
argument_list|)
operator|+
literal|16
decl_stmt|;
name|ArrayList
argument_list|<
name|Integer
argument_list|>
name|elements
init|=
name|createOrderedList
argument_list|(
name|size
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|expected
init|=
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|elements
argument_list|)
decl_stmt|;
name|MinMaxPriorityQueue
argument_list|<
name|Integer
argument_list|>
name|q
init|=
name|MinMaxPriorityQueue
operator|.
name|create
argument_list|()
decl_stmt|;
name|long
name|seed
init|=
name|insertRandomly
argument_list|(
name|elements
argument_list|,
name|q
argument_list|)
decl_stmt|;
while|while
condition|(
operator|!
name|q
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|elements
operator|.
name|add
argument_list|(
literal|0
argument_list|,
name|q
operator|.
name|pollLast
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertEqualsUsingSeed
argument_list|(
name|seed
argument_list|,
name|expected
argument_list|,
name|elements
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testCorrectOrdering_randomAccess ()
specifier|public
name|void
name|testCorrectOrdering_randomAccess
parameter_list|()
block|{
name|long
name|seed
init|=
operator|new
name|Random
argument_list|()
operator|.
name|nextLong
argument_list|()
decl_stmt|;
name|Random
name|random
init|=
operator|new
name|Random
argument_list|(
name|seed
argument_list|)
decl_stmt|;
name|PriorityQueue
argument_list|<
name|Integer
argument_list|>
name|control
init|=
operator|new
name|PriorityQueue
argument_list|<>
argument_list|()
decl_stmt|;
name|MinMaxPriorityQueue
argument_list|<
name|Integer
argument_list|>
name|q
init|=
name|MinMaxPriorityQueue
operator|.
name|create
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|73
condition|;
name|i
operator|++
control|)
block|{
comment|// 73 is a childless uncle case.
name|Integer
name|element
init|=
name|random
operator|.
name|nextInt
argument_list|()
decl_stmt|;
name|control
operator|.
name|add
argument_list|(
name|element
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|q
operator|.
name|add
argument_list|(
name|element
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertIntact
argument_list|(
name|q
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|reduceIterationsIfGwt
argument_list|(
literal|500_000
argument_list|)
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|random
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
name|Integer
name|element
init|=
name|random
operator|.
name|nextInt
argument_list|()
decl_stmt|;
name|control
operator|.
name|add
argument_list|(
name|element
argument_list|)
expr_stmt|;
name|q
operator|.
name|add
argument_list|(
name|element
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEqualsUsingSeed
argument_list|(
name|seed
argument_list|,
name|control
operator|.
name|poll
argument_list|()
argument_list|,
name|q
operator|.
name|pollFirst
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
while|while
condition|(
operator|!
name|control
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|assertEqualsUsingSeed
argument_list|(
name|seed
argument_list|,
name|control
operator|.
name|poll
argument_list|()
argument_list|,
name|q
operator|.
name|pollFirst
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|q
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testExhaustive_pollAndPush ()
specifier|public
name|void
name|testExhaustive_pollAndPush
parameter_list|()
block|{
name|int
name|size
init|=
literal|5
decl_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|expected
init|=
name|createOrderedList
argument_list|(
name|size
argument_list|)
decl_stmt|;
for|for
control|(
name|Collection
argument_list|<
name|Integer
argument_list|>
name|perm
range|:
name|Collections2
operator|.
name|permutations
argument_list|(
name|expected
argument_list|)
control|)
block|{
name|MinMaxPriorityQueue
argument_list|<
name|Integer
argument_list|>
name|q
init|=
name|MinMaxPriorityQueue
operator|.
name|create
argument_list|(
name|perm
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|elements
init|=
name|Lists
operator|.
name|newArrayListWithCapacity
argument_list|(
name|size
argument_list|)
decl_stmt|;
while|while
condition|(
operator|!
name|q
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Integer
name|next
init|=
name|q
operator|.
name|pollFirst
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<=
name|size
condition|;
name|i
operator|++
control|)
block|{
name|assertTrue
argument_list|(
name|q
operator|.
name|add
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|q
operator|.
name|add
argument_list|(
name|next
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|q
operator|.
name|remove
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|next
argument_list|,
name|q
operator|.
name|poll
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|elements
operator|.
name|add
argument_list|(
name|next
argument_list|)
expr_stmt|;
block|}
name|assertEqualsUsingStartedWith
argument_list|(
name|perm
argument_list|,
name|expected
argument_list|,
name|elements
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Regression test for b/4124577 */
DECL|method|testRegression_dataCorruption ()
specifier|public
name|void
name|testRegression_dataCorruption
parameter_list|()
block|{
name|int
name|size
init|=
literal|8
decl_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|expected
init|=
name|createOrderedList
argument_list|(
name|size
argument_list|)
decl_stmt|;
name|MinMaxPriorityQueue
argument_list|<
name|Integer
argument_list|>
name|q
init|=
name|MinMaxPriorityQueue
operator|.
name|create
argument_list|(
name|expected
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|contents
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|expected
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|elements
init|=
name|Lists
operator|.
name|newArrayListWithCapacity
argument_list|(
name|size
argument_list|)
decl_stmt|;
while|while
condition|(
operator|!
name|q
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|assertThat
argument_list|(
name|q
argument_list|)
operator|.
name|containsExactlyElementsIn
argument_list|(
name|contents
argument_list|)
expr_stmt|;
name|Integer
name|next
init|=
name|q
operator|.
name|pollFirst
argument_list|()
decl_stmt|;
name|contents
operator|.
name|remove
argument_list|(
name|next
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|q
argument_list|)
operator|.
name|containsExactlyElementsIn
argument_list|(
name|contents
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<=
name|size
condition|;
name|i
operator|++
control|)
block|{
name|q
operator|.
name|add
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|contents
operator|.
name|add
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|q
argument_list|)
operator|.
name|containsExactlyElementsIn
argument_list|(
name|contents
argument_list|)
expr_stmt|;
name|q
operator|.
name|add
argument_list|(
name|next
argument_list|)
expr_stmt|;
name|contents
operator|.
name|add
argument_list|(
name|next
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|q
argument_list|)
operator|.
name|containsExactlyElementsIn
argument_list|(
name|contents
argument_list|)
expr_stmt|;
name|q
operator|.
name|remove
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|contents
operator|.
name|remove
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|q
argument_list|)
operator|.
name|containsExactlyElementsIn
argument_list|(
name|contents
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|next
argument_list|,
name|q
operator|.
name|poll
argument_list|()
argument_list|)
expr_stmt|;
name|contents
operator|.
name|remove
argument_list|(
name|next
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|q
argument_list|)
operator|.
name|containsExactlyElementsIn
argument_list|(
name|contents
argument_list|)
expr_stmt|;
block|}
name|elements
operator|.
name|add
argument_list|(
name|next
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|elements
argument_list|)
expr_stmt|;
block|}
comment|/** Regression test for https://github.com/google/guava/issues/2658 */
DECL|method|testRemoveRegression ()
specifier|public
name|void
name|testRemoveRegression
parameter_list|()
block|{
name|MinMaxPriorityQueue
argument_list|<
name|Long
argument_list|>
name|queue
init|=
name|MinMaxPriorityQueue
operator|.
name|create
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
literal|2L
argument_list|,
literal|3L
argument_list|,
literal|0L
argument_list|,
literal|4L
argument_list|,
literal|1L
argument_list|)
argument_list|)
decl_stmt|;
name|queue
operator|.
name|remove
argument_list|(
literal|4L
argument_list|)
expr_stmt|;
name|queue
operator|.
name|remove
argument_list|(
literal|1L
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|queue
argument_list|)
operator|.
name|doesNotContain
argument_list|(
literal|1L
argument_list|)
expr_stmt|;
block|}
DECL|method|testRandomRemoves ()
specifier|public
name|void
name|testRandomRemoves
parameter_list|()
block|{
name|Random
name|random
init|=
operator|new
name|Random
argument_list|(
literal|0
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|attempts
init|=
literal|0
init|;
name|attempts
operator|<
name|reduceIterationsIfGwt
argument_list|(
literal|1000
argument_list|)
condition|;
name|attempts
operator|++
control|)
block|{
name|ArrayList
argument_list|<
name|Integer
argument_list|>
name|elements
init|=
name|createOrderedList
argument_list|(
literal|10
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|shuffle
argument_list|(
name|elements
argument_list|,
name|random
argument_list|)
expr_stmt|;
name|MinMaxPriorityQueue
argument_list|<
name|Integer
argument_list|>
name|queue
init|=
name|MinMaxPriorityQueue
operator|.
name|create
argument_list|(
name|elements
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|shuffle
argument_list|(
name|elements
argument_list|,
name|random
argument_list|)
expr_stmt|;
for|for
control|(
name|Integer
name|element
range|:
name|elements
control|)
block|{
name|assertThat
argument_list|(
name|queue
operator|.
name|remove
argument_list|(
name|element
argument_list|)
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assertIntact
argument_list|(
name|queue
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|queue
argument_list|)
operator|.
name|doesNotContain
argument_list|(
name|element
argument_list|)
expr_stmt|;
block|}
name|assertThat
argument_list|(
name|queue
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|testRandomAddsAndRemoves ()
specifier|public
name|void
name|testRandomAddsAndRemoves
parameter_list|()
block|{
name|Random
name|random
init|=
operator|new
name|Random
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Multiset
argument_list|<
name|Integer
argument_list|>
name|elements
init|=
name|HashMultiset
operator|.
name|create
argument_list|()
decl_stmt|;
name|MinMaxPriorityQueue
argument_list|<
name|Integer
argument_list|>
name|queue
init|=
name|MinMaxPriorityQueue
operator|.
name|create
argument_list|()
decl_stmt|;
name|int
name|range
init|=
literal|10_000
decl_stmt|;
comment|// range should be small enough that equal elements occur semi-frequently
for|for
control|(
name|int
name|iter
init|=
literal|0
init|;
name|iter
operator|<
name|reduceIterationsIfGwt
argument_list|(
literal|1000
argument_list|)
condition|;
name|iter
operator|++
control|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
name|i
operator|++
control|)
block|{
name|Integer
name|element
init|=
name|random
operator|.
name|nextInt
argument_list|(
name|range
argument_list|)
decl_stmt|;
name|elements
operator|.
name|add
argument_list|(
name|element
argument_list|)
expr_stmt|;
name|queue
operator|.
name|add
argument_list|(
name|element
argument_list|)
expr_stmt|;
block|}
name|Iterator
argument_list|<
name|Integer
argument_list|>
name|queueIterator
init|=
name|queue
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|int
name|remaining
init|=
name|queue
operator|.
name|size
argument_list|()
decl_stmt|;
while|while
condition|(
name|queueIterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Integer
name|element
init|=
name|queueIterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|remaining
operator|--
expr_stmt|;
name|assertThat
argument_list|(
name|elements
argument_list|)
operator|.
name|contains
argument_list|(
name|element
argument_list|)
expr_stmt|;
if|if
condition|(
name|random
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
name|elements
operator|.
name|remove
argument_list|(
name|element
argument_list|)
expr_stmt|;
name|queueIterator
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
name|assertThat
argument_list|(
name|remaining
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertIntact
argument_list|(
name|queue
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|queue
argument_list|)
operator|.
name|containsExactlyElementsIn
argument_list|(
name|elements
argument_list|)
expr_stmt|;
block|}
block|}
DECL|enum|Element
specifier|private
enum|enum
name|Element
block|{
DECL|enumConstant|ONE
name|ONE
block|,
DECL|enumConstant|TWO
name|TWO
block|,
DECL|enumConstant|THREE
name|THREE
block|,
DECL|enumConstant|FOUR
name|FOUR
block|,
DECL|enumConstant|FIVE
name|FIVE
block|;   }
DECL|method|testRandomAddsAndRemoves_duplicateElements ()
specifier|public
name|void
name|testRandomAddsAndRemoves_duplicateElements
parameter_list|()
block|{
name|Random
name|random
init|=
operator|new
name|Random
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Multiset
argument_list|<
name|Element
argument_list|>
name|elements
init|=
name|HashMultiset
operator|.
name|create
argument_list|()
decl_stmt|;
name|MinMaxPriorityQueue
argument_list|<
name|Element
argument_list|>
name|queue
init|=
name|MinMaxPriorityQueue
operator|.
name|create
argument_list|()
decl_stmt|;
name|int
name|range
init|=
name|Element
operator|.
name|values
argument_list|()
operator|.
name|length
decl_stmt|;
for|for
control|(
name|int
name|iter
init|=
literal|0
init|;
name|iter
operator|<
name|reduceIterationsIfGwt
argument_list|(
literal|1000
argument_list|)
condition|;
name|iter
operator|++
control|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
name|i
operator|++
control|)
block|{
name|Element
name|element
init|=
name|Element
operator|.
name|values
argument_list|()
index|[
name|random
operator|.
name|nextInt
argument_list|(
name|range
argument_list|)
index|]
decl_stmt|;
name|elements
operator|.
name|add
argument_list|(
name|element
argument_list|)
expr_stmt|;
name|queue
operator|.
name|add
argument_list|(
name|element
argument_list|)
expr_stmt|;
block|}
name|Iterator
argument_list|<
name|Element
argument_list|>
name|queueIterator
init|=
name|queue
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|int
name|remaining
init|=
name|queue
operator|.
name|size
argument_list|()
decl_stmt|;
while|while
condition|(
name|queueIterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Element
name|element
init|=
name|queueIterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|remaining
operator|--
expr_stmt|;
name|assertThat
argument_list|(
name|elements
argument_list|)
operator|.
name|contains
argument_list|(
name|element
argument_list|)
expr_stmt|;
if|if
condition|(
name|random
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
name|elements
operator|.
name|remove
argument_list|(
name|element
argument_list|)
expr_stmt|;
name|queueIterator
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
name|assertThat
argument_list|(
name|remaining
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertIntact
argument_list|(
name|queue
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|queue
argument_list|)
operator|.
name|containsExactlyElementsIn
argument_list|(
name|elements
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Returns the seed used for the randomization. */
DECL|method|insertRandomly (ArrayList<Integer> elements, MinMaxPriorityQueue<Integer> q)
specifier|private
name|long
name|insertRandomly
parameter_list|(
name|ArrayList
argument_list|<
name|Integer
argument_list|>
name|elements
parameter_list|,
name|MinMaxPriorityQueue
argument_list|<
name|Integer
argument_list|>
name|q
parameter_list|)
block|{
name|long
name|seed
init|=
operator|new
name|Random
argument_list|()
operator|.
name|nextLong
argument_list|()
decl_stmt|;
name|Random
name|random
init|=
operator|new
name|Random
argument_list|(
name|seed
argument_list|)
decl_stmt|;
name|insertRandomly
argument_list|(
name|elements
argument_list|,
name|q
argument_list|,
name|random
argument_list|)
expr_stmt|;
return|return
name|seed
return|;
block|}
DECL|method|insertRandomly ( ArrayList<Integer> elements, MinMaxPriorityQueue<Integer> q, Random random)
specifier|private
specifier|static
name|void
name|insertRandomly
parameter_list|(
name|ArrayList
argument_list|<
name|Integer
argument_list|>
name|elements
parameter_list|,
name|MinMaxPriorityQueue
argument_list|<
name|Integer
argument_list|>
name|q
parameter_list|,
name|Random
name|random
parameter_list|)
block|{
while|while
condition|(
operator|!
name|elements
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|int
name|selectedIndex
init|=
name|random
operator|.
name|nextInt
argument_list|(
name|elements
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|q
operator|.
name|offer
argument_list|(
name|elements
operator|.
name|remove
argument_list|(
name|selectedIndex
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|createOrderedList (int size)
specifier|private
name|ArrayList
argument_list|<
name|Integer
argument_list|>
name|createOrderedList
parameter_list|(
name|int
name|size
parameter_list|)
block|{
name|ArrayList
argument_list|<
name|Integer
argument_list|>
name|elements
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|size
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|elements
operator|.
name|add
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
return|return
name|elements
return|;
block|}
DECL|method|testIsEvenLevel ()
specifier|public
name|void
name|testIsEvenLevel
parameter_list|()
block|{
name|assertTrue
argument_list|(
name|MinMaxPriorityQueue
operator|.
name|isEvenLevel
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|MinMaxPriorityQueue
operator|.
name|isEvenLevel
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|MinMaxPriorityQueue
operator|.
name|isEvenLevel
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|MinMaxPriorityQueue
operator|.
name|isEvenLevel
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|MinMaxPriorityQueue
operator|.
name|isEvenLevel
argument_list|(
operator|(
literal|1
operator|<<
literal|10
operator|)
operator|-
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|MinMaxPriorityQueue
operator|.
name|isEvenLevel
argument_list|(
operator|(
literal|1
operator|<<
literal|10
operator|)
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|i
init|=
literal|1
operator|<<
literal|29
decl_stmt|;
name|assertTrue
argument_list|(
name|MinMaxPriorityQueue
operator|.
name|isEvenLevel
argument_list|(
name|i
operator|-
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|MinMaxPriorityQueue
operator|.
name|isEvenLevel
argument_list|(
name|i
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|MinMaxPriorityQueue
operator|.
name|isEvenLevel
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|i
operator|=
literal|1
operator|<<
literal|30
expr_stmt|;
name|assertFalse
argument_list|(
name|MinMaxPriorityQueue
operator|.
name|isEvenLevel
argument_list|(
name|i
operator|-
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|MinMaxPriorityQueue
operator|.
name|isEvenLevel
argument_list|(
name|i
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|MinMaxPriorityQueue
operator|.
name|isEvenLevel
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
comment|// 1<< 31 is negative because of overflow, 1<< 31 - 1 is positive
comment|// since isEvenLevel adds 1, we need to do - 2.
name|assertTrue
argument_list|(
name|MinMaxPriorityQueue
operator|.
name|isEvenLevel
argument_list|(
operator|(
literal|1
operator|<<
literal|31
operator|)
operator|-
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|MinMaxPriorityQueue
operator|.
name|isEvenLevel
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|MinMaxPriorityQueue
operator|.
name|isEvenLevel
argument_list|(
operator|(
literal|1
operator|<<
literal|31
operator|)
operator|-
literal|1
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should overflow"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|expected
parameter_list|)
block|{     }
try|try
block|{
name|MinMaxPriorityQueue
operator|.
name|isEvenLevel
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should overflow"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|expected
parameter_list|)
block|{     }
try|try
block|{
name|MinMaxPriorityQueue
operator|.
name|isEvenLevel
argument_list|(
literal|1
operator|<<
literal|31
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should be negative"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|expected
parameter_list|)
block|{     }
try|try
block|{
name|MinMaxPriorityQueue
operator|.
name|isEvenLevel
argument_list|(
name|Integer
operator|.
name|MIN_VALUE
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should be negative"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|expected
parameter_list|)
block|{     }
block|}
annotation|@
name|GwtIncompatible
comment|// NullPointerTester
DECL|method|testNullPointers ()
specifier|public
name|void
name|testNullPointers
parameter_list|()
block|{
name|NullPointerTester
name|tester
init|=
operator|new
name|NullPointerTester
argument_list|()
decl_stmt|;
name|tester
operator|.
name|testAllPublicConstructors
argument_list|(
name|MinMaxPriorityQueue
operator|.
name|class
argument_list|)
expr_stmt|;
name|tester
operator|.
name|testAllPublicStaticMethods
argument_list|(
name|MinMaxPriorityQueue
operator|.
name|class
argument_list|)
expr_stmt|;
name|tester
operator|.
name|testAllPublicInstanceMethods
argument_list|(
name|MinMaxPriorityQueue
operator|.
expr|<
name|String
operator|>
name|create
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|insertIntoReplica (Map<Integer, AtomicInteger> replica, int newValue)
specifier|private
specifier|static
name|void
name|insertIntoReplica
parameter_list|(
name|Map
argument_list|<
name|Integer
argument_list|,
name|AtomicInteger
argument_list|>
name|replica
parameter_list|,
name|int
name|newValue
parameter_list|)
block|{
if|if
condition|(
name|replica
operator|.
name|containsKey
argument_list|(
name|newValue
argument_list|)
condition|)
block|{
name|replica
operator|.
name|get
argument_list|(
name|newValue
argument_list|)
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|replica
operator|.
name|put
argument_list|(
name|newValue
argument_list|,
operator|new
name|AtomicInteger
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|removeMinFromReplica ( SortedMap<Integer, AtomicInteger> replica, int minValue)
specifier|private
specifier|static
name|void
name|removeMinFromReplica
parameter_list|(
name|SortedMap
argument_list|<
name|Integer
argument_list|,
name|AtomicInteger
argument_list|>
name|replica
parameter_list|,
name|int
name|minValue
parameter_list|)
block|{
name|Integer
name|replicatedMinValue
init|=
name|replica
operator|.
name|firstKey
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|replicatedMinValue
argument_list|,
operator|(
name|Integer
operator|)
name|minValue
argument_list|)
expr_stmt|;
name|removeFromReplica
argument_list|(
name|replica
argument_list|,
name|replicatedMinValue
argument_list|)
expr_stmt|;
block|}
DECL|method|removeMaxFromReplica ( SortedMap<Integer, AtomicInteger> replica, int maxValue)
specifier|private
specifier|static
name|void
name|removeMaxFromReplica
parameter_list|(
name|SortedMap
argument_list|<
name|Integer
argument_list|,
name|AtomicInteger
argument_list|>
name|replica
parameter_list|,
name|int
name|maxValue
parameter_list|)
block|{
name|Integer
name|replicatedMaxValue
init|=
name|replica
operator|.
name|lastKey
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"maxValue is incorrect"
argument_list|,
name|replicatedMaxValue
operator|==
name|maxValue
argument_list|)
expr_stmt|;
name|removeFromReplica
argument_list|(
name|replica
argument_list|,
name|replicatedMaxValue
argument_list|)
expr_stmt|;
block|}
DECL|method|removeFromReplica (Map<Integer, AtomicInteger> replica, int value)
specifier|private
specifier|static
name|void
name|removeFromReplica
parameter_list|(
name|Map
argument_list|<
name|Integer
argument_list|,
name|AtomicInteger
argument_list|>
name|replica
parameter_list|,
name|int
name|value
parameter_list|)
block|{
name|AtomicInteger
name|numOccur
init|=
name|replica
operator|.
name|get
argument_list|(
name|value
argument_list|)
decl_stmt|;
if|if
condition|(
name|numOccur
operator|.
name|decrementAndGet
argument_list|()
operator|==
literal|0
condition|)
block|{
name|replica
operator|.
name|remove
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|assertIntact (MinMaxPriorityQueue<?> q)
specifier|private
specifier|static
name|void
name|assertIntact
parameter_list|(
name|MinMaxPriorityQueue
argument_list|<
name|?
argument_list|>
name|q
parameter_list|)
block|{
if|if
condition|(
operator|!
name|q
operator|.
name|isIntact
argument_list|()
condition|)
block|{
name|fail
argument_list|(
literal|"State "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|q
operator|.
name|toArray
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|assertIntactUsingSeed (long seed, MinMaxPriorityQueue<?> q)
specifier|private
specifier|static
name|void
name|assertIntactUsingSeed
parameter_list|(
name|long
name|seed
parameter_list|,
name|MinMaxPriorityQueue
argument_list|<
name|?
argument_list|>
name|q
parameter_list|)
block|{
if|if
condition|(
operator|!
name|q
operator|.
name|isIntact
argument_list|()
condition|)
block|{
name|fail
argument_list|(
literal|"Using seed "
operator|+
name|seed
operator|+
literal|". State "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|q
operator|.
name|toArray
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|assertIntactUsingStartedWith ( Collection<?> startedWith, MinMaxPriorityQueue<?> q)
specifier|private
specifier|static
name|void
name|assertIntactUsingStartedWith
parameter_list|(
name|Collection
argument_list|<
name|?
argument_list|>
name|startedWith
parameter_list|,
name|MinMaxPriorityQueue
argument_list|<
name|?
argument_list|>
name|q
parameter_list|)
block|{
if|if
condition|(
operator|!
name|q
operator|.
name|isIntact
argument_list|()
condition|)
block|{
name|fail
argument_list|(
literal|"Started with "
operator|+
name|startedWith
operator|+
literal|". State "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|q
operator|.
name|toArray
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|assertEqualsUsingSeed (long seed, Object expected, Object actual)
specifier|private
specifier|static
name|void
name|assertEqualsUsingSeed
parameter_list|(
name|long
name|seed
parameter_list|,
name|Object
name|expected
parameter_list|,
name|Object
name|actual
parameter_list|)
block|{
if|if
condition|(
operator|!
name|equal
argument_list|(
name|actual
argument_list|,
name|expected
argument_list|)
condition|)
block|{
comment|// fail(), but with the JUnit-supplied message.
name|assertEquals
argument_list|(
literal|"Using seed "
operator|+
name|seed
argument_list|,
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|assertEqualsUsingStartedWith ( Collection<?> startedWith, Object expected, Object actual)
specifier|private
specifier|static
name|void
name|assertEqualsUsingStartedWith
parameter_list|(
name|Collection
argument_list|<
name|?
argument_list|>
name|startedWith
parameter_list|,
name|Object
name|expected
parameter_list|,
name|Object
name|actual
parameter_list|)
block|{
if|if
condition|(
operator|!
name|equal
argument_list|(
name|actual
argument_list|,
name|expected
argument_list|)
condition|)
block|{
comment|// fail(), but with the JUnit-supplied message.
name|assertEquals
argument_list|(
literal|"Started with "
operator|+
name|startedWith
argument_list|,
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

