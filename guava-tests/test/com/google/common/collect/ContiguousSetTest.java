begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2011 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.collect
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|BoundType
operator|.
name|CLOSED
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|BoundType
operator|.
name|OPEN
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|DiscreteDomain
operator|.
name|integers
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|features
operator|.
name|CollectionFeature
operator|.
name|ALLOWS_NULL_QUERIES
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|features
operator|.
name|CollectionFeature
operator|.
name|KNOWN_ORDER
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|features
operator|.
name|CollectionFeature
operator|.
name|NON_STANDARD_TOSTRING
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|features
operator|.
name|CollectionFeature
operator|.
name|RESTRICTS_ELEMENTS
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|testers
operator|.
name|NavigableSetNavigationTester
operator|.
name|getHoleMethods
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|testing
operator|.
name|SerializableTester
operator|.
name|reserialize
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|testing
operator|.
name|SerializableTester
operator|.
name|reserializeAndAssert
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|truth0
operator|.
name|Truth
operator|.
name|ASSERT
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtCompatible
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtIncompatible
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|NavigableSetTestSuiteBuilder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|features
operator|.
name|CollectionSize
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|google
operator|.
name|SetGenerators
operator|.
name|ContiguousSetDescendingGenerator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|google
operator|.
name|SetGenerators
operator|.
name|ContiguousSetGenerator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|google
operator|.
name|SetGenerators
operator|.
name|ContiguousSetHeadsetGenerator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|google
operator|.
name|SetGenerators
operator|.
name|ContiguousSetSubsetGenerator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|google
operator|.
name|SetGenerators
operator|.
name|ContiguousSetTailsetGenerator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|testing
operator|.
name|EqualsTester
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestSuite
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**  * @author Gregory Kick  */
end_comment

begin_class
annotation|@
name|GwtCompatible
argument_list|(
name|emulated
operator|=
literal|true
argument_list|)
DECL|class|ContiguousSetTest
specifier|public
class|class
name|ContiguousSetTest
extends|extends
name|TestCase
block|{
DECL|field|NOT_EQUAL_TO_INTEGERS
specifier|private
specifier|static
name|DiscreteDomain
argument_list|<
name|Integer
argument_list|>
name|NOT_EQUAL_TO_INTEGERS
init|=
operator|new
name|DiscreteDomain
argument_list|<
name|Integer
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Integer
name|next
parameter_list|(
name|Integer
name|value
parameter_list|)
block|{
return|return
name|integers
argument_list|()
operator|.
name|next
argument_list|(
name|value
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Integer
name|previous
parameter_list|(
name|Integer
name|value
parameter_list|)
block|{
return|return
name|integers
argument_list|()
operator|.
name|previous
argument_list|(
name|value
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|distance
parameter_list|(
name|Integer
name|start
parameter_list|,
name|Integer
name|end
parameter_list|)
block|{
return|return
name|integers
argument_list|()
operator|.
name|distance
argument_list|(
name|start
argument_list|,
name|end
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Integer
name|minValue
parameter_list|()
block|{
return|return
name|integers
argument_list|()
operator|.
name|minValue
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Integer
name|maxValue
parameter_list|()
block|{
return|return
name|integers
argument_list|()
operator|.
name|maxValue
argument_list|()
return|;
block|}
block|}
decl_stmt|;
DECL|method|testEquals ()
specifier|public
name|void
name|testEquals
parameter_list|()
block|{
operator|new
name|EqualsTester
argument_list|()
operator|.
name|addEqualityGroup
argument_list|(
name|ContiguousSet
operator|.
name|create
argument_list|(
name|Range
operator|.
name|closed
argument_list|(
literal|1
argument_list|,
literal|3
argument_list|)
argument_list|,
name|integers
argument_list|()
argument_list|)
argument_list|,
name|ContiguousSet
operator|.
name|create
argument_list|(
name|Range
operator|.
name|closedOpen
argument_list|(
literal|1
argument_list|,
literal|4
argument_list|)
argument_list|,
name|integers
argument_list|()
argument_list|)
argument_list|,
name|ContiguousSet
operator|.
name|create
argument_list|(
name|Range
operator|.
name|openClosed
argument_list|(
literal|0
argument_list|,
literal|3
argument_list|)
argument_list|,
name|integers
argument_list|()
argument_list|)
argument_list|,
name|ContiguousSet
operator|.
name|create
argument_list|(
name|Range
operator|.
name|open
argument_list|(
literal|0
argument_list|,
literal|4
argument_list|)
argument_list|,
name|integers
argument_list|()
argument_list|)
argument_list|,
name|ContiguousSet
operator|.
name|create
argument_list|(
name|Range
operator|.
name|closed
argument_list|(
literal|1
argument_list|,
literal|3
argument_list|)
argument_list|,
name|NOT_EQUAL_TO_INTEGERS
argument_list|)
argument_list|,
name|ContiguousSet
operator|.
name|create
argument_list|(
name|Range
operator|.
name|closedOpen
argument_list|(
literal|1
argument_list|,
literal|4
argument_list|)
argument_list|,
name|NOT_EQUAL_TO_INTEGERS
argument_list|)
argument_list|,
name|ContiguousSet
operator|.
name|create
argument_list|(
name|Range
operator|.
name|openClosed
argument_list|(
literal|0
argument_list|,
literal|3
argument_list|)
argument_list|,
name|NOT_EQUAL_TO_INTEGERS
argument_list|)
argument_list|,
name|ContiguousSet
operator|.
name|create
argument_list|(
name|Range
operator|.
name|open
argument_list|(
literal|0
argument_list|,
literal|4
argument_list|)
argument_list|,
name|NOT_EQUAL_TO_INTEGERS
argument_list|)
argument_list|,
name|ImmutableSortedSet
operator|.
name|of
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
argument_list|)
operator|.
name|testEquals
argument_list|()
expr_stmt|;
comment|// not testing hashCode for these because it takes forever to compute
name|assertEquals
argument_list|(
name|ContiguousSet
operator|.
name|create
argument_list|(
name|Range
operator|.
name|closed
argument_list|(
name|Integer
operator|.
name|MIN_VALUE
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
argument_list|,
name|integers
argument_list|()
argument_list|)
argument_list|,
name|ContiguousSet
operator|.
name|create
argument_list|(
name|Range
operator|.
expr|<
name|Integer
operator|>
name|all
argument_list|()
argument_list|,
name|integers
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ContiguousSet
operator|.
name|create
argument_list|(
name|Range
operator|.
name|closed
argument_list|(
name|Integer
operator|.
name|MIN_VALUE
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
argument_list|,
name|integers
argument_list|()
argument_list|)
argument_list|,
name|ContiguousSet
operator|.
name|create
argument_list|(
name|Range
operator|.
name|atLeast
argument_list|(
name|Integer
operator|.
name|MIN_VALUE
argument_list|)
argument_list|,
name|integers
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ContiguousSet
operator|.
name|create
argument_list|(
name|Range
operator|.
name|closed
argument_list|(
name|Integer
operator|.
name|MIN_VALUE
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
argument_list|,
name|integers
argument_list|()
argument_list|)
argument_list|,
name|ContiguousSet
operator|.
name|create
argument_list|(
name|Range
operator|.
name|atMost
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
argument_list|,
name|integers
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
argument_list|(
literal|"SerializableTester"
argument_list|)
DECL|method|testSerialization ()
specifier|public
name|void
name|testSerialization
parameter_list|()
block|{
name|ContiguousSet
argument_list|<
name|Integer
argument_list|>
name|empty
init|=
name|ContiguousSet
operator|.
name|create
argument_list|(
name|Range
operator|.
name|closedOpen
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|,
name|integers
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|empty
operator|instanceof
name|EmptyContiguousSet
argument_list|)
expr_stmt|;
name|reserializeAndAssert
argument_list|(
name|empty
argument_list|)
expr_stmt|;
name|ContiguousSet
argument_list|<
name|Integer
argument_list|>
name|regular
init|=
name|ContiguousSet
operator|.
name|create
argument_list|(
name|Range
operator|.
name|closed
argument_list|(
literal|1
argument_list|,
literal|3
argument_list|)
argument_list|,
name|integers
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|regular
operator|instanceof
name|RegularContiguousSet
argument_list|)
expr_stmt|;
name|reserializeAndAssert
argument_list|(
name|regular
argument_list|)
expr_stmt|;
comment|/*      * Make sure that we're using RegularContiguousSet.SerializedForm and not      * ImmutableSet.SerializedForm, which would be enormous.      */
name|ContiguousSet
argument_list|<
name|Integer
argument_list|>
name|enormous
init|=
name|ContiguousSet
operator|.
name|create
argument_list|(
name|Range
operator|.
expr|<
name|Integer
operator|>
name|all
argument_list|()
argument_list|,
name|integers
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|enormous
operator|instanceof
name|RegularContiguousSet
argument_list|)
expr_stmt|;
comment|// We can't use reserializeAndAssert because it calls hashCode, which is enormously slow.
name|ContiguousSet
argument_list|<
name|Integer
argument_list|>
name|enormousReserialized
init|=
name|reserialize
argument_list|(
name|enormous
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|enormous
argument_list|,
name|enormousReserialized
argument_list|)
expr_stmt|;
block|}
DECL|method|testCreate_noMin ()
specifier|public
name|void
name|testCreate_noMin
parameter_list|()
block|{
name|Range
argument_list|<
name|Integer
argument_list|>
name|range
init|=
name|Range
operator|.
name|lessThan
argument_list|(
literal|0
argument_list|)
decl_stmt|;
try|try
block|{
name|ContiguousSet
operator|.
name|create
argument_list|(
name|range
argument_list|,
name|RangeTest
operator|.
name|UNBOUNDED_DOMAIN
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{}
block|}
DECL|method|testCreate_noMax ()
specifier|public
name|void
name|testCreate_noMax
parameter_list|()
block|{
name|Range
argument_list|<
name|Integer
argument_list|>
name|range
init|=
name|Range
operator|.
name|greaterThan
argument_list|(
literal|0
argument_list|)
decl_stmt|;
try|try
block|{
name|ContiguousSet
operator|.
name|create
argument_list|(
name|range
argument_list|,
name|RangeTest
operator|.
name|UNBOUNDED_DOMAIN
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{}
block|}
DECL|method|testCreate_empty ()
specifier|public
name|void
name|testCreate_empty
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|()
argument_list|,
name|ContiguousSet
operator|.
name|create
argument_list|(
name|Range
operator|.
name|closedOpen
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|,
name|integers
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|()
argument_list|,
name|ContiguousSet
operator|.
name|create
argument_list|(
name|Range
operator|.
name|openClosed
argument_list|(
literal|5
argument_list|,
literal|5
argument_list|)
argument_list|,
name|integers
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|()
argument_list|,
name|ContiguousSet
operator|.
name|create
argument_list|(
name|Range
operator|.
name|lessThan
argument_list|(
name|Integer
operator|.
name|MIN_VALUE
argument_list|)
argument_list|,
name|integers
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|()
argument_list|,
name|ContiguousSet
operator|.
name|create
argument_list|(
name|Range
operator|.
name|greaterThan
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
argument_list|,
name|integers
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testHeadSet ()
specifier|public
name|void
name|testHeadSet
parameter_list|()
block|{
name|ImmutableSortedSet
argument_list|<
name|Integer
argument_list|>
name|set
init|=
name|ContiguousSet
operator|.
name|create
argument_list|(
name|Range
operator|.
name|closed
argument_list|(
literal|1
argument_list|,
literal|3
argument_list|)
argument_list|,
name|integers
argument_list|()
argument_list|)
decl_stmt|;
name|ASSERT
operator|.
name|that
argument_list|(
name|set
operator|.
name|headSet
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
name|ASSERT
operator|.
name|that
argument_list|(
name|set
operator|.
name|headSet
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|has
argument_list|()
operator|.
name|item
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|ASSERT
operator|.
name|that
argument_list|(
name|set
operator|.
name|headSet
argument_list|(
literal|3
argument_list|)
argument_list|)
operator|.
name|has
argument_list|()
operator|.
name|allOf
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
name|ASSERT
operator|.
name|that
argument_list|(
name|set
operator|.
name|headSet
argument_list|(
literal|4
argument_list|)
argument_list|)
operator|.
name|has
argument_list|()
operator|.
name|allOf
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
name|ASSERT
operator|.
name|that
argument_list|(
name|set
operator|.
name|headSet
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
argument_list|)
operator|.
name|has
argument_list|()
operator|.
name|allOf
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
name|ASSERT
operator|.
name|that
argument_list|(
name|set
operator|.
name|headSet
argument_list|(
literal|1
argument_list|,
literal|true
argument_list|)
argument_list|)
operator|.
name|has
argument_list|()
operator|.
name|item
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|ASSERT
operator|.
name|that
argument_list|(
name|set
operator|.
name|headSet
argument_list|(
literal|2
argument_list|,
literal|true
argument_list|)
argument_list|)
operator|.
name|has
argument_list|()
operator|.
name|allOf
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
name|ASSERT
operator|.
name|that
argument_list|(
name|set
operator|.
name|headSet
argument_list|(
literal|3
argument_list|,
literal|true
argument_list|)
argument_list|)
operator|.
name|has
argument_list|()
operator|.
name|allOf
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
name|ASSERT
operator|.
name|that
argument_list|(
name|set
operator|.
name|headSet
argument_list|(
literal|4
argument_list|,
literal|true
argument_list|)
argument_list|)
operator|.
name|has
argument_list|()
operator|.
name|allOf
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
name|ASSERT
operator|.
name|that
argument_list|(
name|set
operator|.
name|headSet
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
literal|true
argument_list|)
argument_list|)
operator|.
name|has
argument_list|()
operator|.
name|allOf
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
block|}
DECL|method|testHeadSet_tooSmall ()
specifier|public
name|void
name|testHeadSet_tooSmall
parameter_list|()
block|{
name|ASSERT
operator|.
name|that
argument_list|(
name|ContiguousSet
operator|.
name|create
argument_list|(
name|Range
operator|.
name|closed
argument_list|(
literal|1
argument_list|,
literal|3
argument_list|)
argument_list|,
name|integers
argument_list|()
argument_list|)
operator|.
name|headSet
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
DECL|method|testTailSet ()
specifier|public
name|void
name|testTailSet
parameter_list|()
block|{
name|ImmutableSortedSet
argument_list|<
name|Integer
argument_list|>
name|set
init|=
name|ContiguousSet
operator|.
name|create
argument_list|(
name|Range
operator|.
name|closed
argument_list|(
literal|1
argument_list|,
literal|3
argument_list|)
argument_list|,
name|integers
argument_list|()
argument_list|)
decl_stmt|;
name|ASSERT
operator|.
name|that
argument_list|(
name|set
operator|.
name|tailSet
argument_list|(
name|Integer
operator|.
name|MIN_VALUE
argument_list|)
argument_list|)
operator|.
name|has
argument_list|()
operator|.
name|allOf
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
name|ASSERT
operator|.
name|that
argument_list|(
name|set
operator|.
name|tailSet
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|has
argument_list|()
operator|.
name|allOf
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
name|ASSERT
operator|.
name|that
argument_list|(
name|set
operator|.
name|tailSet
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|has
argument_list|()
operator|.
name|allOf
argument_list|(
literal|2
argument_list|,
literal|3
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
name|ASSERT
operator|.
name|that
argument_list|(
name|set
operator|.
name|tailSet
argument_list|(
literal|3
argument_list|)
argument_list|)
operator|.
name|has
argument_list|()
operator|.
name|item
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|ASSERT
operator|.
name|that
argument_list|(
name|set
operator|.
name|tailSet
argument_list|(
name|Integer
operator|.
name|MIN_VALUE
argument_list|,
literal|false
argument_list|)
argument_list|)
operator|.
name|has
argument_list|()
operator|.
name|allOf
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
name|ASSERT
operator|.
name|that
argument_list|(
name|set
operator|.
name|tailSet
argument_list|(
literal|1
argument_list|,
literal|false
argument_list|)
argument_list|)
operator|.
name|has
argument_list|()
operator|.
name|allOf
argument_list|(
literal|2
argument_list|,
literal|3
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
name|ASSERT
operator|.
name|that
argument_list|(
name|set
operator|.
name|tailSet
argument_list|(
literal|2
argument_list|,
literal|false
argument_list|)
argument_list|)
operator|.
name|has
argument_list|()
operator|.
name|item
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|ASSERT
operator|.
name|that
argument_list|(
name|set
operator|.
name|tailSet
argument_list|(
literal|3
argument_list|,
literal|false
argument_list|)
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
DECL|method|testTailSet_tooLarge ()
specifier|public
name|void
name|testTailSet_tooLarge
parameter_list|()
block|{
name|ASSERT
operator|.
name|that
argument_list|(
name|ContiguousSet
operator|.
name|create
argument_list|(
name|Range
operator|.
name|closed
argument_list|(
literal|1
argument_list|,
literal|3
argument_list|)
argument_list|,
name|integers
argument_list|()
argument_list|)
operator|.
name|tailSet
argument_list|(
literal|4
argument_list|)
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
DECL|method|testSubSet ()
specifier|public
name|void
name|testSubSet
parameter_list|()
block|{
name|ImmutableSortedSet
argument_list|<
name|Integer
argument_list|>
name|set
init|=
name|ContiguousSet
operator|.
name|create
argument_list|(
name|Range
operator|.
name|closed
argument_list|(
literal|1
argument_list|,
literal|3
argument_list|)
argument_list|,
name|integers
argument_list|()
argument_list|)
decl_stmt|;
name|ASSERT
operator|.
name|that
argument_list|(
name|set
operator|.
name|subSet
argument_list|(
literal|1
argument_list|,
literal|4
argument_list|)
argument_list|)
operator|.
name|has
argument_list|()
operator|.
name|allOf
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
name|ASSERT
operator|.
name|that
argument_list|(
name|set
operator|.
name|subSet
argument_list|(
literal|2
argument_list|,
literal|4
argument_list|)
argument_list|)
operator|.
name|has
argument_list|()
operator|.
name|allOf
argument_list|(
literal|2
argument_list|,
literal|3
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
name|ASSERT
operator|.
name|that
argument_list|(
name|set
operator|.
name|subSet
argument_list|(
literal|3
argument_list|,
literal|4
argument_list|)
argument_list|)
operator|.
name|has
argument_list|()
operator|.
name|item
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|ASSERT
operator|.
name|that
argument_list|(
name|set
operator|.
name|subSet
argument_list|(
literal|3
argument_list|,
literal|3
argument_list|)
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
name|ASSERT
operator|.
name|that
argument_list|(
name|set
operator|.
name|subSet
argument_list|(
literal|2
argument_list|,
literal|3
argument_list|)
argument_list|)
operator|.
name|has
argument_list|()
operator|.
name|item
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|ASSERT
operator|.
name|that
argument_list|(
name|set
operator|.
name|subSet
argument_list|(
literal|1
argument_list|,
literal|3
argument_list|)
argument_list|)
operator|.
name|has
argument_list|()
operator|.
name|allOf
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
name|ASSERT
operator|.
name|that
argument_list|(
name|set
operator|.
name|subSet
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
argument_list|)
operator|.
name|has
argument_list|()
operator|.
name|item
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|ASSERT
operator|.
name|that
argument_list|(
name|set
operator|.
name|subSet
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|)
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
name|ASSERT
operator|.
name|that
argument_list|(
name|set
operator|.
name|subSet
argument_list|(
name|Integer
operator|.
name|MIN_VALUE
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
argument_list|)
operator|.
name|has
argument_list|()
operator|.
name|allOf
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
name|ASSERT
operator|.
name|that
argument_list|(
name|set
operator|.
name|subSet
argument_list|(
literal|1
argument_list|,
literal|true
argument_list|,
literal|3
argument_list|,
literal|true
argument_list|)
argument_list|)
operator|.
name|has
argument_list|()
operator|.
name|allOf
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
name|ASSERT
operator|.
name|that
argument_list|(
name|set
operator|.
name|subSet
argument_list|(
literal|1
argument_list|,
literal|false
argument_list|,
literal|3
argument_list|,
literal|true
argument_list|)
argument_list|)
operator|.
name|has
argument_list|()
operator|.
name|allOf
argument_list|(
literal|2
argument_list|,
literal|3
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
name|ASSERT
operator|.
name|that
argument_list|(
name|set
operator|.
name|subSet
argument_list|(
literal|1
argument_list|,
literal|true
argument_list|,
literal|3
argument_list|,
literal|false
argument_list|)
argument_list|)
operator|.
name|has
argument_list|()
operator|.
name|allOf
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
name|ASSERT
operator|.
name|that
argument_list|(
name|set
operator|.
name|subSet
argument_list|(
literal|1
argument_list|,
literal|false
argument_list|,
literal|3
argument_list|,
literal|false
argument_list|)
argument_list|)
operator|.
name|has
argument_list|()
operator|.
name|item
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
DECL|method|testSubSet_outOfOrder ()
specifier|public
name|void
name|testSubSet_outOfOrder
parameter_list|()
block|{
name|ImmutableSortedSet
argument_list|<
name|Integer
argument_list|>
name|set
init|=
name|ContiguousSet
operator|.
name|create
argument_list|(
name|Range
operator|.
name|closed
argument_list|(
literal|1
argument_list|,
literal|3
argument_list|)
argument_list|,
name|integers
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|set
operator|.
name|subSet
argument_list|(
literal|3
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{}
block|}
DECL|method|testSubSet_tooLarge ()
specifier|public
name|void
name|testSubSet_tooLarge
parameter_list|()
block|{
name|ASSERT
operator|.
name|that
argument_list|(
name|ContiguousSet
operator|.
name|create
argument_list|(
name|Range
operator|.
name|closed
argument_list|(
literal|1
argument_list|,
literal|3
argument_list|)
argument_list|,
name|integers
argument_list|()
argument_list|)
operator|.
name|subSet
argument_list|(
literal|4
argument_list|,
literal|6
argument_list|)
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
DECL|method|testSubSet_tooSmall ()
specifier|public
name|void
name|testSubSet_tooSmall
parameter_list|()
block|{
name|ASSERT
operator|.
name|that
argument_list|(
name|ContiguousSet
operator|.
name|create
argument_list|(
name|Range
operator|.
name|closed
argument_list|(
literal|1
argument_list|,
literal|3
argument_list|)
argument_list|,
name|integers
argument_list|()
argument_list|)
operator|.
name|subSet
argument_list|(
operator|-
literal|1
argument_list|,
literal|0
argument_list|)
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
DECL|method|testFirst ()
specifier|public
name|void
name|testFirst
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|ContiguousSet
operator|.
name|create
argument_list|(
name|Range
operator|.
name|closed
argument_list|(
literal|1
argument_list|,
literal|3
argument_list|)
argument_list|,
name|integers
argument_list|()
argument_list|)
operator|.
name|first
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|ContiguousSet
operator|.
name|create
argument_list|(
name|Range
operator|.
name|open
argument_list|(
literal|0
argument_list|,
literal|4
argument_list|)
argument_list|,
name|integers
argument_list|()
argument_list|)
operator|.
name|first
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|MIN_VALUE
argument_list|,
name|ContiguousSet
operator|.
name|create
argument_list|(
name|Range
operator|.
expr|<
name|Integer
operator|>
name|all
argument_list|()
argument_list|,
name|integers
argument_list|()
argument_list|)
operator|.
name|first
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testLast ()
specifier|public
name|void
name|testLast
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|ContiguousSet
operator|.
name|create
argument_list|(
name|Range
operator|.
name|closed
argument_list|(
literal|1
argument_list|,
literal|3
argument_list|)
argument_list|,
name|integers
argument_list|()
argument_list|)
operator|.
name|last
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|ContiguousSet
operator|.
name|create
argument_list|(
name|Range
operator|.
name|open
argument_list|(
literal|0
argument_list|,
literal|4
argument_list|)
argument_list|,
name|integers
argument_list|()
argument_list|)
operator|.
name|last
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
name|ContiguousSet
operator|.
name|create
argument_list|(
name|Range
operator|.
expr|<
name|Integer
operator|>
name|all
argument_list|()
argument_list|,
name|integers
argument_list|()
argument_list|)
operator|.
name|last
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testContains ()
specifier|public
name|void
name|testContains
parameter_list|()
block|{
name|ImmutableSortedSet
argument_list|<
name|Integer
argument_list|>
name|set
init|=
name|ContiguousSet
operator|.
name|create
argument_list|(
name|Range
operator|.
name|closed
argument_list|(
literal|1
argument_list|,
literal|3
argument_list|)
argument_list|,
name|integers
argument_list|()
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|set
operator|.
name|contains
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|set
operator|.
name|contains
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|set
operator|.
name|contains
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|set
operator|.
name|contains
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|set
operator|.
name|contains
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|set
operator|=
name|ContiguousSet
operator|.
name|create
argument_list|(
name|Range
operator|.
name|open
argument_list|(
literal|0
argument_list|,
literal|4
argument_list|)
argument_list|,
name|integers
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|set
operator|.
name|contains
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|set
operator|.
name|contains
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|set
operator|.
name|contains
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|set
operator|.
name|contains
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|set
operator|.
name|contains
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|set
operator|.
name|contains
argument_list|(
literal|"blah"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testContainsAll ()
specifier|public
name|void
name|testContainsAll
parameter_list|()
block|{
name|ImmutableSortedSet
argument_list|<
name|Integer
argument_list|>
name|set
init|=
name|ContiguousSet
operator|.
name|create
argument_list|(
name|Range
operator|.
name|closed
argument_list|(
literal|1
argument_list|,
literal|3
argument_list|)
argument_list|,
name|integers
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Set
argument_list|<
name|Integer
argument_list|>
name|subset
range|:
name|Sets
operator|.
name|powerSet
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
argument_list|)
control|)
block|{
name|assertTrue
argument_list|(
name|set
operator|.
name|containsAll
argument_list|(
name|subset
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Set
argument_list|<
name|Integer
argument_list|>
name|subset
range|:
name|Sets
operator|.
name|powerSet
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
argument_list|)
control|)
block|{
name|assertFalse
argument_list|(
name|set
operator|.
name|containsAll
argument_list|(
name|Sets
operator|.
name|union
argument_list|(
name|subset
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|9
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertFalse
argument_list|(
name|set
operator|.
name|containsAll
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"blah"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testRange ()
specifier|public
name|void
name|testRange
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|Range
operator|.
name|closed
argument_list|(
literal|1
argument_list|,
literal|3
argument_list|)
argument_list|,
name|ContiguousSet
operator|.
name|create
argument_list|(
name|Range
operator|.
name|closed
argument_list|(
literal|1
argument_list|,
literal|3
argument_list|)
argument_list|,
name|integers
argument_list|()
argument_list|)
operator|.
name|range
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Range
operator|.
name|closed
argument_list|(
literal|1
argument_list|,
literal|3
argument_list|)
argument_list|,
name|ContiguousSet
operator|.
name|create
argument_list|(
name|Range
operator|.
name|closedOpen
argument_list|(
literal|1
argument_list|,
literal|4
argument_list|)
argument_list|,
name|integers
argument_list|()
argument_list|)
operator|.
name|range
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Range
operator|.
name|closed
argument_list|(
literal|1
argument_list|,
literal|3
argument_list|)
argument_list|,
name|ContiguousSet
operator|.
name|create
argument_list|(
name|Range
operator|.
name|open
argument_list|(
literal|0
argument_list|,
literal|4
argument_list|)
argument_list|,
name|integers
argument_list|()
argument_list|)
operator|.
name|range
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Range
operator|.
name|closed
argument_list|(
literal|1
argument_list|,
literal|3
argument_list|)
argument_list|,
name|ContiguousSet
operator|.
name|create
argument_list|(
name|Range
operator|.
name|openClosed
argument_list|(
literal|0
argument_list|,
literal|3
argument_list|)
argument_list|,
name|integers
argument_list|()
argument_list|)
operator|.
name|range
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Range
operator|.
name|openClosed
argument_list|(
literal|0
argument_list|,
literal|3
argument_list|)
argument_list|,
name|ContiguousSet
operator|.
name|create
argument_list|(
name|Range
operator|.
name|closed
argument_list|(
literal|1
argument_list|,
literal|3
argument_list|)
argument_list|,
name|integers
argument_list|()
argument_list|)
operator|.
name|range
argument_list|(
name|OPEN
argument_list|,
name|CLOSED
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Range
operator|.
name|openClosed
argument_list|(
literal|0
argument_list|,
literal|3
argument_list|)
argument_list|,
name|ContiguousSet
operator|.
name|create
argument_list|(
name|Range
operator|.
name|closedOpen
argument_list|(
literal|1
argument_list|,
literal|4
argument_list|)
argument_list|,
name|integers
argument_list|()
argument_list|)
operator|.
name|range
argument_list|(
name|OPEN
argument_list|,
name|CLOSED
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Range
operator|.
name|openClosed
argument_list|(
literal|0
argument_list|,
literal|3
argument_list|)
argument_list|,
name|ContiguousSet
operator|.
name|create
argument_list|(
name|Range
operator|.
name|open
argument_list|(
literal|0
argument_list|,
literal|4
argument_list|)
argument_list|,
name|integers
argument_list|()
argument_list|)
operator|.
name|range
argument_list|(
name|OPEN
argument_list|,
name|CLOSED
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Range
operator|.
name|openClosed
argument_list|(
literal|0
argument_list|,
literal|3
argument_list|)
argument_list|,
name|ContiguousSet
operator|.
name|create
argument_list|(
name|Range
operator|.
name|openClosed
argument_list|(
literal|0
argument_list|,
literal|3
argument_list|)
argument_list|,
name|integers
argument_list|()
argument_list|)
operator|.
name|range
argument_list|(
name|OPEN
argument_list|,
name|CLOSED
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Range
operator|.
name|open
argument_list|(
literal|0
argument_list|,
literal|4
argument_list|)
argument_list|,
name|ContiguousSet
operator|.
name|create
argument_list|(
name|Range
operator|.
name|closed
argument_list|(
literal|1
argument_list|,
literal|3
argument_list|)
argument_list|,
name|integers
argument_list|()
argument_list|)
operator|.
name|range
argument_list|(
name|OPEN
argument_list|,
name|OPEN
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Range
operator|.
name|open
argument_list|(
literal|0
argument_list|,
literal|4
argument_list|)
argument_list|,
name|ContiguousSet
operator|.
name|create
argument_list|(
name|Range
operator|.
name|closedOpen
argument_list|(
literal|1
argument_list|,
literal|4
argument_list|)
argument_list|,
name|integers
argument_list|()
argument_list|)
operator|.
name|range
argument_list|(
name|OPEN
argument_list|,
name|OPEN
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Range
operator|.
name|open
argument_list|(
literal|0
argument_list|,
literal|4
argument_list|)
argument_list|,
name|ContiguousSet
operator|.
name|create
argument_list|(
name|Range
operator|.
name|open
argument_list|(
literal|0
argument_list|,
literal|4
argument_list|)
argument_list|,
name|integers
argument_list|()
argument_list|)
operator|.
name|range
argument_list|(
name|OPEN
argument_list|,
name|OPEN
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Range
operator|.
name|open
argument_list|(
literal|0
argument_list|,
literal|4
argument_list|)
argument_list|,
name|ContiguousSet
operator|.
name|create
argument_list|(
name|Range
operator|.
name|openClosed
argument_list|(
literal|0
argument_list|,
literal|3
argument_list|)
argument_list|,
name|integers
argument_list|()
argument_list|)
operator|.
name|range
argument_list|(
name|OPEN
argument_list|,
name|OPEN
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Range
operator|.
name|closedOpen
argument_list|(
literal|1
argument_list|,
literal|4
argument_list|)
argument_list|,
name|ContiguousSet
operator|.
name|create
argument_list|(
name|Range
operator|.
name|closed
argument_list|(
literal|1
argument_list|,
literal|3
argument_list|)
argument_list|,
name|integers
argument_list|()
argument_list|)
operator|.
name|range
argument_list|(
name|CLOSED
argument_list|,
name|OPEN
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Range
operator|.
name|closedOpen
argument_list|(
literal|1
argument_list|,
literal|4
argument_list|)
argument_list|,
name|ContiguousSet
operator|.
name|create
argument_list|(
name|Range
operator|.
name|closedOpen
argument_list|(
literal|1
argument_list|,
literal|4
argument_list|)
argument_list|,
name|integers
argument_list|()
argument_list|)
operator|.
name|range
argument_list|(
name|CLOSED
argument_list|,
name|OPEN
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Range
operator|.
name|closedOpen
argument_list|(
literal|1
argument_list|,
literal|4
argument_list|)
argument_list|,
name|ContiguousSet
operator|.
name|create
argument_list|(
name|Range
operator|.
name|open
argument_list|(
literal|0
argument_list|,
literal|4
argument_list|)
argument_list|,
name|integers
argument_list|()
argument_list|)
operator|.
name|range
argument_list|(
name|CLOSED
argument_list|,
name|OPEN
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Range
operator|.
name|closedOpen
argument_list|(
literal|1
argument_list|,
literal|4
argument_list|)
argument_list|,
name|ContiguousSet
operator|.
name|create
argument_list|(
name|Range
operator|.
name|openClosed
argument_list|(
literal|0
argument_list|,
literal|3
argument_list|)
argument_list|,
name|integers
argument_list|()
argument_list|)
operator|.
name|range
argument_list|(
name|CLOSED
argument_list|,
name|OPEN
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testRange_unboundedRange ()
specifier|public
name|void
name|testRange_unboundedRange
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|Range
operator|.
name|closed
argument_list|(
name|Integer
operator|.
name|MIN_VALUE
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
argument_list|,
name|ContiguousSet
operator|.
name|create
argument_list|(
name|Range
operator|.
expr|<
name|Integer
operator|>
name|all
argument_list|()
argument_list|,
name|integers
argument_list|()
argument_list|)
operator|.
name|range
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Range
operator|.
name|atLeast
argument_list|(
name|Integer
operator|.
name|MIN_VALUE
argument_list|)
argument_list|,
name|ContiguousSet
operator|.
name|create
argument_list|(
name|Range
operator|.
expr|<
name|Integer
operator|>
name|all
argument_list|()
argument_list|,
name|integers
argument_list|()
argument_list|)
operator|.
name|range
argument_list|(
name|CLOSED
argument_list|,
name|OPEN
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Range
operator|.
name|all
argument_list|()
argument_list|,
name|ContiguousSet
operator|.
name|create
argument_list|(
name|Range
operator|.
expr|<
name|Integer
operator|>
name|all
argument_list|()
argument_list|,
name|integers
argument_list|()
argument_list|)
operator|.
name|range
argument_list|(
name|OPEN
argument_list|,
name|OPEN
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Range
operator|.
name|atMost
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
argument_list|,
name|ContiguousSet
operator|.
name|create
argument_list|(
name|Range
operator|.
expr|<
name|Integer
operator|>
name|all
argument_list|()
argument_list|,
name|integers
argument_list|()
argument_list|)
operator|.
name|range
argument_list|(
name|OPEN
argument_list|,
name|CLOSED
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testIntersection_empty ()
specifier|public
name|void
name|testIntersection_empty
parameter_list|()
block|{
name|ContiguousSet
argument_list|<
name|Integer
argument_list|>
name|set
init|=
name|ContiguousSet
operator|.
name|create
argument_list|(
name|Range
operator|.
name|closed
argument_list|(
literal|1
argument_list|,
literal|3
argument_list|)
argument_list|,
name|integers
argument_list|()
argument_list|)
decl_stmt|;
name|ContiguousSet
argument_list|<
name|Integer
argument_list|>
name|emptySet
init|=
name|ContiguousSet
operator|.
name|create
argument_list|(
name|Range
operator|.
name|closedOpen
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|)
argument_list|,
name|integers
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|()
argument_list|,
name|set
operator|.
name|intersection
argument_list|(
name|emptySet
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|()
argument_list|,
name|emptySet
operator|.
name|intersection
argument_list|(
name|set
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|()
argument_list|,
name|ContiguousSet
operator|.
name|create
argument_list|(
name|Range
operator|.
name|closed
argument_list|(
operator|-
literal|5
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|,
name|integers
argument_list|()
argument_list|)
operator|.
name|intersection
argument_list|(
name|ContiguousSet
operator|.
name|create
argument_list|(
name|Range
operator|.
name|open
argument_list|(
literal|3
argument_list|,
literal|64
argument_list|)
argument_list|,
name|integers
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testIntersection ()
specifier|public
name|void
name|testIntersection
parameter_list|()
block|{
name|ContiguousSet
argument_list|<
name|Integer
argument_list|>
name|set
init|=
name|ContiguousSet
operator|.
name|create
argument_list|(
name|Range
operator|.
name|closed
argument_list|(
literal|1
argument_list|,
literal|3
argument_list|)
argument_list|,
name|integers
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
argument_list|,
name|ContiguousSet
operator|.
name|create
argument_list|(
name|Range
operator|.
name|open
argument_list|(
operator|-
literal|1
argument_list|,
literal|4
argument_list|)
argument_list|,
name|integers
argument_list|()
argument_list|)
operator|.
name|intersection
argument_list|(
name|set
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
argument_list|,
name|set
operator|.
name|intersection
argument_list|(
name|ContiguousSet
operator|.
name|create
argument_list|(
name|Range
operator|.
name|open
argument_list|(
operator|-
literal|1
argument_list|,
literal|4
argument_list|)
argument_list|,
name|integers
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
argument_list|(
literal|"suite"
argument_list|)
DECL|class|BuiltTests
specifier|public
specifier|static
class|class
name|BuiltTests
extends|extends
name|TestCase
block|{
DECL|method|suite ()
specifier|public
specifier|static
name|Test
name|suite
parameter_list|()
block|{
name|TestSuite
name|suite
init|=
operator|new
name|TestSuite
argument_list|()
decl_stmt|;
name|suite
operator|.
name|addTest
argument_list|(
name|NavigableSetTestSuiteBuilder
operator|.
name|using
argument_list|(
operator|new
name|ContiguousSetGenerator
argument_list|()
argument_list|)
operator|.
name|named
argument_list|(
literal|"Range.asSet"
argument_list|)
operator|.
name|withFeatures
argument_list|(
name|CollectionSize
operator|.
name|ANY
argument_list|,
name|KNOWN_ORDER
argument_list|,
name|ALLOWS_NULL_QUERIES
argument_list|,
name|NON_STANDARD_TOSTRING
argument_list|,
name|RESTRICTS_ELEMENTS
argument_list|)
operator|.
name|suppressing
argument_list|(
name|getHoleMethods
argument_list|()
argument_list|)
operator|.
name|createTestSuite
argument_list|()
argument_list|)
expr_stmt|;
name|suite
operator|.
name|addTest
argument_list|(
name|NavigableSetTestSuiteBuilder
operator|.
name|using
argument_list|(
operator|new
name|ContiguousSetHeadsetGenerator
argument_list|()
argument_list|)
operator|.
name|named
argument_list|(
literal|"Range.asSet, headset"
argument_list|)
operator|.
name|withFeatures
argument_list|(
name|CollectionSize
operator|.
name|ANY
argument_list|,
name|KNOWN_ORDER
argument_list|,
name|ALLOWS_NULL_QUERIES
argument_list|,
name|NON_STANDARD_TOSTRING
argument_list|,
name|RESTRICTS_ELEMENTS
argument_list|)
operator|.
name|suppressing
argument_list|(
name|getHoleMethods
argument_list|()
argument_list|)
operator|.
name|createTestSuite
argument_list|()
argument_list|)
expr_stmt|;
name|suite
operator|.
name|addTest
argument_list|(
name|NavigableSetTestSuiteBuilder
operator|.
name|using
argument_list|(
operator|new
name|ContiguousSetTailsetGenerator
argument_list|()
argument_list|)
operator|.
name|named
argument_list|(
literal|"Range.asSet, tailset"
argument_list|)
operator|.
name|withFeatures
argument_list|(
name|CollectionSize
operator|.
name|ANY
argument_list|,
name|KNOWN_ORDER
argument_list|,
name|ALLOWS_NULL_QUERIES
argument_list|,
name|NON_STANDARD_TOSTRING
argument_list|,
name|RESTRICTS_ELEMENTS
argument_list|)
operator|.
name|suppressing
argument_list|(
name|getHoleMethods
argument_list|()
argument_list|)
operator|.
name|createTestSuite
argument_list|()
argument_list|)
expr_stmt|;
name|suite
operator|.
name|addTest
argument_list|(
name|NavigableSetTestSuiteBuilder
operator|.
name|using
argument_list|(
operator|new
name|ContiguousSetSubsetGenerator
argument_list|()
argument_list|)
operator|.
name|named
argument_list|(
literal|"Range.asSet, subset"
argument_list|)
operator|.
name|withFeatures
argument_list|(
name|CollectionSize
operator|.
name|ANY
argument_list|,
name|KNOWN_ORDER
argument_list|,
name|ALLOWS_NULL_QUERIES
argument_list|,
name|NON_STANDARD_TOSTRING
argument_list|,
name|RESTRICTS_ELEMENTS
argument_list|)
operator|.
name|suppressing
argument_list|(
name|getHoleMethods
argument_list|()
argument_list|)
operator|.
name|createTestSuite
argument_list|()
argument_list|)
expr_stmt|;
name|suite
operator|.
name|addTest
argument_list|(
name|NavigableSetTestSuiteBuilder
operator|.
name|using
argument_list|(
operator|new
name|ContiguousSetDescendingGenerator
argument_list|()
argument_list|)
operator|.
name|named
argument_list|(
literal|"Range.asSet.descendingSet"
argument_list|)
operator|.
name|withFeatures
argument_list|(
name|CollectionSize
operator|.
name|ANY
argument_list|,
name|KNOWN_ORDER
argument_list|,
name|ALLOWS_NULL_QUERIES
argument_list|,
name|NON_STANDARD_TOSTRING
argument_list|,
name|RESTRICTS_ELEMENTS
argument_list|)
operator|.
name|suppressing
argument_list|(
name|getHoleMethods
argument_list|()
argument_list|)
operator|.
name|createTestSuite
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|suite
return|;
block|}
block|}
block|}
end_class

end_unit

