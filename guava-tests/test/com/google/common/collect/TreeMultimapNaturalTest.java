begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2007 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.collect
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkArgument
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertThat
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtCompatible
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtIncompatible
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|DerivedComparable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|Helpers
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|NavigableMapTestSuiteBuilder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|NavigableSetTestSuiteBuilder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|SampleElements
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|TestSortedMapGenerator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|TestStringSetGenerator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|TestStringSortedSetGenerator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|features
operator|.
name|CollectionFeature
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|features
operator|.
name|CollectionSize
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|features
operator|.
name|MapFeature
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|google
operator|.
name|SortedSetMultimapTestSuiteBuilder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|google
operator|.
name|TestStringSetMultimapGenerator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|testing
operator|.
name|SerializableTester
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestSuite
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NavigableMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NavigableSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedSet
import|;
end_import

begin_comment
comment|/**  * Unit tests for {@code TreeMultimap} with natural ordering.  *  * @author Jared Levy  */
end_comment

begin_class
annotation|@
name|GwtCompatible
argument_list|(
name|emulated
operator|=
literal|true
argument_list|)
DECL|class|TreeMultimapNaturalTest
specifier|public
class|class
name|TreeMultimapNaturalTest
extends|extends
name|TestCase
block|{
annotation|@
name|GwtIncompatible
argument_list|(
literal|"suite"
argument_list|)
annotation|@
name|SuppressUnderAndroid
DECL|method|suite ()
specifier|public
specifier|static
name|Test
name|suite
parameter_list|()
block|{
name|TestSuite
name|suite
init|=
operator|new
name|TestSuite
argument_list|()
decl_stmt|;
comment|// TODO(lowasser): should we force TreeMultimap to be more thorough about checking nulls?
name|suite
operator|.
name|addTest
argument_list|(
name|SortedSetMultimapTestSuiteBuilder
operator|.
name|using
argument_list|(
operator|new
name|TestStringSetMultimapGenerator
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|SetMultimap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|create
parameter_list|(
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
index|[]
name|entries
parameter_list|)
block|{
name|SetMultimap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|multimap
init|=
name|TreeMultimap
operator|.
name|create
argument_list|(
name|Ordering
operator|.
name|natural
argument_list|()
operator|.
name|nullsFirst
argument_list|()
argument_list|,
name|Ordering
operator|.
name|natural
argument_list|()
operator|.
name|nullsFirst
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|entries
control|)
block|{
name|multimap
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|multimap
return|;
block|}
annotation|@
name|Override
specifier|public
name|Iterable
argument_list|<
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|order
parameter_list|(
name|List
argument_list|<
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|insertionOrder
parameter_list|)
block|{
return|return
operator|new
name|Ordering
argument_list|<
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|left
parameter_list|,
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|right
parameter_list|)
block|{
return|return
name|ComparisonChain
operator|.
name|start
argument_list|()
operator|.
name|compare
argument_list|(
name|left
operator|.
name|getKey
argument_list|()
argument_list|,
name|right
operator|.
name|getKey
argument_list|()
argument_list|,
name|Ordering
operator|.
name|natural
argument_list|()
operator|.
name|nullsFirst
argument_list|()
argument_list|)
operator|.
name|compare
argument_list|(
name|left
operator|.
name|getValue
argument_list|()
argument_list|,
name|right
operator|.
name|getValue
argument_list|()
argument_list|,
name|Ordering
operator|.
name|natural
argument_list|()
operator|.
name|nullsFirst
argument_list|()
argument_list|)
operator|.
name|result
argument_list|()
return|;
block|}
block|}
operator|.
name|sortedCopy
argument_list|(
name|insertionOrder
argument_list|)
return|;
block|}
block|}
argument_list|)
operator|.
name|named
argument_list|(
literal|"TreeMultimap nullsFirst"
argument_list|)
operator|.
name|withFeatures
argument_list|(
name|MapFeature
operator|.
name|ALLOWS_NULL_KEYS
argument_list|,
name|MapFeature
operator|.
name|ALLOWS_NULL_VALUES
argument_list|,
name|MapFeature
operator|.
name|ALLOWS_ANY_NULL_QUERIES
argument_list|,
name|MapFeature
operator|.
name|GENERAL_PURPOSE
argument_list|,
name|MapFeature
operator|.
name|FAILS_FAST_ON_CONCURRENT_MODIFICATION
argument_list|,
name|CollectionFeature
operator|.
name|SUPPORTS_ITERATOR_REMOVE
argument_list|,
name|CollectionFeature
operator|.
name|KNOWN_ORDER
argument_list|,
name|CollectionFeature
operator|.
name|SERIALIZABLE
argument_list|,
name|CollectionSize
operator|.
name|ANY
argument_list|)
operator|.
name|createTestSuite
argument_list|()
argument_list|)
expr_stmt|;
name|suite
operator|.
name|addTest
argument_list|(
name|NavigableSetTestSuiteBuilder
operator|.
name|using
argument_list|(
operator|new
name|TestStringSortedSetGenerator
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|NavigableSet
argument_list|<
name|String
argument_list|>
name|create
parameter_list|(
name|String
index|[]
name|elements
parameter_list|)
block|{
name|TreeMultimap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|multimap
init|=
name|TreeMultimap
operator|.
name|create
argument_list|(
name|Ordering
operator|.
name|natural
argument_list|()
operator|.
name|nullsFirst
argument_list|()
argument_list|,
name|Ordering
operator|.
name|natural
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|elements
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|multimap
operator|.
name|put
argument_list|(
name|elements
index|[
name|i
index|]
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
return|return
name|multimap
operator|.
name|keySet
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|order
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|insertionOrder
parameter_list|)
block|{
return|return
name|Ordering
operator|.
name|natural
argument_list|()
operator|.
name|nullsFirst
argument_list|()
operator|.
name|sortedCopy
argument_list|(
name|insertionOrder
argument_list|)
return|;
block|}
block|}
argument_list|)
operator|.
name|named
argument_list|(
literal|"TreeMultimap.keySet"
argument_list|)
operator|.
name|withFeatures
argument_list|(
name|CollectionFeature
operator|.
name|ALLOWS_NULL_VALUES
argument_list|,
name|CollectionFeature
operator|.
name|REMOVE_OPERATIONS
argument_list|,
name|CollectionFeature
operator|.
name|KNOWN_ORDER
argument_list|,
name|CollectionSize
operator|.
name|ANY
argument_list|)
operator|.
name|createTestSuite
argument_list|()
argument_list|)
expr_stmt|;
name|suite
operator|.
name|addTest
argument_list|(
name|NavigableMapTestSuiteBuilder
operator|.
name|using
argument_list|(
operator|new
name|TestSortedMapGenerator
argument_list|<
name|String
argument_list|,
name|Collection
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
index|[]
name|createKeyArray
parameter_list|(
name|int
name|length
parameter_list|)
block|{
return|return
operator|new
name|String
index|[
name|length
index|]
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
specifier|public
name|Collection
argument_list|<
name|String
argument_list|>
index|[]
name|createValueArray
parameter_list|(
name|int
name|length
parameter_list|)
block|{
return|return
operator|new
name|Collection
index|[
name|length
index|]
return|;
block|}
annotation|@
name|Override
specifier|public
name|SampleElements
argument_list|<
name|Entry
argument_list|<
name|String
argument_list|,
name|Collection
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|>
name|samples
parameter_list|()
block|{
return|return
operator|new
name|SampleElements
argument_list|<
name|Entry
argument_list|<
name|String
argument_list|,
name|Collection
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|>
argument_list|(
name|Helpers
operator|.
name|mapEntry
argument_list|(
literal|"a"
argument_list|,
operator|(
name|Collection
argument_list|<
name|String
argument_list|>
operator|)
name|ImmutableSortedSet
operator|.
name|of
argument_list|(
literal|"alex"
argument_list|)
argument_list|)
argument_list|,
name|Helpers
operator|.
name|mapEntry
argument_list|(
literal|"b"
argument_list|,
operator|(
name|Collection
argument_list|<
name|String
argument_list|>
operator|)
name|ImmutableSortedSet
operator|.
name|of
argument_list|(
literal|"bob"
argument_list|,
literal|"bagel"
argument_list|)
argument_list|)
argument_list|,
name|Helpers
operator|.
name|mapEntry
argument_list|(
literal|"c"
argument_list|,
operator|(
name|Collection
argument_list|<
name|String
argument_list|>
operator|)
name|ImmutableSortedSet
operator|.
name|of
argument_list|(
literal|"carl"
argument_list|,
literal|"carol"
argument_list|)
argument_list|)
argument_list|,
name|Helpers
operator|.
name|mapEntry
argument_list|(
literal|"d"
argument_list|,
operator|(
name|Collection
argument_list|<
name|String
argument_list|>
operator|)
name|ImmutableSortedSet
operator|.
name|of
argument_list|(
literal|"david"
argument_list|,
literal|"dead"
argument_list|)
argument_list|)
argument_list|,
name|Helpers
operator|.
name|mapEntry
argument_list|(
literal|"e"
argument_list|,
operator|(
name|Collection
argument_list|<
name|String
argument_list|>
operator|)
name|ImmutableSortedSet
operator|.
name|of
argument_list|(
literal|"eric"
argument_list|,
literal|"elaine"
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
specifier|public
name|Entry
argument_list|<
name|String
argument_list|,
name|Collection
argument_list|<
name|String
argument_list|>
argument_list|>
index|[]
name|createArray
parameter_list|(
name|int
name|length
parameter_list|)
block|{
return|return
operator|new
name|Entry
index|[
name|length
index|]
return|;
block|}
annotation|@
name|Override
specifier|public
name|Iterable
argument_list|<
name|Entry
argument_list|<
name|String
argument_list|,
name|Collection
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|>
name|order
parameter_list|(
name|List
argument_list|<
name|Entry
argument_list|<
name|String
argument_list|,
name|Collection
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|>
name|insertionOrder
parameter_list|)
block|{
return|return
operator|new
name|Ordering
argument_list|<
name|Entry
argument_list|<
name|String
argument_list|,
name|?
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|Entry
argument_list|<
name|String
argument_list|,
name|?
argument_list|>
name|left
parameter_list|,
name|Entry
argument_list|<
name|String
argument_list|,
name|?
argument_list|>
name|right
parameter_list|)
block|{
return|return
name|left
operator|.
name|getKey
argument_list|()
operator|.
name|compareTo
argument_list|(
name|right
operator|.
name|getKey
argument_list|()
argument_list|)
return|;
block|}
block|}
operator|.
name|sortedCopy
argument_list|(
name|insertionOrder
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|NavigableMap
argument_list|<
name|String
argument_list|,
name|Collection
argument_list|<
name|String
argument_list|>
argument_list|>
name|create
parameter_list|(
name|Object
modifier|...
name|elements
parameter_list|)
block|{
name|TreeMultimap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|multimap
init|=
name|TreeMultimap
operator|.
name|create
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
name|o
range|:
name|elements
control|)
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Entry
argument_list|<
name|String
argument_list|,
name|Collection
argument_list|<
name|String
argument_list|>
argument_list|>
name|entry
init|=
operator|(
name|Entry
argument_list|<
name|String
argument_list|,
name|Collection
argument_list|<
name|String
argument_list|>
argument_list|>
operator|)
name|o
decl_stmt|;
name|checkArgument
argument_list|(
operator|!
name|multimap
operator|.
name|containsKey
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|multimap
operator|.
name|putAll
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|multimap
operator|.
name|asMap
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Entry
argument_list|<
name|String
argument_list|,
name|Collection
argument_list|<
name|String
argument_list|>
argument_list|>
name|belowSamplesLesser
parameter_list|()
block|{
return|return
name|Helpers
operator|.
name|mapEntry
argument_list|(
literal|"-- a"
argument_list|,
operator|(
name|Collection
argument_list|<
name|String
argument_list|>
operator|)
name|ImmutableSortedSet
operator|.
name|of
argument_list|(
literal|"--below"
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Entry
argument_list|<
name|String
argument_list|,
name|Collection
argument_list|<
name|String
argument_list|>
argument_list|>
name|belowSamplesGreater
parameter_list|()
block|{
return|return
name|Helpers
operator|.
name|mapEntry
argument_list|(
literal|"-- b"
argument_list|,
operator|(
name|Collection
argument_list|<
name|String
argument_list|>
operator|)
name|ImmutableSortedSet
operator|.
name|of
argument_list|(
literal|"--below"
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Entry
argument_list|<
name|String
argument_list|,
name|Collection
argument_list|<
name|String
argument_list|>
argument_list|>
name|aboveSamplesLesser
parameter_list|()
block|{
return|return
name|Helpers
operator|.
name|mapEntry
argument_list|(
literal|"~~ b"
argument_list|,
operator|(
name|Collection
argument_list|<
name|String
argument_list|>
operator|)
name|ImmutableSortedSet
operator|.
name|of
argument_list|(
literal|"~above"
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Entry
argument_list|<
name|String
argument_list|,
name|Collection
argument_list|<
name|String
argument_list|>
argument_list|>
name|aboveSamplesGreater
parameter_list|()
block|{
return|return
name|Helpers
operator|.
name|mapEntry
argument_list|(
literal|"~~ c"
argument_list|,
operator|(
name|Collection
argument_list|<
name|String
argument_list|>
operator|)
name|ImmutableSortedSet
operator|.
name|of
argument_list|(
literal|"~above"
argument_list|)
argument_list|)
return|;
block|}
block|}
argument_list|)
operator|.
name|named
argument_list|(
literal|"TreeMultimap.asMap"
argument_list|)
operator|.
name|withFeatures
argument_list|(
name|MapFeature
operator|.
name|SUPPORTS_REMOVE
argument_list|,
name|MapFeature
operator|.
name|REJECTS_DUPLICATES_AT_CREATION
argument_list|,
name|CollectionFeature
operator|.
name|SUPPORTS_ITERATOR_REMOVE
argument_list|,
name|CollectionFeature
operator|.
name|KNOWN_ORDER
argument_list|,
name|CollectionSize
operator|.
name|ANY
argument_list|)
operator|.
name|createTestSuite
argument_list|()
argument_list|)
expr_stmt|;
name|suite
operator|.
name|addTest
argument_list|(
name|NavigableSetTestSuiteBuilder
operator|.
name|using
argument_list|(
operator|new
name|TestStringSetGenerator
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|Set
argument_list|<
name|String
argument_list|>
name|create
parameter_list|(
name|String
index|[]
name|elements
parameter_list|)
block|{
name|TreeMultimap
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|multimap
init|=
name|TreeMultimap
operator|.
name|create
argument_list|(
name|Ordering
operator|.
name|natural
argument_list|()
argument_list|,
name|Ordering
operator|.
name|natural
argument_list|()
operator|.
name|nullsFirst
argument_list|()
argument_list|)
decl_stmt|;
name|multimap
operator|.
name|putAll
argument_list|(
literal|1
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|elements
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|multimap
operator|.
name|get
argument_list|(
literal|1
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|order
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|insertionOrder
parameter_list|)
block|{
return|return
name|Ordering
operator|.
name|natural
argument_list|()
operator|.
name|nullsFirst
argument_list|()
operator|.
name|sortedCopy
argument_list|(
name|insertionOrder
argument_list|)
return|;
block|}
block|}
argument_list|)
operator|.
name|named
argument_list|(
literal|"TreeMultimap.get"
argument_list|)
operator|.
name|withFeatures
argument_list|(
name|CollectionFeature
operator|.
name|ALLOWS_NULL_VALUES
argument_list|,
name|CollectionFeature
operator|.
name|GENERAL_PURPOSE
argument_list|,
name|CollectionFeature
operator|.
name|KNOWN_ORDER
argument_list|,
name|CollectionSize
operator|.
name|ANY
argument_list|)
operator|.
name|createTestSuite
argument_list|()
argument_list|)
expr_stmt|;
name|suite
operator|.
name|addTest
argument_list|(
name|NavigableSetTestSuiteBuilder
operator|.
name|using
argument_list|(
operator|new
name|TestStringSetGenerator
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|Set
argument_list|<
name|String
argument_list|>
name|create
parameter_list|(
name|String
index|[]
name|elements
parameter_list|)
block|{
name|TreeMultimap
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|multimap
init|=
name|TreeMultimap
operator|.
name|create
argument_list|(
name|Ordering
operator|.
name|natural
argument_list|()
argument_list|,
name|Ordering
operator|.
name|natural
argument_list|()
operator|.
name|nullsFirst
argument_list|()
argument_list|)
decl_stmt|;
name|multimap
operator|.
name|putAll
argument_list|(
literal|1
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|elements
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|(
name|Set
argument_list|<
name|String
argument_list|>
operator|)
name|multimap
operator|.
name|asMap
argument_list|()
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|getValue
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|order
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|insertionOrder
parameter_list|)
block|{
return|return
name|Ordering
operator|.
name|natural
argument_list|()
operator|.
name|nullsFirst
argument_list|()
operator|.
name|sortedCopy
argument_list|(
name|insertionOrder
argument_list|)
return|;
block|}
block|}
argument_list|)
operator|.
name|named
argument_list|(
literal|"TreeMultimap.asMap.entrySet collection"
argument_list|)
operator|.
name|withFeatures
argument_list|(
name|CollectionFeature
operator|.
name|ALLOWS_NULL_VALUES
argument_list|,
name|CollectionFeature
operator|.
name|GENERAL_PURPOSE
argument_list|,
name|CollectionFeature
operator|.
name|KNOWN_ORDER
argument_list|,
name|CollectionSize
operator|.
name|ONE
argument_list|,
name|CollectionSize
operator|.
name|SEVERAL
argument_list|)
operator|.
name|createTestSuite
argument_list|()
argument_list|)
expr_stmt|;
name|suite
operator|.
name|addTestSuite
argument_list|(
name|TreeMultimapNaturalTest
operator|.
name|class
argument_list|)
expr_stmt|;
return|return
name|suite
return|;
block|}
DECL|method|create ()
specifier|protected
name|SetMultimap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|create
parameter_list|()
block|{
return|return
name|TreeMultimap
operator|.
name|create
argument_list|()
return|;
block|}
comment|/**    * Create and populate a {@code TreeMultimap} with the natural ordering of    * keys and values.    */
DECL|method|createPopulate ()
specifier|private
name|TreeMultimap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|createPopulate
parameter_list|()
block|{
name|TreeMultimap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|multimap
init|=
name|TreeMultimap
operator|.
name|create
argument_list|()
decl_stmt|;
name|multimap
operator|.
name|put
argument_list|(
literal|"google"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|multimap
operator|.
name|put
argument_list|(
literal|"google"
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|multimap
operator|.
name|put
argument_list|(
literal|"foo"
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|multimap
operator|.
name|put
argument_list|(
literal|"foo"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|multimap
operator|.
name|put
argument_list|(
literal|"foo"
argument_list|,
literal|7
argument_list|)
expr_stmt|;
name|multimap
operator|.
name|put
argument_list|(
literal|"tree"
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|multimap
operator|.
name|put
argument_list|(
literal|"tree"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
return|return
name|multimap
return|;
block|}
DECL|method|testToString ()
specifier|public
name|void
name|testToString
parameter_list|()
block|{
name|SetMultimap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|multimap
init|=
name|create
argument_list|()
decl_stmt|;
name|multimap
operator|.
name|putAll
argument_list|(
literal|"bar"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|3
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|multimap
operator|.
name|putAll
argument_list|(
literal|"foo"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|2
argument_list|,
literal|3
argument_list|,
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"{bar=[1, 2, 3], foo=[-1, 1, 2, 3, 4]}"
argument_list|,
name|multimap
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testOrderedGet ()
specifier|public
name|void
name|testOrderedGet
parameter_list|()
block|{
name|TreeMultimap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|multimap
init|=
name|createPopulate
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|multimap
operator|.
name|get
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|1
argument_list|,
literal|3
argument_list|,
literal|7
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|multimap
operator|.
name|get
argument_list|(
literal|"google"
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|2
argument_list|,
literal|6
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|multimap
operator|.
name|get
argument_list|(
literal|"tree"
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|0
argument_list|,
literal|4
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
block|}
DECL|method|testOrderedKeySet ()
specifier|public
name|void
name|testOrderedKeySet
parameter_list|()
block|{
name|TreeMultimap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|multimap
init|=
name|createPopulate
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|multimap
operator|.
name|keySet
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|"foo"
argument_list|,
literal|"google"
argument_list|,
literal|"tree"
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
block|}
DECL|method|testOrderedAsMapEntries ()
specifier|public
name|void
name|testOrderedAsMapEntries
parameter_list|()
block|{
name|TreeMultimap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|multimap
init|=
name|createPopulate
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Collection
argument_list|<
name|Integer
argument_list|>
argument_list|>
argument_list|>
name|iterator
init|=
name|multimap
operator|.
name|asMap
argument_list|()
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Collection
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|entry
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"foo"
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|1
argument_list|,
literal|3
argument_list|,
literal|7
argument_list|)
expr_stmt|;
name|entry
operator|=
name|iterator
operator|.
name|next
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"google"
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|2
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|entry
operator|=
name|iterator
operator|.
name|next
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"tree"
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|0
argument_list|,
literal|4
argument_list|)
expr_stmt|;
block|}
DECL|method|testOrderedEntries ()
specifier|public
name|void
name|testOrderedEntries
parameter_list|()
block|{
name|TreeMultimap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|multimap
init|=
name|createPopulate
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|multimap
operator|.
name|entries
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|Maps
operator|.
name|immutableEntry
argument_list|(
literal|"foo"
argument_list|,
literal|1
argument_list|)
argument_list|,
name|Maps
operator|.
name|immutableEntry
argument_list|(
literal|"foo"
argument_list|,
literal|3
argument_list|)
argument_list|,
name|Maps
operator|.
name|immutableEntry
argument_list|(
literal|"foo"
argument_list|,
literal|7
argument_list|)
argument_list|,
name|Maps
operator|.
name|immutableEntry
argument_list|(
literal|"google"
argument_list|,
literal|2
argument_list|)
argument_list|,
name|Maps
operator|.
name|immutableEntry
argument_list|(
literal|"google"
argument_list|,
literal|6
argument_list|)
argument_list|,
name|Maps
operator|.
name|immutableEntry
argument_list|(
literal|"tree"
argument_list|,
literal|0
argument_list|)
argument_list|,
name|Maps
operator|.
name|immutableEntry
argument_list|(
literal|"tree"
argument_list|,
literal|4
argument_list|)
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
block|}
DECL|method|testOrderedValues ()
specifier|public
name|void
name|testOrderedValues
parameter_list|()
block|{
name|TreeMultimap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|multimap
init|=
name|createPopulate
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|multimap
operator|.
name|values
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|1
argument_list|,
literal|3
argument_list|,
literal|7
argument_list|,
literal|2
argument_list|,
literal|6
argument_list|,
literal|0
argument_list|,
literal|4
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
block|}
DECL|method|testMultimapConstructor ()
specifier|public
name|void
name|testMultimapConstructor
parameter_list|()
block|{
name|SetMultimap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|multimap
init|=
name|create
argument_list|()
decl_stmt|;
name|multimap
operator|.
name|putAll
argument_list|(
literal|"bar"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|3
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|multimap
operator|.
name|putAll
argument_list|(
literal|"foo"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|2
argument_list|,
literal|3
argument_list|,
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|TreeMultimap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|copy
init|=
name|TreeMultimap
operator|.
name|create
argument_list|(
name|multimap
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|multimap
argument_list|,
name|copy
argument_list|)
expr_stmt|;
block|}
DECL|field|KEY_COMPARATOR
specifier|private
specifier|static
specifier|final
name|Comparator
argument_list|<
name|Double
argument_list|>
name|KEY_COMPARATOR
init|=
name|Ordering
operator|.
name|natural
argument_list|()
decl_stmt|;
DECL|field|VALUE_COMPARATOR
specifier|private
specifier|static
specifier|final
name|Comparator
argument_list|<
name|Double
argument_list|>
name|VALUE_COMPARATOR
init|=
name|Ordering
operator|.
name|natural
argument_list|()
operator|.
name|reverse
argument_list|()
operator|.
name|nullsFirst
argument_list|()
decl_stmt|;
comment|/**    * Test that creating one TreeMultimap from another does not copy the    * comparators from the source TreeMultimap.    */
DECL|method|testCreateFromTreeMultimap ()
specifier|public
name|void
name|testCreateFromTreeMultimap
parameter_list|()
block|{
name|Multimap
argument_list|<
name|Double
argument_list|,
name|Double
argument_list|>
name|tree
init|=
name|TreeMultimap
operator|.
name|create
argument_list|(
name|KEY_COMPARATOR
argument_list|,
name|VALUE_COMPARATOR
argument_list|)
decl_stmt|;
name|tree
operator|.
name|put
argument_list|(
literal|1.0
argument_list|,
literal|2.0
argument_list|)
expr_stmt|;
name|tree
operator|.
name|put
argument_list|(
literal|2.0
argument_list|,
literal|3.0
argument_list|)
expr_stmt|;
name|tree
operator|.
name|put
argument_list|(
literal|3.0
argument_list|,
literal|4.0
argument_list|)
expr_stmt|;
name|tree
operator|.
name|put
argument_list|(
literal|4.0
argument_list|,
literal|5.0
argument_list|)
expr_stmt|;
name|TreeMultimap
argument_list|<
name|Double
argument_list|,
name|Double
argument_list|>
name|copyFromTree
init|=
name|TreeMultimap
operator|.
name|create
argument_list|(
name|tree
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|tree
argument_list|,
name|copyFromTree
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|Ordering
operator|.
name|natural
argument_list|()
argument_list|,
name|copyFromTree
operator|.
name|keyComparator
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|Ordering
operator|.
name|natural
argument_list|()
argument_list|,
name|copyFromTree
operator|.
name|valueComparator
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|Ordering
operator|.
name|natural
argument_list|()
argument_list|,
name|copyFromTree
operator|.
name|get
argument_list|(
literal|1.0
argument_list|)
operator|.
name|comparator
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test that creating one TreeMultimap from a non-TreeMultimap    * results in natural ordering.    */
DECL|method|testCreateFromHashMultimap ()
specifier|public
name|void
name|testCreateFromHashMultimap
parameter_list|()
block|{
name|Multimap
argument_list|<
name|Double
argument_list|,
name|Double
argument_list|>
name|hash
init|=
name|HashMultimap
operator|.
name|create
argument_list|()
decl_stmt|;
name|hash
operator|.
name|put
argument_list|(
literal|1.0
argument_list|,
literal|2.0
argument_list|)
expr_stmt|;
name|hash
operator|.
name|put
argument_list|(
literal|2.0
argument_list|,
literal|3.0
argument_list|)
expr_stmt|;
name|hash
operator|.
name|put
argument_list|(
literal|3.0
argument_list|,
literal|4.0
argument_list|)
expr_stmt|;
name|hash
operator|.
name|put
argument_list|(
literal|4.0
argument_list|,
literal|5.0
argument_list|)
expr_stmt|;
name|TreeMultimap
argument_list|<
name|Double
argument_list|,
name|Double
argument_list|>
name|copyFromHash
init|=
name|TreeMultimap
operator|.
name|create
argument_list|(
name|hash
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|hash
argument_list|,
name|copyFromHash
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Ordering
operator|.
name|natural
argument_list|()
argument_list|,
name|copyFromHash
operator|.
name|keyComparator
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Ordering
operator|.
name|natural
argument_list|()
argument_list|,
name|copyFromHash
operator|.
name|valueComparator
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test that creating one TreeMultimap from a SortedSetMultimap uses natural    * ordering.    */
DECL|method|testCreateFromSortedSetMultimap ()
specifier|public
name|void
name|testCreateFromSortedSetMultimap
parameter_list|()
block|{
name|SortedSetMultimap
argument_list|<
name|Double
argument_list|,
name|Double
argument_list|>
name|tree
init|=
name|TreeMultimap
operator|.
name|create
argument_list|(
name|KEY_COMPARATOR
argument_list|,
name|VALUE_COMPARATOR
argument_list|)
decl_stmt|;
name|tree
operator|.
name|put
argument_list|(
literal|1.0
argument_list|,
literal|2.0
argument_list|)
expr_stmt|;
name|tree
operator|.
name|put
argument_list|(
literal|2.0
argument_list|,
literal|3.0
argument_list|)
expr_stmt|;
name|tree
operator|.
name|put
argument_list|(
literal|3.0
argument_list|,
literal|4.0
argument_list|)
expr_stmt|;
name|tree
operator|.
name|put
argument_list|(
literal|4.0
argument_list|,
literal|5.0
argument_list|)
expr_stmt|;
name|SortedSetMultimap
argument_list|<
name|Double
argument_list|,
name|Double
argument_list|>
name|sorted
init|=
name|Multimaps
operator|.
name|unmodifiableSortedSetMultimap
argument_list|(
name|tree
argument_list|)
decl_stmt|;
name|TreeMultimap
argument_list|<
name|Double
argument_list|,
name|Double
argument_list|>
name|copyFromSorted
init|=
name|TreeMultimap
operator|.
name|create
argument_list|(
name|sorted
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|tree
argument_list|,
name|copyFromSorted
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|Ordering
operator|.
name|natural
argument_list|()
argument_list|,
name|copyFromSorted
operator|.
name|keyComparator
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|Ordering
operator|.
name|natural
argument_list|()
argument_list|,
name|copyFromSorted
operator|.
name|valueComparator
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|Ordering
operator|.
name|natural
argument_list|()
argument_list|,
name|copyFromSorted
operator|.
name|get
argument_list|(
literal|1.0
argument_list|)
operator|.
name|comparator
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testComparators ()
specifier|public
name|void
name|testComparators
parameter_list|()
block|{
name|TreeMultimap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|multimap
init|=
name|TreeMultimap
operator|.
name|create
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|Ordering
operator|.
name|natural
argument_list|()
argument_list|,
name|multimap
operator|.
name|keyComparator
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Ordering
operator|.
name|natural
argument_list|()
argument_list|,
name|multimap
operator|.
name|valueComparator
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
argument_list|(
literal|"SerializableTester"
argument_list|)
DECL|method|testExplicitComparatorSerialization ()
specifier|public
name|void
name|testExplicitComparatorSerialization
parameter_list|()
block|{
name|TreeMultimap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|multimap
init|=
name|createPopulate
argument_list|()
decl_stmt|;
name|TreeMultimap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|copy
init|=
name|SerializableTester
operator|.
name|reserializeAndAssert
argument_list|(
name|multimap
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|copy
operator|.
name|values
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|1
argument_list|,
literal|3
argument_list|,
literal|7
argument_list|,
literal|2
argument_list|,
literal|6
argument_list|,
literal|0
argument_list|,
literal|4
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|copy
operator|.
name|keySet
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|"foo"
argument_list|,
literal|"google"
argument_list|,
literal|"tree"
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|multimap
operator|.
name|keyComparator
argument_list|()
argument_list|,
name|copy
operator|.
name|keyComparator
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|multimap
operator|.
name|valueComparator
argument_list|()
argument_list|,
name|copy
operator|.
name|valueComparator
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
argument_list|(
literal|"SerializableTester"
argument_list|)
DECL|method|testTreeMultimapDerived ()
specifier|public
name|void
name|testTreeMultimapDerived
parameter_list|()
block|{
name|TreeMultimap
argument_list|<
name|DerivedComparable
argument_list|,
name|DerivedComparable
argument_list|>
name|multimap
init|=
name|TreeMultimap
operator|.
name|create
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|ImmutableMultimap
operator|.
name|of
argument_list|()
argument_list|,
name|multimap
argument_list|)
expr_stmt|;
name|multimap
operator|.
name|put
argument_list|(
operator|new
name|DerivedComparable
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
operator|new
name|DerivedComparable
argument_list|(
literal|"f"
argument_list|)
argument_list|)
expr_stmt|;
name|multimap
operator|.
name|put
argument_list|(
operator|new
name|DerivedComparable
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
operator|new
name|DerivedComparable
argument_list|(
literal|"o"
argument_list|)
argument_list|)
expr_stmt|;
name|multimap
operator|.
name|put
argument_list|(
operator|new
name|DerivedComparable
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
operator|new
name|DerivedComparable
argument_list|(
literal|"o"
argument_list|)
argument_list|)
expr_stmt|;
name|multimap
operator|.
name|put
argument_list|(
operator|new
name|DerivedComparable
argument_list|(
literal|"bar"
argument_list|)
argument_list|,
operator|new
name|DerivedComparable
argument_list|(
literal|"b"
argument_list|)
argument_list|)
expr_stmt|;
name|multimap
operator|.
name|put
argument_list|(
operator|new
name|DerivedComparable
argument_list|(
literal|"bar"
argument_list|)
argument_list|,
operator|new
name|DerivedComparable
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|multimap
operator|.
name|put
argument_list|(
operator|new
name|DerivedComparable
argument_list|(
literal|"bar"
argument_list|)
argument_list|,
operator|new
name|DerivedComparable
argument_list|(
literal|"r"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|multimap
operator|.
name|keySet
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
operator|new
name|DerivedComparable
argument_list|(
literal|"bar"
argument_list|)
argument_list|,
operator|new
name|DerivedComparable
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|multimap
operator|.
name|values
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
operator|new
name|DerivedComparable
argument_list|(
literal|"a"
argument_list|)
argument_list|,
operator|new
name|DerivedComparable
argument_list|(
literal|"b"
argument_list|)
argument_list|,
operator|new
name|DerivedComparable
argument_list|(
literal|"r"
argument_list|)
argument_list|,
operator|new
name|DerivedComparable
argument_list|(
literal|"f"
argument_list|)
argument_list|,
operator|new
name|DerivedComparable
argument_list|(
literal|"o"
argument_list|)
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|Ordering
operator|.
name|natural
argument_list|()
argument_list|,
name|multimap
operator|.
name|keyComparator
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Ordering
operator|.
name|natural
argument_list|()
argument_list|,
name|multimap
operator|.
name|valueComparator
argument_list|()
argument_list|)
expr_stmt|;
name|SerializableTester
operator|.
name|reserializeAndAssert
argument_list|(
name|multimap
argument_list|)
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
argument_list|(
literal|"SerializableTester"
argument_list|)
DECL|method|testTreeMultimapNonGeneric ()
specifier|public
name|void
name|testTreeMultimapNonGeneric
parameter_list|()
block|{
name|TreeMultimap
argument_list|<
name|LegacyComparable
argument_list|,
name|LegacyComparable
argument_list|>
name|multimap
init|=
name|TreeMultimap
operator|.
name|create
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|ImmutableMultimap
operator|.
name|of
argument_list|()
argument_list|,
name|multimap
argument_list|)
expr_stmt|;
name|multimap
operator|.
name|put
argument_list|(
operator|new
name|LegacyComparable
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
operator|new
name|LegacyComparable
argument_list|(
literal|"f"
argument_list|)
argument_list|)
expr_stmt|;
name|multimap
operator|.
name|put
argument_list|(
operator|new
name|LegacyComparable
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
operator|new
name|LegacyComparable
argument_list|(
literal|"o"
argument_list|)
argument_list|)
expr_stmt|;
name|multimap
operator|.
name|put
argument_list|(
operator|new
name|LegacyComparable
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
operator|new
name|LegacyComparable
argument_list|(
literal|"o"
argument_list|)
argument_list|)
expr_stmt|;
name|multimap
operator|.
name|put
argument_list|(
operator|new
name|LegacyComparable
argument_list|(
literal|"bar"
argument_list|)
argument_list|,
operator|new
name|LegacyComparable
argument_list|(
literal|"b"
argument_list|)
argument_list|)
expr_stmt|;
name|multimap
operator|.
name|put
argument_list|(
operator|new
name|LegacyComparable
argument_list|(
literal|"bar"
argument_list|)
argument_list|,
operator|new
name|LegacyComparable
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|multimap
operator|.
name|put
argument_list|(
operator|new
name|LegacyComparable
argument_list|(
literal|"bar"
argument_list|)
argument_list|,
operator|new
name|LegacyComparable
argument_list|(
literal|"r"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|multimap
operator|.
name|keySet
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
operator|new
name|LegacyComparable
argument_list|(
literal|"bar"
argument_list|)
argument_list|,
operator|new
name|LegacyComparable
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|multimap
operator|.
name|values
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
operator|new
name|LegacyComparable
argument_list|(
literal|"a"
argument_list|)
argument_list|,
operator|new
name|LegacyComparable
argument_list|(
literal|"b"
argument_list|)
argument_list|,
operator|new
name|LegacyComparable
argument_list|(
literal|"r"
argument_list|)
argument_list|,
operator|new
name|LegacyComparable
argument_list|(
literal|"f"
argument_list|)
argument_list|,
operator|new
name|LegacyComparable
argument_list|(
literal|"o"
argument_list|)
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|Ordering
operator|.
name|natural
argument_list|()
argument_list|,
name|multimap
operator|.
name|keyComparator
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Ordering
operator|.
name|natural
argument_list|()
argument_list|,
name|multimap
operator|.
name|valueComparator
argument_list|()
argument_list|)
expr_stmt|;
name|SerializableTester
operator|.
name|reserializeAndAssert
argument_list|(
name|multimap
argument_list|)
expr_stmt|;
block|}
DECL|method|testTreeMultimapAsMapSorted ()
specifier|public
name|void
name|testTreeMultimapAsMapSorted
parameter_list|()
block|{
name|TreeMultimap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|multimap
init|=
name|createPopulate
argument_list|()
decl_stmt|;
name|SortedMap
argument_list|<
name|String
argument_list|,
name|Collection
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|asMap
init|=
name|multimap
operator|.
name|asMap
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|Ordering
operator|.
name|natural
argument_list|()
argument_list|,
name|asMap
operator|.
name|comparator
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"foo"
argument_list|,
name|asMap
operator|.
name|firstKey
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"tree"
argument_list|,
name|asMap
operator|.
name|lastKey
argument_list|()
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|Integer
argument_list|>
name|fooValues
init|=
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|1
argument_list|,
literal|3
argument_list|,
literal|7
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|Integer
argument_list|>
name|googleValues
init|=
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|2
argument_list|,
literal|6
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|Integer
argument_list|>
name|treeValues
init|=
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|4
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"google"
argument_list|,
name|googleValues
argument_list|,
literal|"tree"
argument_list|,
name|treeValues
argument_list|)
argument_list|,
name|asMap
operator|.
name|tailMap
argument_list|(
literal|"g"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"google"
argument_list|,
name|googleValues
argument_list|,
literal|"foo"
argument_list|,
name|fooValues
argument_list|)
argument_list|,
name|asMap
operator|.
name|headMap
argument_list|(
literal|"h"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"google"
argument_list|,
name|googleValues
argument_list|)
argument_list|,
name|asMap
operator|.
name|subMap
argument_list|(
literal|"g"
argument_list|,
literal|"h"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testTailSetClear ()
specifier|public
name|void
name|testTailSetClear
parameter_list|()
block|{
name|TreeMultimap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|multimap
init|=
name|TreeMultimap
operator|.
name|create
argument_list|()
decl_stmt|;
name|multimap
operator|.
name|put
argument_list|(
literal|"a"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|multimap
operator|.
name|put
argument_list|(
literal|"a"
argument_list|,
literal|11
argument_list|)
expr_stmt|;
name|multimap
operator|.
name|put
argument_list|(
literal|"b"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|multimap
operator|.
name|put
argument_list|(
literal|"c"
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|multimap
operator|.
name|put
argument_list|(
literal|"d"
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|multimap
operator|.
name|put
argument_list|(
literal|"e"
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|multimap
operator|.
name|put
argument_list|(
literal|"e"
argument_list|,
literal|55
argument_list|)
expr_stmt|;
name|multimap
operator|.
name|keySet
argument_list|()
operator|.
name|tailSet
argument_list|(
literal|"d"
argument_list|)
operator|.
name|clear
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|)
argument_list|,
name|multimap
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|multimap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|multimap
operator|.
name|values
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|multimap
operator|.
name|keys
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
argument_list|(
literal|"reflection"
argument_list|)
DECL|method|testKeySetBridgeMethods ()
specifier|public
name|void
name|testKeySetBridgeMethods
parameter_list|()
block|{
for|for
control|(
name|Method
name|m
range|:
name|TreeMultimap
operator|.
name|class
operator|.
name|getMethods
argument_list|()
control|)
block|{
if|if
condition|(
name|m
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"keySet"
argument_list|)
operator|&&
name|m
operator|.
name|getReturnType
argument_list|()
operator|.
name|equals
argument_list|(
name|SortedSet
operator|.
name|class
argument_list|)
condition|)
block|{
return|return;
block|}
block|}
name|fail
argument_list|(
literal|"No bridge method found"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
argument_list|(
literal|"reflection"
argument_list|)
DECL|method|testAsMapBridgeMethods ()
specifier|public
name|void
name|testAsMapBridgeMethods
parameter_list|()
block|{
for|for
control|(
name|Method
name|m
range|:
name|TreeMultimap
operator|.
name|class
operator|.
name|getMethods
argument_list|()
control|)
block|{
if|if
condition|(
name|m
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"asMap"
argument_list|)
operator|&&
name|m
operator|.
name|getReturnType
argument_list|()
operator|.
name|equals
argument_list|(
name|SortedMap
operator|.
name|class
argument_list|)
condition|)
block|{
return|return;
block|}
block|}
block|}
annotation|@
name|GwtIncompatible
argument_list|(
literal|"reflection"
argument_list|)
DECL|method|testGetBridgeMethods ()
specifier|public
name|void
name|testGetBridgeMethods
parameter_list|()
block|{
for|for
control|(
name|Method
name|m
range|:
name|TreeMultimap
operator|.
name|class
operator|.
name|getMethods
argument_list|()
control|)
block|{
if|if
condition|(
name|m
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"get"
argument_list|)
operator|&&
name|m
operator|.
name|getReturnType
argument_list|()
operator|.
name|equals
argument_list|(
name|SortedSet
operator|.
name|class
argument_list|)
condition|)
block|{
return|return;
block|}
block|}
name|fail
argument_list|(
literal|"No bridge method found"
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

