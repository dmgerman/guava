begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2007 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.collect
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
operator|.
name|newArrayList
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
operator|.
name|newHashSet
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|IteratorFeature
operator|.
name|MODIFIABLE
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Arrays
operator|.
name|asList
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|contrib
operator|.
name|truth
operator|.
name|Truth
operator|.
name|ASSERT
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtCompatible
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtIncompatible
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|DerivedComparable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|IteratorTester
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|testing
operator|.
name|SerializableTester
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NoSuchElementException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedSet
import|;
end_import

begin_comment
comment|/**  * Unit tests for {@code TreeMultimap} with natural ordering.  *  * @author Jared Levy  */
end_comment

begin_class
annotation|@
name|GwtCompatible
argument_list|(
name|emulated
operator|=
literal|true
argument_list|)
DECL|class|TreeMultimapNaturalTest
specifier|public
class|class
name|TreeMultimapNaturalTest
parameter_list|<
name|E
parameter_list|>
extends|extends
name|AbstractSetMultimapTest
block|{
DECL|method|create ()
annotation|@
name|Override
specifier|protected
name|Multimap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|create
parameter_list|()
block|{
return|return
name|TreeMultimap
operator|.
name|create
argument_list|()
return|;
block|}
comment|/* Null keys and values aren't supported. */
DECL|method|nullKey ()
annotation|@
name|Override
specifier|protected
name|String
name|nullKey
parameter_list|()
block|{
return|return
literal|"null"
return|;
block|}
DECL|method|nullValue ()
annotation|@
name|Override
specifier|protected
name|Integer
name|nullValue
parameter_list|()
block|{
return|return
literal|42
return|;
block|}
comment|/**    * Create and populate a {@code TreeMultimap} with the natural ordering of    * keys and values.    */
DECL|method|createPopulate ()
specifier|private
name|TreeMultimap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|createPopulate
parameter_list|()
block|{
name|TreeMultimap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|multimap
init|=
name|TreeMultimap
operator|.
name|create
argument_list|()
decl_stmt|;
name|multimap
operator|.
name|put
argument_list|(
literal|"google"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|multimap
operator|.
name|put
argument_list|(
literal|"google"
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|multimap
operator|.
name|put
argument_list|(
literal|"foo"
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|multimap
operator|.
name|put
argument_list|(
literal|"foo"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|multimap
operator|.
name|put
argument_list|(
literal|"foo"
argument_list|,
literal|7
argument_list|)
expr_stmt|;
name|multimap
operator|.
name|put
argument_list|(
literal|"tree"
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|multimap
operator|.
name|put
argument_list|(
literal|"tree"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
return|return
name|multimap
return|;
block|}
DECL|method|testToString ()
specifier|public
name|void
name|testToString
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"{bar=[1, 2, 3], foo=[-1, 1, 2, 3, 4]}"
argument_list|,
name|createSample
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testOrderedGet ()
specifier|public
name|void
name|testOrderedGet
parameter_list|()
block|{
name|TreeMultimap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|multimap
init|=
name|createPopulate
argument_list|()
decl_stmt|;
name|ASSERT
operator|.
name|that
argument_list|(
name|multimap
operator|.
name|get
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
operator|.
name|hasContentsInOrder
argument_list|(
literal|1
argument_list|,
literal|3
argument_list|,
literal|7
argument_list|)
expr_stmt|;
name|ASSERT
operator|.
name|that
argument_list|(
name|multimap
operator|.
name|get
argument_list|(
literal|"google"
argument_list|)
argument_list|)
operator|.
name|hasContentsInOrder
argument_list|(
literal|2
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|ASSERT
operator|.
name|that
argument_list|(
name|multimap
operator|.
name|get
argument_list|(
literal|"tree"
argument_list|)
argument_list|)
operator|.
name|hasContentsInOrder
argument_list|(
literal|0
argument_list|,
literal|4
argument_list|)
expr_stmt|;
block|}
DECL|method|testOrderedKeySet ()
specifier|public
name|void
name|testOrderedKeySet
parameter_list|()
block|{
name|TreeMultimap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|multimap
init|=
name|createPopulate
argument_list|()
decl_stmt|;
name|ASSERT
operator|.
name|that
argument_list|(
name|multimap
operator|.
name|keySet
argument_list|()
argument_list|)
operator|.
name|hasContentsInOrder
argument_list|(
literal|"foo"
argument_list|,
literal|"google"
argument_list|,
literal|"tree"
argument_list|)
expr_stmt|;
block|}
DECL|method|testOrderedAsMapEntries ()
specifier|public
name|void
name|testOrderedAsMapEntries
parameter_list|()
block|{
name|TreeMultimap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|multimap
init|=
name|createPopulate
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Collection
argument_list|<
name|Integer
argument_list|>
argument_list|>
argument_list|>
name|iterator
init|=
name|multimap
operator|.
name|asMap
argument_list|()
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Collection
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|entry
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"foo"
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|ASSERT
operator|.
name|that
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
operator|.
name|hasContentsAnyOrder
argument_list|(
literal|1
argument_list|,
literal|3
argument_list|,
literal|7
argument_list|)
expr_stmt|;
name|entry
operator|=
name|iterator
operator|.
name|next
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"google"
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|ASSERT
operator|.
name|that
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
operator|.
name|hasContentsAnyOrder
argument_list|(
literal|2
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|entry
operator|=
name|iterator
operator|.
name|next
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"tree"
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|ASSERT
operator|.
name|that
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
operator|.
name|hasContentsAnyOrder
argument_list|(
literal|0
argument_list|,
literal|4
argument_list|)
expr_stmt|;
block|}
DECL|method|testOrderedEntries ()
specifier|public
name|void
name|testOrderedEntries
parameter_list|()
block|{
name|TreeMultimap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|multimap
init|=
name|createPopulate
argument_list|()
decl_stmt|;
name|ASSERT
operator|.
name|that
argument_list|(
name|multimap
operator|.
name|entries
argument_list|()
argument_list|)
operator|.
name|hasContentsInOrder
argument_list|(
name|Maps
operator|.
name|immutableEntry
argument_list|(
literal|"foo"
argument_list|,
literal|1
argument_list|)
argument_list|,
name|Maps
operator|.
name|immutableEntry
argument_list|(
literal|"foo"
argument_list|,
literal|3
argument_list|)
argument_list|,
name|Maps
operator|.
name|immutableEntry
argument_list|(
literal|"foo"
argument_list|,
literal|7
argument_list|)
argument_list|,
name|Maps
operator|.
name|immutableEntry
argument_list|(
literal|"google"
argument_list|,
literal|2
argument_list|)
argument_list|,
name|Maps
operator|.
name|immutableEntry
argument_list|(
literal|"google"
argument_list|,
literal|6
argument_list|)
argument_list|,
name|Maps
operator|.
name|immutableEntry
argument_list|(
literal|"tree"
argument_list|,
literal|0
argument_list|)
argument_list|,
name|Maps
operator|.
name|immutableEntry
argument_list|(
literal|"tree"
argument_list|,
literal|4
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testOrderedValues ()
specifier|public
name|void
name|testOrderedValues
parameter_list|()
block|{
name|TreeMultimap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|multimap
init|=
name|createPopulate
argument_list|()
decl_stmt|;
name|ASSERT
operator|.
name|that
argument_list|(
name|multimap
operator|.
name|values
argument_list|()
argument_list|)
operator|.
name|hasContentsInOrder
argument_list|(
literal|1
argument_list|,
literal|3
argument_list|,
literal|7
argument_list|,
literal|2
argument_list|,
literal|6
argument_list|,
literal|0
argument_list|,
literal|4
argument_list|)
expr_stmt|;
block|}
DECL|method|testFirst ()
specifier|public
name|void
name|testFirst
parameter_list|()
block|{
name|TreeMultimap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|multimap
init|=
name|createPopulate
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|1
argument_list|)
argument_list|,
name|multimap
operator|.
name|get
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|first
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|multimap
operator|.
name|get
argument_list|(
literal|"missing"
argument_list|)
operator|.
name|first
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Expected NoSuchElementException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchElementException
name|expected
parameter_list|)
block|{}
block|}
DECL|method|testLast ()
specifier|public
name|void
name|testLast
parameter_list|()
block|{
name|TreeMultimap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|multimap
init|=
name|createPopulate
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|7
argument_list|)
argument_list|,
name|multimap
operator|.
name|get
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|last
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|multimap
operator|.
name|get
argument_list|(
literal|"missing"
argument_list|)
operator|.
name|last
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Expected NoSuchElementException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchElementException
name|expected
parameter_list|)
block|{}
block|}
DECL|method|testComparatorFromGet ()
specifier|public
name|void
name|testComparatorFromGet
parameter_list|()
block|{
name|TreeMultimap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|multimap
init|=
name|createPopulate
argument_list|()
decl_stmt|;
name|assertSame
argument_list|(
name|Ordering
operator|.
name|natural
argument_list|()
argument_list|,
name|multimap
operator|.
name|get
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|comparator
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|Ordering
operator|.
name|natural
argument_list|()
argument_list|,
name|multimap
operator|.
name|get
argument_list|(
literal|"missing"
argument_list|)
operator|.
name|comparator
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testHeadSet ()
specifier|public
name|void
name|testHeadSet
parameter_list|()
block|{
name|TreeMultimap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|multimap
init|=
name|createPopulate
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|Integer
argument_list|>
name|fooSet
init|=
name|multimap
operator|.
name|get
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|headSet
argument_list|(
literal|4
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Sets
operator|.
name|newHashSet
argument_list|(
literal|1
argument_list|,
literal|3
argument_list|)
argument_list|,
name|fooSet
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|Integer
argument_list|>
name|missingSet
init|=
name|multimap
operator|.
name|get
argument_list|(
literal|"missing"
argument_list|)
operator|.
name|headSet
argument_list|(
literal|4
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Sets
operator|.
name|newHashSet
argument_list|()
argument_list|,
name|missingSet
argument_list|)
expr_stmt|;
name|multimap
operator|.
name|put
argument_list|(
literal|"foo"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Sets
operator|.
name|newHashSet
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|)
argument_list|,
name|fooSet
argument_list|)
expr_stmt|;
name|missingSet
operator|.
name|add
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Sets
operator|.
name|newHashSet
argument_list|(
literal|2
argument_list|)
argument_list|,
name|multimap
operator|.
name|get
argument_list|(
literal|"missing"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testTailSet ()
specifier|public
name|void
name|testTailSet
parameter_list|()
block|{
name|TreeMultimap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|multimap
init|=
name|createPopulate
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|Integer
argument_list|>
name|fooSet
init|=
name|multimap
operator|.
name|get
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|tailSet
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Sets
operator|.
name|newHashSet
argument_list|(
literal|3
argument_list|,
literal|7
argument_list|)
argument_list|,
name|fooSet
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|Integer
argument_list|>
name|missingSet
init|=
name|multimap
operator|.
name|get
argument_list|(
literal|"missing"
argument_list|)
operator|.
name|tailSet
argument_list|(
literal|4
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Sets
operator|.
name|newHashSet
argument_list|()
argument_list|,
name|missingSet
argument_list|)
expr_stmt|;
name|multimap
operator|.
name|put
argument_list|(
literal|"foo"
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Sets
operator|.
name|newHashSet
argument_list|(
literal|3
argument_list|,
literal|6
argument_list|,
literal|7
argument_list|)
argument_list|,
name|fooSet
argument_list|)
expr_stmt|;
name|missingSet
operator|.
name|add
argument_list|(
literal|9
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Sets
operator|.
name|newHashSet
argument_list|(
literal|9
argument_list|)
argument_list|,
name|multimap
operator|.
name|get
argument_list|(
literal|"missing"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testSubSet ()
specifier|public
name|void
name|testSubSet
parameter_list|()
block|{
name|TreeMultimap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|multimap
init|=
name|createPopulate
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|Integer
argument_list|>
name|fooSet
init|=
name|multimap
operator|.
name|get
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|subSet
argument_list|(
literal|2
argument_list|,
literal|6
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Sets
operator|.
name|newHashSet
argument_list|(
literal|3
argument_list|)
argument_list|,
name|fooSet
argument_list|)
expr_stmt|;
name|multimap
operator|.
name|put
argument_list|(
literal|"foo"
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Sets
operator|.
name|newHashSet
argument_list|(
literal|3
argument_list|,
literal|5
argument_list|)
argument_list|,
name|fooSet
argument_list|)
expr_stmt|;
name|fooSet
operator|.
name|add
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Sets
operator|.
name|newHashSet
argument_list|(
literal|1
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|,
literal|5
argument_list|,
literal|7
argument_list|)
argument_list|,
name|multimap
operator|.
name|get
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testMultimapConstructor ()
specifier|public
name|void
name|testMultimapConstructor
parameter_list|()
block|{
name|Multimap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|multimap
init|=
name|createSample
argument_list|()
decl_stmt|;
name|TreeMultimap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|copy
init|=
name|TreeMultimap
operator|.
name|create
argument_list|(
name|multimap
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|multimap
argument_list|,
name|copy
argument_list|)
expr_stmt|;
block|}
DECL|field|KEY_COMPARATOR
specifier|private
specifier|static
specifier|final
name|Comparator
argument_list|<
name|Double
argument_list|>
name|KEY_COMPARATOR
init|=
name|Ordering
operator|.
name|natural
argument_list|()
decl_stmt|;
DECL|field|VALUE_COMPARATOR
specifier|private
specifier|static
specifier|final
name|Comparator
argument_list|<
name|Double
argument_list|>
name|VALUE_COMPARATOR
init|=
name|Ordering
operator|.
name|natural
argument_list|()
operator|.
name|reverse
argument_list|()
operator|.
name|nullsFirst
argument_list|()
decl_stmt|;
comment|/**    * Test that creating one TreeMultimap from another does not copy the    * comparators from the source TreeMultimap.    */
DECL|method|testCreateFromTreeMultimap ()
specifier|public
name|void
name|testCreateFromTreeMultimap
parameter_list|()
block|{
name|Multimap
argument_list|<
name|Double
argument_list|,
name|Double
argument_list|>
name|tree
init|=
name|TreeMultimap
operator|.
name|create
argument_list|(
name|KEY_COMPARATOR
argument_list|,
name|VALUE_COMPARATOR
argument_list|)
decl_stmt|;
name|tree
operator|.
name|put
argument_list|(
literal|1.0
argument_list|,
literal|2.0
argument_list|)
expr_stmt|;
name|tree
operator|.
name|put
argument_list|(
literal|2.0
argument_list|,
literal|3.0
argument_list|)
expr_stmt|;
name|tree
operator|.
name|put
argument_list|(
literal|3.0
argument_list|,
literal|4.0
argument_list|)
expr_stmt|;
name|tree
operator|.
name|put
argument_list|(
literal|4.0
argument_list|,
literal|5.0
argument_list|)
expr_stmt|;
name|TreeMultimap
argument_list|<
name|Double
argument_list|,
name|Double
argument_list|>
name|copyFromTree
init|=
name|TreeMultimap
operator|.
name|create
argument_list|(
name|tree
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|tree
argument_list|,
name|copyFromTree
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|Ordering
operator|.
name|natural
argument_list|()
argument_list|,
name|copyFromTree
operator|.
name|keyComparator
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|Ordering
operator|.
name|natural
argument_list|()
argument_list|,
name|copyFromTree
operator|.
name|valueComparator
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|Ordering
operator|.
name|natural
argument_list|()
argument_list|,
name|copyFromTree
operator|.
name|get
argument_list|(
literal|1.0
argument_list|)
operator|.
name|comparator
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test that creating one TreeMultimap from a non-TreeMultimap    * results in natural ordering.    */
DECL|method|testCreateFromHashMultimap ()
specifier|public
name|void
name|testCreateFromHashMultimap
parameter_list|()
block|{
name|Multimap
argument_list|<
name|Double
argument_list|,
name|Double
argument_list|>
name|hash
init|=
name|HashMultimap
operator|.
name|create
argument_list|()
decl_stmt|;
name|hash
operator|.
name|put
argument_list|(
literal|1.0
argument_list|,
literal|2.0
argument_list|)
expr_stmt|;
name|hash
operator|.
name|put
argument_list|(
literal|2.0
argument_list|,
literal|3.0
argument_list|)
expr_stmt|;
name|hash
operator|.
name|put
argument_list|(
literal|3.0
argument_list|,
literal|4.0
argument_list|)
expr_stmt|;
name|hash
operator|.
name|put
argument_list|(
literal|4.0
argument_list|,
literal|5.0
argument_list|)
expr_stmt|;
name|TreeMultimap
argument_list|<
name|Double
argument_list|,
name|Double
argument_list|>
name|copyFromHash
init|=
name|TreeMultimap
operator|.
name|create
argument_list|(
name|hash
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|hash
argument_list|,
name|copyFromHash
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Ordering
operator|.
name|natural
argument_list|()
argument_list|,
name|copyFromHash
operator|.
name|keyComparator
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Ordering
operator|.
name|natural
argument_list|()
argument_list|,
name|copyFromHash
operator|.
name|valueComparator
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test that creating one TreeMultimap from a SortedSetMultimap uses natural    * ordering.    */
DECL|method|testCreateFromSortedSetMultimap ()
specifier|public
name|void
name|testCreateFromSortedSetMultimap
parameter_list|()
block|{
name|SortedSetMultimap
argument_list|<
name|Double
argument_list|,
name|Double
argument_list|>
name|tree
init|=
name|TreeMultimap
operator|.
name|create
argument_list|(
name|KEY_COMPARATOR
argument_list|,
name|VALUE_COMPARATOR
argument_list|)
decl_stmt|;
name|tree
operator|.
name|put
argument_list|(
literal|1.0
argument_list|,
literal|2.0
argument_list|)
expr_stmt|;
name|tree
operator|.
name|put
argument_list|(
literal|2.0
argument_list|,
literal|3.0
argument_list|)
expr_stmt|;
name|tree
operator|.
name|put
argument_list|(
literal|3.0
argument_list|,
literal|4.0
argument_list|)
expr_stmt|;
name|tree
operator|.
name|put
argument_list|(
literal|4.0
argument_list|,
literal|5.0
argument_list|)
expr_stmt|;
name|SortedSetMultimap
argument_list|<
name|Double
argument_list|,
name|Double
argument_list|>
name|sorted
init|=
name|Multimaps
operator|.
name|unmodifiableSortedSetMultimap
argument_list|(
name|tree
argument_list|)
decl_stmt|;
name|TreeMultimap
argument_list|<
name|Double
argument_list|,
name|Double
argument_list|>
name|copyFromSorted
init|=
name|TreeMultimap
operator|.
name|create
argument_list|(
name|sorted
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|tree
argument_list|,
name|copyFromSorted
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|Ordering
operator|.
name|natural
argument_list|()
argument_list|,
name|copyFromSorted
operator|.
name|keyComparator
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|Ordering
operator|.
name|natural
argument_list|()
argument_list|,
name|copyFromSorted
operator|.
name|valueComparator
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|Ordering
operator|.
name|natural
argument_list|()
argument_list|,
name|copyFromSorted
operator|.
name|get
argument_list|(
literal|1.0
argument_list|)
operator|.
name|comparator
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testComparators ()
specifier|public
name|void
name|testComparators
parameter_list|()
block|{
name|TreeMultimap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|multimap
init|=
name|TreeMultimap
operator|.
name|create
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|Ordering
operator|.
name|natural
argument_list|()
argument_list|,
name|multimap
operator|.
name|keyComparator
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Ordering
operator|.
name|natural
argument_list|()
argument_list|,
name|multimap
operator|.
name|valueComparator
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testSortedKeySet ()
specifier|public
name|void
name|testSortedKeySet
parameter_list|()
block|{
name|TreeMultimap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|multimap
init|=
name|createPopulate
argument_list|()
decl_stmt|;
name|SortedSet
argument_list|<
name|String
argument_list|>
name|keySet
init|=
name|multimap
operator|.
name|keySet
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"foo"
argument_list|,
name|keySet
operator|.
name|first
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"tree"
argument_list|,
name|keySet
operator|.
name|last
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Ordering
operator|.
name|natural
argument_list|()
argument_list|,
name|keySet
operator|.
name|comparator
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"foo"
argument_list|,
literal|"google"
argument_list|)
argument_list|,
name|keySet
operator|.
name|headSet
argument_list|(
literal|"hi"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"tree"
argument_list|)
argument_list|,
name|keySet
operator|.
name|tailSet
argument_list|(
literal|"hi"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"google"
argument_list|)
argument_list|,
name|keySet
operator|.
name|subSet
argument_list|(
literal|"gap"
argument_list|,
literal|"hi"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testKeySetSubSet ()
specifier|public
name|void
name|testKeySetSubSet
parameter_list|()
block|{
name|TreeMultimap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|multimap
init|=
name|createPopulate
argument_list|()
decl_stmt|;
name|SortedSet
argument_list|<
name|String
argument_list|>
name|keySet
init|=
name|multimap
operator|.
name|keySet
argument_list|()
decl_stmt|;
name|SortedSet
argument_list|<
name|String
argument_list|>
name|subSet
init|=
name|keySet
operator|.
name|subSet
argument_list|(
literal|"gap"
argument_list|,
literal|"hi"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|subSet
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|subSet
operator|.
name|contains
argument_list|(
literal|"google"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|subSet
operator|.
name|contains
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|subSet
operator|.
name|containsAll
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
literal|"google"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|subSet
operator|.
name|containsAll
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|String
argument_list|>
name|iterator
init|=
name|subSet
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|iterator
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"google"
argument_list|,
name|iterator
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|iterator
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|subSet
operator|.
name|remove
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|multimap
operator|.
name|containsKey
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|7
argument_list|,
name|multimap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|subSet
operator|.
name|remove
argument_list|(
literal|"google"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|multimap
operator|.
name|containsKey
argument_list|(
literal|"google"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|multimap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
argument_list|(
literal|"unreasonable slow"
argument_list|)
DECL|method|testGetIteration ()
specifier|public
name|void
name|testGetIteration
parameter_list|()
block|{
operator|new
name|IteratorTester
argument_list|<
name|Integer
argument_list|>
argument_list|(
literal|6
argument_list|,
name|MODIFIABLE
argument_list|,
name|Sets
operator|.
name|newTreeSet
argument_list|(
name|asList
argument_list|(
literal|2
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|,
literal|7
argument_list|,
literal|8
argument_list|)
argument_list|)
argument_list|,
name|IteratorTester
operator|.
name|KnownOrder
operator|.
name|KNOWN_ORDER
argument_list|)
block|{
specifier|private
name|Multimap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|multimap
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|Iterator
argument_list|<
name|Integer
argument_list|>
name|newTargetIterator
parameter_list|()
block|{
name|multimap
operator|=
name|create
argument_list|()
expr_stmt|;
name|multimap
operator|.
name|putAll
argument_list|(
literal|"foo"
argument_list|,
name|asList
argument_list|(
literal|3
argument_list|,
literal|8
argument_list|,
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|multimap
operator|.
name|putAll
argument_list|(
literal|"bar"
argument_list|,
name|asList
argument_list|(
literal|5
argument_list|,
literal|6
argument_list|)
argument_list|)
expr_stmt|;
name|multimap
operator|.
name|putAll
argument_list|(
literal|"foo"
argument_list|,
name|asList
argument_list|(
literal|7
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|multimap
operator|.
name|get
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|iterator
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|verify
parameter_list|(
name|List
argument_list|<
name|Integer
argument_list|>
name|elements
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|newHashSet
argument_list|(
name|elements
argument_list|)
argument_list|,
name|multimap
operator|.
name|get
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
operator|.
name|test
argument_list|()
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|GwtIncompatible
argument_list|(
literal|"unreasonable slow"
argument_list|)
DECL|method|testEntriesIteration ()
specifier|public
name|void
name|testEntriesIteration
parameter_list|()
block|{
name|Set
argument_list|<
name|Entry
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|>
name|set
init|=
name|Sets
operator|.
name|newLinkedHashSet
argument_list|(
name|asList
argument_list|(
name|Maps
operator|.
name|immutableEntry
argument_list|(
literal|"bar"
argument_list|,
literal|4
argument_list|)
argument_list|,
name|Maps
operator|.
name|immutableEntry
argument_list|(
literal|"bar"
argument_list|,
literal|5
argument_list|)
argument_list|,
name|Maps
operator|.
name|immutableEntry
argument_list|(
literal|"foo"
argument_list|,
literal|2
argument_list|)
argument_list|,
name|Maps
operator|.
name|immutableEntry
argument_list|(
literal|"foo"
argument_list|,
literal|3
argument_list|)
argument_list|,
name|Maps
operator|.
name|immutableEntry
argument_list|(
literal|"foo"
argument_list|,
literal|6
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
operator|new
name|IteratorTester
argument_list|<
name|Entry
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|>
argument_list|(
literal|6
argument_list|,
name|MODIFIABLE
argument_list|,
name|set
argument_list|,
name|IteratorTester
operator|.
name|KnownOrder
operator|.
name|KNOWN_ORDER
argument_list|)
block|{
specifier|private
name|Multimap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|multimap
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|>
name|newTargetIterator
parameter_list|()
block|{
name|multimap
operator|=
name|create
argument_list|()
expr_stmt|;
name|multimap
operator|.
name|putAll
argument_list|(
literal|"foo"
argument_list|,
name|asList
argument_list|(
literal|6
argument_list|,
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|multimap
operator|.
name|putAll
argument_list|(
literal|"bar"
argument_list|,
name|asList
argument_list|(
literal|4
argument_list|,
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|multimap
operator|.
name|putAll
argument_list|(
literal|"foo"
argument_list|,
name|asList
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|multimap
operator|.
name|entries
argument_list|()
operator|.
name|iterator
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|verify
parameter_list|(
name|List
argument_list|<
name|Entry
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|>
name|elements
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|newHashSet
argument_list|(
name|elements
argument_list|)
argument_list|,
name|multimap
operator|.
name|entries
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
operator|.
name|test
argument_list|()
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
argument_list|(
literal|"unreasonable slow"
argument_list|)
DECL|method|testKeysIteration ()
specifier|public
name|void
name|testKeysIteration
parameter_list|()
block|{
operator|new
name|IteratorTester
argument_list|<
name|String
argument_list|>
argument_list|(
literal|6
argument_list|,
name|MODIFIABLE
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"bar"
argument_list|,
literal|"bar"
argument_list|,
literal|"foo"
argument_list|,
literal|"foo"
argument_list|,
literal|"foo"
argument_list|)
argument_list|,
name|IteratorTester
operator|.
name|KnownOrder
operator|.
name|KNOWN_ORDER
argument_list|)
block|{
specifier|private
name|Multimap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|multimap
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|Iterator
argument_list|<
name|String
argument_list|>
name|newTargetIterator
parameter_list|()
block|{
name|multimap
operator|=
name|create
argument_list|()
expr_stmt|;
name|multimap
operator|.
name|putAll
argument_list|(
literal|"foo"
argument_list|,
name|asList
argument_list|(
literal|2
argument_list|,
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|multimap
operator|.
name|putAll
argument_list|(
literal|"bar"
argument_list|,
name|asList
argument_list|(
literal|4
argument_list|,
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|multimap
operator|.
name|putAll
argument_list|(
literal|"foo"
argument_list|,
name|asList
argument_list|(
literal|6
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|multimap
operator|.
name|keys
argument_list|()
operator|.
name|iterator
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|verify
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|elements
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|elements
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
name|multimap
operator|.
name|keys
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
operator|.
name|test
argument_list|()
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
argument_list|(
literal|"unreasonable slow"
argument_list|)
DECL|method|testValuesIteration ()
specifier|public
name|void
name|testValuesIteration
parameter_list|()
block|{
operator|new
name|IteratorTester
argument_list|<
name|Integer
argument_list|>
argument_list|(
literal|6
argument_list|,
name|MODIFIABLE
argument_list|,
name|newArrayList
argument_list|(
literal|4
argument_list|,
literal|5
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|6
argument_list|)
argument_list|,
name|IteratorTester
operator|.
name|KnownOrder
operator|.
name|KNOWN_ORDER
argument_list|)
block|{
specifier|private
name|Multimap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|multimap
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|Iterator
argument_list|<
name|Integer
argument_list|>
name|newTargetIterator
parameter_list|()
block|{
name|multimap
operator|=
name|create
argument_list|()
expr_stmt|;
name|multimap
operator|.
name|putAll
argument_list|(
literal|"foo"
argument_list|,
name|asList
argument_list|(
literal|2
argument_list|,
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|multimap
operator|.
name|putAll
argument_list|(
literal|"bar"
argument_list|,
name|asList
argument_list|(
literal|4
argument_list|,
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|multimap
operator|.
name|putAll
argument_list|(
literal|"foo"
argument_list|,
name|asList
argument_list|(
literal|6
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|multimap
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|verify
parameter_list|(
name|List
argument_list|<
name|Integer
argument_list|>
name|elements
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|elements
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
name|multimap
operator|.
name|values
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
operator|.
name|test
argument_list|()
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
argument_list|(
literal|"unreasonable slow"
argument_list|)
DECL|method|testKeySetIteration ()
specifier|public
name|void
name|testKeySetIteration
parameter_list|()
block|{
operator|new
name|IteratorTester
argument_list|<
name|String
argument_list|>
argument_list|(
literal|6
argument_list|,
name|MODIFIABLE
argument_list|,
name|Sets
operator|.
name|newTreeSet
argument_list|(
name|asList
argument_list|(
literal|"bar"
argument_list|,
literal|"baz"
argument_list|,
literal|"cat"
argument_list|,
literal|"dog"
argument_list|,
literal|"foo"
argument_list|)
argument_list|)
argument_list|,
name|IteratorTester
operator|.
name|KnownOrder
operator|.
name|KNOWN_ORDER
argument_list|)
block|{
specifier|private
name|Multimap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|multimap
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|Iterator
argument_list|<
name|String
argument_list|>
name|newTargetIterator
parameter_list|()
block|{
name|multimap
operator|=
name|create
argument_list|()
expr_stmt|;
name|multimap
operator|.
name|putAll
argument_list|(
literal|"foo"
argument_list|,
name|asList
argument_list|(
literal|2
argument_list|,
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|multimap
operator|.
name|putAll
argument_list|(
literal|"bar"
argument_list|,
name|asList
argument_list|(
literal|4
argument_list|,
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|multimap
operator|.
name|putAll
argument_list|(
literal|"foo"
argument_list|,
name|asList
argument_list|(
literal|6
argument_list|)
argument_list|)
expr_stmt|;
name|multimap
operator|.
name|putAll
argument_list|(
literal|"baz"
argument_list|,
name|asList
argument_list|(
literal|7
argument_list|,
literal|8
argument_list|)
argument_list|)
expr_stmt|;
name|multimap
operator|.
name|putAll
argument_list|(
literal|"dog"
argument_list|,
name|asList
argument_list|(
literal|9
argument_list|)
argument_list|)
expr_stmt|;
name|multimap
operator|.
name|putAll
argument_list|(
literal|"bar"
argument_list|,
name|asList
argument_list|(
literal|10
argument_list|,
literal|11
argument_list|)
argument_list|)
expr_stmt|;
name|multimap
operator|.
name|putAll
argument_list|(
literal|"cat"
argument_list|,
name|asList
argument_list|(
literal|12
argument_list|,
literal|13
argument_list|,
literal|14
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|multimap
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|verify
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|elements
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|newHashSet
argument_list|(
name|elements
argument_list|)
argument_list|,
name|multimap
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
operator|.
name|test
argument_list|()
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|GwtIncompatible
argument_list|(
literal|"unreasonable slow"
argument_list|)
DECL|method|testAsSetIteration ()
specifier|public
name|void
name|testAsSetIteration
parameter_list|()
block|{
name|Set
argument_list|<
name|Entry
argument_list|<
name|String
argument_list|,
name|Collection
argument_list|<
name|Integer
argument_list|>
argument_list|>
argument_list|>
name|set
init|=
name|Sets
operator|.
name|newTreeSet
argument_list|(
operator|new
name|Comparator
argument_list|<
name|Entry
argument_list|<
name|String
argument_list|,
name|?
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|Entry
argument_list|<
name|String
argument_list|,
name|?
argument_list|>
name|o1
parameter_list|,
name|Entry
argument_list|<
name|String
argument_list|,
name|?
argument_list|>
name|o2
parameter_list|)
block|{
return|return
name|o1
operator|.
name|getKey
argument_list|()
operator|.
name|compareTo
argument_list|(
name|o2
operator|.
name|getKey
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|addAll
argument_list|(
name|set
argument_list|,
name|Maps
operator|.
name|immutableEntry
argument_list|(
literal|"bar"
argument_list|,
operator|(
name|Collection
argument_list|<
name|Integer
argument_list|>
operator|)
name|Sets
operator|.
name|newHashSet
argument_list|(
literal|4
argument_list|,
literal|5
argument_list|,
literal|10
argument_list|,
literal|11
argument_list|)
argument_list|)
argument_list|,
name|Maps
operator|.
name|immutableEntry
argument_list|(
literal|"baz"
argument_list|,
operator|(
name|Collection
argument_list|<
name|Integer
argument_list|>
operator|)
name|Sets
operator|.
name|newHashSet
argument_list|(
literal|7
argument_list|,
literal|8
argument_list|)
argument_list|)
argument_list|,
name|Maps
operator|.
name|immutableEntry
argument_list|(
literal|"cat"
argument_list|,
operator|(
name|Collection
argument_list|<
name|Integer
argument_list|>
operator|)
name|Sets
operator|.
name|newHashSet
argument_list|(
literal|12
argument_list|,
literal|13
argument_list|,
literal|14
argument_list|)
argument_list|)
argument_list|,
name|Maps
operator|.
name|immutableEntry
argument_list|(
literal|"dog"
argument_list|,
operator|(
name|Collection
argument_list|<
name|Integer
argument_list|>
operator|)
name|Sets
operator|.
name|newHashSet
argument_list|(
literal|9
argument_list|)
argument_list|)
argument_list|,
name|Maps
operator|.
name|immutableEntry
argument_list|(
literal|"foo"
argument_list|,
operator|(
name|Collection
argument_list|<
name|Integer
argument_list|>
operator|)
name|Sets
operator|.
name|newHashSet
argument_list|(
literal|2
argument_list|,
literal|3
argument_list|,
literal|6
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
operator|new
name|IteratorTester
argument_list|<
name|Entry
argument_list|<
name|String
argument_list|,
name|Collection
argument_list|<
name|Integer
argument_list|>
argument_list|>
argument_list|>
argument_list|(
literal|6
argument_list|,
name|MODIFIABLE
argument_list|,
name|set
argument_list|,
name|IteratorTester
operator|.
name|KnownOrder
operator|.
name|KNOWN_ORDER
argument_list|)
block|{
specifier|private
name|Multimap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|multimap
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|String
argument_list|,
name|Collection
argument_list|<
name|Integer
argument_list|>
argument_list|>
argument_list|>
name|newTargetIterator
parameter_list|()
block|{
name|multimap
operator|=
name|create
argument_list|()
expr_stmt|;
name|multimap
operator|.
name|putAll
argument_list|(
literal|"foo"
argument_list|,
name|asList
argument_list|(
literal|2
argument_list|,
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|multimap
operator|.
name|putAll
argument_list|(
literal|"bar"
argument_list|,
name|asList
argument_list|(
literal|4
argument_list|,
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|multimap
operator|.
name|putAll
argument_list|(
literal|"foo"
argument_list|,
name|asList
argument_list|(
literal|6
argument_list|)
argument_list|)
expr_stmt|;
name|multimap
operator|.
name|putAll
argument_list|(
literal|"baz"
argument_list|,
name|asList
argument_list|(
literal|7
argument_list|,
literal|8
argument_list|)
argument_list|)
expr_stmt|;
name|multimap
operator|.
name|putAll
argument_list|(
literal|"dog"
argument_list|,
name|asList
argument_list|(
literal|9
argument_list|)
argument_list|)
expr_stmt|;
name|multimap
operator|.
name|putAll
argument_list|(
literal|"bar"
argument_list|,
name|asList
argument_list|(
literal|10
argument_list|,
literal|11
argument_list|)
argument_list|)
expr_stmt|;
name|multimap
operator|.
name|putAll
argument_list|(
literal|"cat"
argument_list|,
name|asList
argument_list|(
literal|12
argument_list|,
literal|13
argument_list|,
literal|14
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|multimap
operator|.
name|asMap
argument_list|()
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|verify
parameter_list|(
name|List
argument_list|<
name|Entry
argument_list|<
name|String
argument_list|,
name|Collection
argument_list|<
name|Integer
argument_list|>
argument_list|>
argument_list|>
name|elements
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|newHashSet
argument_list|(
name|elements
argument_list|)
argument_list|,
name|multimap
operator|.
name|asMap
argument_list|()
operator|.
name|entrySet
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
operator|.
name|test
argument_list|()
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
argument_list|(
literal|"SerializableTester"
argument_list|)
DECL|method|testExplicitComparatorSerialization ()
specifier|public
name|void
name|testExplicitComparatorSerialization
parameter_list|()
block|{
name|TreeMultimap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|multimap
init|=
name|createPopulate
argument_list|()
decl_stmt|;
name|TreeMultimap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|copy
init|=
name|SerializableTester
operator|.
name|reserializeAndAssert
argument_list|(
name|multimap
argument_list|)
decl_stmt|;
name|ASSERT
operator|.
name|that
argument_list|(
name|copy
operator|.
name|values
argument_list|()
argument_list|)
operator|.
name|hasContentsInOrder
argument_list|(
literal|1
argument_list|,
literal|3
argument_list|,
literal|7
argument_list|,
literal|2
argument_list|,
literal|6
argument_list|,
literal|0
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|ASSERT
operator|.
name|that
argument_list|(
name|copy
operator|.
name|keySet
argument_list|()
argument_list|)
operator|.
name|hasContentsInOrder
argument_list|(
literal|"foo"
argument_list|,
literal|"google"
argument_list|,
literal|"tree"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|multimap
operator|.
name|keyComparator
argument_list|()
argument_list|,
name|copy
operator|.
name|keyComparator
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|multimap
operator|.
name|valueComparator
argument_list|()
argument_list|,
name|copy
operator|.
name|valueComparator
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
argument_list|(
literal|"SerializableTester"
argument_list|)
DECL|method|testTreeMultimapDerived ()
specifier|public
name|void
name|testTreeMultimapDerived
parameter_list|()
block|{
name|TreeMultimap
argument_list|<
name|DerivedComparable
argument_list|,
name|DerivedComparable
argument_list|>
name|multimap
init|=
name|TreeMultimap
operator|.
name|create
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|ImmutableMultimap
operator|.
name|of
argument_list|()
argument_list|,
name|multimap
argument_list|)
expr_stmt|;
name|multimap
operator|.
name|put
argument_list|(
operator|new
name|DerivedComparable
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
operator|new
name|DerivedComparable
argument_list|(
literal|"f"
argument_list|)
argument_list|)
expr_stmt|;
name|multimap
operator|.
name|put
argument_list|(
operator|new
name|DerivedComparable
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
operator|new
name|DerivedComparable
argument_list|(
literal|"o"
argument_list|)
argument_list|)
expr_stmt|;
name|multimap
operator|.
name|put
argument_list|(
operator|new
name|DerivedComparable
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
operator|new
name|DerivedComparable
argument_list|(
literal|"o"
argument_list|)
argument_list|)
expr_stmt|;
name|multimap
operator|.
name|put
argument_list|(
operator|new
name|DerivedComparable
argument_list|(
literal|"bar"
argument_list|)
argument_list|,
operator|new
name|DerivedComparable
argument_list|(
literal|"b"
argument_list|)
argument_list|)
expr_stmt|;
name|multimap
operator|.
name|put
argument_list|(
operator|new
name|DerivedComparable
argument_list|(
literal|"bar"
argument_list|)
argument_list|,
operator|new
name|DerivedComparable
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|multimap
operator|.
name|put
argument_list|(
operator|new
name|DerivedComparable
argument_list|(
literal|"bar"
argument_list|)
argument_list|,
operator|new
name|DerivedComparable
argument_list|(
literal|"r"
argument_list|)
argument_list|)
expr_stmt|;
name|ASSERT
operator|.
name|that
argument_list|(
name|multimap
operator|.
name|keySet
argument_list|()
argument_list|)
operator|.
name|hasContentsInOrder
argument_list|(
operator|new
name|DerivedComparable
argument_list|(
literal|"bar"
argument_list|)
argument_list|,
operator|new
name|DerivedComparable
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|ASSERT
operator|.
name|that
argument_list|(
name|multimap
operator|.
name|values
argument_list|()
argument_list|)
operator|.
name|hasContentsInOrder
argument_list|(
operator|new
name|DerivedComparable
argument_list|(
literal|"a"
argument_list|)
argument_list|,
operator|new
name|DerivedComparable
argument_list|(
literal|"b"
argument_list|)
argument_list|,
operator|new
name|DerivedComparable
argument_list|(
literal|"r"
argument_list|)
argument_list|,
operator|new
name|DerivedComparable
argument_list|(
literal|"f"
argument_list|)
argument_list|,
operator|new
name|DerivedComparable
argument_list|(
literal|"o"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Ordering
operator|.
name|natural
argument_list|()
argument_list|,
name|multimap
operator|.
name|keyComparator
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Ordering
operator|.
name|natural
argument_list|()
argument_list|,
name|multimap
operator|.
name|valueComparator
argument_list|()
argument_list|)
expr_stmt|;
name|SerializableTester
operator|.
name|reserializeAndAssert
argument_list|(
name|multimap
argument_list|)
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
argument_list|(
literal|"SerializableTester"
argument_list|)
DECL|method|testTreeMultimapNonGeneric ()
specifier|public
name|void
name|testTreeMultimapNonGeneric
parameter_list|()
block|{
name|TreeMultimap
argument_list|<
name|LegacyComparable
argument_list|,
name|LegacyComparable
argument_list|>
name|multimap
init|=
name|TreeMultimap
operator|.
name|create
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|ImmutableMultimap
operator|.
name|of
argument_list|()
argument_list|,
name|multimap
argument_list|)
expr_stmt|;
name|multimap
operator|.
name|put
argument_list|(
operator|new
name|LegacyComparable
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
operator|new
name|LegacyComparable
argument_list|(
literal|"f"
argument_list|)
argument_list|)
expr_stmt|;
name|multimap
operator|.
name|put
argument_list|(
operator|new
name|LegacyComparable
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
operator|new
name|LegacyComparable
argument_list|(
literal|"o"
argument_list|)
argument_list|)
expr_stmt|;
name|multimap
operator|.
name|put
argument_list|(
operator|new
name|LegacyComparable
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
operator|new
name|LegacyComparable
argument_list|(
literal|"o"
argument_list|)
argument_list|)
expr_stmt|;
name|multimap
operator|.
name|put
argument_list|(
operator|new
name|LegacyComparable
argument_list|(
literal|"bar"
argument_list|)
argument_list|,
operator|new
name|LegacyComparable
argument_list|(
literal|"b"
argument_list|)
argument_list|)
expr_stmt|;
name|multimap
operator|.
name|put
argument_list|(
operator|new
name|LegacyComparable
argument_list|(
literal|"bar"
argument_list|)
argument_list|,
operator|new
name|LegacyComparable
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|multimap
operator|.
name|put
argument_list|(
operator|new
name|LegacyComparable
argument_list|(
literal|"bar"
argument_list|)
argument_list|,
operator|new
name|LegacyComparable
argument_list|(
literal|"r"
argument_list|)
argument_list|)
expr_stmt|;
name|ASSERT
operator|.
name|that
argument_list|(
name|multimap
operator|.
name|keySet
argument_list|()
argument_list|)
operator|.
name|hasContentsInOrder
argument_list|(
operator|new
name|LegacyComparable
argument_list|(
literal|"bar"
argument_list|)
argument_list|,
operator|new
name|LegacyComparable
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|ASSERT
operator|.
name|that
argument_list|(
name|multimap
operator|.
name|values
argument_list|()
argument_list|)
operator|.
name|hasContentsInOrder
argument_list|(
operator|new
name|LegacyComparable
argument_list|(
literal|"a"
argument_list|)
argument_list|,
operator|new
name|LegacyComparable
argument_list|(
literal|"b"
argument_list|)
argument_list|,
operator|new
name|LegacyComparable
argument_list|(
literal|"r"
argument_list|)
argument_list|,
operator|new
name|LegacyComparable
argument_list|(
literal|"f"
argument_list|)
argument_list|,
operator|new
name|LegacyComparable
argument_list|(
literal|"o"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Ordering
operator|.
name|natural
argument_list|()
argument_list|,
name|multimap
operator|.
name|keyComparator
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Ordering
operator|.
name|natural
argument_list|()
argument_list|,
name|multimap
operator|.
name|valueComparator
argument_list|()
argument_list|)
expr_stmt|;
name|SerializableTester
operator|.
name|reserializeAndAssert
argument_list|(
name|multimap
argument_list|)
expr_stmt|;
block|}
DECL|method|testTreeMultimapAsMapSorted ()
specifier|public
name|void
name|testTreeMultimapAsMapSorted
parameter_list|()
block|{
name|TreeMultimap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|multimap
init|=
name|createPopulate
argument_list|()
decl_stmt|;
name|SortedMap
argument_list|<
name|String
argument_list|,
name|Collection
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|asMap
init|=
name|multimap
operator|.
name|asMap
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|Ordering
operator|.
name|natural
argument_list|()
argument_list|,
name|asMap
operator|.
name|comparator
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"foo"
argument_list|,
name|asMap
operator|.
name|firstKey
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"tree"
argument_list|,
name|asMap
operator|.
name|lastKey
argument_list|()
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|Integer
argument_list|>
name|fooValues
init|=
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|1
argument_list|,
literal|3
argument_list|,
literal|7
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|Integer
argument_list|>
name|googleValues
init|=
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|2
argument_list|,
literal|6
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|Integer
argument_list|>
name|treeValues
init|=
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|4
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"google"
argument_list|,
name|googleValues
argument_list|,
literal|"tree"
argument_list|,
name|treeValues
argument_list|)
argument_list|,
name|asMap
operator|.
name|tailMap
argument_list|(
literal|"g"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"google"
argument_list|,
name|googleValues
argument_list|,
literal|"foo"
argument_list|,
name|fooValues
argument_list|)
argument_list|,
name|asMap
operator|.
name|headMap
argument_list|(
literal|"h"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"google"
argument_list|,
name|googleValues
argument_list|)
argument_list|,
name|asMap
operator|.
name|subMap
argument_list|(
literal|"g"
argument_list|,
literal|"h"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testTailSetClear ()
specifier|public
name|void
name|testTailSetClear
parameter_list|()
block|{
name|TreeMultimap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|multimap
init|=
name|TreeMultimap
operator|.
name|create
argument_list|()
decl_stmt|;
name|multimap
operator|.
name|put
argument_list|(
literal|"a"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|multimap
operator|.
name|put
argument_list|(
literal|"a"
argument_list|,
literal|11
argument_list|)
expr_stmt|;
name|multimap
operator|.
name|put
argument_list|(
literal|"b"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|multimap
operator|.
name|put
argument_list|(
literal|"c"
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|multimap
operator|.
name|put
argument_list|(
literal|"d"
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|multimap
operator|.
name|put
argument_list|(
literal|"e"
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|multimap
operator|.
name|put
argument_list|(
literal|"e"
argument_list|,
literal|55
argument_list|)
expr_stmt|;
name|multimap
operator|.
name|keySet
argument_list|()
operator|.
name|tailSet
argument_list|(
literal|"d"
argument_list|)
operator|.
name|clear
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|)
argument_list|,
name|multimap
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|multimap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|multimap
operator|.
name|values
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|multimap
operator|.
name|keys
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

