begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2011 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except  * in compliance with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software distributed under the  * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either  * express or implied. See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.collect
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtCompatible
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_comment
comment|/**  * Tests for {@code Count}.  *  * @author Louis Wasserman  */
end_comment

begin_class
annotation|@
name|GwtCompatible
DECL|class|CountTest
specifier|public
class|class
name|CountTest
extends|extends
name|TestCase
block|{
DECL|method|testGet ()
specifier|public
name|void
name|testGet
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|20
argument_list|,
operator|new
name|Count
argument_list|(
literal|20
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testGetAndAdd ()
specifier|public
name|void
name|testGetAndAdd
parameter_list|()
block|{
name|Count
name|holder
init|=
operator|new
name|Count
argument_list|(
literal|20
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|20
argument_list|,
name|holder
operator|.
name|getAndAdd
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|21
argument_list|,
name|holder
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testAddAndGet ()
specifier|public
name|void
name|testAddAndGet
parameter_list|()
block|{
name|Count
name|holder
init|=
operator|new
name|Count
argument_list|(
literal|20
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|21
argument_list|,
name|holder
operator|.
name|addAndGet
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testGetAndSet ()
specifier|public
name|void
name|testGetAndSet
parameter_list|()
block|{
name|Count
name|holder
init|=
operator|new
name|Count
argument_list|(
literal|10
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|holder
operator|.
name|getAndSet
argument_list|(
literal|20
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|20
argument_list|,
name|holder
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testSet ()
specifier|public
name|void
name|testSet
parameter_list|()
block|{
name|Count
name|holder
init|=
operator|new
name|Count
argument_list|(
literal|10
argument_list|)
decl_stmt|;
name|holder
operator|.
name|set
argument_list|(
literal|20
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|20
argument_list|,
name|holder
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

