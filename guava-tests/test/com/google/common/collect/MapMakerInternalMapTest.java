begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2011 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.collect
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|MapMakerInternalMap
operator|.
name|DRAIN_THRESHOLD
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertThat
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Equivalence
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|MapMakerInternalMap
operator|.
name|InternalEntry
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|MapMakerInternalMap
operator|.
name|Segment
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|MapMakerInternalMap
operator|.
name|Strength
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|MapMakerInternalMap
operator|.
name|WeakValueEntry
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|MapMakerInternalMap
operator|.
name|WeakValueReference
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|testing
operator|.
name|NullPointerTester
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|ref
operator|.
name|Reference
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicReferenceArray
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_comment
comment|/** @author Charles Fry */
end_comment

begin_class
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
comment|// many tests of deprecated methods
DECL|class|MapMakerInternalMapTest
specifier|public
class|class
name|MapMakerInternalMapTest
extends|extends
name|TestCase
block|{
DECL|field|SMALL_MAX_SIZE
specifier|static
specifier|final
name|int
name|SMALL_MAX_SIZE
init|=
name|DRAIN_THRESHOLD
operator|*
literal|5
decl_stmt|;
specifier|private
specifier|static
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
name|MapMakerInternalMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|,
name|?
extends|extends
name|InternalEntry
argument_list|<
name|K
argument_list|,
name|V
argument_list|,
name|?
argument_list|>
argument_list|,
name|?
extends|extends
name|Segment
argument_list|<
name|K
argument_list|,
name|V
argument_list|,
name|?
argument_list|,
name|?
argument_list|>
argument_list|>
DECL|method|makeMap (MapMaker maker)
name|makeMap
parameter_list|(
name|MapMaker
name|maker
parameter_list|)
block|{
return|return
name|MapMakerInternalMap
operator|.
name|create
argument_list|(
name|maker
argument_list|)
return|;
block|}
DECL|method|createMapMaker ()
specifier|private
specifier|static
name|MapMaker
name|createMapMaker
parameter_list|()
block|{
name|MapMaker
name|maker
init|=
operator|new
name|MapMaker
argument_list|()
decl_stmt|;
name|maker
operator|.
name|useCustomMap
operator|=
literal|true
expr_stmt|;
return|return
name|maker
return|;
block|}
comment|// constructor tests
DECL|method|testDefaults ()
specifier|public
name|void
name|testDefaults
parameter_list|()
block|{
name|MapMakerInternalMap
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|,
name|?
argument_list|,
name|?
argument_list|>
name|map
init|=
name|makeMap
argument_list|(
name|createMapMaker
argument_list|()
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
name|Strength
operator|.
name|STRONG
argument_list|,
name|map
operator|.
name|keyStrength
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|Strength
operator|.
name|STRONG
argument_list|,
name|map
operator|.
name|valueStrength
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|map
operator|.
name|keyStrength
argument_list|()
operator|.
name|defaultEquivalence
argument_list|()
argument_list|,
name|map
operator|.
name|keyEquivalence
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|map
operator|.
name|valueStrength
argument_list|()
operator|.
name|defaultEquivalence
argument_list|()
argument_list|,
name|map
operator|.
name|valueEquivalence
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|map
operator|.
name|entryHelper
argument_list|)
operator|.
name|isInstanceOf
argument_list|(
name|MapMakerInternalMap
operator|.
name|StrongKeyStrongValueEntry
operator|.
name|Helper
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|map
operator|.
name|concurrencyLevel
argument_list|)
expr_stmt|;
comment|// concurrency level
name|assertThat
argument_list|(
name|map
operator|.
name|segments
argument_list|)
operator|.
name|hasLength
argument_list|(
literal|4
argument_list|)
expr_stmt|;
comment|// initial capacity / concurrency level
name|assertEquals
argument_list|(
literal|16
operator|/
name|map
operator|.
name|segments
operator|.
name|length
argument_list|,
name|map
operator|.
name|segments
index|[
literal|0
index|]
operator|.
name|table
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testSetKeyEquivalence ()
specifier|public
name|void
name|testSetKeyEquivalence
parameter_list|()
block|{
name|Equivalence
argument_list|<
name|Object
argument_list|>
name|testEquivalence
init|=
operator|new
name|Equivalence
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|boolean
name|doEquivalent
parameter_list|(
name|Object
name|a
parameter_list|,
name|Object
name|b
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|protected
name|int
name|doHash
parameter_list|(
name|Object
name|t
parameter_list|)
block|{
return|return
literal|0
return|;
block|}
block|}
decl_stmt|;
name|MapMakerInternalMap
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|,
name|?
argument_list|,
name|?
argument_list|>
name|map
init|=
name|makeMap
argument_list|(
name|createMapMaker
argument_list|()
operator|.
name|keyEquivalence
argument_list|(
name|testEquivalence
argument_list|)
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
name|testEquivalence
argument_list|,
name|map
operator|.
name|keyEquivalence
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|map
operator|.
name|valueStrength
argument_list|()
operator|.
name|defaultEquivalence
argument_list|()
argument_list|,
name|map
operator|.
name|valueEquivalence
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testSetConcurrencyLevel ()
specifier|public
name|void
name|testSetConcurrencyLevel
parameter_list|()
block|{
comment|// round up to nearest power of two
name|checkConcurrencyLevel
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|checkConcurrencyLevel
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|checkConcurrencyLevel
argument_list|(
literal|3
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|checkConcurrencyLevel
argument_list|(
literal|4
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|checkConcurrencyLevel
argument_list|(
literal|5
argument_list|,
literal|8
argument_list|)
expr_stmt|;
name|checkConcurrencyLevel
argument_list|(
literal|6
argument_list|,
literal|8
argument_list|)
expr_stmt|;
name|checkConcurrencyLevel
argument_list|(
literal|7
argument_list|,
literal|8
argument_list|)
expr_stmt|;
name|checkConcurrencyLevel
argument_list|(
literal|8
argument_list|,
literal|8
argument_list|)
expr_stmt|;
block|}
DECL|method|checkConcurrencyLevel (int concurrencyLevel, int segmentCount)
specifier|private
specifier|static
name|void
name|checkConcurrencyLevel
parameter_list|(
name|int
name|concurrencyLevel
parameter_list|,
name|int
name|segmentCount
parameter_list|)
block|{
name|MapMakerInternalMap
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|,
name|?
argument_list|,
name|?
argument_list|>
name|map
init|=
name|makeMap
argument_list|(
name|createMapMaker
argument_list|()
operator|.
name|concurrencyLevel
argument_list|(
name|concurrencyLevel
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|map
operator|.
name|segments
argument_list|)
operator|.
name|hasLength
argument_list|(
name|segmentCount
argument_list|)
expr_stmt|;
block|}
DECL|method|testSetInitialCapacity ()
specifier|public
name|void
name|testSetInitialCapacity
parameter_list|()
block|{
comment|// share capacity over each segment, then round up to nearest power of two
name|checkInitialCapacity
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|checkInitialCapacity
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|checkInitialCapacity
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|checkInitialCapacity
argument_list|(
literal|1
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|checkInitialCapacity
argument_list|(
literal|1
argument_list|,
literal|4
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|checkInitialCapacity
argument_list|(
literal|1
argument_list|,
literal|5
argument_list|,
literal|8
argument_list|)
expr_stmt|;
name|checkInitialCapacity
argument_list|(
literal|1
argument_list|,
literal|6
argument_list|,
literal|8
argument_list|)
expr_stmt|;
name|checkInitialCapacity
argument_list|(
literal|1
argument_list|,
literal|7
argument_list|,
literal|8
argument_list|)
expr_stmt|;
name|checkInitialCapacity
argument_list|(
literal|1
argument_list|,
literal|8
argument_list|,
literal|8
argument_list|)
expr_stmt|;
name|checkInitialCapacity
argument_list|(
literal|2
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|checkInitialCapacity
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|checkInitialCapacity
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|checkInitialCapacity
argument_list|(
literal|2
argument_list|,
literal|3
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|checkInitialCapacity
argument_list|(
literal|2
argument_list|,
literal|4
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|checkInitialCapacity
argument_list|(
literal|2
argument_list|,
literal|5
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|checkInitialCapacity
argument_list|(
literal|2
argument_list|,
literal|6
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|checkInitialCapacity
argument_list|(
literal|2
argument_list|,
literal|7
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|checkInitialCapacity
argument_list|(
literal|2
argument_list|,
literal|8
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|checkInitialCapacity
argument_list|(
literal|4
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|checkInitialCapacity
argument_list|(
literal|4
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|checkInitialCapacity
argument_list|(
literal|4
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|checkInitialCapacity
argument_list|(
literal|4
argument_list|,
literal|3
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|checkInitialCapacity
argument_list|(
literal|4
argument_list|,
literal|4
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|checkInitialCapacity
argument_list|(
literal|4
argument_list|,
literal|5
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|checkInitialCapacity
argument_list|(
literal|4
argument_list|,
literal|6
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|checkInitialCapacity
argument_list|(
literal|4
argument_list|,
literal|7
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|checkInitialCapacity
argument_list|(
literal|4
argument_list|,
literal|8
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
DECL|method|checkInitialCapacity ( int concurrencyLevel, int initialCapacity, int segmentSize)
specifier|private
specifier|static
name|void
name|checkInitialCapacity
parameter_list|(
name|int
name|concurrencyLevel
parameter_list|,
name|int
name|initialCapacity
parameter_list|,
name|int
name|segmentSize
parameter_list|)
block|{
name|MapMakerInternalMap
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|,
name|?
argument_list|,
name|?
argument_list|>
name|map
init|=
name|makeMap
argument_list|(
name|createMapMaker
argument_list|()
operator|.
name|concurrencyLevel
argument_list|(
name|concurrencyLevel
argument_list|)
operator|.
name|initialCapacity
argument_list|(
name|initialCapacity
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|map
operator|.
name|segments
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|segmentSize
argument_list|,
name|map
operator|.
name|segments
index|[
name|i
index|]
operator|.
name|table
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testSetMaximumSize ()
specifier|public
name|void
name|testSetMaximumSize
parameter_list|()
block|{
comment|// vary maximumSize wrt concurrencyLevel
for|for
control|(
name|int
name|maxSize
init|=
literal|1
init|;
name|maxSize
operator|<
literal|8
condition|;
name|maxSize
operator|++
control|)
block|{
name|checkMaximumSize
argument_list|(
literal|1
argument_list|,
literal|8
argument_list|,
name|maxSize
argument_list|)
expr_stmt|;
name|checkMaximumSize
argument_list|(
literal|2
argument_list|,
literal|8
argument_list|,
name|maxSize
argument_list|)
expr_stmt|;
name|checkMaximumSize
argument_list|(
literal|4
argument_list|,
literal|8
argument_list|,
name|maxSize
argument_list|)
expr_stmt|;
name|checkMaximumSize
argument_list|(
literal|8
argument_list|,
literal|8
argument_list|,
name|maxSize
argument_list|)
expr_stmt|;
block|}
name|checkMaximumSize
argument_list|(
literal|1
argument_list|,
literal|8
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|checkMaximumSize
argument_list|(
literal|2
argument_list|,
literal|8
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|checkMaximumSize
argument_list|(
literal|4
argument_list|,
literal|8
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|checkMaximumSize
argument_list|(
literal|8
argument_list|,
literal|8
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
comment|// vary initial capacity wrt maximumSize
for|for
control|(
name|int
name|capacity
init|=
literal|0
init|;
name|capacity
operator|<
literal|8
condition|;
name|capacity
operator|++
control|)
block|{
name|checkMaximumSize
argument_list|(
literal|1
argument_list|,
name|capacity
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|checkMaximumSize
argument_list|(
literal|2
argument_list|,
name|capacity
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|checkMaximumSize
argument_list|(
literal|4
argument_list|,
name|capacity
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|checkMaximumSize
argument_list|(
literal|8
argument_list|,
name|capacity
argument_list|,
literal|4
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|checkMaximumSize (int concurrencyLevel, int initialCapacity, int maxSize)
specifier|private
specifier|static
name|void
name|checkMaximumSize
parameter_list|(
name|int
name|concurrencyLevel
parameter_list|,
name|int
name|initialCapacity
parameter_list|,
name|int
name|maxSize
parameter_list|)
block|{
name|MapMakerInternalMap
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|,
name|?
argument_list|,
name|?
argument_list|>
name|map
init|=
name|makeMap
argument_list|(
name|createMapMaker
argument_list|()
operator|.
name|concurrencyLevel
argument_list|(
name|concurrencyLevel
argument_list|)
operator|.
name|initialCapacity
argument_list|(
name|initialCapacity
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|totalCapacity
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|map
operator|.
name|segments
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|totalCapacity
operator|+=
name|map
operator|.
name|segments
index|[
name|i
index|]
operator|.
name|maxSegmentSize
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"totalCapcity="
operator|+
name|totalCapacity
operator|+
literal|", maxSize="
operator|+
name|maxSize
argument_list|,
name|totalCapacity
operator|<=
name|maxSize
argument_list|)
expr_stmt|;
block|}
DECL|method|testSetWeakKeys ()
specifier|public
name|void
name|testSetWeakKeys
parameter_list|()
block|{
name|MapMakerInternalMap
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|,
name|?
argument_list|,
name|?
argument_list|>
name|map
init|=
name|makeMap
argument_list|(
name|createMapMaker
argument_list|()
operator|.
name|weakKeys
argument_list|()
argument_list|)
decl_stmt|;
name|checkStrength
argument_list|(
name|map
argument_list|,
name|Strength
operator|.
name|WEAK
argument_list|,
name|Strength
operator|.
name|STRONG
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|map
operator|.
name|entryHelper
argument_list|)
operator|.
name|isInstanceOf
argument_list|(
name|MapMakerInternalMap
operator|.
name|WeakKeyStrongValueEntry
operator|.
name|Helper
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
DECL|method|testSetWeakValues ()
specifier|public
name|void
name|testSetWeakValues
parameter_list|()
block|{
name|MapMakerInternalMap
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|,
name|?
argument_list|,
name|?
argument_list|>
name|map
init|=
name|makeMap
argument_list|(
name|createMapMaker
argument_list|()
operator|.
name|weakValues
argument_list|()
argument_list|)
decl_stmt|;
name|checkStrength
argument_list|(
name|map
argument_list|,
name|Strength
operator|.
name|STRONG
argument_list|,
name|Strength
operator|.
name|WEAK
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|map
operator|.
name|entryHelper
argument_list|)
operator|.
name|isInstanceOf
argument_list|(
name|MapMakerInternalMap
operator|.
name|StrongKeyWeakValueEntry
operator|.
name|Helper
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
DECL|method|checkStrength ( MapMakerInternalMap<Object, Object, ?, ?> map, Strength keyStrength, Strength valueStrength)
specifier|private
specifier|static
name|void
name|checkStrength
parameter_list|(
name|MapMakerInternalMap
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|,
name|?
argument_list|,
name|?
argument_list|>
name|map
parameter_list|,
name|Strength
name|keyStrength
parameter_list|,
name|Strength
name|valueStrength
parameter_list|)
block|{
name|assertSame
argument_list|(
name|keyStrength
argument_list|,
name|map
operator|.
name|keyStrength
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|valueStrength
argument_list|,
name|map
operator|.
name|valueStrength
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|keyStrength
operator|.
name|defaultEquivalence
argument_list|()
argument_list|,
name|map
operator|.
name|keyEquivalence
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|valueStrength
operator|.
name|defaultEquivalence
argument_list|()
argument_list|,
name|map
operator|.
name|valueEquivalence
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Segment core tests
DECL|method|testNewEntry ()
specifier|public
name|void
name|testNewEntry
parameter_list|()
block|{
for|for
control|(
name|MapMaker
name|maker
range|:
name|allWeakValueStrengthMakers
argument_list|()
control|)
block|{
name|MapMakerInternalMap
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|,
name|?
argument_list|,
name|?
argument_list|>
name|map
init|=
name|makeMap
argument_list|(
name|maker
argument_list|)
decl_stmt|;
name|Segment
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|,
name|?
argument_list|,
name|?
argument_list|>
name|segment
init|=
name|map
operator|.
name|segments
index|[
literal|0
index|]
decl_stmt|;
name|Object
name|keyOne
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|Object
name|valueOne
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|int
name|hashOne
init|=
name|map
operator|.
name|hash
argument_list|(
name|keyOne
argument_list|)
decl_stmt|;
name|InternalEntry
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|,
name|?
argument_list|>
name|entryOne
init|=
name|segment
operator|.
name|newEntryForTesting
argument_list|(
name|keyOne
argument_list|,
name|hashOne
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|WeakValueReference
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|,
name|?
argument_list|>
name|valueRefOne
init|=
name|segment
operator|.
name|newWeakValueReferenceForTesting
argument_list|(
name|entryOne
argument_list|,
name|valueOne
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
name|valueOne
argument_list|,
name|valueRefOne
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|segment
operator|.
name|setWeakValueReferenceForTesting
argument_list|(
name|entryOne
argument_list|,
name|valueRefOne
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|keyOne
argument_list|,
name|entryOne
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|hashOne
argument_list|,
name|entryOne
operator|.
name|getHash
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|entryOne
operator|.
name|getNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|valueRefOne
argument_list|,
name|segment
operator|.
name|getWeakValueReferenceForTesting
argument_list|(
name|entryOne
argument_list|)
argument_list|)
expr_stmt|;
name|Object
name|keyTwo
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|Object
name|valueTwo
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|int
name|hashTwo
init|=
name|map
operator|.
name|hash
argument_list|(
name|keyTwo
argument_list|)
decl_stmt|;
name|InternalEntry
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|,
name|?
argument_list|>
name|entryTwo
init|=
name|segment
operator|.
name|newEntryForTesting
argument_list|(
name|keyTwo
argument_list|,
name|hashTwo
argument_list|,
name|entryOne
argument_list|)
decl_stmt|;
name|WeakValueReference
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|,
name|?
argument_list|>
name|valueRefTwo
init|=
name|segment
operator|.
name|newWeakValueReferenceForTesting
argument_list|(
name|entryTwo
argument_list|,
name|valueTwo
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
name|valueTwo
argument_list|,
name|valueRefTwo
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|segment
operator|.
name|setWeakValueReferenceForTesting
argument_list|(
name|entryTwo
argument_list|,
name|valueRefTwo
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|keyTwo
argument_list|,
name|entryTwo
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|hashTwo
argument_list|,
name|entryTwo
operator|.
name|getHash
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|entryOne
argument_list|,
name|entryTwo
operator|.
name|getNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|valueRefTwo
argument_list|,
name|segment
operator|.
name|getWeakValueReferenceForTesting
argument_list|(
name|entryTwo
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testCopyEntry ()
specifier|public
name|void
name|testCopyEntry
parameter_list|()
block|{
for|for
control|(
name|MapMaker
name|maker
range|:
name|allWeakValueStrengthMakers
argument_list|()
control|)
block|{
name|MapMakerInternalMap
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|,
name|?
argument_list|,
name|?
argument_list|>
name|map
init|=
name|makeMap
argument_list|(
name|maker
argument_list|)
decl_stmt|;
name|Segment
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|,
name|?
argument_list|,
name|?
argument_list|>
name|segment
init|=
name|map
operator|.
name|segments
index|[
literal|0
index|]
decl_stmt|;
name|Object
name|keyOne
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|Object
name|valueOne
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|int
name|hashOne
init|=
name|map
operator|.
name|hash
argument_list|(
name|keyOne
argument_list|)
decl_stmt|;
name|InternalEntry
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|,
name|?
argument_list|>
name|entryOne
init|=
name|segment
operator|.
name|newEntryForTesting
argument_list|(
name|keyOne
argument_list|,
name|hashOne
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|segment
operator|.
name|setValueForTesting
argument_list|(
name|entryOne
argument_list|,
name|valueOne
argument_list|)
expr_stmt|;
name|Object
name|keyTwo
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|Object
name|valueTwo
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|int
name|hashTwo
init|=
name|map
operator|.
name|hash
argument_list|(
name|keyTwo
argument_list|)
decl_stmt|;
name|InternalEntry
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|,
name|?
argument_list|>
name|entryTwo
init|=
name|segment
operator|.
name|newEntryForTesting
argument_list|(
name|keyTwo
argument_list|,
name|hashTwo
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|segment
operator|.
name|setValueForTesting
argument_list|(
name|entryTwo
argument_list|,
name|valueTwo
argument_list|)
expr_stmt|;
name|InternalEntry
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|,
name|?
argument_list|>
name|copyOne
init|=
name|segment
operator|.
name|copyForTesting
argument_list|(
name|entryOne
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
name|keyOne
argument_list|,
name|entryOne
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|hashOne
argument_list|,
name|entryOne
operator|.
name|getHash
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|entryOne
operator|.
name|getNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|valueOne
argument_list|,
name|copyOne
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|InternalEntry
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|,
name|?
argument_list|>
name|copyTwo
init|=
name|segment
operator|.
name|copyForTesting
argument_list|(
name|entryTwo
argument_list|,
name|copyOne
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
name|keyTwo
argument_list|,
name|copyTwo
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|hashTwo
argument_list|,
name|copyTwo
operator|.
name|getHash
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|copyOne
argument_list|,
name|copyTwo
operator|.
name|getNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|valueTwo
argument_list|,
name|copyTwo
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testSegmentGetAndContains ()
specifier|public
name|void
name|testSegmentGetAndContains
parameter_list|()
block|{
name|MapMakerInternalMap
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|,
name|?
argument_list|,
name|?
argument_list|>
name|map
init|=
name|makeMap
argument_list|(
name|createMapMaker
argument_list|()
operator|.
name|concurrencyLevel
argument_list|(
literal|1
argument_list|)
operator|.
name|weakValues
argument_list|()
argument_list|)
decl_stmt|;
name|Segment
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|,
name|?
argument_list|,
name|?
argument_list|>
name|segment
init|=
name|map
operator|.
name|segments
index|[
literal|0
index|]
decl_stmt|;
comment|// TODO(fry): check recency ordering
name|Object
name|key
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|int
name|hash
init|=
name|map
operator|.
name|hash
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|Object
name|value
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|AtomicReferenceArray
argument_list|<
name|?
extends|extends
name|InternalEntry
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|,
name|?
argument_list|>
argument_list|>
name|table
init|=
name|segment
operator|.
name|table
decl_stmt|;
name|int
name|index
init|=
name|hash
operator|&
operator|(
name|table
operator|.
name|length
argument_list|()
operator|-
literal|1
operator|)
decl_stmt|;
name|InternalEntry
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|,
name|?
argument_list|>
name|entry
init|=
name|segment
operator|.
name|newEntryForTesting
argument_list|(
name|key
argument_list|,
name|hash
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|segment
operator|.
name|setValueForTesting
argument_list|(
name|entry
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|segment
operator|.
name|get
argument_list|(
name|key
argument_list|,
name|hash
argument_list|)
argument_list|)
expr_stmt|;
comment|// count == 0
name|segment
operator|.
name|setTableEntryForTesting
argument_list|(
name|index
argument_list|,
name|entry
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|segment
operator|.
name|get
argument_list|(
name|key
argument_list|,
name|hash
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|segment
operator|.
name|containsKey
argument_list|(
name|key
argument_list|,
name|hash
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|segment
operator|.
name|containsValue
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
comment|// count == 1
name|segment
operator|.
name|count
operator|++
expr_stmt|;
name|assertSame
argument_list|(
name|value
argument_list|,
name|segment
operator|.
name|get
argument_list|(
name|key
argument_list|,
name|hash
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|segment
operator|.
name|containsKey
argument_list|(
name|key
argument_list|,
name|hash
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|segment
operator|.
name|containsValue
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
comment|// don't see absent values now that count> 0
name|assertNull
argument_list|(
name|segment
operator|.
name|get
argument_list|(
operator|new
name|Object
argument_list|()
argument_list|,
name|hash
argument_list|)
argument_list|)
expr_stmt|;
comment|// null key
name|InternalEntry
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|,
name|?
argument_list|>
name|nullEntry
init|=
name|segment
operator|.
name|newEntryForTesting
argument_list|(
literal|null
argument_list|,
name|hash
argument_list|,
name|entry
argument_list|)
decl_stmt|;
name|Object
name|nullValue
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|WeakValueReference
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|,
name|?
argument_list|>
name|nullValueRef
init|=
name|segment
operator|.
name|newWeakValueReferenceForTesting
argument_list|(
name|nullEntry
argument_list|,
name|nullValue
argument_list|)
decl_stmt|;
name|segment
operator|.
name|setWeakValueReferenceForTesting
argument_list|(
name|nullEntry
argument_list|,
name|nullValueRef
argument_list|)
expr_stmt|;
name|segment
operator|.
name|setTableEntryForTesting
argument_list|(
name|index
argument_list|,
name|nullEntry
argument_list|)
expr_stmt|;
comment|// skip the null key
name|assertSame
argument_list|(
name|value
argument_list|,
name|segment
operator|.
name|get
argument_list|(
name|key
argument_list|,
name|hash
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|segment
operator|.
name|containsKey
argument_list|(
name|key
argument_list|,
name|hash
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|segment
operator|.
name|containsValue
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|segment
operator|.
name|containsValue
argument_list|(
name|nullValue
argument_list|)
argument_list|)
expr_stmt|;
comment|// hash collision
name|InternalEntry
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|,
name|?
argument_list|>
name|dummyEntry
init|=
name|segment
operator|.
name|newEntryForTesting
argument_list|(
operator|new
name|Object
argument_list|()
argument_list|,
name|hash
argument_list|,
name|entry
argument_list|)
decl_stmt|;
name|Object
name|dummyValue
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|WeakValueReference
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|,
name|?
argument_list|>
name|dummyValueRef
init|=
name|segment
operator|.
name|newWeakValueReferenceForTesting
argument_list|(
name|dummyEntry
argument_list|,
name|dummyValue
argument_list|)
decl_stmt|;
name|segment
operator|.
name|setWeakValueReferenceForTesting
argument_list|(
name|dummyEntry
argument_list|,
name|dummyValueRef
argument_list|)
expr_stmt|;
name|segment
operator|.
name|setTableEntryForTesting
argument_list|(
name|index
argument_list|,
name|dummyEntry
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|value
argument_list|,
name|segment
operator|.
name|get
argument_list|(
name|key
argument_list|,
name|hash
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|segment
operator|.
name|containsKey
argument_list|(
name|key
argument_list|,
name|hash
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|segment
operator|.
name|containsValue
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|segment
operator|.
name|containsValue
argument_list|(
name|dummyValue
argument_list|)
argument_list|)
expr_stmt|;
comment|// key collision
name|dummyEntry
operator|=
name|segment
operator|.
name|newEntryForTesting
argument_list|(
name|key
argument_list|,
name|hash
argument_list|,
name|entry
argument_list|)
expr_stmt|;
name|dummyValue
operator|=
operator|new
name|Object
argument_list|()
expr_stmt|;
name|dummyValueRef
operator|=
name|segment
operator|.
name|newWeakValueReferenceForTesting
argument_list|(
name|dummyEntry
argument_list|,
name|dummyValue
argument_list|)
expr_stmt|;
name|segment
operator|.
name|setWeakValueReferenceForTesting
argument_list|(
name|dummyEntry
argument_list|,
name|dummyValueRef
argument_list|)
expr_stmt|;
name|segment
operator|.
name|setTableEntryForTesting
argument_list|(
name|index
argument_list|,
name|dummyEntry
argument_list|)
expr_stmt|;
comment|// returns the most recent entry
name|assertSame
argument_list|(
name|dummyValue
argument_list|,
name|segment
operator|.
name|get
argument_list|(
name|key
argument_list|,
name|hash
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|segment
operator|.
name|containsKey
argument_list|(
name|key
argument_list|,
name|hash
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|segment
operator|.
name|containsValue
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|segment
operator|.
name|containsValue
argument_list|(
name|dummyValue
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testSegmentReplaceValue ()
specifier|public
name|void
name|testSegmentReplaceValue
parameter_list|()
block|{
name|MapMakerInternalMap
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|,
name|?
argument_list|,
name|?
argument_list|>
name|map
init|=
name|makeMap
argument_list|(
name|createMapMaker
argument_list|()
operator|.
name|concurrencyLevel
argument_list|(
literal|1
argument_list|)
operator|.
name|weakValues
argument_list|()
argument_list|)
decl_stmt|;
name|Segment
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|,
name|?
argument_list|,
name|?
argument_list|>
name|segment
init|=
name|map
operator|.
name|segments
index|[
literal|0
index|]
decl_stmt|;
comment|// TODO(fry): check recency ordering
name|Object
name|key
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|int
name|hash
init|=
name|map
operator|.
name|hash
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|Object
name|oldValue
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|Object
name|newValue
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|AtomicReferenceArray
argument_list|<
name|?
extends|extends
name|InternalEntry
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|,
name|?
argument_list|>
argument_list|>
name|table
init|=
name|segment
operator|.
name|table
decl_stmt|;
name|int
name|index
init|=
name|hash
operator|&
operator|(
name|table
operator|.
name|length
argument_list|()
operator|-
literal|1
operator|)
decl_stmt|;
name|InternalEntry
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|,
name|?
argument_list|>
name|entry
init|=
name|segment
operator|.
name|newEntryForTesting
argument_list|(
name|key
argument_list|,
name|hash
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|WeakValueReference
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|,
name|?
argument_list|>
name|oldValueRef
init|=
name|segment
operator|.
name|newWeakValueReferenceForTesting
argument_list|(
name|entry
argument_list|,
name|oldValue
argument_list|)
decl_stmt|;
name|segment
operator|.
name|setWeakValueReferenceForTesting
argument_list|(
name|entry
argument_list|,
name|oldValueRef
argument_list|)
expr_stmt|;
comment|// no entry
name|assertFalse
argument_list|(
name|segment
operator|.
name|replace
argument_list|(
name|key
argument_list|,
name|hash
argument_list|,
name|oldValue
argument_list|,
name|newValue
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|segment
operator|.
name|count
argument_list|)
expr_stmt|;
comment|// same value
name|segment
operator|.
name|setTableEntryForTesting
argument_list|(
name|index
argument_list|,
name|entry
argument_list|)
expr_stmt|;
name|segment
operator|.
name|count
operator|++
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|segment
operator|.
name|count
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|oldValue
argument_list|,
name|segment
operator|.
name|get
argument_list|(
name|key
argument_list|,
name|hash
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|segment
operator|.
name|replace
argument_list|(
name|key
argument_list|,
name|hash
argument_list|,
name|oldValue
argument_list|,
name|newValue
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|segment
operator|.
name|count
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|newValue
argument_list|,
name|segment
operator|.
name|get
argument_list|(
name|key
argument_list|,
name|hash
argument_list|)
argument_list|)
expr_stmt|;
comment|// different value
name|assertFalse
argument_list|(
name|segment
operator|.
name|replace
argument_list|(
name|key
argument_list|,
name|hash
argument_list|,
name|oldValue
argument_list|,
name|newValue
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|segment
operator|.
name|count
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|newValue
argument_list|,
name|segment
operator|.
name|get
argument_list|(
name|key
argument_list|,
name|hash
argument_list|)
argument_list|)
expr_stmt|;
comment|// cleared
name|segment
operator|.
name|setWeakValueReferenceForTesting
argument_list|(
name|entry
argument_list|,
name|oldValueRef
argument_list|)
expr_stmt|;
name|oldValueRef
operator|.
name|clear
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|segment
operator|.
name|replace
argument_list|(
name|key
argument_list|,
name|hash
argument_list|,
name|oldValue
argument_list|,
name|newValue
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|segment
operator|.
name|count
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|segment
operator|.
name|get
argument_list|(
name|key
argument_list|,
name|hash
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testSegmentReplace ()
specifier|public
name|void
name|testSegmentReplace
parameter_list|()
block|{
name|MapMakerInternalMap
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|,
name|?
argument_list|,
name|?
argument_list|>
name|map
init|=
name|makeMap
argument_list|(
name|createMapMaker
argument_list|()
operator|.
name|concurrencyLevel
argument_list|(
literal|1
argument_list|)
operator|.
name|weakValues
argument_list|()
argument_list|)
decl_stmt|;
name|Segment
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|,
name|?
argument_list|,
name|?
argument_list|>
name|segment
init|=
name|map
operator|.
name|segments
index|[
literal|0
index|]
decl_stmt|;
comment|// TODO(fry): check recency ordering
name|Object
name|key
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|int
name|hash
init|=
name|map
operator|.
name|hash
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|Object
name|oldValue
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|Object
name|newValue
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|AtomicReferenceArray
argument_list|<
name|?
extends|extends
name|InternalEntry
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|,
name|?
argument_list|>
argument_list|>
name|table
init|=
name|segment
operator|.
name|table
decl_stmt|;
name|int
name|index
init|=
name|hash
operator|&
operator|(
name|table
operator|.
name|length
argument_list|()
operator|-
literal|1
operator|)
decl_stmt|;
name|InternalEntry
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|,
name|?
argument_list|>
name|entry
init|=
name|segment
operator|.
name|newEntryForTesting
argument_list|(
name|key
argument_list|,
name|hash
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|WeakValueReference
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|,
name|?
argument_list|>
name|oldValueRef
init|=
name|segment
operator|.
name|newWeakValueReferenceForTesting
argument_list|(
name|entry
argument_list|,
name|oldValue
argument_list|)
decl_stmt|;
name|segment
operator|.
name|setWeakValueReferenceForTesting
argument_list|(
name|entry
argument_list|,
name|oldValueRef
argument_list|)
expr_stmt|;
comment|// no entry
name|assertNull
argument_list|(
name|segment
operator|.
name|replace
argument_list|(
name|key
argument_list|,
name|hash
argument_list|,
name|newValue
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|segment
operator|.
name|count
argument_list|)
expr_stmt|;
comment|// same key
name|segment
operator|.
name|setTableEntryForTesting
argument_list|(
name|index
argument_list|,
name|entry
argument_list|)
expr_stmt|;
name|segment
operator|.
name|count
operator|++
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|segment
operator|.
name|count
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|oldValue
argument_list|,
name|segment
operator|.
name|get
argument_list|(
name|key
argument_list|,
name|hash
argument_list|)
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|oldValue
argument_list|,
name|segment
operator|.
name|replace
argument_list|(
name|key
argument_list|,
name|hash
argument_list|,
name|newValue
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|segment
operator|.
name|count
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|newValue
argument_list|,
name|segment
operator|.
name|get
argument_list|(
name|key
argument_list|,
name|hash
argument_list|)
argument_list|)
expr_stmt|;
comment|// cleared
name|segment
operator|.
name|setWeakValueReferenceForTesting
argument_list|(
name|entry
argument_list|,
name|oldValueRef
argument_list|)
expr_stmt|;
name|oldValueRef
operator|.
name|clear
argument_list|()
expr_stmt|;
name|assertNull
argument_list|(
name|segment
operator|.
name|replace
argument_list|(
name|key
argument_list|,
name|hash
argument_list|,
name|newValue
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|segment
operator|.
name|count
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|segment
operator|.
name|get
argument_list|(
name|key
argument_list|,
name|hash
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testSegmentPut ()
specifier|public
name|void
name|testSegmentPut
parameter_list|()
block|{
name|MapMakerInternalMap
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|,
name|?
argument_list|,
name|?
argument_list|>
name|map
init|=
name|makeMap
argument_list|(
name|createMapMaker
argument_list|()
operator|.
name|concurrencyLevel
argument_list|(
literal|1
argument_list|)
operator|.
name|weakValues
argument_list|()
argument_list|)
decl_stmt|;
name|Segment
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|,
name|?
argument_list|,
name|?
argument_list|>
name|segment
init|=
name|map
operator|.
name|segments
index|[
literal|0
index|]
decl_stmt|;
comment|// TODO(fry): check recency ordering
name|Object
name|key
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|int
name|hash
init|=
name|map
operator|.
name|hash
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|Object
name|oldValue
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|Object
name|newValue
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
comment|// no entry
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|segment
operator|.
name|count
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|segment
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|hash
argument_list|,
name|oldValue
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|segment
operator|.
name|count
argument_list|)
expr_stmt|;
comment|// same key
name|assertSame
argument_list|(
name|oldValue
argument_list|,
name|segment
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|hash
argument_list|,
name|newValue
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|segment
operator|.
name|count
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|newValue
argument_list|,
name|segment
operator|.
name|get
argument_list|(
name|key
argument_list|,
name|hash
argument_list|)
argument_list|)
expr_stmt|;
comment|// cleared
name|InternalEntry
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|,
name|?
argument_list|>
name|entry
init|=
name|segment
operator|.
name|getEntry
argument_list|(
name|key
argument_list|,
name|hash
argument_list|)
decl_stmt|;
name|WeakValueReference
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|,
name|?
argument_list|>
name|oldValueRef
init|=
name|segment
operator|.
name|newWeakValueReferenceForTesting
argument_list|(
name|entry
argument_list|,
name|oldValue
argument_list|)
decl_stmt|;
name|segment
operator|.
name|setWeakValueReferenceForTesting
argument_list|(
name|entry
argument_list|,
name|oldValueRef
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|oldValue
argument_list|,
name|segment
operator|.
name|get
argument_list|(
name|key
argument_list|,
name|hash
argument_list|)
argument_list|)
expr_stmt|;
name|oldValueRef
operator|.
name|clear
argument_list|()
expr_stmt|;
name|assertNull
argument_list|(
name|segment
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|hash
argument_list|,
name|newValue
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|segment
operator|.
name|count
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|newValue
argument_list|,
name|segment
operator|.
name|get
argument_list|(
name|key
argument_list|,
name|hash
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testSegmentPutIfAbsent ()
specifier|public
name|void
name|testSegmentPutIfAbsent
parameter_list|()
block|{
name|MapMakerInternalMap
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|,
name|?
argument_list|,
name|?
argument_list|>
name|map
init|=
name|makeMap
argument_list|(
name|createMapMaker
argument_list|()
operator|.
name|concurrencyLevel
argument_list|(
literal|1
argument_list|)
operator|.
name|weakValues
argument_list|()
argument_list|)
decl_stmt|;
name|Segment
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|,
name|?
argument_list|,
name|?
argument_list|>
name|segment
init|=
name|map
operator|.
name|segments
index|[
literal|0
index|]
decl_stmt|;
comment|// TODO(fry): check recency ordering
name|Object
name|key
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|int
name|hash
init|=
name|map
operator|.
name|hash
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|Object
name|oldValue
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|Object
name|newValue
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
comment|// no entry
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|segment
operator|.
name|count
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|segment
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|hash
argument_list|,
name|oldValue
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|segment
operator|.
name|count
argument_list|)
expr_stmt|;
comment|// same key
name|assertSame
argument_list|(
name|oldValue
argument_list|,
name|segment
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|hash
argument_list|,
name|newValue
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|segment
operator|.
name|count
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|oldValue
argument_list|,
name|segment
operator|.
name|get
argument_list|(
name|key
argument_list|,
name|hash
argument_list|)
argument_list|)
expr_stmt|;
comment|// cleared
name|InternalEntry
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|,
name|?
argument_list|>
name|entry
init|=
name|segment
operator|.
name|getEntry
argument_list|(
name|key
argument_list|,
name|hash
argument_list|)
decl_stmt|;
name|WeakValueReference
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|,
name|?
argument_list|>
name|oldValueRef
init|=
name|segment
operator|.
name|newWeakValueReferenceForTesting
argument_list|(
name|entry
argument_list|,
name|oldValue
argument_list|)
decl_stmt|;
name|segment
operator|.
name|setWeakValueReferenceForTesting
argument_list|(
name|entry
argument_list|,
name|oldValueRef
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|oldValue
argument_list|,
name|segment
operator|.
name|get
argument_list|(
name|key
argument_list|,
name|hash
argument_list|)
argument_list|)
expr_stmt|;
name|oldValueRef
operator|.
name|clear
argument_list|()
expr_stmt|;
name|assertNull
argument_list|(
name|segment
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|hash
argument_list|,
name|newValue
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|segment
operator|.
name|count
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|newValue
argument_list|,
name|segment
operator|.
name|get
argument_list|(
name|key
argument_list|,
name|hash
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testSegmentPut_expand ()
specifier|public
name|void
name|testSegmentPut_expand
parameter_list|()
block|{
name|MapMakerInternalMap
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|,
name|?
argument_list|,
name|?
argument_list|>
name|map
init|=
name|makeMap
argument_list|(
name|createMapMaker
argument_list|()
operator|.
name|concurrencyLevel
argument_list|(
literal|1
argument_list|)
operator|.
name|initialCapacity
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|Segment
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|,
name|?
argument_list|,
name|?
argument_list|>
name|segment
init|=
name|map
operator|.
name|segments
index|[
literal|0
index|]
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|segment
operator|.
name|table
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|count
init|=
literal|1024
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|Object
name|key
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|Object
name|value
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|int
name|hash
init|=
name|map
operator|.
name|hash
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|segment
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|hash
argument_list|,
name|value
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|segment
operator|.
name|table
operator|.
name|length
argument_list|()
operator|>
name|i
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testSegmentRemove ()
specifier|public
name|void
name|testSegmentRemove
parameter_list|()
block|{
name|MapMakerInternalMap
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|,
name|?
argument_list|,
name|?
argument_list|>
name|map
init|=
name|makeMap
argument_list|(
name|createMapMaker
argument_list|()
operator|.
name|concurrencyLevel
argument_list|(
literal|1
argument_list|)
operator|.
name|weakValues
argument_list|()
argument_list|)
decl_stmt|;
name|Segment
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|,
name|?
argument_list|,
name|?
argument_list|>
name|segment
init|=
name|map
operator|.
name|segments
index|[
literal|0
index|]
decl_stmt|;
name|Object
name|key
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|int
name|hash
init|=
name|map
operator|.
name|hash
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|Object
name|oldValue
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|AtomicReferenceArray
argument_list|<
name|?
extends|extends
name|InternalEntry
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|,
name|?
argument_list|>
argument_list|>
name|table
init|=
name|segment
operator|.
name|table
decl_stmt|;
name|int
name|index
init|=
name|hash
operator|&
operator|(
name|table
operator|.
name|length
argument_list|()
operator|-
literal|1
operator|)
decl_stmt|;
name|InternalEntry
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|,
name|?
argument_list|>
name|entry
init|=
name|segment
operator|.
name|newEntryForTesting
argument_list|(
name|key
argument_list|,
name|hash
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|WeakValueReference
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|,
name|?
argument_list|>
name|oldValueRef
init|=
name|segment
operator|.
name|newWeakValueReferenceForTesting
argument_list|(
name|entry
argument_list|,
name|oldValue
argument_list|)
decl_stmt|;
name|segment
operator|.
name|setWeakValueReferenceForTesting
argument_list|(
name|entry
argument_list|,
name|oldValueRef
argument_list|)
expr_stmt|;
comment|// no entry
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|segment
operator|.
name|count
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|segment
operator|.
name|remove
argument_list|(
name|key
argument_list|,
name|hash
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|segment
operator|.
name|count
argument_list|)
expr_stmt|;
comment|// same key
name|segment
operator|.
name|setTableEntryForTesting
argument_list|(
name|index
argument_list|,
name|entry
argument_list|)
expr_stmt|;
name|segment
operator|.
name|count
operator|++
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|segment
operator|.
name|count
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|oldValue
argument_list|,
name|segment
operator|.
name|get
argument_list|(
name|key
argument_list|,
name|hash
argument_list|)
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|oldValue
argument_list|,
name|segment
operator|.
name|remove
argument_list|(
name|key
argument_list|,
name|hash
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|segment
operator|.
name|count
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|segment
operator|.
name|get
argument_list|(
name|key
argument_list|,
name|hash
argument_list|)
argument_list|)
expr_stmt|;
comment|// cleared
name|segment
operator|.
name|setTableEntryForTesting
argument_list|(
name|index
argument_list|,
name|entry
argument_list|)
expr_stmt|;
name|segment
operator|.
name|count
operator|++
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|segment
operator|.
name|count
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|oldValue
argument_list|,
name|segment
operator|.
name|get
argument_list|(
name|key
argument_list|,
name|hash
argument_list|)
argument_list|)
expr_stmt|;
name|oldValueRef
operator|.
name|clear
argument_list|()
expr_stmt|;
name|assertNull
argument_list|(
name|segment
operator|.
name|remove
argument_list|(
name|key
argument_list|,
name|hash
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|segment
operator|.
name|count
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|segment
operator|.
name|get
argument_list|(
name|key
argument_list|,
name|hash
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testSegmentRemoveValue ()
specifier|public
name|void
name|testSegmentRemoveValue
parameter_list|()
block|{
name|MapMakerInternalMap
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|,
name|?
argument_list|,
name|?
argument_list|>
name|map
init|=
name|makeMap
argument_list|(
name|createMapMaker
argument_list|()
operator|.
name|concurrencyLevel
argument_list|(
literal|1
argument_list|)
operator|.
name|weakValues
argument_list|()
argument_list|)
decl_stmt|;
name|Segment
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|,
name|?
argument_list|,
name|?
argument_list|>
name|segment
init|=
name|map
operator|.
name|segments
index|[
literal|0
index|]
decl_stmt|;
name|Object
name|key
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|int
name|hash
init|=
name|map
operator|.
name|hash
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|Object
name|oldValue
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|Object
name|newValue
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|AtomicReferenceArray
argument_list|<
name|?
extends|extends
name|InternalEntry
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|,
name|?
argument_list|>
argument_list|>
name|table
init|=
name|segment
operator|.
name|table
decl_stmt|;
name|int
name|index
init|=
name|hash
operator|&
operator|(
name|table
operator|.
name|length
argument_list|()
operator|-
literal|1
operator|)
decl_stmt|;
name|InternalEntry
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|,
name|?
argument_list|>
name|entry
init|=
name|segment
operator|.
name|newEntryForTesting
argument_list|(
name|key
argument_list|,
name|hash
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|WeakValueReference
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|,
name|?
argument_list|>
name|oldValueRef
init|=
name|segment
operator|.
name|newWeakValueReferenceForTesting
argument_list|(
name|entry
argument_list|,
name|oldValue
argument_list|)
decl_stmt|;
name|segment
operator|.
name|setWeakValueReferenceForTesting
argument_list|(
name|entry
argument_list|,
name|oldValueRef
argument_list|)
expr_stmt|;
comment|// no entry
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|segment
operator|.
name|count
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|segment
operator|.
name|remove
argument_list|(
name|key
argument_list|,
name|hash
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|segment
operator|.
name|count
argument_list|)
expr_stmt|;
comment|// same value
name|segment
operator|.
name|setTableEntryForTesting
argument_list|(
name|index
argument_list|,
name|entry
argument_list|)
expr_stmt|;
name|segment
operator|.
name|count
operator|++
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|segment
operator|.
name|count
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|oldValue
argument_list|,
name|segment
operator|.
name|get
argument_list|(
name|key
argument_list|,
name|hash
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|segment
operator|.
name|remove
argument_list|(
name|key
argument_list|,
name|hash
argument_list|,
name|oldValue
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|segment
operator|.
name|count
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|segment
operator|.
name|get
argument_list|(
name|key
argument_list|,
name|hash
argument_list|)
argument_list|)
expr_stmt|;
comment|// different value
name|segment
operator|.
name|setTableEntryForTesting
argument_list|(
name|index
argument_list|,
name|entry
argument_list|)
expr_stmt|;
name|segment
operator|.
name|count
operator|++
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|segment
operator|.
name|count
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|oldValue
argument_list|,
name|segment
operator|.
name|get
argument_list|(
name|key
argument_list|,
name|hash
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|segment
operator|.
name|remove
argument_list|(
name|key
argument_list|,
name|hash
argument_list|,
name|newValue
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|segment
operator|.
name|count
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|oldValue
argument_list|,
name|segment
operator|.
name|get
argument_list|(
name|key
argument_list|,
name|hash
argument_list|)
argument_list|)
expr_stmt|;
comment|// cleared
name|assertSame
argument_list|(
name|oldValue
argument_list|,
name|segment
operator|.
name|get
argument_list|(
name|key
argument_list|,
name|hash
argument_list|)
argument_list|)
expr_stmt|;
name|oldValueRef
operator|.
name|clear
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|segment
operator|.
name|remove
argument_list|(
name|key
argument_list|,
name|hash
argument_list|,
name|oldValue
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|segment
operator|.
name|count
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|segment
operator|.
name|get
argument_list|(
name|key
argument_list|,
name|hash
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"GuardedBy"
argument_list|)
DECL|method|testExpand ()
specifier|public
name|void
name|testExpand
parameter_list|()
block|{
name|MapMakerInternalMap
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|,
name|?
argument_list|,
name|?
argument_list|>
name|map
init|=
name|makeMap
argument_list|(
name|createMapMaker
argument_list|()
operator|.
name|concurrencyLevel
argument_list|(
literal|1
argument_list|)
operator|.
name|initialCapacity
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|Segment
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|,
name|?
argument_list|,
name|?
argument_list|>
name|segment
init|=
name|map
operator|.
name|segments
index|[
literal|0
index|]
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|segment
operator|.
name|table
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
comment|// manually add elements to avoid expansion
name|int
name|originalCount
init|=
literal|1024
decl_stmt|;
name|InternalEntry
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|,
name|?
argument_list|>
name|entry
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|originalCount
condition|;
name|i
operator|++
control|)
block|{
name|Object
name|key
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|Object
name|value
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|int
name|hash
init|=
name|map
operator|.
name|hash
argument_list|(
name|key
argument_list|)
decl_stmt|;
comment|// chain all entries together as we only have a single bucket
name|entry
operator|=
name|segment
operator|.
name|newEntryForTesting
argument_list|(
name|key
argument_list|,
name|hash
argument_list|,
name|entry
argument_list|)
expr_stmt|;
name|segment
operator|.
name|setValueForTesting
argument_list|(
name|entry
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
name|segment
operator|.
name|setTableEntryForTesting
argument_list|(
literal|0
argument_list|,
name|entry
argument_list|)
expr_stmt|;
name|segment
operator|.
name|count
operator|=
name|originalCount
expr_stmt|;
name|ImmutableMap
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|originalMap
init|=
name|ImmutableMap
operator|.
name|copyOf
argument_list|(
name|map
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|originalCount
argument_list|,
name|originalMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|originalMap
argument_list|,
name|map
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|originalCount
operator|*
literal|2
condition|;
name|i
operator|*=
literal|2
control|)
block|{
if|if
condition|(
name|i
operator|>
literal|1
condition|)
block|{
comment|// TODO(b/145386688): This access should be guarded by 'segment', which is not currently
comment|// held
name|segment
operator|.
name|expand
argument_list|()
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|i
argument_list|,
name|segment
operator|.
name|table
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|originalCount
argument_list|,
name|countLiveEntries
argument_list|(
name|map
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|originalCount
argument_list|,
name|segment
operator|.
name|count
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|originalMap
argument_list|,
name|map
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testRemoveFromChain ()
specifier|public
name|void
name|testRemoveFromChain
parameter_list|()
block|{
name|MapMakerInternalMap
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|,
name|?
argument_list|,
name|?
argument_list|>
name|map
init|=
name|makeMap
argument_list|(
name|createMapMaker
argument_list|()
operator|.
name|concurrencyLevel
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|Segment
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|,
name|?
argument_list|,
name|?
argument_list|>
name|segment
init|=
name|map
operator|.
name|segments
index|[
literal|0
index|]
decl_stmt|;
comment|// create 3 objects and chain them together
name|Object
name|keyOne
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|Object
name|valueOne
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|int
name|hashOne
init|=
name|map
operator|.
name|hash
argument_list|(
name|keyOne
argument_list|)
decl_stmt|;
name|InternalEntry
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|,
name|?
argument_list|>
name|entryOne
init|=
name|segment
operator|.
name|newEntryForTesting
argument_list|(
name|keyOne
argument_list|,
name|hashOne
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|segment
operator|.
name|setValueForTesting
argument_list|(
name|entryOne
argument_list|,
name|valueOne
argument_list|)
expr_stmt|;
name|Object
name|keyTwo
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|Object
name|valueTwo
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|int
name|hashTwo
init|=
name|map
operator|.
name|hash
argument_list|(
name|keyTwo
argument_list|)
decl_stmt|;
name|InternalEntry
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|,
name|?
argument_list|>
name|entryTwo
init|=
name|segment
operator|.
name|newEntryForTesting
argument_list|(
name|keyTwo
argument_list|,
name|hashTwo
argument_list|,
name|entryOne
argument_list|)
decl_stmt|;
name|segment
operator|.
name|setValueForTesting
argument_list|(
name|entryTwo
argument_list|,
name|valueTwo
argument_list|)
expr_stmt|;
name|Object
name|keyThree
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|Object
name|valueThree
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|int
name|hashThree
init|=
name|map
operator|.
name|hash
argument_list|(
name|keyThree
argument_list|)
decl_stmt|;
name|InternalEntry
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|,
name|?
argument_list|>
name|entryThree
init|=
name|segment
operator|.
name|newEntryForTesting
argument_list|(
name|keyThree
argument_list|,
name|hashThree
argument_list|,
name|entryTwo
argument_list|)
decl_stmt|;
name|segment
operator|.
name|setValueForTesting
argument_list|(
name|entryThree
argument_list|,
name|valueThree
argument_list|)
expr_stmt|;
comment|// alone
name|assertNull
argument_list|(
name|segment
operator|.
name|removeFromChainForTesting
argument_list|(
name|entryOne
argument_list|,
name|entryOne
argument_list|)
argument_list|)
expr_stmt|;
comment|// head
name|assertSame
argument_list|(
name|entryOne
argument_list|,
name|segment
operator|.
name|removeFromChainForTesting
argument_list|(
name|entryTwo
argument_list|,
name|entryTwo
argument_list|)
argument_list|)
expr_stmt|;
comment|// middle
name|InternalEntry
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|,
name|?
argument_list|>
name|newFirst
init|=
name|segment
operator|.
name|removeFromChainForTesting
argument_list|(
name|entryThree
argument_list|,
name|entryTwo
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
name|keyThree
argument_list|,
name|newFirst
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|valueThree
argument_list|,
name|newFirst
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|hashThree
argument_list|,
name|newFirst
operator|.
name|getHash
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|entryOne
argument_list|,
name|newFirst
operator|.
name|getNext
argument_list|()
argument_list|)
expr_stmt|;
comment|// tail (remaining entries are copied in reverse order)
name|newFirst
operator|=
name|segment
operator|.
name|removeFromChainForTesting
argument_list|(
name|entryThree
argument_list|,
name|entryOne
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|keyTwo
argument_list|,
name|newFirst
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|valueTwo
argument_list|,
name|newFirst
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|hashTwo
argument_list|,
name|newFirst
operator|.
name|getHash
argument_list|()
argument_list|)
expr_stmt|;
name|newFirst
operator|=
name|newFirst
operator|.
name|getNext
argument_list|()
expr_stmt|;
name|assertSame
argument_list|(
name|keyThree
argument_list|,
name|newFirst
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|valueThree
argument_list|,
name|newFirst
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|hashThree
argument_list|,
name|newFirst
operator|.
name|getHash
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|newFirst
operator|.
name|getNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"GuardedBy"
argument_list|)
DECL|method|testExpand_cleanup ()
specifier|public
name|void
name|testExpand_cleanup
parameter_list|()
block|{
name|MapMakerInternalMap
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|,
name|?
argument_list|,
name|?
argument_list|>
name|map
init|=
name|makeMap
argument_list|(
name|createMapMaker
argument_list|()
operator|.
name|concurrencyLevel
argument_list|(
literal|1
argument_list|)
operator|.
name|initialCapacity
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|Segment
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|,
name|?
argument_list|,
name|?
argument_list|>
name|segment
init|=
name|map
operator|.
name|segments
index|[
literal|0
index|]
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|segment
operator|.
name|table
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
comment|// manually add elements to avoid expansion
comment|// 1/3 null keys, 1/3 null values
name|int
name|originalCount
init|=
literal|1024
decl_stmt|;
name|InternalEntry
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|,
name|?
argument_list|>
name|entry
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|originalCount
condition|;
name|i
operator|++
control|)
block|{
name|Object
name|key
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|Object
name|value
init|=
operator|(
name|i
operator|%
literal|3
operator|==
literal|0
operator|)
condition|?
literal|null
else|:
operator|new
name|Object
argument_list|()
decl_stmt|;
name|int
name|hash
init|=
name|map
operator|.
name|hash
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|%
literal|3
operator|==
literal|1
condition|)
block|{
name|key
operator|=
literal|null
expr_stmt|;
block|}
comment|// chain all entries together as we only have a single bucket
name|entry
operator|=
name|segment
operator|.
name|newEntryForTesting
argument_list|(
name|key
argument_list|,
name|hash
argument_list|,
name|entry
argument_list|)
expr_stmt|;
name|segment
operator|.
name|setValueForTesting
argument_list|(
name|entry
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
name|segment
operator|.
name|setTableEntryForTesting
argument_list|(
literal|0
argument_list|,
name|entry
argument_list|)
expr_stmt|;
name|segment
operator|.
name|count
operator|=
name|originalCount
expr_stmt|;
name|int
name|liveCount
init|=
name|originalCount
operator|/
literal|3
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|segment
operator|.
name|table
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|liveCount
argument_list|,
name|countLiveEntries
argument_list|(
name|map
argument_list|)
argument_list|)
expr_stmt|;
name|ImmutableMap
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|originalMap
init|=
name|ImmutableMap
operator|.
name|copyOf
argument_list|(
name|map
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|liveCount
argument_list|,
name|originalMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// can't compare map contents until cleanup occurs
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|originalCount
operator|*
literal|2
condition|;
name|i
operator|*=
literal|2
control|)
block|{
if|if
condition|(
name|i
operator|>
literal|1
condition|)
block|{
comment|// TODO(b/145386688): This access should be guarded by 'segment', which is not currently
comment|// held
name|segment
operator|.
name|expand
argument_list|()
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|i
argument_list|,
name|segment
operator|.
name|table
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|liveCount
argument_list|,
name|countLiveEntries
argument_list|(
name|map
argument_list|)
argument_list|)
expr_stmt|;
comment|// expansion cleanup is sloppy, with a goal of avoiding unnecessary copies
name|assertTrue
argument_list|(
name|segment
operator|.
name|count
operator|>=
name|liveCount
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|segment
operator|.
name|count
operator|<=
name|originalCount
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|originalMap
argument_list|,
name|ImmutableMap
operator|.
name|copyOf
argument_list|(
name|map
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|countLiveEntries (MapMakerInternalMap<K, V, ?, ?> map)
specifier|private
specifier|static
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
name|int
name|countLiveEntries
parameter_list|(
name|MapMakerInternalMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|,
name|?
argument_list|,
name|?
argument_list|>
name|map
parameter_list|)
block|{
name|int
name|result
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Segment
argument_list|<
name|K
argument_list|,
name|V
argument_list|,
name|?
argument_list|,
name|?
argument_list|>
name|segment
range|:
name|map
operator|.
name|segments
control|)
block|{
name|AtomicReferenceArray
argument_list|<
name|?
extends|extends
name|InternalEntry
argument_list|<
name|K
argument_list|,
name|V
argument_list|,
name|?
argument_list|>
argument_list|>
name|table
init|=
name|segment
operator|.
name|table
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|table
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
for|for
control|(
name|InternalEntry
argument_list|<
name|K
argument_list|,
name|V
argument_list|,
name|?
argument_list|>
name|e
init|=
name|table
operator|.
name|get
argument_list|(
name|i
argument_list|)
init|;
name|e
operator|!=
literal|null
condition|;
name|e
operator|=
name|e
operator|.
name|getNext
argument_list|()
control|)
block|{
if|if
condition|(
name|map
operator|.
name|isLiveForTesting
argument_list|(
name|e
argument_list|)
condition|)
block|{
name|result
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
name|result
return|;
block|}
DECL|method|testClear ()
specifier|public
name|void
name|testClear
parameter_list|()
block|{
name|MapMakerInternalMap
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|,
name|?
argument_list|,
name|?
argument_list|>
name|map
init|=
name|makeMap
argument_list|(
name|createMapMaker
argument_list|()
operator|.
name|concurrencyLevel
argument_list|(
literal|1
argument_list|)
operator|.
name|initialCapacity
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|Segment
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|,
name|?
argument_list|,
name|?
argument_list|>
name|segment
init|=
name|map
operator|.
name|segments
index|[
literal|0
index|]
decl_stmt|;
name|AtomicReferenceArray
argument_list|<
name|?
extends|extends
name|InternalEntry
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|,
name|?
argument_list|>
argument_list|>
name|table
init|=
name|segment
operator|.
name|table
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|table
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|Object
name|key
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|Object
name|value
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|int
name|hash
init|=
name|map
operator|.
name|hash
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|InternalEntry
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|,
name|?
argument_list|>
name|entry
init|=
name|segment
operator|.
name|newEntryForTesting
argument_list|(
name|key
argument_list|,
name|hash
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|segment
operator|.
name|setValueForTesting
argument_list|(
name|entry
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|segment
operator|.
name|setTableEntryForTesting
argument_list|(
literal|0
argument_list|,
name|entry
argument_list|)
expr_stmt|;
name|segment
operator|.
name|readCount
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
name|segment
operator|.
name|count
operator|=
literal|1
expr_stmt|;
name|assertSame
argument_list|(
name|entry
argument_list|,
name|table
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|segment
operator|.
name|clear
argument_list|()
expr_stmt|;
name|assertNull
argument_list|(
name|table
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|segment
operator|.
name|readCount
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|segment
operator|.
name|count
argument_list|)
expr_stmt|;
block|}
DECL|method|testRemoveEntry ()
specifier|public
name|void
name|testRemoveEntry
parameter_list|()
block|{
name|MapMakerInternalMap
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|,
name|?
argument_list|,
name|?
argument_list|>
name|map
init|=
name|makeMap
argument_list|(
name|createMapMaker
argument_list|()
operator|.
name|concurrencyLevel
argument_list|(
literal|1
argument_list|)
operator|.
name|initialCapacity
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|Segment
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|,
name|?
argument_list|,
name|?
argument_list|>
name|segment
init|=
name|map
operator|.
name|segments
index|[
literal|0
index|]
decl_stmt|;
name|AtomicReferenceArray
argument_list|<
name|?
extends|extends
name|InternalEntry
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|,
name|?
argument_list|>
argument_list|>
name|table
init|=
name|segment
operator|.
name|table
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|table
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|Object
name|key
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|Object
name|value
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|int
name|hash
init|=
name|map
operator|.
name|hash
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|InternalEntry
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|,
name|?
argument_list|>
name|entry
init|=
name|segment
operator|.
name|newEntryForTesting
argument_list|(
name|key
argument_list|,
name|hash
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|segment
operator|.
name|setValueForTesting
argument_list|(
name|entry
argument_list|,
name|value
argument_list|)
expr_stmt|;
comment|// remove absent
name|assertFalse
argument_list|(
name|segment
operator|.
name|removeTableEntryForTesting
argument_list|(
name|entry
argument_list|)
argument_list|)
expr_stmt|;
name|segment
operator|.
name|setTableEntryForTesting
argument_list|(
literal|0
argument_list|,
name|entry
argument_list|)
expr_stmt|;
name|segment
operator|.
name|count
operator|=
literal|1
expr_stmt|;
name|assertTrue
argument_list|(
name|segment
operator|.
name|removeTableEntryForTesting
argument_list|(
name|entry
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|segment
operator|.
name|count
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|table
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testClearValue ()
specifier|public
name|void
name|testClearValue
parameter_list|()
block|{
name|MapMakerInternalMap
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|,
name|?
argument_list|,
name|?
argument_list|>
name|map
init|=
name|makeMap
argument_list|(
name|createMapMaker
argument_list|()
operator|.
name|concurrencyLevel
argument_list|(
literal|1
argument_list|)
operator|.
name|initialCapacity
argument_list|(
literal|1
argument_list|)
operator|.
name|weakValues
argument_list|()
argument_list|)
decl_stmt|;
name|Segment
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|,
name|?
argument_list|,
name|?
argument_list|>
name|segment
init|=
name|map
operator|.
name|segments
index|[
literal|0
index|]
decl_stmt|;
name|AtomicReferenceArray
argument_list|<
name|?
extends|extends
name|InternalEntry
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|,
name|?
argument_list|>
argument_list|>
name|table
init|=
name|segment
operator|.
name|table
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|table
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|Object
name|key
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|Object
name|value
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|int
name|hash
init|=
name|map
operator|.
name|hash
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|InternalEntry
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|,
name|?
argument_list|>
name|entry
init|=
name|segment
operator|.
name|newEntryForTesting
argument_list|(
name|key
argument_list|,
name|hash
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|segment
operator|.
name|setValueForTesting
argument_list|(
name|entry
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|WeakValueReference
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|,
name|?
argument_list|>
name|valueRef
init|=
name|segment
operator|.
name|getWeakValueReferenceForTesting
argument_list|(
name|entry
argument_list|)
decl_stmt|;
comment|// clear absent
name|assertFalse
argument_list|(
name|segment
operator|.
name|clearValueForTesting
argument_list|(
name|key
argument_list|,
name|hash
argument_list|,
name|valueRef
argument_list|)
argument_list|)
expr_stmt|;
name|segment
operator|.
name|setTableEntryForTesting
argument_list|(
literal|0
argument_list|,
name|entry
argument_list|)
expr_stmt|;
comment|// don't increment count; this is used during computation
name|assertTrue
argument_list|(
name|segment
operator|.
name|clearValueForTesting
argument_list|(
name|key
argument_list|,
name|hash
argument_list|,
name|valueRef
argument_list|)
argument_list|)
expr_stmt|;
comment|// no notification sent with clearValue
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|segment
operator|.
name|count
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|table
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
comment|// clear wrong value reference
name|segment
operator|.
name|setTableEntryForTesting
argument_list|(
literal|0
argument_list|,
name|entry
argument_list|)
expr_stmt|;
name|WeakValueReference
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|,
name|?
argument_list|>
name|otherValueRef
init|=
name|segment
operator|.
name|newWeakValueReferenceForTesting
argument_list|(
name|entry
argument_list|,
name|value
argument_list|)
decl_stmt|;
name|segment
operator|.
name|setWeakValueReferenceForTesting
argument_list|(
name|entry
argument_list|,
name|otherValueRef
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|segment
operator|.
name|clearValueForTesting
argument_list|(
name|key
argument_list|,
name|hash
argument_list|,
name|valueRef
argument_list|)
argument_list|)
expr_stmt|;
name|segment
operator|.
name|setWeakValueReferenceForTesting
argument_list|(
name|entry
argument_list|,
name|valueRef
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|segment
operator|.
name|clearValueForTesting
argument_list|(
name|key
argument_list|,
name|hash
argument_list|,
name|valueRef
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// reference queues
DECL|method|testDrainKeyReferenceQueueOnWrite ()
specifier|public
name|void
name|testDrainKeyReferenceQueueOnWrite
parameter_list|()
block|{
for|for
control|(
name|MapMaker
name|maker
range|:
name|allWeakKeyStrengthMakers
argument_list|()
control|)
block|{
name|MapMakerInternalMap
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|,
name|?
argument_list|,
name|?
argument_list|>
name|map
init|=
name|makeMap
argument_list|(
name|maker
operator|.
name|concurrencyLevel
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|maker
operator|.
name|getKeyStrength
argument_list|()
operator|==
name|Strength
operator|.
name|WEAK
condition|)
block|{
name|Segment
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|,
name|?
argument_list|,
name|?
argument_list|>
name|segment
init|=
name|map
operator|.
name|segments
index|[
literal|0
index|]
decl_stmt|;
name|Object
name|keyOne
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|int
name|hashOne
init|=
name|map
operator|.
name|hash
argument_list|(
name|keyOne
argument_list|)
decl_stmt|;
name|Object
name|valueOne
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|Object
name|keyTwo
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|Object
name|valueTwo
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
name|keyOne
argument_list|,
name|valueOne
argument_list|)
expr_stmt|;
name|InternalEntry
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|,
name|?
argument_list|>
name|entry
init|=
name|segment
operator|.
name|getEntry
argument_list|(
name|keyOne
argument_list|,
name|hashOne
argument_list|)
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Reference
argument_list|<
name|Object
argument_list|>
name|reference
init|=
operator|(
name|Reference
argument_list|<
name|Object
argument_list|>
operator|)
name|entry
decl_stmt|;
name|reference
operator|.
name|enqueue
argument_list|()
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|keyTwo
argument_list|,
name|valueTwo
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|map
operator|.
name|containsKey
argument_list|(
name|keyOne
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|map
operator|.
name|containsValue
argument_list|(
name|valueOne
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|map
operator|.
name|get
argument_list|(
name|keyOne
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|map
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|segment
operator|.
name|getKeyReferenceQueueForTesting
argument_list|()
operator|.
name|poll
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|testDrainValueReferenceQueueOnWrite ()
specifier|public
name|void
name|testDrainValueReferenceQueueOnWrite
parameter_list|()
block|{
for|for
control|(
name|MapMaker
name|maker
range|:
name|allWeakValueStrengthMakers
argument_list|()
control|)
block|{
name|MapMakerInternalMap
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|,
name|?
argument_list|,
name|?
argument_list|>
name|map
init|=
name|makeMap
argument_list|(
name|maker
operator|.
name|concurrencyLevel
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|maker
operator|.
name|getValueStrength
argument_list|()
operator|==
name|Strength
operator|.
name|WEAK
condition|)
block|{
name|Segment
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|,
name|?
argument_list|,
name|?
argument_list|>
name|segment
init|=
name|map
operator|.
name|segments
index|[
literal|0
index|]
decl_stmt|;
name|Object
name|keyOne
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|int
name|hashOne
init|=
name|map
operator|.
name|hash
argument_list|(
name|keyOne
argument_list|)
decl_stmt|;
name|Object
name|valueOne
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|Object
name|keyTwo
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|Object
name|valueTwo
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
name|keyOne
argument_list|,
name|valueOne
argument_list|)
expr_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|WeakValueEntry
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|,
name|?
argument_list|>
name|entry
init|=
operator|(
name|WeakValueEntry
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|,
name|?
argument_list|>
operator|)
name|segment
operator|.
name|getEntry
argument_list|(
name|keyOne
argument_list|,
name|hashOne
argument_list|)
decl_stmt|;
name|WeakValueReference
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|,
name|?
argument_list|>
name|valueReference
init|=
name|entry
operator|.
name|getValueReference
argument_list|()
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Reference
argument_list|<
name|Object
argument_list|>
name|reference
init|=
operator|(
name|Reference
argument_list|<
name|Object
argument_list|>
operator|)
name|valueReference
decl_stmt|;
name|reference
operator|.
name|enqueue
argument_list|()
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|keyTwo
argument_list|,
name|valueTwo
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|map
operator|.
name|containsKey
argument_list|(
name|keyOne
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|map
operator|.
name|containsValue
argument_list|(
name|valueOne
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|map
operator|.
name|get
argument_list|(
name|keyOne
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|map
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|segment
operator|.
name|getValueReferenceQueueForTesting
argument_list|()
operator|.
name|poll
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|testDrainKeyReferenceQueueOnRead ()
specifier|public
name|void
name|testDrainKeyReferenceQueueOnRead
parameter_list|()
block|{
for|for
control|(
name|MapMaker
name|maker
range|:
name|allWeakKeyStrengthMakers
argument_list|()
control|)
block|{
name|MapMakerInternalMap
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|,
name|?
argument_list|,
name|?
argument_list|>
name|map
init|=
name|makeMap
argument_list|(
name|maker
operator|.
name|concurrencyLevel
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|maker
operator|.
name|getKeyStrength
argument_list|()
operator|==
name|Strength
operator|.
name|WEAK
condition|)
block|{
name|Segment
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|,
name|?
argument_list|,
name|?
argument_list|>
name|segment
init|=
name|map
operator|.
name|segments
index|[
literal|0
index|]
decl_stmt|;
name|Object
name|keyOne
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|int
name|hashOne
init|=
name|map
operator|.
name|hash
argument_list|(
name|keyOne
argument_list|)
decl_stmt|;
name|Object
name|valueOne
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|Object
name|keyTwo
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
name|keyOne
argument_list|,
name|valueOne
argument_list|)
expr_stmt|;
name|InternalEntry
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|,
name|?
argument_list|>
name|entry
init|=
name|segment
operator|.
name|getEntry
argument_list|(
name|keyOne
argument_list|,
name|hashOne
argument_list|)
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Reference
argument_list|<
name|Object
argument_list|>
name|reference
init|=
operator|(
name|Reference
argument_list|<
name|Object
argument_list|>
operator|)
name|entry
decl_stmt|;
name|reference
operator|.
name|enqueue
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|SMALL_MAX_SIZE
condition|;
name|i
operator|++
control|)
block|{
name|Object
name|unused
init|=
name|map
operator|.
name|get
argument_list|(
name|keyTwo
argument_list|)
decl_stmt|;
block|}
name|assertFalse
argument_list|(
name|map
operator|.
name|containsKey
argument_list|(
name|keyOne
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|map
operator|.
name|containsValue
argument_list|(
name|valueOne
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|map
operator|.
name|get
argument_list|(
name|keyOne
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|map
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|segment
operator|.
name|getKeyReferenceQueueForTesting
argument_list|()
operator|.
name|poll
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|testDrainValueReferenceQueueOnRead ()
specifier|public
name|void
name|testDrainValueReferenceQueueOnRead
parameter_list|()
block|{
for|for
control|(
name|MapMaker
name|maker
range|:
name|allWeakValueStrengthMakers
argument_list|()
control|)
block|{
name|MapMakerInternalMap
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|,
name|?
argument_list|,
name|?
argument_list|>
name|map
init|=
name|makeMap
argument_list|(
name|maker
operator|.
name|concurrencyLevel
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|maker
operator|.
name|getValueStrength
argument_list|()
operator|==
name|Strength
operator|.
name|WEAK
condition|)
block|{
name|Segment
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|,
name|?
argument_list|,
name|?
argument_list|>
name|segment
init|=
name|map
operator|.
name|segments
index|[
literal|0
index|]
decl_stmt|;
name|Object
name|keyOne
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|int
name|hashOne
init|=
name|map
operator|.
name|hash
argument_list|(
name|keyOne
argument_list|)
decl_stmt|;
name|Object
name|valueOne
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|Object
name|keyTwo
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
name|keyOne
argument_list|,
name|valueOne
argument_list|)
expr_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|WeakValueEntry
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|,
name|?
argument_list|>
name|entry
init|=
operator|(
name|WeakValueEntry
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|,
name|?
argument_list|>
operator|)
name|segment
operator|.
name|getEntry
argument_list|(
name|keyOne
argument_list|,
name|hashOne
argument_list|)
decl_stmt|;
name|WeakValueReference
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|,
name|?
argument_list|>
name|valueReference
init|=
name|entry
operator|.
name|getValueReference
argument_list|()
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Reference
argument_list|<
name|Object
argument_list|>
name|reference
init|=
operator|(
name|Reference
argument_list|<
name|Object
argument_list|>
operator|)
name|valueReference
decl_stmt|;
name|reference
operator|.
name|enqueue
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|SMALL_MAX_SIZE
condition|;
name|i
operator|++
control|)
block|{
name|Object
name|unused
init|=
name|map
operator|.
name|get
argument_list|(
name|keyTwo
argument_list|)
decl_stmt|;
block|}
name|assertFalse
argument_list|(
name|map
operator|.
name|containsKey
argument_list|(
name|keyOne
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|map
operator|.
name|containsValue
argument_list|(
name|valueOne
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|map
operator|.
name|get
argument_list|(
name|keyOne
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|map
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|segment
operator|.
name|getValueReferenceQueueForTesting
argument_list|()
operator|.
name|poll
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// utility methods
DECL|method|allWeakKeyStrengthMakers ()
specifier|private
specifier|static
name|Iterable
argument_list|<
name|MapMaker
argument_list|>
name|allWeakKeyStrengthMakers
parameter_list|()
block|{
return|return
name|ImmutableList
operator|.
name|of
argument_list|(
name|createMapMaker
argument_list|()
operator|.
name|weakKeys
argument_list|()
argument_list|,
name|createMapMaker
argument_list|()
operator|.
name|weakKeys
argument_list|()
operator|.
name|weakValues
argument_list|()
argument_list|)
return|;
block|}
DECL|method|allWeakValueStrengthMakers ()
specifier|private
specifier|static
name|Iterable
argument_list|<
name|MapMaker
argument_list|>
name|allWeakValueStrengthMakers
parameter_list|()
block|{
return|return
name|ImmutableList
operator|.
name|of
argument_list|(
name|createMapMaker
argument_list|()
operator|.
name|weakValues
argument_list|()
argument_list|,
name|createMapMaker
argument_list|()
operator|.
name|weakKeys
argument_list|()
operator|.
name|weakValues
argument_list|()
argument_list|)
return|;
block|}
DECL|method|testNullParameters ()
specifier|public
name|void
name|testNullParameters
parameter_list|()
throws|throws
name|Exception
block|{
name|NullPointerTester
name|tester
init|=
operator|new
name|NullPointerTester
argument_list|()
decl_stmt|;
name|tester
operator|.
name|testAllPublicInstanceMethods
argument_list|(
name|makeMap
argument_list|(
name|createMapMaker
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

