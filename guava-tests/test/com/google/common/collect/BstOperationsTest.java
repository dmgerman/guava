begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2011 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except  * in compliance with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software distributed under the  * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either  * express or implied. See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.collect
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|BstSide
operator|.
name|LEFT
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|BstTesting
operator|.
name|assertInOrderTraversalIs
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|BstTesting
operator|.
name|balancePolicy
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|BstTesting
operator|.
name|defaultNullPointerTester
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|BstTesting
operator|.
name|extension
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|BstTesting
operator|.
name|nodeFactory
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|BstTesting
operator|.
name|pathFactory
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|easymock
operator|.
name|EasyMock
operator|.
name|eq
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|easymock
operator|.
name|EasyMock
operator|.
name|expect
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|easymock
operator|.
name|EasyMock
operator|.
name|isNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|easymock
operator|.
name|EasyMock
operator|.
name|replay
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|easymock
operator|.
name|EasyMock
operator|.
name|reportMatcher
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|easymock
operator|.
name|EasyMock
operator|.
name|same
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|easymock
operator|.
name|EasyMock
operator|.
name|verify
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtCompatible
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtIncompatible
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|BstModificationResult
operator|.
name|ModificationType
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|BstTesting
operator|.
name|SimpleNode
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|easymock
operator|.
name|EasyMock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|easymock
operator|.
name|IArgumentMatcher
import|;
end_import

begin_comment
comment|/**  * Tests for {@code BstOperations}.  *  * @author Louis Wasserman  */
end_comment

begin_class
annotation|@
name|GwtCompatible
argument_list|(
name|emulated
operator|=
literal|true
argument_list|)
DECL|class|BstOperationsTest
specifier|public
class|class
name|BstOperationsTest
extends|extends
name|TestCase
block|{
DECL|method|testSeek1 ()
specifier|public
name|void
name|testSeek1
parameter_list|()
block|{
comment|//    d
comment|//   / \
comment|//  b   f
comment|// /     \
comment|// a     g
name|SimpleNode
name|a
init|=
operator|new
name|SimpleNode
argument_list|(
literal|'a'
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|SimpleNode
name|b
init|=
operator|new
name|SimpleNode
argument_list|(
literal|'b'
argument_list|,
name|a
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|SimpleNode
name|g
init|=
operator|new
name|SimpleNode
argument_list|(
literal|'g'
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|SimpleNode
name|f
init|=
operator|new
name|SimpleNode
argument_list|(
literal|'f'
argument_list|,
literal|null
argument_list|,
name|g
argument_list|)
decl_stmt|;
name|SimpleNode
name|d
init|=
operator|new
name|SimpleNode
argument_list|(
literal|'d'
argument_list|,
name|b
argument_list|,
name|f
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|a
argument_list|,
name|BstOperations
operator|.
name|seek
argument_list|(
name|Ordering
operator|.
name|natural
argument_list|()
argument_list|,
name|d
argument_list|,
literal|'a'
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|b
argument_list|,
name|BstOperations
operator|.
name|seek
argument_list|(
name|Ordering
operator|.
name|natural
argument_list|()
argument_list|,
name|d
argument_list|,
literal|'b'
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|BstOperations
operator|.
name|seek
argument_list|(
name|Ordering
operator|.
name|natural
argument_list|()
argument_list|,
name|d
argument_list|,
literal|'c'
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|d
argument_list|,
name|BstOperations
operator|.
name|seek
argument_list|(
name|Ordering
operator|.
name|natural
argument_list|()
argument_list|,
name|d
argument_list|,
literal|'d'
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|BstOperations
operator|.
name|seek
argument_list|(
name|Ordering
operator|.
name|natural
argument_list|()
argument_list|,
name|d
argument_list|,
literal|'e'
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|f
argument_list|,
name|BstOperations
operator|.
name|seek
argument_list|(
name|Ordering
operator|.
name|natural
argument_list|()
argument_list|,
name|d
argument_list|,
literal|'f'
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|g
argument_list|,
name|BstOperations
operator|.
name|seek
argument_list|(
name|Ordering
operator|.
name|natural
argument_list|()
argument_list|,
name|d
argument_list|,
literal|'g'
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testSeek2 ()
specifier|public
name|void
name|testSeek2
parameter_list|()
block|{
comment|//    d
comment|//   / \
comment|//  b   f
comment|//   \ /
comment|//   c e
name|SimpleNode
name|c
init|=
operator|new
name|SimpleNode
argument_list|(
literal|'c'
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|SimpleNode
name|b
init|=
operator|new
name|SimpleNode
argument_list|(
literal|'b'
argument_list|,
literal|null
argument_list|,
name|c
argument_list|)
decl_stmt|;
name|SimpleNode
name|e
init|=
operator|new
name|SimpleNode
argument_list|(
literal|'e'
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|SimpleNode
name|f
init|=
operator|new
name|SimpleNode
argument_list|(
literal|'f'
argument_list|,
name|e
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|SimpleNode
name|d
init|=
operator|new
name|SimpleNode
argument_list|(
literal|'d'
argument_list|,
name|b
argument_list|,
name|f
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|BstOperations
operator|.
name|seek
argument_list|(
name|Ordering
operator|.
name|natural
argument_list|()
argument_list|,
name|d
argument_list|,
literal|'a'
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|b
argument_list|,
name|BstOperations
operator|.
name|seek
argument_list|(
name|Ordering
operator|.
name|natural
argument_list|()
argument_list|,
name|d
argument_list|,
literal|'b'
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|c
argument_list|,
name|BstOperations
operator|.
name|seek
argument_list|(
name|Ordering
operator|.
name|natural
argument_list|()
argument_list|,
name|d
argument_list|,
literal|'c'
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|d
argument_list|,
name|BstOperations
operator|.
name|seek
argument_list|(
name|Ordering
operator|.
name|natural
argument_list|()
argument_list|,
name|d
argument_list|,
literal|'d'
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|e
argument_list|,
name|BstOperations
operator|.
name|seek
argument_list|(
name|Ordering
operator|.
name|natural
argument_list|()
argument_list|,
name|d
argument_list|,
literal|'e'
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|f
argument_list|,
name|BstOperations
operator|.
name|seek
argument_list|(
name|Ordering
operator|.
name|natural
argument_list|()
argument_list|,
name|d
argument_list|,
literal|'f'
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|BstOperations
operator|.
name|seek
argument_list|(
name|Ordering
operator|.
name|natural
argument_list|()
argument_list|,
name|d
argument_list|,
literal|'g'
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
argument_list|(
literal|"EasyMock"
argument_list|)
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|testModifyInsertAbsentNode ()
specifier|public
name|void
name|testModifyInsertAbsentNode
parameter_list|()
block|{
comment|//    d
comment|//   / \
comment|//  b   f
comment|// /     \
comment|// a     g
name|SimpleNode
name|a
init|=
operator|new
name|SimpleNode
argument_list|(
literal|'a'
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|SimpleNode
name|b
init|=
operator|new
name|SimpleNode
argument_list|(
literal|'b'
argument_list|,
name|a
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|SimpleNode
name|g
init|=
operator|new
name|SimpleNode
argument_list|(
literal|'g'
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|SimpleNode
name|f
init|=
operator|new
name|SimpleNode
argument_list|(
literal|'f'
argument_list|,
literal|null
argument_list|,
name|g
argument_list|)
decl_stmt|;
name|SimpleNode
name|d
init|=
operator|new
name|SimpleNode
argument_list|(
literal|'d'
argument_list|,
name|b
argument_list|,
name|f
argument_list|)
decl_stmt|;
name|BstNodeFactory
argument_list|<
name|SimpleNode
argument_list|>
name|nodeFactory
init|=
name|EasyMock
operator|.
name|createStrictMock
argument_list|(
name|BstNodeFactory
operator|.
name|class
argument_list|)
decl_stmt|;
name|BstBalancePolicy
argument_list|<
name|SimpleNode
argument_list|>
name|balancePolicy
init|=
name|EasyMock
operator|.
name|createStrictMock
argument_list|(
name|BstBalancePolicy
operator|.
name|class
argument_list|)
decl_stmt|;
name|BstModifier
argument_list|<
name|Character
argument_list|,
name|SimpleNode
argument_list|>
name|modifier
init|=
name|EasyMock
operator|.
name|createStrictMock
argument_list|(
name|BstModifier
operator|.
name|class
argument_list|)
decl_stmt|;
name|SimpleNode
name|c
init|=
operator|new
name|SimpleNode
argument_list|(
literal|'c'
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|expect
argument_list|(
name|modifier
operator|.
name|modify
argument_list|(
name|eq
argument_list|(
literal|'c'
argument_list|)
argument_list|,
operator|(
name|SimpleNode
operator|)
name|isNull
argument_list|()
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|BstModificationResult
operator|.
name|rebalancingChange
argument_list|(
literal|null
argument_list|,
name|c
argument_list|)
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|balancePolicy
operator|.
name|balance
argument_list|(
name|same
argument_list|(
name|nodeFactory
argument_list|)
argument_list|,
name|same
argument_list|(
name|c
argument_list|)
argument_list|,
operator|(
name|SimpleNode
operator|)
name|isNull
argument_list|()
argument_list|,
operator|(
name|SimpleNode
operator|)
name|isNull
argument_list|()
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|c
argument_list|)
operator|.
name|times
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|SimpleNode
name|bWithC
init|=
operator|new
name|SimpleNode
argument_list|(
literal|'b'
argument_list|,
name|a
argument_list|,
name|c
argument_list|)
decl_stmt|;
name|expectPossibleEntryfication
argument_list|(
name|nodeFactory
argument_list|,
name|b
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|balancePolicy
operator|.
name|balance
argument_list|(
name|same
argument_list|(
name|nodeFactory
argument_list|)
argument_list|,
name|withKey
argument_list|(
literal|'b'
argument_list|)
argument_list|,
name|same
argument_list|(
name|a
argument_list|)
argument_list|,
name|withKey
argument_list|(
literal|'c'
argument_list|)
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|bWithC
argument_list|)
expr_stmt|;
name|SimpleNode
name|dWithBWithC
init|=
operator|new
name|SimpleNode
argument_list|(
literal|'d'
argument_list|,
name|bWithC
argument_list|,
name|f
argument_list|)
decl_stmt|;
name|expectPossibleEntryfication
argument_list|(
name|nodeFactory
argument_list|,
name|d
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|balancePolicy
operator|.
name|balance
argument_list|(
name|same
argument_list|(
name|nodeFactory
argument_list|)
argument_list|,
name|withKey
argument_list|(
literal|'d'
argument_list|)
argument_list|,
name|same
argument_list|(
name|bWithC
argument_list|)
argument_list|,
name|same
argument_list|(
name|f
argument_list|)
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|dWithBWithC
argument_list|)
expr_stmt|;
name|replay
argument_list|(
name|nodeFactory
argument_list|,
name|balancePolicy
argument_list|,
name|modifier
argument_list|)
expr_stmt|;
name|BstMutationRule
argument_list|<
name|Character
argument_list|,
name|SimpleNode
argument_list|>
name|mutationRule
init|=
name|BstMutationRule
operator|.
name|createRule
argument_list|(
name|modifier
argument_list|,
name|balancePolicy
argument_list|,
name|nodeFactory
argument_list|)
decl_stmt|;
name|BstMutationResult
argument_list|<
name|Character
argument_list|,
name|SimpleNode
argument_list|>
name|mutationResult
init|=
name|BstOperations
operator|.
name|mutate
argument_list|(
name|Ordering
operator|.
name|natural
argument_list|()
argument_list|,
name|mutationRule
argument_list|,
name|d
argument_list|,
literal|'c'
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|'c'
argument_list|,
name|mutationResult
operator|.
name|getTargetKey
argument_list|()
operator|.
name|charValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|mutationResult
operator|.
name|getOriginalTarget
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|'c'
argument_list|,
name|mutationResult
operator|.
name|getChangedTarget
argument_list|()
operator|.
name|getKey
argument_list|()
operator|.
name|charValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|d
argument_list|,
name|mutationResult
operator|.
name|getOriginalRoot
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|dWithBWithC
argument_list|,
name|mutationResult
operator|.
name|getChangedRoot
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ModificationType
operator|.
name|REBALANCING_CHANGE
argument_list|,
name|mutationResult
operator|.
name|modificationType
argument_list|()
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|nodeFactory
argument_list|,
name|balancePolicy
argument_list|,
name|modifier
argument_list|)
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
argument_list|(
literal|"EasyMock"
argument_list|)
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|testModifyInsertPresentNode ()
specifier|public
name|void
name|testModifyInsertPresentNode
parameter_list|()
block|{
comment|// We wish to test that BstOperations& co. treat IDENTITY modifications as the same.
comment|//    d
comment|//   / \
comment|//  b   f
comment|// /     \
comment|// a     g
name|SimpleNode
name|a
init|=
operator|new
name|SimpleNode
argument_list|(
literal|'a'
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|SimpleNode
name|b
init|=
operator|new
name|SimpleNode
argument_list|(
literal|'b'
argument_list|,
name|a
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|SimpleNode
name|g
init|=
operator|new
name|SimpleNode
argument_list|(
literal|'g'
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|SimpleNode
name|f
init|=
operator|new
name|SimpleNode
argument_list|(
literal|'f'
argument_list|,
literal|null
argument_list|,
name|g
argument_list|)
decl_stmt|;
name|SimpleNode
name|d
init|=
operator|new
name|SimpleNode
argument_list|(
literal|'d'
argument_list|,
name|b
argument_list|,
name|f
argument_list|)
decl_stmt|;
name|BstNodeFactory
argument_list|<
name|SimpleNode
argument_list|>
name|nodeFactory
init|=
name|EasyMock
operator|.
name|createStrictMock
argument_list|(
name|BstNodeFactory
operator|.
name|class
argument_list|)
decl_stmt|;
name|BstBalancePolicy
argument_list|<
name|SimpleNode
argument_list|>
name|balancePolicy
init|=
name|EasyMock
operator|.
name|createStrictMock
argument_list|(
name|BstBalancePolicy
operator|.
name|class
argument_list|)
decl_stmt|;
name|BstModifier
argument_list|<
name|Character
argument_list|,
name|SimpleNode
argument_list|>
name|modifier
init|=
name|EasyMock
operator|.
name|createStrictMock
argument_list|(
name|BstModifier
operator|.
name|class
argument_list|)
decl_stmt|;
name|expectPossibleEntryfication
argument_list|(
name|nodeFactory
argument_list|,
name|a
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|modifier
operator|.
name|modify
argument_list|(
name|eq
argument_list|(
literal|'a'
argument_list|)
argument_list|,
name|withKey
argument_list|(
literal|'a'
argument_list|)
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|BstModificationResult
operator|.
name|identity
argument_list|(
name|a
argument_list|)
argument_list|)
expr_stmt|;
name|replay
argument_list|(
name|nodeFactory
argument_list|,
name|balancePolicy
argument_list|,
name|modifier
argument_list|)
expr_stmt|;
name|BstMutationRule
argument_list|<
name|Character
argument_list|,
name|SimpleNode
argument_list|>
name|mutationRule
init|=
name|BstMutationRule
operator|.
name|createRule
argument_list|(
name|modifier
argument_list|,
name|balancePolicy
argument_list|,
name|nodeFactory
argument_list|)
decl_stmt|;
name|BstMutationResult
argument_list|<
name|Character
argument_list|,
name|SimpleNode
argument_list|>
name|mutationResult
init|=
name|BstOperations
operator|.
name|mutate
argument_list|(
name|Ordering
operator|.
name|natural
argument_list|()
argument_list|,
name|mutationRule
argument_list|,
name|d
argument_list|,
literal|'a'
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|'a'
argument_list|,
name|mutationResult
operator|.
name|getTargetKey
argument_list|()
operator|.
name|charValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|a
argument_list|,
name|mutationResult
operator|.
name|getOriginalTarget
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|a
argument_list|,
name|mutationResult
operator|.
name|getChangedTarget
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|d
argument_list|,
name|mutationResult
operator|.
name|getOriginalRoot
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|d
argument_list|,
name|mutationResult
operator|.
name|getChangedRoot
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ModificationType
operator|.
name|IDENTITY
argument_list|,
name|mutationResult
operator|.
name|modificationType
argument_list|()
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|nodeFactory
argument_list|,
name|balancePolicy
argument_list|,
name|modifier
argument_list|)
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
argument_list|(
literal|"EasyMock"
argument_list|)
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|testModifyInsertInequivalentNode ()
specifier|public
name|void
name|testModifyInsertInequivalentNode
parameter_list|()
block|{
comment|// We wish to test that BstOperations& co. treat non-equivalent() nodes as different.
comment|//    d
comment|//   / \
comment|//  b   f
comment|// /     \
comment|// a     g
name|SimpleNode
name|a
init|=
operator|new
name|SimpleNode
argument_list|(
literal|'a'
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|SimpleNode
name|b
init|=
operator|new
name|SimpleNode
argument_list|(
literal|'b'
argument_list|,
name|a
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|SimpleNode
name|g
init|=
operator|new
name|SimpleNode
argument_list|(
literal|'g'
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|SimpleNode
name|f
init|=
operator|new
name|SimpleNode
argument_list|(
literal|'f'
argument_list|,
literal|null
argument_list|,
name|g
argument_list|)
decl_stmt|;
name|SimpleNode
name|d
init|=
operator|new
name|SimpleNode
argument_list|(
literal|'d'
argument_list|,
name|b
argument_list|,
name|f
argument_list|)
decl_stmt|;
name|BstNodeFactory
argument_list|<
name|SimpleNode
argument_list|>
name|nodeFactory
init|=
name|EasyMock
operator|.
name|createStrictMock
argument_list|(
name|BstNodeFactory
operator|.
name|class
argument_list|)
decl_stmt|;
name|BstBalancePolicy
argument_list|<
name|SimpleNode
argument_list|>
name|balancePolicy
init|=
name|EasyMock
operator|.
name|createStrictMock
argument_list|(
name|BstBalancePolicy
operator|.
name|class
argument_list|)
decl_stmt|;
name|BstModifier
argument_list|<
name|Character
argument_list|,
name|SimpleNode
argument_list|>
name|modifier
init|=
name|EasyMock
operator|.
name|createStrictMock
argument_list|(
name|BstModifier
operator|.
name|class
argument_list|)
decl_stmt|;
name|expectPossibleEntryfication
argument_list|(
name|nodeFactory
argument_list|,
name|a
argument_list|)
expr_stmt|;
name|SimpleNode
name|a2
init|=
operator|new
name|SimpleNode
argument_list|(
literal|'a'
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|expect
argument_list|(
name|modifier
operator|.
name|modify
argument_list|(
name|eq
argument_list|(
literal|'a'
argument_list|)
argument_list|,
name|withKey
argument_list|(
literal|'a'
argument_list|)
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|BstModificationResult
operator|.
name|rebuildingChange
argument_list|(
name|a
argument_list|,
name|a2
argument_list|)
argument_list|)
expr_stmt|;
name|expectPossibleEntryfication
argument_list|(
name|nodeFactory
argument_list|,
name|a2
argument_list|)
expr_stmt|;
name|SimpleNode
name|bWithA2
init|=
operator|new
name|SimpleNode
argument_list|(
literal|'b'
argument_list|,
name|a2
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|expect
argument_list|(
name|nodeFactory
operator|.
name|createNode
argument_list|(
name|same
argument_list|(
name|b
argument_list|)
argument_list|,
name|withKey
argument_list|(
literal|'a'
argument_list|)
argument_list|,
operator|(
name|SimpleNode
operator|)
name|isNull
argument_list|()
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|bWithA2
argument_list|)
expr_stmt|;
name|SimpleNode
name|dWithA2
init|=
operator|new
name|SimpleNode
argument_list|(
literal|'d'
argument_list|,
name|bWithA2
argument_list|,
name|f
argument_list|)
decl_stmt|;
name|expect
argument_list|(
name|nodeFactory
operator|.
name|createNode
argument_list|(
name|same
argument_list|(
name|d
argument_list|)
argument_list|,
name|same
argument_list|(
name|bWithA2
argument_list|)
argument_list|,
name|same
argument_list|(
name|f
argument_list|)
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|dWithA2
argument_list|)
expr_stmt|;
name|replay
argument_list|(
name|nodeFactory
argument_list|,
name|balancePolicy
argument_list|,
name|modifier
argument_list|)
expr_stmt|;
name|BstMutationRule
argument_list|<
name|Character
argument_list|,
name|SimpleNode
argument_list|>
name|mutationRule
init|=
name|BstMutationRule
operator|.
name|createRule
argument_list|(
name|modifier
argument_list|,
name|balancePolicy
argument_list|,
name|nodeFactory
argument_list|)
decl_stmt|;
name|BstMutationResult
argument_list|<
name|Character
argument_list|,
name|SimpleNode
argument_list|>
name|mutationResult
init|=
name|BstOperations
operator|.
name|mutate
argument_list|(
name|Ordering
operator|.
name|natural
argument_list|()
argument_list|,
name|mutationRule
argument_list|,
name|d
argument_list|,
literal|'a'
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|'a'
argument_list|,
name|mutationResult
operator|.
name|getTargetKey
argument_list|()
operator|.
name|charValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|a
argument_list|,
name|mutationResult
operator|.
name|getOriginalTarget
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|'a'
argument_list|,
name|mutationResult
operator|.
name|getChangedTarget
argument_list|()
operator|.
name|getKey
argument_list|()
operator|.
name|charValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|d
argument_list|,
name|mutationResult
operator|.
name|getOriginalRoot
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|dWithA2
argument_list|,
name|mutationResult
operator|.
name|getChangedRoot
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ModificationType
operator|.
name|REBUILDING_CHANGE
argument_list|,
name|mutationResult
operator|.
name|modificationType
argument_list|()
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|nodeFactory
argument_list|,
name|balancePolicy
argument_list|,
name|modifier
argument_list|)
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
argument_list|(
literal|"EasyMock"
argument_list|)
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|testModifyDeletePresentNode ()
specifier|public
name|void
name|testModifyDeletePresentNode
parameter_list|()
block|{
comment|//    d
comment|//   / \
comment|//  b   f
comment|// /     \
comment|// a     g
name|SimpleNode
name|a
init|=
operator|new
name|SimpleNode
argument_list|(
literal|'a'
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|SimpleNode
name|b
init|=
operator|new
name|SimpleNode
argument_list|(
literal|'b'
argument_list|,
name|a
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|SimpleNode
name|g
init|=
operator|new
name|SimpleNode
argument_list|(
literal|'g'
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|SimpleNode
name|f
init|=
operator|new
name|SimpleNode
argument_list|(
literal|'f'
argument_list|,
literal|null
argument_list|,
name|g
argument_list|)
decl_stmt|;
name|SimpleNode
name|d
init|=
operator|new
name|SimpleNode
argument_list|(
literal|'d'
argument_list|,
name|b
argument_list|,
name|f
argument_list|)
decl_stmt|;
name|BstNodeFactory
argument_list|<
name|SimpleNode
argument_list|>
name|nodeFactory
init|=
name|EasyMock
operator|.
name|createStrictMock
argument_list|(
name|BstNodeFactory
operator|.
name|class
argument_list|)
decl_stmt|;
name|BstBalancePolicy
argument_list|<
name|SimpleNode
argument_list|>
name|balancePolicy
init|=
name|EasyMock
operator|.
name|createStrictMock
argument_list|(
name|BstBalancePolicy
operator|.
name|class
argument_list|)
decl_stmt|;
name|BstModifier
argument_list|<
name|Character
argument_list|,
name|SimpleNode
argument_list|>
name|modifier
init|=
name|EasyMock
operator|.
name|createStrictMock
argument_list|(
name|BstModifier
operator|.
name|class
argument_list|)
decl_stmt|;
name|expectPossibleEntryfication
argument_list|(
name|nodeFactory
argument_list|,
name|a
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|modifier
operator|.
name|modify
argument_list|(
name|eq
argument_list|(
literal|'a'
argument_list|)
argument_list|,
name|withKey
argument_list|(
literal|'a'
argument_list|)
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|BstModificationResult
operator|.
name|rebalancingChange
argument_list|(
name|a
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|balancePolicy
operator|.
name|combine
argument_list|(
name|same
argument_list|(
name|nodeFactory
argument_list|)
argument_list|,
operator|(
name|SimpleNode
operator|)
name|isNull
argument_list|()
argument_list|,
operator|(
name|SimpleNode
operator|)
name|isNull
argument_list|()
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|expectPossibleEntryfication
argument_list|(
name|nodeFactory
argument_list|,
name|b
argument_list|)
expr_stmt|;
name|SimpleNode
name|leafB
init|=
operator|new
name|SimpleNode
argument_list|(
literal|'b'
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|expect
argument_list|(
name|balancePolicy
operator|.
name|balance
argument_list|(
name|same
argument_list|(
name|nodeFactory
argument_list|)
argument_list|,
name|withKey
argument_list|(
literal|'b'
argument_list|)
argument_list|,
operator|(
name|SimpleNode
operator|)
name|isNull
argument_list|()
argument_list|,
operator|(
name|SimpleNode
operator|)
name|isNull
argument_list|()
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|leafB
argument_list|)
expr_stmt|;
name|SimpleNode
name|dWithLeafB
init|=
operator|new
name|SimpleNode
argument_list|(
literal|'d'
argument_list|,
name|leafB
argument_list|,
name|f
argument_list|)
decl_stmt|;
name|expectPossibleEntryfication
argument_list|(
name|nodeFactory
argument_list|,
name|d
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|balancePolicy
operator|.
name|balance
argument_list|(
name|same
argument_list|(
name|nodeFactory
argument_list|)
argument_list|,
name|withKey
argument_list|(
literal|'d'
argument_list|)
argument_list|,
name|same
argument_list|(
name|leafB
argument_list|)
argument_list|,
name|same
argument_list|(
name|f
argument_list|)
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|dWithLeafB
argument_list|)
expr_stmt|;
name|replay
argument_list|(
name|nodeFactory
argument_list|,
name|balancePolicy
argument_list|,
name|modifier
argument_list|)
expr_stmt|;
name|BstMutationRule
argument_list|<
name|Character
argument_list|,
name|SimpleNode
argument_list|>
name|mutationRule
init|=
name|BstMutationRule
operator|.
name|createRule
argument_list|(
name|modifier
argument_list|,
name|balancePolicy
argument_list|,
name|nodeFactory
argument_list|)
decl_stmt|;
name|BstMutationResult
argument_list|<
name|Character
argument_list|,
name|SimpleNode
argument_list|>
name|mutationResult
init|=
name|BstOperations
operator|.
name|mutate
argument_list|(
name|Ordering
operator|.
name|natural
argument_list|()
argument_list|,
name|mutationRule
argument_list|,
name|d
argument_list|,
literal|'a'
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|'a'
argument_list|,
name|mutationResult
operator|.
name|getTargetKey
argument_list|()
operator|.
name|charValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|'a'
argument_list|,
name|mutationResult
operator|.
name|getOriginalTarget
argument_list|()
operator|.
name|getKey
argument_list|()
operator|.
name|charValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|mutationResult
operator|.
name|getChangedTarget
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|d
argument_list|,
name|mutationResult
operator|.
name|getOriginalRoot
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|dWithLeafB
argument_list|,
name|mutationResult
operator|.
name|getChangedRoot
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ModificationType
operator|.
name|REBALANCING_CHANGE
argument_list|,
name|mutationResult
operator|.
name|modificationType
argument_list|()
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|nodeFactory
argument_list|,
name|balancePolicy
argument_list|,
name|modifier
argument_list|)
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
argument_list|(
literal|"EasyMock"
argument_list|)
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|testModifyDeleteAbsentNode ()
specifier|public
name|void
name|testModifyDeleteAbsentNode
parameter_list|()
block|{
comment|//    d
comment|//   / \
comment|//  b   f
comment|// /     \
comment|// a     g
name|SimpleNode
name|a
init|=
operator|new
name|SimpleNode
argument_list|(
literal|'a'
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|SimpleNode
name|b
init|=
operator|new
name|SimpleNode
argument_list|(
literal|'b'
argument_list|,
name|a
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|SimpleNode
name|g
init|=
operator|new
name|SimpleNode
argument_list|(
literal|'g'
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|SimpleNode
name|f
init|=
operator|new
name|SimpleNode
argument_list|(
literal|'f'
argument_list|,
literal|null
argument_list|,
name|g
argument_list|)
decl_stmt|;
name|SimpleNode
name|d
init|=
operator|new
name|SimpleNode
argument_list|(
literal|'d'
argument_list|,
name|b
argument_list|,
name|f
argument_list|)
decl_stmt|;
name|BstNodeFactory
argument_list|<
name|SimpleNode
argument_list|>
name|nodeFactory
init|=
name|EasyMock
operator|.
name|createStrictMock
argument_list|(
name|BstNodeFactory
operator|.
name|class
argument_list|)
decl_stmt|;
name|BstBalancePolicy
argument_list|<
name|SimpleNode
argument_list|>
name|balancePolicy
init|=
name|EasyMock
operator|.
name|createStrictMock
argument_list|(
name|BstBalancePolicy
operator|.
name|class
argument_list|)
decl_stmt|;
name|BstModifier
argument_list|<
name|Character
argument_list|,
name|SimpleNode
argument_list|>
name|modifier
init|=
name|EasyMock
operator|.
name|createStrictMock
argument_list|(
name|BstModifier
operator|.
name|class
argument_list|)
decl_stmt|;
name|expectPossibleEntryfication
argument_list|(
name|nodeFactory
argument_list|,
name|a
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|modifier
operator|.
name|modify
argument_list|(
name|eq
argument_list|(
literal|'c'
argument_list|)
argument_list|,
operator|(
name|SimpleNode
operator|)
name|isNull
argument_list|()
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|BstModificationResult
operator|.
expr|<
name|SimpleNode
operator|>
name|identity
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|replay
argument_list|(
name|nodeFactory
argument_list|,
name|balancePolicy
argument_list|,
name|modifier
argument_list|)
expr_stmt|;
name|BstMutationRule
argument_list|<
name|Character
argument_list|,
name|SimpleNode
argument_list|>
name|mutationRule
init|=
name|BstMutationRule
operator|.
name|createRule
argument_list|(
name|modifier
argument_list|,
name|balancePolicy
argument_list|,
name|nodeFactory
argument_list|)
decl_stmt|;
name|BstMutationResult
argument_list|<
name|Character
argument_list|,
name|SimpleNode
argument_list|>
name|mutationResult
init|=
name|BstOperations
operator|.
name|mutate
argument_list|(
name|Ordering
operator|.
name|natural
argument_list|()
argument_list|,
name|mutationRule
argument_list|,
name|d
argument_list|,
literal|'c'
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|'c'
argument_list|,
name|mutationResult
operator|.
name|getTargetKey
argument_list|()
operator|.
name|charValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|d
argument_list|,
name|mutationResult
operator|.
name|getOriginalRoot
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|d
argument_list|,
name|mutationResult
operator|.
name|getChangedRoot
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|mutationResult
operator|.
name|getOriginalTarget
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|mutationResult
operator|.
name|getChangedTarget
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ModificationType
operator|.
name|IDENTITY
argument_list|,
name|mutationResult
operator|.
name|modificationType
argument_list|()
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|nodeFactory
argument_list|,
name|balancePolicy
argument_list|,
name|modifier
argument_list|)
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
argument_list|(
literal|"EasyMock"
argument_list|)
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|testModifyPathInsertPresentNode ()
specifier|public
name|void
name|testModifyPathInsertPresentNode
parameter_list|()
block|{
comment|// We wish to test that BstOperations& co. treat identity-different nodes as changed,
comment|// instead of using SimpleNode.equals().
comment|//    d
comment|//   / \
comment|//  b   f
comment|// /     \
comment|// a     g
name|SimpleNode
name|a
init|=
operator|new
name|SimpleNode
argument_list|(
literal|'a'
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|SimpleNode
name|b
init|=
operator|new
name|SimpleNode
argument_list|(
literal|'b'
argument_list|,
name|a
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|SimpleNode
name|g
init|=
operator|new
name|SimpleNode
argument_list|(
literal|'g'
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|SimpleNode
name|f
init|=
operator|new
name|SimpleNode
argument_list|(
literal|'f'
argument_list|,
literal|null
argument_list|,
name|g
argument_list|)
decl_stmt|;
name|SimpleNode
name|d
init|=
operator|new
name|SimpleNode
argument_list|(
literal|'d'
argument_list|,
name|b
argument_list|,
name|f
argument_list|)
decl_stmt|;
name|BstNodeFactory
argument_list|<
name|SimpleNode
argument_list|>
name|nodeFactory
init|=
name|EasyMock
operator|.
name|createStrictMock
argument_list|(
name|BstNodeFactory
operator|.
name|class
argument_list|)
decl_stmt|;
name|BstBalancePolicy
argument_list|<
name|SimpleNode
argument_list|>
name|balancePolicy
init|=
name|EasyMock
operator|.
name|createStrictMock
argument_list|(
name|BstBalancePolicy
operator|.
name|class
argument_list|)
decl_stmt|;
name|BstModifier
argument_list|<
name|Character
argument_list|,
name|SimpleNode
argument_list|>
name|modifier
init|=
name|EasyMock
operator|.
name|createStrictMock
argument_list|(
name|BstModifier
operator|.
name|class
argument_list|)
decl_stmt|;
name|expectPossibleEntryfication
argument_list|(
name|nodeFactory
argument_list|,
name|a
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|modifier
operator|.
name|modify
argument_list|(
name|eq
argument_list|(
literal|'a'
argument_list|)
argument_list|,
name|withKey
argument_list|(
literal|'a'
argument_list|)
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|BstModificationResult
operator|.
name|identity
argument_list|(
name|a
argument_list|)
argument_list|)
expr_stmt|;
name|replay
argument_list|(
name|nodeFactory
argument_list|,
name|balancePolicy
argument_list|,
name|modifier
argument_list|)
expr_stmt|;
name|BstInOrderPath
argument_list|<
name|SimpleNode
argument_list|>
name|path
init|=
name|extension
argument_list|(
name|pathFactory
argument_list|,
name|d
argument_list|,
name|LEFT
argument_list|,
name|LEFT
argument_list|)
decl_stmt|;
name|BstMutationRule
argument_list|<
name|Character
argument_list|,
name|SimpleNode
argument_list|>
name|mutationRule
init|=
name|BstMutationRule
operator|.
name|createRule
argument_list|(
name|modifier
argument_list|,
name|balancePolicy
argument_list|,
name|nodeFactory
argument_list|)
decl_stmt|;
name|BstMutationResult
argument_list|<
name|Character
argument_list|,
name|SimpleNode
argument_list|>
name|mutationResult
init|=
name|BstOperations
operator|.
name|mutate
argument_list|(
name|path
argument_list|,
name|mutationRule
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|'a'
argument_list|,
name|mutationResult
operator|.
name|getTargetKey
argument_list|()
operator|.
name|charValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|a
argument_list|,
name|mutationResult
operator|.
name|getOriginalTarget
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|a
argument_list|,
name|mutationResult
operator|.
name|getChangedTarget
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|d
argument_list|,
name|mutationResult
operator|.
name|getOriginalRoot
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|d
argument_list|,
name|mutationResult
operator|.
name|getChangedRoot
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ModificationType
operator|.
name|IDENTITY
argument_list|,
name|mutationResult
operator|.
name|modificationType
argument_list|()
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|nodeFactory
argument_list|,
name|balancePolicy
argument_list|,
name|modifier
argument_list|)
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
argument_list|(
literal|"EasyMock"
argument_list|)
DECL|method|withKey (final char c)
specifier|private
name|SimpleNode
name|withKey
parameter_list|(
specifier|final
name|char
name|c
parameter_list|)
block|{
name|reportMatcher
argument_list|(
operator|new
name|IArgumentMatcher
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|appendTo
parameter_list|(
name|StringBuffer
name|buffer
parameter_list|)
block|{
name|buffer
operator|.
name|append
argument_list|(
literal|"Expected BstNode with key "
argument_list|)
operator|.
name|append
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|matches
parameter_list|(
name|Object
name|argument
parameter_list|)
block|{
return|return
name|argument
operator|instanceof
name|SimpleNode
operator|&&
operator|(
operator|(
name|SimpleNode
operator|)
name|argument
operator|)
operator|.
name|getKey
argument_list|()
operator|.
name|charValue
argument_list|()
operator|==
name|c
return|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
comment|/**    * The implementation may remove the children of a node it treats as an entry for safety. Expect    * this and handle it.    */
annotation|@
name|GwtIncompatible
argument_list|(
literal|"EasyMock"
argument_list|)
DECL|method|expectPossibleEntryfication (BstNodeFactory<SimpleNode> factory, SimpleNode entry)
specifier|private
name|void
name|expectPossibleEntryfication
parameter_list|(
name|BstNodeFactory
argument_list|<
name|SimpleNode
argument_list|>
name|factory
parameter_list|,
name|SimpleNode
name|entry
parameter_list|)
block|{
name|expect
argument_list|(
name|factory
operator|.
name|createNode
argument_list|(
name|same
argument_list|(
name|entry
argument_list|)
argument_list|,
operator|(
name|SimpleNode
operator|)
name|isNull
argument_list|()
argument_list|,
operator|(
name|SimpleNode
operator|)
name|isNull
argument_list|()
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
operator|new
name|SimpleNode
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
operator|.
name|times
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
DECL|method|testInsertMin1 ()
specifier|public
name|void
name|testInsertMin1
parameter_list|()
block|{
comment|//    d
comment|//   / \
comment|//  b   f
comment|//   \   \
comment|//   c   g
name|SimpleNode
name|c
init|=
operator|new
name|SimpleNode
argument_list|(
literal|'c'
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|SimpleNode
name|b
init|=
operator|new
name|SimpleNode
argument_list|(
literal|'b'
argument_list|,
literal|null
argument_list|,
name|c
argument_list|)
decl_stmt|;
name|SimpleNode
name|g
init|=
operator|new
name|SimpleNode
argument_list|(
literal|'g'
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|SimpleNode
name|f
init|=
operator|new
name|SimpleNode
argument_list|(
literal|'f'
argument_list|,
literal|null
argument_list|,
name|g
argument_list|)
decl_stmt|;
name|SimpleNode
name|d
init|=
operator|new
name|SimpleNode
argument_list|(
literal|'d'
argument_list|,
name|b
argument_list|,
name|f
argument_list|)
decl_stmt|;
name|SimpleNode
name|a
init|=
operator|new
name|SimpleNode
argument_list|(
literal|'a'
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|SimpleNode
name|newRoot
init|=
name|BstOperations
operator|.
name|insertMin
argument_list|(
name|d
argument_list|,
name|a
argument_list|,
name|nodeFactory
argument_list|,
name|balancePolicy
argument_list|)
decl_stmt|;
name|assertInOrderTraversalIs
argument_list|(
name|newRoot
argument_list|,
literal|"abcdfg"
argument_list|)
expr_stmt|;
block|}
DECL|method|testInsertMin2 ()
specifier|public
name|void
name|testInsertMin2
parameter_list|()
block|{
comment|//    d
comment|//   / \
comment|//  b   f
comment|//       \
comment|//       g
name|SimpleNode
name|b
init|=
operator|new
name|SimpleNode
argument_list|(
literal|'b'
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|SimpleNode
name|g
init|=
operator|new
name|SimpleNode
argument_list|(
literal|'g'
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|SimpleNode
name|f
init|=
operator|new
name|SimpleNode
argument_list|(
literal|'f'
argument_list|,
literal|null
argument_list|,
name|g
argument_list|)
decl_stmt|;
name|SimpleNode
name|d
init|=
operator|new
name|SimpleNode
argument_list|(
literal|'d'
argument_list|,
name|b
argument_list|,
name|f
argument_list|)
decl_stmt|;
name|SimpleNode
name|a
init|=
operator|new
name|SimpleNode
argument_list|(
literal|'a'
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|SimpleNode
name|newRoot
init|=
name|BstOperations
operator|.
name|insertMin
argument_list|(
name|d
argument_list|,
name|a
argument_list|,
name|nodeFactory
argument_list|,
name|balancePolicy
argument_list|)
decl_stmt|;
name|assertInOrderTraversalIs
argument_list|(
name|newRoot
argument_list|,
literal|"abdfg"
argument_list|)
expr_stmt|;
block|}
DECL|method|testInsertMinEmpty ()
specifier|public
name|void
name|testInsertMinEmpty
parameter_list|()
block|{
name|SimpleNode
name|a
init|=
operator|new
name|SimpleNode
argument_list|(
literal|'a'
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|SimpleNode
name|newRoot
init|=
name|BstOperations
operator|.
name|insertMin
argument_list|(
literal|null
argument_list|,
name|a
argument_list|,
name|nodeFactory
argument_list|,
name|balancePolicy
argument_list|)
decl_stmt|;
name|assertInOrderTraversalIs
argument_list|(
name|newRoot
argument_list|,
literal|"a"
argument_list|)
expr_stmt|;
block|}
DECL|method|testInsertMax1 ()
specifier|public
name|void
name|testInsertMax1
parameter_list|()
block|{
comment|//    d
comment|//   / \
comment|//  b   f
comment|//   \   \
comment|//   c   g
name|SimpleNode
name|c
init|=
operator|new
name|SimpleNode
argument_list|(
literal|'c'
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|SimpleNode
name|b
init|=
operator|new
name|SimpleNode
argument_list|(
literal|'b'
argument_list|,
literal|null
argument_list|,
name|c
argument_list|)
decl_stmt|;
name|SimpleNode
name|g
init|=
operator|new
name|SimpleNode
argument_list|(
literal|'g'
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|SimpleNode
name|f
init|=
operator|new
name|SimpleNode
argument_list|(
literal|'f'
argument_list|,
literal|null
argument_list|,
name|g
argument_list|)
decl_stmt|;
name|SimpleNode
name|d
init|=
operator|new
name|SimpleNode
argument_list|(
literal|'d'
argument_list|,
name|b
argument_list|,
name|f
argument_list|)
decl_stmt|;
name|SimpleNode
name|h
init|=
operator|new
name|SimpleNode
argument_list|(
literal|'h'
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|SimpleNode
name|newRoot
init|=
name|BstOperations
operator|.
name|insertMax
argument_list|(
name|d
argument_list|,
name|h
argument_list|,
name|nodeFactory
argument_list|,
name|balancePolicy
argument_list|)
decl_stmt|;
name|assertInOrderTraversalIs
argument_list|(
name|newRoot
argument_list|,
literal|"bcdfgh"
argument_list|)
expr_stmt|;
block|}
DECL|method|testInsertMax2 ()
specifier|public
name|void
name|testInsertMax2
parameter_list|()
block|{
comment|//    d
comment|//   / \
comment|//  b   f
comment|//     /
comment|//     e
name|SimpleNode
name|b
init|=
operator|new
name|SimpleNode
argument_list|(
literal|'b'
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|SimpleNode
name|e
init|=
operator|new
name|SimpleNode
argument_list|(
literal|'e'
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|SimpleNode
name|f
init|=
operator|new
name|SimpleNode
argument_list|(
literal|'f'
argument_list|,
name|e
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|SimpleNode
name|d
init|=
operator|new
name|SimpleNode
argument_list|(
literal|'d'
argument_list|,
name|b
argument_list|,
name|f
argument_list|)
decl_stmt|;
name|SimpleNode
name|h
init|=
operator|new
name|SimpleNode
argument_list|(
literal|'h'
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|SimpleNode
name|newRoot
init|=
name|BstOperations
operator|.
name|insertMax
argument_list|(
name|d
argument_list|,
name|h
argument_list|,
name|nodeFactory
argument_list|,
name|balancePolicy
argument_list|)
decl_stmt|;
name|assertInOrderTraversalIs
argument_list|(
name|newRoot
argument_list|,
literal|"bdefh"
argument_list|)
expr_stmt|;
block|}
DECL|method|testInsertMaxEmpty ()
specifier|public
name|void
name|testInsertMaxEmpty
parameter_list|()
block|{
name|SimpleNode
name|a
init|=
operator|new
name|SimpleNode
argument_list|(
literal|'a'
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|SimpleNode
name|newRoot
init|=
name|BstOperations
operator|.
name|insertMax
argument_list|(
literal|null
argument_list|,
name|a
argument_list|,
name|nodeFactory
argument_list|,
name|balancePolicy
argument_list|)
decl_stmt|;
name|assertInOrderTraversalIs
argument_list|(
name|newRoot
argument_list|,
literal|"a"
argument_list|)
expr_stmt|;
block|}
DECL|method|testExtractMin1 ()
specifier|public
name|void
name|testExtractMin1
parameter_list|()
block|{
comment|//    d
comment|//   / \
comment|//  b   f
comment|//   \   \
comment|//   c   g
name|SimpleNode
name|c
init|=
operator|new
name|SimpleNode
argument_list|(
literal|'c'
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|SimpleNode
name|b
init|=
operator|new
name|SimpleNode
argument_list|(
literal|'b'
argument_list|,
literal|null
argument_list|,
name|c
argument_list|)
decl_stmt|;
name|SimpleNode
name|g
init|=
operator|new
name|SimpleNode
argument_list|(
literal|'g'
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|SimpleNode
name|f
init|=
operator|new
name|SimpleNode
argument_list|(
literal|'f'
argument_list|,
literal|null
argument_list|,
name|g
argument_list|)
decl_stmt|;
name|SimpleNode
name|d
init|=
operator|new
name|SimpleNode
argument_list|(
literal|'d'
argument_list|,
name|b
argument_list|,
name|f
argument_list|)
decl_stmt|;
name|BstMutationResult
argument_list|<
name|Character
argument_list|,
name|SimpleNode
argument_list|>
name|extractMin
init|=
name|BstOperations
operator|.
name|extractMin
argument_list|(
name|d
argument_list|,
name|nodeFactory
argument_list|,
name|balancePolicy
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|'b'
argument_list|,
name|extractMin
operator|.
name|getTargetKey
argument_list|()
operator|.
name|charValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|d
argument_list|,
name|extractMin
operator|.
name|getOriginalRoot
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|b
argument_list|,
name|extractMin
operator|.
name|getOriginalTarget
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|extractMin
operator|.
name|getChangedTarget
argument_list|()
argument_list|)
expr_stmt|;
name|assertInOrderTraversalIs
argument_list|(
name|extractMin
operator|.
name|getChangedRoot
argument_list|()
argument_list|,
literal|"cdfg"
argument_list|)
expr_stmt|;
block|}
DECL|method|testExtractMin2 ()
specifier|public
name|void
name|testExtractMin2
parameter_list|()
block|{
comment|//    d
comment|//   / \
comment|//  b   f
comment|//       \
comment|//       g
name|SimpleNode
name|b
init|=
operator|new
name|SimpleNode
argument_list|(
literal|'b'
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|SimpleNode
name|g
init|=
operator|new
name|SimpleNode
argument_list|(
literal|'g'
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|SimpleNode
name|f
init|=
operator|new
name|SimpleNode
argument_list|(
literal|'f'
argument_list|,
literal|null
argument_list|,
name|g
argument_list|)
decl_stmt|;
name|SimpleNode
name|d
init|=
operator|new
name|SimpleNode
argument_list|(
literal|'d'
argument_list|,
name|b
argument_list|,
name|f
argument_list|)
decl_stmt|;
name|BstMutationResult
argument_list|<
name|Character
argument_list|,
name|SimpleNode
argument_list|>
name|extractMin
init|=
name|BstOperations
operator|.
name|extractMin
argument_list|(
name|d
argument_list|,
name|nodeFactory
argument_list|,
name|balancePolicy
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|'b'
argument_list|,
name|extractMin
operator|.
name|getTargetKey
argument_list|()
operator|.
name|charValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|d
argument_list|,
name|extractMin
operator|.
name|getOriginalRoot
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|b
argument_list|,
name|extractMin
operator|.
name|getOriginalTarget
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|extractMin
operator|.
name|getChangedTarget
argument_list|()
argument_list|)
expr_stmt|;
name|assertInOrderTraversalIs
argument_list|(
name|extractMin
operator|.
name|getChangedRoot
argument_list|()
argument_list|,
literal|"dfg"
argument_list|)
expr_stmt|;
block|}
DECL|method|testExtractMax1 ()
specifier|public
name|void
name|testExtractMax1
parameter_list|()
block|{
comment|//    d
comment|//   / \
comment|//  b   f
comment|//   \   \
comment|//   c   g
name|SimpleNode
name|c
init|=
operator|new
name|SimpleNode
argument_list|(
literal|'c'
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|SimpleNode
name|b
init|=
operator|new
name|SimpleNode
argument_list|(
literal|'b'
argument_list|,
literal|null
argument_list|,
name|c
argument_list|)
decl_stmt|;
name|SimpleNode
name|g
init|=
operator|new
name|SimpleNode
argument_list|(
literal|'g'
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|SimpleNode
name|f
init|=
operator|new
name|SimpleNode
argument_list|(
literal|'f'
argument_list|,
literal|null
argument_list|,
name|g
argument_list|)
decl_stmt|;
name|SimpleNode
name|d
init|=
operator|new
name|SimpleNode
argument_list|(
literal|'d'
argument_list|,
name|b
argument_list|,
name|f
argument_list|)
decl_stmt|;
name|BstMutationResult
argument_list|<
name|Character
argument_list|,
name|SimpleNode
argument_list|>
name|extractMax
init|=
name|BstOperations
operator|.
name|extractMax
argument_list|(
name|d
argument_list|,
name|nodeFactory
argument_list|,
name|balancePolicy
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|'g'
argument_list|,
name|extractMax
operator|.
name|getTargetKey
argument_list|()
operator|.
name|charValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|d
argument_list|,
name|extractMax
operator|.
name|getOriginalRoot
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|g
argument_list|,
name|extractMax
operator|.
name|getOriginalTarget
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|extractMax
operator|.
name|getChangedTarget
argument_list|()
argument_list|)
expr_stmt|;
name|assertInOrderTraversalIs
argument_list|(
name|extractMax
operator|.
name|getChangedRoot
argument_list|()
argument_list|,
literal|"bcdf"
argument_list|)
expr_stmt|;
block|}
DECL|method|testExtractMax2 ()
specifier|public
name|void
name|testExtractMax2
parameter_list|()
block|{
comment|//    d
comment|//   / \
comment|//  b   f
comment|//     /
comment|//     e
name|SimpleNode
name|b
init|=
operator|new
name|SimpleNode
argument_list|(
literal|'b'
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|SimpleNode
name|e
init|=
operator|new
name|SimpleNode
argument_list|(
literal|'e'
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|SimpleNode
name|f
init|=
operator|new
name|SimpleNode
argument_list|(
literal|'f'
argument_list|,
name|e
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|SimpleNode
name|d
init|=
operator|new
name|SimpleNode
argument_list|(
literal|'d'
argument_list|,
name|b
argument_list|,
name|f
argument_list|)
decl_stmt|;
name|BstMutationResult
argument_list|<
name|Character
argument_list|,
name|SimpleNode
argument_list|>
name|extractMax
init|=
name|BstOperations
operator|.
name|extractMax
argument_list|(
name|d
argument_list|,
name|nodeFactory
argument_list|,
name|balancePolicy
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|'f'
argument_list|,
name|extractMax
operator|.
name|getTargetKey
argument_list|()
operator|.
name|charValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|d
argument_list|,
name|extractMax
operator|.
name|getOriginalRoot
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|f
argument_list|,
name|extractMax
operator|.
name|getOriginalTarget
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|extractMax
operator|.
name|getChangedTarget
argument_list|()
argument_list|)
expr_stmt|;
name|assertInOrderTraversalIs
argument_list|(
name|extractMax
operator|.
name|getChangedRoot
argument_list|()
argument_list|,
literal|"bde"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
argument_list|(
literal|"NullPointerTester"
argument_list|)
DECL|method|testNullPointers ()
specifier|public
name|void
name|testNullPointers
parameter_list|()
throws|throws
name|Exception
block|{
name|defaultNullPointerTester
argument_list|()
operator|.
name|testAllPublicStaticMethods
argument_list|(
name|BstOperations
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

