begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2008 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.collect
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkArgument
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Arrays
operator|.
name|asList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtCompatible
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtIncompatible
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|ListTestSuiteBuilder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|MinimalCollection
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|SetTestSuiteBuilder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|TestStringListGenerator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|TestStringSetGenerator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|features
operator|.
name|CollectionFeature
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|features
operator|.
name|CollectionSize
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|google
operator|.
name|MultisetTestSuiteBuilder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|google
operator|.
name|TestStringMultisetGenerator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|google
operator|.
name|UnmodifiableCollectionTests
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|testing
operator|.
name|CollectorTester
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|testing
operator|.
name|EqualsTester
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|testing
operator|.
name|NullPointerTester
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|testing
operator|.
name|SerializableTester
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|BiPredicate
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collector
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestSuite
import|;
end_import

begin_comment
comment|/**  * Tests for {@link ImmutableMultiset}.  *  * @author Jared Levy  */
end_comment

begin_class
annotation|@
name|GwtCompatible
argument_list|(
name|emulated
operator|=
literal|true
argument_list|)
DECL|class|ImmutableMultisetTest
specifier|public
class|class
name|ImmutableMultisetTest
extends|extends
name|TestCase
block|{
annotation|@
name|GwtIncompatible
comment|// suite // TODO(cpovirk): add to collect/gwt/suites
DECL|method|suite ()
specifier|public
specifier|static
name|Test
name|suite
parameter_list|()
block|{
name|TestSuite
name|suite
init|=
operator|new
name|TestSuite
argument_list|()
decl_stmt|;
name|suite
operator|.
name|addTestSuite
argument_list|(
name|ImmutableMultisetTest
operator|.
name|class
argument_list|)
expr_stmt|;
name|suite
operator|.
name|addTest
argument_list|(
name|MultisetTestSuiteBuilder
operator|.
name|using
argument_list|(
operator|new
name|TestStringMultisetGenerator
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|Multiset
argument_list|<
name|String
argument_list|>
name|create
parameter_list|(
name|String
index|[]
name|elements
parameter_list|)
block|{
return|return
name|ImmutableMultiset
operator|.
name|copyOf
argument_list|(
name|elements
argument_list|)
return|;
block|}
block|}
argument_list|)
operator|.
name|named
argument_list|(
literal|"ImmutableMultiset"
argument_list|)
operator|.
name|withFeatures
argument_list|(
name|CollectionSize
operator|.
name|ANY
argument_list|,
name|CollectionFeature
operator|.
name|SERIALIZABLE_INCLUDING_VIEWS
argument_list|,
name|CollectionFeature
operator|.
name|ALLOWS_NULL_QUERIES
argument_list|)
operator|.
name|createTestSuite
argument_list|()
argument_list|)
expr_stmt|;
name|suite
operator|.
name|addTest
argument_list|(
name|SetTestSuiteBuilder
operator|.
name|using
argument_list|(
operator|new
name|TestStringSetGenerator
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|Set
argument_list|<
name|String
argument_list|>
name|create
parameter_list|(
name|String
index|[]
name|elements
parameter_list|)
block|{
return|return
name|ImmutableMultiset
operator|.
name|copyOf
argument_list|(
name|elements
argument_list|)
operator|.
name|elementSet
argument_list|()
return|;
block|}
block|}
argument_list|)
operator|.
name|named
argument_list|(
literal|"ImmutableMultiset, element set"
argument_list|)
operator|.
name|withFeatures
argument_list|(
name|CollectionSize
operator|.
name|ANY
argument_list|,
name|CollectionFeature
operator|.
name|SERIALIZABLE
argument_list|,
name|CollectionFeature
operator|.
name|ALLOWS_NULL_QUERIES
argument_list|)
operator|.
name|createTestSuite
argument_list|()
argument_list|)
expr_stmt|;
name|suite
operator|.
name|addTest
argument_list|(
name|ListTestSuiteBuilder
operator|.
name|using
argument_list|(
operator|new
name|TestStringListGenerator
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|List
argument_list|<
name|String
argument_list|>
name|create
parameter_list|(
name|String
index|[]
name|elements
parameter_list|)
block|{
return|return
name|ImmutableMultiset
operator|.
name|copyOf
argument_list|(
name|elements
argument_list|)
operator|.
name|asList
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|order
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|insertionOrder
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|order
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|s
range|:
name|insertionOrder
control|)
block|{
name|int
name|index
init|=
name|order
operator|.
name|indexOf
argument_list|(
name|s
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|==
operator|-
literal|1
condition|)
block|{
name|order
operator|.
name|add
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|order
operator|.
name|add
argument_list|(
name|index
argument_list|,
name|s
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|order
return|;
block|}
block|}
argument_list|)
operator|.
name|named
argument_list|(
literal|"ImmutableMultiset.asList"
argument_list|)
operator|.
name|withFeatures
argument_list|(
name|CollectionSize
operator|.
name|ANY
argument_list|,
name|CollectionFeature
operator|.
name|SERIALIZABLE
argument_list|,
name|CollectionFeature
operator|.
name|ALLOWS_NULL_QUERIES
argument_list|)
operator|.
name|createTestSuite
argument_list|()
argument_list|)
expr_stmt|;
name|suite
operator|.
name|addTest
argument_list|(
name|ListTestSuiteBuilder
operator|.
name|using
argument_list|(
operator|new
name|TestStringListGenerator
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|List
argument_list|<
name|String
argument_list|>
name|create
parameter_list|(
name|String
index|[]
name|elements
parameter_list|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|set
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|ImmutableMultiset
operator|.
name|Builder
argument_list|<
name|String
argument_list|>
name|builder
init|=
name|ImmutableMultiset
operator|.
name|builder
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|s
range|:
name|elements
control|)
block|{
name|checkArgument
argument_list|(
name|set
operator|.
name|add
argument_list|(
name|s
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|addCopies
argument_list|(
name|s
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
name|ImmutableSet
argument_list|<
name|String
argument_list|>
name|elementSet
init|=
operator|(
name|ImmutableSet
argument_list|<
name|String
argument_list|>
operator|)
name|builder
operator|.
name|build
argument_list|()
operator|.
name|elementSet
argument_list|()
decl_stmt|;
return|return
name|elementSet
operator|.
name|asList
argument_list|()
return|;
block|}
block|}
argument_list|)
operator|.
name|named
argument_list|(
literal|"ImmutableMultiset.elementSet.asList"
argument_list|)
operator|.
name|withFeatures
argument_list|(
name|CollectionSize
operator|.
name|ANY
argument_list|,
name|CollectionFeature
operator|.
name|REJECTS_DUPLICATES_AT_CREATION
argument_list|,
name|CollectionFeature
operator|.
name|SERIALIZABLE
argument_list|,
name|CollectionFeature
operator|.
name|ALLOWS_NULL_QUERIES
argument_list|)
operator|.
name|createTestSuite
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|suite
return|;
block|}
DECL|method|testCreation_noArgs ()
specifier|public
name|void
name|testCreation_noArgs
parameter_list|()
block|{
name|Multiset
argument_list|<
name|String
argument_list|>
name|multiset
init|=
name|ImmutableMultiset
operator|.
name|of
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|multiset
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testCreation_oneElement ()
specifier|public
name|void
name|testCreation_oneElement
parameter_list|()
block|{
name|Multiset
argument_list|<
name|String
argument_list|>
name|multiset
init|=
name|ImmutableMultiset
operator|.
name|of
argument_list|(
literal|"a"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|HashMultiset
operator|.
name|create
argument_list|(
name|asList
argument_list|(
literal|"a"
argument_list|)
argument_list|)
argument_list|,
name|multiset
argument_list|)
expr_stmt|;
block|}
DECL|method|testCreation_twoElements ()
specifier|public
name|void
name|testCreation_twoElements
parameter_list|()
block|{
name|Multiset
argument_list|<
name|String
argument_list|>
name|multiset
init|=
name|ImmutableMultiset
operator|.
name|of
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|HashMultiset
operator|.
name|create
argument_list|(
name|asList
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
argument_list|)
argument_list|,
name|multiset
argument_list|)
expr_stmt|;
block|}
DECL|method|testCreation_threeElements ()
specifier|public
name|void
name|testCreation_threeElements
parameter_list|()
block|{
name|Multiset
argument_list|<
name|String
argument_list|>
name|multiset
init|=
name|ImmutableMultiset
operator|.
name|of
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|HashMultiset
operator|.
name|create
argument_list|(
name|asList
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|)
argument_list|)
argument_list|,
name|multiset
argument_list|)
expr_stmt|;
block|}
DECL|method|testCreation_fourElements ()
specifier|public
name|void
name|testCreation_fourElements
parameter_list|()
block|{
name|Multiset
argument_list|<
name|String
argument_list|>
name|multiset
init|=
name|ImmutableMultiset
operator|.
name|of
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|,
literal|"d"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|HashMultiset
operator|.
name|create
argument_list|(
name|asList
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|,
literal|"d"
argument_list|)
argument_list|)
argument_list|,
name|multiset
argument_list|)
expr_stmt|;
block|}
DECL|method|testCreation_fiveElements ()
specifier|public
name|void
name|testCreation_fiveElements
parameter_list|()
block|{
name|Multiset
argument_list|<
name|String
argument_list|>
name|multiset
init|=
name|ImmutableMultiset
operator|.
name|of
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|,
literal|"d"
argument_list|,
literal|"e"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|HashMultiset
operator|.
name|create
argument_list|(
name|asList
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|,
literal|"d"
argument_list|,
literal|"e"
argument_list|)
argument_list|)
argument_list|,
name|multiset
argument_list|)
expr_stmt|;
block|}
DECL|method|testCreation_sixElements ()
specifier|public
name|void
name|testCreation_sixElements
parameter_list|()
block|{
name|Multiset
argument_list|<
name|String
argument_list|>
name|multiset
init|=
name|ImmutableMultiset
operator|.
name|of
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|,
literal|"d"
argument_list|,
literal|"e"
argument_list|,
literal|"f"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|HashMultiset
operator|.
name|create
argument_list|(
name|asList
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|,
literal|"d"
argument_list|,
literal|"e"
argument_list|,
literal|"f"
argument_list|)
argument_list|)
argument_list|,
name|multiset
argument_list|)
expr_stmt|;
block|}
DECL|method|testCreation_sevenElements ()
specifier|public
name|void
name|testCreation_sevenElements
parameter_list|()
block|{
name|Multiset
argument_list|<
name|String
argument_list|>
name|multiset
init|=
name|ImmutableMultiset
operator|.
name|of
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|,
literal|"d"
argument_list|,
literal|"e"
argument_list|,
literal|"f"
argument_list|,
literal|"g"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|HashMultiset
operator|.
name|create
argument_list|(
name|asList
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|,
literal|"d"
argument_list|,
literal|"e"
argument_list|,
literal|"f"
argument_list|,
literal|"g"
argument_list|)
argument_list|)
argument_list|,
name|multiset
argument_list|)
expr_stmt|;
block|}
DECL|method|testCreation_emptyArray ()
specifier|public
name|void
name|testCreation_emptyArray
parameter_list|()
block|{
name|String
index|[]
name|array
init|=
operator|new
name|String
index|[
literal|0
index|]
decl_stmt|;
name|Multiset
argument_list|<
name|String
argument_list|>
name|multiset
init|=
name|ImmutableMultiset
operator|.
name|copyOf
argument_list|(
name|array
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|multiset
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testCreation_arrayOfOneElement ()
specifier|public
name|void
name|testCreation_arrayOfOneElement
parameter_list|()
block|{
name|String
index|[]
name|array
init|=
operator|new
name|String
index|[]
block|{
literal|"a"
block|}
decl_stmt|;
name|Multiset
argument_list|<
name|String
argument_list|>
name|multiset
init|=
name|ImmutableMultiset
operator|.
name|copyOf
argument_list|(
name|array
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|HashMultiset
operator|.
name|create
argument_list|(
name|asList
argument_list|(
literal|"a"
argument_list|)
argument_list|)
argument_list|,
name|multiset
argument_list|)
expr_stmt|;
block|}
DECL|method|testCreation_arrayOfArray ()
specifier|public
name|void
name|testCreation_arrayOfArray
parameter_list|()
block|{
name|String
index|[]
name|array
init|=
operator|new
name|String
index|[]
block|{
literal|"a"
block|}
decl_stmt|;
name|Multiset
argument_list|<
name|String
index|[]
argument_list|>
name|multiset
init|=
name|ImmutableMultiset
operator|.
expr|<
name|String
index|[]
operator|>
name|of
argument_list|(
name|array
argument_list|)
decl_stmt|;
name|Multiset
argument_list|<
name|String
index|[]
argument_list|>
name|expected
init|=
name|HashMultiset
operator|.
name|create
argument_list|()
decl_stmt|;
name|expected
operator|.
name|add
argument_list|(
name|array
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|multiset
argument_list|)
expr_stmt|;
block|}
DECL|method|testCreation_arrayContainingOnlyNull ()
specifier|public
name|void
name|testCreation_arrayContainingOnlyNull
parameter_list|()
block|{
name|String
index|[]
name|array
init|=
operator|new
name|String
index|[]
block|{
literal|null
block|}
decl_stmt|;
try|try
block|{
name|ImmutableMultiset
operator|.
name|copyOf
argument_list|(
name|array
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testCopyOf_collection_empty ()
specifier|public
name|void
name|testCopyOf_collection_empty
parameter_list|()
block|{
comment|// "<String>" is required to work around a javac 1.5 bug.
name|Collection
argument_list|<
name|String
argument_list|>
name|c
init|=
name|MinimalCollection
operator|.
expr|<
name|String
operator|>
name|of
argument_list|()
decl_stmt|;
name|Multiset
argument_list|<
name|String
argument_list|>
name|multiset
init|=
name|ImmutableMultiset
operator|.
name|copyOf
argument_list|(
name|c
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|multiset
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testCopyOf_collection_oneElement ()
specifier|public
name|void
name|testCopyOf_collection_oneElement
parameter_list|()
block|{
name|Collection
argument_list|<
name|String
argument_list|>
name|c
init|=
name|MinimalCollection
operator|.
name|of
argument_list|(
literal|"a"
argument_list|)
decl_stmt|;
name|Multiset
argument_list|<
name|String
argument_list|>
name|multiset
init|=
name|ImmutableMultiset
operator|.
name|copyOf
argument_list|(
name|c
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|HashMultiset
operator|.
name|create
argument_list|(
name|asList
argument_list|(
literal|"a"
argument_list|)
argument_list|)
argument_list|,
name|multiset
argument_list|)
expr_stmt|;
block|}
DECL|method|testCopyOf_collection_general ()
specifier|public
name|void
name|testCopyOf_collection_general
parameter_list|()
block|{
name|Collection
argument_list|<
name|String
argument_list|>
name|c
init|=
name|MinimalCollection
operator|.
name|of
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"a"
argument_list|)
decl_stmt|;
name|Multiset
argument_list|<
name|String
argument_list|>
name|multiset
init|=
name|ImmutableMultiset
operator|.
name|copyOf
argument_list|(
name|c
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|HashMultiset
operator|.
name|create
argument_list|(
name|asList
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"a"
argument_list|)
argument_list|)
argument_list|,
name|multiset
argument_list|)
expr_stmt|;
block|}
DECL|method|testCopyOf_collectionContainingNull ()
specifier|public
name|void
name|testCopyOf_collectionContainingNull
parameter_list|()
block|{
name|Collection
argument_list|<
name|String
argument_list|>
name|c
init|=
name|MinimalCollection
operator|.
name|of
argument_list|(
literal|"a"
argument_list|,
literal|null
argument_list|,
literal|"b"
argument_list|)
decl_stmt|;
try|try
block|{
name|ImmutableMultiset
operator|.
name|copyOf
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testCopyOf_multiset_empty ()
specifier|public
name|void
name|testCopyOf_multiset_empty
parameter_list|()
block|{
name|Multiset
argument_list|<
name|String
argument_list|>
name|c
init|=
name|HashMultiset
operator|.
name|create
argument_list|()
decl_stmt|;
name|Multiset
argument_list|<
name|String
argument_list|>
name|multiset
init|=
name|ImmutableMultiset
operator|.
name|copyOf
argument_list|(
name|c
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|multiset
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testCopyOf_multiset_oneElement ()
specifier|public
name|void
name|testCopyOf_multiset_oneElement
parameter_list|()
block|{
name|Multiset
argument_list|<
name|String
argument_list|>
name|c
init|=
name|HashMultiset
operator|.
name|create
argument_list|(
name|asList
argument_list|(
literal|"a"
argument_list|)
argument_list|)
decl_stmt|;
name|Multiset
argument_list|<
name|String
argument_list|>
name|multiset
init|=
name|ImmutableMultiset
operator|.
name|copyOf
argument_list|(
name|c
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|HashMultiset
operator|.
name|create
argument_list|(
name|asList
argument_list|(
literal|"a"
argument_list|)
argument_list|)
argument_list|,
name|multiset
argument_list|)
expr_stmt|;
block|}
DECL|method|testCopyOf_multiset_general ()
specifier|public
name|void
name|testCopyOf_multiset_general
parameter_list|()
block|{
name|Multiset
argument_list|<
name|String
argument_list|>
name|c
init|=
name|HashMultiset
operator|.
name|create
argument_list|(
name|asList
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"a"
argument_list|)
argument_list|)
decl_stmt|;
name|Multiset
argument_list|<
name|String
argument_list|>
name|multiset
init|=
name|ImmutableMultiset
operator|.
name|copyOf
argument_list|(
name|c
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|HashMultiset
operator|.
name|create
argument_list|(
name|asList
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"a"
argument_list|)
argument_list|)
argument_list|,
name|multiset
argument_list|)
expr_stmt|;
block|}
DECL|method|testCopyOf_multisetContainingNull ()
specifier|public
name|void
name|testCopyOf_multisetContainingNull
parameter_list|()
block|{
name|Multiset
argument_list|<
name|String
argument_list|>
name|c
init|=
name|HashMultiset
operator|.
name|create
argument_list|(
name|asList
argument_list|(
literal|"a"
argument_list|,
literal|null
argument_list|,
literal|"b"
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|ImmutableMultiset
operator|.
name|copyOf
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testCopyOf_iterator_empty ()
specifier|public
name|void
name|testCopyOf_iterator_empty
parameter_list|()
block|{
name|Iterator
argument_list|<
name|String
argument_list|>
name|iterator
init|=
name|Iterators
operator|.
name|emptyIterator
argument_list|()
decl_stmt|;
name|Multiset
argument_list|<
name|String
argument_list|>
name|multiset
init|=
name|ImmutableMultiset
operator|.
name|copyOf
argument_list|(
name|iterator
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|multiset
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testCopyOf_iterator_oneElement ()
specifier|public
name|void
name|testCopyOf_iterator_oneElement
parameter_list|()
block|{
name|Iterator
argument_list|<
name|String
argument_list|>
name|iterator
init|=
name|Iterators
operator|.
name|singletonIterator
argument_list|(
literal|"a"
argument_list|)
decl_stmt|;
name|Multiset
argument_list|<
name|String
argument_list|>
name|multiset
init|=
name|ImmutableMultiset
operator|.
name|copyOf
argument_list|(
name|iterator
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|HashMultiset
operator|.
name|create
argument_list|(
name|asList
argument_list|(
literal|"a"
argument_list|)
argument_list|)
argument_list|,
name|multiset
argument_list|)
expr_stmt|;
block|}
DECL|method|testCopyOf_iterator_general ()
specifier|public
name|void
name|testCopyOf_iterator_general
parameter_list|()
block|{
name|Iterator
argument_list|<
name|String
argument_list|>
name|iterator
init|=
name|asList
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"a"
argument_list|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|Multiset
argument_list|<
name|String
argument_list|>
name|multiset
init|=
name|ImmutableMultiset
operator|.
name|copyOf
argument_list|(
name|iterator
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|HashMultiset
operator|.
name|create
argument_list|(
name|asList
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"a"
argument_list|)
argument_list|)
argument_list|,
name|multiset
argument_list|)
expr_stmt|;
block|}
DECL|method|testCopyOf_iteratorContainingNull ()
specifier|public
name|void
name|testCopyOf_iteratorContainingNull
parameter_list|()
block|{
name|Iterator
argument_list|<
name|String
argument_list|>
name|iterator
init|=
name|asList
argument_list|(
literal|"a"
argument_list|,
literal|null
argument_list|,
literal|"b"
argument_list|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
try|try
block|{
name|ImmutableMultiset
operator|.
name|copyOf
argument_list|(
name|iterator
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testToImmutableMultiset ()
specifier|public
name|void
name|testToImmutableMultiset
parameter_list|()
block|{
name|BiPredicate
argument_list|<
name|ImmutableMultiset
argument_list|<
name|String
argument_list|>
argument_list|,
name|ImmutableMultiset
argument_list|<
name|String
argument_list|>
argument_list|>
name|equivalence
init|=
parameter_list|(
name|ms1
parameter_list|,
name|ms2
parameter_list|)
lambda|->
name|ms1
operator|.
name|equals
argument_list|(
name|ms2
argument_list|)
operator|&&
name|ms1
operator|.
name|entrySet
argument_list|()
operator|.
name|asList
argument_list|()
operator|.
name|equals
argument_list|(
name|ms2
operator|.
name|entrySet
argument_list|()
operator|.
name|asList
argument_list|()
argument_list|)
decl_stmt|;
name|CollectorTester
operator|.
name|of
argument_list|(
name|ImmutableMultiset
operator|.
expr|<
name|String
operator|>
name|toImmutableMultiset
argument_list|()
argument_list|,
name|equivalence
argument_list|)
operator|.
name|expectCollects
argument_list|(
name|ImmutableMultiset
operator|.
name|of
argument_list|()
argument_list|)
operator|.
name|expectCollects
argument_list|(
name|ImmutableMultiset
operator|.
name|of
argument_list|(
literal|"a"
argument_list|,
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|,
literal|"c"
argument_list|,
literal|"c"
argument_list|)
argument_list|,
literal|"a"
argument_list|,
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|,
literal|"c"
argument_list|,
literal|"c"
argument_list|)
expr_stmt|;
block|}
DECL|method|testToImmutableMultisetCountFunction ()
specifier|public
name|void
name|testToImmutableMultisetCountFunction
parameter_list|()
block|{
name|BiPredicate
argument_list|<
name|ImmutableMultiset
argument_list|<
name|String
argument_list|>
argument_list|,
name|ImmutableMultiset
argument_list|<
name|String
argument_list|>
argument_list|>
name|equivalence
init|=
parameter_list|(
name|ms1
parameter_list|,
name|ms2
parameter_list|)
lambda|->
name|ms1
operator|.
name|equals
argument_list|(
name|ms2
argument_list|)
operator|&&
name|ms1
operator|.
name|entrySet
argument_list|()
operator|.
name|asList
argument_list|()
operator|.
name|equals
argument_list|(
name|ms2
operator|.
name|entrySet
argument_list|()
operator|.
name|asList
argument_list|()
argument_list|)
decl_stmt|;
name|CollectorTester
operator|.
name|of
argument_list|(
name|ImmutableMultiset
operator|.
expr|<
name|Multiset
operator|.
name|Entry
argument_list|<
name|String
argument_list|>
argument_list|,
name|String
operator|>
name|toImmutableMultiset
argument_list|(
name|Multiset
operator|.
name|Entry
operator|::
name|getElement
argument_list|,
name|Multiset
operator|.
name|Entry
operator|::
name|getCount
argument_list|)
argument_list|,
name|equivalence
argument_list|)
operator|.
name|expectCollects
argument_list|(
name|ImmutableMultiset
operator|.
name|of
argument_list|()
argument_list|)
operator|.
name|expectCollects
argument_list|(
name|ImmutableMultiset
operator|.
name|of
argument_list|(
literal|"a"
argument_list|,
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|,
literal|"c"
argument_list|,
literal|"c"
argument_list|)
argument_list|,
name|Multisets
operator|.
name|immutableEntry
argument_list|(
literal|"a"
argument_list|,
literal|1
argument_list|)
argument_list|,
name|Multisets
operator|.
name|immutableEntry
argument_list|(
literal|"b"
argument_list|,
literal|1
argument_list|)
argument_list|,
name|Multisets
operator|.
name|immutableEntry
argument_list|(
literal|"a"
argument_list|,
literal|1
argument_list|)
argument_list|,
name|Multisets
operator|.
name|immutableEntry
argument_list|(
literal|"c"
argument_list|,
literal|3
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testToImmutableMultiset_duplicates ()
specifier|public
name|void
name|testToImmutableMultiset_duplicates
parameter_list|()
block|{
class|class
name|TypeWithDuplicates
block|{
specifier|final
name|int
name|a
decl_stmt|;
specifier|final
name|int
name|b
decl_stmt|;
name|TypeWithDuplicates
parameter_list|(
name|int
name|a
parameter_list|,
name|int
name|b
parameter_list|)
block|{
name|this
operator|.
name|a
operator|=
name|a
expr_stmt|;
name|this
operator|.
name|b
operator|=
name|b
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|a
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
return|return
name|obj
operator|instanceof
name|TypeWithDuplicates
operator|&&
operator|(
operator|(
name|TypeWithDuplicates
operator|)
name|obj
operator|)
operator|.
name|a
operator|==
name|a
return|;
block|}
specifier|public
name|boolean
name|fullEquals
parameter_list|(
name|TypeWithDuplicates
name|other
parameter_list|)
block|{
return|return
name|other
operator|!=
literal|null
operator|&&
name|a
operator|==
name|other
operator|.
name|a
operator|&&
name|b
operator|==
name|other
operator|.
name|b
return|;
block|}
block|}
name|Collector
argument_list|<
name|TypeWithDuplicates
argument_list|,
name|?
argument_list|,
name|ImmutableMultiset
argument_list|<
name|TypeWithDuplicates
argument_list|>
argument_list|>
name|collector
init|=
name|ImmutableMultiset
operator|.
name|toImmutableMultiset
argument_list|()
decl_stmt|;
name|BiPredicate
argument_list|<
name|ImmutableMultiset
argument_list|<
name|TypeWithDuplicates
argument_list|>
argument_list|,
name|ImmutableMultiset
argument_list|<
name|TypeWithDuplicates
argument_list|>
argument_list|>
name|equivalence
init|=
parameter_list|(
name|ms1
parameter_list|,
name|ms2
parameter_list|)
lambda|->
block|{
if|if
condition|(
operator|!
name|ms1
operator|.
name|equals
argument_list|(
name|ms2
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|List
argument_list|<
name|TypeWithDuplicates
argument_list|>
name|elements1
init|=
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|ms1
operator|.
name|elementSet
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|TypeWithDuplicates
argument_list|>
name|elements2
init|=
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|ms2
operator|.
name|elementSet
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ms1
operator|.
name|elementSet
argument_list|()
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|elements1
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|fullEquals
argument_list|(
name|elements2
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
decl_stmt|;
name|TypeWithDuplicates
name|a
init|=
operator|new
name|TypeWithDuplicates
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|TypeWithDuplicates
name|b1
init|=
operator|new
name|TypeWithDuplicates
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|TypeWithDuplicates
name|b2
init|=
operator|new
name|TypeWithDuplicates
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|TypeWithDuplicates
name|c
init|=
operator|new
name|TypeWithDuplicates
argument_list|(
literal|3
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|CollectorTester
operator|.
name|of
argument_list|(
name|collector
argument_list|,
name|equivalence
argument_list|)
operator|.
name|expectCollects
argument_list|(
name|ImmutableMultiset
operator|.
expr|<
name|TypeWithDuplicates
operator|>
name|builder
argument_list|()
operator|.
name|add
argument_list|(
name|a
argument_list|)
operator|.
name|addCopies
argument_list|(
name|b1
argument_list|,
literal|2
argument_list|)
operator|.
name|add
argument_list|(
name|c
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
name|a
argument_list|,
name|b1
argument_list|,
name|c
argument_list|,
name|b2
argument_list|)
expr_stmt|;
name|collector
operator|=
name|ImmutableMultiset
operator|.
name|toImmutableMultiset
argument_list|(
name|e
lambda|->
name|e
argument_list|,
name|e
lambda|->
literal|1
argument_list|)
expr_stmt|;
name|CollectorTester
operator|.
name|of
argument_list|(
name|collector
argument_list|,
name|equivalence
argument_list|)
operator|.
name|expectCollects
argument_list|(
name|ImmutableMultiset
operator|.
expr|<
name|TypeWithDuplicates
operator|>
name|builder
argument_list|()
operator|.
name|add
argument_list|(
name|a
argument_list|)
operator|.
name|addCopies
argument_list|(
name|b1
argument_list|,
literal|2
argument_list|)
operator|.
name|add
argument_list|(
name|c
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
name|a
argument_list|,
name|b1
argument_list|,
name|c
argument_list|,
name|b2
argument_list|)
expr_stmt|;
block|}
DECL|class|CountingIterable
specifier|private
specifier|static
class|class
name|CountingIterable
implements|implements
name|Iterable
argument_list|<
name|String
argument_list|>
block|{
DECL|field|count
name|int
name|count
init|=
literal|0
decl_stmt|;
annotation|@
name|Override
DECL|method|iterator ()
specifier|public
name|Iterator
argument_list|<
name|String
argument_list|>
name|iterator
parameter_list|()
block|{
name|count
operator|++
expr_stmt|;
return|return
name|asList
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"a"
argument_list|)
operator|.
name|iterator
argument_list|()
return|;
block|}
block|}
DECL|method|testCopyOf_plainIterable ()
specifier|public
name|void
name|testCopyOf_plainIterable
parameter_list|()
block|{
name|CountingIterable
name|iterable
init|=
operator|new
name|CountingIterable
argument_list|()
decl_stmt|;
name|Multiset
argument_list|<
name|String
argument_list|>
name|multiset
init|=
name|ImmutableMultiset
operator|.
name|copyOf
argument_list|(
name|iterable
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|HashMultiset
operator|.
name|create
argument_list|(
name|asList
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"a"
argument_list|)
argument_list|)
argument_list|,
name|multiset
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|iterable
operator|.
name|count
argument_list|)
expr_stmt|;
block|}
DECL|method|testCopyOf_hashMultiset ()
specifier|public
name|void
name|testCopyOf_hashMultiset
parameter_list|()
block|{
name|Multiset
argument_list|<
name|String
argument_list|>
name|iterable
init|=
name|HashMultiset
operator|.
name|create
argument_list|(
name|asList
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"a"
argument_list|)
argument_list|)
decl_stmt|;
name|Multiset
argument_list|<
name|String
argument_list|>
name|multiset
init|=
name|ImmutableMultiset
operator|.
name|copyOf
argument_list|(
name|iterable
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|HashMultiset
operator|.
name|create
argument_list|(
name|asList
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"a"
argument_list|)
argument_list|)
argument_list|,
name|multiset
argument_list|)
expr_stmt|;
block|}
DECL|method|testCopyOf_treeMultiset ()
specifier|public
name|void
name|testCopyOf_treeMultiset
parameter_list|()
block|{
name|Multiset
argument_list|<
name|String
argument_list|>
name|iterable
init|=
name|TreeMultiset
operator|.
name|create
argument_list|(
name|asList
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"a"
argument_list|)
argument_list|)
decl_stmt|;
name|Multiset
argument_list|<
name|String
argument_list|>
name|multiset
init|=
name|ImmutableMultiset
operator|.
name|copyOf
argument_list|(
name|iterable
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|HashMultiset
operator|.
name|create
argument_list|(
name|asList
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"a"
argument_list|)
argument_list|)
argument_list|,
name|multiset
argument_list|)
expr_stmt|;
block|}
DECL|method|testCopyOf_shortcut_empty ()
specifier|public
name|void
name|testCopyOf_shortcut_empty
parameter_list|()
block|{
name|Collection
argument_list|<
name|String
argument_list|>
name|c
init|=
name|ImmutableMultiset
operator|.
name|of
argument_list|()
decl_stmt|;
name|assertSame
argument_list|(
name|c
argument_list|,
name|ImmutableMultiset
operator|.
name|copyOf
argument_list|(
name|c
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testCopyOf_shortcut_singleton ()
specifier|public
name|void
name|testCopyOf_shortcut_singleton
parameter_list|()
block|{
name|Collection
argument_list|<
name|String
argument_list|>
name|c
init|=
name|ImmutableMultiset
operator|.
name|of
argument_list|(
literal|"a"
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
name|c
argument_list|,
name|ImmutableMultiset
operator|.
name|copyOf
argument_list|(
name|c
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testCopyOf_shortcut_immutableMultiset ()
specifier|public
name|void
name|testCopyOf_shortcut_immutableMultiset
parameter_list|()
block|{
name|Collection
argument_list|<
name|String
argument_list|>
name|c
init|=
name|ImmutableMultiset
operator|.
name|of
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
name|c
argument_list|,
name|ImmutableMultiset
operator|.
name|copyOf
argument_list|(
name|c
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testBuilderAdd ()
specifier|public
name|void
name|testBuilderAdd
parameter_list|()
block|{
name|ImmutableMultiset
argument_list|<
name|String
argument_list|>
name|multiset
init|=
operator|new
name|ImmutableMultiset
operator|.
name|Builder
argument_list|<
name|String
argument_list|>
argument_list|()
operator|.
name|add
argument_list|(
literal|"a"
argument_list|)
operator|.
name|add
argument_list|(
literal|"b"
argument_list|)
operator|.
name|add
argument_list|(
literal|"a"
argument_list|)
operator|.
name|add
argument_list|(
literal|"c"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|HashMultiset
operator|.
name|create
argument_list|(
name|asList
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"a"
argument_list|,
literal|"c"
argument_list|)
argument_list|)
argument_list|,
name|multiset
argument_list|)
expr_stmt|;
block|}
DECL|method|testBuilderAddAll ()
specifier|public
name|void
name|testBuilderAddAll
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|a
init|=
name|asList
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|b
init|=
name|asList
argument_list|(
literal|"c"
argument_list|,
literal|"d"
argument_list|)
decl_stmt|;
name|ImmutableMultiset
argument_list|<
name|String
argument_list|>
name|multiset
init|=
operator|new
name|ImmutableMultiset
operator|.
name|Builder
argument_list|<
name|String
argument_list|>
argument_list|()
operator|.
name|addAll
argument_list|(
name|a
argument_list|)
operator|.
name|addAll
argument_list|(
name|b
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|HashMultiset
operator|.
name|create
argument_list|(
name|asList
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|,
literal|"d"
argument_list|)
argument_list|)
argument_list|,
name|multiset
argument_list|)
expr_stmt|;
block|}
DECL|method|testBuilderAddAllHashMultiset ()
specifier|public
name|void
name|testBuilderAddAllHashMultiset
parameter_list|()
block|{
name|Multiset
argument_list|<
name|String
argument_list|>
name|a
init|=
name|HashMultiset
operator|.
name|create
argument_list|(
name|asList
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"b"
argument_list|)
argument_list|)
decl_stmt|;
name|Multiset
argument_list|<
name|String
argument_list|>
name|b
init|=
name|HashMultiset
operator|.
name|create
argument_list|(
name|asList
argument_list|(
literal|"c"
argument_list|,
literal|"b"
argument_list|)
argument_list|)
decl_stmt|;
name|ImmutableMultiset
argument_list|<
name|String
argument_list|>
name|multiset
init|=
operator|new
name|ImmutableMultiset
operator|.
name|Builder
argument_list|<
name|String
argument_list|>
argument_list|()
operator|.
name|addAll
argument_list|(
name|a
argument_list|)
operator|.
name|addAll
argument_list|(
name|b
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|HashMultiset
operator|.
name|create
argument_list|(
name|asList
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"b"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|)
argument_list|)
argument_list|,
name|multiset
argument_list|)
expr_stmt|;
block|}
DECL|method|testBuilderAddAllImmutableMultiset ()
specifier|public
name|void
name|testBuilderAddAllImmutableMultiset
parameter_list|()
block|{
name|Multiset
argument_list|<
name|String
argument_list|>
name|a
init|=
name|ImmutableMultiset
operator|.
name|of
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"b"
argument_list|)
decl_stmt|;
name|Multiset
argument_list|<
name|String
argument_list|>
name|b
init|=
name|ImmutableMultiset
operator|.
name|of
argument_list|(
literal|"c"
argument_list|,
literal|"b"
argument_list|)
decl_stmt|;
name|ImmutableMultiset
argument_list|<
name|String
argument_list|>
name|multiset
init|=
operator|new
name|ImmutableMultiset
operator|.
name|Builder
argument_list|<
name|String
argument_list|>
argument_list|()
operator|.
name|addAll
argument_list|(
name|a
argument_list|)
operator|.
name|addAll
argument_list|(
name|b
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|HashMultiset
operator|.
name|create
argument_list|(
name|asList
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"b"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|)
argument_list|)
argument_list|,
name|multiset
argument_list|)
expr_stmt|;
block|}
DECL|method|testBuilderAddAllTreeMultiset ()
specifier|public
name|void
name|testBuilderAddAllTreeMultiset
parameter_list|()
block|{
name|Multiset
argument_list|<
name|String
argument_list|>
name|a
init|=
name|TreeMultiset
operator|.
name|create
argument_list|(
name|asList
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"b"
argument_list|)
argument_list|)
decl_stmt|;
name|Multiset
argument_list|<
name|String
argument_list|>
name|b
init|=
name|TreeMultiset
operator|.
name|create
argument_list|(
name|asList
argument_list|(
literal|"c"
argument_list|,
literal|"b"
argument_list|)
argument_list|)
decl_stmt|;
name|ImmutableMultiset
argument_list|<
name|String
argument_list|>
name|multiset
init|=
operator|new
name|ImmutableMultiset
operator|.
name|Builder
argument_list|<
name|String
argument_list|>
argument_list|()
operator|.
name|addAll
argument_list|(
name|a
argument_list|)
operator|.
name|addAll
argument_list|(
name|b
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|HashMultiset
operator|.
name|create
argument_list|(
name|asList
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"b"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|)
argument_list|)
argument_list|,
name|multiset
argument_list|)
expr_stmt|;
block|}
DECL|method|testBuilderAddAllIterator ()
specifier|public
name|void
name|testBuilderAddAllIterator
parameter_list|()
block|{
name|Iterator
argument_list|<
name|String
argument_list|>
name|iterator
init|=
name|asList
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"a"
argument_list|,
literal|"c"
argument_list|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|ImmutableMultiset
argument_list|<
name|String
argument_list|>
name|multiset
init|=
operator|new
name|ImmutableMultiset
operator|.
name|Builder
argument_list|<
name|String
argument_list|>
argument_list|()
operator|.
name|addAll
argument_list|(
name|iterator
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|HashMultiset
operator|.
name|create
argument_list|(
name|asList
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"a"
argument_list|,
literal|"c"
argument_list|)
argument_list|)
argument_list|,
name|multiset
argument_list|)
expr_stmt|;
block|}
DECL|method|testBuilderAddCopies ()
specifier|public
name|void
name|testBuilderAddCopies
parameter_list|()
block|{
name|ImmutableMultiset
argument_list|<
name|String
argument_list|>
name|multiset
init|=
operator|new
name|ImmutableMultiset
operator|.
name|Builder
argument_list|<
name|String
argument_list|>
argument_list|()
operator|.
name|addCopies
argument_list|(
literal|"a"
argument_list|,
literal|2
argument_list|)
operator|.
name|addCopies
argument_list|(
literal|"b"
argument_list|,
literal|3
argument_list|)
operator|.
name|addCopies
argument_list|(
literal|"c"
argument_list|,
literal|0
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|HashMultiset
operator|.
name|create
argument_list|(
name|asList
argument_list|(
literal|"a"
argument_list|,
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"b"
argument_list|,
literal|"b"
argument_list|)
argument_list|)
argument_list|,
name|multiset
argument_list|)
expr_stmt|;
block|}
DECL|method|testBuilderSetCount ()
specifier|public
name|void
name|testBuilderSetCount
parameter_list|()
block|{
name|ImmutableMultiset
argument_list|<
name|String
argument_list|>
name|multiset
init|=
operator|new
name|ImmutableMultiset
operator|.
name|Builder
argument_list|<
name|String
argument_list|>
argument_list|()
operator|.
name|add
argument_list|(
literal|"a"
argument_list|)
operator|.
name|setCount
argument_list|(
literal|"a"
argument_list|,
literal|2
argument_list|)
operator|.
name|setCount
argument_list|(
literal|"b"
argument_list|,
literal|3
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|HashMultiset
operator|.
name|create
argument_list|(
name|asList
argument_list|(
literal|"a"
argument_list|,
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"b"
argument_list|,
literal|"b"
argument_list|)
argument_list|)
argument_list|,
name|multiset
argument_list|)
expr_stmt|;
block|}
DECL|method|testBuilderAddHandlesNullsCorrectly ()
specifier|public
name|void
name|testBuilderAddHandlesNullsCorrectly
parameter_list|()
block|{
name|ImmutableMultiset
operator|.
name|Builder
argument_list|<
name|String
argument_list|>
name|builder
init|=
name|ImmutableMultiset
operator|.
name|builder
argument_list|()
decl_stmt|;
try|try
block|{
name|builder
operator|.
name|add
argument_list|(
operator|(
name|String
operator|)
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected NullPointerException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testBuilderAddAllHandlesNullsCorrectly ()
specifier|public
name|void
name|testBuilderAddAllHandlesNullsCorrectly
parameter_list|()
block|{
name|ImmutableMultiset
operator|.
name|Builder
argument_list|<
name|String
argument_list|>
name|builder
init|=
name|ImmutableMultiset
operator|.
name|builder
argument_list|()
decl_stmt|;
try|try
block|{
name|builder
operator|.
name|addAll
argument_list|(
operator|(
name|Collection
argument_list|<
name|String
argument_list|>
operator|)
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected NullPointerException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|expected
parameter_list|)
block|{     }
name|builder
operator|=
name|ImmutableMultiset
operator|.
name|builder
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|listWithNulls
init|=
name|asList
argument_list|(
literal|"a"
argument_list|,
literal|null
argument_list|,
literal|"b"
argument_list|)
decl_stmt|;
try|try
block|{
name|builder
operator|.
name|addAll
argument_list|(
name|listWithNulls
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected NullPointerException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|expected
parameter_list|)
block|{     }
name|builder
operator|=
name|ImmutableMultiset
operator|.
name|builder
argument_list|()
expr_stmt|;
name|Multiset
argument_list|<
name|String
argument_list|>
name|multisetWithNull
init|=
name|LinkedHashMultiset
operator|.
name|create
argument_list|(
name|asList
argument_list|(
literal|"a"
argument_list|,
literal|null
argument_list|,
literal|"b"
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|builder
operator|.
name|addAll
argument_list|(
name|multisetWithNull
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected NullPointerException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testBuilderAddCopiesHandlesNullsCorrectly ()
specifier|public
name|void
name|testBuilderAddCopiesHandlesNullsCorrectly
parameter_list|()
block|{
name|ImmutableMultiset
operator|.
name|Builder
argument_list|<
name|String
argument_list|>
name|builder
init|=
name|ImmutableMultiset
operator|.
name|builder
argument_list|()
decl_stmt|;
try|try
block|{
name|builder
operator|.
name|addCopies
argument_list|(
literal|null
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected NullPointerException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testBuilderAddCopiesIllegal ()
specifier|public
name|void
name|testBuilderAddCopiesIllegal
parameter_list|()
block|{
name|ImmutableMultiset
operator|.
name|Builder
argument_list|<
name|String
argument_list|>
name|builder
init|=
name|ImmutableMultiset
operator|.
name|builder
argument_list|()
decl_stmt|;
try|try
block|{
name|builder
operator|.
name|addCopies
argument_list|(
literal|"a"
argument_list|,
operator|-
literal|2
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected IllegalArgumentException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testBuilderSetCountHandlesNullsCorrectly ()
specifier|public
name|void
name|testBuilderSetCountHandlesNullsCorrectly
parameter_list|()
block|{
name|ImmutableMultiset
operator|.
name|Builder
argument_list|<
name|String
argument_list|>
name|builder
init|=
name|ImmutableMultiset
operator|.
name|builder
argument_list|()
decl_stmt|;
try|try
block|{
name|builder
operator|.
name|setCount
argument_list|(
literal|null
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected NullPointerException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testBuilderSetCountIllegal ()
specifier|public
name|void
name|testBuilderSetCountIllegal
parameter_list|()
block|{
name|ImmutableMultiset
operator|.
name|Builder
argument_list|<
name|String
argument_list|>
name|builder
init|=
name|ImmutableMultiset
operator|.
name|builder
argument_list|()
decl_stmt|;
try|try
block|{
name|builder
operator|.
name|setCount
argument_list|(
literal|"a"
argument_list|,
operator|-
literal|2
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected IllegalArgumentException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{     }
block|}
annotation|@
name|GwtIncompatible
comment|// NullPointerTester
DECL|method|testNullPointers ()
specifier|public
name|void
name|testNullPointers
parameter_list|()
block|{
name|NullPointerTester
name|tester
init|=
operator|new
name|NullPointerTester
argument_list|()
decl_stmt|;
name|tester
operator|.
name|testAllPublicStaticMethods
argument_list|(
name|ImmutableMultiset
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
comment|// SerializableTester
DECL|method|testSerialization_empty ()
specifier|public
name|void
name|testSerialization_empty
parameter_list|()
block|{
name|Collection
argument_list|<
name|String
argument_list|>
name|c
init|=
name|ImmutableMultiset
operator|.
name|of
argument_list|()
decl_stmt|;
name|assertSame
argument_list|(
name|c
argument_list|,
name|SerializableTester
operator|.
name|reserialize
argument_list|(
name|c
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
comment|// SerializableTester
DECL|method|testSerialization_multiple ()
specifier|public
name|void
name|testSerialization_multiple
parameter_list|()
block|{
name|Collection
argument_list|<
name|String
argument_list|>
name|c
init|=
name|ImmutableMultiset
operator|.
name|of
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"a"
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|String
argument_list|>
name|copy
init|=
name|SerializableTester
operator|.
name|reserializeAndAssert
argument_list|(
name|c
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|copy
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|"a"
argument_list|,
literal|"a"
argument_list|,
literal|"b"
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
comment|// SerializableTester
DECL|method|testSerialization_elementSet ()
specifier|public
name|void
name|testSerialization_elementSet
parameter_list|()
block|{
name|Multiset
argument_list|<
name|String
argument_list|>
name|c
init|=
name|ImmutableMultiset
operator|.
name|of
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"a"
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|String
argument_list|>
name|copy
init|=
name|LenientSerializableTester
operator|.
name|reserializeAndAssertLenient
argument_list|(
name|c
operator|.
name|elementSet
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|copy
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
comment|// SerializableTester
DECL|method|testSerialization_entrySet ()
specifier|public
name|void
name|testSerialization_entrySet
parameter_list|()
block|{
name|Multiset
argument_list|<
name|String
argument_list|>
name|c
init|=
name|ImmutableMultiset
operator|.
name|of
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|)
decl_stmt|;
name|SerializableTester
operator|.
name|reserializeAndAssert
argument_list|(
name|c
operator|.
name|entrySet
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testEquals_immutableMultiset ()
specifier|public
name|void
name|testEquals_immutableMultiset
parameter_list|()
block|{
name|Collection
argument_list|<
name|String
argument_list|>
name|c
init|=
name|ImmutableMultiset
operator|.
name|of
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"a"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|c
argument_list|,
name|ImmutableMultiset
operator|.
name|of
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|c
argument_list|,
name|ImmutableMultiset
operator|.
name|of
argument_list|(
literal|"a"
argument_list|,
literal|"a"
argument_list|,
literal|"b"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|c
argument_list|)
operator|.
name|isNotEqualTo
argument_list|(
name|ImmutableMultiset
operator|.
name|of
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|c
argument_list|)
operator|.
name|isNotEqualTo
argument_list|(
name|ImmutableMultiset
operator|.
name|of
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|,
literal|"d"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testIterationOrder ()
specifier|public
name|void
name|testIterationOrder
parameter_list|()
block|{
name|Collection
argument_list|<
name|String
argument_list|>
name|c
init|=
name|ImmutableMultiset
operator|.
name|of
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"a"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|c
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|"a"
argument_list|,
literal|"a"
argument_list|,
literal|"b"
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|ImmutableMultiset
operator|.
name|of
argument_list|(
literal|"c"
argument_list|,
literal|"b"
argument_list|,
literal|"a"
argument_list|,
literal|"c"
argument_list|)
operator|.
name|elementSet
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|"c"
argument_list|,
literal|"b"
argument_list|,
literal|"a"
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
block|}
DECL|method|testMultisetWrites ()
specifier|public
name|void
name|testMultisetWrites
parameter_list|()
block|{
name|Multiset
argument_list|<
name|String
argument_list|>
name|multiset
init|=
name|ImmutableMultiset
operator|.
name|of
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"a"
argument_list|)
decl_stmt|;
name|UnmodifiableCollectionTests
operator|.
name|assertMultisetIsUnmodifiable
argument_list|(
name|multiset
argument_list|,
literal|"test"
argument_list|)
expr_stmt|;
block|}
DECL|method|testAsList ()
specifier|public
name|void
name|testAsList
parameter_list|()
block|{
name|ImmutableMultiset
argument_list|<
name|String
argument_list|>
name|multiset
init|=
name|ImmutableMultiset
operator|.
name|of
argument_list|(
literal|"a"
argument_list|,
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"b"
argument_list|,
literal|"b"
argument_list|)
decl_stmt|;
name|ImmutableList
argument_list|<
name|String
argument_list|>
name|list
init|=
name|multiset
operator|.
name|asList
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"a"
argument_list|,
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"b"
argument_list|,
literal|"b"
argument_list|)
argument_list|,
name|list
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|list
operator|.
name|indexOf
argument_list|(
literal|"b"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|list
operator|.
name|lastIndexOf
argument_list|(
literal|"b"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
comment|// SerializableTester
DECL|method|testSerialization_asList ()
specifier|public
name|void
name|testSerialization_asList
parameter_list|()
block|{
name|ImmutableMultiset
argument_list|<
name|String
argument_list|>
name|multiset
init|=
name|ImmutableMultiset
operator|.
name|of
argument_list|(
literal|"a"
argument_list|,
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"b"
argument_list|,
literal|"b"
argument_list|)
decl_stmt|;
name|SerializableTester
operator|.
name|reserializeAndAssert
argument_list|(
name|multiset
operator|.
name|asList
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testEquals ()
specifier|public
name|void
name|testEquals
parameter_list|()
block|{
operator|new
name|EqualsTester
argument_list|()
operator|.
name|addEqualityGroup
argument_list|(
name|ImmutableMultiset
operator|.
name|of
argument_list|()
argument_list|,
name|ImmutableMultiset
operator|.
name|of
argument_list|()
argument_list|)
operator|.
name|addEqualityGroup
argument_list|(
name|ImmutableMultiset
operator|.
name|of
argument_list|(
literal|1
argument_list|)
argument_list|,
name|ImmutableMultiset
operator|.
name|of
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|addEqualityGroup
argument_list|(
name|ImmutableMultiset
operator|.
name|of
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|,
name|ImmutableMultiset
operator|.
name|of
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|)
operator|.
name|addEqualityGroup
argument_list|(
name|ImmutableMultiset
operator|.
name|of
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
argument_list|,
name|ImmutableMultiset
operator|.
name|of
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|)
operator|.
name|testEquals
argument_list|()
expr_stmt|;
block|}
DECL|method|testIterationOrderThroughBuilderRemovals ()
specifier|public
name|void
name|testIterationOrderThroughBuilderRemovals
parameter_list|()
block|{
name|ImmutableMultiset
operator|.
name|Builder
argument_list|<
name|String
argument_list|>
name|builder
init|=
name|ImmutableMultiset
operator|.
name|builder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|addCopies
argument_list|(
literal|"a"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|builder
operator|.
name|add
argument_list|(
literal|"b"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|add
argument_list|(
literal|"c"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setCount
argument_list|(
literal|"b"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|ImmutableMultiset
argument_list|<
name|String
argument_list|>
name|multiset
init|=
name|builder
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|multiset
operator|.
name|elementSet
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|"a"
argument_list|,
literal|"c"
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
name|builder
operator|.
name|add
argument_list|(
literal|"b"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|builder
operator|.
name|build
argument_list|()
operator|.
name|elementSet
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|"a"
argument_list|,
literal|"c"
argument_list|,
literal|"b"
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|multiset
operator|.
name|elementSet
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|"a"
argument_list|,
literal|"c"
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

