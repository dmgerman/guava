begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2008 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.collect
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtCompatible
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtIncompatible
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|MapConstraintsTest
operator|.
name|TestKeyException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|MapConstraintsTest
operator|.
name|TestValueException
import|;
end_import

begin_comment
comment|/**  * Tests for {@link MapConstraints#constrainedBiMap}.  *  * @author Jared Levy  */
end_comment

begin_class
annotation|@
name|GwtCompatible
argument_list|(
name|emulated
operator|=
literal|true
argument_list|)
DECL|class|ConstrainedBiMapTest
specifier|public
class|class
name|ConstrainedBiMapTest
extends|extends
name|AbstractBiMapTest
block|{
DECL|field|TEST_KEY
specifier|private
specifier|static
specifier|final
name|Integer
name|TEST_KEY
init|=
literal|42
decl_stmt|;
DECL|field|TEST_VALUE
specifier|private
specifier|static
specifier|final
name|String
name|TEST_VALUE
init|=
literal|"test"
decl_stmt|;
DECL|field|TEST_CONSTRAINT
specifier|private
specifier|static
specifier|final
name|MapConstraint
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|TEST_CONSTRAINT
init|=
operator|new
name|TestConstraint
argument_list|()
decl_stmt|;
DECL|class|TestConstraint
specifier|private
specifier|static
specifier|final
class|class
name|TestConstraint
implements|implements
name|MapConstraint
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
block|{
annotation|@
name|Override
DECL|method|checkKeyValue (Integer key, String value)
specifier|public
name|void
name|checkKeyValue
parameter_list|(
name|Integer
name|key
parameter_list|,
name|String
name|value
parameter_list|)
block|{
if|if
condition|(
name|TEST_KEY
operator|.
name|equals
argument_list|(
name|key
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|TestKeyException
argument_list|()
throw|;
block|}
if|if
condition|(
name|TEST_VALUE
operator|.
name|equals
argument_list|(
name|value
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|TestValueException
argument_list|()
throw|;
block|}
block|}
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|0
decl_stmt|;
block|}
DECL|method|create ()
annotation|@
name|Override
specifier|protected
name|BiMap
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|create
parameter_list|()
block|{
return|return
name|MapConstraints
operator|.
name|constrainedBiMap
argument_list|(
name|HashBiMap
operator|.
expr|<
name|Integer
argument_list|,
name|String
operator|>
name|create
argument_list|()
argument_list|,
name|TEST_CONSTRAINT
argument_list|)
return|;
block|}
comment|// not serializable
annotation|@
name|GwtIncompatible
argument_list|(
literal|"SerializableTester"
argument_list|)
annotation|@
name|Override
DECL|method|testSerialization ()
specifier|public
name|void
name|testSerialization
parameter_list|()
block|{}
annotation|@
name|GwtIncompatible
argument_list|(
literal|"SerializableTester"
argument_list|)
annotation|@
name|Override
DECL|method|testSerializationWithInverseEqual ()
specifier|public
name|void
name|testSerializationWithInverseEqual
parameter_list|()
block|{}
annotation|@
name|GwtIncompatible
argument_list|(
literal|"SerializableTester"
argument_list|)
annotation|@
name|Override
DECL|method|testSerializationWithInverseSame ()
specifier|public
name|void
name|testSerializationWithInverseSame
parameter_list|()
block|{}
block|}
end_class

end_unit

