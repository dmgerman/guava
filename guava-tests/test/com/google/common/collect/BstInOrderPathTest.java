begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2011 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except  * in compliance with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software distributed under the  * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either  * express or implied. See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.collect
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|BstSide
operator|.
name|LEFT
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|BstSide
operator|.
name|RIGHT
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|BstTesting
operator|.
name|defaultNullPointerTester
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|BstTesting
operator|.
name|extension
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|BstTesting
operator|.
name|pathToList
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|contrib
operator|.
name|truth
operator|.
name|Truth
operator|.
name|ASSERT
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtCompatible
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtIncompatible
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|BstTesting
operator|.
name|SimpleNode
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_comment
comment|/**  * Tests for {@code BstInOrderPath}.  *  * @author Louis Wasserman  */
end_comment

begin_class
annotation|@
name|GwtCompatible
argument_list|(
name|emulated
operator|=
literal|true
argument_list|)
DECL|class|BstInOrderPathTest
specifier|public
class|class
name|BstInOrderPathTest
extends|extends
name|TestCase
block|{
DECL|method|testFullTreeRight ()
specifier|public
name|void
name|testFullTreeRight
parameter_list|()
block|{
comment|//    d
comment|//   / \
comment|//  b   f
comment|// / \ / \
comment|// a c e g
name|SimpleNode
name|a
init|=
operator|new
name|SimpleNode
argument_list|(
literal|'a'
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|SimpleNode
name|c
init|=
operator|new
name|SimpleNode
argument_list|(
literal|'c'
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|SimpleNode
name|b
init|=
operator|new
name|SimpleNode
argument_list|(
literal|'b'
argument_list|,
name|a
argument_list|,
name|c
argument_list|)
decl_stmt|;
name|SimpleNode
name|e
init|=
operator|new
name|SimpleNode
argument_list|(
literal|'e'
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|SimpleNode
name|g
init|=
operator|new
name|SimpleNode
argument_list|(
literal|'g'
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|SimpleNode
name|f
init|=
operator|new
name|SimpleNode
argument_list|(
literal|'f'
argument_list|,
name|e
argument_list|,
name|g
argument_list|)
decl_stmt|;
name|SimpleNode
name|d
init|=
operator|new
name|SimpleNode
argument_list|(
literal|'d'
argument_list|,
name|b
argument_list|,
name|f
argument_list|)
decl_stmt|;
name|BstPathFactory
argument_list|<
name|SimpleNode
argument_list|,
name|BstInOrderPath
argument_list|<
name|SimpleNode
argument_list|>
argument_list|>
name|factory
init|=
name|BstInOrderPath
operator|.
name|inOrderFactory
argument_list|()
decl_stmt|;
name|BstInOrderPath
argument_list|<
name|SimpleNode
argument_list|>
name|path
init|=
name|extension
argument_list|(
name|factory
argument_list|,
name|d
argument_list|,
name|LEFT
argument_list|,
name|LEFT
argument_list|)
decl_stmt|;
name|ASSERT
operator|.
name|that
argument_list|(
name|pathToList
argument_list|(
name|path
argument_list|)
argument_list|)
operator|.
name|hasContentsInOrder
argument_list|(
name|a
argument_list|,
name|b
argument_list|,
name|d
argument_list|)
expr_stmt|;
name|path
operator|=
name|testNextPathIs
argument_list|(
name|path
argument_list|,
name|b
argument_list|,
name|d
argument_list|)
expr_stmt|;
name|path
operator|=
name|testNextPathIs
argument_list|(
name|path
argument_list|,
name|c
argument_list|,
name|b
argument_list|,
name|d
argument_list|)
expr_stmt|;
name|path
operator|=
name|testNextPathIs
argument_list|(
name|path
argument_list|,
name|d
argument_list|)
expr_stmt|;
name|path
operator|=
name|testNextPathIs
argument_list|(
name|path
argument_list|,
name|e
argument_list|,
name|f
argument_list|,
name|d
argument_list|)
expr_stmt|;
name|path
operator|=
name|testNextPathIs
argument_list|(
name|path
argument_list|,
name|f
argument_list|,
name|d
argument_list|)
expr_stmt|;
name|path
operator|=
name|testNextPathIs
argument_list|(
name|path
argument_list|,
name|g
argument_list|,
name|f
argument_list|,
name|d
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|path
operator|.
name|hasNext
argument_list|(
name|RIGHT
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testFullTreeLeft ()
specifier|public
name|void
name|testFullTreeLeft
parameter_list|()
block|{
comment|//    d
comment|//   / \
comment|//  b   f
comment|// / \ / \
comment|// a c e g
name|SimpleNode
name|a
init|=
operator|new
name|SimpleNode
argument_list|(
literal|'a'
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|SimpleNode
name|c
init|=
operator|new
name|SimpleNode
argument_list|(
literal|'c'
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|SimpleNode
name|b
init|=
operator|new
name|SimpleNode
argument_list|(
literal|'b'
argument_list|,
name|a
argument_list|,
name|c
argument_list|)
decl_stmt|;
name|SimpleNode
name|e
init|=
operator|new
name|SimpleNode
argument_list|(
literal|'e'
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|SimpleNode
name|g
init|=
operator|new
name|SimpleNode
argument_list|(
literal|'g'
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|SimpleNode
name|f
init|=
operator|new
name|SimpleNode
argument_list|(
literal|'f'
argument_list|,
name|e
argument_list|,
name|g
argument_list|)
decl_stmt|;
name|SimpleNode
name|d
init|=
operator|new
name|SimpleNode
argument_list|(
literal|'d'
argument_list|,
name|b
argument_list|,
name|f
argument_list|)
decl_stmt|;
name|BstPathFactory
argument_list|<
name|SimpleNode
argument_list|,
name|BstInOrderPath
argument_list|<
name|SimpleNode
argument_list|>
argument_list|>
name|factory
init|=
name|BstInOrderPath
operator|.
name|inOrderFactory
argument_list|()
decl_stmt|;
name|BstInOrderPath
argument_list|<
name|SimpleNode
argument_list|>
name|path
init|=
name|extension
argument_list|(
name|factory
argument_list|,
name|d
argument_list|,
name|RIGHT
argument_list|,
name|RIGHT
argument_list|)
decl_stmt|;
name|ASSERT
operator|.
name|that
argument_list|(
name|pathToList
argument_list|(
name|path
argument_list|)
argument_list|)
operator|.
name|hasContentsInOrder
argument_list|(
name|g
argument_list|,
name|f
argument_list|,
name|d
argument_list|)
expr_stmt|;
name|path
operator|=
name|testPrevPathIs
argument_list|(
name|path
argument_list|,
name|f
argument_list|,
name|d
argument_list|)
expr_stmt|;
name|path
operator|=
name|testPrevPathIs
argument_list|(
name|path
argument_list|,
name|e
argument_list|,
name|f
argument_list|,
name|d
argument_list|)
expr_stmt|;
name|path
operator|=
name|testPrevPathIs
argument_list|(
name|path
argument_list|,
name|d
argument_list|)
expr_stmt|;
name|path
operator|=
name|testPrevPathIs
argument_list|(
name|path
argument_list|,
name|c
argument_list|,
name|b
argument_list|,
name|d
argument_list|)
expr_stmt|;
name|path
operator|=
name|testPrevPathIs
argument_list|(
name|path
argument_list|,
name|b
argument_list|,
name|d
argument_list|)
expr_stmt|;
name|path
operator|=
name|testPrevPathIs
argument_list|(
name|path
argument_list|,
name|a
argument_list|,
name|b
argument_list|,
name|d
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|path
operator|.
name|hasNext
argument_list|(
name|LEFT
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testPartialTree1Right ()
specifier|public
name|void
name|testPartialTree1Right
parameter_list|()
block|{
comment|//    d
comment|//   / \
comment|//  b   f
comment|// /     \
comment|// a     g
name|SimpleNode
name|a
init|=
operator|new
name|SimpleNode
argument_list|(
literal|'a'
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|SimpleNode
name|b
init|=
operator|new
name|SimpleNode
argument_list|(
literal|'b'
argument_list|,
name|a
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|SimpleNode
name|g
init|=
operator|new
name|SimpleNode
argument_list|(
literal|'g'
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|SimpleNode
name|f
init|=
operator|new
name|SimpleNode
argument_list|(
literal|'f'
argument_list|,
literal|null
argument_list|,
name|g
argument_list|)
decl_stmt|;
name|SimpleNode
name|d
init|=
operator|new
name|SimpleNode
argument_list|(
literal|'d'
argument_list|,
name|b
argument_list|,
name|f
argument_list|)
decl_stmt|;
name|BstPathFactory
argument_list|<
name|SimpleNode
argument_list|,
name|BstInOrderPath
argument_list|<
name|SimpleNode
argument_list|>
argument_list|>
name|factory
init|=
name|BstInOrderPath
operator|.
name|inOrderFactory
argument_list|()
decl_stmt|;
name|BstInOrderPath
argument_list|<
name|SimpleNode
argument_list|>
name|path
init|=
name|extension
argument_list|(
name|factory
argument_list|,
name|d
argument_list|,
name|LEFT
argument_list|,
name|LEFT
argument_list|)
decl_stmt|;
name|ASSERT
operator|.
name|that
argument_list|(
name|pathToList
argument_list|(
name|path
argument_list|)
argument_list|)
operator|.
name|hasContentsInOrder
argument_list|(
name|a
argument_list|,
name|b
argument_list|,
name|d
argument_list|)
expr_stmt|;
name|path
operator|=
name|testNextPathIs
argument_list|(
name|path
argument_list|,
name|b
argument_list|,
name|d
argument_list|)
expr_stmt|;
name|path
operator|=
name|testNextPathIs
argument_list|(
name|path
argument_list|,
name|d
argument_list|)
expr_stmt|;
name|path
operator|=
name|testNextPathIs
argument_list|(
name|path
argument_list|,
name|f
argument_list|,
name|d
argument_list|)
expr_stmt|;
name|path
operator|=
name|testNextPathIs
argument_list|(
name|path
argument_list|,
name|g
argument_list|,
name|f
argument_list|,
name|d
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|path
operator|.
name|hasNext
argument_list|(
name|RIGHT
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testPartialTree1Left ()
specifier|public
name|void
name|testPartialTree1Left
parameter_list|()
block|{
comment|//    d
comment|//   / \
comment|//  b   f
comment|// /     \
comment|// a     g
name|SimpleNode
name|a
init|=
operator|new
name|SimpleNode
argument_list|(
literal|'a'
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|SimpleNode
name|b
init|=
operator|new
name|SimpleNode
argument_list|(
literal|'b'
argument_list|,
name|a
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|SimpleNode
name|g
init|=
operator|new
name|SimpleNode
argument_list|(
literal|'g'
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|SimpleNode
name|f
init|=
operator|new
name|SimpleNode
argument_list|(
literal|'f'
argument_list|,
literal|null
argument_list|,
name|g
argument_list|)
decl_stmt|;
name|SimpleNode
name|d
init|=
operator|new
name|SimpleNode
argument_list|(
literal|'d'
argument_list|,
name|b
argument_list|,
name|f
argument_list|)
decl_stmt|;
name|BstPathFactory
argument_list|<
name|SimpleNode
argument_list|,
name|BstInOrderPath
argument_list|<
name|SimpleNode
argument_list|>
argument_list|>
name|factory
init|=
name|BstInOrderPath
operator|.
name|inOrderFactory
argument_list|()
decl_stmt|;
name|BstInOrderPath
argument_list|<
name|SimpleNode
argument_list|>
name|path
init|=
name|extension
argument_list|(
name|factory
argument_list|,
name|d
argument_list|,
name|RIGHT
argument_list|,
name|RIGHT
argument_list|)
decl_stmt|;
name|ASSERT
operator|.
name|that
argument_list|(
name|pathToList
argument_list|(
name|path
argument_list|)
argument_list|)
operator|.
name|hasContentsInOrder
argument_list|(
name|g
argument_list|,
name|f
argument_list|,
name|d
argument_list|)
expr_stmt|;
name|path
operator|=
name|testPrevPathIs
argument_list|(
name|path
argument_list|,
name|f
argument_list|,
name|d
argument_list|)
expr_stmt|;
name|path
operator|=
name|testPrevPathIs
argument_list|(
name|path
argument_list|,
name|d
argument_list|)
expr_stmt|;
name|path
operator|=
name|testPrevPathIs
argument_list|(
name|path
argument_list|,
name|b
argument_list|,
name|d
argument_list|)
expr_stmt|;
name|path
operator|=
name|testPrevPathIs
argument_list|(
name|path
argument_list|,
name|a
argument_list|,
name|b
argument_list|,
name|d
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|path
operator|.
name|hasNext
argument_list|(
name|LEFT
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testPartialTree2Right ()
specifier|public
name|void
name|testPartialTree2Right
parameter_list|()
block|{
comment|//    d
comment|//   / \
comment|//  b   f
comment|//   \ /
comment|//   c e
name|SimpleNode
name|c
init|=
operator|new
name|SimpleNode
argument_list|(
literal|'c'
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|SimpleNode
name|b
init|=
operator|new
name|SimpleNode
argument_list|(
literal|'b'
argument_list|,
literal|null
argument_list|,
name|c
argument_list|)
decl_stmt|;
name|SimpleNode
name|e
init|=
operator|new
name|SimpleNode
argument_list|(
literal|'e'
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|SimpleNode
name|f
init|=
operator|new
name|SimpleNode
argument_list|(
literal|'f'
argument_list|,
name|e
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|SimpleNode
name|d
init|=
operator|new
name|SimpleNode
argument_list|(
literal|'d'
argument_list|,
name|b
argument_list|,
name|f
argument_list|)
decl_stmt|;
name|BstPathFactory
argument_list|<
name|SimpleNode
argument_list|,
name|BstInOrderPath
argument_list|<
name|SimpleNode
argument_list|>
argument_list|>
name|factory
init|=
name|BstInOrderPath
operator|.
name|inOrderFactory
argument_list|()
decl_stmt|;
name|BstInOrderPath
argument_list|<
name|SimpleNode
argument_list|>
name|path
init|=
name|extension
argument_list|(
name|factory
argument_list|,
name|d
argument_list|,
name|LEFT
argument_list|)
decl_stmt|;
name|ASSERT
operator|.
name|that
argument_list|(
name|pathToList
argument_list|(
name|path
argument_list|)
argument_list|)
operator|.
name|hasContentsInOrder
argument_list|(
name|b
argument_list|,
name|d
argument_list|)
expr_stmt|;
name|path
operator|=
name|testNextPathIs
argument_list|(
name|path
argument_list|,
name|c
argument_list|,
name|b
argument_list|,
name|d
argument_list|)
expr_stmt|;
name|path
operator|=
name|testNextPathIs
argument_list|(
name|path
argument_list|,
name|d
argument_list|)
expr_stmt|;
name|path
operator|=
name|testNextPathIs
argument_list|(
name|path
argument_list|,
name|e
argument_list|,
name|f
argument_list|,
name|d
argument_list|)
expr_stmt|;
name|path
operator|=
name|testNextPathIs
argument_list|(
name|path
argument_list|,
name|f
argument_list|,
name|d
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|path
operator|.
name|hasNext
argument_list|(
name|RIGHT
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testPartialTree2Left ()
specifier|public
name|void
name|testPartialTree2Left
parameter_list|()
block|{
comment|//    d
comment|//   / \
comment|//  b   f
comment|//   \ /
comment|//   c e
name|SimpleNode
name|c
init|=
operator|new
name|SimpleNode
argument_list|(
literal|'c'
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|SimpleNode
name|b
init|=
operator|new
name|SimpleNode
argument_list|(
literal|'b'
argument_list|,
literal|null
argument_list|,
name|c
argument_list|)
decl_stmt|;
name|SimpleNode
name|e
init|=
operator|new
name|SimpleNode
argument_list|(
literal|'e'
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|SimpleNode
name|f
init|=
operator|new
name|SimpleNode
argument_list|(
literal|'f'
argument_list|,
name|e
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|SimpleNode
name|d
init|=
operator|new
name|SimpleNode
argument_list|(
literal|'d'
argument_list|,
name|b
argument_list|,
name|f
argument_list|)
decl_stmt|;
name|BstPathFactory
argument_list|<
name|SimpleNode
argument_list|,
name|BstInOrderPath
argument_list|<
name|SimpleNode
argument_list|>
argument_list|>
name|factory
init|=
name|BstInOrderPath
operator|.
name|inOrderFactory
argument_list|()
decl_stmt|;
name|BstInOrderPath
argument_list|<
name|SimpleNode
argument_list|>
name|path
init|=
name|extension
argument_list|(
name|factory
argument_list|,
name|d
argument_list|,
name|RIGHT
argument_list|)
decl_stmt|;
name|ASSERT
operator|.
name|that
argument_list|(
name|pathToList
argument_list|(
name|path
argument_list|)
argument_list|)
operator|.
name|hasContentsInOrder
argument_list|(
name|f
argument_list|,
name|d
argument_list|)
expr_stmt|;
name|path
operator|=
name|testPrevPathIs
argument_list|(
name|path
argument_list|,
name|e
argument_list|,
name|f
argument_list|,
name|d
argument_list|)
expr_stmt|;
name|path
operator|=
name|testPrevPathIs
argument_list|(
name|path
argument_list|,
name|d
argument_list|)
expr_stmt|;
name|path
operator|=
name|testPrevPathIs
argument_list|(
name|path
argument_list|,
name|c
argument_list|,
name|b
argument_list|,
name|d
argument_list|)
expr_stmt|;
name|path
operator|=
name|testPrevPathIs
argument_list|(
name|path
argument_list|,
name|b
argument_list|,
name|d
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|path
operator|.
name|hasNext
argument_list|(
name|LEFT
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testNextPathIs ( BstInOrderPath<SimpleNode> path, SimpleNode... nodes)
specifier|private
specifier|static
name|BstInOrderPath
argument_list|<
name|SimpleNode
argument_list|>
name|testNextPathIs
parameter_list|(
name|BstInOrderPath
argument_list|<
name|SimpleNode
argument_list|>
name|path
parameter_list|,
name|SimpleNode
modifier|...
name|nodes
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|path
operator|.
name|hasNext
argument_list|(
name|RIGHT
argument_list|)
argument_list|)
expr_stmt|;
name|path
operator|=
name|path
operator|.
name|next
argument_list|(
name|RIGHT
argument_list|)
expr_stmt|;
name|ASSERT
operator|.
name|that
argument_list|(
name|pathToList
argument_list|(
name|path
argument_list|)
argument_list|)
operator|.
name|hasContentsInOrder
argument_list|(
name|nodes
argument_list|)
expr_stmt|;
return|return
name|path
return|;
block|}
DECL|method|testPrevPathIs ( BstInOrderPath<SimpleNode> path, SimpleNode... nodes)
specifier|private
specifier|static
name|BstInOrderPath
argument_list|<
name|SimpleNode
argument_list|>
name|testPrevPathIs
parameter_list|(
name|BstInOrderPath
argument_list|<
name|SimpleNode
argument_list|>
name|path
parameter_list|,
name|SimpleNode
modifier|...
name|nodes
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|path
operator|.
name|hasNext
argument_list|(
name|LEFT
argument_list|)
argument_list|)
expr_stmt|;
name|path
operator|=
name|path
operator|.
name|next
argument_list|(
name|LEFT
argument_list|)
expr_stmt|;
name|ASSERT
operator|.
name|that
argument_list|(
name|pathToList
argument_list|(
name|path
argument_list|)
argument_list|)
operator|.
name|hasContentsInOrder
argument_list|(
name|nodes
argument_list|)
expr_stmt|;
return|return
name|path
return|;
block|}
annotation|@
name|GwtIncompatible
argument_list|(
literal|"NullPointerTester"
argument_list|)
DECL|method|testNullPointers ()
specifier|public
name|void
name|testNullPointers
parameter_list|()
throws|throws
name|Exception
block|{
name|defaultNullPointerTester
argument_list|()
operator|.
name|testAllPublicStaticMethods
argument_list|(
name|BstInOrderPath
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

