begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2008 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.collect
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|BoundType
operator|.
name|CLOSED
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|BoundType
operator|.
name|OPEN
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|DiscreteDomains
operator|.
name|integers
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|testing
operator|.
name|SerializableTester
operator|.
name|reserializeAndAssert
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Arrays
operator|.
name|asList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtCompatible
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|Helpers
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|testing
operator|.
name|EqualsTester
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NoSuchElementException
import|;
end_import

begin_comment
comment|/**  * Unit test for {@link Range}.  *  * @author Kevin Bourrillion  */
end_comment

begin_class
annotation|@
name|GwtCompatible
DECL|class|RangeTest
specifier|public
class|class
name|RangeTest
extends|extends
name|TestCase
block|{
DECL|method|testOpen ()
specifier|public
name|void
name|testOpen
parameter_list|()
block|{
name|Range
argument_list|<
name|Integer
argument_list|>
name|range
init|=
name|Range
operator|.
name|open
argument_list|(
literal|4
argument_list|,
literal|8
argument_list|)
decl_stmt|;
name|checkContains
argument_list|(
name|range
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|range
operator|.
name|hasLowerBound
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
operator|(
name|int
operator|)
name|range
operator|.
name|lowerEndpoint
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|OPEN
argument_list|,
name|range
operator|.
name|lowerBoundType
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|range
operator|.
name|hasUpperBound
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|8
argument_list|,
operator|(
name|int
operator|)
name|range
operator|.
name|upperEndpoint
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|OPEN
argument_list|,
name|range
operator|.
name|upperBoundType
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|range
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"(4\u20258)"
argument_list|,
name|range
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|reserializeAndAssert
argument_list|(
name|range
argument_list|)
expr_stmt|;
block|}
DECL|method|testOpen_invalid ()
specifier|public
name|void
name|testOpen_invalid
parameter_list|()
block|{
try|try
block|{
name|Range
operator|.
name|open
argument_list|(
literal|4
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{     }
try|try
block|{
name|Range
operator|.
name|open
argument_list|(
literal|3
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testClosed ()
specifier|public
name|void
name|testClosed
parameter_list|()
block|{
name|Range
argument_list|<
name|Integer
argument_list|>
name|range
init|=
name|Range
operator|.
name|closed
argument_list|(
literal|5
argument_list|,
literal|7
argument_list|)
decl_stmt|;
name|checkContains
argument_list|(
name|range
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|range
operator|.
name|hasLowerBound
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
operator|(
name|int
operator|)
name|range
operator|.
name|lowerEndpoint
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|CLOSED
argument_list|,
name|range
operator|.
name|lowerBoundType
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|range
operator|.
name|hasUpperBound
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|7
argument_list|,
operator|(
name|int
operator|)
name|range
operator|.
name|upperEndpoint
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|CLOSED
argument_list|,
name|range
operator|.
name|upperBoundType
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|range
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[5\u20257]"
argument_list|,
name|range
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|reserializeAndAssert
argument_list|(
name|range
argument_list|)
expr_stmt|;
block|}
DECL|method|testClosed_invalid ()
specifier|public
name|void
name|testClosed_invalid
parameter_list|()
block|{
try|try
block|{
name|Range
operator|.
name|closed
argument_list|(
literal|4
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testOpenClosed ()
specifier|public
name|void
name|testOpenClosed
parameter_list|()
block|{
name|Range
argument_list|<
name|Integer
argument_list|>
name|range
init|=
name|Range
operator|.
name|openClosed
argument_list|(
literal|4
argument_list|,
literal|7
argument_list|)
decl_stmt|;
name|checkContains
argument_list|(
name|range
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|range
operator|.
name|hasLowerBound
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
operator|(
name|int
operator|)
name|range
operator|.
name|lowerEndpoint
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|OPEN
argument_list|,
name|range
operator|.
name|lowerBoundType
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|range
operator|.
name|hasUpperBound
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|7
argument_list|,
operator|(
name|int
operator|)
name|range
operator|.
name|upperEndpoint
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|CLOSED
argument_list|,
name|range
operator|.
name|upperBoundType
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|range
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"(4\u20257]"
argument_list|,
name|range
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|reserializeAndAssert
argument_list|(
name|range
argument_list|)
expr_stmt|;
block|}
DECL|method|testClosedOpen ()
specifier|public
name|void
name|testClosedOpen
parameter_list|()
block|{
name|Range
argument_list|<
name|Integer
argument_list|>
name|range
init|=
name|Range
operator|.
name|closedOpen
argument_list|(
literal|5
argument_list|,
literal|8
argument_list|)
decl_stmt|;
name|checkContains
argument_list|(
name|range
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|range
operator|.
name|hasLowerBound
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
operator|(
name|int
operator|)
name|range
operator|.
name|lowerEndpoint
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|CLOSED
argument_list|,
name|range
operator|.
name|lowerBoundType
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|range
operator|.
name|hasUpperBound
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|8
argument_list|,
operator|(
name|int
operator|)
name|range
operator|.
name|upperEndpoint
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|OPEN
argument_list|,
name|range
operator|.
name|upperBoundType
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|range
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[5\u20258)"
argument_list|,
name|range
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|reserializeAndAssert
argument_list|(
name|range
argument_list|)
expr_stmt|;
block|}
DECL|method|testIsConnected ()
specifier|public
name|void
name|testIsConnected
parameter_list|()
block|{
name|assertTrue
argument_list|(
name|Range
operator|.
name|closed
argument_list|(
literal|3
argument_list|,
literal|5
argument_list|)
operator|.
name|isConnected
argument_list|(
name|Range
operator|.
name|open
argument_list|(
literal|5
argument_list|,
literal|6
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Range
operator|.
name|closed
argument_list|(
literal|3
argument_list|,
literal|5
argument_list|)
operator|.
name|isConnected
argument_list|(
name|Range
operator|.
name|openClosed
argument_list|(
literal|5
argument_list|,
literal|5
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Range
operator|.
name|open
argument_list|(
literal|3
argument_list|,
literal|5
argument_list|)
operator|.
name|isConnected
argument_list|(
name|Range
operator|.
name|closed
argument_list|(
literal|5
argument_list|,
literal|6
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Range
operator|.
name|closed
argument_list|(
literal|3
argument_list|,
literal|7
argument_list|)
operator|.
name|isConnected
argument_list|(
name|Range
operator|.
name|open
argument_list|(
literal|6
argument_list|,
literal|8
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Range
operator|.
name|open
argument_list|(
literal|3
argument_list|,
literal|7
argument_list|)
operator|.
name|isConnected
argument_list|(
name|Range
operator|.
name|closed
argument_list|(
literal|5
argument_list|,
literal|6
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|Range
operator|.
name|closed
argument_list|(
literal|3
argument_list|,
literal|5
argument_list|)
operator|.
name|isConnected
argument_list|(
name|Range
operator|.
name|closed
argument_list|(
literal|7
argument_list|,
literal|8
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|Range
operator|.
name|closed
argument_list|(
literal|3
argument_list|,
literal|5
argument_list|)
operator|.
name|isConnected
argument_list|(
name|Range
operator|.
name|closedOpen
argument_list|(
literal|7
argument_list|,
literal|7
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|checkContains (Range<Integer> range)
specifier|private
specifier|static
name|void
name|checkContains
parameter_list|(
name|Range
argument_list|<
name|Integer
argument_list|>
name|range
parameter_list|)
block|{
name|assertFalse
argument_list|(
name|range
operator|.
name|contains
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|range
operator|.
name|contains
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|range
operator|.
name|contains
argument_list|(
literal|7
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|range
operator|.
name|contains
argument_list|(
literal|8
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testSingleton ()
specifier|public
name|void
name|testSingleton
parameter_list|()
block|{
name|Range
argument_list|<
name|Integer
argument_list|>
name|range
init|=
name|Range
operator|.
name|closed
argument_list|(
literal|4
argument_list|,
literal|4
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|range
operator|.
name|contains
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|range
operator|.
name|contains
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|range
operator|.
name|contains
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|range
operator|.
name|hasLowerBound
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
operator|(
name|int
operator|)
name|range
operator|.
name|lowerEndpoint
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|CLOSED
argument_list|,
name|range
operator|.
name|lowerBoundType
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|range
operator|.
name|hasUpperBound
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
operator|(
name|int
operator|)
name|range
operator|.
name|upperEndpoint
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|CLOSED
argument_list|,
name|range
operator|.
name|upperBoundType
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|range
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[4\u20254]"
argument_list|,
name|range
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|reserializeAndAssert
argument_list|(
name|range
argument_list|)
expr_stmt|;
block|}
DECL|method|testEmpty1 ()
specifier|public
name|void
name|testEmpty1
parameter_list|()
block|{
name|Range
argument_list|<
name|Integer
argument_list|>
name|range
init|=
name|Range
operator|.
name|closedOpen
argument_list|(
literal|4
argument_list|,
literal|4
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|range
operator|.
name|contains
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|range
operator|.
name|contains
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|range
operator|.
name|contains
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|range
operator|.
name|hasLowerBound
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
operator|(
name|int
operator|)
name|range
operator|.
name|lowerEndpoint
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|CLOSED
argument_list|,
name|range
operator|.
name|lowerBoundType
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|range
operator|.
name|hasUpperBound
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
operator|(
name|int
operator|)
name|range
operator|.
name|upperEndpoint
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|OPEN
argument_list|,
name|range
operator|.
name|upperBoundType
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|range
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[4\u20254)"
argument_list|,
name|range
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|reserializeAndAssert
argument_list|(
name|range
argument_list|)
expr_stmt|;
block|}
DECL|method|testEmpty2 ()
specifier|public
name|void
name|testEmpty2
parameter_list|()
block|{
name|Range
argument_list|<
name|Integer
argument_list|>
name|range
init|=
name|Range
operator|.
name|openClosed
argument_list|(
literal|4
argument_list|,
literal|4
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|range
operator|.
name|contains
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|range
operator|.
name|contains
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|range
operator|.
name|contains
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|range
operator|.
name|hasLowerBound
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
operator|(
name|int
operator|)
name|range
operator|.
name|lowerEndpoint
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|OPEN
argument_list|,
name|range
operator|.
name|lowerBoundType
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|range
operator|.
name|hasUpperBound
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
operator|(
name|int
operator|)
name|range
operator|.
name|upperEndpoint
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|CLOSED
argument_list|,
name|range
operator|.
name|upperBoundType
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|range
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"(4\u20254]"
argument_list|,
name|range
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|reserializeAndAssert
argument_list|(
name|range
argument_list|)
expr_stmt|;
block|}
DECL|method|testLessThan ()
specifier|public
name|void
name|testLessThan
parameter_list|()
block|{
name|Range
argument_list|<
name|Integer
argument_list|>
name|range
init|=
name|Range
operator|.
name|lessThan
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|range
operator|.
name|contains
argument_list|(
name|Integer
operator|.
name|MIN_VALUE
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|range
operator|.
name|contains
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|range
operator|.
name|contains
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|assertUnboundedBelow
argument_list|(
name|range
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|range
operator|.
name|hasUpperBound
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
operator|(
name|int
operator|)
name|range
operator|.
name|upperEndpoint
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|OPEN
argument_list|,
name|range
operator|.
name|upperBoundType
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|range
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"(-\u221e\u20255)"
argument_list|,
name|range
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|reserializeAndAssert
argument_list|(
name|range
argument_list|)
expr_stmt|;
block|}
DECL|method|testGreaterThan ()
specifier|public
name|void
name|testGreaterThan
parameter_list|()
block|{
name|Range
argument_list|<
name|Integer
argument_list|>
name|range
init|=
name|Range
operator|.
name|greaterThan
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|range
operator|.
name|contains
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|range
operator|.
name|contains
argument_list|(
literal|6
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|range
operator|.
name|contains
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|range
operator|.
name|hasLowerBound
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
operator|(
name|int
operator|)
name|range
operator|.
name|lowerEndpoint
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|OPEN
argument_list|,
name|range
operator|.
name|lowerBoundType
argument_list|()
argument_list|)
expr_stmt|;
name|assertUnboundedAbove
argument_list|(
name|range
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|range
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"(5\u2025+\u221e)"
argument_list|,
name|range
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|reserializeAndAssert
argument_list|(
name|range
argument_list|)
expr_stmt|;
block|}
DECL|method|testAtLeast ()
specifier|public
name|void
name|testAtLeast
parameter_list|()
block|{
name|Range
argument_list|<
name|Integer
argument_list|>
name|range
init|=
name|Range
operator|.
name|atLeast
argument_list|(
literal|6
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|range
operator|.
name|contains
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|range
operator|.
name|contains
argument_list|(
literal|6
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|range
operator|.
name|contains
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|range
operator|.
name|hasLowerBound
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|6
argument_list|,
operator|(
name|int
operator|)
name|range
operator|.
name|lowerEndpoint
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|CLOSED
argument_list|,
name|range
operator|.
name|lowerBoundType
argument_list|()
argument_list|)
expr_stmt|;
name|assertUnboundedAbove
argument_list|(
name|range
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|range
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[6\u2025+\u221e)"
argument_list|,
name|range
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|reserializeAndAssert
argument_list|(
name|range
argument_list|)
expr_stmt|;
block|}
DECL|method|testAtMost ()
specifier|public
name|void
name|testAtMost
parameter_list|()
block|{
name|Range
argument_list|<
name|Integer
argument_list|>
name|range
init|=
name|Range
operator|.
name|atMost
argument_list|(
literal|4
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|range
operator|.
name|contains
argument_list|(
name|Integer
operator|.
name|MIN_VALUE
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|range
operator|.
name|contains
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|range
operator|.
name|contains
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|assertUnboundedBelow
argument_list|(
name|range
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|range
operator|.
name|hasUpperBound
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
operator|(
name|int
operator|)
name|range
operator|.
name|upperEndpoint
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|CLOSED
argument_list|,
name|range
operator|.
name|upperBoundType
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|range
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"(-\u221e\u20254]"
argument_list|,
name|range
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|reserializeAndAssert
argument_list|(
name|range
argument_list|)
expr_stmt|;
block|}
DECL|method|testAll ()
specifier|public
name|void
name|testAll
parameter_list|()
block|{
name|Range
argument_list|<
name|Integer
argument_list|>
name|range
init|=
name|Range
operator|.
name|all
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|range
operator|.
name|contains
argument_list|(
name|Integer
operator|.
name|MIN_VALUE
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|range
operator|.
name|contains
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
argument_list|)
expr_stmt|;
name|assertUnboundedBelow
argument_list|(
name|range
argument_list|)
expr_stmt|;
name|assertUnboundedAbove
argument_list|(
name|range
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|range
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"(-\u221e\u2025+\u221e)"
argument_list|,
name|range
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|range
argument_list|,
name|reserializeAndAssert
argument_list|(
name|range
argument_list|)
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|range
argument_list|,
name|Range
operator|.
name|all
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|assertUnboundedBelow (Range<Integer> range)
specifier|private
specifier|static
name|void
name|assertUnboundedBelow
parameter_list|(
name|Range
argument_list|<
name|Integer
argument_list|>
name|range
parameter_list|)
block|{
name|assertFalse
argument_list|(
name|range
operator|.
name|hasLowerBound
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|range
operator|.
name|lowerEndpoint
argument_list|()
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|expected
parameter_list|)
block|{     }
try|try
block|{
name|range
operator|.
name|lowerBoundType
argument_list|()
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|assertUnboundedAbove (Range<Integer> range)
specifier|private
specifier|static
name|void
name|assertUnboundedAbove
parameter_list|(
name|Range
argument_list|<
name|Integer
argument_list|>
name|range
parameter_list|)
block|{
name|assertFalse
argument_list|(
name|range
operator|.
name|hasUpperBound
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|range
operator|.
name|upperEndpoint
argument_list|()
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|expected
parameter_list|)
block|{     }
try|try
block|{
name|range
operator|.
name|upperBoundType
argument_list|()
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testOrderingCuts ()
specifier|public
name|void
name|testOrderingCuts
parameter_list|()
block|{
name|Cut
argument_list|<
name|Integer
argument_list|>
name|a
init|=
name|Range
operator|.
name|lessThan
argument_list|(
literal|0
argument_list|)
operator|.
name|lowerBound
decl_stmt|;
name|Cut
argument_list|<
name|Integer
argument_list|>
name|b
init|=
name|Range
operator|.
name|atLeast
argument_list|(
literal|0
argument_list|)
operator|.
name|lowerBound
decl_stmt|;
name|Cut
argument_list|<
name|Integer
argument_list|>
name|c
init|=
name|Range
operator|.
name|greaterThan
argument_list|(
literal|0
argument_list|)
operator|.
name|lowerBound
decl_stmt|;
name|Cut
argument_list|<
name|Integer
argument_list|>
name|d
init|=
name|Range
operator|.
name|atLeast
argument_list|(
literal|1
argument_list|)
operator|.
name|lowerBound
decl_stmt|;
name|Cut
argument_list|<
name|Integer
argument_list|>
name|e
init|=
name|Range
operator|.
name|greaterThan
argument_list|(
literal|1
argument_list|)
operator|.
name|lowerBound
decl_stmt|;
name|Cut
argument_list|<
name|Integer
argument_list|>
name|f
init|=
name|Range
operator|.
name|greaterThan
argument_list|(
literal|1
argument_list|)
operator|.
name|upperBound
decl_stmt|;
name|Helpers
operator|.
name|testCompareToAndEquals
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
name|a
argument_list|,
name|b
argument_list|,
name|c
argument_list|,
name|d
argument_list|,
name|e
argument_list|,
name|f
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testContainsAll ()
specifier|public
name|void
name|testContainsAll
parameter_list|()
block|{
name|Range
argument_list|<
name|Integer
argument_list|>
name|range
init|=
name|Range
operator|.
name|closed
argument_list|(
literal|3
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|range
operator|.
name|containsAll
argument_list|(
name|asList
argument_list|(
literal|3
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|,
literal|5
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|range
operator|.
name|containsAll
argument_list|(
name|asList
argument_list|(
literal|3
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|,
literal|5
argument_list|,
literal|6
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// We happen to know that natural-order sorted sets use a different code
comment|// path, so we test that separately
name|assertTrue
argument_list|(
name|range
operator|.
name|containsAll
argument_list|(
name|ImmutableSortedSet
operator|.
name|of
argument_list|(
literal|3
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|,
literal|5
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|range
operator|.
name|containsAll
argument_list|(
name|ImmutableSortedSet
operator|.
name|of
argument_list|(
literal|3
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|range
operator|.
name|containsAll
argument_list|(
name|ImmutableSortedSet
operator|.
expr|<
name|Integer
operator|>
name|of
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|range
operator|.
name|containsAll
argument_list|(
name|ImmutableSortedSet
operator|.
name|of
argument_list|(
literal|3
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|,
literal|5
argument_list|,
literal|6
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Range
operator|.
name|openClosed
argument_list|(
literal|3
argument_list|,
literal|3
argument_list|)
operator|.
name|containsAll
argument_list|(
name|Collections
operator|.
expr|<
name|Integer
operator|>
name|emptySet
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testEncloses_open ()
specifier|public
name|void
name|testEncloses_open
parameter_list|()
block|{
name|Range
argument_list|<
name|Integer
argument_list|>
name|range
init|=
name|Range
operator|.
name|open
argument_list|(
literal|2
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|range
operator|.
name|encloses
argument_list|(
name|range
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|range
operator|.
name|encloses
argument_list|(
name|Range
operator|.
name|open
argument_list|(
literal|2
argument_list|,
literal|4
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|range
operator|.
name|encloses
argument_list|(
name|Range
operator|.
name|open
argument_list|(
literal|3
argument_list|,
literal|5
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|range
operator|.
name|encloses
argument_list|(
name|Range
operator|.
name|closed
argument_list|(
literal|3
argument_list|,
literal|4
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|range
operator|.
name|encloses
argument_list|(
name|Range
operator|.
name|openClosed
argument_list|(
literal|2
argument_list|,
literal|5
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|range
operator|.
name|encloses
argument_list|(
name|Range
operator|.
name|closedOpen
argument_list|(
literal|2
argument_list|,
literal|5
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|range
operator|.
name|encloses
argument_list|(
name|Range
operator|.
name|closed
argument_list|(
literal|1
argument_list|,
literal|4
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|range
operator|.
name|encloses
argument_list|(
name|Range
operator|.
name|closed
argument_list|(
literal|3
argument_list|,
literal|6
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|range
operator|.
name|encloses
argument_list|(
name|Range
operator|.
name|greaterThan
argument_list|(
literal|3
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|range
operator|.
name|encloses
argument_list|(
name|Range
operator|.
name|lessThan
argument_list|(
literal|3
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|range
operator|.
name|encloses
argument_list|(
name|Range
operator|.
name|atLeast
argument_list|(
literal|3
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|range
operator|.
name|encloses
argument_list|(
name|Range
operator|.
name|atMost
argument_list|(
literal|3
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|range
operator|.
name|encloses
argument_list|(
name|Range
operator|.
expr|<
name|Integer
operator|>
name|all
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testEncloses_closed ()
specifier|public
name|void
name|testEncloses_closed
parameter_list|()
block|{
name|Range
argument_list|<
name|Integer
argument_list|>
name|range
init|=
name|Range
operator|.
name|closed
argument_list|(
literal|2
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|range
operator|.
name|encloses
argument_list|(
name|range
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|range
operator|.
name|encloses
argument_list|(
name|Range
operator|.
name|open
argument_list|(
literal|2
argument_list|,
literal|5
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|range
operator|.
name|encloses
argument_list|(
name|Range
operator|.
name|openClosed
argument_list|(
literal|2
argument_list|,
literal|5
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|range
operator|.
name|encloses
argument_list|(
name|Range
operator|.
name|closedOpen
argument_list|(
literal|2
argument_list|,
literal|5
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|range
operator|.
name|encloses
argument_list|(
name|Range
operator|.
name|closed
argument_list|(
literal|3
argument_list|,
literal|5
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|range
operator|.
name|encloses
argument_list|(
name|Range
operator|.
name|closed
argument_list|(
literal|2
argument_list|,
literal|4
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|range
operator|.
name|encloses
argument_list|(
name|Range
operator|.
name|open
argument_list|(
literal|1
argument_list|,
literal|6
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|range
operator|.
name|encloses
argument_list|(
name|Range
operator|.
name|greaterThan
argument_list|(
literal|3
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|range
operator|.
name|encloses
argument_list|(
name|Range
operator|.
name|lessThan
argument_list|(
literal|3
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|range
operator|.
name|encloses
argument_list|(
name|Range
operator|.
name|atLeast
argument_list|(
literal|3
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|range
operator|.
name|encloses
argument_list|(
name|Range
operator|.
name|atMost
argument_list|(
literal|3
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|range
operator|.
name|encloses
argument_list|(
name|Range
operator|.
expr|<
name|Integer
operator|>
name|all
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testIntersection_empty ()
specifier|public
name|void
name|testIntersection_empty
parameter_list|()
block|{
name|Range
argument_list|<
name|Integer
argument_list|>
name|range
init|=
name|Range
operator|.
name|closedOpen
argument_list|(
literal|3
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|range
argument_list|,
name|range
operator|.
name|intersection
argument_list|(
name|range
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|range
operator|.
name|intersection
argument_list|(
name|Range
operator|.
name|open
argument_list|(
literal|3
argument_list|,
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{     }
try|try
block|{
name|range
operator|.
name|intersection
argument_list|(
name|Range
operator|.
name|closed
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testIntersection_deFactoEmpty ()
specifier|public
name|void
name|testIntersection_deFactoEmpty
parameter_list|()
block|{
name|Range
argument_list|<
name|Integer
argument_list|>
name|range
init|=
name|Range
operator|.
name|open
argument_list|(
literal|3
argument_list|,
literal|4
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|range
argument_list|,
name|range
operator|.
name|intersection
argument_list|(
name|range
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Range
operator|.
name|openClosed
argument_list|(
literal|3
argument_list|,
literal|3
argument_list|)
argument_list|,
name|range
operator|.
name|intersection
argument_list|(
name|Range
operator|.
name|atMost
argument_list|(
literal|3
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Range
operator|.
name|closedOpen
argument_list|(
literal|4
argument_list|,
literal|4
argument_list|)
argument_list|,
name|range
operator|.
name|intersection
argument_list|(
name|Range
operator|.
name|atLeast
argument_list|(
literal|4
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|range
operator|.
name|intersection
argument_list|(
name|Range
operator|.
name|lessThan
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{     }
try|try
block|{
name|range
operator|.
name|intersection
argument_list|(
name|Range
operator|.
name|greaterThan
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{     }
name|range
operator|=
name|Range
operator|.
name|closed
argument_list|(
literal|3
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Range
operator|.
name|openClosed
argument_list|(
literal|4
argument_list|,
literal|4
argument_list|)
argument_list|,
name|range
operator|.
name|intersection
argument_list|(
name|Range
operator|.
name|greaterThan
argument_list|(
literal|4
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testIntersection_singleton ()
specifier|public
name|void
name|testIntersection_singleton
parameter_list|()
block|{
name|Range
argument_list|<
name|Integer
argument_list|>
name|range
init|=
name|Range
operator|.
name|closed
argument_list|(
literal|3
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|range
argument_list|,
name|range
operator|.
name|intersection
argument_list|(
name|range
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|range
argument_list|,
name|range
operator|.
name|intersection
argument_list|(
name|Range
operator|.
name|atMost
argument_list|(
literal|4
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|range
argument_list|,
name|range
operator|.
name|intersection
argument_list|(
name|Range
operator|.
name|atMost
argument_list|(
literal|3
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|range
argument_list|,
name|range
operator|.
name|intersection
argument_list|(
name|Range
operator|.
name|atLeast
argument_list|(
literal|3
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|range
argument_list|,
name|range
operator|.
name|intersection
argument_list|(
name|Range
operator|.
name|atLeast
argument_list|(
literal|2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Range
operator|.
name|closedOpen
argument_list|(
literal|3
argument_list|,
literal|3
argument_list|)
argument_list|,
name|range
operator|.
name|intersection
argument_list|(
name|Range
operator|.
name|lessThan
argument_list|(
literal|3
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Range
operator|.
name|openClosed
argument_list|(
literal|3
argument_list|,
literal|3
argument_list|)
argument_list|,
name|range
operator|.
name|intersection
argument_list|(
name|Range
operator|.
name|greaterThan
argument_list|(
literal|3
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|range
operator|.
name|intersection
argument_list|(
name|Range
operator|.
name|atLeast
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{     }
try|try
block|{
name|range
operator|.
name|intersection
argument_list|(
name|Range
operator|.
name|atMost
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testIntersection_general ()
specifier|public
name|void
name|testIntersection_general
parameter_list|()
block|{
name|Range
argument_list|<
name|Integer
argument_list|>
name|range
init|=
name|Range
operator|.
name|closed
argument_list|(
literal|4
argument_list|,
literal|8
argument_list|)
decl_stmt|;
comment|// separate below
try|try
block|{
name|range
operator|.
name|intersection
argument_list|(
name|Range
operator|.
name|closed
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{     }
comment|// adjacent below
name|assertEquals
argument_list|(
name|Range
operator|.
name|closedOpen
argument_list|(
literal|4
argument_list|,
literal|4
argument_list|)
argument_list|,
name|range
operator|.
name|intersection
argument_list|(
name|Range
operator|.
name|closedOpen
argument_list|(
literal|2
argument_list|,
literal|4
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// overlap below
name|assertEquals
argument_list|(
name|Range
operator|.
name|closed
argument_list|(
literal|4
argument_list|,
literal|6
argument_list|)
argument_list|,
name|range
operator|.
name|intersection
argument_list|(
name|Range
operator|.
name|closed
argument_list|(
literal|2
argument_list|,
literal|6
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// enclosed with same start
name|assertEquals
argument_list|(
name|Range
operator|.
name|closed
argument_list|(
literal|4
argument_list|,
literal|6
argument_list|)
argument_list|,
name|range
operator|.
name|intersection
argument_list|(
name|Range
operator|.
name|closed
argument_list|(
literal|4
argument_list|,
literal|6
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// enclosed, interior
name|assertEquals
argument_list|(
name|Range
operator|.
name|closed
argument_list|(
literal|5
argument_list|,
literal|7
argument_list|)
argument_list|,
name|range
operator|.
name|intersection
argument_list|(
name|Range
operator|.
name|closed
argument_list|(
literal|5
argument_list|,
literal|7
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// enclosed with same end
name|assertEquals
argument_list|(
name|Range
operator|.
name|closed
argument_list|(
literal|6
argument_list|,
literal|8
argument_list|)
argument_list|,
name|range
operator|.
name|intersection
argument_list|(
name|Range
operator|.
name|closed
argument_list|(
literal|6
argument_list|,
literal|8
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// equal
name|assertEquals
argument_list|(
name|range
argument_list|,
name|range
operator|.
name|intersection
argument_list|(
name|range
argument_list|)
argument_list|)
expr_stmt|;
comment|// enclosing with same start
name|assertEquals
argument_list|(
name|range
argument_list|,
name|range
operator|.
name|intersection
argument_list|(
name|Range
operator|.
name|closed
argument_list|(
literal|4
argument_list|,
literal|10
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// enclosing with same end
name|assertEquals
argument_list|(
name|range
argument_list|,
name|range
operator|.
name|intersection
argument_list|(
name|Range
operator|.
name|closed
argument_list|(
literal|2
argument_list|,
literal|8
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// enclosing, exterior
name|assertEquals
argument_list|(
name|range
argument_list|,
name|range
operator|.
name|intersection
argument_list|(
name|Range
operator|.
name|closed
argument_list|(
literal|2
argument_list|,
literal|10
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// overlap above
name|assertEquals
argument_list|(
name|Range
operator|.
name|closed
argument_list|(
literal|6
argument_list|,
literal|8
argument_list|)
argument_list|,
name|range
operator|.
name|intersection
argument_list|(
name|Range
operator|.
name|closed
argument_list|(
literal|6
argument_list|,
literal|10
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// adjacent above
name|assertEquals
argument_list|(
name|Range
operator|.
name|openClosed
argument_list|(
literal|8
argument_list|,
literal|8
argument_list|)
argument_list|,
name|range
operator|.
name|intersection
argument_list|(
name|Range
operator|.
name|openClosed
argument_list|(
literal|8
argument_list|,
literal|10
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// separate above
try|try
block|{
name|range
operator|.
name|intersection
argument_list|(
name|Range
operator|.
name|closed
argument_list|(
literal|10
argument_list|,
literal|12
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testSpan_general ()
specifier|public
name|void
name|testSpan_general
parameter_list|()
block|{
name|Range
argument_list|<
name|Integer
argument_list|>
name|range
init|=
name|Range
operator|.
name|closed
argument_list|(
literal|4
argument_list|,
literal|8
argument_list|)
decl_stmt|;
comment|// separate below
name|assertEquals
argument_list|(
name|Range
operator|.
name|closed
argument_list|(
literal|0
argument_list|,
literal|8
argument_list|)
argument_list|,
name|range
operator|.
name|span
argument_list|(
name|Range
operator|.
name|closed
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Range
operator|.
name|atMost
argument_list|(
literal|8
argument_list|)
argument_list|,
name|range
operator|.
name|span
argument_list|(
name|Range
operator|.
name|atMost
argument_list|(
literal|2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// adjacent below
name|assertEquals
argument_list|(
name|Range
operator|.
name|closed
argument_list|(
literal|2
argument_list|,
literal|8
argument_list|)
argument_list|,
name|range
operator|.
name|span
argument_list|(
name|Range
operator|.
name|closedOpen
argument_list|(
literal|2
argument_list|,
literal|4
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Range
operator|.
name|atMost
argument_list|(
literal|8
argument_list|)
argument_list|,
name|range
operator|.
name|span
argument_list|(
name|Range
operator|.
name|lessThan
argument_list|(
literal|4
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// overlap below
name|assertEquals
argument_list|(
name|Range
operator|.
name|closed
argument_list|(
literal|2
argument_list|,
literal|8
argument_list|)
argument_list|,
name|range
operator|.
name|span
argument_list|(
name|Range
operator|.
name|closed
argument_list|(
literal|2
argument_list|,
literal|6
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Range
operator|.
name|atMost
argument_list|(
literal|8
argument_list|)
argument_list|,
name|range
operator|.
name|span
argument_list|(
name|Range
operator|.
name|atMost
argument_list|(
literal|6
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// enclosed with same start
name|assertEquals
argument_list|(
name|range
argument_list|,
name|range
operator|.
name|span
argument_list|(
name|Range
operator|.
name|closed
argument_list|(
literal|4
argument_list|,
literal|6
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// enclosed, interior
name|assertEquals
argument_list|(
name|range
argument_list|,
name|range
operator|.
name|span
argument_list|(
name|Range
operator|.
name|closed
argument_list|(
literal|5
argument_list|,
literal|7
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// enclosed with same end
name|assertEquals
argument_list|(
name|range
argument_list|,
name|range
operator|.
name|span
argument_list|(
name|Range
operator|.
name|closed
argument_list|(
literal|6
argument_list|,
literal|8
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// equal
name|assertEquals
argument_list|(
name|range
argument_list|,
name|range
operator|.
name|span
argument_list|(
name|range
argument_list|)
argument_list|)
expr_stmt|;
comment|// enclosing with same start
name|assertEquals
argument_list|(
name|Range
operator|.
name|closed
argument_list|(
literal|4
argument_list|,
literal|10
argument_list|)
argument_list|,
name|range
operator|.
name|span
argument_list|(
name|Range
operator|.
name|closed
argument_list|(
literal|4
argument_list|,
literal|10
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Range
operator|.
name|atLeast
argument_list|(
literal|4
argument_list|)
argument_list|,
name|range
operator|.
name|span
argument_list|(
name|Range
operator|.
name|atLeast
argument_list|(
literal|4
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// enclosing with same end
name|assertEquals
argument_list|(
name|Range
operator|.
name|closed
argument_list|(
literal|2
argument_list|,
literal|8
argument_list|)
argument_list|,
name|range
operator|.
name|span
argument_list|(
name|Range
operator|.
name|closed
argument_list|(
literal|2
argument_list|,
literal|8
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Range
operator|.
name|atMost
argument_list|(
literal|8
argument_list|)
argument_list|,
name|range
operator|.
name|span
argument_list|(
name|Range
operator|.
name|atMost
argument_list|(
literal|8
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// enclosing, exterior
name|assertEquals
argument_list|(
name|Range
operator|.
name|closed
argument_list|(
literal|2
argument_list|,
literal|10
argument_list|)
argument_list|,
name|range
operator|.
name|span
argument_list|(
name|Range
operator|.
name|closed
argument_list|(
literal|2
argument_list|,
literal|10
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Range
operator|.
expr|<
name|Integer
operator|>
name|all
argument_list|()
argument_list|,
name|range
operator|.
name|span
argument_list|(
name|Range
operator|.
expr|<
name|Integer
operator|>
name|all
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// overlap above
name|assertEquals
argument_list|(
name|Range
operator|.
name|closed
argument_list|(
literal|4
argument_list|,
literal|10
argument_list|)
argument_list|,
name|range
operator|.
name|span
argument_list|(
name|Range
operator|.
name|closed
argument_list|(
literal|6
argument_list|,
literal|10
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Range
operator|.
name|atLeast
argument_list|(
literal|4
argument_list|)
argument_list|,
name|range
operator|.
name|span
argument_list|(
name|Range
operator|.
name|atLeast
argument_list|(
literal|6
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// adjacent above
name|assertEquals
argument_list|(
name|Range
operator|.
name|closed
argument_list|(
literal|4
argument_list|,
literal|10
argument_list|)
argument_list|,
name|range
operator|.
name|span
argument_list|(
name|Range
operator|.
name|openClosed
argument_list|(
literal|8
argument_list|,
literal|10
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Range
operator|.
name|atLeast
argument_list|(
literal|4
argument_list|)
argument_list|,
name|range
operator|.
name|span
argument_list|(
name|Range
operator|.
name|greaterThan
argument_list|(
literal|8
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// separate above
name|assertEquals
argument_list|(
name|Range
operator|.
name|closed
argument_list|(
literal|4
argument_list|,
literal|12
argument_list|)
argument_list|,
name|range
operator|.
name|span
argument_list|(
name|Range
operator|.
name|closed
argument_list|(
literal|10
argument_list|,
literal|12
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Range
operator|.
name|atLeast
argument_list|(
literal|4
argument_list|)
argument_list|,
name|range
operator|.
name|span
argument_list|(
name|Range
operator|.
name|atLeast
argument_list|(
literal|10
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testApply ()
specifier|public
name|void
name|testApply
parameter_list|()
block|{
name|Predicate
argument_list|<
name|Integer
argument_list|>
name|predicate
init|=
name|Range
operator|.
name|closed
argument_list|(
literal|2
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|predicate
operator|.
name|apply
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|predicate
operator|.
name|apply
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|predicate
operator|.
name|apply
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|predicate
operator|.
name|apply
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testEquals ()
specifier|public
name|void
name|testEquals
parameter_list|()
block|{
operator|new
name|EqualsTester
argument_list|()
operator|.
name|addEqualityGroup
argument_list|(
name|Range
operator|.
name|open
argument_list|(
literal|1
argument_list|,
literal|5
argument_list|)
argument_list|,
name|Range
operator|.
name|range
argument_list|(
literal|1
argument_list|,
name|OPEN
argument_list|,
literal|5
argument_list|,
name|OPEN
argument_list|)
argument_list|)
operator|.
name|addEqualityGroup
argument_list|(
name|Range
operator|.
name|greaterThan
argument_list|(
literal|2
argument_list|)
argument_list|,
name|Range
operator|.
name|greaterThan
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|addEqualityGroup
argument_list|(
name|Range
operator|.
name|all
argument_list|()
argument_list|,
name|Range
operator|.
name|all
argument_list|()
argument_list|)
operator|.
name|addEqualityGroup
argument_list|(
literal|"Phil"
argument_list|)
operator|.
name|testEquals
argument_list|()
expr_stmt|;
block|}
DECL|method|testLegacyComparable ()
specifier|public
name|void
name|testLegacyComparable
parameter_list|()
block|{
name|Range
argument_list|<
name|LegacyComparable
argument_list|>
name|range
init|=
name|Range
operator|.
name|closed
argument_list|(
name|LegacyComparable
operator|.
name|X
argument_list|,
name|LegacyComparable
operator|.
name|Y
argument_list|)
decl_stmt|;
block|}
DECL|field|UNBOUNDED_DOMAIN
specifier|private
specifier|static
specifier|final
name|DiscreteDomain
argument_list|<
name|Integer
argument_list|>
name|UNBOUNDED_DOMAIN
init|=
operator|new
name|DiscreteDomain
argument_list|<
name|Integer
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Integer
name|next
parameter_list|(
name|Integer
name|value
parameter_list|)
block|{
return|return
name|DiscreteDomains
operator|.
name|integers
argument_list|()
operator|.
name|next
argument_list|(
name|value
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Integer
name|previous
parameter_list|(
name|Integer
name|value
parameter_list|)
block|{
return|return
name|DiscreteDomains
operator|.
name|integers
argument_list|()
operator|.
name|previous
argument_list|(
name|value
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|distance
parameter_list|(
name|Integer
name|start
parameter_list|,
name|Integer
name|end
parameter_list|)
block|{
return|return
name|DiscreteDomains
operator|.
name|integers
argument_list|()
operator|.
name|distance
argument_list|(
name|start
argument_list|,
name|end
argument_list|)
return|;
block|}
block|}
decl_stmt|;
DECL|method|testAsSet_noMin ()
specifier|public
name|void
name|testAsSet_noMin
parameter_list|()
block|{
name|Range
argument_list|<
name|Integer
argument_list|>
name|range
init|=
name|Range
operator|.
name|lessThan
argument_list|(
literal|0
argument_list|)
decl_stmt|;
try|try
block|{
name|range
operator|.
name|asSet
argument_list|(
name|UNBOUNDED_DOMAIN
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{}
block|}
DECL|method|testAsSet_noMax ()
specifier|public
name|void
name|testAsSet_noMax
parameter_list|()
block|{
name|Range
argument_list|<
name|Integer
argument_list|>
name|range
init|=
name|Range
operator|.
name|greaterThan
argument_list|(
literal|0
argument_list|)
decl_stmt|;
try|try
block|{
name|range
operator|.
name|asSet
argument_list|(
name|UNBOUNDED_DOMAIN
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{}
block|}
DECL|method|testAsSet_empty ()
specifier|public
name|void
name|testAsSet_empty
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|()
argument_list|,
name|Range
operator|.
name|closedOpen
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
operator|.
name|asSet
argument_list|(
name|integers
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|()
argument_list|,
name|Range
operator|.
name|openClosed
argument_list|(
literal|5
argument_list|,
literal|5
argument_list|)
operator|.
name|asSet
argument_list|(
name|integers
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|()
argument_list|,
name|Range
operator|.
name|lessThan
argument_list|(
name|Integer
operator|.
name|MIN_VALUE
argument_list|)
operator|.
name|asSet
argument_list|(
name|integers
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|()
argument_list|,
name|Range
operator|.
name|greaterThan
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
operator|.
name|asSet
argument_list|(
name|integers
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testCanonical ()
specifier|public
name|void
name|testCanonical
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|Range
operator|.
name|closedOpen
argument_list|(
literal|1
argument_list|,
literal|5
argument_list|)
argument_list|,
name|Range
operator|.
name|closed
argument_list|(
literal|1
argument_list|,
literal|4
argument_list|)
operator|.
name|canonical
argument_list|(
name|integers
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Range
operator|.
name|closedOpen
argument_list|(
literal|1
argument_list|,
literal|5
argument_list|)
argument_list|,
name|Range
operator|.
name|open
argument_list|(
literal|0
argument_list|,
literal|5
argument_list|)
operator|.
name|canonical
argument_list|(
name|integers
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Range
operator|.
name|closedOpen
argument_list|(
literal|1
argument_list|,
literal|5
argument_list|)
argument_list|,
name|Range
operator|.
name|closedOpen
argument_list|(
literal|1
argument_list|,
literal|5
argument_list|)
operator|.
name|canonical
argument_list|(
name|integers
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Range
operator|.
name|closedOpen
argument_list|(
literal|1
argument_list|,
literal|5
argument_list|)
argument_list|,
name|Range
operator|.
name|openClosed
argument_list|(
literal|0
argument_list|,
literal|4
argument_list|)
operator|.
name|canonical
argument_list|(
name|integers
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Range
operator|.
name|closedOpen
argument_list|(
name|Integer
operator|.
name|MIN_VALUE
argument_list|,
literal|0
argument_list|)
argument_list|,
name|Range
operator|.
name|closedOpen
argument_list|(
name|Integer
operator|.
name|MIN_VALUE
argument_list|,
literal|0
argument_list|)
operator|.
name|canonical
argument_list|(
name|integers
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Range
operator|.
name|closedOpen
argument_list|(
name|Integer
operator|.
name|MIN_VALUE
argument_list|,
literal|0
argument_list|)
argument_list|,
name|Range
operator|.
name|lessThan
argument_list|(
literal|0
argument_list|)
operator|.
name|canonical
argument_list|(
name|integers
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Range
operator|.
name|closedOpen
argument_list|(
name|Integer
operator|.
name|MIN_VALUE
argument_list|,
literal|1
argument_list|)
argument_list|,
name|Range
operator|.
name|atMost
argument_list|(
literal|0
argument_list|)
operator|.
name|canonical
argument_list|(
name|integers
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Range
operator|.
name|atLeast
argument_list|(
literal|0
argument_list|)
argument_list|,
name|Range
operator|.
name|atLeast
argument_list|(
literal|0
argument_list|)
operator|.
name|canonical
argument_list|(
name|integers
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Range
operator|.
name|atLeast
argument_list|(
literal|1
argument_list|)
argument_list|,
name|Range
operator|.
name|greaterThan
argument_list|(
literal|0
argument_list|)
operator|.
name|canonical
argument_list|(
name|integers
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Range
operator|.
name|atLeast
argument_list|(
name|Integer
operator|.
name|MIN_VALUE
argument_list|)
argument_list|,
name|Range
operator|.
expr|<
name|Integer
operator|>
name|all
argument_list|()
operator|.
name|canonical
argument_list|(
name|integers
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testCanonical_unboundedDomain ()
specifier|public
name|void
name|testCanonical_unboundedDomain
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|Range
operator|.
name|lessThan
argument_list|(
literal|0
argument_list|)
argument_list|,
name|Range
operator|.
name|lessThan
argument_list|(
literal|0
argument_list|)
operator|.
name|canonical
argument_list|(
name|UNBOUNDED_DOMAIN
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Range
operator|.
name|lessThan
argument_list|(
literal|1
argument_list|)
argument_list|,
name|Range
operator|.
name|atMost
argument_list|(
literal|0
argument_list|)
operator|.
name|canonical
argument_list|(
name|UNBOUNDED_DOMAIN
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Range
operator|.
name|atLeast
argument_list|(
literal|0
argument_list|)
argument_list|,
name|Range
operator|.
name|atLeast
argument_list|(
literal|0
argument_list|)
operator|.
name|canonical
argument_list|(
name|UNBOUNDED_DOMAIN
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Range
operator|.
name|atLeast
argument_list|(
literal|1
argument_list|)
argument_list|,
name|Range
operator|.
name|greaterThan
argument_list|(
literal|0
argument_list|)
operator|.
name|canonical
argument_list|(
name|UNBOUNDED_DOMAIN
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Range
operator|.
name|all
argument_list|()
argument_list|,
name|Range
operator|.
expr|<
name|Integer
operator|>
name|all
argument_list|()
operator|.
name|canonical
argument_list|(
name|UNBOUNDED_DOMAIN
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testEncloseAll ()
specifier|public
name|void
name|testEncloseAll
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|Range
operator|.
name|closed
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|Range
operator|.
name|encloseAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Range
operator|.
name|closed
argument_list|(
operator|-
literal|3
argument_list|,
literal|5
argument_list|)
argument_list|,
name|Range
operator|.
name|encloseAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|5
argument_list|,
operator|-
literal|3
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Range
operator|.
name|closed
argument_list|(
operator|-
literal|3
argument_list|,
literal|5
argument_list|)
argument_list|,
name|Range
operator|.
name|encloseAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|,
literal|5
argument_list|,
operator|-
literal|3
argument_list|,
literal|0
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testEncloseAll_empty ()
specifier|public
name|void
name|testEncloseAll_empty
parameter_list|()
block|{
try|try
block|{
name|Range
operator|.
name|encloseAll
argument_list|(
name|ImmutableSet
operator|.
expr|<
name|Integer
operator|>
name|of
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchElementException
name|expected
parameter_list|)
block|{}
block|}
DECL|method|testEncloseAll_nullValue ()
specifier|public
name|void
name|testEncloseAll_nullValue
parameter_list|()
block|{
name|List
argument_list|<
name|Integer
argument_list|>
name|nullFirst
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|null
argument_list|,
literal|0
argument_list|)
decl_stmt|;
try|try
block|{
name|Range
operator|.
name|encloseAll
argument_list|(
name|nullFirst
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|expected
parameter_list|)
block|{}
name|List
argument_list|<
name|Integer
argument_list|>
name|nullNotFirst
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|0
argument_list|,
literal|null
argument_list|)
decl_stmt|;
try|try
block|{
name|Range
operator|.
name|encloseAll
argument_list|(
name|nullNotFirst
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|expected
parameter_list|)
block|{}
block|}
DECL|method|testEquivalentFactories ()
specifier|public
name|void
name|testEquivalentFactories
parameter_list|()
block|{
operator|new
name|EqualsTester
argument_list|()
operator|.
name|addEqualityGroup
argument_list|(
name|Range
operator|.
name|all
argument_list|()
argument_list|)
operator|.
name|addEqualityGroup
argument_list|(
name|Range
operator|.
name|atLeast
argument_list|(
literal|1
argument_list|)
argument_list|,
name|Range
operator|.
name|downTo
argument_list|(
literal|1
argument_list|,
name|CLOSED
argument_list|)
argument_list|)
operator|.
name|addEqualityGroup
argument_list|(
name|Range
operator|.
name|greaterThan
argument_list|(
literal|1
argument_list|)
argument_list|,
name|Range
operator|.
name|downTo
argument_list|(
literal|1
argument_list|,
name|OPEN
argument_list|)
argument_list|)
operator|.
name|addEqualityGroup
argument_list|(
name|Range
operator|.
name|atMost
argument_list|(
literal|7
argument_list|)
argument_list|,
name|Range
operator|.
name|upTo
argument_list|(
literal|7
argument_list|,
name|CLOSED
argument_list|)
argument_list|)
operator|.
name|addEqualityGroup
argument_list|(
name|Range
operator|.
name|lessThan
argument_list|(
literal|7
argument_list|)
argument_list|,
name|Range
operator|.
name|upTo
argument_list|(
literal|7
argument_list|,
name|OPEN
argument_list|)
argument_list|)
operator|.
name|addEqualityGroup
argument_list|(
name|Range
operator|.
name|open
argument_list|(
literal|1
argument_list|,
literal|7
argument_list|)
argument_list|,
name|Range
operator|.
name|range
argument_list|(
literal|1
argument_list|,
name|OPEN
argument_list|,
literal|7
argument_list|,
name|OPEN
argument_list|)
argument_list|)
operator|.
name|addEqualityGroup
argument_list|(
name|Range
operator|.
name|openClosed
argument_list|(
literal|1
argument_list|,
literal|7
argument_list|)
argument_list|,
name|Range
operator|.
name|range
argument_list|(
literal|1
argument_list|,
name|OPEN
argument_list|,
literal|7
argument_list|,
name|CLOSED
argument_list|)
argument_list|)
operator|.
name|addEqualityGroup
argument_list|(
name|Range
operator|.
name|closed
argument_list|(
literal|1
argument_list|,
literal|7
argument_list|)
argument_list|,
name|Range
operator|.
name|range
argument_list|(
literal|1
argument_list|,
name|CLOSED
argument_list|,
literal|7
argument_list|,
name|CLOSED
argument_list|)
argument_list|)
operator|.
name|addEqualityGroup
argument_list|(
name|Range
operator|.
name|closedOpen
argument_list|(
literal|1
argument_list|,
literal|7
argument_list|)
argument_list|,
name|Range
operator|.
name|range
argument_list|(
literal|1
argument_list|,
name|CLOSED
argument_list|,
literal|7
argument_list|,
name|OPEN
argument_list|)
argument_list|)
operator|.
name|testEquals
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

