begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2007 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.collect
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
operator|.
name|skip
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
operator|.
name|newArrayList
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
operator|.
name|newLinkedHashSet
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|IteratorFeature
operator|.
name|MODIFIABLE
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|IteratorFeature
operator|.
name|UNMODIFIABLE
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Arrays
operator|.
name|asList
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|emptyList
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|truth0
operator|.
name|Truth
operator|.
name|ASSERT
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtCompatible
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtIncompatible
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Predicates
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|IteratorTester
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|testing
operator|.
name|ClassSanityTester
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|testing
operator|.
name|NullPointerTester
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|AssertionFailedError
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ConcurrentModificationException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NoSuchElementException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Queue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|RandomAccess
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_comment
comment|/**  * Unit test for {@code Iterables}.  *  * @author Kevin Bourrillion  * @author Jared Levy  */
end_comment

begin_class
annotation|@
name|GwtCompatible
argument_list|(
name|emulated
operator|=
literal|true
argument_list|)
DECL|class|IterablesTest
specifier|public
class|class
name|IterablesTest
extends|extends
name|TestCase
block|{
DECL|method|testSize0 ()
specifier|public
name|void
name|testSize0
parameter_list|()
block|{
name|Iterable
argument_list|<
name|String
argument_list|>
name|iterable
init|=
name|Collections
operator|.
name|emptySet
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|Iterables
operator|.
name|size
argument_list|(
name|iterable
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testSize1Collection ()
specifier|public
name|void
name|testSize1Collection
parameter_list|()
block|{
name|Iterable
argument_list|<
name|String
argument_list|>
name|iterable
init|=
name|Collections
operator|.
name|singleton
argument_list|(
literal|"a"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|Iterables
operator|.
name|size
argument_list|(
name|iterable
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testSize2NonCollection ()
specifier|public
name|void
name|testSize2NonCollection
parameter_list|()
block|{
name|Iterable
argument_list|<
name|Integer
argument_list|>
name|iterable
init|=
operator|new
name|Iterable
argument_list|<
name|Integer
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|Integer
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
name|asList
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
operator|.
name|iterator
argument_list|()
return|;
block|}
block|}
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|Iterables
operator|.
name|size
argument_list|(
name|iterable
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"serial"
argument_list|)
DECL|method|testSize_collection_doesntIterate ()
specifier|public
name|void
name|testSize_collection_doesntIterate
parameter_list|()
block|{
name|List
argument_list|<
name|Integer
argument_list|>
name|nums
init|=
name|asList
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|collection
init|=
operator|new
name|ArrayList
argument_list|<
name|Integer
argument_list|>
argument_list|(
name|nums
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|Integer
argument_list|>
name|iterator
parameter_list|()
block|{
throw|throw
operator|new
name|AssertionFailedError
argument_list|(
literal|"Don't iterate me!"
argument_list|)
throw|;
block|}
block|}
decl_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|Iterables
operator|.
name|size
argument_list|(
name|collection
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|iterable (String... elements)
specifier|private
specifier|static
name|Iterable
argument_list|<
name|String
argument_list|>
name|iterable
parameter_list|(
name|String
modifier|...
name|elements
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|list
init|=
name|asList
argument_list|(
name|elements
argument_list|)
decl_stmt|;
return|return
operator|new
name|Iterable
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|String
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
name|list
operator|.
name|iterator
argument_list|()
return|;
block|}
block|}
return|;
block|}
DECL|method|test_contains_null_set_yes ()
specifier|public
name|void
name|test_contains_null_set_yes
parameter_list|()
block|{
name|Iterable
argument_list|<
name|String
argument_list|>
name|set
init|=
name|Sets
operator|.
name|newHashSet
argument_list|(
literal|"a"
argument_list|,
literal|null
argument_list|,
literal|"b"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|Iterables
operator|.
name|contains
argument_list|(
name|set
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|test_contains_null_set_no ()
specifier|public
name|void
name|test_contains_null_set_no
parameter_list|()
block|{
name|Iterable
argument_list|<
name|String
argument_list|>
name|set
init|=
name|Sets
operator|.
name|newHashSet
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|Iterables
operator|.
name|contains
argument_list|(
name|set
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|test_contains_null_iterable_yes ()
specifier|public
name|void
name|test_contains_null_iterable_yes
parameter_list|()
block|{
name|Iterable
argument_list|<
name|String
argument_list|>
name|set
init|=
name|iterable
argument_list|(
literal|"a"
argument_list|,
literal|null
argument_list|,
literal|"b"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|Iterables
operator|.
name|contains
argument_list|(
name|set
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|test_contains_null_iterable_no ()
specifier|public
name|void
name|test_contains_null_iterable_no
parameter_list|()
block|{
name|Iterable
argument_list|<
name|String
argument_list|>
name|set
init|=
name|iterable
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|Iterables
operator|.
name|contains
argument_list|(
name|set
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|test_contains_nonnull_set_yes ()
specifier|public
name|void
name|test_contains_nonnull_set_yes
parameter_list|()
block|{
name|Iterable
argument_list|<
name|String
argument_list|>
name|set
init|=
name|Sets
operator|.
name|newHashSet
argument_list|(
literal|"a"
argument_list|,
literal|null
argument_list|,
literal|"b"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|Iterables
operator|.
name|contains
argument_list|(
name|set
argument_list|,
literal|"b"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|test_contains_nonnull_set_no ()
specifier|public
name|void
name|test_contains_nonnull_set_no
parameter_list|()
block|{
name|Iterable
argument_list|<
name|String
argument_list|>
name|set
init|=
name|Sets
operator|.
name|newHashSet
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|Iterables
operator|.
name|contains
argument_list|(
name|set
argument_list|,
literal|"c"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|test_contains_nonnull_iterable_yes ()
specifier|public
name|void
name|test_contains_nonnull_iterable_yes
parameter_list|()
block|{
name|Iterable
argument_list|<
name|String
argument_list|>
name|set
init|=
name|iterable
argument_list|(
literal|"a"
argument_list|,
literal|null
argument_list|,
literal|"b"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|Iterables
operator|.
name|contains
argument_list|(
name|set
argument_list|,
literal|"b"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|test_contains_nonnull_iterable_no ()
specifier|public
name|void
name|test_contains_nonnull_iterable_no
parameter_list|()
block|{
name|Iterable
argument_list|<
name|String
argument_list|>
name|set
init|=
name|iterable
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|Iterables
operator|.
name|contains
argument_list|(
name|set
argument_list|,
literal|"c"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testGetOnlyElement_noDefault_valid ()
specifier|public
name|void
name|testGetOnlyElement_noDefault_valid
parameter_list|()
block|{
name|Iterable
argument_list|<
name|String
argument_list|>
name|iterable
init|=
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"foo"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"foo"
argument_list|,
name|Iterables
operator|.
name|getOnlyElement
argument_list|(
name|iterable
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testGetOnlyElement_noDefault_empty ()
specifier|public
name|void
name|testGetOnlyElement_noDefault_empty
parameter_list|()
block|{
name|Iterable
argument_list|<
name|String
argument_list|>
name|iterable
init|=
name|Collections
operator|.
name|emptyList
argument_list|()
decl_stmt|;
try|try
block|{
name|Iterables
operator|.
name|getOnlyElement
argument_list|(
name|iterable
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchElementException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testGetOnlyElement_noDefault_multiple ()
specifier|public
name|void
name|testGetOnlyElement_noDefault_multiple
parameter_list|()
block|{
name|Iterable
argument_list|<
name|String
argument_list|>
name|iterable
init|=
name|asList
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
decl_stmt|;
try|try
block|{
name|Iterables
operator|.
name|getOnlyElement
argument_list|(
name|iterable
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testGetOnlyElement_withDefault_singleton ()
specifier|public
name|void
name|testGetOnlyElement_withDefault_singleton
parameter_list|()
block|{
name|Iterable
argument_list|<
name|String
argument_list|>
name|iterable
init|=
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"foo"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"foo"
argument_list|,
name|Iterables
operator|.
name|getOnlyElement
argument_list|(
name|iterable
argument_list|,
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testGetOnlyElement_withDefault_empty ()
specifier|public
name|void
name|testGetOnlyElement_withDefault_empty
parameter_list|()
block|{
name|Iterable
argument_list|<
name|String
argument_list|>
name|iterable
init|=
name|Collections
operator|.
name|emptyList
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"bar"
argument_list|,
name|Iterables
operator|.
name|getOnlyElement
argument_list|(
name|iterable
argument_list|,
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testGetOnlyElement_withDefault_empty_null ()
specifier|public
name|void
name|testGetOnlyElement_withDefault_empty_null
parameter_list|()
block|{
name|Iterable
argument_list|<
name|String
argument_list|>
name|iterable
init|=
name|Collections
operator|.
name|emptyList
argument_list|()
decl_stmt|;
name|assertNull
argument_list|(
name|Iterables
operator|.
name|getOnlyElement
argument_list|(
name|iterable
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testGetOnlyElement_withDefault_multiple ()
specifier|public
name|void
name|testGetOnlyElement_withDefault_multiple
parameter_list|()
block|{
name|Iterable
argument_list|<
name|String
argument_list|>
name|iterable
init|=
name|asList
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
decl_stmt|;
try|try
block|{
name|Iterables
operator|.
name|getOnlyElement
argument_list|(
name|iterable
argument_list|,
literal|"x"
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{     }
block|}
annotation|@
name|GwtIncompatible
argument_list|(
literal|"Iterables.toArray(Iterable, Class)"
argument_list|)
DECL|method|testToArrayEmpty ()
specifier|public
name|void
name|testToArrayEmpty
parameter_list|()
block|{
name|Iterable
argument_list|<
name|String
argument_list|>
name|iterable
init|=
name|Collections
operator|.
name|emptyList
argument_list|()
decl_stmt|;
name|String
index|[]
name|array
init|=
name|Iterables
operator|.
name|toArray
argument_list|(
name|iterable
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
operator|new
name|String
index|[
literal|0
index|]
argument_list|,
name|array
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
argument_list|(
literal|"Iterables.toArray(Iterable, Class)"
argument_list|)
DECL|method|testToArraySingleton ()
specifier|public
name|void
name|testToArraySingleton
parameter_list|()
block|{
name|Iterable
argument_list|<
name|String
argument_list|>
name|iterable
init|=
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"a"
argument_list|)
decl_stmt|;
name|String
index|[]
name|array
init|=
name|Iterables
operator|.
name|toArray
argument_list|(
name|iterable
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"a"
block|}
argument_list|,
name|array
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
argument_list|(
literal|"Iterables.toArray(Iterable, Class)"
argument_list|)
DECL|method|testToArray ()
specifier|public
name|void
name|testToArray
parameter_list|()
block|{
name|String
index|[]
name|sourceArray
init|=
operator|new
name|String
index|[]
block|{
literal|"a"
block|,
literal|"b"
block|,
literal|"c"
block|}
decl_stmt|;
name|Iterable
argument_list|<
name|String
argument_list|>
name|iterable
init|=
name|asList
argument_list|(
name|sourceArray
argument_list|)
decl_stmt|;
name|String
index|[]
name|newArray
init|=
name|Iterables
operator|.
name|toArray
argument_list|(
name|iterable
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|sourceArray
argument_list|,
name|newArray
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testAny ()
specifier|public
name|void
name|testAny
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|list
init|=
name|newArrayList
argument_list|()
decl_stmt|;
name|Predicate
argument_list|<
name|String
argument_list|>
name|predicate
init|=
name|Predicates
operator|.
name|equalTo
argument_list|(
literal|"pants"
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|Iterables
operator|.
name|any
argument_list|(
name|list
argument_list|,
name|predicate
argument_list|)
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
literal|"cool"
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|Iterables
operator|.
name|any
argument_list|(
name|list
argument_list|,
name|predicate
argument_list|)
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
literal|"pants"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Iterables
operator|.
name|any
argument_list|(
name|list
argument_list|,
name|predicate
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testAll ()
specifier|public
name|void
name|testAll
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|list
init|=
name|newArrayList
argument_list|()
decl_stmt|;
name|Predicate
argument_list|<
name|String
argument_list|>
name|predicate
init|=
name|Predicates
operator|.
name|equalTo
argument_list|(
literal|"cool"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|Iterables
operator|.
name|all
argument_list|(
name|list
argument_list|,
name|predicate
argument_list|)
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
literal|"cool"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Iterables
operator|.
name|all
argument_list|(
name|list
argument_list|,
name|predicate
argument_list|)
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
literal|"pants"
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|Iterables
operator|.
name|all
argument_list|(
name|list
argument_list|,
name|predicate
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testFind ()
specifier|public
name|void
name|testFind
parameter_list|()
block|{
name|Iterable
argument_list|<
name|String
argument_list|>
name|list
init|=
name|newArrayList
argument_list|(
literal|"cool"
argument_list|,
literal|"pants"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"cool"
argument_list|,
name|Iterables
operator|.
name|find
argument_list|(
name|list
argument_list|,
name|Predicates
operator|.
name|equalTo
argument_list|(
literal|"cool"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"pants"
argument_list|,
name|Iterables
operator|.
name|find
argument_list|(
name|list
argument_list|,
name|Predicates
operator|.
name|equalTo
argument_list|(
literal|"pants"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|Iterables
operator|.
name|find
argument_list|(
name|list
argument_list|,
name|Predicates
operator|.
name|alwaysFalse
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchElementException
name|e
parameter_list|)
block|{     }
name|assertEquals
argument_list|(
literal|"cool"
argument_list|,
name|Iterables
operator|.
name|find
argument_list|(
name|list
argument_list|,
name|Predicates
operator|.
name|alwaysTrue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertCanIterateAgain
argument_list|(
name|list
argument_list|)
expr_stmt|;
block|}
DECL|method|testFind_withDefault ()
specifier|public
name|void
name|testFind_withDefault
parameter_list|()
block|{
name|Iterable
argument_list|<
name|String
argument_list|>
name|list
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"cool"
argument_list|,
literal|"pants"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"cool"
argument_list|,
name|Iterables
operator|.
name|find
argument_list|(
name|list
argument_list|,
name|Predicates
operator|.
name|equalTo
argument_list|(
literal|"cool"
argument_list|)
argument_list|,
literal|"woot"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"pants"
argument_list|,
name|Iterables
operator|.
name|find
argument_list|(
name|list
argument_list|,
name|Predicates
operator|.
name|equalTo
argument_list|(
literal|"pants"
argument_list|)
argument_list|,
literal|"woot"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"woot"
argument_list|,
name|Iterables
operator|.
name|find
argument_list|(
name|list
argument_list|,
name|Predicates
operator|.
name|alwaysFalse
argument_list|()
argument_list|,
literal|"woot"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|Iterables
operator|.
name|find
argument_list|(
name|list
argument_list|,
name|Predicates
operator|.
name|alwaysFalse
argument_list|()
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"cool"
argument_list|,
name|Iterables
operator|.
name|find
argument_list|(
name|list
argument_list|,
name|Predicates
operator|.
name|alwaysTrue
argument_list|()
argument_list|,
literal|"woot"
argument_list|)
argument_list|)
expr_stmt|;
name|assertCanIterateAgain
argument_list|(
name|list
argument_list|)
expr_stmt|;
block|}
DECL|method|testTryFind ()
specifier|public
name|void
name|testTryFind
parameter_list|()
block|{
name|Iterable
argument_list|<
name|String
argument_list|>
name|list
init|=
name|newArrayList
argument_list|(
literal|"cool"
argument_list|,
literal|"pants"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
literal|"cool"
argument_list|)
argument_list|,
name|Iterables
operator|.
name|tryFind
argument_list|(
name|list
argument_list|,
name|Predicates
operator|.
name|equalTo
argument_list|(
literal|"cool"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
literal|"pants"
argument_list|)
argument_list|,
name|Iterables
operator|.
name|tryFind
argument_list|(
name|list
argument_list|,
name|Predicates
operator|.
name|equalTo
argument_list|(
literal|"pants"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
literal|"cool"
argument_list|)
argument_list|,
name|Iterables
operator|.
name|tryFind
argument_list|(
name|list
argument_list|,
name|Predicates
operator|.
name|alwaysTrue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Optional
operator|.
name|absent
argument_list|()
argument_list|,
name|Iterables
operator|.
name|tryFind
argument_list|(
name|list
argument_list|,
name|Predicates
operator|.
name|alwaysFalse
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertCanIterateAgain
argument_list|(
name|list
argument_list|)
expr_stmt|;
block|}
DECL|class|TypeA
specifier|private
specifier|static
class|class
name|TypeA
block|{}
DECL|interface|TypeB
specifier|private
interface|interface
name|TypeB
block|{}
DECL|class|HasBoth
specifier|private
specifier|static
class|class
name|HasBoth
extends|extends
name|TypeA
implements|implements
name|TypeB
block|{}
annotation|@
name|GwtIncompatible
argument_list|(
literal|"Iterables.filter(Iterable, Class)"
argument_list|)
DECL|method|testFilterByType ()
specifier|public
name|void
name|testFilterByType
parameter_list|()
throws|throws
name|Exception
block|{
name|HasBoth
name|hasBoth
init|=
operator|new
name|HasBoth
argument_list|()
decl_stmt|;
name|Iterable
argument_list|<
name|TypeA
argument_list|>
name|alist
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
operator|new
name|TypeA
argument_list|()
argument_list|,
operator|new
name|TypeA
argument_list|()
argument_list|,
name|hasBoth
argument_list|,
operator|new
name|TypeA
argument_list|()
argument_list|)
decl_stmt|;
name|Iterable
argument_list|<
name|TypeB
argument_list|>
name|blist
init|=
name|Iterables
operator|.
name|filter
argument_list|(
name|alist
argument_list|,
name|TypeB
operator|.
name|class
argument_list|)
decl_stmt|;
name|ASSERT
operator|.
name|that
argument_list|(
name|blist
argument_list|)
operator|.
name|iteratesOverSequence
argument_list|(
name|hasBoth
argument_list|)
expr_stmt|;
block|}
DECL|method|testTransform ()
specifier|public
name|void
name|testTransform
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|input
init|=
name|asList
argument_list|(
literal|"1"
argument_list|,
literal|"2"
argument_list|,
literal|"3"
argument_list|)
decl_stmt|;
name|Iterable
argument_list|<
name|Integer
argument_list|>
name|result
init|=
name|Iterables
operator|.
name|transform
argument_list|(
name|input
argument_list|,
operator|new
name|Function
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Integer
name|apply
parameter_list|(
name|String
name|from
parameter_list|)
block|{
return|return
name|Integer
operator|.
name|valueOf
argument_list|(
name|from
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|actual
init|=
name|newArrayList
argument_list|(
name|result
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|expected
init|=
name|asList
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
name|assertCanIterateAgain
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[1, 2, 3]"
argument_list|,
name|result
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testPoorlyBehavedTransform ()
specifier|public
name|void
name|testPoorlyBehavedTransform
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|input
init|=
name|asList
argument_list|(
literal|"1"
argument_list|,
literal|null
argument_list|,
literal|"3"
argument_list|)
decl_stmt|;
name|Iterable
argument_list|<
name|Integer
argument_list|>
name|result
init|=
name|Iterables
operator|.
name|transform
argument_list|(
name|input
argument_list|,
operator|new
name|Function
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Integer
name|apply
parameter_list|(
name|String
name|from
parameter_list|)
block|{
return|return
name|Integer
operator|.
name|valueOf
argument_list|(
name|from
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|Integer
argument_list|>
name|resultIterator
init|=
name|result
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|resultIterator
operator|.
name|next
argument_list|()
expr_stmt|;
try|try
block|{
name|resultIterator
operator|.
name|next
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Expected NFE"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|nfe
parameter_list|)
block|{
comment|// Expected to fail.
block|}
block|}
DECL|method|testNullFriendlyTransform ()
specifier|public
name|void
name|testNullFriendlyTransform
parameter_list|()
block|{
name|List
argument_list|<
name|Integer
argument_list|>
name|input
init|=
name|asList
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|null
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|Iterable
argument_list|<
name|String
argument_list|>
name|result
init|=
name|Iterables
operator|.
name|transform
argument_list|(
name|input
argument_list|,
operator|new
name|Function
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|apply
parameter_list|(
name|Integer
name|from
parameter_list|)
block|{
return|return
name|String
operator|.
name|valueOf
argument_list|(
name|from
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|actual
init|=
name|newArrayList
argument_list|(
name|result
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|expected
init|=
name|asList
argument_list|(
literal|"1"
argument_list|,
literal|"2"
argument_list|,
literal|"null"
argument_list|,
literal|"3"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
block|}
comment|// Far less exhaustive than the tests in IteratorsTest
DECL|method|testCycle ()
specifier|public
name|void
name|testCycle
parameter_list|()
block|{
name|Iterable
argument_list|<
name|String
argument_list|>
name|cycle
init|=
name|Iterables
operator|.
name|cycle
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
decl_stmt|;
name|int
name|howManyChecked
init|=
literal|0
decl_stmt|;
for|for
control|(
name|String
name|string
range|:
name|cycle
control|)
block|{
name|String
name|expected
init|=
operator|(
name|howManyChecked
operator|%
literal|2
operator|==
literal|0
operator|)
condition|?
literal|"a"
else|:
literal|"b"
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|string
argument_list|)
expr_stmt|;
if|if
condition|(
name|howManyChecked
operator|++
operator|==
literal|5
condition|)
block|{
break|break;
block|}
block|}
comment|// We left the last iterator pointing to "b". But a new iterator should
comment|// always point to "a".
for|for
control|(
name|String
name|string
range|:
name|cycle
control|)
block|{
name|assertEquals
argument_list|(
literal|"a"
argument_list|,
name|string
argument_list|)
expr_stmt|;
break|break;
block|}
name|assertEquals
argument_list|(
literal|"[a, b] (cycled)"
argument_list|,
name|cycle
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Again, the exhaustive tests are in IteratorsTest
DECL|method|testConcatIterable ()
specifier|public
name|void
name|testConcatIterable
parameter_list|()
block|{
name|List
argument_list|<
name|Integer
argument_list|>
name|list1
init|=
name|newArrayList
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|list2
init|=
name|newArrayList
argument_list|(
literal|4
argument_list|)
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|List
argument_list|<
name|List
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|input
init|=
name|newArrayList
argument_list|(
name|list1
argument_list|,
name|list2
argument_list|)
decl_stmt|;
name|Iterable
argument_list|<
name|Integer
argument_list|>
name|result
init|=
name|Iterables
operator|.
name|concat
argument_list|(
name|input
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|asList
argument_list|(
literal|1
argument_list|,
literal|4
argument_list|)
argument_list|,
name|newArrayList
argument_list|(
name|result
argument_list|)
argument_list|)
expr_stmt|;
comment|// Now change the inputs and see result dynamically change as well
name|list1
operator|.
name|add
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|list3
init|=
name|newArrayList
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|input
operator|.
name|add
argument_list|(
literal|1
argument_list|,
name|list3
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|asList
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|)
argument_list|,
name|newArrayList
argument_list|(
name|result
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[1, 2, 3, 4]"
argument_list|,
name|result
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testConcatVarargs ()
specifier|public
name|void
name|testConcatVarargs
parameter_list|()
block|{
name|List
argument_list|<
name|Integer
argument_list|>
name|list1
init|=
name|newArrayList
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|list2
init|=
name|newArrayList
argument_list|(
literal|4
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|list3
init|=
name|newArrayList
argument_list|(
literal|7
argument_list|,
literal|8
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|list4
init|=
name|newArrayList
argument_list|(
literal|9
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|list5
init|=
name|newArrayList
argument_list|(
literal|10
argument_list|)
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Iterable
argument_list|<
name|Integer
argument_list|>
name|result
init|=
name|Iterables
operator|.
name|concat
argument_list|(
name|list1
argument_list|,
name|list2
argument_list|,
name|list3
argument_list|,
name|list4
argument_list|,
name|list5
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|asList
argument_list|(
literal|1
argument_list|,
literal|4
argument_list|,
literal|7
argument_list|,
literal|8
argument_list|,
literal|9
argument_list|,
literal|10
argument_list|)
argument_list|,
name|newArrayList
argument_list|(
name|result
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[1, 4, 7, 8, 9, 10]"
argument_list|,
name|result
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testConcatNullPointerException ()
specifier|public
name|void
name|testConcatNullPointerException
parameter_list|()
block|{
name|List
argument_list|<
name|Integer
argument_list|>
name|list1
init|=
name|newArrayList
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|list2
init|=
name|newArrayList
argument_list|(
literal|4
argument_list|)
decl_stmt|;
try|try
block|{
name|Iterables
operator|.
name|concat
argument_list|(
name|list1
argument_list|,
literal|null
argument_list|,
name|list2
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|expected
parameter_list|)
block|{}
block|}
DECL|method|testConcatPeformingFiniteCycle ()
specifier|public
name|void
name|testConcatPeformingFiniteCycle
parameter_list|()
block|{
name|Iterable
argument_list|<
name|Integer
argument_list|>
name|iterable
init|=
name|asList
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|int
name|n
init|=
literal|4
decl_stmt|;
name|Iterable
argument_list|<
name|Integer
argument_list|>
name|repeated
init|=
name|Iterables
operator|.
name|concat
argument_list|(
name|Collections
operator|.
name|nCopies
argument_list|(
name|n
argument_list|,
name|iterable
argument_list|)
argument_list|)
decl_stmt|;
name|ASSERT
operator|.
name|that
argument_list|(
name|repeated
argument_list|)
operator|.
name|iteratesOverSequence
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
expr_stmt|;
block|}
DECL|method|testPartition_badSize ()
specifier|public
name|void
name|testPartition_badSize
parameter_list|()
block|{
name|Iterable
argument_list|<
name|Integer
argument_list|>
name|source
init|=
name|Collections
operator|.
name|singleton
argument_list|(
literal|1
argument_list|)
decl_stmt|;
try|try
block|{
name|Iterables
operator|.
name|partition
argument_list|(
name|source
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testPartition_empty ()
specifier|public
name|void
name|testPartition_empty
parameter_list|()
block|{
name|Iterable
argument_list|<
name|Integer
argument_list|>
name|source
init|=
name|Collections
operator|.
name|emptySet
argument_list|()
decl_stmt|;
name|Iterable
argument_list|<
name|List
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|partitions
init|=
name|Iterables
operator|.
name|partition
argument_list|(
name|source
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|Iterables
operator|.
name|isEmpty
argument_list|(
name|partitions
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testPartition_singleton1 ()
specifier|public
name|void
name|testPartition_singleton1
parameter_list|()
block|{
name|Iterable
argument_list|<
name|Integer
argument_list|>
name|source
init|=
name|Collections
operator|.
name|singleton
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|Iterable
argument_list|<
name|List
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|partitions
init|=
name|Iterables
operator|.
name|partition
argument_list|(
name|source
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|Iterables
operator|.
name|size
argument_list|(
name|partitions
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
literal|1
argument_list|)
argument_list|,
name|partitions
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testPartition_view ()
specifier|public
name|void
name|testPartition_view
parameter_list|()
block|{
name|List
argument_list|<
name|Integer
argument_list|>
name|list
init|=
name|asList
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|Iterable
argument_list|<
name|List
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|partitions
init|=
name|Iterables
operator|.
name|partition
argument_list|(
name|list
argument_list|,
literal|2
argument_list|)
decl_stmt|;
comment|// Changes before the partition is retrieved are reflected
name|list
operator|.
name|set
argument_list|(
literal|0
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|List
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|iterator
init|=
name|partitions
operator|.
name|iterator
argument_list|()
decl_stmt|;
comment|// Changes before the partition is retrieved are reflected
name|list
operator|.
name|set
argument_list|(
literal|1
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|first
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
comment|// Changes after are not
name|list
operator|.
name|set
argument_list|(
literal|0
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
literal|3
argument_list|,
literal|4
argument_list|)
argument_list|,
name|first
argument_list|)
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
argument_list|(
literal|"?"
argument_list|)
comment|// TODO: Figure out why this is failing in GWT.
DECL|method|testPartitionRandomAccessInput ()
specifier|public
name|void
name|testPartitionRandomAccessInput
parameter_list|()
block|{
name|Iterable
argument_list|<
name|Integer
argument_list|>
name|source
init|=
name|asList
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|Iterable
argument_list|<
name|List
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|partitions
init|=
name|Iterables
operator|.
name|partition
argument_list|(
name|source
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|List
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|iterator
init|=
name|partitions
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|iterator
operator|.
name|next
argument_list|()
operator|instanceof
name|RandomAccess
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|iterator
operator|.
name|next
argument_list|()
operator|instanceof
name|RandomAccess
argument_list|)
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
argument_list|(
literal|"?"
argument_list|)
comment|// TODO: Figure out why this is failing in GWT.
DECL|method|testPartitionNonRandomAccessInput ()
specifier|public
name|void
name|testPartitionNonRandomAccessInput
parameter_list|()
block|{
name|Iterable
argument_list|<
name|Integer
argument_list|>
name|source
init|=
name|Lists
operator|.
name|newLinkedList
argument_list|(
name|asList
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
argument_list|)
decl_stmt|;
name|Iterable
argument_list|<
name|List
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|partitions
init|=
name|Iterables
operator|.
name|partition
argument_list|(
name|source
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|List
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|iterator
init|=
name|partitions
operator|.
name|iterator
argument_list|()
decl_stmt|;
comment|// Even though the input list doesn't implement RandomAccess, the output
comment|// lists do.
name|assertTrue
argument_list|(
name|iterator
operator|.
name|next
argument_list|()
operator|instanceof
name|RandomAccess
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|iterator
operator|.
name|next
argument_list|()
operator|instanceof
name|RandomAccess
argument_list|)
expr_stmt|;
block|}
DECL|method|testPaddedPartition_basic ()
specifier|public
name|void
name|testPaddedPartition_basic
parameter_list|()
block|{
name|List
argument_list|<
name|Integer
argument_list|>
name|list
init|=
name|asList
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|Iterable
argument_list|<
name|List
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|partitions
init|=
name|Iterables
operator|.
name|paddedPartition
argument_list|(
name|list
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|Iterables
operator|.
name|size
argument_list|(
name|partitions
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|asList
argument_list|(
literal|5
argument_list|,
literal|null
argument_list|)
argument_list|,
name|Iterables
operator|.
name|getLast
argument_list|(
name|partitions
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testPaddedPartitionRandomAccessInput ()
specifier|public
name|void
name|testPaddedPartitionRandomAccessInput
parameter_list|()
block|{
name|Iterable
argument_list|<
name|Integer
argument_list|>
name|source
init|=
name|asList
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|Iterable
argument_list|<
name|List
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|partitions
init|=
name|Iterables
operator|.
name|paddedPartition
argument_list|(
name|source
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|List
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|iterator
init|=
name|partitions
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|iterator
operator|.
name|next
argument_list|()
operator|instanceof
name|RandomAccess
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|iterator
operator|.
name|next
argument_list|()
operator|instanceof
name|RandomAccess
argument_list|)
expr_stmt|;
block|}
DECL|method|testPaddedPartitionNonRandomAccessInput ()
specifier|public
name|void
name|testPaddedPartitionNonRandomAccessInput
parameter_list|()
block|{
name|Iterable
argument_list|<
name|Integer
argument_list|>
name|source
init|=
name|Lists
operator|.
name|newLinkedList
argument_list|(
name|asList
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
argument_list|)
decl_stmt|;
name|Iterable
argument_list|<
name|List
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|partitions
init|=
name|Iterables
operator|.
name|paddedPartition
argument_list|(
name|source
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|List
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|iterator
init|=
name|partitions
operator|.
name|iterator
argument_list|()
decl_stmt|;
comment|// Even though the input list doesn't implement RandomAccess, the output
comment|// lists do.
name|assertTrue
argument_list|(
name|iterator
operator|.
name|next
argument_list|()
operator|instanceof
name|RandomAccess
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|iterator
operator|.
name|next
argument_list|()
operator|instanceof
name|RandomAccess
argument_list|)
expr_stmt|;
block|}
comment|// More tests in IteratorsTest
DECL|method|testAddAllToList ()
specifier|public
name|void
name|testAddAllToList
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|alreadyThere
init|=
name|newArrayList
argument_list|(
literal|"already"
argument_list|,
literal|"there"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|freshlyAdded
init|=
name|newArrayList
argument_list|(
literal|"freshly"
argument_list|,
literal|"added"
argument_list|)
decl_stmt|;
name|boolean
name|changed
init|=
name|Iterables
operator|.
name|addAll
argument_list|(
name|alreadyThere
argument_list|,
name|freshlyAdded
argument_list|)
decl_stmt|;
name|ASSERT
operator|.
name|that
argument_list|(
name|alreadyThere
argument_list|)
operator|.
name|has
argument_list|()
operator|.
name|exactly
argument_list|(
literal|"already"
argument_list|,
literal|"there"
argument_list|,
literal|"freshly"
argument_list|,
literal|"added"
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|changed
argument_list|)
expr_stmt|;
block|}
DECL|method|assertCanIterateAgain (Iterable<?> iterable)
specifier|private
specifier|static
name|void
name|assertCanIterateAgain
parameter_list|(
name|Iterable
argument_list|<
name|?
argument_list|>
name|iterable
parameter_list|)
block|{
for|for
control|(
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
name|Object
name|obj
range|:
name|iterable
control|)
block|{     }
block|}
annotation|@
name|GwtIncompatible
argument_list|(
literal|"NullPointerTester"
argument_list|)
DECL|method|testNullPointerExceptions ()
specifier|public
name|void
name|testNullPointerExceptions
parameter_list|()
block|{
name|NullPointerTester
name|tester
init|=
operator|new
name|NullPointerTester
argument_list|()
decl_stmt|;
name|tester
operator|.
name|testAllPublicStaticMethods
argument_list|(
name|Iterables
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
comment|// More exhaustive tests are in IteratorsTest.
DECL|method|testElementsEqual ()
specifier|public
name|void
name|testElementsEqual
parameter_list|()
throws|throws
name|Exception
block|{
name|Iterable
argument_list|<
name|?
argument_list|>
name|a
decl_stmt|;
name|Iterable
argument_list|<
name|?
argument_list|>
name|b
decl_stmt|;
comment|// A few elements.
name|a
operator|=
name|asList
argument_list|(
literal|4
argument_list|,
literal|8
argument_list|,
literal|15
argument_list|,
literal|16
argument_list|,
literal|23
argument_list|,
literal|42
argument_list|)
expr_stmt|;
name|b
operator|=
name|asList
argument_list|(
literal|4
argument_list|,
literal|8
argument_list|,
literal|15
argument_list|,
literal|16
argument_list|,
literal|23
argument_list|,
literal|42
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Iterables
operator|.
name|elementsEqual
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
argument_list|)
expr_stmt|;
comment|// An element differs.
name|a
operator|=
name|asList
argument_list|(
literal|4
argument_list|,
literal|8
argument_list|,
literal|15
argument_list|,
literal|12
argument_list|,
literal|23
argument_list|,
literal|42
argument_list|)
expr_stmt|;
name|b
operator|=
name|asList
argument_list|(
literal|4
argument_list|,
literal|8
argument_list|,
literal|15
argument_list|,
literal|16
argument_list|,
literal|23
argument_list|,
literal|42
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|Iterables
operator|.
name|elementsEqual
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
argument_list|)
expr_stmt|;
comment|// null versus non-null.
name|a
operator|=
name|asList
argument_list|(
literal|4
argument_list|,
literal|8
argument_list|,
literal|15
argument_list|,
literal|null
argument_list|,
literal|23
argument_list|,
literal|42
argument_list|)
expr_stmt|;
name|b
operator|=
name|asList
argument_list|(
literal|4
argument_list|,
literal|8
argument_list|,
literal|15
argument_list|,
literal|16
argument_list|,
literal|23
argument_list|,
literal|42
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|Iterables
operator|.
name|elementsEqual
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|Iterables
operator|.
name|elementsEqual
argument_list|(
name|b
argument_list|,
name|a
argument_list|)
argument_list|)
expr_stmt|;
comment|// Different lengths.
name|a
operator|=
name|asList
argument_list|(
literal|4
argument_list|,
literal|8
argument_list|,
literal|15
argument_list|,
literal|16
argument_list|,
literal|23
argument_list|)
expr_stmt|;
name|b
operator|=
name|asList
argument_list|(
literal|4
argument_list|,
literal|8
argument_list|,
literal|15
argument_list|,
literal|16
argument_list|,
literal|23
argument_list|,
literal|42
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|Iterables
operator|.
name|elementsEqual
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|Iterables
operator|.
name|elementsEqual
argument_list|(
name|b
argument_list|,
name|a
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testToString ()
specifier|public
name|void
name|testToString
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|list
init|=
name|Collections
operator|.
name|emptyList
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"[]"
argument_list|,
name|Iterables
operator|.
name|toString
argument_list|(
name|list
argument_list|)
argument_list|)
expr_stmt|;
name|list
operator|=
name|newArrayList
argument_list|(
literal|"yam"
argument_list|,
literal|"bam"
argument_list|,
literal|"jam"
argument_list|,
literal|"ham"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[yam, bam, jam, ham]"
argument_list|,
name|Iterables
operator|.
name|toString
argument_list|(
name|list
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testLimit ()
specifier|public
name|void
name|testLimit
parameter_list|()
block|{
name|Iterable
argument_list|<
name|String
argument_list|>
name|iterable
init|=
name|newArrayList
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|,
literal|"baz"
argument_list|)
decl_stmt|;
name|Iterable
argument_list|<
name|String
argument_list|>
name|limited
init|=
name|Iterables
operator|.
name|limit
argument_list|(
name|iterable
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|expected
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|actual
init|=
name|newArrayList
argument_list|(
name|limited
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
name|assertCanIterateAgain
argument_list|(
name|limited
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[foo, bar]"
argument_list|,
name|limited
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testLimit_illegalArgument ()
specifier|public
name|void
name|testLimit_illegalArgument
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|list
init|=
name|newArrayList
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|)
decl_stmt|;
try|try
block|{
name|Iterables
operator|.
name|limit
argument_list|(
name|list
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{}
block|}
DECL|method|testIsEmpty ()
specifier|public
name|void
name|testIsEmpty
parameter_list|()
block|{
name|Iterable
argument_list|<
name|String
argument_list|>
name|emptyList
init|=
name|Collections
operator|.
name|emptyList
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|Iterables
operator|.
name|isEmpty
argument_list|(
name|emptyList
argument_list|)
argument_list|)
expr_stmt|;
name|Iterable
argument_list|<
name|String
argument_list|>
name|singletonList
init|=
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"foo"
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|Iterables
operator|.
name|isEmpty
argument_list|(
name|singletonList
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testSkip_simple ()
specifier|public
name|void
name|testSkip_simple
parameter_list|()
block|{
name|Collection
argument_list|<
name|String
argument_list|>
name|set
init|=
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|,
literal|"d"
argument_list|,
literal|"e"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|newArrayList
argument_list|(
literal|"c"
argument_list|,
literal|"d"
argument_list|,
literal|"e"
argument_list|)
argument_list|,
name|newArrayList
argument_list|(
name|skip
argument_list|(
name|set
argument_list|,
literal|2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[c, d, e]"
argument_list|,
name|skip
argument_list|(
name|set
argument_list|,
literal|2
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testSkip_simpleList ()
specifier|public
name|void
name|testSkip_simpleList
parameter_list|()
block|{
name|Collection
argument_list|<
name|String
argument_list|>
name|list
init|=
name|newArrayList
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|,
literal|"d"
argument_list|,
literal|"e"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|newArrayList
argument_list|(
literal|"c"
argument_list|,
literal|"d"
argument_list|,
literal|"e"
argument_list|)
argument_list|,
name|newArrayList
argument_list|(
name|skip
argument_list|(
name|list
argument_list|,
literal|2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[c, d, e]"
argument_list|,
name|skip
argument_list|(
name|list
argument_list|,
literal|2
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testSkip_pastEnd ()
specifier|public
name|void
name|testSkip_pastEnd
parameter_list|()
block|{
name|Collection
argument_list|<
name|String
argument_list|>
name|set
init|=
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|emptyList
argument_list|()
argument_list|,
name|newArrayList
argument_list|(
name|skip
argument_list|(
name|set
argument_list|,
literal|20
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testSkip_pastEndList ()
specifier|public
name|void
name|testSkip_pastEndList
parameter_list|()
block|{
name|Collection
argument_list|<
name|String
argument_list|>
name|list
init|=
name|newArrayList
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|emptyList
argument_list|()
argument_list|,
name|newArrayList
argument_list|(
name|skip
argument_list|(
name|list
argument_list|,
literal|20
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testSkip_skipNone ()
specifier|public
name|void
name|testSkip_skipNone
parameter_list|()
block|{
name|Collection
argument_list|<
name|String
argument_list|>
name|set
init|=
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|newArrayList
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
argument_list|,
name|newArrayList
argument_list|(
name|skip
argument_list|(
name|set
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testSkip_skipNoneList ()
specifier|public
name|void
name|testSkip_skipNoneList
parameter_list|()
block|{
name|Collection
argument_list|<
name|String
argument_list|>
name|list
init|=
name|newArrayList
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|newArrayList
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
argument_list|,
name|newArrayList
argument_list|(
name|skip
argument_list|(
name|list
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testSkip_removal ()
specifier|public
name|void
name|testSkip_removal
parameter_list|()
block|{
name|Collection
argument_list|<
name|String
argument_list|>
name|set
init|=
name|Sets
operator|.
name|newHashSet
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|String
argument_list|>
name|iterator
init|=
name|skip
argument_list|(
name|set
argument_list|,
literal|2
argument_list|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
try|try
block|{
name|iterator
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchElementException
name|suppressed
parameter_list|)
block|{
comment|// We want remove() to fail even after a failed call to next().
block|}
try|try
block|{
name|iterator
operator|.
name|remove
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Expected IllegalStateException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|expected
parameter_list|)
block|{}
block|}
DECL|method|testSkip_allOfMutableList_modifiable ()
specifier|public
name|void
name|testSkip_allOfMutableList_modifiable
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|list
init|=
name|newArrayList
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|String
argument_list|>
name|iterator
init|=
name|skip
argument_list|(
name|list
argument_list|,
literal|2
argument_list|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
try|try
block|{
name|iterator
operator|.
name|remove
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Expected IllegalStateException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|expected
parameter_list|)
block|{}
block|}
DECL|method|testSkip_allOfImmutableList_modifiable ()
specifier|public
name|void
name|testSkip_allOfImmutableList_modifiable
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|list
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|String
argument_list|>
name|iterator
init|=
name|skip
argument_list|(
name|list
argument_list|,
literal|2
argument_list|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
try|try
block|{
name|iterator
operator|.
name|remove
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Expected UnsupportedOperationException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|expected
parameter_list|)
block|{}
block|}
annotation|@
name|GwtIncompatible
argument_list|(
literal|"slow (~35s)"
argument_list|)
DECL|method|testSkip_iterator ()
specifier|public
name|void
name|testSkip_iterator
parameter_list|()
block|{
operator|new
name|IteratorTester
argument_list|<
name|Integer
argument_list|>
argument_list|(
literal|5
argument_list|,
name|MODIFIABLE
argument_list|,
name|newArrayList
argument_list|(
literal|2
argument_list|,
literal|3
argument_list|)
argument_list|,
name|IteratorTester
operator|.
name|KnownOrder
operator|.
name|KNOWN_ORDER
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|Iterator
argument_list|<
name|Integer
argument_list|>
name|newTargetIterator
parameter_list|()
block|{
return|return
name|skip
argument_list|(
name|newLinkedHashSet
argument_list|(
name|asList
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
argument_list|)
argument_list|,
literal|1
argument_list|)
operator|.
name|iterator
argument_list|()
return|;
block|}
block|}
operator|.
name|test
argument_list|()
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
argument_list|(
literal|"slow (~35s)"
argument_list|)
DECL|method|testSkip_iteratorList ()
specifier|public
name|void
name|testSkip_iteratorList
parameter_list|()
block|{
operator|new
name|IteratorTester
argument_list|<
name|Integer
argument_list|>
argument_list|(
literal|5
argument_list|,
name|MODIFIABLE
argument_list|,
name|newArrayList
argument_list|(
literal|2
argument_list|,
literal|3
argument_list|)
argument_list|,
name|IteratorTester
operator|.
name|KnownOrder
operator|.
name|KNOWN_ORDER
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|Iterator
argument_list|<
name|Integer
argument_list|>
name|newTargetIterator
parameter_list|()
block|{
return|return
name|skip
argument_list|(
name|newArrayList
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
argument_list|,
literal|1
argument_list|)
operator|.
name|iterator
argument_list|()
return|;
block|}
block|}
operator|.
name|test
argument_list|()
expr_stmt|;
block|}
DECL|method|testSkip_nonStructurallyModifiedList ()
specifier|public
name|void
name|testSkip_nonStructurallyModifiedList
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|String
argument_list|>
name|list
init|=
name|newArrayList
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|)
decl_stmt|;
name|Iterable
argument_list|<
name|String
argument_list|>
name|tail
init|=
name|skip
argument_list|(
name|list
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|String
argument_list|>
name|tailIterator
init|=
name|tail
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|list
operator|.
name|set
argument_list|(
literal|2
argument_list|,
literal|"C"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"b"
argument_list|,
name|tailIterator
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"C"
argument_list|,
name|tailIterator
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|tailIterator
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testSkip_structurallyModifiedSkipSome ()
specifier|public
name|void
name|testSkip_structurallyModifiedSkipSome
parameter_list|()
throws|throws
name|Exception
block|{
name|Collection
argument_list|<
name|String
argument_list|>
name|set
init|=
name|newLinkedHashSet
argument_list|(
name|asList
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|)
argument_list|)
decl_stmt|;
name|Iterable
argument_list|<
name|String
argument_list|>
name|tail
init|=
name|skip
argument_list|(
name|set
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|set
operator|.
name|remove
argument_list|(
literal|"b"
argument_list|)
expr_stmt|;
name|set
operator|.
name|addAll
argument_list|(
name|newArrayList
argument_list|(
literal|"A"
argument_list|,
literal|"B"
argument_list|,
literal|"C"
argument_list|)
argument_list|)
expr_stmt|;
name|ASSERT
operator|.
name|that
argument_list|(
name|tail
argument_list|)
operator|.
name|iteratesOverSequence
argument_list|(
literal|"c"
argument_list|,
literal|"A"
argument_list|,
literal|"B"
argument_list|,
literal|"C"
argument_list|)
expr_stmt|;
block|}
DECL|method|testSkip_structurallyModifiedSkipSomeList ()
specifier|public
name|void
name|testSkip_structurallyModifiedSkipSomeList
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|String
argument_list|>
name|list
init|=
name|newArrayList
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|)
decl_stmt|;
name|Iterable
argument_list|<
name|String
argument_list|>
name|tail
init|=
name|skip
argument_list|(
name|list
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|list
operator|.
name|subList
argument_list|(
literal|1
argument_list|,
literal|3
argument_list|)
operator|.
name|clear
argument_list|()
expr_stmt|;
name|list
operator|.
name|addAll
argument_list|(
literal|0
argument_list|,
name|newArrayList
argument_list|(
literal|"A"
argument_list|,
literal|"B"
argument_list|,
literal|"C"
argument_list|)
argument_list|)
expr_stmt|;
name|ASSERT
operator|.
name|that
argument_list|(
name|tail
argument_list|)
operator|.
name|iteratesOverSequence
argument_list|(
literal|"B"
argument_list|,
literal|"C"
argument_list|,
literal|"a"
argument_list|)
expr_stmt|;
block|}
DECL|method|testSkip_structurallyModifiedSkipAll ()
specifier|public
name|void
name|testSkip_structurallyModifiedSkipAll
parameter_list|()
throws|throws
name|Exception
block|{
name|Collection
argument_list|<
name|String
argument_list|>
name|set
init|=
name|newLinkedHashSet
argument_list|(
name|asList
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|)
argument_list|)
decl_stmt|;
name|Iterable
argument_list|<
name|String
argument_list|>
name|tail
init|=
name|skip
argument_list|(
name|set
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|set
operator|.
name|remove
argument_list|(
literal|"a"
argument_list|)
expr_stmt|;
name|set
operator|.
name|remove
argument_list|(
literal|"b"
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|tail
operator|.
name|iterator
argument_list|()
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testSkip_structurallyModifiedSkipAllList ()
specifier|public
name|void
name|testSkip_structurallyModifiedSkipAllList
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|String
argument_list|>
name|list
init|=
name|newArrayList
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|)
decl_stmt|;
name|Iterable
argument_list|<
name|String
argument_list|>
name|tail
init|=
name|skip
argument_list|(
name|list
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|list
operator|.
name|subList
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|)
operator|.
name|clear
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|Iterables
operator|.
name|isEmpty
argument_list|(
name|tail
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testSkip_illegalArgument ()
specifier|public
name|void
name|testSkip_illegalArgument
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|list
init|=
name|newArrayList
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|)
decl_stmt|;
try|try
block|{
name|skip
argument_list|(
name|list
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{}
block|}
DECL|method|testGetOnAbc (Iterable<String> iterable)
specifier|private
name|void
name|testGetOnAbc
parameter_list|(
name|Iterable
argument_list|<
name|String
argument_list|>
name|iterable
parameter_list|)
block|{
try|try
block|{
name|Iterables
operator|.
name|get
argument_list|(
name|iterable
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IndexOutOfBoundsException
name|expected
parameter_list|)
block|{}
name|assertEquals
argument_list|(
literal|"a"
argument_list|,
name|Iterables
operator|.
name|get
argument_list|(
name|iterable
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"b"
argument_list|,
name|Iterables
operator|.
name|get
argument_list|(
name|iterable
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"c"
argument_list|,
name|Iterables
operator|.
name|get
argument_list|(
name|iterable
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|Iterables
operator|.
name|get
argument_list|(
name|iterable
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IndexOutOfBoundsException
name|nsee
parameter_list|)
block|{}
try|try
block|{
name|Iterables
operator|.
name|get
argument_list|(
name|iterable
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IndexOutOfBoundsException
name|nsee
parameter_list|)
block|{}
block|}
DECL|method|testGetOnEmpty (Iterable<String> iterable)
specifier|private
name|void
name|testGetOnEmpty
parameter_list|(
name|Iterable
argument_list|<
name|String
argument_list|>
name|iterable
parameter_list|)
block|{
try|try
block|{
name|Iterables
operator|.
name|get
argument_list|(
name|iterable
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IndexOutOfBoundsException
name|expected
parameter_list|)
block|{}
block|}
DECL|method|testGet_list ()
specifier|public
name|void
name|testGet_list
parameter_list|()
block|{
name|testGetOnAbc
argument_list|(
name|newArrayList
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testGet_emptyList ()
specifier|public
name|void
name|testGet_emptyList
parameter_list|()
block|{
name|testGetOnEmpty
argument_list|(
name|Collections
operator|.
expr|<
name|String
operator|>
name|emptyList
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testGet_sortedSet ()
specifier|public
name|void
name|testGet_sortedSet
parameter_list|()
block|{
name|testGetOnAbc
argument_list|(
name|ImmutableSortedSet
operator|.
name|of
argument_list|(
literal|"b"
argument_list|,
literal|"c"
argument_list|,
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testGet_emptySortedSet ()
specifier|public
name|void
name|testGet_emptySortedSet
parameter_list|()
block|{
name|testGetOnEmpty
argument_list|(
name|ImmutableSortedSet
operator|.
expr|<
name|String
operator|>
name|of
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testGet_iterable ()
specifier|public
name|void
name|testGet_iterable
parameter_list|()
block|{
name|testGetOnAbc
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testGet_emptyIterable ()
specifier|public
name|void
name|testGet_emptyIterable
parameter_list|()
block|{
name|testGetOnEmpty
argument_list|(
name|Sets
operator|.
expr|<
name|String
operator|>
name|newHashSet
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testGet_withDefault_negativePosition ()
specifier|public
name|void
name|testGet_withDefault_negativePosition
parameter_list|()
block|{
try|try
block|{
name|Iterables
operator|.
name|get
argument_list|(
name|newArrayList
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|)
argument_list|,
operator|-
literal|1
argument_list|,
literal|"d"
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IndexOutOfBoundsException
name|expected
parameter_list|)
block|{
comment|// pass
block|}
block|}
DECL|method|testGet_withDefault_simple ()
specifier|public
name|void
name|testGet_withDefault_simple
parameter_list|()
block|{
name|ArrayList
argument_list|<
name|String
argument_list|>
name|list
init|=
name|newArrayList
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"b"
argument_list|,
name|Iterables
operator|.
name|get
argument_list|(
name|list
argument_list|,
literal|1
argument_list|,
literal|"d"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testGet_withDefault_iterable ()
specifier|public
name|void
name|testGet_withDefault_iterable
parameter_list|()
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|set
init|=
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"b"
argument_list|,
name|Iterables
operator|.
name|get
argument_list|(
name|set
argument_list|,
literal|1
argument_list|,
literal|"d"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testGet_withDefault_last ()
specifier|public
name|void
name|testGet_withDefault_last
parameter_list|()
block|{
name|ArrayList
argument_list|<
name|String
argument_list|>
name|list
init|=
name|newArrayList
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"c"
argument_list|,
name|Iterables
operator|.
name|get
argument_list|(
name|list
argument_list|,
literal|2
argument_list|,
literal|"d"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testGet_withDefault_lastPlusOne ()
specifier|public
name|void
name|testGet_withDefault_lastPlusOne
parameter_list|()
block|{
name|ArrayList
argument_list|<
name|String
argument_list|>
name|list
init|=
name|newArrayList
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"d"
argument_list|,
name|Iterables
operator|.
name|get
argument_list|(
name|list
argument_list|,
literal|3
argument_list|,
literal|"d"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testGet_withDefault_doesntIterate ()
specifier|public
name|void
name|testGet_withDefault_doesntIterate
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|list
init|=
operator|new
name|DiesOnIteratorArrayList
argument_list|()
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
literal|"a"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a"
argument_list|,
name|Iterables
operator|.
name|get
argument_list|(
name|list
argument_list|,
literal|0
argument_list|,
literal|"b"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testGetFirst_withDefault_singleton ()
specifier|public
name|void
name|testGetFirst_withDefault_singleton
parameter_list|()
block|{
name|Iterable
argument_list|<
name|String
argument_list|>
name|iterable
init|=
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"foo"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"foo"
argument_list|,
name|Iterables
operator|.
name|getFirst
argument_list|(
name|iterable
argument_list|,
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testGetFirst_withDefault_empty ()
specifier|public
name|void
name|testGetFirst_withDefault_empty
parameter_list|()
block|{
name|Iterable
argument_list|<
name|String
argument_list|>
name|iterable
init|=
name|Collections
operator|.
name|emptyList
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"bar"
argument_list|,
name|Iterables
operator|.
name|getFirst
argument_list|(
name|iterable
argument_list|,
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testGetFirst_withDefault_empty_null ()
specifier|public
name|void
name|testGetFirst_withDefault_empty_null
parameter_list|()
block|{
name|Iterable
argument_list|<
name|String
argument_list|>
name|iterable
init|=
name|Collections
operator|.
name|emptyList
argument_list|()
decl_stmt|;
name|assertNull
argument_list|(
name|Iterables
operator|.
name|getFirst
argument_list|(
name|iterable
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testGetFirst_withDefault_multiple ()
specifier|public
name|void
name|testGetFirst_withDefault_multiple
parameter_list|()
block|{
name|Iterable
argument_list|<
name|String
argument_list|>
name|iterable
init|=
name|asList
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"foo"
argument_list|,
name|Iterables
operator|.
name|getFirst
argument_list|(
name|iterable
argument_list|,
literal|"qux"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testGetLast_list ()
specifier|public
name|void
name|testGetLast_list
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|list
init|=
name|newArrayList
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"c"
argument_list|,
name|Iterables
operator|.
name|getLast
argument_list|(
name|list
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testGetLast_emptyList ()
specifier|public
name|void
name|testGetLast_emptyList
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|list
init|=
name|Collections
operator|.
name|emptyList
argument_list|()
decl_stmt|;
try|try
block|{
name|Iterables
operator|.
name|getLast
argument_list|(
name|list
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchElementException
name|e
parameter_list|)
block|{}
block|}
DECL|method|testGetLast_sortedSet ()
specifier|public
name|void
name|testGetLast_sortedSet
parameter_list|()
block|{
name|SortedSet
argument_list|<
name|String
argument_list|>
name|sortedSet
init|=
name|ImmutableSortedSet
operator|.
name|of
argument_list|(
literal|"b"
argument_list|,
literal|"c"
argument_list|,
literal|"a"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"c"
argument_list|,
name|Iterables
operator|.
name|getLast
argument_list|(
name|sortedSet
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testGetLast_withDefault_singleton ()
specifier|public
name|void
name|testGetLast_withDefault_singleton
parameter_list|()
block|{
name|Iterable
argument_list|<
name|String
argument_list|>
name|iterable
init|=
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"foo"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"foo"
argument_list|,
name|Iterables
operator|.
name|getLast
argument_list|(
name|iterable
argument_list|,
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testGetLast_withDefault_empty ()
specifier|public
name|void
name|testGetLast_withDefault_empty
parameter_list|()
block|{
name|Iterable
argument_list|<
name|String
argument_list|>
name|iterable
init|=
name|Collections
operator|.
name|emptyList
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"bar"
argument_list|,
name|Iterables
operator|.
name|getLast
argument_list|(
name|iterable
argument_list|,
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testGetLast_withDefault_empty_null ()
specifier|public
name|void
name|testGetLast_withDefault_empty_null
parameter_list|()
block|{
name|Iterable
argument_list|<
name|String
argument_list|>
name|iterable
init|=
name|Collections
operator|.
name|emptyList
argument_list|()
decl_stmt|;
name|assertNull
argument_list|(
name|Iterables
operator|.
name|getLast
argument_list|(
name|iterable
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testGetLast_withDefault_multiple ()
specifier|public
name|void
name|testGetLast_withDefault_multiple
parameter_list|()
block|{
name|Iterable
argument_list|<
name|String
argument_list|>
name|iterable
init|=
name|asList
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"bar"
argument_list|,
name|Iterables
operator|.
name|getLast
argument_list|(
name|iterable
argument_list|,
literal|"qux"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * {@link ArrayList} extension that forbids the use of    * {@link Collection#iterator} for tests that need to prove that it isn't    * called.    */
DECL|class|DiesOnIteratorArrayList
specifier|private
specifier|static
class|class
name|DiesOnIteratorArrayList
extends|extends
name|ArrayList
argument_list|<
name|String
argument_list|>
block|{
comment|/**      * @throws UnsupportedOperationException all the time      */
annotation|@
name|Override
DECL|method|iterator ()
specifier|public
name|Iterator
argument_list|<
name|String
argument_list|>
name|iterator
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
DECL|method|testGetLast_withDefault_not_empty_list ()
specifier|public
name|void
name|testGetLast_withDefault_not_empty_list
parameter_list|()
block|{
comment|// TODO: verify that this is the best testing strategy.
name|List
argument_list|<
name|String
argument_list|>
name|diesOnIteratorList
init|=
operator|new
name|DiesOnIteratorArrayList
argument_list|()
decl_stmt|;
name|diesOnIteratorList
operator|.
name|add
argument_list|(
literal|"bar"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"bar"
argument_list|,
name|Iterables
operator|.
name|getLast
argument_list|(
name|diesOnIteratorList
argument_list|,
literal|"qux"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * {@link TreeSet} extension that forbids the use of    * {@link Collection#iterator} for tests that need to prove that it isn't    * called.    */
DECL|class|DiesOnIteratorTreeSet
specifier|private
specifier|static
specifier|final
class|class
name|DiesOnIteratorTreeSet
extends|extends
name|TreeSet
argument_list|<
name|String
argument_list|>
block|{
comment|/**      * @throws UnsupportedOperationException all the time      */
annotation|@
name|Override
DECL|method|iterator ()
specifier|public
name|Iterator
argument_list|<
name|String
argument_list|>
name|iterator
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
DECL|method|testGetLast_emptySortedSet ()
specifier|public
name|void
name|testGetLast_emptySortedSet
parameter_list|()
block|{
name|SortedSet
argument_list|<
name|String
argument_list|>
name|sortedSet
init|=
name|ImmutableSortedSet
operator|.
name|of
argument_list|()
decl_stmt|;
try|try
block|{
name|Iterables
operator|.
name|getLast
argument_list|(
name|sortedSet
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchElementException
name|e
parameter_list|)
block|{}
block|}
DECL|method|testGetLast_iterable ()
specifier|public
name|void
name|testGetLast_iterable
parameter_list|()
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|set
init|=
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"c"
argument_list|,
name|Iterables
operator|.
name|getLast
argument_list|(
name|set
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testGetLast_emptyIterable ()
specifier|public
name|void
name|testGetLast_emptyIterable
parameter_list|()
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|set
init|=
name|Sets
operator|.
name|newHashSet
argument_list|()
decl_stmt|;
try|try
block|{
name|Iterables
operator|.
name|getLast
argument_list|(
name|set
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchElementException
name|e
parameter_list|)
block|{}
block|}
DECL|method|testUnmodifiableIterable ()
specifier|public
name|void
name|testUnmodifiableIterable
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|list
init|=
name|newArrayList
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|)
decl_stmt|;
name|Iterable
argument_list|<
name|String
argument_list|>
name|iterable
init|=
name|Iterables
operator|.
name|unmodifiableIterable
argument_list|(
name|list
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|String
argument_list|>
name|iterator
init|=
name|iterable
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|iterator
operator|.
name|next
argument_list|()
expr_stmt|;
try|try
block|{
name|iterator
operator|.
name|remove
argument_list|()
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|expected
parameter_list|)
block|{}
name|assertEquals
argument_list|(
literal|"[a, b, c]"
argument_list|,
name|iterable
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
comment|// test of deprecated method
DECL|method|testUnmodifiableIterableShortCircuit ()
specifier|public
name|void
name|testUnmodifiableIterableShortCircuit
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|list
init|=
name|newArrayList
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|)
decl_stmt|;
name|Iterable
argument_list|<
name|String
argument_list|>
name|iterable
init|=
name|Iterables
operator|.
name|unmodifiableIterable
argument_list|(
name|list
argument_list|)
decl_stmt|;
name|Iterable
argument_list|<
name|String
argument_list|>
name|iterable2
init|=
name|Iterables
operator|.
name|unmodifiableIterable
argument_list|(
name|iterable
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
name|iterable
argument_list|,
name|iterable2
argument_list|)
expr_stmt|;
name|ImmutableList
argument_list|<
name|String
argument_list|>
name|immutableList
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
name|immutableList
argument_list|,
name|Iterables
operator|.
name|unmodifiableIterable
argument_list|(
name|immutableList
argument_list|)
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|immutableList
argument_list|,
name|Iterables
operator|.
name|unmodifiableIterable
argument_list|(
operator|(
name|List
argument_list|<
name|String
argument_list|>
operator|)
name|immutableList
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testFrequency_multiset ()
specifier|public
name|void
name|testFrequency_multiset
parameter_list|()
block|{
name|Multiset
argument_list|<
name|String
argument_list|>
name|multiset
init|=
name|ImmutableMultiset
operator|.
name|of
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"a"
argument_list|,
literal|"c"
argument_list|,
literal|"b"
argument_list|,
literal|"a"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|Iterables
operator|.
name|frequency
argument_list|(
name|multiset
argument_list|,
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|Iterables
operator|.
name|frequency
argument_list|(
name|multiset
argument_list|,
literal|"b"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|Iterables
operator|.
name|frequency
argument_list|(
name|multiset
argument_list|,
literal|"c"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|Iterables
operator|.
name|frequency
argument_list|(
name|multiset
argument_list|,
literal|"d"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|Iterables
operator|.
name|frequency
argument_list|(
name|multiset
argument_list|,
literal|4.2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|Iterables
operator|.
name|frequency
argument_list|(
name|multiset
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testFrequency_set ()
specifier|public
name|void
name|testFrequency_set
parameter_list|()
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|set
init|=
name|Sets
operator|.
name|newHashSet
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|Iterables
operator|.
name|frequency
argument_list|(
name|set
argument_list|,
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|Iterables
operator|.
name|frequency
argument_list|(
name|set
argument_list|,
literal|"b"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|Iterables
operator|.
name|frequency
argument_list|(
name|set
argument_list|,
literal|"c"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|Iterables
operator|.
name|frequency
argument_list|(
name|set
argument_list|,
literal|"d"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|Iterables
operator|.
name|frequency
argument_list|(
name|set
argument_list|,
literal|4.2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|Iterables
operator|.
name|frequency
argument_list|(
name|set
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testFrequency_list ()
specifier|public
name|void
name|testFrequency_list
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|list
init|=
name|newArrayList
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"a"
argument_list|,
literal|"c"
argument_list|,
literal|"b"
argument_list|,
literal|"a"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|Iterables
operator|.
name|frequency
argument_list|(
name|list
argument_list|,
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|Iterables
operator|.
name|frequency
argument_list|(
name|list
argument_list|,
literal|"b"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|Iterables
operator|.
name|frequency
argument_list|(
name|list
argument_list|,
literal|"c"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|Iterables
operator|.
name|frequency
argument_list|(
name|list
argument_list|,
literal|"d"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|Iterables
operator|.
name|frequency
argument_list|(
name|list
argument_list|,
literal|4.2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|Iterables
operator|.
name|frequency
argument_list|(
name|list
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testRemoveAll_collection ()
specifier|public
name|void
name|testRemoveAll_collection
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|list
init|=
name|newArrayList
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|,
literal|"d"
argument_list|,
literal|"e"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|Iterables
operator|.
name|removeAll
argument_list|(
name|list
argument_list|,
name|newArrayList
argument_list|(
literal|"b"
argument_list|,
literal|"d"
argument_list|,
literal|"f"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|newArrayList
argument_list|(
literal|"a"
argument_list|,
literal|"c"
argument_list|,
literal|"e"
argument_list|)
argument_list|,
name|list
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|Iterables
operator|.
name|removeAll
argument_list|(
name|list
argument_list|,
name|newArrayList
argument_list|(
literal|"x"
argument_list|,
literal|"y"
argument_list|,
literal|"z"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|newArrayList
argument_list|(
literal|"a"
argument_list|,
literal|"c"
argument_list|,
literal|"e"
argument_list|)
argument_list|,
name|list
argument_list|)
expr_stmt|;
block|}
DECL|method|testRemoveAll_iterable ()
specifier|public
name|void
name|testRemoveAll_iterable
parameter_list|()
block|{
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|list
init|=
name|newArrayList
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|,
literal|"d"
argument_list|,
literal|"e"
argument_list|)
decl_stmt|;
name|Iterable
argument_list|<
name|String
argument_list|>
name|iterable
init|=
operator|new
name|Iterable
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|String
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
name|list
operator|.
name|iterator
argument_list|()
return|;
block|}
block|}
decl_stmt|;
name|assertTrue
argument_list|(
name|Iterables
operator|.
name|removeAll
argument_list|(
name|iterable
argument_list|,
name|newArrayList
argument_list|(
literal|"b"
argument_list|,
literal|"d"
argument_list|,
literal|"f"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|newArrayList
argument_list|(
literal|"a"
argument_list|,
literal|"c"
argument_list|,
literal|"e"
argument_list|)
argument_list|,
name|list
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|Iterables
operator|.
name|removeAll
argument_list|(
name|iterable
argument_list|,
name|newArrayList
argument_list|(
literal|"x"
argument_list|,
literal|"y"
argument_list|,
literal|"z"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|newArrayList
argument_list|(
literal|"a"
argument_list|,
literal|"c"
argument_list|,
literal|"e"
argument_list|)
argument_list|,
name|list
argument_list|)
expr_stmt|;
block|}
DECL|method|testRetainAll_collection ()
specifier|public
name|void
name|testRetainAll_collection
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|list
init|=
name|newArrayList
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|,
literal|"d"
argument_list|,
literal|"e"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|Iterables
operator|.
name|retainAll
argument_list|(
name|list
argument_list|,
name|newArrayList
argument_list|(
literal|"b"
argument_list|,
literal|"d"
argument_list|,
literal|"f"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|newArrayList
argument_list|(
literal|"b"
argument_list|,
literal|"d"
argument_list|)
argument_list|,
name|list
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|Iterables
operator|.
name|retainAll
argument_list|(
name|list
argument_list|,
name|newArrayList
argument_list|(
literal|"b"
argument_list|,
literal|"e"
argument_list|,
literal|"d"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|newArrayList
argument_list|(
literal|"b"
argument_list|,
literal|"d"
argument_list|)
argument_list|,
name|list
argument_list|)
expr_stmt|;
block|}
DECL|method|testRetainAll_iterable ()
specifier|public
name|void
name|testRetainAll_iterable
parameter_list|()
block|{
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|list
init|=
name|newArrayList
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|,
literal|"d"
argument_list|,
literal|"e"
argument_list|)
decl_stmt|;
name|Iterable
argument_list|<
name|String
argument_list|>
name|iterable
init|=
operator|new
name|Iterable
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|String
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
name|list
operator|.
name|iterator
argument_list|()
return|;
block|}
block|}
decl_stmt|;
name|assertTrue
argument_list|(
name|Iterables
operator|.
name|retainAll
argument_list|(
name|iterable
argument_list|,
name|newArrayList
argument_list|(
literal|"b"
argument_list|,
literal|"d"
argument_list|,
literal|"f"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|newArrayList
argument_list|(
literal|"b"
argument_list|,
literal|"d"
argument_list|)
argument_list|,
name|list
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|Iterables
operator|.
name|retainAll
argument_list|(
name|iterable
argument_list|,
name|newArrayList
argument_list|(
literal|"b"
argument_list|,
literal|"e"
argument_list|,
literal|"d"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|newArrayList
argument_list|(
literal|"b"
argument_list|,
literal|"d"
argument_list|)
argument_list|,
name|list
argument_list|)
expr_stmt|;
block|}
DECL|method|testRemoveIf_randomAccess ()
specifier|public
name|void
name|testRemoveIf_randomAccess
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|list
init|=
name|newArrayList
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|,
literal|"d"
argument_list|,
literal|"e"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|Iterables
operator|.
name|removeIf
argument_list|(
name|list
argument_list|,
operator|new
name|Predicate
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|apply
parameter_list|(
name|String
name|s
parameter_list|)
block|{
return|return
name|s
operator|.
name|equals
argument_list|(
literal|"b"
argument_list|)
operator|||
name|s
operator|.
name|equals
argument_list|(
literal|"d"
argument_list|)
operator|||
name|s
operator|.
name|equals
argument_list|(
literal|"f"
argument_list|)
return|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|newArrayList
argument_list|(
literal|"a"
argument_list|,
literal|"c"
argument_list|,
literal|"e"
argument_list|)
argument_list|,
name|list
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|Iterables
operator|.
name|removeIf
argument_list|(
name|list
argument_list|,
operator|new
name|Predicate
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|apply
parameter_list|(
name|String
name|s
parameter_list|)
block|{
return|return
name|s
operator|.
name|equals
argument_list|(
literal|"x"
argument_list|)
operator|||
name|s
operator|.
name|equals
argument_list|(
literal|"y"
argument_list|)
operator|||
name|s
operator|.
name|equals
argument_list|(
literal|"z"
argument_list|)
return|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|newArrayList
argument_list|(
literal|"a"
argument_list|,
literal|"c"
argument_list|,
literal|"e"
argument_list|)
argument_list|,
name|list
argument_list|)
expr_stmt|;
block|}
DECL|method|testRemoveIf_transformedList ()
specifier|public
name|void
name|testRemoveIf_transformedList
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|list
init|=
name|newArrayList
argument_list|(
literal|"1"
argument_list|,
literal|"2"
argument_list|,
literal|"3"
argument_list|,
literal|"4"
argument_list|,
literal|"5"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|transformed
init|=
name|Lists
operator|.
name|transform
argument_list|(
name|list
argument_list|,
operator|new
name|Function
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Integer
name|apply
parameter_list|(
name|String
name|s
parameter_list|)
block|{
return|return
name|Integer
operator|.
name|valueOf
argument_list|(
name|s
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|Iterables
operator|.
name|removeIf
argument_list|(
name|transformed
argument_list|,
operator|new
name|Predicate
argument_list|<
name|Integer
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|apply
parameter_list|(
name|Integer
name|n
parameter_list|)
block|{
return|return
operator|(
name|n
operator|&
literal|1
operator|)
operator|==
literal|0
return|;
comment|// isEven()
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|newArrayList
argument_list|(
literal|"1"
argument_list|,
literal|"3"
argument_list|,
literal|"5"
argument_list|)
argument_list|,
name|list
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|Iterables
operator|.
name|removeIf
argument_list|(
name|transformed
argument_list|,
operator|new
name|Predicate
argument_list|<
name|Integer
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|apply
parameter_list|(
name|Integer
name|n
parameter_list|)
block|{
return|return
operator|(
name|n
operator|&
literal|1
operator|)
operator|==
literal|0
return|;
comment|// isEven()
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|newArrayList
argument_list|(
literal|"1"
argument_list|,
literal|"3"
argument_list|,
literal|"5"
argument_list|)
argument_list|,
name|list
argument_list|)
expr_stmt|;
block|}
DECL|method|testRemoveIf_noRandomAccess ()
specifier|public
name|void
name|testRemoveIf_noRandomAccess
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|list
init|=
name|Lists
operator|.
name|newLinkedList
argument_list|(
name|asList
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|,
literal|"d"
argument_list|,
literal|"e"
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|Iterables
operator|.
name|removeIf
argument_list|(
name|list
argument_list|,
operator|new
name|Predicate
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|apply
parameter_list|(
name|String
name|s
parameter_list|)
block|{
return|return
name|s
operator|.
name|equals
argument_list|(
literal|"b"
argument_list|)
operator|||
name|s
operator|.
name|equals
argument_list|(
literal|"d"
argument_list|)
operator|||
name|s
operator|.
name|equals
argument_list|(
literal|"f"
argument_list|)
return|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|newArrayList
argument_list|(
literal|"a"
argument_list|,
literal|"c"
argument_list|,
literal|"e"
argument_list|)
argument_list|,
name|list
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|Iterables
operator|.
name|removeIf
argument_list|(
name|list
argument_list|,
operator|new
name|Predicate
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|apply
parameter_list|(
name|String
name|s
parameter_list|)
block|{
return|return
name|s
operator|.
name|equals
argument_list|(
literal|"x"
argument_list|)
operator|||
name|s
operator|.
name|equals
argument_list|(
literal|"y"
argument_list|)
operator|||
name|s
operator|.
name|equals
argument_list|(
literal|"z"
argument_list|)
return|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|newArrayList
argument_list|(
literal|"a"
argument_list|,
literal|"c"
argument_list|,
literal|"e"
argument_list|)
argument_list|,
name|list
argument_list|)
expr_stmt|;
block|}
comment|// The Maps returned by Maps.filterEntries(), Maps.filterKeys(), and
comment|// Maps.filterValues() are not tested with removeIf() since Maps are not
comment|// Iterable.  Those returned by Iterators.filter() and Iterables.filter()
comment|// are not tested because they are unmodifiable.
DECL|method|testIterableWithToString ()
specifier|public
name|void
name|testIterableWithToString
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"[]"
argument_list|,
name|create
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[a]"
argument_list|,
name|create
argument_list|(
literal|"a"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[a, b, c]"
argument_list|,
name|create
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[c, a, a]"
argument_list|,
name|create
argument_list|(
literal|"c"
argument_list|,
literal|"a"
argument_list|,
literal|"a"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testIterableWithToStringNull ()
specifier|public
name|void
name|testIterableWithToStringNull
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"[null]"
argument_list|,
name|create
argument_list|(
operator|(
name|String
operator|)
literal|null
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[null, null]"
argument_list|,
name|create
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[, null, a]"
argument_list|,
name|create
argument_list|(
literal|""
argument_list|,
literal|null
argument_list|,
literal|"a"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/** Returns a new iterable over the specified strings. */
DECL|method|create (String... strings)
specifier|private
specifier|static
name|Iterable
argument_list|<
name|String
argument_list|>
name|create
parameter_list|(
name|String
modifier|...
name|strings
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|list
init|=
name|asList
argument_list|(
name|strings
argument_list|)
decl_stmt|;
return|return
operator|new
name|FluentIterable
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|String
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
name|list
operator|.
name|iterator
argument_list|()
return|;
block|}
block|}
return|;
block|}
DECL|method|testConsumingIterable ()
specifier|public
name|void
name|testConsumingIterable
parameter_list|()
block|{
comment|// Test data
name|List
argument_list|<
name|String
argument_list|>
name|list
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|asList
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
argument_list|)
decl_stmt|;
comment|// Test& Verify
name|Iterable
argument_list|<
name|String
argument_list|>
name|consumingIterable
init|=
name|Iterables
operator|.
name|consumingIterable
argument_list|(
name|list
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|String
argument_list|>
name|consumingIterator
init|=
name|consumingIterable
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|ASSERT
operator|.
name|that
argument_list|(
name|list
argument_list|)
operator|.
name|has
argument_list|()
operator|.
name|exactly
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|consumingIterator
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|ASSERT
operator|.
name|that
argument_list|(
name|list
argument_list|)
operator|.
name|has
argument_list|()
operator|.
name|exactly
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a"
argument_list|,
name|consumingIterator
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|ASSERT
operator|.
name|that
argument_list|(
name|list
argument_list|)
operator|.
name|has
argument_list|()
operator|.
name|item
argument_list|(
literal|"b"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|consumingIterator
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"b"
argument_list|,
name|consumingIterator
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|ASSERT
operator|.
name|that
argument_list|(
name|list
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|consumingIterator
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
argument_list|(
literal|"?"
argument_list|)
comment|// TODO: Figure out why this is failing in GWT.
DECL|method|testConsumingIterable_duelingIterators ()
specifier|public
name|void
name|testConsumingIterable_duelingIterators
parameter_list|()
block|{
comment|// Test data
name|List
argument_list|<
name|String
argument_list|>
name|list
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|asList
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
argument_list|)
decl_stmt|;
comment|// Test& Verify
name|Iterator
argument_list|<
name|String
argument_list|>
name|i1
init|=
name|Iterables
operator|.
name|consumingIterable
argument_list|(
name|list
argument_list|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|String
argument_list|>
name|i2
init|=
name|Iterables
operator|.
name|consumingIterable
argument_list|(
name|list
argument_list|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|i1
operator|.
name|next
argument_list|()
expr_stmt|;
try|try
block|{
name|i2
operator|.
name|next
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Concurrent modification should throw an exception."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ConcurrentModificationException
name|cme
parameter_list|)
block|{
comment|// Pass
block|}
block|}
DECL|method|testConsumingIterable_queue_iterator ()
specifier|public
name|void
name|testConsumingIterable_queue_iterator
parameter_list|()
block|{
specifier|final
name|List
argument_list|<
name|Integer
argument_list|>
name|items
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
literal|4
argument_list|,
literal|8
argument_list|,
literal|15
argument_list|,
literal|16
argument_list|,
literal|23
argument_list|,
literal|42
argument_list|)
decl_stmt|;
operator|new
name|IteratorTester
argument_list|<
name|Integer
argument_list|>
argument_list|(
literal|3
argument_list|,
name|UNMODIFIABLE
argument_list|,
name|items
argument_list|,
name|IteratorTester
operator|.
name|KnownOrder
operator|.
name|KNOWN_ORDER
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|Iterator
argument_list|<
name|Integer
argument_list|>
name|newTargetIterator
parameter_list|()
block|{
return|return
name|Iterables
operator|.
name|consumingIterable
argument_list|(
name|Lists
operator|.
name|newLinkedList
argument_list|(
name|items
argument_list|)
argument_list|)
operator|.
name|iterator
argument_list|()
return|;
block|}
block|}
operator|.
name|test
argument_list|()
expr_stmt|;
block|}
DECL|method|testConsumingIterable_queue_removesFromQueue ()
specifier|public
name|void
name|testConsumingIterable_queue_removesFromQueue
parameter_list|()
block|{
name|Queue
argument_list|<
name|Integer
argument_list|>
name|queue
init|=
name|Lists
operator|.
name|newLinkedList
argument_list|(
name|asList
argument_list|(
literal|5
argument_list|,
literal|14
argument_list|)
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|Integer
argument_list|>
name|consumingIterator
init|=
name|Iterables
operator|.
name|consumingIterable
argument_list|(
name|queue
argument_list|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|queue
operator|.
name|peek
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|consumingIterator
operator|.
name|next
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|14
argument_list|,
name|queue
operator|.
name|peek
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|consumingIterator
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|queue
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testConsumingIterable_noIteratorCall ()
specifier|public
name|void
name|testConsumingIterable_noIteratorCall
parameter_list|()
block|{
name|Queue
argument_list|<
name|Integer
argument_list|>
name|queue
init|=
operator|new
name|UnIterableQueue
argument_list|<
name|Integer
argument_list|>
argument_list|(
name|Lists
operator|.
name|newLinkedList
argument_list|(
name|asList
argument_list|(
literal|5
argument_list|,
literal|14
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|Integer
argument_list|>
name|consumingIterator
init|=
name|Iterables
operator|.
name|consumingIterable
argument_list|(
name|queue
argument_list|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
comment|/*      * Make sure that we can get an element off without calling      * UnIterableQueue.iterator().      */
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|consumingIterator
operator|.
name|next
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|class|UnIterableQueue
specifier|private
specifier|static
class|class
name|UnIterableQueue
parameter_list|<
name|T
parameter_list|>
extends|extends
name|ForwardingQueue
argument_list|<
name|T
argument_list|>
block|{
DECL|field|queue
specifier|private
name|Queue
argument_list|<
name|T
argument_list|>
name|queue
decl_stmt|;
DECL|method|UnIterableQueue (Queue<T> queue)
name|UnIterableQueue
parameter_list|(
name|Queue
argument_list|<
name|T
argument_list|>
name|queue
parameter_list|)
block|{
name|this
operator|.
name|queue
operator|=
name|queue
expr_stmt|;
block|}
DECL|method|iterator ()
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|T
argument_list|>
name|iterator
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
DECL|method|delegate ()
annotation|@
name|Override
specifier|protected
name|Queue
argument_list|<
name|T
argument_list|>
name|delegate
parameter_list|()
block|{
return|return
name|queue
return|;
block|}
block|}
DECL|method|testIndexOf_empty ()
specifier|public
name|void
name|testIndexOf_empty
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|Iterables
operator|.
name|indexOf
argument_list|(
name|list
argument_list|,
name|Predicates
operator|.
name|equalTo
argument_list|(
literal|""
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testIndexOf_oneElement ()
specifier|public
name|void
name|testIndexOf_oneElement
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|list
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"bob"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|Iterables
operator|.
name|indexOf
argument_list|(
name|list
argument_list|,
name|Predicates
operator|.
name|equalTo
argument_list|(
literal|"bob"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|Iterables
operator|.
name|indexOf
argument_list|(
name|list
argument_list|,
name|Predicates
operator|.
name|equalTo
argument_list|(
literal|"jack"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testIndexOf_twoElements ()
specifier|public
name|void
name|testIndexOf_twoElements
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|list
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"mary"
argument_list|,
literal|"bob"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|Iterables
operator|.
name|indexOf
argument_list|(
name|list
argument_list|,
name|Predicates
operator|.
name|equalTo
argument_list|(
literal|"mary"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|Iterables
operator|.
name|indexOf
argument_list|(
name|list
argument_list|,
name|Predicates
operator|.
name|equalTo
argument_list|(
literal|"bob"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|Iterables
operator|.
name|indexOf
argument_list|(
name|list
argument_list|,
name|Predicates
operator|.
name|equalTo
argument_list|(
literal|"jack"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testIndexOf_withDuplicates ()
specifier|public
name|void
name|testIndexOf_withDuplicates
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|list
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"mary"
argument_list|,
literal|"bob"
argument_list|,
literal|"bob"
argument_list|,
literal|"bob"
argument_list|,
literal|"sam"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|Iterables
operator|.
name|indexOf
argument_list|(
name|list
argument_list|,
name|Predicates
operator|.
name|equalTo
argument_list|(
literal|"mary"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|Iterables
operator|.
name|indexOf
argument_list|(
name|list
argument_list|,
name|Predicates
operator|.
name|equalTo
argument_list|(
literal|"bob"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|Iterables
operator|.
name|indexOf
argument_list|(
name|list
argument_list|,
name|Predicates
operator|.
name|equalTo
argument_list|(
literal|"sam"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|Iterables
operator|.
name|indexOf
argument_list|(
name|list
argument_list|,
name|Predicates
operator|.
name|equalTo
argument_list|(
literal|"jack"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|field|STARTSWITH_A
specifier|private
specifier|static
specifier|final
name|Predicate
argument_list|<
name|CharSequence
argument_list|>
name|STARTSWITH_A
init|=
operator|new
name|Predicate
argument_list|<
name|CharSequence
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|apply
parameter_list|(
name|CharSequence
name|input
parameter_list|)
block|{
return|return
operator|(
name|input
operator|.
name|length
argument_list|()
operator|>
literal|0
operator|)
operator|&&
operator|(
name|input
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|==
literal|'a'
operator|)
return|;
block|}
block|}
decl_stmt|;
DECL|method|testIndexOf_genericPredicate ()
specifier|public
name|void
name|testIndexOf_genericPredicate
parameter_list|()
block|{
name|List
argument_list|<
name|CharSequence
argument_list|>
name|sequences
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|sequences
operator|.
name|add
argument_list|(
literal|"bob"
argument_list|)
expr_stmt|;
name|sequences
operator|.
name|add
argument_list|(
operator|new
name|StringBuilder
argument_list|(
literal|"charlie"
argument_list|)
argument_list|)
expr_stmt|;
name|sequences
operator|.
name|add
argument_list|(
operator|new
name|StringBuffer
argument_list|(
literal|"henry"
argument_list|)
argument_list|)
expr_stmt|;
name|sequences
operator|.
name|add
argument_list|(
operator|new
name|StringBuilder
argument_list|(
literal|"apple"
argument_list|)
argument_list|)
expr_stmt|;
name|sequences
operator|.
name|add
argument_list|(
literal|"lemon"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|Iterables
operator|.
name|indexOf
argument_list|(
name|sequences
argument_list|,
name|STARTSWITH_A
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testIndexOf_genericPredicate2 ()
specifier|public
name|void
name|testIndexOf_genericPredicate2
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|sequences
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"bob"
argument_list|,
literal|"charlie"
argument_list|,
literal|"henry"
argument_list|,
literal|"apple"
argument_list|,
literal|"lemon"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|Iterables
operator|.
name|indexOf
argument_list|(
name|sequences
argument_list|,
name|STARTSWITH_A
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testMergeSorted_empty ()
specifier|public
name|void
name|testMergeSorted_empty
parameter_list|()
block|{
comment|// Setup
name|Iterable
argument_list|<
name|Iterable
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|elements
init|=
name|ImmutableList
operator|.
name|of
argument_list|()
decl_stmt|;
comment|// Test
name|Iterable
argument_list|<
name|Integer
argument_list|>
name|iterable
init|=
name|Iterables
operator|.
name|mergeSorted
argument_list|(
name|elements
argument_list|,
name|Ordering
operator|.
name|natural
argument_list|()
argument_list|)
decl_stmt|;
comment|// Verify
name|Iterator
argument_list|<
name|Integer
argument_list|>
name|iterator
init|=
name|iterable
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|iterator
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|iterator
operator|.
name|next
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"next() on empty iterator should throw NoSuchElementException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchElementException
name|e
parameter_list|)
block|{
comment|// Huzzah!
block|}
block|}
DECL|method|testMergeSorted_single_empty ()
specifier|public
name|void
name|testMergeSorted_single_empty
parameter_list|()
block|{
comment|// Setup
name|Iterable
argument_list|<
name|Integer
argument_list|>
name|iterable0
init|=
name|ImmutableList
operator|.
name|of
argument_list|()
decl_stmt|;
name|Iterable
argument_list|<
name|Iterable
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|iterables
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
name|iterable0
argument_list|)
decl_stmt|;
comment|// Test& Verify
name|verifyMergeSorted
argument_list|(
name|iterables
argument_list|,
name|ImmutableList
operator|.
expr|<
name|Integer
operator|>
name|of
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testMergeSorted_single ()
specifier|public
name|void
name|testMergeSorted_single
parameter_list|()
block|{
comment|// Setup
name|Iterable
argument_list|<
name|Integer
argument_list|>
name|iterable0
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|Iterable
argument_list|<
name|Iterable
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|iterables
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
name|iterable0
argument_list|)
decl_stmt|;
comment|// Test& Verify
name|verifyMergeSorted
argument_list|(
name|iterables
argument_list|,
name|iterable0
argument_list|)
expr_stmt|;
block|}
DECL|method|testMergeSorted_pyramid ()
specifier|public
name|void
name|testMergeSorted_pyramid
parameter_list|()
block|{
name|List
argument_list|<
name|Iterable
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|iterables
init|=
name|Lists
operator|.
name|newLinkedList
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|allIntegers
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
comment|// Creates iterators like: {{}, {0}, {0, 1}, {0, 1, 2}, ...}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|List
argument_list|<
name|Integer
argument_list|>
name|list
init|=
name|Lists
operator|.
name|newLinkedList
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|i
condition|;
name|j
operator|++
control|)
block|{
name|list
operator|.
name|add
argument_list|(
name|j
argument_list|)
expr_stmt|;
name|allIntegers
operator|.
name|add
argument_list|(
name|j
argument_list|)
expr_stmt|;
block|}
name|iterables
operator|.
name|add
argument_list|(
name|Ordering
operator|.
name|natural
argument_list|()
operator|.
name|sortedCopy
argument_list|(
name|list
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|verifyMergeSorted
argument_list|(
name|iterables
argument_list|,
name|allIntegers
argument_list|)
expr_stmt|;
block|}
comment|// Like the pyramid, but creates more unique values, along with repeated ones.
DECL|method|testMergeSorted_skipping_pyramid ()
specifier|public
name|void
name|testMergeSorted_skipping_pyramid
parameter_list|()
block|{
name|List
argument_list|<
name|Iterable
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|iterables
init|=
name|Lists
operator|.
name|newLinkedList
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|allIntegers
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|20
condition|;
name|i
operator|++
control|)
block|{
name|List
argument_list|<
name|Integer
argument_list|>
name|list
init|=
name|Lists
operator|.
name|newLinkedList
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|i
condition|;
name|j
operator|++
control|)
block|{
name|list
operator|.
name|add
argument_list|(
name|j
operator|*
name|i
argument_list|)
expr_stmt|;
name|allIntegers
operator|.
name|add
argument_list|(
name|j
operator|*
name|i
argument_list|)
expr_stmt|;
block|}
name|iterables
operator|.
name|add
argument_list|(
name|Ordering
operator|.
name|natural
argument_list|()
operator|.
name|sortedCopy
argument_list|(
name|list
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|verifyMergeSorted
argument_list|(
name|iterables
argument_list|,
name|allIntegers
argument_list|)
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
argument_list|(
literal|"reflection"
argument_list|)
DECL|method|testIterables_nullCheck ()
specifier|public
name|void
name|testIterables_nullCheck
parameter_list|()
throws|throws
name|Exception
block|{
operator|new
name|ClassSanityTester
argument_list|()
operator|.
name|forAllPublicStaticMethods
argument_list|(
name|Iterables
operator|.
name|class
argument_list|)
operator|.
name|thatReturn
argument_list|(
name|Iterable
operator|.
name|class
argument_list|)
operator|.
name|testNulls
argument_list|()
expr_stmt|;
block|}
DECL|method|verifyMergeSorted (Iterable<Iterable<Integer>> iterables, Iterable<Integer> unsortedExpected)
specifier|private
specifier|static
name|void
name|verifyMergeSorted
parameter_list|(
name|Iterable
argument_list|<
name|Iterable
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|iterables
parameter_list|,
name|Iterable
argument_list|<
name|Integer
argument_list|>
name|unsortedExpected
parameter_list|)
block|{
name|Iterable
argument_list|<
name|Integer
argument_list|>
name|expected
init|=
name|Ordering
operator|.
name|natural
argument_list|()
operator|.
name|sortedCopy
argument_list|(
name|unsortedExpected
argument_list|)
decl_stmt|;
name|Iterable
argument_list|<
name|Integer
argument_list|>
name|mergedIterator
init|=
name|Iterables
operator|.
name|mergeSorted
argument_list|(
name|iterables
argument_list|,
name|Ordering
operator|.
name|natural
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Lists
operator|.
name|newLinkedList
argument_list|(
name|expected
argument_list|)
argument_list|,
name|Lists
operator|.
name|newLinkedList
argument_list|(
name|mergedIterator
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

