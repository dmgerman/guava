begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2007 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.collect
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertThat
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtCompatible
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtIncompatible
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Equivalence
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
operator|.
name|Builder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|ListTestSuiteBuilder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|SetTestSuiteBuilder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|TestStringSetGenerator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|features
operator|.
name|CollectionFeature
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|features
operator|.
name|CollectionSize
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|google
operator|.
name|SetGenerators
operator|.
name|DegeneratedImmutableSetGenerator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|google
operator|.
name|SetGenerators
operator|.
name|ImmutableSetAsListGenerator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|google
operator|.
name|SetGenerators
operator|.
name|ImmutableSetCopyOfGenerator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|google
operator|.
name|SetGenerators
operator|.
name|ImmutableSetSizedBuilderGenerator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|google
operator|.
name|SetGenerators
operator|.
name|ImmutableSetTooBigBuilderGenerator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|google
operator|.
name|SetGenerators
operator|.
name|ImmutableSetTooSmallBuilderGenerator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|google
operator|.
name|SetGenerators
operator|.
name|ImmutableSetUnsizedBuilderGenerator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|google
operator|.
name|SetGenerators
operator|.
name|ImmutableSetWithBadHashesGenerator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|testing
operator|.
name|CollectorTester
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|testing
operator|.
name|EqualsTester
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|errorprone
operator|.
name|annotations
operator|.
name|CanIgnoreReturnValue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|BiPredicate
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collector
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestSuite
import|;
end_import

begin_import
import|import
name|org
operator|.
name|checkerframework
operator|.
name|checker
operator|.
name|nullness
operator|.
name|qual
operator|.
name|Nullable
import|;
end_import

begin_comment
comment|/**  * Unit test for {@link ImmutableSet}.  *  * @author Kevin Bourrillion  * @author Jared Levy  * @author Nick Kralevich  */
end_comment

begin_class
annotation|@
name|GwtCompatible
argument_list|(
name|emulated
operator|=
literal|true
argument_list|)
DECL|class|ImmutableSetTest
specifier|public
class|class
name|ImmutableSetTest
extends|extends
name|AbstractImmutableSetTest
block|{
annotation|@
name|GwtIncompatible
comment|// suite
DECL|method|suite ()
specifier|public
specifier|static
name|Test
name|suite
parameter_list|()
block|{
name|TestSuite
name|suite
init|=
operator|new
name|TestSuite
argument_list|()
decl_stmt|;
name|suite
operator|.
name|addTest
argument_list|(
name|SetTestSuiteBuilder
operator|.
name|using
argument_list|(
operator|new
name|ImmutableSetCopyOfGenerator
argument_list|()
argument_list|)
operator|.
name|named
argument_list|(
name|ImmutableSetTest
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|withFeatures
argument_list|(
name|CollectionSize
operator|.
name|ANY
argument_list|,
name|CollectionFeature
operator|.
name|KNOWN_ORDER
argument_list|,
name|CollectionFeature
operator|.
name|SERIALIZABLE
argument_list|,
name|CollectionFeature
operator|.
name|ALLOWS_NULL_QUERIES
argument_list|)
operator|.
name|createTestSuite
argument_list|()
argument_list|)
expr_stmt|;
name|suite
operator|.
name|addTest
argument_list|(
name|SetTestSuiteBuilder
operator|.
name|using
argument_list|(
operator|new
name|ImmutableSetUnsizedBuilderGenerator
argument_list|()
argument_list|)
operator|.
name|named
argument_list|(
name|ImmutableSetTest
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|", with unsized builder"
argument_list|)
operator|.
name|withFeatures
argument_list|(
name|CollectionSize
operator|.
name|ANY
argument_list|,
name|CollectionFeature
operator|.
name|KNOWN_ORDER
argument_list|,
name|CollectionFeature
operator|.
name|SERIALIZABLE
argument_list|,
name|CollectionFeature
operator|.
name|ALLOWS_NULL_QUERIES
argument_list|)
operator|.
name|createTestSuite
argument_list|()
argument_list|)
expr_stmt|;
name|suite
operator|.
name|addTest
argument_list|(
name|SetTestSuiteBuilder
operator|.
name|using
argument_list|(
operator|new
name|TestStringSetGenerator
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|Set
argument_list|<
name|String
argument_list|>
name|create
parameter_list|(
name|String
index|[]
name|elements
parameter_list|)
block|{
name|ImmutableSet
operator|.
name|Builder
argument_list|<
name|String
argument_list|>
name|builder
init|=
name|ImmutableSet
operator|.
name|builder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|forceJdk
argument_list|()
expr_stmt|;
name|builder
operator|.
name|add
argument_list|(
name|elements
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
block|}
argument_list|)
operator|.
name|named
argument_list|(
name|ImmutableSetTest
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|", with JDK builder"
argument_list|)
operator|.
name|withFeatures
argument_list|(
name|CollectionSize
operator|.
name|ANY
argument_list|,
name|CollectionFeature
operator|.
name|KNOWN_ORDER
argument_list|,
name|CollectionFeature
operator|.
name|SERIALIZABLE
argument_list|,
name|CollectionFeature
operator|.
name|ALLOWS_NULL_QUERIES
argument_list|)
operator|.
name|createTestSuite
argument_list|()
argument_list|)
expr_stmt|;
name|suite
operator|.
name|addTest
argument_list|(
name|SetTestSuiteBuilder
operator|.
name|using
argument_list|(
operator|new
name|ImmutableSetSizedBuilderGenerator
argument_list|()
argument_list|)
operator|.
name|named
argument_list|(
name|ImmutableSetTest
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|", with exactly sized builder"
argument_list|)
operator|.
name|withFeatures
argument_list|(
name|CollectionSize
operator|.
name|ANY
argument_list|,
name|CollectionFeature
operator|.
name|KNOWN_ORDER
argument_list|,
name|CollectionFeature
operator|.
name|SERIALIZABLE
argument_list|,
name|CollectionFeature
operator|.
name|ALLOWS_NULL_QUERIES
argument_list|)
operator|.
name|createTestSuite
argument_list|()
argument_list|)
expr_stmt|;
name|suite
operator|.
name|addTest
argument_list|(
name|SetTestSuiteBuilder
operator|.
name|using
argument_list|(
operator|new
name|ImmutableSetTooBigBuilderGenerator
argument_list|()
argument_list|)
operator|.
name|named
argument_list|(
name|ImmutableSetTest
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|", with oversized builder"
argument_list|)
operator|.
name|withFeatures
argument_list|(
name|CollectionSize
operator|.
name|ANY
argument_list|,
name|CollectionFeature
operator|.
name|KNOWN_ORDER
argument_list|,
name|CollectionFeature
operator|.
name|SERIALIZABLE
argument_list|,
name|CollectionFeature
operator|.
name|ALLOWS_NULL_QUERIES
argument_list|)
operator|.
name|createTestSuite
argument_list|()
argument_list|)
expr_stmt|;
name|suite
operator|.
name|addTest
argument_list|(
name|SetTestSuiteBuilder
operator|.
name|using
argument_list|(
operator|new
name|ImmutableSetTooSmallBuilderGenerator
argument_list|()
argument_list|)
operator|.
name|named
argument_list|(
name|ImmutableSetTest
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|", with undersized builder"
argument_list|)
operator|.
name|withFeatures
argument_list|(
name|CollectionSize
operator|.
name|ANY
argument_list|,
name|CollectionFeature
operator|.
name|KNOWN_ORDER
argument_list|,
name|CollectionFeature
operator|.
name|SERIALIZABLE
argument_list|,
name|CollectionFeature
operator|.
name|ALLOWS_NULL_QUERIES
argument_list|)
operator|.
name|createTestSuite
argument_list|()
argument_list|)
expr_stmt|;
name|suite
operator|.
name|addTest
argument_list|(
name|SetTestSuiteBuilder
operator|.
name|using
argument_list|(
operator|new
name|ImmutableSetWithBadHashesGenerator
argument_list|()
argument_list|)
operator|.
name|named
argument_list|(
name|ImmutableSetTest
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|", with bad hashes"
argument_list|)
operator|.
name|withFeatures
argument_list|(
name|CollectionSize
operator|.
name|ANY
argument_list|,
name|CollectionFeature
operator|.
name|KNOWN_ORDER
argument_list|,
name|CollectionFeature
operator|.
name|ALLOWS_NULL_QUERIES
argument_list|)
operator|.
name|createTestSuite
argument_list|()
argument_list|)
expr_stmt|;
name|suite
operator|.
name|addTest
argument_list|(
name|SetTestSuiteBuilder
operator|.
name|using
argument_list|(
operator|new
name|DegeneratedImmutableSetGenerator
argument_list|()
argument_list|)
operator|.
name|named
argument_list|(
name|ImmutableSetTest
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|", degenerate"
argument_list|)
operator|.
name|withFeatures
argument_list|(
name|CollectionSize
operator|.
name|ONE
argument_list|,
name|CollectionFeature
operator|.
name|KNOWN_ORDER
argument_list|,
name|CollectionFeature
operator|.
name|ALLOWS_NULL_QUERIES
argument_list|)
operator|.
name|createTestSuite
argument_list|()
argument_list|)
expr_stmt|;
name|suite
operator|.
name|addTest
argument_list|(
name|ListTestSuiteBuilder
operator|.
name|using
argument_list|(
operator|new
name|ImmutableSetAsListGenerator
argument_list|()
argument_list|)
operator|.
name|named
argument_list|(
literal|"ImmutableSet.asList"
argument_list|)
operator|.
name|withFeatures
argument_list|(
name|CollectionSize
operator|.
name|ANY
argument_list|,
name|CollectionFeature
operator|.
name|REJECTS_DUPLICATES_AT_CREATION
argument_list|,
name|CollectionFeature
operator|.
name|SERIALIZABLE
argument_list|,
name|CollectionFeature
operator|.
name|ALLOWS_NULL_QUERIES
argument_list|)
operator|.
name|createTestSuite
argument_list|()
argument_list|)
expr_stmt|;
name|suite
operator|.
name|addTestSuite
argument_list|(
name|ImmutableSetTest
operator|.
name|class
argument_list|)
expr_stmt|;
return|return
name|suite
return|;
block|}
annotation|@
name|Override
DECL|method|of ()
specifier|protected
parameter_list|<
name|E
extends|extends
name|Comparable
argument_list|<
name|?
super|super
name|E
argument_list|>
parameter_list|>
name|Set
argument_list|<
name|E
argument_list|>
name|of
parameter_list|()
block|{
return|return
name|ImmutableSet
operator|.
name|of
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|of (E e)
specifier|protected
parameter_list|<
name|E
extends|extends
name|Comparable
argument_list|<
name|?
super|super
name|E
argument_list|>
parameter_list|>
name|Set
argument_list|<
name|E
argument_list|>
name|of
parameter_list|(
name|E
name|e
parameter_list|)
block|{
return|return
name|ImmutableSet
operator|.
name|of
argument_list|(
name|e
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|of (E e1, E e2)
specifier|protected
parameter_list|<
name|E
extends|extends
name|Comparable
argument_list|<
name|?
super|super
name|E
argument_list|>
parameter_list|>
name|Set
argument_list|<
name|E
argument_list|>
name|of
parameter_list|(
name|E
name|e1
parameter_list|,
name|E
name|e2
parameter_list|)
block|{
return|return
name|ImmutableSet
operator|.
name|of
argument_list|(
name|e1
argument_list|,
name|e2
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|of (E e1, E e2, E e3)
specifier|protected
parameter_list|<
name|E
extends|extends
name|Comparable
argument_list|<
name|?
super|super
name|E
argument_list|>
parameter_list|>
name|Set
argument_list|<
name|E
argument_list|>
name|of
parameter_list|(
name|E
name|e1
parameter_list|,
name|E
name|e2
parameter_list|,
name|E
name|e3
parameter_list|)
block|{
return|return
name|ImmutableSet
operator|.
name|of
argument_list|(
name|e1
argument_list|,
name|e2
argument_list|,
name|e3
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|of (E e1, E e2, E e3, E e4)
specifier|protected
parameter_list|<
name|E
extends|extends
name|Comparable
argument_list|<
name|?
super|super
name|E
argument_list|>
parameter_list|>
name|Set
argument_list|<
name|E
argument_list|>
name|of
parameter_list|(
name|E
name|e1
parameter_list|,
name|E
name|e2
parameter_list|,
name|E
name|e3
parameter_list|,
name|E
name|e4
parameter_list|)
block|{
return|return
name|ImmutableSet
operator|.
name|of
argument_list|(
name|e1
argument_list|,
name|e2
argument_list|,
name|e3
argument_list|,
name|e4
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|of (E e1, E e2, E e3, E e4, E e5)
specifier|protected
parameter_list|<
name|E
extends|extends
name|Comparable
argument_list|<
name|?
super|super
name|E
argument_list|>
parameter_list|>
name|Set
argument_list|<
name|E
argument_list|>
name|of
parameter_list|(
name|E
name|e1
parameter_list|,
name|E
name|e2
parameter_list|,
name|E
name|e3
parameter_list|,
name|E
name|e4
parameter_list|,
name|E
name|e5
parameter_list|)
block|{
return|return
name|ImmutableSet
operator|.
name|of
argument_list|(
name|e1
argument_list|,
name|e2
argument_list|,
name|e3
argument_list|,
name|e4
argument_list|,
name|e5
argument_list|)
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
DECL|method|of ( E e1, E e2, E e3, E e4, E e5, E e6, E... rest)
specifier|protected
parameter_list|<
name|E
extends|extends
name|Comparable
argument_list|<
name|?
super|super
name|E
argument_list|>
parameter_list|>
name|Set
argument_list|<
name|E
argument_list|>
name|of
parameter_list|(
name|E
name|e1
parameter_list|,
name|E
name|e2
parameter_list|,
name|E
name|e3
parameter_list|,
name|E
name|e4
parameter_list|,
name|E
name|e5
parameter_list|,
name|E
name|e6
parameter_list|,
name|E
modifier|...
name|rest
parameter_list|)
block|{
return|return
name|ImmutableSet
operator|.
name|of
argument_list|(
name|e1
argument_list|,
name|e2
argument_list|,
name|e3
argument_list|,
name|e4
argument_list|,
name|e5
argument_list|,
name|e6
argument_list|,
name|rest
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|copyOf (E[] elements)
specifier|protected
parameter_list|<
name|E
extends|extends
name|Comparable
argument_list|<
name|?
super|super
name|E
argument_list|>
parameter_list|>
name|Set
argument_list|<
name|E
argument_list|>
name|copyOf
parameter_list|(
name|E
index|[]
name|elements
parameter_list|)
block|{
return|return
name|ImmutableSet
operator|.
name|copyOf
argument_list|(
name|elements
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|copyOf (Collection<? extends E> elements)
specifier|protected
parameter_list|<
name|E
extends|extends
name|Comparable
argument_list|<
name|?
super|super
name|E
argument_list|>
parameter_list|>
name|Set
argument_list|<
name|E
argument_list|>
name|copyOf
parameter_list|(
name|Collection
argument_list|<
name|?
extends|extends
name|E
argument_list|>
name|elements
parameter_list|)
block|{
return|return
name|ImmutableSet
operator|.
name|copyOf
argument_list|(
name|elements
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|copyOf (Iterable<? extends E> elements)
specifier|protected
parameter_list|<
name|E
extends|extends
name|Comparable
argument_list|<
name|?
super|super
name|E
argument_list|>
parameter_list|>
name|Set
argument_list|<
name|E
argument_list|>
name|copyOf
parameter_list|(
name|Iterable
argument_list|<
name|?
extends|extends
name|E
argument_list|>
name|elements
parameter_list|)
block|{
return|return
name|ImmutableSet
operator|.
name|copyOf
argument_list|(
name|elements
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|copyOf (Iterator<? extends E> elements)
specifier|protected
parameter_list|<
name|E
extends|extends
name|Comparable
argument_list|<
name|?
super|super
name|E
argument_list|>
parameter_list|>
name|Set
argument_list|<
name|E
argument_list|>
name|copyOf
parameter_list|(
name|Iterator
argument_list|<
name|?
extends|extends
name|E
argument_list|>
name|elements
parameter_list|)
block|{
return|return
name|ImmutableSet
operator|.
name|copyOf
argument_list|(
name|elements
argument_list|)
return|;
block|}
DECL|method|testCreation_allDuplicates ()
specifier|public
name|void
name|testCreation_allDuplicates
parameter_list|()
block|{
name|ImmutableSet
argument_list|<
name|String
argument_list|>
name|set
init|=
name|ImmutableSet
operator|.
name|copyOf
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"a"
argument_list|,
literal|"a"
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|set
operator|instanceof
name|SingletonImmutableSet
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"a"
argument_list|)
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
name|set
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testCreation_oneDuplicate ()
specifier|public
name|void
name|testCreation_oneDuplicate
parameter_list|()
block|{
comment|// now we'll get the varargs overload
name|ImmutableSet
argument_list|<
name|String
argument_list|>
name|set
init|=
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|,
literal|"d"
argument_list|,
literal|"e"
argument_list|,
literal|"f"
argument_list|,
literal|"g"
argument_list|,
literal|"h"
argument_list|,
literal|"i"
argument_list|,
literal|"j"
argument_list|,
literal|"k"
argument_list|,
literal|"l"
argument_list|,
literal|"m"
argument_list|,
literal|"a"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|,
literal|"d"
argument_list|,
literal|"e"
argument_list|,
literal|"f"
argument_list|,
literal|"g"
argument_list|,
literal|"h"
argument_list|,
literal|"i"
argument_list|,
literal|"j"
argument_list|,
literal|"k"
argument_list|,
literal|"l"
argument_list|,
literal|"m"
argument_list|)
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
name|set
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testCreation_manyDuplicates ()
specifier|public
name|void
name|testCreation_manyDuplicates
parameter_list|()
block|{
comment|// now we'll get the varargs overload
name|ImmutableSet
argument_list|<
name|String
argument_list|>
name|set
init|=
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|,
literal|"c"
argument_list|,
literal|"c"
argument_list|,
literal|"c"
argument_list|,
literal|"b"
argument_list|,
literal|"b"
argument_list|,
literal|"a"
argument_list|,
literal|"a"
argument_list|,
literal|"c"
argument_list|,
literal|"c"
argument_list|,
literal|"c"
argument_list|,
literal|"a"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|set
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
block|}
DECL|method|testCreation_arrayOfArray ()
specifier|public
name|void
name|testCreation_arrayOfArray
parameter_list|()
block|{
name|String
index|[]
name|array
init|=
operator|new
name|String
index|[]
block|{
literal|"a"
block|}
decl_stmt|;
name|Set
argument_list|<
name|String
index|[]
argument_list|>
name|set
init|=
name|ImmutableSet
operator|.
expr|<
name|String
index|[]
operator|>
name|of
argument_list|(
name|array
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|array
argument_list|)
argument_list|,
name|set
argument_list|)
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
comment|// ImmutableSet.chooseTableSize
DECL|method|testChooseTableSize ()
specifier|public
name|void
name|testChooseTableSize
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|8
argument_list|,
name|ImmutableSet
operator|.
name|chooseTableSize
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|8
argument_list|,
name|ImmutableSet
operator|.
name|chooseTableSize
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
operator|<<
literal|29
argument_list|,
name|ImmutableSet
operator|.
name|chooseTableSize
argument_list|(
literal|1
operator|<<
literal|28
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
operator|<<
literal|29
argument_list|,
name|ImmutableSet
operator|.
name|chooseTableSize
argument_list|(
operator|(
literal|1
operator|<<
literal|29
operator|)
operator|*
literal|3
operator|/
literal|5
argument_list|)
argument_list|)
expr_stmt|;
comment|// Now we hit the cap
name|assertEquals
argument_list|(
literal|1
operator|<<
literal|30
argument_list|,
name|ImmutableSet
operator|.
name|chooseTableSize
argument_list|(
literal|1
operator|<<
literal|29
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
operator|<<
literal|30
argument_list|,
name|ImmutableSet
operator|.
name|chooseTableSize
argument_list|(
operator|(
literal|1
operator|<<
literal|30
operator|)
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
comment|// Now we've gone too far
try|try
block|{
name|ImmutableSet
operator|.
name|chooseTableSize
argument_list|(
literal|1
operator|<<
literal|30
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{     }
block|}
annotation|@
name|GwtIncompatible
comment|// RegularImmutableSet.table not in emulation
DECL|method|testResizeTable ()
specifier|public
name|void
name|testResizeTable
parameter_list|()
block|{
name|verifyTableSize
argument_list|(
literal|100
argument_list|,
literal|2
argument_list|,
literal|8
argument_list|)
expr_stmt|;
name|verifyTableSize
argument_list|(
literal|100
argument_list|,
literal|5
argument_list|,
literal|8
argument_list|)
expr_stmt|;
name|verifyTableSize
argument_list|(
literal|100
argument_list|,
literal|33
argument_list|,
literal|64
argument_list|)
expr_stmt|;
name|verifyTableSize
argument_list|(
literal|17
argument_list|,
literal|17
argument_list|,
literal|32
argument_list|)
expr_stmt|;
name|verifyTableSize
argument_list|(
literal|17
argument_list|,
literal|16
argument_list|,
literal|32
argument_list|)
expr_stmt|;
name|verifyTableSize
argument_list|(
literal|17
argument_list|,
literal|15
argument_list|,
literal|32
argument_list|)
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
comment|// RegularImmutableSet.table not in emulation
DECL|method|verifyTableSize (int inputSize, int setSize, int tableSize)
specifier|private
name|void
name|verifyTableSize
parameter_list|(
name|int
name|inputSize
parameter_list|,
name|int
name|setSize
parameter_list|,
name|int
name|tableSize
parameter_list|)
block|{
name|Builder
argument_list|<
name|Integer
argument_list|>
name|builder
init|=
name|ImmutableSet
operator|.
name|builder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|inputSize
condition|;
name|i
operator|++
control|)
block|{
name|builder
operator|.
name|add
argument_list|(
name|i
operator|%
name|setSize
argument_list|)
expr_stmt|;
block|}
name|ImmutableSet
argument_list|<
name|Integer
argument_list|>
name|set
init|=
name|builder
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|set
operator|instanceof
name|RegularImmutableSet
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Input size "
operator|+
name|inputSize
operator|+
literal|" and set size "
operator|+
name|setSize
argument_list|,
name|tableSize
argument_list|,
operator|(
operator|(
name|RegularImmutableSet
argument_list|<
name|Integer
argument_list|>
operator|)
name|set
operator|)
operator|.
name|table
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
DECL|method|testCopyOf_copiesImmutableSortedSet ()
specifier|public
name|void
name|testCopyOf_copiesImmutableSortedSet
parameter_list|()
block|{
name|ImmutableSortedSet
argument_list|<
name|String
argument_list|>
name|sortedSet
init|=
name|ImmutableSortedSet
operator|.
name|of
argument_list|(
literal|"a"
argument_list|)
decl_stmt|;
name|ImmutableSet
argument_list|<
name|String
argument_list|>
name|copy
init|=
name|ImmutableSet
operator|.
name|copyOf
argument_list|(
name|sortedSet
argument_list|)
decl_stmt|;
name|assertNotSame
argument_list|(
name|sortedSet
argument_list|,
name|copy
argument_list|)
expr_stmt|;
block|}
DECL|method|testToImmutableSet ()
specifier|public
name|void
name|testToImmutableSet
parameter_list|()
block|{
name|Collector
argument_list|<
name|String
argument_list|,
name|?
argument_list|,
name|ImmutableSet
argument_list|<
name|String
argument_list|>
argument_list|>
name|collector
init|=
name|ImmutableSet
operator|.
name|toImmutableSet
argument_list|()
decl_stmt|;
name|Equivalence
argument_list|<
name|ImmutableSet
argument_list|<
name|String
argument_list|>
argument_list|>
name|equivalence
init|=
name|Equivalence
operator|.
name|equals
argument_list|()
operator|.
name|onResultOf
argument_list|(
name|ImmutableSet
operator|::
name|asList
argument_list|)
decl_stmt|;
name|CollectorTester
operator|.
name|of
argument_list|(
name|collector
argument_list|,
name|equivalence
argument_list|)
operator|.
name|expectCollects
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|,
literal|"d"
argument_list|)
argument_list|,
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"a"
argument_list|,
literal|"c"
argument_list|,
literal|"b"
argument_list|,
literal|"b"
argument_list|,
literal|"d"
argument_list|)
expr_stmt|;
block|}
DECL|method|testToImmutableSet_duplicates ()
specifier|public
name|void
name|testToImmutableSet_duplicates
parameter_list|()
block|{
class|class
name|TypeWithDuplicates
block|{
specifier|final
name|int
name|a
decl_stmt|;
specifier|final
name|int
name|b
decl_stmt|;
name|TypeWithDuplicates
parameter_list|(
name|int
name|a
parameter_list|,
name|int
name|b
parameter_list|)
block|{
name|this
operator|.
name|a
operator|=
name|a
expr_stmt|;
name|this
operator|.
name|b
operator|=
name|b
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|a
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
return|return
name|obj
operator|instanceof
name|TypeWithDuplicates
operator|&&
operator|(
operator|(
name|TypeWithDuplicates
operator|)
name|obj
operator|)
operator|.
name|a
operator|==
name|a
return|;
block|}
specifier|public
name|boolean
name|fullEquals
parameter_list|(
name|TypeWithDuplicates
name|other
parameter_list|)
block|{
return|return
name|other
operator|!=
literal|null
operator|&&
name|a
operator|==
name|other
operator|.
name|a
operator|&&
name|b
operator|==
name|other
operator|.
name|b
return|;
block|}
block|}
name|Collector
argument_list|<
name|TypeWithDuplicates
argument_list|,
name|?
argument_list|,
name|ImmutableSet
argument_list|<
name|TypeWithDuplicates
argument_list|>
argument_list|>
name|collector
init|=
name|ImmutableSet
operator|.
name|toImmutableSet
argument_list|()
decl_stmt|;
name|BiPredicate
argument_list|<
name|ImmutableSet
argument_list|<
name|TypeWithDuplicates
argument_list|>
argument_list|,
name|ImmutableSet
argument_list|<
name|TypeWithDuplicates
argument_list|>
argument_list|>
name|equivalence
init|=
parameter_list|(
name|set1
parameter_list|,
name|set2
parameter_list|)
lambda|->
block|{
if|if
condition|(
operator|!
name|set1
operator|.
name|equals
argument_list|(
name|set2
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|set1
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|set1
operator|.
name|asList
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|fullEquals
argument_list|(
name|set2
operator|.
name|asList
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
decl_stmt|;
name|TypeWithDuplicates
name|a
init|=
operator|new
name|TypeWithDuplicates
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|TypeWithDuplicates
name|b1
init|=
operator|new
name|TypeWithDuplicates
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|TypeWithDuplicates
name|b2
init|=
operator|new
name|TypeWithDuplicates
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|TypeWithDuplicates
name|c
init|=
operator|new
name|TypeWithDuplicates
argument_list|(
literal|3
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|CollectorTester
operator|.
name|of
argument_list|(
name|collector
argument_list|,
name|equivalence
argument_list|)
operator|.
name|expectCollects
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
name|a
argument_list|,
name|b1
argument_list|,
name|c
argument_list|)
argument_list|,
name|a
argument_list|,
name|b1
argument_list|,
name|c
argument_list|,
name|b2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
comment|// GWT is single threaded
DECL|method|testCopyOf_threadSafe ()
specifier|public
name|void
name|testCopyOf_threadSafe
parameter_list|()
block|{
name|verifyThreadSafe
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|builder ()
argument_list|<
name|E
extends|extends
name|Comparable
argument_list|<
name|E
argument_list|>
argument_list|>
name|Builder
argument_list|<
name|E
argument_list|>
name|builder
parameter_list|()
block|{
return|return
name|ImmutableSet
operator|.
name|builder
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getComplexBuilderSetLastElement ()
name|int
name|getComplexBuilderSetLastElement
parameter_list|()
block|{
return|return
name|LAST_COLOR_ADDED
return|;
block|}
DECL|method|testEquals ()
specifier|public
name|void
name|testEquals
parameter_list|()
block|{
operator|new
name|EqualsTester
argument_list|()
operator|.
name|addEqualityGroup
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|()
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|()
argument_list|)
operator|.
name|addEqualityGroup
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|1
argument_list|)
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|1
argument_list|)
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|)
operator|.
name|addEqualityGroup
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|)
operator|.
name|testEquals
argument_list|()
expr_stmt|;
block|}
comment|/**    * A Comparable wrapper around a String which executes callbacks on calls to hashCode, equals, and    * compareTo.    */
DECL|class|CountsHashCodeAndEquals
specifier|private
specifier|static
class|class
name|CountsHashCodeAndEquals
implements|implements
name|Comparable
argument_list|<
name|CountsHashCodeAndEquals
argument_list|>
block|{
DECL|field|delegateString
specifier|private
specifier|final
name|String
name|delegateString
decl_stmt|;
DECL|field|onHashCode
specifier|private
specifier|final
name|Runnable
name|onHashCode
decl_stmt|;
DECL|field|onEquals
specifier|private
specifier|final
name|Runnable
name|onEquals
decl_stmt|;
DECL|field|onCompareTo
specifier|private
specifier|final
name|Runnable
name|onCompareTo
decl_stmt|;
DECL|method|CountsHashCodeAndEquals ( String delegateString, Runnable onHashCode, Runnable onEquals, Runnable onCompareTo)
name|CountsHashCodeAndEquals
parameter_list|(
name|String
name|delegateString
parameter_list|,
name|Runnable
name|onHashCode
parameter_list|,
name|Runnable
name|onEquals
parameter_list|,
name|Runnable
name|onCompareTo
parameter_list|)
block|{
name|this
operator|.
name|delegateString
operator|=
name|delegateString
expr_stmt|;
name|this
operator|.
name|onHashCode
operator|=
name|onHashCode
expr_stmt|;
name|this
operator|.
name|onEquals
operator|=
name|onEquals
expr_stmt|;
name|this
operator|.
name|onCompareTo
operator|=
name|onCompareTo
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|onHashCode
operator|.
name|run
argument_list|()
expr_stmt|;
return|return
name|delegateString
operator|.
name|hashCode
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|equals (@ullable Object other)
specifier|public
name|boolean
name|equals
parameter_list|(
annotation|@
name|Nullable
name|Object
name|other
parameter_list|)
block|{
name|onEquals
operator|.
name|run
argument_list|()
expr_stmt|;
return|return
name|other
operator|instanceof
name|CountsHashCodeAndEquals
operator|&&
name|delegateString
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|CountsHashCodeAndEquals
operator|)
name|other
operator|)
operator|.
name|delegateString
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|compareTo (CountsHashCodeAndEquals o)
specifier|public
name|int
name|compareTo
parameter_list|(
name|CountsHashCodeAndEquals
name|o
parameter_list|)
block|{
name|onCompareTo
operator|.
name|run
argument_list|()
expr_stmt|;
return|return
name|delegateString
operator|.
name|compareTo
argument_list|(
name|o
operator|.
name|delegateString
argument_list|)
return|;
block|}
block|}
comment|/** A holder of counters for calls to hashCode, equals, and compareTo. */
DECL|class|CallsCounter
specifier|private
specifier|static
specifier|final
class|class
name|CallsCounter
block|{
DECL|field|hashCode
name|long
name|hashCode
decl_stmt|;
DECL|field|equals
name|long
name|equals
decl_stmt|;
DECL|field|compareTo
name|long
name|compareTo
decl_stmt|;
DECL|method|total ()
name|long
name|total
parameter_list|()
block|{
return|return
name|hashCode
operator|+
name|equals
operator|+
name|compareTo
return|;
block|}
DECL|method|zero ()
name|void
name|zero
parameter_list|()
block|{
name|hashCode
operator|=
literal|0
expr_stmt|;
name|equals
operator|=
literal|0
expr_stmt|;
name|compareTo
operator|=
literal|0
expr_stmt|;
block|}
block|}
comment|/** All the ways to construct an ImmutableSet. */
DECL|enum|ConstructionPathway
enum|enum
name|ConstructionPathway
block|{
DECL|enumConstant|OF
name|OF
block|{
annotation|@
name|Override
name|ImmutableSet
argument_list|<
name|?
argument_list|>
name|create
parameter_list|(
name|List
argument_list|<
name|?
argument_list|>
name|list
parameter_list|)
block|{
name|Object
name|o1
init|=
name|list
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Object
name|o2
init|=
name|list
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|Object
name|o3
init|=
name|list
operator|.
name|get
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|Object
name|o4
init|=
name|list
operator|.
name|get
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|Object
name|o5
init|=
name|list
operator|.
name|get
argument_list|(
literal|4
argument_list|)
decl_stmt|;
name|Object
name|o6
init|=
name|list
operator|.
name|get
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|Object
index|[]
name|rest
init|=
name|list
operator|.
name|subList
argument_list|(
literal|6
argument_list|,
name|list
operator|.
name|size
argument_list|()
argument_list|)
operator|.
name|toArray
argument_list|()
decl_stmt|;
return|return
name|ImmutableSet
operator|.
name|of
argument_list|(
name|o1
argument_list|,
name|o2
argument_list|,
name|o3
argument_list|,
name|o4
argument_list|,
name|o5
argument_list|,
name|o6
argument_list|,
name|rest
argument_list|)
return|;
block|}
block|}
block|,
DECL|enumConstant|COPY_OF_ARRAY
name|COPY_OF_ARRAY
block|{
annotation|@
name|Override
name|ImmutableSet
argument_list|<
name|?
argument_list|>
name|create
parameter_list|(
name|List
argument_list|<
name|?
argument_list|>
name|list
parameter_list|)
block|{
return|return
name|ImmutableSet
operator|.
name|copyOf
argument_list|(
name|list
operator|.
name|toArray
argument_list|()
argument_list|)
return|;
block|}
block|}
block|,
DECL|enumConstant|COPY_OF_LIST
name|COPY_OF_LIST
block|{
annotation|@
name|Override
name|ImmutableSet
argument_list|<
name|?
argument_list|>
name|create
parameter_list|(
name|List
argument_list|<
name|?
argument_list|>
name|list
parameter_list|)
block|{
return|return
name|ImmutableSet
operator|.
name|copyOf
argument_list|(
name|list
argument_list|)
return|;
block|}
block|}
block|,
DECL|enumConstant|BUILDER_ADD_ONE_BY_ONE
name|BUILDER_ADD_ONE_BY_ONE
block|{
annotation|@
name|Override
name|ImmutableSet
argument_list|<
name|?
argument_list|>
name|create
parameter_list|(
name|List
argument_list|<
name|?
argument_list|>
name|list
parameter_list|)
block|{
name|ImmutableSet
operator|.
name|Builder
argument_list|<
name|Object
argument_list|>
name|builder
init|=
name|ImmutableSet
operator|.
name|builder
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
name|o
range|:
name|list
control|)
block|{
name|builder
operator|.
name|add
argument_list|(
name|o
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
block|}
block|,
DECL|enumConstant|BUILDER_ADD_ARRAY
name|BUILDER_ADD_ARRAY
block|{
annotation|@
name|Override
name|ImmutableSet
argument_list|<
name|?
argument_list|>
name|create
parameter_list|(
name|List
argument_list|<
name|?
argument_list|>
name|list
parameter_list|)
block|{
name|ImmutableSet
operator|.
name|Builder
argument_list|<
name|Object
argument_list|>
name|builder
init|=
name|ImmutableSet
operator|.
name|builder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|add
argument_list|(
name|list
operator|.
name|toArray
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
block|}
block|,
DECL|enumConstant|BUILDER_ADD_LIST
name|BUILDER_ADD_LIST
block|{
annotation|@
name|Override
name|ImmutableSet
argument_list|<
name|?
argument_list|>
name|create
parameter_list|(
name|List
argument_list|<
name|?
argument_list|>
name|list
parameter_list|)
block|{
name|ImmutableSet
operator|.
name|Builder
argument_list|<
name|Object
argument_list|>
name|builder
init|=
name|ImmutableSet
operator|.
name|builder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|addAll
argument_list|(
name|list
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
block|}
block|;
annotation|@
name|CanIgnoreReturnValue
DECL|method|create (List<?> list)
specifier|abstract
name|ImmutableSet
argument_list|<
name|?
argument_list|>
name|create
parameter_list|(
name|List
argument_list|<
name|?
argument_list|>
name|list
parameter_list|)
function_decl|;
block|}
comment|/**    * Returns a list of objects with the same hash code, of size 2^power, counting calls to equals,    * hashCode, and compareTo in counter.    */
DECL|method|createAdversarialInput (int power, CallsCounter counter)
specifier|static
name|List
argument_list|<
name|CountsHashCodeAndEquals
argument_list|>
name|createAdversarialInput
parameter_list|(
name|int
name|power
parameter_list|,
name|CallsCounter
name|counter
parameter_list|)
block|{
name|String
name|str1
init|=
literal|"Aa"
decl_stmt|;
name|String
name|str2
init|=
literal|"BB"
decl_stmt|;
name|assertEquals
argument_list|(
name|str1
operator|.
name|hashCode
argument_list|()
argument_list|,
name|str2
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|haveSameHashes2
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|str1
argument_list|,
name|str2
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|CountsHashCodeAndEquals
argument_list|>
name|result
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|Lists
operator|.
name|transform
argument_list|(
name|Lists
operator|.
name|cartesianProduct
argument_list|(
name|Collections
operator|.
name|nCopies
argument_list|(
name|power
argument_list|,
name|haveSameHashes2
argument_list|)
argument_list|)
argument_list|,
name|strs
lambda|->
operator|new
name|CountsHashCodeAndEquals
argument_list|(
name|String
operator|.
name|join
argument_list|(
literal|""
argument_list|,
name|strs
argument_list|)
argument_list|,
parameter_list|()
lambda|->
name|counter
operator|.
name|hashCode
operator|++
argument_list|,
parameter_list|()
lambda|->
name|counter
operator|.
name|equals
operator|++
argument_list|,
parameter_list|()
lambda|->
name|counter
operator|.
name|compareTo
operator|++
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|result
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|delegateString
operator|.
name|hashCode
argument_list|()
argument_list|,
name|result
operator|.
name|get
argument_list|(
name|result
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
operator|.
name|delegateString
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|GwtIncompatible
DECL|method|testResistsHashFloodingInConstruction ()
specifier|public
name|void
name|testResistsHashFloodingInConstruction
parameter_list|()
block|{
name|CallsCounter
name|smallCounter
init|=
operator|new
name|CallsCounter
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|CountsHashCodeAndEquals
argument_list|>
name|haveSameHashesSmall
init|=
name|createAdversarialInput
argument_list|(
literal|10
argument_list|,
name|smallCounter
argument_list|)
decl_stmt|;
name|int
name|smallSize
init|=
name|haveSameHashesSmall
operator|.
name|size
argument_list|()
decl_stmt|;
name|CallsCounter
name|largeCounter
init|=
operator|new
name|CallsCounter
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|CountsHashCodeAndEquals
argument_list|>
name|haveSameHashesLarge
init|=
name|createAdversarialInput
argument_list|(
literal|15
argument_list|,
name|largeCounter
argument_list|)
decl_stmt|;
name|int
name|largeSize
init|=
name|haveSameHashesLarge
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|ConstructionPathway
name|pathway
range|:
name|ConstructionPathway
operator|.
name|values
argument_list|()
control|)
block|{
name|smallCounter
operator|.
name|zero
argument_list|()
expr_stmt|;
name|pathway
operator|.
name|create
argument_list|(
name|haveSameHashesSmall
argument_list|)
expr_stmt|;
name|largeCounter
operator|.
name|zero
argument_list|()
expr_stmt|;
name|pathway
operator|.
name|create
argument_list|(
name|haveSameHashesLarge
argument_list|)
expr_stmt|;
name|double
name|ratio
init|=
operator|(
name|double
operator|)
name|largeCounter
operator|.
name|total
argument_list|()
operator|/
name|smallCounter
operator|.
name|total
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|ratio
argument_list|)
operator|.
name|named
argument_list|(
literal|"ratio of equals/hashCode/compareTo operations to build an ImmutableSet via pathway "
operator|+
literal|"%s of size %s versus size %s"
argument_list|,
name|pathway
argument_list|,
name|haveSameHashesLarge
operator|.
name|size
argument_list|()
argument_list|,
name|haveSameHashesSmall
operator|.
name|size
argument_list|()
argument_list|)
operator|.
name|isAtMost
argument_list|(
literal|2.0
operator|*
operator|(
name|largeSize
operator|*
name|Math
operator|.
name|log
argument_list|(
name|largeSize
argument_list|)
operator|)
operator|/
operator|(
name|smallSize
operator|*
name|Math
operator|.
name|log
argument_list|(
name|smallSize
argument_list|)
operator|)
argument_list|)
expr_stmt|;
comment|// We allow up to 2x wobble in the constant factors.
block|}
block|}
annotation|@
name|GwtIncompatible
DECL|method|testResistsHashFloodingOnContains ()
specifier|public
name|void
name|testResistsHashFloodingOnContains
parameter_list|()
block|{
name|CallsCounter
name|smallCounter
init|=
operator|new
name|CallsCounter
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|CountsHashCodeAndEquals
argument_list|>
name|haveSameHashesSmall
init|=
name|createAdversarialInput
argument_list|(
literal|10
argument_list|,
name|smallCounter
argument_list|)
decl_stmt|;
name|ImmutableSet
argument_list|<
name|?
argument_list|>
name|smallSet
init|=
name|ConstructionPathway
operator|.
name|COPY_OF_LIST
operator|.
name|create
argument_list|(
name|haveSameHashesSmall
argument_list|)
decl_stmt|;
name|long
name|worstCaseOpsSmall
init|=
name|worstCaseQueryOperations
argument_list|(
name|smallSet
argument_list|,
name|smallCounter
argument_list|)
decl_stmt|;
name|CallsCounter
name|largeCounter
init|=
operator|new
name|CallsCounter
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|CountsHashCodeAndEquals
argument_list|>
name|haveSameHashesLarge
init|=
name|createAdversarialInput
argument_list|(
literal|15
argument_list|,
name|largeCounter
argument_list|)
decl_stmt|;
name|ImmutableSet
argument_list|<
name|?
argument_list|>
name|largeSet
init|=
name|ConstructionPathway
operator|.
name|COPY_OF_LIST
operator|.
name|create
argument_list|(
name|haveSameHashesLarge
argument_list|)
decl_stmt|;
name|long
name|worstCaseOpsLarge
init|=
name|worstCaseQueryOperations
argument_list|(
name|largeSet
argument_list|,
name|largeCounter
argument_list|)
decl_stmt|;
name|double
name|ratio
init|=
operator|(
name|double
operator|)
name|worstCaseOpsLarge
operator|/
name|worstCaseOpsSmall
decl_stmt|;
name|int
name|smallSize
init|=
name|haveSameHashesSmall
operator|.
name|size
argument_list|()
decl_stmt|;
name|int
name|largeSize
init|=
name|haveSameHashesLarge
operator|.
name|size
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|ratio
argument_list|)
operator|.
name|named
argument_list|(
literal|"ratio of equals/hashCode/compareTo operations to worst-case query an ImmutableSet "
operator|+
literal|"of size %s versus size %s"
argument_list|,
name|haveSameHashesLarge
operator|.
name|size
argument_list|()
argument_list|,
name|haveSameHashesSmall
operator|.
name|size
argument_list|()
argument_list|)
operator|.
name|isAtMost
argument_list|(
literal|2
operator|*
name|Math
operator|.
name|log
argument_list|(
name|largeSize
argument_list|)
operator|/
name|Math
operator|.
name|log
argument_list|(
name|smallSize
argument_list|)
argument_list|)
expr_stmt|;
comment|// We allow up to 2x wobble in the constant factors.
block|}
DECL|method|worstCaseQueryOperations (Set<?> set, CallsCounter counter)
specifier|private
specifier|static
name|long
name|worstCaseQueryOperations
parameter_list|(
name|Set
argument_list|<
name|?
argument_list|>
name|set
parameter_list|,
name|CallsCounter
name|counter
parameter_list|)
block|{
name|long
name|worstCalls
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Object
name|k
range|:
name|set
control|)
block|{
name|counter
operator|.
name|zero
argument_list|()
expr_stmt|;
if|if
condition|(
name|set
operator|.
name|contains
argument_list|(
name|k
argument_list|)
condition|)
block|{
name|worstCalls
operator|=
name|Math
operator|.
name|max
argument_list|(
name|worstCalls
argument_list|,
name|counter
operator|.
name|total
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|worstCalls
return|;
block|}
block|}
end_class

end_unit

