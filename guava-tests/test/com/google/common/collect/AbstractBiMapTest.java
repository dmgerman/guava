begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2007 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.collect
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
package|;
end_package

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Arrays
operator|.
name|asList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtCompatible
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtIncompatible
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|testing
operator|.
name|SerializableTester
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**  * Common tests for any {@code BiMap}.  *  * @author Kevin Bourrillion  */
end_comment

begin_class
annotation|@
name|GwtCompatible
argument_list|(
name|emulated
operator|=
literal|true
argument_list|)
DECL|class|AbstractBiMapTest
specifier|public
specifier|abstract
class|class
name|AbstractBiMapTest
extends|extends
name|TestCase
block|{
DECL|method|create ()
specifier|protected
specifier|abstract
name|BiMap
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|create
parameter_list|()
function_decl|;
DECL|field|bimap
specifier|protected
name|BiMap
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|bimap
decl_stmt|;
DECL|field|entrySet
specifier|protected
name|Set
argument_list|<
name|Entry
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
argument_list|>
name|entrySet
decl_stmt|;
comment|// public for GWT
DECL|method|setUp ()
annotation|@
name|Override
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|bimap
operator|=
name|create
argument_list|()
expr_stmt|;
name|entrySet
operator|=
name|bimap
operator|.
name|entrySet
argument_list|()
expr_stmt|;
block|}
DECL|method|testClear ()
specifier|public
name|void
name|testClear
parameter_list|()
block|{
name|bimap
operator|.
name|clear
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|bimap
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|putOneTwoThree
argument_list|()
expr_stmt|;
name|bimap
operator|.
name|clear
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|bimap
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testContainsKey ()
specifier|public
name|void
name|testContainsKey
parameter_list|()
block|{
name|assertFalse
argument_list|(
name|bimap
operator|.
name|containsKey
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|bimap
operator|.
name|containsKey
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|bimap
operator|.
name|containsKey
argument_list|(
literal|"one"
argument_list|)
argument_list|)
expr_stmt|;
name|bimap
operator|.
name|put
argument_list|(
literal|1
argument_list|,
literal|"one"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|bimap
operator|.
name|containsKey
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|bimap
operator|.
name|put
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|bimap
operator|.
name|containsKey
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testContainsValue ()
specifier|public
name|void
name|testContainsValue
parameter_list|()
block|{
name|assertFalse
argument_list|(
name|bimap
operator|.
name|containsValue
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|bimap
operator|.
name|containsValue
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|bimap
operator|.
name|containsValue
argument_list|(
literal|"one"
argument_list|)
argument_list|)
expr_stmt|;
name|bimap
operator|.
name|put
argument_list|(
literal|1
argument_list|,
literal|"one"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|bimap
operator|.
name|containsValue
argument_list|(
literal|"one"
argument_list|)
argument_list|)
expr_stmt|;
name|bimap
operator|.
name|put
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|bimap
operator|.
name|containsValue
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testEquals ()
specifier|public
name|void
name|testEquals
parameter_list|()
block|{
name|BiMap
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|biMap
init|=
name|create
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|biMap
argument_list|,
name|biMap
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|create
argument_list|()
argument_list|,
name|biMap
argument_list|)
expr_stmt|;
name|biMap
operator|.
name|put
argument_list|(
literal|1
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|create
argument_list|()
operator|.
name|equals
argument_list|(
name|biMap
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testGet ()
specifier|public
name|void
name|testGet
parameter_list|()
block|{
name|assertNull
argument_list|(
name|bimap
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|bimap
operator|.
name|get
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|bimap
operator|.
name|get
argument_list|(
literal|"bad"
argument_list|)
argument_list|)
expr_stmt|;
name|bimap
operator|.
name|put
argument_list|(
literal|1
argument_list|,
literal|"one"
argument_list|)
expr_stmt|;
name|bimap
operator|.
name|put
argument_list|(
literal|0
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|bimap
operator|.
name|put
argument_list|(
literal|null
argument_list|,
literal|"nothing"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"one"
argument_list|,
name|bimap
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|bimap
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"nothing"
argument_list|,
name|bimap
operator|.
name|get
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|bimap
operator|.
name|get
argument_list|(
literal|"bad"
argument_list|)
argument_list|)
expr_stmt|;
name|bimap
operator|.
name|forcePut
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|bimap
operator|.
name|get
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|bimap
operator|.
name|remove
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|bimap
operator|.
name|get
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testInverseSimple ()
specifier|public
name|void
name|testInverseSimple
parameter_list|()
block|{
name|BiMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|inverse
init|=
name|bimap
operator|.
name|inverse
argument_list|()
decl_stmt|;
name|bimap
operator|.
name|put
argument_list|(
literal|1
argument_list|,
literal|"one"
argument_list|)
expr_stmt|;
name|bimap
operator|.
name|put
argument_list|(
literal|2
argument_list|,
literal|"two"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"one"
argument_list|,
literal|1
argument_list|,
literal|"two"
argument_list|,
literal|2
argument_list|)
argument_list|,
name|inverse
argument_list|)
expr_stmt|;
comment|// see InverseBiMapTest
name|assertSame
argument_list|(
name|bimap
argument_list|,
name|inverse
operator|.
name|inverse
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testInversePut ()
specifier|public
name|void
name|testInversePut
parameter_list|()
block|{
name|BiMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|inverse
init|=
name|bimap
operator|.
name|inverse
argument_list|()
decl_stmt|;
name|bimap
operator|.
name|put
argument_list|(
literal|1
argument_list|,
literal|"one"
argument_list|)
expr_stmt|;
name|bimap
operator|.
name|inverse
argument_list|()
operator|.
name|put
argument_list|(
literal|"two"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"one"
argument_list|,
literal|1
argument_list|,
literal|"two"
argument_list|,
literal|2
argument_list|)
argument_list|,
name|inverse
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|1
argument_list|,
literal|"one"
argument_list|,
literal|2
argument_list|,
literal|"two"
argument_list|)
argument_list|,
name|bimap
argument_list|)
expr_stmt|;
block|}
DECL|method|testIsEmpty ()
specifier|public
name|void
name|testIsEmpty
parameter_list|()
block|{
name|assertTrue
argument_list|(
name|bimap
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|bimap
operator|.
name|put
argument_list|(
literal|1
argument_list|,
literal|"one"
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|bimap
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|bimap
operator|.
name|remove
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|bimap
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testPut ()
specifier|public
name|void
name|testPut
parameter_list|()
block|{
name|bimap
operator|.
name|put
argument_list|(
literal|1
argument_list|,
literal|"one"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|1
argument_list|,
literal|"one"
argument_list|)
argument_list|,
name|bimap
argument_list|)
expr_stmt|;
name|bimap
operator|.
name|put
argument_list|(
literal|2
argument_list|,
literal|"two"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|1
argument_list|,
literal|"one"
argument_list|,
literal|2
argument_list|,
literal|"two"
argument_list|)
argument_list|,
name|bimap
argument_list|)
expr_stmt|;
name|bimap
operator|.
name|put
argument_list|(
literal|2
argument_list|,
literal|"two"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|1
argument_list|,
literal|"one"
argument_list|,
literal|2
argument_list|,
literal|"two"
argument_list|)
argument_list|,
name|bimap
argument_list|)
expr_stmt|;
name|bimap
operator|.
name|put
argument_list|(
literal|1
argument_list|,
literal|"ONE"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|1
argument_list|,
literal|"ONE"
argument_list|,
literal|2
argument_list|,
literal|"two"
argument_list|)
argument_list|,
name|bimap
argument_list|)
expr_stmt|;
try|try
block|{
name|bimap
operator|.
name|put
argument_list|(
literal|3
argument_list|,
literal|"two"
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{     }
name|assertEquals
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|1
argument_list|,
literal|"ONE"
argument_list|,
literal|2
argument_list|,
literal|"two"
argument_list|)
argument_list|,
name|bimap
argument_list|)
expr_stmt|;
name|bimap
operator|.
name|put
argument_list|(
operator|-
literal|1
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|bimap
operator|.
name|put
argument_list|(
literal|null
argument_list|,
literal|"null"
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|expected
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
name|expected
operator|.
name|put
argument_list|(
literal|1
argument_list|,
literal|"ONE"
argument_list|)
expr_stmt|;
name|expected
operator|.
name|put
argument_list|(
literal|2
argument_list|,
literal|"two"
argument_list|)
expr_stmt|;
name|expected
operator|.
name|put
argument_list|(
operator|-
literal|1
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|expected
operator|.
name|put
argument_list|(
literal|null
argument_list|,
literal|"null"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|bimap
argument_list|)
expr_stmt|;
name|bimap
operator|.
name|remove
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|bimap
operator|.
name|put
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|expected
operator|.
name|remove
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|expected
operator|.
name|put
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|bimap
argument_list|)
expr_stmt|;
block|}
DECL|method|testPutNull ()
specifier|public
name|void
name|testPutNull
parameter_list|()
block|{
name|bimap
operator|.
name|put
argument_list|(
operator|-
literal|1
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|bimap
operator|.
name|containsValue
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|bimap
operator|.
name|put
argument_list|(
literal|1
argument_list|,
literal|"one"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|bimap
operator|.
name|containsValue
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testPutAll ()
specifier|public
name|void
name|testPutAll
parameter_list|()
block|{
name|bimap
operator|.
name|put
argument_list|(
literal|1
argument_list|,
literal|"one"
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|newEntries
init|=
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|2
argument_list|,
literal|"two"
argument_list|,
literal|3
argument_list|,
literal|"three"
argument_list|)
decl_stmt|;
name|bimap
operator|.
name|putAll
argument_list|(
name|newEntries
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|1
argument_list|,
literal|"one"
argument_list|,
literal|2
argument_list|,
literal|"two"
argument_list|,
literal|3
argument_list|,
literal|"three"
argument_list|)
argument_list|,
name|bimap
argument_list|)
expr_stmt|;
block|}
DECL|method|testForcePut ()
specifier|public
name|void
name|testForcePut
parameter_list|()
block|{
name|assertNull
argument_list|(
name|bimap
operator|.
name|forcePut
argument_list|(
literal|1
argument_list|,
literal|"one"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|1
argument_list|,
literal|"one"
argument_list|)
argument_list|,
name|bimap
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"one"
argument_list|,
name|bimap
operator|.
name|forcePut
argument_list|(
literal|1
argument_list|,
literal|"one"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|1
argument_list|,
literal|"one"
argument_list|)
argument_list|,
name|bimap
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"one"
argument_list|,
name|bimap
operator|.
name|forcePut
argument_list|(
literal|1
argument_list|,
literal|"ONE"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|1
argument_list|,
literal|"ONE"
argument_list|)
argument_list|,
name|bimap
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|bimap
operator|.
name|forcePut
argument_list|(
operator|-
literal|1
argument_list|,
literal|"ONE"
argument_list|)
argument_list|)
expr_stmt|;
comment|// key 1 disappears without a trace
name|assertEquals
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
operator|-
literal|1
argument_list|,
literal|"ONE"
argument_list|)
argument_list|,
name|bimap
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|bimap
operator|.
name|forcePut
argument_list|(
literal|2
argument_list|,
literal|"two"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
operator|-
literal|1
argument_list|,
literal|"ONE"
argument_list|,
literal|2
argument_list|,
literal|"two"
argument_list|)
argument_list|,
name|bimap
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"two"
argument_list|,
name|bimap
operator|.
name|forcePut
argument_list|(
literal|2
argument_list|,
literal|"ONE"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|2
argument_list|,
literal|"ONE"
argument_list|)
argument_list|,
name|bimap
argument_list|)
expr_stmt|;
block|}
DECL|method|testRemove ()
specifier|public
name|void
name|testRemove
parameter_list|()
block|{
name|Map
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|map
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|0
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|1
argument_list|,
literal|"one"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|null
argument_list|,
literal|"null"
argument_list|)
expr_stmt|;
name|bimap
operator|.
name|putAll
argument_list|(
name|map
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|bimap
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|map
argument_list|,
name|bimap
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"null"
argument_list|,
name|bimap
operator|.
name|remove
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|1
argument_list|,
literal|"one"
argument_list|)
argument_list|,
name|bimap
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|bimap
operator|.
name|remove
argument_list|(
literal|15
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"one"
argument_list|,
name|bimap
operator|.
name|remove
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|bimap
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testSize ()
specifier|public
name|void
name|testSize
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|bimap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|bimap
operator|.
name|put
argument_list|(
literal|1
argument_list|,
literal|"one"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|bimap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|bimap
operator|.
name|put
argument_list|(
literal|1
argument_list|,
literal|"ONE"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|bimap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|bimap
operator|.
name|put
argument_list|(
literal|2
argument_list|,
literal|"two"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|bimap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|bimap
operator|.
name|forcePut
argument_list|(
literal|1
argument_list|,
literal|"two"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|bimap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testToString ()
specifier|public
name|void
name|testToString
parameter_list|()
block|{
name|bimap
operator|.
name|put
argument_list|(
literal|1
argument_list|,
literal|"one"
argument_list|)
expr_stmt|;
name|bimap
operator|.
name|put
argument_list|(
literal|2
argument_list|,
literal|"two"
argument_list|)
expr_stmt|;
name|String
name|string
init|=
name|bimap
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|expected
init|=
name|string
operator|.
name|startsWith
argument_list|(
literal|"{1"
argument_list|)
condition|?
literal|"{1=one, 2=two}"
else|:
literal|"{2=two, 1=one}"
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|bimap
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Entry Set
DECL|method|testEntrySetAdd ()
specifier|public
name|void
name|testEntrySetAdd
parameter_list|()
block|{
try|try
block|{
name|entrySet
operator|.
name|add
argument_list|(
name|Maps
operator|.
name|immutableEntry
argument_list|(
literal|1
argument_list|,
literal|"one"
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testEntrySetAddAll ()
specifier|public
name|void
name|testEntrySetAddAll
parameter_list|()
block|{
try|try
block|{
name|entrySet
operator|.
name|addAll
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|Maps
operator|.
name|immutableEntry
argument_list|(
literal|1
argument_list|,
literal|"one"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testEntrySetClear ()
specifier|public
name|void
name|testEntrySetClear
parameter_list|()
block|{
name|entrySet
operator|.
name|clear
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|entrySet
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|bimap
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|putOneTwoThree
argument_list|()
expr_stmt|;
name|entrySet
operator|.
name|clear
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|entrySet
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|bimap
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testEntrySetContains ()
specifier|public
name|void
name|testEntrySetContains
parameter_list|()
block|{
name|assertFalse
argument_list|(
name|entrySet
operator|.
name|contains
argument_list|(
name|Maps
operator|.
name|immutableEntry
argument_list|(
literal|1
argument_list|,
literal|"one"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|bimap
operator|.
name|put
argument_list|(
literal|1
argument_list|,
literal|"one"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|entrySet
operator|.
name|contains
argument_list|(
name|Maps
operator|.
name|immutableEntry
argument_list|(
literal|1
argument_list|,
literal|"one"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|entrySet
operator|.
name|contains
argument_list|(
name|Maps
operator|.
name|immutableEntry
argument_list|(
literal|1
argument_list|,
literal|""
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|entrySet
operator|.
name|contains
argument_list|(
name|Maps
operator|.
name|immutableEntry
argument_list|(
literal|0
argument_list|,
literal|"one"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|entrySet
operator|.
name|contains
argument_list|(
name|Maps
operator|.
name|immutableEntry
argument_list|(
literal|1
argument_list|,
literal|null
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|entrySet
operator|.
name|contains
argument_list|(
name|Maps
operator|.
name|immutableEntry
argument_list|(
literal|null
argument_list|,
literal|"one"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|entrySet
operator|.
name|contains
argument_list|(
name|Maps
operator|.
name|immutableEntry
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|bimap
operator|.
name|put
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|entrySet
operator|.
name|contains
argument_list|(
name|Maps
operator|.
name|immutableEntry
argument_list|(
literal|1
argument_list|,
literal|"one"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|entrySet
operator|.
name|contains
argument_list|(
name|Maps
operator|.
name|immutableEntry
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|entrySet
operator|.
name|contains
argument_list|(
name|Maps
operator|.
name|immutableEntry
argument_list|(
literal|1
argument_list|,
literal|""
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|entrySet
operator|.
name|contains
argument_list|(
name|Maps
operator|.
name|immutableEntry
argument_list|(
literal|0
argument_list|,
literal|"one"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|entrySet
operator|.
name|contains
argument_list|(
name|Maps
operator|.
name|immutableEntry
argument_list|(
literal|1
argument_list|,
literal|null
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|entrySet
operator|.
name|contains
argument_list|(
name|Maps
operator|.
name|immutableEntry
argument_list|(
literal|null
argument_list|,
literal|"one"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|bimap
operator|.
name|put
argument_list|(
literal|null
argument_list|,
literal|"null"
argument_list|)
expr_stmt|;
name|bimap
operator|.
name|put
argument_list|(
literal|0
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|entrySet
operator|.
name|contains
argument_list|(
name|Maps
operator|.
name|immutableEntry
argument_list|(
literal|1
argument_list|,
literal|"one"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|entrySet
operator|.
name|contains
argument_list|(
name|Maps
operator|.
name|immutableEntry
argument_list|(
literal|null
argument_list|,
literal|"null"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|entrySet
operator|.
name|contains
argument_list|(
name|Maps
operator|.
name|immutableEntry
argument_list|(
literal|0
argument_list|,
literal|null
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|entrySet
operator|.
name|contains
argument_list|(
name|Maps
operator|.
name|immutableEntry
argument_list|(
literal|1
argument_list|,
literal|""
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|entrySet
operator|.
name|contains
argument_list|(
name|Maps
operator|.
name|immutableEntry
argument_list|(
literal|0
argument_list|,
literal|"one"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|entrySet
operator|.
name|contains
argument_list|(
name|Maps
operator|.
name|immutableEntry
argument_list|(
literal|1
argument_list|,
literal|null
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|entrySet
operator|.
name|contains
argument_list|(
name|Maps
operator|.
name|immutableEntry
argument_list|(
literal|null
argument_list|,
literal|"one"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|entrySet
operator|.
name|contains
argument_list|(
name|Maps
operator|.
name|immutableEntry
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testEntrySetIsEmpty ()
specifier|public
name|void
name|testEntrySetIsEmpty
parameter_list|()
block|{
name|assertTrue
argument_list|(
name|entrySet
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|bimap
operator|.
name|put
argument_list|(
literal|1
argument_list|,
literal|"one"
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|entrySet
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|bimap
operator|.
name|remove
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|entrySet
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testEntrySetRemove ()
specifier|public
name|void
name|testEntrySetRemove
parameter_list|()
block|{
name|putOneTwoThree
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|bimap
operator|.
name|containsKey
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|bimap
operator|.
name|containsValue
argument_list|(
literal|"one"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|entrySet
operator|.
name|remove
argument_list|(
name|Maps
operator|.
name|immutableEntry
argument_list|(
literal|1
argument_list|,
literal|"one"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|bimap
operator|.
name|containsKey
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|bimap
operator|.
name|containsValue
argument_list|(
literal|"one"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|bimap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|bimap
operator|.
name|inverse
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|entrySet
operator|.
name|remove
argument_list|(
name|Maps
operator|.
name|immutableEntry
argument_list|(
literal|2
argument_list|,
literal|"three"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|entrySet
operator|.
name|remove
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|bimap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|bimap
operator|.
name|inverse
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testEntrySetRemoveAll ()
specifier|public
name|void
name|testEntrySetRemoveAll
parameter_list|()
block|{
name|putOneTwoThree
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|bimap
operator|.
name|containsKey
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|bimap
operator|.
name|containsValue
argument_list|(
literal|"one"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|entrySet
operator|.
name|removeAll
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|Maps
operator|.
name|immutableEntry
argument_list|(
literal|1
argument_list|,
literal|"one"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|bimap
operator|.
name|containsKey
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|bimap
operator|.
name|containsValue
argument_list|(
literal|"one"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|bimap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|bimap
operator|.
name|inverse
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testEntrySetValue ()
specifier|public
name|void
name|testEntrySetValue
parameter_list|()
block|{
name|bimap
operator|.
name|put
argument_list|(
literal|1
argument_list|,
literal|"one"
argument_list|)
expr_stmt|;
name|Entry
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|entry
init|=
name|bimap
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|bimap
operator|.
name|put
argument_list|(
literal|2
argument_list|,
literal|"two"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"one"
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|bimap
operator|.
name|put
argument_list|(
literal|1
argument_list|,
literal|"one"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"one"
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"one"
argument_list|,
name|bimap
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|1
argument_list|)
argument_list|,
name|bimap
operator|.
name|inverse
argument_list|()
operator|.
name|get
argument_list|(
literal|"one"
argument_list|)
argument_list|)
expr_stmt|;
name|bimap
operator|.
name|put
argument_list|(
literal|1
argument_list|,
literal|"uno"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"uno"
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"uno"
argument_list|,
name|bimap
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|1
argument_list|)
argument_list|,
name|bimap
operator|.
name|inverse
argument_list|()
operator|.
name|get
argument_list|(
literal|"uno"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|bimap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|bimap
operator|.
name|inverse
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|entry
operator|.
name|setValue
argument_list|(
literal|"two"
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{}
name|assertEquals
argument_list|(
literal|"uno"
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"uno"
argument_list|,
name|bimap
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|1
argument_list|)
argument_list|,
name|bimap
operator|.
name|inverse
argument_list|()
operator|.
name|get
argument_list|(
literal|"uno"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|bimap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|bimap
operator|.
name|inverse
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testEntrySetValueRemovedEntry ()
specifier|public
name|void
name|testEntrySetValueRemovedEntry
parameter_list|()
block|{
name|bimap
operator|.
name|put
argument_list|(
literal|1
argument_list|,
literal|"a"
argument_list|)
expr_stmt|;
name|Entry
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|entry
init|=
name|bimap
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|bimap
operator|.
name|clear
argument_list|()
expr_stmt|;
try|try
block|{
name|entry
operator|.
name|setValue
argument_list|(
literal|"b"
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|expected
parameter_list|)
block|{}
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|bimap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|bimap
operator|.
name|inverse
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testEntrySetValueRemovedEntryNullOldValue ()
specifier|public
name|void
name|testEntrySetValueRemovedEntryNullOldValue
parameter_list|()
block|{
name|bimap
operator|.
name|put
argument_list|(
literal|1
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Entry
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|entry
init|=
name|bimap
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|bimap
operator|.
name|clear
argument_list|()
expr_stmt|;
try|try
block|{
name|entry
operator|.
name|setValue
argument_list|(
literal|"b"
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|expected
parameter_list|)
block|{}
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|bimap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|bimap
operator|.
name|inverse
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testEntrySetValueRemovedEntryAddedEqualEntry ()
specifier|public
name|void
name|testEntrySetValueRemovedEntryAddedEqualEntry
parameter_list|()
block|{
name|bimap
operator|.
name|put
argument_list|(
literal|1
argument_list|,
literal|"a"
argument_list|)
expr_stmt|;
name|Entry
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|entry
init|=
name|bimap
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|bimap
operator|.
name|clear
argument_list|()
expr_stmt|;
name|bimap
operator|.
name|put
argument_list|(
literal|1
argument_list|,
literal|"a"
argument_list|)
expr_stmt|;
try|try
block|{
name|entry
operator|.
name|setValue
argument_list|(
literal|"b"
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|expected
parameter_list|)
block|{}
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|bimap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a"
argument_list|,
name|bimap
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|bimap
operator|.
name|inverse
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
name|Integer
operator|)
literal|1
argument_list|,
name|bimap
operator|.
name|inverse
argument_list|()
operator|.
name|get
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testKeySetIteratorRemove ()
specifier|public
name|void
name|testKeySetIteratorRemove
parameter_list|()
block|{
name|putOneTwoThree
argument_list|()
expr_stmt|;
name|Iterator
argument_list|<
name|Integer
argument_list|>
name|iterator
init|=
name|bimap
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|iterator
operator|.
name|next
argument_list|()
expr_stmt|;
name|iterator
operator|.
name|remove
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|bimap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|bimap
operator|.
name|inverse
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testKeySetRemoveAll ()
specifier|public
name|void
name|testKeySetRemoveAll
parameter_list|()
block|{
name|putOneTwoThree
argument_list|()
expr_stmt|;
name|Set
argument_list|<
name|Integer
argument_list|>
name|keySet
init|=
name|bimap
operator|.
name|keySet
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|keySet
operator|.
name|removeAll
argument_list|(
name|asList
argument_list|(
literal|1
argument_list|,
literal|3
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|bimap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|keySet
operator|.
name|contains
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testKeySetRetainAll ()
specifier|public
name|void
name|testKeySetRetainAll
parameter_list|()
block|{
name|putOneTwoThree
argument_list|()
expr_stmt|;
name|Set
argument_list|<
name|Integer
argument_list|>
name|keySet
init|=
name|bimap
operator|.
name|keySet
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|keySet
operator|.
name|retainAll
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
literal|2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|bimap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|keySet
operator|.
name|contains
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testEntriesIteratorRemove ()
specifier|public
name|void
name|testEntriesIteratorRemove
parameter_list|()
block|{
name|putOneTwoThree
argument_list|()
expr_stmt|;
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
argument_list|>
name|iterator
init|=
name|bimap
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|iterator
operator|.
name|next
argument_list|()
expr_stmt|;
name|iterator
operator|.
name|remove
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|bimap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|bimap
operator|.
name|inverse
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testEntriesRetainAll ()
specifier|public
name|void
name|testEntriesRetainAll
parameter_list|()
block|{
name|putOneTwoThree
argument_list|()
expr_stmt|;
name|Set
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
argument_list|>
name|entries
init|=
name|bimap
operator|.
name|entrySet
argument_list|()
decl_stmt|;
name|Map
operator|.
name|Entry
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|entry
init|=
name|Maps
operator|.
name|immutableEntry
argument_list|(
literal|2
argument_list|,
literal|"two"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|entries
operator|.
name|retainAll
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|entry
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|bimap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|bimap
operator|.
name|containsKey
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testValuesIteratorRemove ()
specifier|public
name|void
name|testValuesIteratorRemove
parameter_list|()
block|{
name|putOneTwoThree
argument_list|()
expr_stmt|;
name|Iterator
argument_list|<
name|String
argument_list|>
name|iterator
init|=
name|bimap
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|iterator
operator|.
name|next
argument_list|()
expr_stmt|;
name|iterator
operator|.
name|remove
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|bimap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|bimap
operator|.
name|inverse
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testValuesToArray ()
specifier|public
name|void
name|testValuesToArray
parameter_list|()
block|{
name|bimap
operator|.
name|put
argument_list|(
literal|1
argument_list|,
literal|"one"
argument_list|)
expr_stmt|;
name|String
index|[]
name|array
init|=
operator|new
name|String
index|[
literal|3
index|]
decl_stmt|;
name|array
index|[
literal|1
index|]
operator|=
literal|"garbage"
expr_stmt|;
name|assertSame
argument_list|(
name|array
argument_list|,
name|bimap
operator|.
name|values
argument_list|()
operator|.
name|toArray
argument_list|(
name|array
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"one"
argument_list|,
name|array
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|array
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
DECL|method|testValuesToString ()
specifier|public
name|void
name|testValuesToString
parameter_list|()
block|{
name|bimap
operator|.
name|put
argument_list|(
literal|1
argument_list|,
literal|"one"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[one]"
argument_list|,
name|bimap
operator|.
name|values
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
argument_list|(
literal|"SerializableTester"
argument_list|)
DECL|method|testSerialization ()
specifier|public
name|void
name|testSerialization
parameter_list|()
block|{
name|bimap
operator|.
name|put
argument_list|(
literal|1
argument_list|,
literal|"one"
argument_list|)
expr_stmt|;
name|bimap
operator|.
name|put
argument_list|(
literal|2
argument_list|,
literal|"two"
argument_list|)
expr_stmt|;
name|bimap
operator|.
name|put
argument_list|(
literal|3
argument_list|,
literal|"three"
argument_list|)
expr_stmt|;
name|bimap
operator|.
name|put
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|BiMap
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|copy
init|=
name|SerializableTester
operator|.
name|reserializeAndAssert
argument_list|(
name|bimap
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|bimap
operator|.
name|inverse
argument_list|()
argument_list|,
name|copy
operator|.
name|inverse
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|putOneTwoThree ()
name|void
name|putOneTwoThree
parameter_list|()
block|{
name|bimap
operator|.
name|put
argument_list|(
literal|1
argument_list|,
literal|"one"
argument_list|)
expr_stmt|;
name|bimap
operator|.
name|put
argument_list|(
literal|2
argument_list|,
literal|"two"
argument_list|)
expr_stmt|;
name|bimap
operator|.
name|put
argument_list|(
literal|3
argument_list|,
literal|"three"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
argument_list|(
literal|"used only by @GwtIncompatible code"
argument_list|)
DECL|class|BiMapPair
specifier|private
specifier|static
class|class
name|BiMapPair
implements|implements
name|Serializable
block|{
DECL|field|forward
specifier|final
name|BiMap
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|forward
decl_stmt|;
DECL|field|backward
specifier|final
name|BiMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|backward
decl_stmt|;
DECL|method|BiMapPair (BiMap<Integer, String> original)
name|BiMapPair
parameter_list|(
name|BiMap
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|original
parameter_list|)
block|{
name|this
operator|.
name|forward
operator|=
name|original
expr_stmt|;
name|this
operator|.
name|backward
operator|=
name|original
operator|.
name|inverse
argument_list|()
expr_stmt|;
block|}
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|0
decl_stmt|;
block|}
annotation|@
name|GwtIncompatible
argument_list|(
literal|"SerializableTester"
argument_list|)
DECL|method|testSerializationWithInverseEqual ()
specifier|public
name|void
name|testSerializationWithInverseEqual
parameter_list|()
block|{
name|bimap
operator|.
name|put
argument_list|(
literal|1
argument_list|,
literal|"one"
argument_list|)
expr_stmt|;
name|bimap
operator|.
name|put
argument_list|(
literal|2
argument_list|,
literal|"two"
argument_list|)
expr_stmt|;
name|bimap
operator|.
name|put
argument_list|(
literal|3
argument_list|,
literal|"three"
argument_list|)
expr_stmt|;
name|bimap
operator|.
name|put
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|BiMapPair
name|pair
init|=
operator|new
name|BiMapPair
argument_list|(
name|bimap
argument_list|)
decl_stmt|;
name|BiMapPair
name|copy
init|=
name|SerializableTester
operator|.
name|reserialize
argument_list|(
name|pair
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|pair
operator|.
name|forward
argument_list|,
name|copy
operator|.
name|forward
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|pair
operator|.
name|backward
argument_list|,
name|copy
operator|.
name|backward
argument_list|)
expr_stmt|;
name|copy
operator|.
name|forward
operator|.
name|put
argument_list|(
literal|4
argument_list|,
literal|"four"
argument_list|)
expr_stmt|;
name|copy
operator|.
name|backward
operator|.
name|put
argument_list|(
literal|"five"
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|copy
operator|.
name|backward
argument_list|,
name|copy
operator|.
name|forward
operator|.
name|inverse
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|copy
operator|.
name|forward
argument_list|,
name|copy
operator|.
name|backward
operator|.
name|inverse
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|copy
operator|.
name|forward
operator|.
name|containsKey
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|copy
operator|.
name|forward
operator|.
name|containsKey
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|copy
operator|.
name|backward
operator|.
name|containsValue
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|copy
operator|.
name|backward
operator|.
name|containsValue
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|copy
operator|.
name|forward
operator|.
name|containsValue
argument_list|(
literal|"four"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|copy
operator|.
name|forward
operator|.
name|containsValue
argument_list|(
literal|"five"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|copy
operator|.
name|backward
operator|.
name|containsKey
argument_list|(
literal|"four"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|copy
operator|.
name|backward
operator|.
name|containsKey
argument_list|(
literal|"five"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * The sameness checks ensure that a bimap and its inverse remain consistent,    * even after the deserialized instances are updated. Also, the relationship    * {@code a == b.inverse()} should continue to hold after both bimaps are    * serialized and deserialized together.    */
annotation|@
name|GwtIncompatible
argument_list|(
literal|"SerializableTester"
argument_list|)
DECL|method|testSerializationWithInverseSame ()
specifier|public
name|void
name|testSerializationWithInverseSame
parameter_list|()
block|{
name|bimap
operator|.
name|put
argument_list|(
literal|1
argument_list|,
literal|"one"
argument_list|)
expr_stmt|;
name|bimap
operator|.
name|put
argument_list|(
literal|2
argument_list|,
literal|"two"
argument_list|)
expr_stmt|;
name|bimap
operator|.
name|put
argument_list|(
literal|3
argument_list|,
literal|"three"
argument_list|)
expr_stmt|;
name|bimap
operator|.
name|put
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|BiMapPair
name|pair
init|=
operator|new
name|BiMapPair
argument_list|(
name|bimap
argument_list|)
decl_stmt|;
name|BiMapPair
name|copy
init|=
name|SerializableTester
operator|.
name|reserialize
argument_list|(
name|pair
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
name|copy
operator|.
name|backward
argument_list|,
name|copy
operator|.
name|forward
operator|.
name|inverse
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|copy
operator|.
name|forward
argument_list|,
name|copy
operator|.
name|backward
operator|.
name|inverse
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

