begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2009 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.collect
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Tables
operator|.
name|immutableCell
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtCompatible
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Equivalence
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|MoreObjects
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Table
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|testing
operator|.
name|CollectorTester
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|BiPredicate
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collector
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Stream
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_comment
comment|/** Unit tests for {@link TableCollectors}. */
end_comment

begin_class
annotation|@
name|GwtCompatible
argument_list|(
name|emulated
operator|=
literal|true
argument_list|)
DECL|class|TableCollectorsTest
specifier|public
class|class
name|TableCollectorsTest
extends|extends
name|TestCase
block|{
DECL|class|ToImmutableTableTest
specifier|public
specifier|static
specifier|final
class|class
name|ToImmutableTableTest
extends|extends
name|TestCase
block|{
DECL|method|testToImmutableTable ()
specifier|public
name|void
name|testToImmutableTable
parameter_list|()
block|{
name|Collector
argument_list|<
name|Cell
argument_list|<
name|String
argument_list|,
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|,
name|?
argument_list|,
name|ImmutableTable
argument_list|<
name|String
argument_list|,
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|>
name|collector
init|=
name|TableCollectors
operator|.
name|toImmutableTable
argument_list|(
name|Cell
operator|::
name|getRowKey
argument_list|,
name|Cell
operator|::
name|getColumnKey
argument_list|,
name|Cell
operator|::
name|getValue
argument_list|)
decl_stmt|;
name|BiPredicate
argument_list|<
name|ImmutableTable
argument_list|<
name|String
argument_list|,
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|,
name|ImmutableTable
argument_list|<
name|String
argument_list|,
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|>
name|equivalence
init|=
name|pairwiseOnResultOf
argument_list|(
name|ImmutableTable
operator|::
name|cellSet
argument_list|)
decl_stmt|;
name|CollectorTester
operator|.
name|of
argument_list|(
name|collector
argument_list|,
name|equivalence
argument_list|)
operator|.
name|expectCollects
argument_list|(
operator|new
name|ImmutableTable
operator|.
name|Builder
argument_list|<
name|String
argument_list|,
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|()
operator|.
name|put
argument_list|(
literal|"one"
argument_list|,
literal|"uno"
argument_list|,
literal|1
argument_list|)
operator|.
name|put
argument_list|(
literal|"two"
argument_list|,
literal|"dos"
argument_list|,
literal|2
argument_list|)
operator|.
name|put
argument_list|(
literal|"three"
argument_list|,
literal|"tres"
argument_list|,
literal|3
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
name|immutableCell
argument_list|(
literal|"one"
argument_list|,
literal|"uno"
argument_list|,
literal|1
argument_list|)
argument_list|,
name|immutableCell
argument_list|(
literal|"two"
argument_list|,
literal|"dos"
argument_list|,
literal|2
argument_list|)
argument_list|,
name|immutableCell
argument_list|(
literal|"three"
argument_list|,
literal|"tres"
argument_list|,
literal|3
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testToImmutableTableConflict ()
specifier|public
name|void
name|testToImmutableTableConflict
parameter_list|()
block|{
name|Collector
argument_list|<
name|Cell
argument_list|<
name|String
argument_list|,
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|,
name|?
argument_list|,
name|ImmutableTable
argument_list|<
name|String
argument_list|,
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|>
name|collector
init|=
name|TableCollectors
operator|.
name|toImmutableTable
argument_list|(
name|Cell
operator|::
name|getRowKey
argument_list|,
name|Cell
operator|::
name|getColumnKey
argument_list|,
name|Cell
operator|::
name|getValue
argument_list|)
decl_stmt|;
try|try
block|{
name|Stream
operator|.
name|of
argument_list|(
name|immutableCell
argument_list|(
literal|"one"
argument_list|,
literal|"uno"
argument_list|,
literal|1
argument_list|)
argument_list|,
name|immutableCell
argument_list|(
literal|"one"
argument_list|,
literal|"uno"
argument_list|,
literal|2
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|collector
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected IllegalArgumentException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{       }
block|}
DECL|method|testToImmutableTableNullRowKey ()
specifier|public
name|void
name|testToImmutableTableNullRowKey
parameter_list|()
block|{
name|Collector
argument_list|<
name|Cell
argument_list|<
name|String
argument_list|,
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|,
name|?
argument_list|,
name|ImmutableTable
argument_list|<
name|String
argument_list|,
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|>
name|collector
init|=
name|TableCollectors
operator|.
name|toImmutableTable
argument_list|(
name|t
lambda|->
literal|null
argument_list|,
name|Cell
operator|::
name|getColumnKey
argument_list|,
name|Cell
operator|::
name|getValue
argument_list|)
decl_stmt|;
try|try
block|{
name|Stream
operator|.
name|of
argument_list|(
name|immutableCell
argument_list|(
literal|"one"
argument_list|,
literal|"uno"
argument_list|,
literal|1
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|collector
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected NullPointerException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|expected
parameter_list|)
block|{       }
block|}
DECL|method|testToImmutableTableNullColumnKey ()
specifier|public
name|void
name|testToImmutableTableNullColumnKey
parameter_list|()
block|{
name|Collector
argument_list|<
name|Cell
argument_list|<
name|String
argument_list|,
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|,
name|?
argument_list|,
name|ImmutableTable
argument_list|<
name|String
argument_list|,
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|>
name|collector
init|=
name|TableCollectors
operator|.
name|toImmutableTable
argument_list|(
name|Cell
operator|::
name|getRowKey
argument_list|,
name|t
lambda|->
literal|null
argument_list|,
name|Cell
operator|::
name|getValue
argument_list|)
decl_stmt|;
try|try
block|{
name|Stream
operator|.
name|of
argument_list|(
name|immutableCell
argument_list|(
literal|"one"
argument_list|,
literal|"uno"
argument_list|,
literal|1
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|collector
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected NullPointerException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|expected
parameter_list|)
block|{       }
block|}
DECL|method|testToImmutableTableNullValue ()
specifier|public
name|void
name|testToImmutableTableNullValue
parameter_list|()
block|{
name|Collector
argument_list|<
name|Cell
argument_list|<
name|String
argument_list|,
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|,
name|?
argument_list|,
name|ImmutableTable
argument_list|<
name|String
argument_list|,
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|>
name|collector
init|=
name|TableCollectors
operator|.
name|toImmutableTable
argument_list|(
name|Cell
operator|::
name|getRowKey
argument_list|,
name|Cell
operator|::
name|getColumnKey
argument_list|,
name|t
lambda|->
literal|null
argument_list|)
decl_stmt|;
try|try
block|{
name|Stream
operator|.
name|of
argument_list|(
name|immutableCell
argument_list|(
literal|"one"
argument_list|,
literal|"uno"
argument_list|,
literal|1
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|collector
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected NullPointerException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|expected
parameter_list|)
block|{       }
name|collector
operator|=
name|TableCollectors
operator|.
name|toImmutableTable
argument_list|(
name|Cell
operator|::
name|getRowKey
argument_list|,
name|Cell
operator|::
name|getColumnKey
argument_list|,
name|Cell
operator|::
name|getValue
argument_list|)
expr_stmt|;
try|try
block|{
name|Stream
operator|.
name|of
argument_list|(
name|immutableCell
argument_list|(
literal|"one"
argument_list|,
literal|"uno"
argument_list|,
literal|1
argument_list|)
argument_list|,
name|immutableCell
argument_list|(
literal|"one"
argument_list|,
literal|"uno"
argument_list|,
operator|(
name|Integer
operator|)
literal|null
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|collector
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected NullPointerException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|expected
parameter_list|)
block|{       }
block|}
DECL|method|testToImmutableTableMerging ()
specifier|public
name|void
name|testToImmutableTableMerging
parameter_list|()
block|{
name|Collector
argument_list|<
name|Cell
argument_list|<
name|String
argument_list|,
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|,
name|?
argument_list|,
name|ImmutableTable
argument_list|<
name|String
argument_list|,
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|>
name|collector
init|=
name|TableCollectors
operator|.
name|toImmutableTable
argument_list|(
name|Cell
operator|::
name|getRowKey
argument_list|,
name|Cell
operator|::
name|getColumnKey
argument_list|,
name|Cell
operator|::
name|getValue
argument_list|,
name|Integer
operator|::
name|sum
argument_list|)
decl_stmt|;
name|BiPredicate
argument_list|<
name|ImmutableTable
argument_list|<
name|String
argument_list|,
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|,
name|ImmutableTable
argument_list|<
name|String
argument_list|,
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|>
name|equivalence
init|=
name|pairwiseOnResultOf
argument_list|(
name|ImmutableTable
operator|::
name|cellSet
argument_list|)
decl_stmt|;
name|CollectorTester
operator|.
name|of
argument_list|(
name|collector
argument_list|,
name|equivalence
argument_list|)
operator|.
name|expectCollects
argument_list|(
operator|new
name|ImmutableTable
operator|.
name|Builder
argument_list|<
name|String
argument_list|,
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|()
operator|.
name|put
argument_list|(
literal|"one"
argument_list|,
literal|"uno"
argument_list|,
literal|1
argument_list|)
operator|.
name|put
argument_list|(
literal|"two"
argument_list|,
literal|"dos"
argument_list|,
literal|6
argument_list|)
operator|.
name|put
argument_list|(
literal|"three"
argument_list|,
literal|"tres"
argument_list|,
literal|3
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
name|immutableCell
argument_list|(
literal|"one"
argument_list|,
literal|"uno"
argument_list|,
literal|1
argument_list|)
argument_list|,
name|immutableCell
argument_list|(
literal|"two"
argument_list|,
literal|"dos"
argument_list|,
literal|2
argument_list|)
argument_list|,
name|immutableCell
argument_list|(
literal|"three"
argument_list|,
literal|"tres"
argument_list|,
literal|3
argument_list|)
argument_list|,
name|immutableCell
argument_list|(
literal|"two"
argument_list|,
literal|"dos"
argument_list|,
literal|4
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testToImmutableTableMergingNullRowKey ()
specifier|public
name|void
name|testToImmutableTableMergingNullRowKey
parameter_list|()
block|{
name|Collector
argument_list|<
name|Cell
argument_list|<
name|String
argument_list|,
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|,
name|?
argument_list|,
name|ImmutableTable
argument_list|<
name|String
argument_list|,
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|>
name|collector
init|=
name|TableCollectors
operator|.
name|toImmutableTable
argument_list|(
name|t
lambda|->
literal|null
argument_list|,
name|Cell
operator|::
name|getColumnKey
argument_list|,
name|Cell
operator|::
name|getValue
argument_list|,
name|Integer
operator|::
name|sum
argument_list|)
decl_stmt|;
try|try
block|{
name|Stream
operator|.
name|of
argument_list|(
name|immutableCell
argument_list|(
literal|"one"
argument_list|,
literal|"uno"
argument_list|,
literal|1
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|collector
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected NullPointerException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|expected
parameter_list|)
block|{       }
block|}
DECL|method|testToImmutableTableMergingNullColumnKey ()
specifier|public
name|void
name|testToImmutableTableMergingNullColumnKey
parameter_list|()
block|{
name|Collector
argument_list|<
name|Cell
argument_list|<
name|String
argument_list|,
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|,
name|?
argument_list|,
name|ImmutableTable
argument_list|<
name|String
argument_list|,
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|>
name|collector
init|=
name|TableCollectors
operator|.
name|toImmutableTable
argument_list|(
name|Cell
operator|::
name|getRowKey
argument_list|,
name|t
lambda|->
literal|null
argument_list|,
name|Cell
operator|::
name|getValue
argument_list|,
name|Integer
operator|::
name|sum
argument_list|)
decl_stmt|;
try|try
block|{
name|Stream
operator|.
name|of
argument_list|(
name|immutableCell
argument_list|(
literal|"one"
argument_list|,
literal|"uno"
argument_list|,
literal|1
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|collector
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected NullPointerException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|expected
parameter_list|)
block|{       }
block|}
DECL|method|testToImmutableTableMergingNullValue ()
specifier|public
name|void
name|testToImmutableTableMergingNullValue
parameter_list|()
block|{
name|Collector
argument_list|<
name|Cell
argument_list|<
name|String
argument_list|,
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|,
name|?
argument_list|,
name|ImmutableTable
argument_list|<
name|String
argument_list|,
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|>
name|collector
init|=
name|TableCollectors
operator|.
name|toImmutableTable
argument_list|(
name|Cell
operator|::
name|getRowKey
argument_list|,
name|Cell
operator|::
name|getColumnKey
argument_list|,
name|t
lambda|->
literal|null
argument_list|,
name|Integer
operator|::
name|sum
argument_list|)
decl_stmt|;
try|try
block|{
name|Stream
operator|.
name|of
argument_list|(
name|immutableCell
argument_list|(
literal|"one"
argument_list|,
literal|"uno"
argument_list|,
literal|1
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|collector
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected NullPointerException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|expected
parameter_list|)
block|{       }
name|collector
operator|=
name|TableCollectors
operator|.
name|toImmutableTable
argument_list|(
name|Cell
operator|::
name|getRowKey
argument_list|,
name|Cell
operator|::
name|getColumnKey
argument_list|,
name|Cell
operator|::
name|getValue
argument_list|,
parameter_list|(
name|i
parameter_list|,
name|j
parameter_list|)
lambda|->
name|MoreObjects
operator|.
name|firstNonNull
argument_list|(
name|i
argument_list|,
literal|0
argument_list|)
operator|+
name|MoreObjects
operator|.
name|firstNonNull
argument_list|(
name|j
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|Stream
operator|.
name|of
argument_list|(
name|immutableCell
argument_list|(
literal|"one"
argument_list|,
literal|"uno"
argument_list|,
literal|1
argument_list|)
argument_list|,
name|immutableCell
argument_list|(
literal|"one"
argument_list|,
literal|"uno"
argument_list|,
operator|(
name|Integer
operator|)
literal|null
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|collector
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected NullPointerException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|expected
parameter_list|)
block|{       }
block|}
DECL|method|testToImmutableTableMergingNullMerge ()
specifier|public
name|void
name|testToImmutableTableMergingNullMerge
parameter_list|()
block|{
name|Collector
argument_list|<
name|Cell
argument_list|<
name|String
argument_list|,
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|,
name|?
argument_list|,
name|ImmutableTable
argument_list|<
name|String
argument_list|,
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|>
name|collector
init|=
name|TableCollectors
operator|.
name|toImmutableTable
argument_list|(
name|Cell
operator|::
name|getRowKey
argument_list|,
name|Cell
operator|::
name|getColumnKey
argument_list|,
name|Cell
operator|::
name|getValue
argument_list|,
parameter_list|(
name|v1
parameter_list|,
name|v2
parameter_list|)
lambda|->
literal|null
argument_list|)
decl_stmt|;
try|try
block|{
name|Stream
operator|.
name|of
argument_list|(
name|immutableCell
argument_list|(
literal|"one"
argument_list|,
literal|"uno"
argument_list|,
literal|1
argument_list|)
argument_list|,
name|immutableCell
argument_list|(
literal|"one"
argument_list|,
literal|"uno"
argument_list|,
literal|2
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|collector
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected NullPointerException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|expected
parameter_list|)
block|{       }
block|}
block|}
DECL|class|ToTableTest
specifier|public
specifier|static
specifier|final
class|class
name|ToTableTest
extends|extends
name|TestCase
block|{
DECL|method|testToTable ()
specifier|public
name|void
name|testToTable
parameter_list|()
block|{
name|Collector
argument_list|<
name|Cell
argument_list|<
name|String
argument_list|,
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|,
name|?
argument_list|,
name|Table
argument_list|<
name|String
argument_list|,
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|>
name|collector
init|=
name|TableCollectors
operator|.
name|toTable
argument_list|(
name|Cell
operator|::
name|getRowKey
argument_list|,
name|Cell
operator|::
name|getColumnKey
argument_list|,
name|Cell
operator|::
name|getValue
argument_list|,
name|HashBasedTable
operator|::
name|create
argument_list|)
decl_stmt|;
name|BiPredicate
argument_list|<
name|Table
argument_list|<
name|String
argument_list|,
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|,
name|Table
argument_list|<
name|String
argument_list|,
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|>
name|equivalence
init|=
name|pairwiseOnResultOf
argument_list|(
name|Table
operator|::
name|cellSet
argument_list|)
decl_stmt|;
name|CollectorTester
operator|.
name|of
argument_list|(
name|collector
argument_list|,
name|equivalence
argument_list|)
operator|.
name|expectCollects
argument_list|(
operator|new
name|ImmutableTable
operator|.
name|Builder
argument_list|<
name|String
argument_list|,
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|()
operator|.
name|put
argument_list|(
literal|"one"
argument_list|,
literal|"uno"
argument_list|,
literal|1
argument_list|)
operator|.
name|put
argument_list|(
literal|"two"
argument_list|,
literal|"dos"
argument_list|,
literal|2
argument_list|)
operator|.
name|put
argument_list|(
literal|"three"
argument_list|,
literal|"tres"
argument_list|,
literal|3
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
name|immutableCell
argument_list|(
literal|"one"
argument_list|,
literal|"uno"
argument_list|,
literal|1
argument_list|)
argument_list|,
name|immutableCell
argument_list|(
literal|"two"
argument_list|,
literal|"dos"
argument_list|,
literal|2
argument_list|)
argument_list|,
name|immutableCell
argument_list|(
literal|"three"
argument_list|,
literal|"tres"
argument_list|,
literal|3
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testToTableNullMerge ()
specifier|public
name|void
name|testToTableNullMerge
parameter_list|()
block|{
name|Collector
argument_list|<
name|Cell
argument_list|<
name|String
argument_list|,
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|,
name|?
argument_list|,
name|Table
argument_list|<
name|String
argument_list|,
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|>
name|collector
init|=
name|TableCollectors
operator|.
name|toTable
argument_list|(
name|Cell
operator|::
name|getRowKey
argument_list|,
name|Cell
operator|::
name|getColumnKey
argument_list|,
name|Cell
operator|::
name|getValue
argument_list|,
parameter_list|(
name|Integer
name|v1
parameter_list|,
name|Integer
name|v2
parameter_list|)
lambda|->
literal|null
argument_list|,
name|HashBasedTable
operator|::
name|create
argument_list|)
decl_stmt|;
name|BiPredicate
argument_list|<
name|Table
argument_list|<
name|String
argument_list|,
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|,
name|Table
argument_list|<
name|String
argument_list|,
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|>
name|equivalence
init|=
name|pairwiseOnResultOf
argument_list|(
name|Table
operator|::
name|cellSet
argument_list|)
decl_stmt|;
name|CollectorTester
operator|.
name|of
argument_list|(
name|collector
argument_list|,
name|equivalence
argument_list|)
operator|.
name|expectCollects
argument_list|(
name|ImmutableTable
operator|.
name|of
argument_list|()
argument_list|,
name|immutableCell
argument_list|(
literal|"one"
argument_list|,
literal|"uno"
argument_list|,
literal|1
argument_list|)
argument_list|,
name|immutableCell
argument_list|(
literal|"one"
argument_list|,
literal|"uno"
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testToTableNullValues ()
specifier|public
name|void
name|testToTableNullValues
parameter_list|()
block|{
name|Collector
argument_list|<
name|Cell
argument_list|<
name|String
argument_list|,
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|,
name|?
argument_list|,
name|Table
argument_list|<
name|String
argument_list|,
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|>
name|collector
init|=
name|TableCollectors
operator|.
name|toTable
argument_list|(
name|Cell
operator|::
name|getRowKey
argument_list|,
name|Cell
operator|::
name|getColumnKey
argument_list|,
name|Cell
operator|::
name|getValue
argument_list|,
parameter_list|()
lambda|->
name|ArrayTable
operator|.
name|create
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"one"
argument_list|)
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"uno"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|Stream
operator|.
name|of
argument_list|(
name|immutableCell
argument_list|(
literal|"one"
argument_list|,
literal|"uno"
argument_list|,
operator|(
name|Integer
operator|)
literal|null
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|collector
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected NullPointerException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|expected
parameter_list|)
block|{       }
block|}
DECL|method|testToTableConflict ()
specifier|public
name|void
name|testToTableConflict
parameter_list|()
block|{
name|Collector
argument_list|<
name|Cell
argument_list|<
name|String
argument_list|,
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|,
name|?
argument_list|,
name|Table
argument_list|<
name|String
argument_list|,
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|>
name|collector
init|=
name|TableCollectors
operator|.
name|toTable
argument_list|(
name|Cell
operator|::
name|getRowKey
argument_list|,
name|Cell
operator|::
name|getColumnKey
argument_list|,
name|Cell
operator|::
name|getValue
argument_list|,
name|HashBasedTable
operator|::
name|create
argument_list|)
decl_stmt|;
try|try
block|{
name|Stream
operator|.
name|of
argument_list|(
name|immutableCell
argument_list|(
literal|"one"
argument_list|,
literal|"uno"
argument_list|,
literal|1
argument_list|)
argument_list|,
name|immutableCell
argument_list|(
literal|"one"
argument_list|,
literal|"uno"
argument_list|,
literal|2
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|collector
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected IllegalStateException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|expected
parameter_list|)
block|{       }
block|}
DECL|method|testToTableMerging ()
specifier|public
name|void
name|testToTableMerging
parameter_list|()
block|{
name|Collector
argument_list|<
name|Cell
argument_list|<
name|String
argument_list|,
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|,
name|?
argument_list|,
name|Table
argument_list|<
name|String
argument_list|,
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|>
name|collector
init|=
name|TableCollectors
operator|.
name|toTable
argument_list|(
name|Cell
operator|::
name|getRowKey
argument_list|,
name|Cell
operator|::
name|getColumnKey
argument_list|,
name|Cell
operator|::
name|getValue
argument_list|,
name|Integer
operator|::
name|sum
argument_list|,
name|HashBasedTable
operator|::
name|create
argument_list|)
decl_stmt|;
name|BiPredicate
argument_list|<
name|Table
argument_list|<
name|String
argument_list|,
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|,
name|Table
argument_list|<
name|String
argument_list|,
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|>
name|equivalence
init|=
name|pairwiseOnResultOf
argument_list|(
name|Table
operator|::
name|cellSet
argument_list|)
decl_stmt|;
name|CollectorTester
operator|.
name|of
argument_list|(
name|collector
argument_list|,
name|equivalence
argument_list|)
operator|.
name|expectCollects
argument_list|(
operator|new
name|ImmutableTable
operator|.
name|Builder
argument_list|<
name|String
argument_list|,
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|()
operator|.
name|put
argument_list|(
literal|"one"
argument_list|,
literal|"uno"
argument_list|,
literal|1
argument_list|)
operator|.
name|put
argument_list|(
literal|"two"
argument_list|,
literal|"dos"
argument_list|,
literal|6
argument_list|)
operator|.
name|put
argument_list|(
literal|"three"
argument_list|,
literal|"tres"
argument_list|,
literal|3
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
name|immutableCell
argument_list|(
literal|"one"
argument_list|,
literal|"uno"
argument_list|,
literal|1
argument_list|)
argument_list|,
name|immutableCell
argument_list|(
literal|"two"
argument_list|,
literal|"dos"
argument_list|,
literal|2
argument_list|)
argument_list|,
name|immutableCell
argument_list|(
literal|"three"
argument_list|,
literal|"tres"
argument_list|,
literal|3
argument_list|)
argument_list|,
name|immutableCell
argument_list|(
literal|"two"
argument_list|,
literal|"dos"
argument_list|,
literal|4
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// This function specifically returns a BiPredicate, because Guava7âs Equivalence class does not
comment|// actually implement BiPredicate, and CollectorTests expects a BiPredicate.
DECL|method|pairwiseOnResultOf (Function<C, R> arg)
specifier|static
parameter_list|<
name|C
parameter_list|,
name|E
parameter_list|,
name|R
extends|extends
name|Iterable
argument_list|<
name|E
argument_list|>
parameter_list|>
name|BiPredicate
argument_list|<
name|C
argument_list|,
name|C
argument_list|>
name|pairwiseOnResultOf
parameter_list|(
name|Function
argument_list|<
name|C
argument_list|,
name|R
argument_list|>
name|arg
parameter_list|)
block|{
name|Equivalence
argument_list|<
name|C
argument_list|>
name|equivalence
init|=
name|Equivalence
operator|.
name|equals
argument_list|()
operator|.
operator|<
name|E
operator|>
name|pairwise
argument_list|()
operator|.
name|onResultOf
argument_list|(
name|arg
argument_list|)
decl_stmt|;
return|return
name|equivalence
operator|::
name|equivalent
return|;
block|}
block|}
end_class

end_unit

