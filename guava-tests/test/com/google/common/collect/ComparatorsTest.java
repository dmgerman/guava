begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2016 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.collect
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
package|;
end_package

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Arrays
operator|.
name|asList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|Helpers
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|testing
operator|.
name|EqualsTester
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_comment
comment|/**  * Tests for {@code Comparators}.  *  * @author Louis Wasserman  */
end_comment

begin_class
DECL|class|ComparatorsTest
specifier|public
class|class
name|ComparatorsTest
extends|extends
name|TestCase
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// dang varargs
DECL|method|testLexicographical ()
specifier|public
name|void
name|testLexicographical
parameter_list|()
block|{
name|Comparator
argument_list|<
name|String
argument_list|>
name|comparator
init|=
name|Ordering
operator|.
name|natural
argument_list|()
decl_stmt|;
name|Comparator
argument_list|<
name|Iterable
argument_list|<
name|String
argument_list|>
argument_list|>
name|lexy
init|=
name|Comparators
operator|.
name|lexicographical
argument_list|(
name|comparator
argument_list|)
decl_stmt|;
name|ImmutableList
argument_list|<
name|String
argument_list|>
name|empty
init|=
name|ImmutableList
operator|.
name|of
argument_list|()
decl_stmt|;
name|ImmutableList
argument_list|<
name|String
argument_list|>
name|a
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"a"
argument_list|)
decl_stmt|;
name|ImmutableList
argument_list|<
name|String
argument_list|>
name|aa
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"a"
argument_list|,
literal|"a"
argument_list|)
decl_stmt|;
name|ImmutableList
argument_list|<
name|String
argument_list|>
name|ab
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
decl_stmt|;
name|ImmutableList
argument_list|<
name|String
argument_list|>
name|b
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"b"
argument_list|)
decl_stmt|;
name|Helpers
operator|.
name|testComparator
argument_list|(
name|lexy
argument_list|,
name|empty
argument_list|,
name|a
argument_list|,
name|aa
argument_list|,
name|ab
argument_list|,
name|b
argument_list|)
expr_stmt|;
operator|new
name|EqualsTester
argument_list|()
operator|.
name|addEqualityGroup
argument_list|(
name|lexy
argument_list|,
name|Comparators
operator|.
name|lexicographical
argument_list|(
name|comparator
argument_list|)
argument_list|)
operator|.
name|addEqualityGroup
argument_list|(
name|Comparators
operator|.
name|lexicographical
argument_list|(
name|String
operator|.
name|CASE_INSENSITIVE_ORDER
argument_list|)
argument_list|)
operator|.
name|addEqualityGroup
argument_list|(
name|Ordering
operator|.
name|natural
argument_list|()
argument_list|)
operator|.
name|testEquals
argument_list|()
expr_stmt|;
block|}
DECL|method|testIsInOrder ()
specifier|public
name|void
name|testIsInOrder
parameter_list|()
block|{
name|assertFalse
argument_list|(
name|Comparators
operator|.
name|isInOrder
argument_list|(
name|asList
argument_list|(
literal|5
argument_list|,
literal|3
argument_list|,
literal|0
argument_list|,
literal|9
argument_list|)
argument_list|,
name|Ordering
operator|.
name|natural
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|Comparators
operator|.
name|isInOrder
argument_list|(
name|asList
argument_list|(
literal|0
argument_list|,
literal|5
argument_list|,
literal|3
argument_list|,
literal|9
argument_list|)
argument_list|,
name|Ordering
operator|.
name|natural
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Comparators
operator|.
name|isInOrder
argument_list|(
name|asList
argument_list|(
literal|0
argument_list|,
literal|3
argument_list|,
literal|5
argument_list|,
literal|9
argument_list|)
argument_list|,
name|Ordering
operator|.
name|natural
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Comparators
operator|.
name|isInOrder
argument_list|(
name|asList
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|3
argument_list|,
literal|3
argument_list|)
argument_list|,
name|Ordering
operator|.
name|natural
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Comparators
operator|.
name|isInOrder
argument_list|(
name|asList
argument_list|(
literal|0
argument_list|,
literal|3
argument_list|)
argument_list|,
name|Ordering
operator|.
name|natural
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Comparators
operator|.
name|isInOrder
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
literal|1
argument_list|)
argument_list|,
name|Ordering
operator|.
name|natural
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Comparators
operator|.
name|isInOrder
argument_list|(
name|Collections
operator|.
expr|<
name|Integer
operator|>
name|emptyList
argument_list|()
argument_list|,
name|Ordering
operator|.
name|natural
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testIsInStrictOrder ()
specifier|public
name|void
name|testIsInStrictOrder
parameter_list|()
block|{
name|assertFalse
argument_list|(
name|Comparators
operator|.
name|isInStrictOrder
argument_list|(
name|asList
argument_list|(
literal|5
argument_list|,
literal|3
argument_list|,
literal|0
argument_list|,
literal|9
argument_list|)
argument_list|,
name|Ordering
operator|.
name|natural
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|Comparators
operator|.
name|isInStrictOrder
argument_list|(
name|asList
argument_list|(
literal|0
argument_list|,
literal|5
argument_list|,
literal|3
argument_list|,
literal|9
argument_list|)
argument_list|,
name|Ordering
operator|.
name|natural
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Comparators
operator|.
name|isInStrictOrder
argument_list|(
name|asList
argument_list|(
literal|0
argument_list|,
literal|3
argument_list|,
literal|5
argument_list|,
literal|9
argument_list|)
argument_list|,
name|Ordering
operator|.
name|natural
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|Comparators
operator|.
name|isInStrictOrder
argument_list|(
name|asList
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|3
argument_list|,
literal|3
argument_list|)
argument_list|,
name|Ordering
operator|.
name|natural
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Comparators
operator|.
name|isInStrictOrder
argument_list|(
name|asList
argument_list|(
literal|0
argument_list|,
literal|3
argument_list|)
argument_list|,
name|Ordering
operator|.
name|natural
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Comparators
operator|.
name|isInStrictOrder
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
literal|1
argument_list|)
argument_list|,
name|Ordering
operator|.
name|natural
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Comparators
operator|.
name|isInStrictOrder
argument_list|(
name|Collections
operator|.
expr|<
name|Integer
operator|>
name|emptyList
argument_list|()
argument_list|,
name|Ordering
operator|.
name|natural
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

