begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2009 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.collect
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|contrib
operator|.
name|truth
operator|.
name|Truth
operator|.
name|ASSERT
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtCompatible
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtIncompatible
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Joiner
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSortedMap
operator|.
name|Builder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|NavigableMapTestSuiteBuilder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|SortedMapInterfaceTest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|features
operator|.
name|CollectionFeature
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|features
operator|.
name|CollectionSize
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|features
operator|.
name|MapFeature
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|google
operator|.
name|SortedMapGenerators
operator|.
name|ImmutableSortedMapGenerator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|testing
operator|.
name|NullPointerTester
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|testing
operator|.
name|SerializableTester
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestSuite
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedMap
import|;
end_import

begin_comment
comment|/**  * Tests for {@link ImmutableSortedMap}.  *  * @author Kevin Bourrillion  * @author Jesse Wilson  * @author Jared Levy  */
end_comment

begin_class
annotation|@
name|GwtCompatible
argument_list|(
name|emulated
operator|=
literal|true
argument_list|)
DECL|class|ImmutableSortedMapTest
specifier|public
class|class
name|ImmutableSortedMapTest
extends|extends
name|TestCase
block|{
comment|// TODO: Avoid duplicating code in ImmutableMapTest
annotation|@
name|GwtIncompatible
argument_list|(
literal|"suite"
argument_list|)
DECL|method|suite ()
specifier|public
specifier|static
name|Test
name|suite
parameter_list|()
block|{
name|TestSuite
name|suite
init|=
operator|new
name|TestSuite
argument_list|()
decl_stmt|;
name|suite
operator|.
name|addTestSuite
argument_list|(
name|ImmutableSortedMapTest
operator|.
name|class
argument_list|)
expr_stmt|;
name|suite
operator|.
name|addTest
argument_list|(
name|NavigableMapTestSuiteBuilder
operator|.
name|using
argument_list|(
operator|new
name|ImmutableSortedMapGenerator
argument_list|()
argument_list|)
operator|.
name|withFeatures
argument_list|(
name|CollectionSize
operator|.
name|ANY
argument_list|,
name|CollectionFeature
operator|.
name|SERIALIZABLE_INCLUDING_VIEWS
argument_list|,
name|CollectionFeature
operator|.
name|KNOWN_ORDER
argument_list|,
name|MapFeature
operator|.
name|REJECTS_DUPLICATES_AT_CREATION
argument_list|,
name|MapFeature
operator|.
name|ALLOWS_NULL_QUERIES
argument_list|)
operator|.
name|named
argument_list|(
literal|"ImmutableSortedMap"
argument_list|)
operator|.
name|createTestSuite
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|suite
return|;
block|}
DECL|class|AbstractMapTests
specifier|public
specifier|abstract
specifier|static
class|class
name|AbstractMapTests
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
extends|extends
name|SortedMapInterfaceTest
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
block|{
DECL|method|AbstractMapTests ()
specifier|public
name|AbstractMapTests
parameter_list|()
block|{
name|super
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|makeEmptyMap ()
annotation|@
name|Override
specifier|protected
name|SortedMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|makeEmptyMap
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
DECL|field|joiner
specifier|private
specifier|static
specifier|final
name|Joiner
name|joiner
init|=
name|Joiner
operator|.
name|on
argument_list|(
literal|", "
argument_list|)
decl_stmt|;
DECL|method|assertMoreInvariants (Map<K, V> map)
annotation|@
name|Override
specifier|protected
name|void
name|assertMoreInvariants
parameter_list|(
name|Map
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|map
parameter_list|)
block|{
comment|// TODO: can these be moved to MapInterfaceTest?
for|for
control|(
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|entry
range|:
name|map
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|assertEquals
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
operator|+
literal|"="
operator|+
name|entry
operator|.
name|getValue
argument_list|()
argument_list|,
name|entry
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"{"
operator|+
name|joiner
operator|.
name|join
argument_list|(
name|map
operator|.
name|entrySet
argument_list|()
argument_list|)
operator|+
literal|"}"
argument_list|,
name|map
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"["
operator|+
name|joiner
operator|.
name|join
argument_list|(
name|map
operator|.
name|entrySet
argument_list|()
argument_list|)
operator|+
literal|"]"
argument_list|,
name|map
operator|.
name|entrySet
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"["
operator|+
name|joiner
operator|.
name|join
argument_list|(
name|map
operator|.
name|keySet
argument_list|()
argument_list|)
operator|+
literal|"]"
argument_list|,
name|map
operator|.
name|keySet
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"["
operator|+
name|joiner
operator|.
name|join
argument_list|(
name|map
operator|.
name|values
argument_list|()
argument_list|)
operator|+
literal|"]"
argument_list|,
name|map
operator|.
name|values
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Sets
operator|.
name|newHashSet
argument_list|(
name|map
operator|.
name|entrySet
argument_list|()
argument_list|)
argument_list|,
name|map
operator|.
name|entrySet
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Sets
operator|.
name|newHashSet
argument_list|(
name|map
operator|.
name|keySet
argument_list|()
argument_list|)
argument_list|,
name|map
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|MapTests
specifier|public
specifier|static
class|class
name|MapTests
extends|extends
name|AbstractMapTests
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
block|{
DECL|method|makeEmptyMap ()
annotation|@
name|Override
specifier|protected
name|SortedMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|makeEmptyMap
parameter_list|()
block|{
return|return
name|ImmutableSortedMap
operator|.
name|of
argument_list|()
return|;
block|}
DECL|method|makePopulatedMap ()
annotation|@
name|Override
specifier|protected
name|SortedMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|makePopulatedMap
parameter_list|()
block|{
return|return
name|ImmutableSortedMap
operator|.
name|of
argument_list|(
literal|"one"
argument_list|,
literal|1
argument_list|,
literal|"two"
argument_list|,
literal|2
argument_list|,
literal|"three"
argument_list|,
literal|3
argument_list|)
return|;
block|}
DECL|method|getKeyNotInPopulatedMap ()
annotation|@
name|Override
specifier|protected
name|String
name|getKeyNotInPopulatedMap
parameter_list|()
block|{
return|return
literal|"minus one"
return|;
block|}
DECL|method|getValueNotInPopulatedMap ()
annotation|@
name|Override
specifier|protected
name|Integer
name|getValueNotInPopulatedMap
parameter_list|()
block|{
return|return
operator|-
literal|1
return|;
block|}
block|}
DECL|class|SingletonMapTests
specifier|public
specifier|static
class|class
name|SingletonMapTests
extends|extends
name|AbstractMapTests
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
block|{
DECL|method|makePopulatedMap ()
annotation|@
name|Override
specifier|protected
name|SortedMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|makePopulatedMap
parameter_list|()
block|{
return|return
name|ImmutableSortedMap
operator|.
name|of
argument_list|(
literal|"one"
argument_list|,
literal|1
argument_list|)
return|;
block|}
DECL|method|getKeyNotInPopulatedMap ()
annotation|@
name|Override
specifier|protected
name|String
name|getKeyNotInPopulatedMap
parameter_list|()
block|{
return|return
literal|"minus one"
return|;
block|}
DECL|method|getValueNotInPopulatedMap ()
annotation|@
name|Override
specifier|protected
name|Integer
name|getValueNotInPopulatedMap
parameter_list|()
block|{
return|return
operator|-
literal|1
return|;
block|}
block|}
annotation|@
name|GwtIncompatible
argument_list|(
literal|"SerializableTester"
argument_list|)
DECL|class|ReserializedMapTests
specifier|public
specifier|static
class|class
name|ReserializedMapTests
extends|extends
name|AbstractMapTests
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
block|{
DECL|method|makePopulatedMap ()
annotation|@
name|Override
specifier|protected
name|SortedMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|makePopulatedMap
parameter_list|()
block|{
return|return
name|SerializableTester
operator|.
name|reserialize
argument_list|(
name|ImmutableSortedMap
operator|.
name|of
argument_list|(
literal|"one"
argument_list|,
literal|1
argument_list|,
literal|"two"
argument_list|,
literal|2
argument_list|,
literal|"three"
argument_list|,
literal|3
argument_list|)
argument_list|)
return|;
block|}
DECL|method|getKeyNotInPopulatedMap ()
annotation|@
name|Override
specifier|protected
name|String
name|getKeyNotInPopulatedMap
parameter_list|()
block|{
return|return
literal|"minus one"
return|;
block|}
DECL|method|getValueNotInPopulatedMap ()
annotation|@
name|Override
specifier|protected
name|Integer
name|getValueNotInPopulatedMap
parameter_list|()
block|{
return|return
operator|-
literal|1
return|;
block|}
block|}
DECL|class|HeadMapTests
specifier|public
specifier|static
class|class
name|HeadMapTests
extends|extends
name|AbstractMapTests
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
block|{
DECL|method|makePopulatedMap ()
annotation|@
name|Override
specifier|protected
name|SortedMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|makePopulatedMap
parameter_list|()
block|{
return|return
name|ImmutableSortedMap
operator|.
name|of
argument_list|(
literal|"a"
argument_list|,
literal|1
argument_list|,
literal|"b"
argument_list|,
literal|2
argument_list|,
literal|"c"
argument_list|,
literal|3
argument_list|,
literal|"d"
argument_list|,
literal|4
argument_list|,
literal|"e"
argument_list|,
literal|5
argument_list|)
operator|.
name|headMap
argument_list|(
literal|"d"
argument_list|)
return|;
block|}
DECL|method|getKeyNotInPopulatedMap ()
annotation|@
name|Override
specifier|protected
name|String
name|getKeyNotInPopulatedMap
parameter_list|()
block|{
return|return
literal|"d"
return|;
block|}
DECL|method|getValueNotInPopulatedMap ()
annotation|@
name|Override
specifier|protected
name|Integer
name|getValueNotInPopulatedMap
parameter_list|()
block|{
return|return
literal|4
return|;
block|}
block|}
DECL|class|HeadMapInclusiveTests
specifier|public
specifier|static
class|class
name|HeadMapInclusiveTests
extends|extends
name|AbstractMapTests
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
block|{
DECL|method|makePopulatedMap ()
annotation|@
name|Override
specifier|protected
name|SortedMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|makePopulatedMap
parameter_list|()
block|{
return|return
name|ImmutableSortedMap
operator|.
name|of
argument_list|(
literal|"a"
argument_list|,
literal|1
argument_list|,
literal|"b"
argument_list|,
literal|2
argument_list|,
literal|"c"
argument_list|,
literal|3
argument_list|,
literal|"d"
argument_list|,
literal|4
argument_list|,
literal|"e"
argument_list|,
literal|5
argument_list|)
operator|.
name|headMap
argument_list|(
literal|"c"
argument_list|,
literal|true
argument_list|)
return|;
block|}
DECL|method|getKeyNotInPopulatedMap ()
annotation|@
name|Override
specifier|protected
name|String
name|getKeyNotInPopulatedMap
parameter_list|()
block|{
return|return
literal|"d"
return|;
block|}
DECL|method|getValueNotInPopulatedMap ()
annotation|@
name|Override
specifier|protected
name|Integer
name|getValueNotInPopulatedMap
parameter_list|()
block|{
return|return
literal|4
return|;
block|}
block|}
DECL|class|TailMapTests
specifier|public
specifier|static
class|class
name|TailMapTests
extends|extends
name|AbstractMapTests
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
block|{
DECL|method|makePopulatedMap ()
annotation|@
name|Override
specifier|protected
name|SortedMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|makePopulatedMap
parameter_list|()
block|{
return|return
name|ImmutableSortedMap
operator|.
name|of
argument_list|(
literal|"a"
argument_list|,
literal|1
argument_list|,
literal|"b"
argument_list|,
literal|2
argument_list|,
literal|"c"
argument_list|,
literal|3
argument_list|,
literal|"d"
argument_list|,
literal|4
argument_list|,
literal|"e"
argument_list|,
literal|5
argument_list|)
operator|.
name|tailMap
argument_list|(
literal|"b"
argument_list|)
return|;
block|}
DECL|method|getKeyNotInPopulatedMap ()
annotation|@
name|Override
specifier|protected
name|String
name|getKeyNotInPopulatedMap
parameter_list|()
block|{
return|return
literal|"a"
return|;
block|}
DECL|method|getValueNotInPopulatedMap ()
annotation|@
name|Override
specifier|protected
name|Integer
name|getValueNotInPopulatedMap
parameter_list|()
block|{
return|return
literal|1
return|;
block|}
block|}
DECL|class|TailExclusiveMapTests
specifier|public
specifier|static
class|class
name|TailExclusiveMapTests
extends|extends
name|AbstractMapTests
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
block|{
DECL|method|makePopulatedMap ()
annotation|@
name|Override
specifier|protected
name|SortedMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|makePopulatedMap
parameter_list|()
block|{
return|return
name|ImmutableSortedMap
operator|.
name|of
argument_list|(
literal|"a"
argument_list|,
literal|1
argument_list|,
literal|"b"
argument_list|,
literal|2
argument_list|,
literal|"c"
argument_list|,
literal|3
argument_list|,
literal|"d"
argument_list|,
literal|4
argument_list|,
literal|"e"
argument_list|,
literal|5
argument_list|)
operator|.
name|tailMap
argument_list|(
literal|"a"
argument_list|,
literal|false
argument_list|)
return|;
block|}
DECL|method|getKeyNotInPopulatedMap ()
annotation|@
name|Override
specifier|protected
name|String
name|getKeyNotInPopulatedMap
parameter_list|()
block|{
return|return
literal|"a"
return|;
block|}
DECL|method|getValueNotInPopulatedMap ()
annotation|@
name|Override
specifier|protected
name|Integer
name|getValueNotInPopulatedMap
parameter_list|()
block|{
return|return
literal|1
return|;
block|}
block|}
DECL|class|SubMapTests
specifier|public
specifier|static
class|class
name|SubMapTests
extends|extends
name|AbstractMapTests
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
block|{
DECL|method|makePopulatedMap ()
annotation|@
name|Override
specifier|protected
name|SortedMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|makePopulatedMap
parameter_list|()
block|{
return|return
name|ImmutableSortedMap
operator|.
name|of
argument_list|(
literal|"a"
argument_list|,
literal|1
argument_list|,
literal|"b"
argument_list|,
literal|2
argument_list|,
literal|"c"
argument_list|,
literal|3
argument_list|,
literal|"d"
argument_list|,
literal|4
argument_list|,
literal|"e"
argument_list|,
literal|5
argument_list|)
operator|.
name|subMap
argument_list|(
literal|"b"
argument_list|,
literal|"d"
argument_list|)
return|;
block|}
DECL|method|getKeyNotInPopulatedMap ()
annotation|@
name|Override
specifier|protected
name|String
name|getKeyNotInPopulatedMap
parameter_list|()
block|{
return|return
literal|"a"
return|;
block|}
DECL|method|getValueNotInPopulatedMap ()
annotation|@
name|Override
specifier|protected
name|Integer
name|getValueNotInPopulatedMap
parameter_list|()
block|{
return|return
literal|4
return|;
block|}
block|}
DECL|class|CreationTests
specifier|public
specifier|static
class|class
name|CreationTests
extends|extends
name|TestCase
block|{
DECL|method|testEmptyBuilder ()
specifier|public
name|void
name|testEmptyBuilder
parameter_list|()
block|{
name|ImmutableSortedMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|map
init|=
name|ImmutableSortedMap
operator|.
expr|<
name|String
decl_stmt|,
name|Integer
decl|>
name|naturalOrder
argument_list|()
decl|.
name|build
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
expr|<
name|String
argument_list|,
name|Integer
operator|>
name|emptyMap
argument_list|()
argument_list|,
name|map
argument_list|)
expr_stmt|;
block|}
DECL|method|testSingletonBuilder ()
specifier|public
name|void
name|testSingletonBuilder
parameter_list|()
block|{
name|ImmutableSortedMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|map
init|=
name|ImmutableSortedMap
operator|.
expr|<
name|String
decl_stmt|,
name|Integer
decl|>
name|naturalOrder
argument_list|()
decl|.
name|put
argument_list|(
literal|"one"
argument_list|,
literal|1
argument_list|)
decl|.
name|build
argument_list|()
decl_stmt|;
name|assertMapEquals
argument_list|(
name|map
argument_list|,
literal|"one"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
DECL|method|testBuilder ()
specifier|public
name|void
name|testBuilder
parameter_list|()
block|{
name|ImmutableSortedMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|map
init|=
name|ImmutableSortedMap
operator|.
expr|<
name|String
decl_stmt|,
name|Integer
decl|>
name|naturalOrder
argument_list|()
decl|.
name|put
argument_list|(
literal|"one"
argument_list|,
literal|1
argument_list|)
decl|.
name|put
argument_list|(
literal|"two"
argument_list|,
literal|2
argument_list|)
decl|.
name|put
argument_list|(
literal|"three"
argument_list|,
literal|3
argument_list|)
decl|.
name|put
argument_list|(
literal|"four"
argument_list|,
literal|4
argument_list|)
decl|.
name|put
argument_list|(
literal|"five"
argument_list|,
literal|5
argument_list|)
decl|.
name|build
argument_list|()
decl_stmt|;
name|assertMapEquals
argument_list|(
name|map
argument_list|,
literal|"five"
argument_list|,
literal|5
argument_list|,
literal|"four"
argument_list|,
literal|4
argument_list|,
literal|"one"
argument_list|,
literal|1
argument_list|,
literal|"three"
argument_list|,
literal|3
argument_list|,
literal|"two"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
DECL|method|testBuilder_withImmutableEntry ()
specifier|public
name|void
name|testBuilder_withImmutableEntry
parameter_list|()
block|{
name|ImmutableSortedMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|map
init|=
name|ImmutableSortedMap
operator|.
expr|<
name|String
decl_stmt|,
name|Integer
decl|>
name|naturalOrder
argument_list|()
decl|.
name|put
argument_list|(
name|Maps
operator|.
name|immutableEntry
argument_list|(
literal|"one"
argument_list|,
literal|1
argument_list|)
argument_list|)
decl|.
name|build
argument_list|()
decl_stmt|;
name|assertMapEquals
argument_list|(
name|map
argument_list|,
literal|"one"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
DECL|method|testBuilder_withImmutableEntryAndNullContents ()
specifier|public
name|void
name|testBuilder_withImmutableEntryAndNullContents
parameter_list|()
block|{
name|Builder
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|builder
init|=
name|ImmutableSortedMap
operator|.
name|naturalOrder
argument_list|()
decl_stmt|;
try|try
block|{
name|builder
operator|.
name|put
argument_list|(
name|Maps
operator|.
name|immutableEntry
argument_list|(
literal|"one"
argument_list|,
operator|(
name|Integer
operator|)
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|expected
parameter_list|)
block|{       }
try|try
block|{
name|builder
operator|.
name|put
argument_list|(
name|Maps
operator|.
name|immutableEntry
argument_list|(
operator|(
name|String
operator|)
literal|null
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|expected
parameter_list|)
block|{       }
block|}
DECL|class|StringHolder
specifier|private
specifier|static
class|class
name|StringHolder
block|{
DECL|field|string
name|String
name|string
decl_stmt|;
block|}
DECL|method|testBuilder_withMutableEntry ()
specifier|public
name|void
name|testBuilder_withMutableEntry
parameter_list|()
block|{
name|ImmutableSortedMap
operator|.
name|Builder
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|builder
init|=
name|ImmutableSortedMap
operator|.
name|naturalOrder
argument_list|()
decl_stmt|;
specifier|final
name|StringHolder
name|holder
init|=
operator|new
name|StringHolder
argument_list|()
decl_stmt|;
name|holder
operator|.
name|string
operator|=
literal|"one"
expr_stmt|;
name|Entry
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|entry
init|=
operator|new
name|AbstractMapEntry
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|getKey
parameter_list|()
block|{
return|return
name|holder
operator|.
name|string
return|;
block|}
annotation|@
name|Override
specifier|public
name|Integer
name|getValue
parameter_list|()
block|{
return|return
literal|1
return|;
block|}
block|}
decl_stmt|;
name|builder
operator|.
name|put
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|holder
operator|.
name|string
operator|=
literal|"two"
expr_stmt|;
name|assertMapEquals
argument_list|(
name|builder
operator|.
name|build
argument_list|()
argument_list|,
literal|"one"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
DECL|method|testBuilderPutAllWithEmptyMap ()
specifier|public
name|void
name|testBuilderPutAllWithEmptyMap
parameter_list|()
block|{
name|ImmutableSortedMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|map
init|=
name|ImmutableSortedMap
operator|.
expr|<
name|String
decl_stmt|,
name|Integer
decl|>
name|naturalOrder
argument_list|()
decl|.
name|putAll
argument_list|(
name|Collections
operator|.
expr|<
name|String
argument_list|,
name|Integer
operator|>
name|emptyMap
argument_list|()
argument_list|)
decl|.
name|build
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
expr|<
name|String
argument_list|,
name|Integer
operator|>
name|emptyMap
argument_list|()
argument_list|,
name|map
argument_list|)
expr_stmt|;
block|}
DECL|method|testBuilderPutAll ()
specifier|public
name|void
name|testBuilderPutAll
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|toPut
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
name|toPut
operator|.
name|put
argument_list|(
literal|"one"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|toPut
operator|.
name|put
argument_list|(
literal|"two"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|toPut
operator|.
name|put
argument_list|(
literal|"three"
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|moreToPut
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
name|moreToPut
operator|.
name|put
argument_list|(
literal|"four"
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|moreToPut
operator|.
name|put
argument_list|(
literal|"five"
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|ImmutableSortedMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|map
init|=
name|ImmutableSortedMap
operator|.
expr|<
name|String
decl_stmt|,
name|Integer
decl|>
name|naturalOrder
argument_list|()
decl|.
name|putAll
argument_list|(
name|toPut
argument_list|)
decl|.
name|putAll
argument_list|(
name|moreToPut
argument_list|)
decl|.
name|build
argument_list|()
decl_stmt|;
name|assertMapEquals
argument_list|(
name|map
argument_list|,
literal|"five"
argument_list|,
literal|5
argument_list|,
literal|"four"
argument_list|,
literal|4
argument_list|,
literal|"one"
argument_list|,
literal|1
argument_list|,
literal|"three"
argument_list|,
literal|3
argument_list|,
literal|"two"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
DECL|method|testBuilderReuse ()
specifier|public
name|void
name|testBuilderReuse
parameter_list|()
block|{
name|Builder
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|builder
init|=
name|ImmutableSortedMap
operator|.
name|naturalOrder
argument_list|()
decl_stmt|;
name|ImmutableSortedMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|mapOne
init|=
name|builder
operator|.
name|put
argument_list|(
literal|"one"
argument_list|,
literal|1
argument_list|)
operator|.
name|put
argument_list|(
literal|"two"
argument_list|,
literal|2
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|ImmutableSortedMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|mapTwo
init|=
name|builder
operator|.
name|put
argument_list|(
literal|"three"
argument_list|,
literal|3
argument_list|)
operator|.
name|put
argument_list|(
literal|"four"
argument_list|,
literal|4
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertMapEquals
argument_list|(
name|mapOne
argument_list|,
literal|"one"
argument_list|,
literal|1
argument_list|,
literal|"two"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertMapEquals
argument_list|(
name|mapTwo
argument_list|,
literal|"four"
argument_list|,
literal|4
argument_list|,
literal|"one"
argument_list|,
literal|1
argument_list|,
literal|"three"
argument_list|,
literal|3
argument_list|,
literal|"two"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
DECL|method|testBuilderPutNullKey ()
specifier|public
name|void
name|testBuilderPutNullKey
parameter_list|()
block|{
name|Builder
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|builder
init|=
name|ImmutableSortedMap
operator|.
name|naturalOrder
argument_list|()
decl_stmt|;
try|try
block|{
name|builder
operator|.
name|put
argument_list|(
literal|null
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|expected
parameter_list|)
block|{       }
block|}
DECL|method|testBuilderPutNullValue ()
specifier|public
name|void
name|testBuilderPutNullValue
parameter_list|()
block|{
name|Builder
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|builder
init|=
name|ImmutableSortedMap
operator|.
name|naturalOrder
argument_list|()
decl_stmt|;
try|try
block|{
name|builder
operator|.
name|put
argument_list|(
literal|"one"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|expected
parameter_list|)
block|{       }
block|}
DECL|method|testBuilderPutNullKeyViaPutAll ()
specifier|public
name|void
name|testBuilderPutNullKeyViaPutAll
parameter_list|()
block|{
name|Builder
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|builder
init|=
name|ImmutableSortedMap
operator|.
name|naturalOrder
argument_list|()
decl_stmt|;
try|try
block|{
name|builder
operator|.
name|putAll
argument_list|(
name|Collections
operator|.
expr|<
name|String
argument_list|,
name|Integer
operator|>
name|singletonMap
argument_list|(
literal|null
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|expected
parameter_list|)
block|{       }
block|}
DECL|method|testBuilderPutNullValueViaPutAll ()
specifier|public
name|void
name|testBuilderPutNullValueViaPutAll
parameter_list|()
block|{
name|Builder
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|builder
init|=
name|ImmutableSortedMap
operator|.
name|naturalOrder
argument_list|()
decl_stmt|;
try|try
block|{
name|builder
operator|.
name|putAll
argument_list|(
name|Collections
operator|.
expr|<
name|String
argument_list|,
name|Integer
operator|>
name|singletonMap
argument_list|(
literal|"one"
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|expected
parameter_list|)
block|{       }
block|}
DECL|method|testPuttingTheSameKeyTwiceThrowsOnBuild ()
specifier|public
name|void
name|testPuttingTheSameKeyTwiceThrowsOnBuild
parameter_list|()
block|{
name|Builder
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|builder
init|=
name|ImmutableSortedMap
operator|.
expr|<
name|String
decl_stmt|,
name|Integer
decl|>
name|naturalOrder
argument_list|()
decl|.
name|put
argument_list|(
literal|"one"
argument_list|,
literal|1
argument_list|)
decl|.
name|put
argument_list|(
literal|"one"
argument_list|,
literal|2
argument_list|)
decl_stmt|;
comment|// throwing on this line would be even better
try|try
block|{
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"Duplicate keys in mappings one=1 and one=2"
argument_list|,
name|expected
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testOf ()
specifier|public
name|void
name|testOf
parameter_list|()
block|{
name|assertMapEquals
argument_list|(
name|ImmutableSortedMap
operator|.
name|of
argument_list|(
literal|"one"
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|"one"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertMapEquals
argument_list|(
name|ImmutableSortedMap
operator|.
name|of
argument_list|(
literal|"one"
argument_list|,
literal|1
argument_list|,
literal|"two"
argument_list|,
literal|2
argument_list|)
argument_list|,
literal|"one"
argument_list|,
literal|1
argument_list|,
literal|"two"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertMapEquals
argument_list|(
name|ImmutableSortedMap
operator|.
name|of
argument_list|(
literal|"one"
argument_list|,
literal|1
argument_list|,
literal|"two"
argument_list|,
literal|2
argument_list|,
literal|"three"
argument_list|,
literal|3
argument_list|)
argument_list|,
literal|"one"
argument_list|,
literal|1
argument_list|,
literal|"three"
argument_list|,
literal|3
argument_list|,
literal|"two"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertMapEquals
argument_list|(
name|ImmutableSortedMap
operator|.
name|of
argument_list|(
literal|"one"
argument_list|,
literal|1
argument_list|,
literal|"two"
argument_list|,
literal|2
argument_list|,
literal|"three"
argument_list|,
literal|3
argument_list|,
literal|"four"
argument_list|,
literal|4
argument_list|)
argument_list|,
literal|"four"
argument_list|,
literal|4
argument_list|,
literal|"one"
argument_list|,
literal|1
argument_list|,
literal|"three"
argument_list|,
literal|3
argument_list|,
literal|"two"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertMapEquals
argument_list|(
name|ImmutableSortedMap
operator|.
name|of
argument_list|(
literal|"one"
argument_list|,
literal|1
argument_list|,
literal|"two"
argument_list|,
literal|2
argument_list|,
literal|"three"
argument_list|,
literal|3
argument_list|,
literal|"four"
argument_list|,
literal|4
argument_list|,
literal|"five"
argument_list|,
literal|5
argument_list|)
argument_list|,
literal|"five"
argument_list|,
literal|5
argument_list|,
literal|"four"
argument_list|,
literal|4
argument_list|,
literal|"one"
argument_list|,
literal|1
argument_list|,
literal|"three"
argument_list|,
literal|3
argument_list|,
literal|"two"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
DECL|method|testOfNullKey ()
specifier|public
name|void
name|testOfNullKey
parameter_list|()
block|{
name|Integer
name|n
init|=
literal|null
decl_stmt|;
try|try
block|{
name|ImmutableSortedMap
operator|.
name|of
argument_list|(
name|n
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|expected
parameter_list|)
block|{       }
try|try
block|{
name|ImmutableSortedMap
operator|.
name|of
argument_list|(
literal|"one"
argument_list|,
literal|1
argument_list|,
literal|null
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|expected
parameter_list|)
block|{       }
block|}
DECL|method|testOfNullValue ()
specifier|public
name|void
name|testOfNullValue
parameter_list|()
block|{
try|try
block|{
name|ImmutableSortedMap
operator|.
name|of
argument_list|(
literal|"one"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|expected
parameter_list|)
block|{       }
try|try
block|{
name|ImmutableSortedMap
operator|.
name|of
argument_list|(
literal|"one"
argument_list|,
literal|1
argument_list|,
literal|"two"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|expected
parameter_list|)
block|{       }
block|}
DECL|method|testOfWithDuplicateKey ()
specifier|public
name|void
name|testOfWithDuplicateKey
parameter_list|()
block|{
try|try
block|{
name|ImmutableSortedMap
operator|.
name|of
argument_list|(
literal|"one"
argument_list|,
literal|1
argument_list|,
literal|"one"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"Duplicate keys in mappings one=1 and one=1"
argument_list|,
name|expected
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testCopyOfEmptyMap ()
specifier|public
name|void
name|testCopyOfEmptyMap
parameter_list|()
block|{
name|ImmutableSortedMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|copy
init|=
name|ImmutableSortedMap
operator|.
name|copyOf
argument_list|(
name|Collections
operator|.
expr|<
name|String
argument_list|,
name|Integer
operator|>
name|emptyMap
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
expr|<
name|String
argument_list|,
name|Integer
operator|>
name|emptyMap
argument_list|()
argument_list|,
name|copy
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|copy
argument_list|,
name|ImmutableSortedMap
operator|.
name|copyOf
argument_list|(
name|copy
argument_list|)
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|Ordering
operator|.
name|natural
argument_list|()
argument_list|,
name|copy
operator|.
name|comparator
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testCopyOfSingletonMap ()
specifier|public
name|void
name|testCopyOfSingletonMap
parameter_list|()
block|{
name|ImmutableSortedMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|copy
init|=
name|ImmutableSortedMap
operator|.
name|copyOf
argument_list|(
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"one"
argument_list|,
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|assertMapEquals
argument_list|(
name|copy
argument_list|,
literal|"one"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|copy
argument_list|,
name|ImmutableSortedMap
operator|.
name|copyOf
argument_list|(
name|copy
argument_list|)
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|Ordering
operator|.
name|natural
argument_list|()
argument_list|,
name|copy
operator|.
name|comparator
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testCopyOf ()
specifier|public
name|void
name|testCopyOf
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|original
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
name|original
operator|.
name|put
argument_list|(
literal|"one"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|original
operator|.
name|put
argument_list|(
literal|"two"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|original
operator|.
name|put
argument_list|(
literal|"three"
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|ImmutableSortedMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|copy
init|=
name|ImmutableSortedMap
operator|.
name|copyOf
argument_list|(
name|original
argument_list|)
decl_stmt|;
name|assertMapEquals
argument_list|(
name|copy
argument_list|,
literal|"one"
argument_list|,
literal|1
argument_list|,
literal|"three"
argument_list|,
literal|3
argument_list|,
literal|"two"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|copy
argument_list|,
name|ImmutableSortedMap
operator|.
name|copyOf
argument_list|(
name|copy
argument_list|)
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|Ordering
operator|.
name|natural
argument_list|()
argument_list|,
name|copy
operator|.
name|comparator
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testCopyOfExplicitComparator ()
specifier|public
name|void
name|testCopyOfExplicitComparator
parameter_list|()
block|{
name|Comparator
argument_list|<
name|String
argument_list|>
name|comparator
init|=
name|Ordering
operator|.
name|natural
argument_list|()
operator|.
name|reverse
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|original
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
name|original
operator|.
name|put
argument_list|(
literal|"one"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|original
operator|.
name|put
argument_list|(
literal|"two"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|original
operator|.
name|put
argument_list|(
literal|"three"
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|ImmutableSortedMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|copy
init|=
name|ImmutableSortedMap
operator|.
name|copyOf
argument_list|(
name|original
argument_list|,
name|comparator
argument_list|)
decl_stmt|;
name|assertMapEquals
argument_list|(
name|copy
argument_list|,
literal|"two"
argument_list|,
literal|2
argument_list|,
literal|"three"
argument_list|,
literal|3
argument_list|,
literal|"one"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|copy
argument_list|,
name|ImmutableSortedMap
operator|.
name|copyOf
argument_list|(
name|copy
argument_list|,
name|comparator
argument_list|)
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|comparator
argument_list|,
name|copy
operator|.
name|comparator
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testCopyOfImmutableSortedSetDifferentComparator ()
specifier|public
name|void
name|testCopyOfImmutableSortedSetDifferentComparator
parameter_list|()
block|{
name|Comparator
argument_list|<
name|String
argument_list|>
name|comparator
init|=
name|Ordering
operator|.
name|natural
argument_list|()
operator|.
name|reverse
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|original
init|=
name|ImmutableSortedMap
operator|.
name|of
argument_list|(
literal|"one"
argument_list|,
literal|1
argument_list|,
literal|"two"
argument_list|,
literal|2
argument_list|,
literal|"three"
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|ImmutableSortedMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|copy
init|=
name|ImmutableSortedMap
operator|.
name|copyOf
argument_list|(
name|original
argument_list|,
name|comparator
argument_list|)
decl_stmt|;
name|assertMapEquals
argument_list|(
name|copy
argument_list|,
literal|"two"
argument_list|,
literal|2
argument_list|,
literal|"three"
argument_list|,
literal|3
argument_list|,
literal|"one"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|copy
argument_list|,
name|ImmutableSortedMap
operator|.
name|copyOf
argument_list|(
name|copy
argument_list|,
name|comparator
argument_list|)
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|comparator
argument_list|,
name|copy
operator|.
name|comparator
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testCopyOfSortedNatural ()
specifier|public
name|void
name|testCopyOfSortedNatural
parameter_list|()
block|{
name|SortedMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|original
init|=
name|Maps
operator|.
name|newTreeMap
argument_list|()
decl_stmt|;
name|original
operator|.
name|put
argument_list|(
literal|"one"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|original
operator|.
name|put
argument_list|(
literal|"two"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|original
operator|.
name|put
argument_list|(
literal|"three"
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|ImmutableSortedMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|copy
init|=
name|ImmutableSortedMap
operator|.
name|copyOfSorted
argument_list|(
name|original
argument_list|)
decl_stmt|;
name|assertMapEquals
argument_list|(
name|copy
argument_list|,
literal|"one"
argument_list|,
literal|1
argument_list|,
literal|"three"
argument_list|,
literal|3
argument_list|,
literal|"two"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|copy
argument_list|,
name|ImmutableSortedMap
operator|.
name|copyOfSorted
argument_list|(
name|copy
argument_list|)
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|Ordering
operator|.
name|natural
argument_list|()
argument_list|,
name|copy
operator|.
name|comparator
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testCopyOfSortedExplicit ()
specifier|public
name|void
name|testCopyOfSortedExplicit
parameter_list|()
block|{
name|Comparator
argument_list|<
name|String
argument_list|>
name|comparator
init|=
name|Ordering
operator|.
name|natural
argument_list|()
operator|.
name|reverse
argument_list|()
decl_stmt|;
name|SortedMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|original
init|=
name|Maps
operator|.
name|newTreeMap
argument_list|(
name|comparator
argument_list|)
decl_stmt|;
name|original
operator|.
name|put
argument_list|(
literal|"one"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|original
operator|.
name|put
argument_list|(
literal|"two"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|original
operator|.
name|put
argument_list|(
literal|"three"
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|ImmutableSortedMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|copy
init|=
name|ImmutableSortedMap
operator|.
name|copyOfSorted
argument_list|(
name|original
argument_list|)
decl_stmt|;
name|assertMapEquals
argument_list|(
name|copy
argument_list|,
literal|"two"
argument_list|,
literal|2
argument_list|,
literal|"three"
argument_list|,
literal|3
argument_list|,
literal|"one"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|copy
argument_list|,
name|ImmutableSortedMap
operator|.
name|copyOfSorted
argument_list|(
name|copy
argument_list|)
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|comparator
argument_list|,
name|copy
operator|.
name|comparator
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|class|IntegerDiv10
specifier|private
specifier|static
class|class
name|IntegerDiv10
implements|implements
name|Comparable
argument_list|<
name|IntegerDiv10
argument_list|>
block|{
DECL|field|value
specifier|final
name|int
name|value
decl_stmt|;
DECL|method|IntegerDiv10 (int value)
name|IntegerDiv10
parameter_list|(
name|int
name|value
parameter_list|)
block|{
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|compareTo (IntegerDiv10 o)
specifier|public
name|int
name|compareTo
parameter_list|(
name|IntegerDiv10
name|o
parameter_list|)
block|{
return|return
name|value
operator|/
literal|10
operator|-
name|o
operator|.
name|value
operator|/
literal|10
return|;
block|}
DECL|method|toString ()
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|Integer
operator|.
name|toString
argument_list|(
name|value
argument_list|)
return|;
block|}
block|}
DECL|method|testCopyOfDuplicateKey ()
specifier|public
name|void
name|testCopyOfDuplicateKey
parameter_list|()
block|{
name|Map
argument_list|<
name|IntegerDiv10
argument_list|,
name|String
argument_list|>
name|original
init|=
name|ImmutableMap
operator|.
name|of
argument_list|(
operator|new
name|IntegerDiv10
argument_list|(
literal|3
argument_list|)
argument_list|,
literal|"three"
argument_list|,
operator|new
name|IntegerDiv10
argument_list|(
literal|20
argument_list|)
argument_list|,
literal|"twenty"
argument_list|,
operator|new
name|IntegerDiv10
argument_list|(
literal|11
argument_list|)
argument_list|,
literal|"eleven"
argument_list|,
operator|new
name|IntegerDiv10
argument_list|(
literal|35
argument_list|)
argument_list|,
literal|"thirty five"
argument_list|,
operator|new
name|IntegerDiv10
argument_list|(
literal|12
argument_list|)
argument_list|,
literal|"twelve"
argument_list|)
decl_stmt|;
try|try
block|{
name|ImmutableSortedMap
operator|.
name|copyOf
argument_list|(
name|original
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected IllegalArgumentException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"Duplicate keys in mappings 11=eleven and 12=twelve"
argument_list|,
name|expected
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testImmutableMapCopyOfImmutableSortedMap ()
specifier|public
name|void
name|testImmutableMapCopyOfImmutableSortedMap
parameter_list|()
block|{
name|IntegerDiv10
name|three
init|=
operator|new
name|IntegerDiv10
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|IntegerDiv10
name|eleven
init|=
operator|new
name|IntegerDiv10
argument_list|(
literal|11
argument_list|)
decl_stmt|;
name|IntegerDiv10
name|twelve
init|=
operator|new
name|IntegerDiv10
argument_list|(
literal|12
argument_list|)
decl_stmt|;
name|IntegerDiv10
name|twenty
init|=
operator|new
name|IntegerDiv10
argument_list|(
literal|20
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|IntegerDiv10
argument_list|,
name|String
argument_list|>
name|original
init|=
name|ImmutableSortedMap
operator|.
name|of
argument_list|(
name|three
argument_list|,
literal|"three"
argument_list|,
name|eleven
argument_list|,
literal|"eleven"
argument_list|,
name|twenty
argument_list|,
literal|"twenty"
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|IntegerDiv10
argument_list|,
name|String
argument_list|>
name|copy
init|=
name|ImmutableMap
operator|.
name|copyOf
argument_list|(
name|original
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|original
operator|.
name|containsKey
argument_list|(
name|twelve
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|copy
operator|.
name|containsKey
argument_list|(
name|twelve
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testBuilderReverseOrder ()
specifier|public
name|void
name|testBuilderReverseOrder
parameter_list|()
block|{
name|ImmutableSortedMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|map
init|=
name|ImmutableSortedMap
operator|.
expr|<
name|String
decl_stmt|,
name|Integer
decl|>
name|reverseOrder
argument_list|()
decl|.
name|put
argument_list|(
literal|"one"
argument_list|,
literal|1
argument_list|)
decl|.
name|put
argument_list|(
literal|"two"
argument_list|,
literal|2
argument_list|)
decl|.
name|put
argument_list|(
literal|"three"
argument_list|,
literal|3
argument_list|)
decl|.
name|put
argument_list|(
literal|"four"
argument_list|,
literal|4
argument_list|)
decl|.
name|put
argument_list|(
literal|"five"
argument_list|,
literal|5
argument_list|)
decl|.
name|build
argument_list|()
decl_stmt|;
name|assertMapEquals
argument_list|(
name|map
argument_list|,
literal|"two"
argument_list|,
literal|2
argument_list|,
literal|"three"
argument_list|,
literal|3
argument_list|,
literal|"one"
argument_list|,
literal|1
argument_list|,
literal|"four"
argument_list|,
literal|4
argument_list|,
literal|"five"
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Ordering
operator|.
name|natural
argument_list|()
operator|.
name|reverse
argument_list|()
argument_list|,
name|map
operator|.
name|comparator
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testBuilderComparator ()
specifier|public
name|void
name|testBuilderComparator
parameter_list|()
block|{
name|Comparator
argument_list|<
name|String
argument_list|>
name|comparator
init|=
name|Ordering
operator|.
name|natural
argument_list|()
operator|.
name|reverse
argument_list|()
decl_stmt|;
name|ImmutableSortedMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|map
init|=
operator|new
name|ImmutableSortedMap
operator|.
name|Builder
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|(
name|comparator
argument_list|)
operator|.
name|put
argument_list|(
literal|"one"
argument_list|,
literal|1
argument_list|)
operator|.
name|put
argument_list|(
literal|"two"
argument_list|,
literal|2
argument_list|)
operator|.
name|put
argument_list|(
literal|"three"
argument_list|,
literal|3
argument_list|)
operator|.
name|put
argument_list|(
literal|"four"
argument_list|,
literal|4
argument_list|)
operator|.
name|put
argument_list|(
literal|"five"
argument_list|,
literal|5
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertMapEquals
argument_list|(
name|map
argument_list|,
literal|"two"
argument_list|,
literal|2
argument_list|,
literal|"three"
argument_list|,
literal|3
argument_list|,
literal|"one"
argument_list|,
literal|1
argument_list|,
literal|"four"
argument_list|,
literal|4
argument_list|,
literal|"five"
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|comparator
argument_list|,
name|map
operator|.
name|comparator
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testNullGet ()
specifier|public
name|void
name|testNullGet
parameter_list|()
block|{
name|ImmutableSortedMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|map
init|=
name|ImmutableSortedMap
operator|.
name|of
argument_list|(
literal|"one"
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|map
operator|.
name|get
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
argument_list|(
literal|"NullPointerTester"
argument_list|)
DECL|method|testNullPointers ()
specifier|public
name|void
name|testNullPointers
parameter_list|()
block|{
name|NullPointerTester
name|tester
init|=
operator|new
name|NullPointerTester
argument_list|()
decl_stmt|;
name|tester
operator|.
name|testAllPublicStaticMethods
argument_list|(
name|ImmutableSortedMap
operator|.
name|class
argument_list|)
expr_stmt|;
name|tester
operator|.
name|testAllPublicInstanceMethods
argument_list|(
name|ImmutableSortedMap
operator|.
expr|<
name|String
argument_list|,
name|Integer
operator|>
name|naturalOrder
argument_list|()
argument_list|)
expr_stmt|;
name|tester
operator|.
name|testAllPublicInstanceMethods
argument_list|(
name|ImmutableSortedMap
operator|.
name|of
argument_list|()
argument_list|)
expr_stmt|;
name|tester
operator|.
name|testAllPublicInstanceMethods
argument_list|(
name|ImmutableSortedMap
operator|.
name|of
argument_list|(
literal|"one"
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|tester
operator|.
name|testAllPublicInstanceMethods
argument_list|(
name|ImmutableSortedMap
operator|.
name|of
argument_list|(
literal|"one"
argument_list|,
literal|1
argument_list|,
literal|"two"
argument_list|,
literal|2
argument_list|,
literal|"three"
argument_list|,
literal|3
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|assertMapEquals (Map<K, V> map, Object... alternatingKeysAndValues)
specifier|private
specifier|static
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
name|void
name|assertMapEquals
parameter_list|(
name|Map
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|map
parameter_list|,
name|Object
modifier|...
name|alternatingKeysAndValues
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|map
operator|.
name|size
argument_list|()
argument_list|,
name|alternatingKeysAndValues
operator|.
name|length
operator|/
literal|2
argument_list|)
expr_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|entry
range|:
name|map
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|assertEquals
argument_list|(
name|alternatingKeysAndValues
index|[
name|i
operator|++
index|]
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|alternatingKeysAndValues
index|[
name|i
operator|++
index|]
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|IntHolder
specifier|private
specifier|static
class|class
name|IntHolder
implements|implements
name|Serializable
block|{
DECL|field|value
specifier|public
name|int
name|value
decl_stmt|;
DECL|method|IntHolder (int value)
specifier|public
name|IntHolder
parameter_list|(
name|int
name|value
parameter_list|)
block|{
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
block|}
DECL|method|equals (Object o)
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
return|return
operator|(
name|o
operator|instanceof
name|IntHolder
operator|)
operator|&&
operator|(
operator|(
name|IntHolder
operator|)
name|o
operator|)
operator|.
name|value
operator|==
name|value
return|;
block|}
DECL|method|hashCode ()
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|value
return|;
block|}
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|5
decl_stmt|;
block|}
DECL|method|testMutableValues ()
specifier|public
name|void
name|testMutableValues
parameter_list|()
block|{
name|IntHolder
name|holderA
init|=
operator|new
name|IntHolder
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|IntHolder
name|holderB
init|=
operator|new
name|IntHolder
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|IntHolder
argument_list|>
name|map
init|=
name|ImmutableSortedMap
operator|.
name|of
argument_list|(
literal|"a"
argument_list|,
name|holderA
argument_list|,
literal|"b"
argument_list|,
name|holderB
argument_list|)
decl_stmt|;
name|holderA
operator|.
name|value
operator|=
literal|3
expr_stmt|;
name|assertTrue
argument_list|(
name|map
operator|.
name|entrySet
argument_list|()
operator|.
name|contains
argument_list|(
name|Maps
operator|.
name|immutableEntry
argument_list|(
literal|"a"
argument_list|,
operator|new
name|IntHolder
argument_list|(
literal|3
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|intMap
init|=
name|ImmutableSortedMap
operator|.
name|of
argument_list|(
literal|"a"
argument_list|,
literal|3
argument_list|,
literal|"b"
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|intMap
operator|.
name|hashCode
argument_list|()
argument_list|,
name|map
operator|.
name|entrySet
argument_list|()
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|intMap
operator|.
name|hashCode
argument_list|()
argument_list|,
name|map
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
argument_list|(
literal|"SerializableTester"
argument_list|)
DECL|method|testViewSerialization ()
specifier|public
name|void
name|testViewSerialization
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|map
init|=
name|ImmutableSortedMap
operator|.
name|of
argument_list|(
literal|"one"
argument_list|,
literal|1
argument_list|,
literal|"two"
argument_list|,
literal|2
argument_list|,
literal|"three"
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|SerializableTester
operator|.
name|reserializeAndAssert
argument_list|(
name|map
operator|.
name|entrySet
argument_list|()
argument_list|)
expr_stmt|;
name|SerializableTester
operator|.
name|reserializeAndAssert
argument_list|(
name|map
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
name|map
operator|.
name|values
argument_list|()
argument_list|)
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
name|SerializableTester
operator|.
name|reserialize
argument_list|(
name|map
operator|.
name|values
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// varargs
DECL|method|testHeadMapInclusive ()
specifier|public
name|void
name|testHeadMapInclusive
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|map
init|=
name|ImmutableSortedMap
operator|.
name|of
argument_list|(
literal|"one"
argument_list|,
literal|1
argument_list|,
literal|"two"
argument_list|,
literal|2
argument_list|,
literal|"three"
argument_list|,
literal|3
argument_list|)
operator|.
name|headMap
argument_list|(
literal|"three"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|ASSERT
operator|.
name|that
argument_list|(
name|map
operator|.
name|entrySet
argument_list|()
argument_list|)
operator|.
name|hasContentsInOrder
argument_list|(
name|Maps
operator|.
name|immutableEntry
argument_list|(
literal|"one"
argument_list|,
literal|1
argument_list|)
argument_list|,
name|Maps
operator|.
name|immutableEntry
argument_list|(
literal|"three"
argument_list|,
literal|3
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// varargs
DECL|method|testHeadMapExclusive ()
specifier|public
name|void
name|testHeadMapExclusive
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|map
init|=
name|ImmutableSortedMap
operator|.
name|of
argument_list|(
literal|"one"
argument_list|,
literal|1
argument_list|,
literal|"two"
argument_list|,
literal|2
argument_list|,
literal|"three"
argument_list|,
literal|3
argument_list|)
operator|.
name|headMap
argument_list|(
literal|"three"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|ASSERT
operator|.
name|that
argument_list|(
name|map
operator|.
name|entrySet
argument_list|()
argument_list|)
operator|.
name|hasContentsInOrder
argument_list|(
name|Maps
operator|.
name|immutableEntry
argument_list|(
literal|"one"
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// varargs
DECL|method|testTailMapInclusive ()
specifier|public
name|void
name|testTailMapInclusive
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|map
init|=
name|ImmutableSortedMap
operator|.
name|of
argument_list|(
literal|"one"
argument_list|,
literal|1
argument_list|,
literal|"two"
argument_list|,
literal|2
argument_list|,
literal|"three"
argument_list|,
literal|3
argument_list|)
operator|.
name|tailMap
argument_list|(
literal|"three"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|ASSERT
operator|.
name|that
argument_list|(
name|map
operator|.
name|entrySet
argument_list|()
argument_list|)
operator|.
name|hasContentsInOrder
argument_list|(
name|Maps
operator|.
name|immutableEntry
argument_list|(
literal|"three"
argument_list|,
literal|3
argument_list|)
argument_list|,
name|Maps
operator|.
name|immutableEntry
argument_list|(
literal|"two"
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// varargs
DECL|method|testTailMapExclusive ()
specifier|public
name|void
name|testTailMapExclusive
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|map
init|=
name|ImmutableSortedMap
operator|.
name|of
argument_list|(
literal|"one"
argument_list|,
literal|1
argument_list|,
literal|"two"
argument_list|,
literal|2
argument_list|,
literal|"three"
argument_list|,
literal|3
argument_list|)
operator|.
name|tailMap
argument_list|(
literal|"three"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|ASSERT
operator|.
name|that
argument_list|(
name|map
operator|.
name|entrySet
argument_list|()
argument_list|)
operator|.
name|hasContentsInOrder
argument_list|(
name|Maps
operator|.
name|immutableEntry
argument_list|(
literal|"two"
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// varargs
DECL|method|testSubMapExclusiveExclusive ()
specifier|public
name|void
name|testSubMapExclusiveExclusive
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|map
init|=
name|ImmutableSortedMap
operator|.
name|of
argument_list|(
literal|"one"
argument_list|,
literal|1
argument_list|,
literal|"two"
argument_list|,
literal|2
argument_list|,
literal|"three"
argument_list|,
literal|3
argument_list|)
operator|.
name|subMap
argument_list|(
literal|"one"
argument_list|,
literal|false
argument_list|,
literal|"two"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|ASSERT
operator|.
name|that
argument_list|(
name|map
operator|.
name|entrySet
argument_list|()
argument_list|)
operator|.
name|hasContentsInOrder
argument_list|(
name|Maps
operator|.
name|immutableEntry
argument_list|(
literal|"three"
argument_list|,
literal|3
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// varargs
DECL|method|testSubMapInclusiveExclusive ()
specifier|public
name|void
name|testSubMapInclusiveExclusive
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|map
init|=
name|ImmutableSortedMap
operator|.
name|of
argument_list|(
literal|"one"
argument_list|,
literal|1
argument_list|,
literal|"two"
argument_list|,
literal|2
argument_list|,
literal|"three"
argument_list|,
literal|3
argument_list|)
operator|.
name|subMap
argument_list|(
literal|"one"
argument_list|,
literal|true
argument_list|,
literal|"two"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|ASSERT
operator|.
name|that
argument_list|(
name|map
operator|.
name|entrySet
argument_list|()
argument_list|)
operator|.
name|hasContentsInOrder
argument_list|(
name|Maps
operator|.
name|immutableEntry
argument_list|(
literal|"one"
argument_list|,
literal|1
argument_list|)
argument_list|,
name|Maps
operator|.
name|immutableEntry
argument_list|(
literal|"three"
argument_list|,
literal|3
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// varargs
DECL|method|testSubMapExclusiveInclusive ()
specifier|public
name|void
name|testSubMapExclusiveInclusive
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|map
init|=
name|ImmutableSortedMap
operator|.
name|of
argument_list|(
literal|"one"
argument_list|,
literal|1
argument_list|,
literal|"two"
argument_list|,
literal|2
argument_list|,
literal|"three"
argument_list|,
literal|3
argument_list|)
operator|.
name|subMap
argument_list|(
literal|"one"
argument_list|,
literal|false
argument_list|,
literal|"two"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|ASSERT
operator|.
name|that
argument_list|(
name|map
operator|.
name|entrySet
argument_list|()
argument_list|)
operator|.
name|hasContentsInOrder
argument_list|(
name|Maps
operator|.
name|immutableEntry
argument_list|(
literal|"three"
argument_list|,
literal|3
argument_list|)
argument_list|,
name|Maps
operator|.
name|immutableEntry
argument_list|(
literal|"two"
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// varargs
DECL|method|testSubMapInclusiveInclusive ()
specifier|public
name|void
name|testSubMapInclusiveInclusive
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|map
init|=
name|ImmutableSortedMap
operator|.
name|of
argument_list|(
literal|"one"
argument_list|,
literal|1
argument_list|,
literal|"two"
argument_list|,
literal|2
argument_list|,
literal|"three"
argument_list|,
literal|3
argument_list|)
operator|.
name|subMap
argument_list|(
literal|"one"
argument_list|,
literal|true
argument_list|,
literal|"two"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|ASSERT
operator|.
name|that
argument_list|(
name|map
operator|.
name|entrySet
argument_list|()
argument_list|)
operator|.
name|hasContentsInOrder
argument_list|(
name|Maps
operator|.
name|immutableEntry
argument_list|(
literal|"one"
argument_list|,
literal|1
argument_list|)
argument_list|,
name|Maps
operator|.
name|immutableEntry
argument_list|(
literal|"three"
argument_list|,
literal|3
argument_list|)
argument_list|,
name|Maps
operator|.
name|immutableEntry
argument_list|(
literal|"two"
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

