begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2007 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.collect
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertThat
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtCompatible
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtIncompatible
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|testing
operator|.
name|NullPointerTester
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Unit test for {@code ObjectArrays}.  *  * @author Kevin Bourrillion  */
end_comment

begin_class
annotation|@
name|GwtCompatible
argument_list|(
name|emulated
operator|=
literal|true
argument_list|)
DECL|class|ObjectArraysTest
specifier|public
class|class
name|ObjectArraysTest
extends|extends
name|TestCase
block|{
annotation|@
name|GwtIncompatible
argument_list|(
literal|"NullPointerTester"
argument_list|)
DECL|method|testNullPointerExceptions ()
specifier|public
name|void
name|testNullPointerExceptions
parameter_list|()
block|{
name|NullPointerTester
name|tester
init|=
operator|new
name|NullPointerTester
argument_list|()
decl_stmt|;
name|tester
operator|.
name|testAllPublicStaticMethods
argument_list|(
name|ObjectArrays
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
argument_list|(
literal|"ObjectArrays.newArray(Class, int)"
argument_list|)
DECL|method|testNewArray_fromClass_Empty ()
specifier|public
name|void
name|testNewArray_fromClass_Empty
parameter_list|()
block|{
name|String
index|[]
name|empty
init|=
name|ObjectArrays
operator|.
name|newArray
argument_list|(
name|String
operator|.
name|class
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|String
index|[]
operator|.
expr|class
argument_list|,
name|empty
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|empty
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
argument_list|(
literal|"ObjectArrays.newArray(Class, int)"
argument_list|)
DECL|method|testNewArray_fromClass_Nonempty ()
specifier|public
name|void
name|testNewArray_fromClass_Nonempty
parameter_list|()
block|{
name|String
index|[]
name|array
init|=
name|ObjectArrays
operator|.
name|newArray
argument_list|(
name|String
operator|.
name|class
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|String
index|[]
operator|.
expr|class
argument_list|,
name|array
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|array
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|array
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
argument_list|(
literal|"ObjectArrays.newArray(Class, int)"
argument_list|)
DECL|method|testNewArray_fromClass_OfArray ()
specifier|public
name|void
name|testNewArray_fromClass_OfArray
parameter_list|()
block|{
name|String
index|[]
index|[]
name|array
init|=
name|ObjectArrays
operator|.
name|newArray
argument_list|(
name|String
index|[]
operator|.
expr|class
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|String
index|[]
index|[]
operator|.
expr|class
argument_list|,
name|array
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|array
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|array
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
DECL|method|testNewArray_fromArray_Empty ()
specifier|public
name|void
name|testNewArray_fromArray_Empty
parameter_list|()
block|{
name|String
index|[]
name|in
init|=
operator|new
name|String
index|[
literal|0
index|]
decl_stmt|;
name|String
index|[]
name|empty
init|=
name|ObjectArrays
operator|.
name|newArray
argument_list|(
name|in
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|empty
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
DECL|method|testNewArray_fromArray_Nonempty ()
specifier|public
name|void
name|testNewArray_fromArray_Nonempty
parameter_list|()
block|{
name|String
index|[]
name|array
init|=
name|ObjectArrays
operator|.
name|newArray
argument_list|(
operator|new
name|String
index|[
literal|0
index|]
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|String
index|[]
operator|.
expr|class
argument_list|,
name|array
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|array
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|array
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
DECL|method|testNewArray_fromArray_OfArray ()
specifier|public
name|void
name|testNewArray_fromArray_OfArray
parameter_list|()
block|{
name|String
index|[]
index|[]
name|array
init|=
name|ObjectArrays
operator|.
name|newArray
argument_list|(
operator|new
name|String
index|[
literal|0
index|]
index|[
literal|0
index|]
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|String
index|[]
index|[]
operator|.
expr|class
argument_list|,
name|array
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|array
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|array
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
argument_list|(
literal|"ObjectArrays.concat(Object[], Object[], Class)"
argument_list|)
DECL|method|testConcatEmptyEmpty ()
specifier|public
name|void
name|testConcatEmptyEmpty
parameter_list|()
block|{
name|String
index|[]
name|result
init|=
name|ObjectArrays
operator|.
name|concat
argument_list|(
operator|new
name|String
index|[
literal|0
index|]
argument_list|,
operator|new
name|String
index|[
literal|0
index|]
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|String
index|[]
operator|.
expr|class
argument_list|,
name|result
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|result
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
argument_list|(
literal|"ObjectArrays.concat(Object[], Object[], Class)"
argument_list|)
DECL|method|testConcatEmptyNonempty ()
specifier|public
name|void
name|testConcatEmptyNonempty
parameter_list|()
block|{
name|String
index|[]
name|result
init|=
name|ObjectArrays
operator|.
name|concat
argument_list|(
operator|new
name|String
index|[
literal|0
index|]
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"a"
block|,
literal|"b"
block|}
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|String
index|[]
operator|.
expr|class
argument_list|,
name|result
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|result
argument_list|)
operator|.
name|asList
argument_list|()
operator|.
name|has
argument_list|()
operator|.
name|exactly
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
argument_list|(
literal|"ObjectArrays.concat(Object[], Object[], Class)"
argument_list|)
DECL|method|testConcatNonemptyEmpty ()
specifier|public
name|void
name|testConcatNonemptyEmpty
parameter_list|()
block|{
name|String
index|[]
name|result
init|=
name|ObjectArrays
operator|.
name|concat
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"a"
block|,
literal|"b"
block|}
argument_list|,
operator|new
name|String
index|[
literal|0
index|]
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|String
index|[]
operator|.
expr|class
argument_list|,
name|result
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|result
argument_list|)
operator|.
name|asList
argument_list|()
operator|.
name|has
argument_list|()
operator|.
name|exactly
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
argument_list|(
literal|"ObjectArrays.concat(Object[], Object[], Class)"
argument_list|)
DECL|method|testConcatBasic ()
specifier|public
name|void
name|testConcatBasic
parameter_list|()
block|{
name|String
index|[]
name|result
init|=
name|ObjectArrays
operator|.
name|concat
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"a"
block|,
literal|"b"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"c"
block|,
literal|"d"
block|}
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|String
index|[]
operator|.
expr|class
argument_list|,
name|result
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|result
argument_list|)
operator|.
name|asList
argument_list|()
operator|.
name|has
argument_list|()
operator|.
name|exactly
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|,
literal|"d"
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
block|}
annotation|@
name|GwtIncompatible
argument_list|(
literal|"ObjectArrays.concat(Object[], Object[], Class)"
argument_list|)
DECL|method|testConcatWithMoreGeneralType ()
specifier|public
name|void
name|testConcatWithMoreGeneralType
parameter_list|()
block|{
name|Serializable
index|[]
name|result
init|=
name|ObjectArrays
operator|.
name|concat
argument_list|(
operator|new
name|String
index|[
literal|0
index|]
argument_list|,
operator|new
name|String
index|[
literal|0
index|]
argument_list|,
name|Serializable
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Serializable
index|[]
operator|.
expr|class
argument_list|,
name|result
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testToArrayImpl1 ()
specifier|public
name|void
name|testToArrayImpl1
parameter_list|()
block|{
name|doTestToArrayImpl1
argument_list|(
name|Lists
operator|.
expr|<
name|Integer
operator|>
name|newArrayList
argument_list|()
argument_list|)
expr_stmt|;
name|doTestToArrayImpl1
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|doTestToArrayImpl1
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|1
argument_list|,
literal|null
argument_list|,
literal|3
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|doTestToArrayImpl1 (List<Integer> list)
specifier|private
name|void
name|doTestToArrayImpl1
parameter_list|(
name|List
argument_list|<
name|Integer
argument_list|>
name|list
parameter_list|)
block|{
name|Object
index|[]
name|reference
init|=
name|list
operator|.
name|toArray
argument_list|()
decl_stmt|;
name|Object
index|[]
name|target
init|=
name|ObjectArrays
operator|.
name|toArrayImpl
argument_list|(
name|list
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|reference
operator|.
name|getClass
argument_list|()
argument_list|,
name|target
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|reference
argument_list|,
name|target
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testToArrayImpl2 ()
specifier|public
name|void
name|testToArrayImpl2
parameter_list|()
block|{
name|doTestToArrayImpl2
argument_list|(
name|Lists
operator|.
expr|<
name|Integer
operator|>
name|newArrayList
argument_list|()
argument_list|,
operator|new
name|Integer
index|[
literal|0
index|]
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|doTestToArrayImpl2
argument_list|(
name|Lists
operator|.
expr|<
name|Integer
operator|>
name|newArrayList
argument_list|()
argument_list|,
operator|new
name|Integer
index|[
literal|1
index|]
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|doTestToArrayImpl2
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|1
argument_list|)
argument_list|,
operator|new
name|Integer
index|[
literal|0
index|]
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|doTestToArrayImpl2
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|1
argument_list|)
argument_list|,
operator|new
name|Integer
index|[
literal|1
index|]
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|doTestToArrayImpl2
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|1
argument_list|)
argument_list|,
operator|new
name|Integer
index|[]
block|{
literal|2
block|,
literal|3
block|}
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|doTestToArrayImpl2
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|1
argument_list|,
literal|null
argument_list|,
literal|3
argument_list|)
argument_list|,
operator|new
name|Integer
index|[
literal|0
index|]
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|doTestToArrayImpl2
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|1
argument_list|,
literal|null
argument_list|,
literal|3
argument_list|)
argument_list|,
operator|new
name|Integer
index|[
literal|2
index|]
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|doTestToArrayImpl2
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|1
argument_list|,
literal|null
argument_list|,
literal|3
argument_list|)
argument_list|,
operator|new
name|Integer
index|[
literal|3
index|]
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|doTestToArrayImpl2 (List<Integer> list, Integer[] array1, boolean expectModify)
specifier|private
name|void
name|doTestToArrayImpl2
parameter_list|(
name|List
argument_list|<
name|Integer
argument_list|>
name|list
parameter_list|,
name|Integer
index|[]
name|array1
parameter_list|,
name|boolean
name|expectModify
parameter_list|)
block|{
name|Integer
index|[]
name|starting
init|=
name|ObjectArrays
operator|.
name|arraysCopyOf
argument_list|(
name|array1
argument_list|,
name|array1
operator|.
name|length
argument_list|)
decl_stmt|;
name|Integer
index|[]
name|array2
init|=
name|ObjectArrays
operator|.
name|arraysCopyOf
argument_list|(
name|array1
argument_list|,
name|array1
operator|.
name|length
argument_list|)
decl_stmt|;
name|Object
index|[]
name|reference
init|=
name|list
operator|.
name|toArray
argument_list|(
name|array1
argument_list|)
decl_stmt|;
name|Object
index|[]
name|target
init|=
name|ObjectArrays
operator|.
name|toArrayImpl
argument_list|(
name|list
argument_list|,
name|array2
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|reference
operator|.
name|getClass
argument_list|()
argument_list|,
name|target
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|reference
argument_list|,
name|target
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|reference
argument_list|,
name|target
argument_list|)
argument_list|)
expr_stmt|;
name|Object
index|[]
name|expectedArray1
init|=
name|expectModify
condition|?
name|reference
else|:
name|starting
decl_stmt|;
name|Object
index|[]
name|expectedArray2
init|=
name|expectModify
condition|?
name|target
else|:
name|starting
decl_stmt|;
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|expectedArray1
argument_list|,
name|array1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|expectedArray2
argument_list|,
name|array2
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testPrependZeroElements ()
specifier|public
name|void
name|testPrependZeroElements
parameter_list|()
block|{
name|String
index|[]
name|result
init|=
name|ObjectArrays
operator|.
name|concat
argument_list|(
literal|"foo"
argument_list|,
operator|new
name|String
index|[]
block|{}
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|result
argument_list|)
operator|.
name|asList
argument_list|()
operator|.
name|has
argument_list|()
operator|.
name|item
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
block|}
DECL|method|testPrependOneElement ()
specifier|public
name|void
name|testPrependOneElement
parameter_list|()
block|{
name|String
index|[]
name|result
init|=
name|ObjectArrays
operator|.
name|concat
argument_list|(
literal|"foo"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"bar"
block|}
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|result
argument_list|)
operator|.
name|asList
argument_list|()
operator|.
name|has
argument_list|()
operator|.
name|exactly
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
block|}
DECL|method|testPrependTwoElements ()
specifier|public
name|void
name|testPrependTwoElements
parameter_list|()
block|{
name|String
index|[]
name|result
init|=
name|ObjectArrays
operator|.
name|concat
argument_list|(
literal|"foo"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"bar"
block|,
literal|"baz"
block|}
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|result
argument_list|)
operator|.
name|asList
argument_list|()
operator|.
name|has
argument_list|()
operator|.
name|exactly
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|,
literal|"baz"
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
block|}
DECL|method|testAppendZeroElements ()
specifier|public
name|void
name|testAppendZeroElements
parameter_list|()
block|{
name|String
index|[]
name|result
init|=
name|ObjectArrays
operator|.
name|concat
argument_list|(
operator|new
name|String
index|[]
block|{}
argument_list|,
literal|"foo"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|result
argument_list|)
operator|.
name|asList
argument_list|()
operator|.
name|has
argument_list|()
operator|.
name|item
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
block|}
DECL|method|testAppendOneElement ()
specifier|public
name|void
name|testAppendOneElement
parameter_list|()
block|{
name|String
index|[]
name|result
init|=
name|ObjectArrays
operator|.
name|concat
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"foo"
block|}
argument_list|,
literal|"bar"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|result
argument_list|)
operator|.
name|asList
argument_list|()
operator|.
name|has
argument_list|()
operator|.
name|exactly
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
block|}
DECL|method|testAppendTwoElements ()
specifier|public
name|void
name|testAppendTwoElements
parameter_list|()
block|{
name|String
index|[]
name|result
init|=
name|ObjectArrays
operator|.
name|concat
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"foo"
block|,
literal|"bar"
block|}
argument_list|,
literal|"baz"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|result
argument_list|)
operator|.
name|asList
argument_list|()
operator|.
name|has
argument_list|()
operator|.
name|exactly
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|,
literal|"baz"
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
block|}
DECL|method|testEmptyArrayToEmpty ()
specifier|public
name|void
name|testEmptyArrayToEmpty
parameter_list|()
block|{
name|doTestNewArrayEquals
argument_list|(
operator|new
name|Object
index|[
literal|0
index|]
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
DECL|method|testEmptyArrayToNonEmpty ()
specifier|public
name|void
name|testEmptyArrayToNonEmpty
parameter_list|()
block|{
name|checkArrayEquals
argument_list|(
operator|new
name|Long
index|[
literal|5
index|]
argument_list|,
name|ObjectArrays
operator|.
name|newArray
argument_list|(
operator|new
name|Long
index|[
literal|0
index|]
argument_list|,
literal|5
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testNonEmptyToShorter ()
specifier|public
name|void
name|testNonEmptyToShorter
parameter_list|()
block|{
name|checkArrayEquals
argument_list|(
operator|new
name|String
index|[
literal|9
index|]
argument_list|,
name|ObjectArrays
operator|.
name|newArray
argument_list|(
operator|new
name|String
index|[
literal|10
index|]
argument_list|,
literal|9
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testNonEmptyToSameLength ()
specifier|public
name|void
name|testNonEmptyToSameLength
parameter_list|()
block|{
name|doTestNewArrayEquals
argument_list|(
operator|new
name|String
index|[
literal|10
index|]
argument_list|,
literal|10
argument_list|)
expr_stmt|;
block|}
DECL|method|testNonEmptyToLonger ()
specifier|public
name|void
name|testNonEmptyToLonger
parameter_list|()
block|{
name|checkArrayEquals
argument_list|(
operator|new
name|String
index|[
literal|10
index|]
argument_list|,
name|ObjectArrays
operator|.
name|newArray
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"a"
block|,
literal|"b"
block|,
literal|"c"
block|,
literal|"d"
block|,
literal|"e"
block|}
argument_list|,
literal|10
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|checkArrayEquals (Object[] expected, Object[] actual)
specifier|private
specifier|static
name|void
name|checkArrayEquals
parameter_list|(
name|Object
index|[]
name|expected
parameter_list|,
name|Object
index|[]
name|actual
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|"expected("
operator|+
name|expected
operator|.
name|getClass
argument_list|()
operator|+
literal|"): "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|expected
argument_list|)
operator|+
literal|" actual("
operator|+
name|actual
operator|.
name|getClass
argument_list|()
operator|+
literal|"): "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|actual
argument_list|)
argument_list|,
name|arrayEquals
argument_list|(
name|expected
argument_list|,
name|actual
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|arrayEquals (Object[] array1, Object[] array2)
specifier|private
specifier|static
name|boolean
name|arrayEquals
parameter_list|(
name|Object
index|[]
name|array1
parameter_list|,
name|Object
index|[]
name|array2
parameter_list|)
block|{
name|assertSame
argument_list|(
name|array1
operator|.
name|getClass
argument_list|()
argument_list|,
name|array2
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|Arrays
operator|.
name|equals
argument_list|(
name|array1
argument_list|,
name|array2
argument_list|)
return|;
block|}
DECL|method|doTestNewArrayEquals (Object[] expected, int length)
specifier|private
specifier|static
name|void
name|doTestNewArrayEquals
parameter_list|(
name|Object
index|[]
name|expected
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|checkArrayEquals
argument_list|(
name|expected
argument_list|,
name|ObjectArrays
operator|.
name|newArray
argument_list|(
name|expected
argument_list|,
name|length
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

