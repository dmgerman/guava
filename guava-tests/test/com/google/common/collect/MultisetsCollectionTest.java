begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2008 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.collect
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
package|;
end_package

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Arrays
operator|.
name|asList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtIncompatible
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Predicates
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|features
operator|.
name|CollectionFeature
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|features
operator|.
name|CollectionSize
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|google
operator|.
name|MultisetTestSuiteBuilder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|google
operator|.
name|SortedMultisetTestSuiteBuilder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|google
operator|.
name|TestStringMultisetGenerator
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestSuite
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Collection tests on wrappers from {@link Multisets}.  *  * @author Jared Levy  */
end_comment

begin_class
annotation|@
name|GwtIncompatible
comment|// suite // TODO(cpovirk): set up collect/gwt/suites version
DECL|class|MultisetsCollectionTest
specifier|public
class|class
name|MultisetsCollectionTest
extends|extends
name|TestCase
block|{
DECL|method|suite ()
specifier|public
specifier|static
name|Test
name|suite
parameter_list|()
block|{
name|TestSuite
name|suite
init|=
operator|new
name|TestSuite
argument_list|()
decl_stmt|;
name|suite
operator|.
name|addTest
argument_list|(
name|MultisetTestSuiteBuilder
operator|.
name|using
argument_list|(
name|unmodifiableMultisetGenerator
argument_list|()
argument_list|)
operator|.
name|withFeatures
argument_list|(
name|CollectionSize
operator|.
name|ANY
argument_list|,
name|CollectionFeature
operator|.
name|KNOWN_ORDER
argument_list|,
name|CollectionFeature
operator|.
name|SERIALIZABLE
argument_list|,
name|CollectionFeature
operator|.
name|ALLOWS_NULL_QUERIES
argument_list|)
operator|.
name|named
argument_list|(
literal|"Multisets.unmodifiableMultiset[LinkedHashMultiset]"
argument_list|)
operator|.
name|createTestSuite
argument_list|()
argument_list|)
expr_stmt|;
name|suite
operator|.
name|addTest
argument_list|(
name|SortedMultisetTestSuiteBuilder
operator|.
name|using
argument_list|(
name|unmodifiableSortedMultisetGenerator
argument_list|()
argument_list|)
operator|.
name|withFeatures
argument_list|(
name|CollectionSize
operator|.
name|ANY
argument_list|,
name|CollectionFeature
operator|.
name|KNOWN_ORDER
argument_list|,
name|CollectionFeature
operator|.
name|ALLOWS_NULL_QUERIES
argument_list|)
operator|.
name|named
argument_list|(
literal|"Multisets.unmodifiableMultiset[TreeMultiset]"
argument_list|)
operator|.
name|createTestSuite
argument_list|()
argument_list|)
expr_stmt|;
name|suite
operator|.
name|addTest
argument_list|(
name|MultisetTestSuiteBuilder
operator|.
name|using
argument_list|(
name|unionGenerator
argument_list|()
argument_list|)
operator|.
name|withFeatures
argument_list|(
name|CollectionSize
operator|.
name|ANY
argument_list|,
name|CollectionFeature
operator|.
name|ALLOWS_NULL_VALUES
argument_list|)
operator|.
name|named
argument_list|(
literal|"Multisets.union"
argument_list|)
operator|.
name|createTestSuite
argument_list|()
argument_list|)
expr_stmt|;
name|suite
operator|.
name|addTest
argument_list|(
name|MultisetTestSuiteBuilder
operator|.
name|using
argument_list|(
name|intersectionGenerator
argument_list|()
argument_list|)
operator|.
name|withFeatures
argument_list|(
name|CollectionSize
operator|.
name|ANY
argument_list|,
name|CollectionFeature
operator|.
name|ALLOWS_NULL_VALUES
argument_list|,
name|CollectionFeature
operator|.
name|KNOWN_ORDER
argument_list|)
operator|.
name|named
argument_list|(
literal|"Multisets.intersection"
argument_list|)
operator|.
name|createTestSuite
argument_list|()
argument_list|)
expr_stmt|;
name|suite
operator|.
name|addTest
argument_list|(
name|MultisetTestSuiteBuilder
operator|.
name|using
argument_list|(
name|sumGenerator
argument_list|()
argument_list|)
operator|.
name|withFeatures
argument_list|(
name|CollectionSize
operator|.
name|ANY
argument_list|,
name|CollectionFeature
operator|.
name|ALLOWS_NULL_VALUES
argument_list|)
operator|.
name|named
argument_list|(
literal|"Multisets.sum"
argument_list|)
operator|.
name|createTestSuite
argument_list|()
argument_list|)
expr_stmt|;
name|suite
operator|.
name|addTest
argument_list|(
name|MultisetTestSuiteBuilder
operator|.
name|using
argument_list|(
name|differenceGenerator
argument_list|()
argument_list|)
operator|.
name|withFeatures
argument_list|(
name|CollectionSize
operator|.
name|ANY
argument_list|,
name|CollectionFeature
operator|.
name|ALLOWS_NULL_VALUES
argument_list|,
name|CollectionFeature
operator|.
name|KNOWN_ORDER
argument_list|)
operator|.
name|named
argument_list|(
literal|"Multisets.difference"
argument_list|)
operator|.
name|createTestSuite
argument_list|()
argument_list|)
expr_stmt|;
name|suite
operator|.
name|addTest
argument_list|(
name|MultisetTestSuiteBuilder
operator|.
name|using
argument_list|(
name|filteredGenerator
argument_list|()
argument_list|)
operator|.
name|withFeatures
argument_list|(
name|CollectionSize
operator|.
name|ANY
argument_list|,
name|CollectionFeature
operator|.
name|ALLOWS_NULL_VALUES
argument_list|,
name|CollectionFeature
operator|.
name|KNOWN_ORDER
argument_list|,
name|CollectionFeature
operator|.
name|SUPPORTS_ADD
argument_list|,
name|CollectionFeature
operator|.
name|SUPPORTS_REMOVE
argument_list|)
operator|.
name|named
argument_list|(
literal|"Multiset.filter[Multiset, Predicate]"
argument_list|)
operator|.
name|createTestSuite
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|suite
return|;
block|}
DECL|method|unmodifiableMultisetGenerator ()
specifier|private
specifier|static
name|TestStringMultisetGenerator
name|unmodifiableMultisetGenerator
parameter_list|()
block|{
return|return
operator|new
name|TestStringMultisetGenerator
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|Multiset
argument_list|<
name|String
argument_list|>
name|create
parameter_list|(
name|String
index|[]
name|elements
parameter_list|)
block|{
return|return
name|Multisets
operator|.
name|unmodifiableMultiset
argument_list|(
name|LinkedHashMultiset
operator|.
name|create
argument_list|(
name|asList
argument_list|(
name|elements
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|order
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|insertionOrder
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|order
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|s
range|:
name|insertionOrder
control|)
block|{
name|int
name|index
init|=
name|order
operator|.
name|indexOf
argument_list|(
name|s
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|==
operator|-
literal|1
condition|)
block|{
name|order
operator|.
name|add
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|order
operator|.
name|add
argument_list|(
name|index
argument_list|,
name|s
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|order
return|;
block|}
block|}
return|;
block|}
DECL|method|unmodifiableSortedMultisetGenerator ()
specifier|private
specifier|static
name|TestStringMultisetGenerator
name|unmodifiableSortedMultisetGenerator
parameter_list|()
block|{
return|return
operator|new
name|TestStringMultisetGenerator
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|Multiset
argument_list|<
name|String
argument_list|>
name|create
parameter_list|(
name|String
index|[]
name|elements
parameter_list|)
block|{
return|return
name|Multisets
operator|.
name|unmodifiableSortedMultiset
argument_list|(
name|TreeMultiset
operator|.
name|create
argument_list|(
name|asList
argument_list|(
name|elements
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|order
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|insertionOrder
parameter_list|)
block|{
name|Collections
operator|.
name|sort
argument_list|(
name|insertionOrder
argument_list|)
expr_stmt|;
return|return
name|insertionOrder
return|;
block|}
block|}
return|;
block|}
DECL|method|unionGenerator ()
specifier|private
specifier|static
name|TestStringMultisetGenerator
name|unionGenerator
parameter_list|()
block|{
return|return
operator|new
name|TestStringMultisetGenerator
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|Multiset
argument_list|<
name|String
argument_list|>
name|create
parameter_list|(
name|String
index|[]
name|elements
parameter_list|)
block|{
name|Multiset
argument_list|<
name|String
argument_list|>
name|multiset1
init|=
name|LinkedHashMultiset
operator|.
name|create
argument_list|()
decl_stmt|;
name|Multiset
argument_list|<
name|String
argument_list|>
name|multiset2
init|=
name|LinkedHashMultiset
operator|.
name|create
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|elements
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|element
init|=
name|elements
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|multiset1
operator|.
name|contains
argument_list|(
name|element
argument_list|)
operator|||
name|multiset2
operator|.
name|contains
argument_list|(
name|element
argument_list|)
condition|)
block|{
comment|// add to both; the one already containing it will have more
name|multiset1
operator|.
name|add
argument_list|(
name|element
argument_list|)
expr_stmt|;
name|multiset2
operator|.
name|add
argument_list|(
name|element
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|i
operator|%
literal|2
operator|==
literal|0
condition|)
block|{
name|multiset1
operator|.
name|add
argument_list|(
name|elements
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|multiset2
operator|.
name|add
argument_list|(
name|elements
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|Multisets
operator|.
name|union
argument_list|(
name|multiset1
argument_list|,
name|multiset2
argument_list|)
return|;
block|}
block|}
return|;
block|}
DECL|method|intersectionGenerator ()
specifier|private
specifier|static
name|TestStringMultisetGenerator
name|intersectionGenerator
parameter_list|()
block|{
return|return
operator|new
name|TestStringMultisetGenerator
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|Multiset
argument_list|<
name|String
argument_list|>
name|create
parameter_list|(
name|String
index|[]
name|elements
parameter_list|)
block|{
name|Multiset
argument_list|<
name|String
argument_list|>
name|multiset1
init|=
name|LinkedHashMultiset
operator|.
name|create
argument_list|()
decl_stmt|;
name|Multiset
argument_list|<
name|String
argument_list|>
name|multiset2
init|=
name|LinkedHashMultiset
operator|.
name|create
argument_list|()
decl_stmt|;
name|multiset1
operator|.
name|add
argument_list|(
literal|"only1"
argument_list|)
expr_stmt|;
name|multiset2
operator|.
name|add
argument_list|(
literal|"only2"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|elements
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|multiset1
operator|.
name|add
argument_list|(
name|elements
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|multiset2
operator|.
name|add
argument_list|(
name|elements
index|[
name|elements
operator|.
name|length
operator|-
literal|1
operator|-
name|i
index|]
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|elements
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|multiset1
operator|.
name|add
argument_list|(
name|elements
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|elements
operator|.
name|length
operator|>
literal|1
condition|)
block|{
comment|/*            * When a test requests a multiset with duplicates, our plan of            * "add an extra item 0 to A and an extra item 1 to B" really means            * "add an extra item 0 to A and B," which isn't what we want.            */
if|if
condition|(
operator|!
name|Objects
operator|.
name|equal
argument_list|(
name|elements
index|[
literal|0
index|]
argument_list|,
name|elements
index|[
literal|1
index|]
argument_list|)
condition|)
block|{
name|multiset2
operator|.
name|add
argument_list|(
name|elements
index|[
literal|1
index|]
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|Multisets
operator|.
name|intersection
argument_list|(
name|multiset1
argument_list|,
name|multiset2
argument_list|)
return|;
block|}
block|}
return|;
block|}
DECL|method|sumGenerator ()
specifier|private
specifier|static
name|TestStringMultisetGenerator
name|sumGenerator
parameter_list|()
block|{
return|return
operator|new
name|TestStringMultisetGenerator
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|Multiset
argument_list|<
name|String
argument_list|>
name|create
parameter_list|(
name|String
index|[]
name|elements
parameter_list|)
block|{
name|Multiset
argument_list|<
name|String
argument_list|>
name|multiset1
init|=
name|LinkedHashMultiset
operator|.
name|create
argument_list|()
decl_stmt|;
name|Multiset
argument_list|<
name|String
argument_list|>
name|multiset2
init|=
name|LinkedHashMultiset
operator|.
name|create
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|elements
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
comment|// add to either; sum should contain all
if|if
condition|(
name|i
operator|%
literal|2
operator|==
literal|0
condition|)
block|{
name|multiset1
operator|.
name|add
argument_list|(
name|elements
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|multiset2
operator|.
name|add
argument_list|(
name|elements
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|Multisets
operator|.
name|sum
argument_list|(
name|multiset1
argument_list|,
name|multiset2
argument_list|)
return|;
block|}
block|}
return|;
block|}
DECL|method|differenceGenerator ()
specifier|private
specifier|static
name|TestStringMultisetGenerator
name|differenceGenerator
parameter_list|()
block|{
return|return
operator|new
name|TestStringMultisetGenerator
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|Multiset
argument_list|<
name|String
argument_list|>
name|create
parameter_list|(
name|String
index|[]
name|elements
parameter_list|)
block|{
name|Multiset
argument_list|<
name|String
argument_list|>
name|multiset1
init|=
name|LinkedHashMultiset
operator|.
name|create
argument_list|()
decl_stmt|;
name|Multiset
argument_list|<
name|String
argument_list|>
name|multiset2
init|=
name|LinkedHashMultiset
operator|.
name|create
argument_list|()
decl_stmt|;
name|multiset1
operator|.
name|add
argument_list|(
literal|"equalIn1"
argument_list|)
expr_stmt|;
name|multiset1
operator|.
name|add
argument_list|(
literal|"fewerIn1"
argument_list|)
expr_stmt|;
name|multiset2
operator|.
name|add
argument_list|(
literal|"equalIn1"
argument_list|)
expr_stmt|;
name|multiset2
operator|.
name|add
argument_list|(
literal|"fewerIn1"
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|multiset2
operator|.
name|add
argument_list|(
literal|"onlyIn2"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|elements
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
comment|// add 1 more copy of each element to multiset1 than multiset2
name|multiset1
operator|.
name|add
argument_list|(
name|elements
index|[
name|i
index|]
argument_list|,
name|i
operator|+
literal|2
argument_list|)
expr_stmt|;
name|multiset2
operator|.
name|add
argument_list|(
name|elements
index|[
name|i
index|]
argument_list|,
name|i
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
return|return
name|Multisets
operator|.
name|difference
argument_list|(
name|multiset1
argument_list|,
name|multiset2
argument_list|)
return|;
block|}
block|}
return|;
block|}
DECL|field|ELEMENTS_TO_FILTER_OUT
specifier|private
specifier|static
specifier|final
name|Multiset
argument_list|<
name|String
argument_list|>
name|ELEMENTS_TO_FILTER_OUT
init|=
name|ImmutableMultiset
operator|.
name|of
argument_list|(
literal|"foobar"
argument_list|,
literal|"bazfoo"
argument_list|,
literal|"foobar"
argument_list|,
literal|"foobar"
argument_list|)
decl_stmt|;
DECL|field|PREDICATE
specifier|private
specifier|static
specifier|final
name|Predicate
argument_list|<
name|String
argument_list|>
name|PREDICATE
init|=
name|Predicates
operator|.
name|not
argument_list|(
name|Predicates
operator|.
name|in
argument_list|(
name|ELEMENTS_TO_FILTER_OUT
argument_list|)
argument_list|)
decl_stmt|;
DECL|method|filteredGenerator ()
specifier|private
specifier|static
name|TestStringMultisetGenerator
name|filteredGenerator
parameter_list|()
block|{
return|return
operator|new
name|TestStringMultisetGenerator
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|Multiset
argument_list|<
name|String
argument_list|>
name|create
parameter_list|(
name|String
index|[]
name|elements
parameter_list|)
block|{
name|Multiset
argument_list|<
name|String
argument_list|>
name|multiset
init|=
name|LinkedHashMultiset
operator|.
name|create
argument_list|()
decl_stmt|;
name|Collections
operator|.
name|addAll
argument_list|(
name|multiset
argument_list|,
name|elements
argument_list|)
expr_stmt|;
name|multiset
operator|.
name|addAll
argument_list|(
name|ELEMENTS_TO_FILTER_OUT
argument_list|)
expr_stmt|;
return|return
name|Multisets
operator|.
name|filter
argument_list|(
name|multiset
argument_list|,
name|PREDICATE
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|order
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|insertionOrder
parameter_list|)
block|{
return|return
name|Lists
operator|.
name|newArrayList
argument_list|(
name|LinkedHashMultiset
operator|.
name|create
argument_list|(
name|insertionOrder
argument_list|)
argument_list|)
return|;
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

