begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright 2012 Google Inc. All Rights Reserved.
end_comment

begin_package
DECL|package|com.google.common.testing
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|testing
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableCollection
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMultimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMultiset
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSortedMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSortedSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableTable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterators
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Multimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Multiset
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ListIterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_comment
comment|/**  * Unit test for {@link NullValues}.  *  * @author benyu@google.com (Ben Yu)  */
end_comment

begin_class
DECL|class|NullValuesTest
specifier|public
class|class
name|NullValuesTest
extends|extends
name|TestCase
block|{
DECL|method|testGet_primitives ()
specifier|public
name|void
name|testGet_primitives
parameter_list|()
block|{
name|assertNull
argument_list|(
name|NullValues
operator|.
name|get
argument_list|(
name|void
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|NullValues
operator|.
name|get
argument_list|(
name|Void
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Boolean
operator|.
name|FALSE
argument_list|,
name|NullValues
operator|.
name|get
argument_list|(
name|boolean
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Boolean
operator|.
name|FALSE
argument_list|,
name|NullValues
operator|.
name|get
argument_list|(
name|Boolean
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Character
operator|.
name|valueOf
argument_list|(
literal|'\0'
argument_list|)
argument_list|,
name|NullValues
operator|.
name|get
argument_list|(
name|char
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Character
operator|.
name|valueOf
argument_list|(
literal|'\0'
argument_list|)
argument_list|,
name|NullValues
operator|.
name|get
argument_list|(
name|Character
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Byte
operator|.
name|valueOf
argument_list|(
operator|(
name|byte
operator|)
literal|0
argument_list|)
argument_list|,
name|NullValues
operator|.
name|get
argument_list|(
name|byte
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Byte
operator|.
name|valueOf
argument_list|(
operator|(
name|byte
operator|)
literal|0
argument_list|)
argument_list|,
name|NullValues
operator|.
name|get
argument_list|(
name|Byte
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Short
operator|.
name|valueOf
argument_list|(
operator|(
name|short
operator|)
literal|0
argument_list|)
argument_list|,
name|NullValues
operator|.
name|get
argument_list|(
name|short
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Short
operator|.
name|valueOf
argument_list|(
operator|(
name|short
operator|)
literal|0
argument_list|)
argument_list|,
name|NullValues
operator|.
name|get
argument_list|(
name|Short
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|0
argument_list|)
argument_list|,
name|NullValues
operator|.
name|get
argument_list|(
name|int
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|0
argument_list|)
argument_list|,
name|NullValues
operator|.
name|get
argument_list|(
name|Integer
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
literal|0
argument_list|)
argument_list|,
name|NullValues
operator|.
name|get
argument_list|(
name|long
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
literal|0
argument_list|)
argument_list|,
name|NullValues
operator|.
name|get
argument_list|(
name|Long
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Float
operator|.
name|valueOf
argument_list|(
literal|0
argument_list|)
argument_list|,
name|NullValues
operator|.
name|get
argument_list|(
name|float
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Float
operator|.
name|valueOf
argument_list|(
literal|0
argument_list|)
argument_list|,
name|NullValues
operator|.
name|get
argument_list|(
name|Float
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Double
operator|.
name|valueOf
argument_list|(
literal|0
argument_list|)
argument_list|,
name|NullValues
operator|.
name|get
argument_list|(
name|double
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Double
operator|.
name|valueOf
argument_list|(
literal|0
argument_list|)
argument_list|,
name|NullValues
operator|.
name|get
argument_list|(
name|Double
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|NullValues
operator|.
name|get
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|NullValues
operator|.
name|get
argument_list|(
name|CharSequence
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|TimeUnit
operator|.
name|SECONDS
argument_list|,
name|NullValues
operator|.
name|get
argument_list|(
name|TimeUnit
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|NullValues
operator|.
name|get
argument_list|(
name|Object
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Pattern
operator|.
name|compile
argument_list|(
literal|""
argument_list|)
operator|.
name|pattern
argument_list|()
argument_list|,
name|NullValues
operator|.
name|get
argument_list|(
name|Pattern
operator|.
name|class
argument_list|)
operator|.
name|pattern
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|NullValues
operator|.
name|get
argument_list|(
name|Number
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testGet_collections ()
specifier|public
name|void
name|testGet_collections
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|Iterators
operator|.
name|emptyIterator
argument_list|()
argument_list|,
name|NullValues
operator|.
name|get
argument_list|(
name|Iterator
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|NullValues
operator|.
name|get
argument_list|(
name|ListIterator
operator|.
name|class
argument_list|)
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|()
argument_list|,
name|NullValues
operator|.
name|get
argument_list|(
name|Iterable
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|()
argument_list|,
name|NullValues
operator|.
name|get
argument_list|(
name|Set
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|()
argument_list|,
name|NullValues
operator|.
name|get
argument_list|(
name|ImmutableSet
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableSortedSet
operator|.
name|of
argument_list|()
argument_list|,
name|NullValues
operator|.
name|get
argument_list|(
name|SortedSet
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableSortedSet
operator|.
name|of
argument_list|()
argument_list|,
name|NullValues
operator|.
name|get
argument_list|(
name|ImmutableSortedSet
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|()
argument_list|,
name|NullValues
operator|.
name|get
argument_list|(
name|Collection
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|()
argument_list|,
name|NullValues
operator|.
name|get
argument_list|(
name|ImmutableCollection
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|()
argument_list|,
name|NullValues
operator|.
name|get
argument_list|(
name|List
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|()
argument_list|,
name|NullValues
operator|.
name|get
argument_list|(
name|ImmutableList
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|()
argument_list|,
name|NullValues
operator|.
name|get
argument_list|(
name|Map
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|()
argument_list|,
name|NullValues
operator|.
name|get
argument_list|(
name|ImmutableMap
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableSortedMap
operator|.
name|of
argument_list|()
argument_list|,
name|NullValues
operator|.
name|get
argument_list|(
name|SortedMap
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableSortedMap
operator|.
name|of
argument_list|()
argument_list|,
name|NullValues
operator|.
name|get
argument_list|(
name|ImmutableSortedMap
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableMultiset
operator|.
name|of
argument_list|()
argument_list|,
name|NullValues
operator|.
name|get
argument_list|(
name|Multiset
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableMultiset
operator|.
name|of
argument_list|()
argument_list|,
name|NullValues
operator|.
name|get
argument_list|(
name|ImmutableMultiset
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableMultimap
operator|.
name|of
argument_list|()
argument_list|,
name|NullValues
operator|.
name|get
argument_list|(
name|Multimap
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableMultimap
operator|.
name|of
argument_list|()
argument_list|,
name|NullValues
operator|.
name|get
argument_list|(
name|ImmutableMultimap
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableTable
operator|.
name|of
argument_list|()
argument_list|,
name|NullValues
operator|.
name|get
argument_list|(
name|Table
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableTable
operator|.
name|of
argument_list|()
argument_list|,
name|NullValues
operator|.
name|get
argument_list|(
name|ImmutableTable
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// functor classes have no type parameters
DECL|method|testGet_functors ()
specifier|public
name|void
name|testGet_functors
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|NullValues
operator|.
name|get
argument_list|(
name|Comparator
operator|.
name|class
argument_list|)
operator|.
name|compare
argument_list|(
literal|"abc"
argument_list|,
literal|123
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|NullValues
operator|.
name|get
argument_list|(
name|Predicate
operator|.
name|class
argument_list|)
operator|.
name|apply
argument_list|(
literal|"abc"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testGet_comparable ()
specifier|public
name|void
name|testGet_comparable
parameter_list|()
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// The null value can compare with any Object
name|Comparable
argument_list|<
name|Object
argument_list|>
name|comparable
init|=
name|NullValues
operator|.
name|get
argument_list|(
name|Comparable
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|comparable
operator|.
name|compareTo
argument_list|(
name|comparable
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|comparable
operator|.
name|compareTo
argument_list|(
literal|""
argument_list|)
operator|>
literal|0
argument_list|)
expr_stmt|;
try|try
block|{
name|comparable
operator|.
name|compareTo
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|expected
parameter_list|)
block|{}
block|}
DECL|method|testGet_array ()
specifier|public
name|void
name|testGet_array
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|NullValues
operator|.
name|get
argument_list|(
name|int
index|[]
operator|.
expr|class
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|NullValues
operator|.
name|get
argument_list|(
name|Object
index|[]
operator|.
expr|class
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|NullValues
operator|.
name|get
argument_list|(
name|String
index|[]
operator|.
expr|class
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
DECL|method|testGet_enum ()
specifier|public
name|void
name|testGet_enum
parameter_list|()
block|{
name|assertNull
argument_list|(
name|NullValues
operator|.
name|get
argument_list|(
name|EmptyEnum
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Direction
operator|.
name|UP
argument_list|,
name|NullValues
operator|.
name|get
argument_list|(
name|Direction
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testGet_interface ()
specifier|public
name|void
name|testGet_interface
parameter_list|()
block|{
name|assertNull
argument_list|(
name|NullValues
operator|.
name|get
argument_list|(
name|SomeInterface
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testGet_class ()
specifier|public
name|void
name|testGet_class
parameter_list|()
block|{
name|assertNull
argument_list|(
name|NullValues
operator|.
name|get
argument_list|(
name|SomeAbstractClass
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|NullValues
operator|.
name|get
argument_list|(
name|WithPrivateConstructor
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|NullValues
operator|.
name|get
argument_list|(
name|NoDefaultConstructor
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|NullValues
operator|.
name|get
argument_list|(
name|WithExceptionalConstructor
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|NullValues
operator|.
name|get
argument_list|(
name|NonPublicClass
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testGet_mutable ()
specifier|public
name|void
name|testGet_mutable
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|NullValues
operator|.
name|get
argument_list|(
name|ArrayList
operator|.
name|class
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|NullValues
operator|.
name|get
argument_list|(
name|HashMap
operator|.
name|class
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|NullValues
operator|.
name|get
argument_list|(
name|Appendable
operator|.
name|class
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|NullValues
operator|.
name|get
argument_list|(
name|StringBuilder
operator|.
name|class
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|NullValues
operator|.
name|get
argument_list|(
name|StringBuffer
operator|.
name|class
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertFreshInstanceReturned
argument_list|(
name|ArrayList
operator|.
name|class
argument_list|,
name|HashMap
operator|.
name|class
argument_list|,
name|Appendable
operator|.
name|class
argument_list|,
name|StringBuilder
operator|.
name|class
argument_list|,
name|StringBuffer
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
DECL|method|assertFreshInstanceReturned (Class<?>.... mutableClasses)
specifier|private
specifier|static
name|void
name|assertFreshInstanceReturned
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
modifier|...
name|mutableClasses
parameter_list|)
block|{
for|for
control|(
name|Class
argument_list|<
name|?
argument_list|>
name|mutableClass
range|:
name|mutableClasses
control|)
block|{
name|assertNotSame
argument_list|(
name|NullValues
operator|.
name|get
argument_list|(
name|mutableClass
argument_list|)
argument_list|,
name|NullValues
operator|.
name|get
argument_list|(
name|mutableClass
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|enum|EmptyEnum
specifier|private
enum|enum
name|EmptyEnum
block|{}
DECL|enum|Direction
specifier|private
enum|enum
name|Direction
block|{
DECL|enumConstant|UP
DECL|enumConstant|DOWN
name|UP
block|,
name|DOWN
block|}
DECL|interface|SomeInterface
specifier|public
interface|interface
name|SomeInterface
block|{}
DECL|class|SomeAbstractClass
specifier|public
specifier|static
specifier|abstract
class|class
name|SomeAbstractClass
block|{
DECL|method|SomeAbstractClass ()
specifier|public
name|SomeAbstractClass
parameter_list|()
block|{}
block|}
DECL|class|NonPublicClass
specifier|static
class|class
name|NonPublicClass
block|{
DECL|method|NonPublicClass ()
specifier|public
name|NonPublicClass
parameter_list|()
block|{}
block|}
DECL|class|WithPrivateConstructor
specifier|private
specifier|static
class|class
name|WithPrivateConstructor
block|{}
DECL|class|NoDefaultConstructor
specifier|public
specifier|static
class|class
name|NoDefaultConstructor
block|{
DECL|method|NoDefaultConstructor (int i)
specifier|public
name|NoDefaultConstructor
parameter_list|(
name|int
name|i
parameter_list|)
block|{}
block|}
DECL|class|WithExceptionalConstructor
specifier|public
specifier|static
class|class
name|WithExceptionalConstructor
block|{
DECL|method|WithExceptionalConstructor ()
specifier|public
name|WithExceptionalConstructor
parameter_list|()
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|()
throw|;
block|}
block|}
block|}
end_class

end_unit

