begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2009 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.xml
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|xml
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|escape
operator|.
name|testing
operator|.
name|EscaperAsserts
operator|.
name|assertUnescaped
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|escape
operator|.
name|testing
operator|.
name|EscaperAsserts
operator|.
name|assertEscaping
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtCompatible
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|escape
operator|.
name|CharEscaper
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_comment
comment|/**  * Tests for the {@link XmlEscapers} class.  *  * @author Alex Matevossian  * @author David Beaumont  */
end_comment

begin_class
annotation|@
name|GwtCompatible
DECL|class|XmlEscapersTest
specifier|public
class|class
name|XmlEscapersTest
extends|extends
name|TestCase
block|{
DECL|method|testXmlEscaper ()
specifier|public
name|void
name|testXmlEscaper
parameter_list|()
throws|throws
name|Exception
block|{
name|CharEscaper
name|xmlEscaper
init|=
name|XmlEscapers
operator|.
name|xmlEscaper
argument_list|()
decl_stmt|;
name|assertBasicXmlEscaper
argument_list|(
name|xmlEscaper
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Test quotes are escaped.
name|assertEquals
argument_list|(
literal|"&quot;test&quot;"
argument_list|,
name|xmlEscaper
operator|.
name|escape
argument_list|(
literal|"\"test\""
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"&apos;test&apos;"
argument_list|,
name|xmlEscaper
operator|.
name|escape
argument_list|(
literal|"\'test'"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Test all escapes
name|assertEquals
argument_list|(
literal|"a&quot;b&lt;c&gt;d&amp;e&quot;f&apos;"
argument_list|,
name|xmlEscaper
operator|.
name|escape
argument_list|(
literal|"a\"b<c>d&e\"f'"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testXmlContentEscaper ()
specifier|public
name|void
name|testXmlContentEscaper
parameter_list|()
throws|throws
name|Exception
block|{
name|CharEscaper
name|xmlContentEscaper
init|=
name|XmlEscapers
operator|.
name|xmlContentEscaper
argument_list|()
decl_stmt|;
name|assertBasicXmlEscaper
argument_list|(
name|xmlContentEscaper
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// Test quotes are not escaped.
name|assertEquals
argument_list|(
literal|"\"test\""
argument_list|,
name|xmlContentEscaper
operator|.
name|escape
argument_list|(
literal|"\"test\""
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"'test'"
argument_list|,
name|xmlContentEscaper
operator|.
name|escape
argument_list|(
literal|"'test'"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Helper to assert common properties of xml escapers.
DECL|method|assertBasicXmlEscaper (CharEscaper xmlEscaper, boolean shouldEscapeQuotes)
specifier|private
name|void
name|assertBasicXmlEscaper
parameter_list|(
name|CharEscaper
name|xmlEscaper
parameter_list|,
name|boolean
name|shouldEscapeQuotes
parameter_list|)
block|{
comment|// Simple examples (smoke tests)
name|assertEquals
argument_list|(
literal|"xxx"
argument_list|,
name|xmlEscaper
operator|.
name|escape
argument_list|(
literal|"xxx"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"test&amp; test&amp; test"
argument_list|,
name|xmlEscaper
operator|.
name|escape
argument_list|(
literal|"test& test& test"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"test&lt;&lt; 1"
argument_list|,
name|xmlEscaper
operator|.
name|escape
argument_list|(
literal|"test<< 1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"test&gt;&gt; 1"
argument_list|,
name|xmlEscaper
operator|.
name|escape
argument_list|(
literal|"test>> 1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"&lt;tab&gt;"
argument_list|,
name|xmlEscaper
operator|.
name|escape
argument_list|(
literal|"<tab>"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Test all non-escaped ASCII characters.
name|String
name|s
init|=
literal|"!@#$%^*()_+=-/?\\|]}[{,.;:"
operator|+
literal|"abcdefghijklmnopqrstuvwxyz"
operator|+
literal|"ABCDEFGHIJKLMNOPQRSTUVWXYZ"
operator|+
literal|"1234567890"
decl_stmt|;
name|assertEquals
argument_list|(
name|s
argument_list|,
name|xmlEscaper
operator|.
name|escape
argument_list|(
name|s
argument_list|)
argument_list|)
expr_stmt|;
comment|// Test ASCII control characters.
for|for
control|(
name|char
name|ch
init|=
literal|0
init|;
name|ch
operator|<
literal|0x20
condition|;
name|ch
operator|++
control|)
block|{
if|if
condition|(
name|ch
operator|==
literal|'\t'
operator|||
name|ch
operator|==
literal|'\n'
operator|||
name|ch
operator|==
literal|'\r'
condition|)
block|{
comment|// Only these whitespace chars are permitted in XML,
name|assertUnescaped
argument_list|(
name|xmlEscaper
argument_list|,
name|ch
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// and everything else is removed.
name|assertEscaping
argument_list|(
name|xmlEscaper
argument_list|,
literal|""
argument_list|,
name|ch
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Test _all_ allowed characters (including surrogate values).
for|for
control|(
name|char
name|ch
init|=
literal|0x20
init|;
name|ch
operator|<=
literal|0xFFFD
condition|;
name|ch
operator|++
control|)
block|{
comment|// There are a small number of cases to consider, so just do it manually.
if|if
condition|(
name|ch
operator|==
literal|'&'
condition|)
block|{
name|assertEscaping
argument_list|(
name|xmlEscaper
argument_list|,
literal|"&amp;"
argument_list|,
name|ch
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ch
operator|==
literal|'<'
condition|)
block|{
name|assertEscaping
argument_list|(
name|xmlEscaper
argument_list|,
literal|"&lt;"
argument_list|,
name|ch
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ch
operator|==
literal|'>'
condition|)
block|{
name|assertEscaping
argument_list|(
name|xmlEscaper
argument_list|,
literal|"&gt;"
argument_list|,
name|ch
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|shouldEscapeQuotes
operator|&&
name|ch
operator|==
literal|'\''
condition|)
block|{
name|assertEscaping
argument_list|(
name|xmlEscaper
argument_list|,
literal|"&apos;"
argument_list|,
name|ch
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|shouldEscapeQuotes
operator|&&
name|ch
operator|==
literal|'"'
condition|)
block|{
name|assertEscaping
argument_list|(
name|xmlEscaper
argument_list|,
literal|"&quot;"
argument_list|,
name|ch
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|input
init|=
name|String
operator|.
name|valueOf
argument_list|(
name|ch
argument_list|)
decl_stmt|;
name|String
name|escaped
init|=
name|xmlEscaper
operator|.
name|escape
argument_list|(
name|input
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"char 0x"
operator|+
name|Integer
operator|.
name|toString
argument_list|(
name|ch
argument_list|,
literal|16
argument_list|)
operator|+
literal|" should not be escaped"
argument_list|,
name|input
argument_list|,
name|escaped
argument_list|)
expr_stmt|;
block|}
block|}
comment|// TODO(user): Change once this escaper forbids \uFFFE and \uFFFF.
name|assertUnescaped
argument_list|(
name|xmlEscaper
argument_list|,
literal|'\uFFFE'
argument_list|)
expr_stmt|;
name|assertUnescaped
argument_list|(
name|xmlEscaper
argument_list|,
literal|'\uFFFF'
argument_list|)
expr_stmt|;
comment|// Test that 0xFFFE and 0xFFFF are removed
comment|// assertEscaping(xmlEscaper, "", '\uFFFE');
comment|// assertEscaping(xmlEscaper, "", '\uFFFF');
comment|// assertEquals("0xFFFE is forbidden and should be removed during escaping",
comment|//     "[]", XmlEscapers.xmlEscaper().escape("[\ufffe]"));
comment|// assertEquals("0xFFFF is forbidden and should be removed during escaping",
comment|//     "[]", XmlEscapers.xmlEscaper().escape("[\uffff]"));
block|}
block|}
end_class

end_unit

