begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2013 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.reflect
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|reflect
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|GenericArrayType
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|ParameterizedType
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|TypeVariable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|WildcardType
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_comment
comment|/**  * Tests of {@link TypeVisitor}.  *  * @author Ben Yu  */
end_comment

begin_class
DECL|class|TypeVisitorTest
specifier|public
class|class
name|TypeVisitorTest
extends|extends
name|TestCase
block|{
DECL|method|testVisitNull ()
specifier|public
name|void
name|testVisitNull
parameter_list|()
block|{
operator|new
name|BaseTypeVisitor
argument_list|()
operator|.
name|visit
argument_list|(
operator|(
operator|(
name|ParameterizedType
operator|)
name|ArrayList
operator|.
name|class
operator|.
name|getGenericSuperclass
argument_list|()
operator|)
operator|.
name|getOwnerType
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testVisitClass ()
specifier|public
name|void
name|testVisitClass
parameter_list|()
block|{
name|assertVisited
argument_list|(
name|String
operator|.
name|class
argument_list|)
expr_stmt|;
operator|new
name|BaseTypeVisitor
argument_list|()
block|{
annotation|@
name|Override
name|void
name|visitClass
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|t
parameter_list|)
block|{}
block|}
operator|.
name|visit
argument_list|(
name|String
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
DECL|method|testVisitTypeVariable ()
specifier|public
parameter_list|<
name|T
parameter_list|>
name|void
name|testVisitTypeVariable
parameter_list|()
block|{
name|Type
name|type
init|=
operator|new
name|TypeCapture
argument_list|<
name|T
argument_list|>
argument_list|()
block|{}
operator|.
name|capture
argument_list|()
decl_stmt|;
name|assertVisited
argument_list|(
name|type
argument_list|)
expr_stmt|;
operator|new
name|BaseTypeVisitor
argument_list|()
block|{
annotation|@
name|Override
name|void
name|visitTypeVariable
parameter_list|(
name|TypeVariable
argument_list|<
name|?
argument_list|>
name|t
parameter_list|)
block|{}
block|}
operator|.
name|visit
argument_list|(
name|type
argument_list|)
expr_stmt|;
block|}
DECL|method|testVisitWildcardType ()
specifier|public
name|void
name|testVisitWildcardType
parameter_list|()
block|{
name|WildcardType
name|type
init|=
name|Types
operator|.
name|subtypeOf
argument_list|(
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertVisited
argument_list|(
name|type
argument_list|)
expr_stmt|;
operator|new
name|BaseTypeVisitor
argument_list|()
block|{
annotation|@
name|Override
name|void
name|visitWildcardType
parameter_list|(
name|WildcardType
name|t
parameter_list|)
block|{}
block|}
operator|.
name|visit
argument_list|(
name|type
argument_list|)
expr_stmt|;
block|}
DECL|method|testVisitGenericArrayType ()
specifier|public
parameter_list|<
name|T
parameter_list|>
name|void
name|testVisitGenericArrayType
parameter_list|()
block|{
name|Type
name|type
init|=
operator|new
name|TypeCapture
argument_list|<
name|T
index|[]
argument_list|>
argument_list|()
block|{}
operator|.
name|capture
argument_list|()
decl_stmt|;
name|assertVisited
argument_list|(
name|type
argument_list|)
expr_stmt|;
operator|new
name|BaseTypeVisitor
argument_list|()
block|{
annotation|@
name|Override
name|void
name|visitGenericArrayType
parameter_list|(
name|GenericArrayType
name|t
parameter_list|)
block|{}
block|}
operator|.
name|visit
argument_list|(
name|type
argument_list|)
expr_stmt|;
block|}
DECL|method|testVisitParameterizedType ()
specifier|public
parameter_list|<
name|T
parameter_list|>
name|void
name|testVisitParameterizedType
parameter_list|()
block|{
name|Type
name|type
init|=
operator|new
name|TypeCapture
argument_list|<
name|Iterable
argument_list|<
name|T
argument_list|>
argument_list|>
argument_list|()
block|{}
operator|.
name|capture
argument_list|()
decl_stmt|;
name|assertVisited
argument_list|(
name|type
argument_list|)
expr_stmt|;
operator|new
name|BaseTypeVisitor
argument_list|()
block|{
annotation|@
name|Override
name|void
name|visitParameterizedType
parameter_list|(
name|ParameterizedType
name|t
parameter_list|)
block|{}
block|}
operator|.
name|visit
argument_list|(
name|type
argument_list|)
expr_stmt|;
block|}
DECL|method|testVisitRecursiveTypeBounds ()
specifier|public
parameter_list|<
name|E
extends|extends
name|Enum
argument_list|<
name|E
argument_list|>
parameter_list|>
name|void
name|testVisitRecursiveTypeBounds
parameter_list|()
block|{
name|Type
name|type
init|=
operator|new
name|TypeCapture
argument_list|<
name|EnumSet
argument_list|<
name|E
argument_list|>
argument_list|>
argument_list|()
block|{}
operator|.
name|capture
argument_list|()
decl_stmt|;
name|assertVisited
argument_list|(
name|type
argument_list|)
expr_stmt|;
operator|new
name|BaseTypeVisitor
argument_list|()
block|{
annotation|@
name|Override
name|void
name|visitParameterizedType
parameter_list|(
name|ParameterizedType
name|t
parameter_list|)
block|{
name|visit
argument_list|(
name|t
operator|.
name|getActualTypeArguments
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|visitTypeVariable
parameter_list|(
name|TypeVariable
argument_list|<
name|?
argument_list|>
name|t
parameter_list|)
block|{
name|visit
argument_list|(
name|t
operator|.
name|getBounds
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
operator|.
name|visit
argument_list|(
name|type
argument_list|)
expr_stmt|;
block|}
DECL|method|assertVisited (Type type)
specifier|private
specifier|static
name|void
name|assertVisited
parameter_list|(
name|Type
name|type
parameter_list|)
block|{
name|TypeVisitor
name|visitor
init|=
operator|new
name|BaseTypeVisitor
argument_list|()
decl_stmt|;
try|try
block|{
name|visitor
operator|.
name|visit
argument_list|(
name|type
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Type not visited"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|expected
parameter_list|)
block|{     }
try|try
block|{
name|visitor
operator|.
name|visit
argument_list|(
operator|new
name|Type
index|[]
block|{
name|type
block|}
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Type not visited"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|expected
parameter_list|)
block|{     }
block|}
DECL|class|BaseTypeVisitor
specifier|private
specifier|static
class|class
name|BaseTypeVisitor
extends|extends
name|TypeVisitor
block|{
annotation|@
name|Override
DECL|method|visitTypeVariable (TypeVariable<?> t)
name|void
name|visitTypeVariable
parameter_list|(
name|TypeVariable
argument_list|<
name|?
argument_list|>
name|t
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|visitWildcardType (WildcardType t)
name|void
name|visitWildcardType
parameter_list|(
name|WildcardType
name|t
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|visitParameterizedType (ParameterizedType t)
name|void
name|visitParameterizedType
parameter_list|(
name|ParameterizedType
name|t
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|visitClass (Class<?> t)
name|void
name|visitClass
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|t
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|visitGenericArrayType (GenericArrayType t)
name|void
name|visitGenericArrayType
parameter_list|(
name|GenericArrayType
name|t
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
block|}
end_class

end_unit

