begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2012 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.reflect
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|reflect
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|testing
operator|.
name|EqualsTester
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Proxy
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Tests for {@link AbstractInvocationHandler}.  *  * @author Ben Yu  */
end_comment

begin_class
DECL|class|AbstractInvocationHandlerTest
specifier|public
class|class
name|AbstractInvocationHandlerTest
extends|extends
name|TestCase
block|{
DECL|field|LIST1
specifier|private
specifier|static
specifier|final
name|ImmutableList
argument_list|<
name|String
argument_list|>
name|LIST1
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"one"
argument_list|,
literal|"two"
argument_list|)
decl_stmt|;
DECL|field|LIST2
specifier|private
specifier|static
specifier|final
name|ImmutableList
argument_list|<
name|String
argument_list|>
name|LIST2
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"three"
argument_list|)
decl_stmt|;
DECL|method|testDelegate ()
specifier|public
name|void
name|testDelegate
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|LIST1
argument_list|,
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|newDelegatingList
argument_list|(
name|LIST1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|LIST1
argument_list|,
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|newDelegatingListWithEquals
argument_list|(
name|LIST1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testToString ()
specifier|public
name|void
name|testToString
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|proxy
init|=
name|newDelegatingList
argument_list|(
name|LIST1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Proxy
operator|.
name|getInvocationHandler
argument_list|(
name|proxy
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|proxy
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testEquals ()
specifier|public
name|void
name|testEquals
parameter_list|()
block|{
operator|new
name|EqualsTester
argument_list|()
operator|.
name|addEqualityGroup
argument_list|(
name|newDelegatingList
argument_list|(
name|LIST1
argument_list|)
argument_list|)
comment|// Actually, this violates List#equals contract.
comment|// But whatever, no one is going to proxy List (hopefully).
operator|.
name|addEqualityGroup
argument_list|(
name|newDelegatingList
argument_list|(
name|LIST1
argument_list|)
argument_list|)
operator|.
name|addEqualityGroup
argument_list|(
name|newDelegatingList
argument_list|(
name|LIST2
argument_list|)
argument_list|)
operator|.
name|addEqualityGroup
argument_list|(
name|newDelegatingListWithEquals
argument_list|(
name|LIST1
argument_list|)
argument_list|,
name|newDelegatingListWithEquals
argument_list|(
name|LIST1
argument_list|)
argument_list|)
operator|.
name|addEqualityGroup
argument_list|(
name|newDelegatingListWithEquals
argument_list|(
name|LIST2
argument_list|)
argument_list|,
name|newProxyWithSubHandler1
argument_list|(
name|LIST2
argument_list|)
argument_list|,
comment|// Makes sure type of handler doesn't affect equality
name|newProxyWithSubHandler2
argument_list|(
name|LIST2
argument_list|)
argument_list|)
operator|.
name|addEqualityGroup
argument_list|(
name|newDelegatingIterableWithEquals
argument_list|(
name|LIST2
argument_list|)
argument_list|)
comment|// different interface
operator|.
name|testEquals
argument_list|()
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// proxy of List<String>
DECL|method|newDelegatingList (List<String> delegate)
specifier|private
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|newDelegatingList
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|delegate
parameter_list|)
block|{
return|return
name|Reflection
operator|.
name|newProxy
argument_list|(
name|List
operator|.
name|class
argument_list|,
operator|new
name|DelegatingInvocationHandler
argument_list|(
name|delegate
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// proxy of List<String>
DECL|method|newDelegatingListWithEquals (List<String> delegate)
specifier|private
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|newDelegatingListWithEquals
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|delegate
parameter_list|)
block|{
return|return
name|Reflection
operator|.
name|newProxy
argument_list|(
name|List
operator|.
name|class
argument_list|,
operator|new
name|DelegatingInvocationHandlerWithEquals
argument_list|(
name|delegate
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// proxy of Iterable<String>
DECL|method|newDelegatingIterableWithEquals (Iterable<String> delegate)
specifier|private
specifier|static
name|Iterable
argument_list|<
name|String
argument_list|>
name|newDelegatingIterableWithEquals
parameter_list|(
name|Iterable
argument_list|<
name|String
argument_list|>
name|delegate
parameter_list|)
block|{
return|return
name|Reflection
operator|.
name|newProxy
argument_list|(
name|Iterable
operator|.
name|class
argument_list|,
operator|new
name|DelegatingInvocationHandlerWithEquals
argument_list|(
name|delegate
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// proxy of List<String>
DECL|method|newProxyWithSubHandler1 (List<String> delegate)
specifier|private
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|newProxyWithSubHandler1
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|delegate
parameter_list|)
block|{
return|return
name|Reflection
operator|.
name|newProxy
argument_list|(
name|List
operator|.
name|class
argument_list|,
operator|new
name|SubHandler1
argument_list|(
name|delegate
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// proxy of List<String>
DECL|method|newProxyWithSubHandler2 (List<String> delegate)
specifier|private
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|newProxyWithSubHandler2
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|delegate
parameter_list|)
block|{
return|return
name|Reflection
operator|.
name|newProxy
argument_list|(
name|List
operator|.
name|class
argument_list|,
operator|new
name|SubHandler2
argument_list|(
name|delegate
argument_list|)
argument_list|)
return|;
block|}
DECL|class|DelegatingInvocationHandler
specifier|private
specifier|static
class|class
name|DelegatingInvocationHandler
extends|extends
name|AbstractInvocationHandler
block|{
DECL|field|delegate
specifier|final
name|Object
name|delegate
decl_stmt|;
DECL|method|DelegatingInvocationHandler (Object delegate)
name|DelegatingInvocationHandler
parameter_list|(
name|Object
name|delegate
parameter_list|)
block|{
name|this
operator|.
name|delegate
operator|=
name|checkNotNull
argument_list|(
name|delegate
argument_list|)
expr_stmt|;
block|}
DECL|method|handleInvocation (Object proxy, Method method, Object[] args)
annotation|@
name|Override
specifier|protected
name|Object
name|handleInvocation
parameter_list|(
name|Object
name|proxy
parameter_list|,
name|Method
name|method
parameter_list|,
name|Object
index|[]
name|args
parameter_list|)
throws|throws
name|Throwable
block|{
return|return
name|method
operator|.
name|invoke
argument_list|(
name|delegate
argument_list|,
name|args
argument_list|)
return|;
block|}
DECL|method|toString ()
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"some arbitrary string"
return|;
block|}
block|}
DECL|class|DelegatingInvocationHandlerWithEquals
specifier|private
specifier|static
class|class
name|DelegatingInvocationHandlerWithEquals
extends|extends
name|DelegatingInvocationHandler
block|{
DECL|method|DelegatingInvocationHandlerWithEquals (Object delegate)
name|DelegatingInvocationHandlerWithEquals
parameter_list|(
name|Object
name|delegate
parameter_list|)
block|{
name|super
argument_list|(
name|delegate
argument_list|)
expr_stmt|;
block|}
DECL|method|equals (Object obj)
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|obj
operator|instanceof
name|DelegatingInvocationHandlerWithEquals
condition|)
block|{
name|DelegatingInvocationHandlerWithEquals
name|that
init|=
operator|(
name|DelegatingInvocationHandlerWithEquals
operator|)
name|obj
decl_stmt|;
return|return
name|delegate
operator|.
name|equals
argument_list|(
name|that
operator|.
name|delegate
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
DECL|method|hashCode ()
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|delegate
operator|.
name|hashCode
argument_list|()
return|;
block|}
block|}
DECL|class|SubHandler1
specifier|private
specifier|static
class|class
name|SubHandler1
extends|extends
name|DelegatingInvocationHandlerWithEquals
block|{
DECL|method|SubHandler1 (Object delegate)
name|SubHandler1
parameter_list|(
name|Object
name|delegate
parameter_list|)
block|{
name|super
argument_list|(
name|delegate
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|SubHandler2
specifier|private
specifier|static
class|class
name|SubHandler2
extends|extends
name|DelegatingInvocationHandlerWithEquals
block|{
DECL|method|SubHandler2 (Object delegate)
name|SubHandler2
parameter_list|(
name|Object
name|delegate
parameter_list|)
block|{
name|super
argument_list|(
name|delegate
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

