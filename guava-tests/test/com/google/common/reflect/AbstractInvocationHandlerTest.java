begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2012 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.reflect
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|reflect
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|testing
operator|.
name|EqualsTester
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Tests for {@link AbstractInvocationHandler}.  *  * @author Ben Yu  */
end_comment

begin_class
DECL|class|AbstractInvocationHandlerTest
specifier|public
class|class
name|AbstractInvocationHandlerTest
extends|extends
name|TestCase
block|{
DECL|field|delegate
specifier|private
specifier|final
name|ImmutableList
argument_list|<
name|String
argument_list|>
name|delegate
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"one"
argument_list|,
literal|"two"
argument_list|)
decl_stmt|;
DECL|field|handler
specifier|private
specifier|final
name|DelegatingInvocationHandler
name|handler
init|=
operator|new
name|DelegatingInvocationHandler
argument_list|(
name|delegate
argument_list|)
decl_stmt|;
DECL|method|testDelegate ()
specifier|public
name|void
name|testDelegate
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|delegate
argument_list|,
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|newDelegatingProxy
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testToString ()
specifier|public
name|void
name|testToString
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|handler
operator|.
name|toString
argument_list|()
argument_list|,
name|newDelegatingProxy
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testEquals ()
specifier|public
name|void
name|testEquals
parameter_list|()
block|{
operator|new
name|EqualsTester
argument_list|()
operator|.
name|addEqualityGroup
argument_list|(
name|newDelegatingProxy
argument_list|()
argument_list|)
comment|// Actually, this violates List#equals contract.
comment|// But whatever, no one is going to proxy List (hopefully).
operator|.
name|addEqualityGroup
argument_list|(
name|newDelegatingProxy
argument_list|()
argument_list|)
operator|.
name|testEquals
argument_list|()
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// proxy of List<String>
DECL|method|newDelegatingProxy ()
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|newDelegatingProxy
parameter_list|()
block|{
return|return
name|Reflection
operator|.
name|newProxy
argument_list|(
name|List
operator|.
name|class
argument_list|,
name|handler
argument_list|)
return|;
block|}
DECL|class|DelegatingInvocationHandler
specifier|private
specifier|static
class|class
name|DelegatingInvocationHandler
extends|extends
name|AbstractInvocationHandler
block|{
DECL|field|delegate
specifier|private
specifier|final
name|Object
name|delegate
decl_stmt|;
DECL|method|DelegatingInvocationHandler (Object delegate)
specifier|public
name|DelegatingInvocationHandler
parameter_list|(
name|Object
name|delegate
parameter_list|)
block|{
name|this
operator|.
name|delegate
operator|=
name|delegate
expr_stmt|;
block|}
DECL|method|handleInvocation (Object proxy, Method method, Object[] args)
annotation|@
name|Override
specifier|protected
name|Object
name|handleInvocation
parameter_list|(
name|Object
name|proxy
parameter_list|,
name|Method
name|method
parameter_list|,
name|Object
index|[]
name|args
parameter_list|)
throws|throws
name|Throwable
block|{
return|return
name|method
operator|.
name|invoke
argument_list|(
name|delegate
argument_list|,
name|args
argument_list|)
return|;
block|}
DECL|method|toString ()
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"some arbitrary string"
return|;
block|}
block|}
block|}
end_class

end_unit

