begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2006 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.reflect
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|reflect
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|testing
operator|.
name|NullPointerTester
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationHandler
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/** Tests for {@link Reflection} */
end_comment

begin_class
DECL|class|ReflectionTest
specifier|public
class|class
name|ReflectionTest
extends|extends
name|TestCase
block|{
DECL|method|testGetPackageName ()
specifier|public
name|void
name|testGetPackageName
parameter_list|()
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
literal|"java.lang"
argument_list|,
name|Reflection
operator|.
name|getPackageName
argument_list|(
name|Iterable
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"java"
argument_list|,
name|Reflection
operator|.
name|getPackageName
argument_list|(
literal|"java.MyType"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"java.lang"
argument_list|,
name|Reflection
operator|.
name|getPackageName
argument_list|(
name|Iterable
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|Reflection
operator|.
name|getPackageName
argument_list|(
literal|"NoPackage"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"java.util"
argument_list|,
name|Reflection
operator|.
name|getPackageName
argument_list|(
name|Map
operator|.
name|Entry
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testNewProxy ()
specifier|public
name|void
name|testNewProxy
parameter_list|()
throws|throws
name|Exception
block|{
name|Runnable
name|runnable
init|=
name|Reflection
operator|.
name|newProxy
argument_list|(
name|Runnable
operator|.
name|class
argument_list|,
name|X_RETURNER
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"x"
argument_list|,
name|runnable
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testNewProxyCantWorkOnAClass ()
specifier|public
name|void
name|testNewProxyCantWorkOnAClass
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|Reflection
operator|.
name|newProxy
argument_list|(
name|Object
operator|.
name|class
argument_list|,
name|X_RETURNER
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{     }
block|}
DECL|field|X_RETURNER
specifier|private
specifier|static
specifier|final
name|InvocationHandler
name|X_RETURNER
init|=
operator|new
name|InvocationHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|invoke
parameter_list|(
name|Object
name|proxy
parameter_list|,
name|Method
name|method
parameter_list|,
name|Object
index|[]
name|args
parameter_list|)
throws|throws
name|Throwable
block|{
return|return
literal|"x"
return|;
block|}
block|}
decl_stmt|;
DECL|field|classesInitialized
specifier|private
specifier|static
name|int
name|classesInitialized
init|=
literal|0
decl_stmt|;
DECL|class|A
specifier|private
specifier|static
class|class
name|A
block|{
static|static
block|{
operator|++
name|classesInitialized
expr_stmt|;
block|}
block|}
DECL|class|B
specifier|private
specifier|static
class|class
name|B
block|{
static|static
block|{
operator|++
name|classesInitialized
expr_stmt|;
block|}
block|}
DECL|class|C
specifier|private
specifier|static
class|class
name|C
block|{
static|static
block|{
operator|++
name|classesInitialized
expr_stmt|;
block|}
block|}
DECL|method|testInitialize ()
specifier|public
name|void
name|testInitialize
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"This test can't be included twice in the same suite."
argument_list|,
literal|0
argument_list|,
name|classesInitialized
argument_list|)
expr_stmt|;
name|Reflection
operator|.
name|initialize
argument_list|(
name|A
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|classesInitialized
argument_list|)
expr_stmt|;
name|Reflection
operator|.
name|initialize
argument_list|(
name|A
operator|.
name|class
argument_list|,
comment|// Already initialized (above)
name|B
operator|.
name|class
argument_list|,
name|C
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|classesInitialized
argument_list|)
expr_stmt|;
block|}
DECL|method|testNullPointers ()
specifier|public
name|void
name|testNullPointers
parameter_list|()
throws|throws
name|Exception
block|{
name|NullPointerTester
name|tester
init|=
operator|new
name|NullPointerTester
argument_list|()
decl_stmt|;
name|tester
operator|.
name|setDefault
argument_list|(
name|InvocationHandler
operator|.
name|class
argument_list|,
name|X_RETURNER
argument_list|)
expr_stmt|;
name|tester
operator|.
name|setDefault
argument_list|(
name|Type
index|[]
operator|.
expr|class
argument_list|,
operator|new
name|Type
index|[]
block|{
name|Map
operator|.
name|class
block|}
argument_list|)
expr_stmt|;
name|tester
operator|.
name|setDefault
argument_list|(
name|Type
operator|.
name|class
argument_list|,
name|String
operator|.
name|class
argument_list|)
expr_stmt|;
name|tester
operator|.
name|testAllPublicStaticMethods
argument_list|(
name|Reflection
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

