begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2012 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.reflect
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|reflect
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|testing
operator|.
name|EqualsTester
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|testing
operator|.
name|NullPointerTester
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_comment
comment|/**  * Tests for {@link Parameter}.  *  * @author Ben Yu  */
end_comment

begin_class
DECL|class|ParameterTest
specifier|public
class|class
name|ParameterTest
extends|extends
name|TestCase
block|{
DECL|method|testNulls ()
specifier|public
name|void
name|testNulls
parameter_list|()
block|{
for|for
control|(
name|Method
name|method
range|:
name|ParameterTest
operator|.
name|class
operator|.
name|getDeclaredMethods
argument_list|()
control|)
block|{
for|for
control|(
name|Parameter
name|param
range|:
name|Invokable
operator|.
name|from
argument_list|(
name|method
argument_list|)
operator|.
name|getParameters
argument_list|()
control|)
block|{
operator|new
name|NullPointerTester
argument_list|()
operator|.
name|testAllPublicInstanceMethods
argument_list|(
name|param
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|testEquals ()
specifier|public
name|void
name|testEquals
parameter_list|()
block|{
name|EqualsTester
name|tester
init|=
operator|new
name|EqualsTester
argument_list|()
decl_stmt|;
for|for
control|(
name|Method
name|method
range|:
name|ParameterTest
operator|.
name|class
operator|.
name|getDeclaredMethods
argument_list|()
control|)
block|{
for|for
control|(
name|Parameter
name|param
range|:
name|Invokable
operator|.
name|from
argument_list|(
name|method
argument_list|)
operator|.
name|getParameters
argument_list|()
control|)
block|{
name|tester
operator|.
name|addEqualityGroup
argument_list|(
name|param
argument_list|)
expr_stmt|;
block|}
block|}
name|tester
operator|.
name|testEquals
argument_list|()
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
DECL|method|someMethod (int i, int j)
specifier|private
name|void
name|someMethod
parameter_list|(
name|int
name|i
parameter_list|,
name|int
name|j
parameter_list|)
block|{}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
DECL|method|anotherMethod (int i, String s)
specifier|private
name|void
name|anotherMethod
parameter_list|(
name|int
name|i
parameter_list|,
name|String
name|s
parameter_list|)
block|{}
block|}
end_class

end_unit

