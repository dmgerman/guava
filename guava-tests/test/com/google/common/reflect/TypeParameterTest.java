begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2011 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.reflect
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|reflect
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|testing
operator|.
name|NullPointerTester
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|TypeVariable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Unit test for {@link TypeParameter}.  *  * @author Ben Yu  */
end_comment

begin_class
DECL|class|TypeParameterTest
specifier|public
class|class
name|TypeParameterTest
extends|extends
name|TestCase
block|{
DECL|method|testCaptureTypeParameter ()
specifier|public
parameter_list|<
name|T
parameter_list|>
name|void
name|testCaptureTypeParameter
parameter_list|()
throws|throws
name|Exception
block|{
name|TypeVariable
argument_list|<
name|?
argument_list|>
name|variable
init|=
operator|new
name|TypeParameter
argument_list|<
name|T
argument_list|>
argument_list|()
block|{}
operator|.
name|typeVariable
decl_stmt|;
name|TypeVariable
argument_list|<
name|?
argument_list|>
name|expected
init|=
name|TypeParameterTest
operator|.
name|class
operator|.
name|getDeclaredMethod
argument_list|(
literal|"testCaptureTypeParameter"
argument_list|)
operator|.
name|getTypeParameters
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|variable
argument_list|)
expr_stmt|;
block|}
DECL|method|testConcreteTypeRejected ()
specifier|public
name|void
name|testConcreteTypeRejected
parameter_list|()
block|{
try|try
block|{
operator|new
name|TypeParameter
argument_list|<
name|String
argument_list|>
argument_list|()
block|{}
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{}
block|}
DECL|method|testNullPointers ()
specifier|public
name|void
name|testNullPointers
parameter_list|()
block|{
name|NullPointerTester
name|tester
init|=
operator|new
name|NullPointerTester
argument_list|()
decl_stmt|;
name|tester
operator|.
name|setDefault
argument_list|(
name|TypeVariable
operator|.
name|class
argument_list|,
name|Types
operator|.
name|newTypeVariable
argument_list|(
name|List
operator|.
name|class
argument_list|,
literal|"E"
argument_list|)
argument_list|)
expr_stmt|;
name|tester
operator|.
name|testAllPublicStaticMethods
argument_list|(
name|TypeParameter
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

