begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2009 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.reflect
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|reflect
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|contrib
operator|.
name|truth
operator|.
name|Truth
operator|.
name|ASSERT
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Supplier
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|GenericArrayType
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|ParameterizedType
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|TypeVariable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|WildcardType
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * Unit test for {@link TypeToken} and {@link TypeResolver}.  *   * @author Ben Yu  */
end_comment

begin_class
DECL|class|TypeTokenResolutionTest
specifier|public
class|class
name|TypeTokenResolutionTest
extends|extends
name|TestCase
block|{
DECL|class|Foo
specifier|private
specifier|static
class|class
name|Foo
parameter_list|<
name|A
parameter_list|,
name|B
parameter_list|>
block|{
DECL|method|getClassA ()
name|Class
argument_list|<
name|?
super|super
name|A
argument_list|>
name|getClassA
parameter_list|()
block|{
return|return
operator|new
name|TypeToken
argument_list|<
name|A
argument_list|>
argument_list|(
name|getClass
argument_list|()
argument_list|)
block|{}
operator|.
name|getRawType
argument_list|()
return|;
block|}
DECL|method|getClassB ()
name|Class
argument_list|<
name|?
super|super
name|B
argument_list|>
name|getClassB
parameter_list|()
block|{
return|return
operator|new
name|TypeToken
argument_list|<
name|B
argument_list|>
argument_list|(
name|getClass
argument_list|()
argument_list|)
block|{}
operator|.
name|getRawType
argument_list|()
return|;
block|}
DECL|method|getArrayClassA ()
name|Class
operator|<
condition|?
name|super
name|A
index|[]
operator|>
name|getArrayClassA
argument_list|()
block|{
return|return
operator|new
name|TypeToken
argument_list|<
name|A
index|[]
argument_list|>
argument_list|(
name|getClass
argument_list|()
argument_list|)
block|{
block|}
operator|.
name|getRawType
argument_list|()
expr_stmt|;
block|}
DECL|method|getArrayTypeA ()
name|Type
name|getArrayTypeA
parameter_list|()
block|{
return|return
operator|new
name|TypeToken
argument_list|<
name|A
index|[]
argument_list|>
argument_list|(
name|getClass
argument_list|()
argument_list|)
block|{}
operator|.
name|getType
argument_list|()
return|;
block|}
DECL|method|getArrayClassB ()
name|Class
operator|<
condition|?
name|super
name|B
index|[]
operator|>
name|getArrayClassB
argument_list|()
block|{
return|return
operator|new
name|TypeToken
argument_list|<
name|B
index|[]
argument_list|>
argument_list|(
name|getClass
argument_list|()
argument_list|)
block|{
block|}
operator|.
name|getRawType
argument_list|()
expr_stmt|;
block|}
end_class

begin_function
unit|}      public
DECL|method|testSimpleTypeToken ()
name|void
name|testSimpleTypeToken
parameter_list|()
block|{
name|Foo
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|foo
init|=
operator|new
name|Foo
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|()
block|{}
decl_stmt|;
name|assertEquals
argument_list|(
name|String
operator|.
name|class
argument_list|,
name|foo
operator|.
name|getClassA
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|class
argument_list|,
name|foo
operator|.
name|getClassB
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|String
index|[]
operator|.
expr|class
argument_list|,
name|foo
operator|.
name|getArrayClassA
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
index|[]
operator|.
expr|class
argument_list|,
name|foo
operator|.
name|getArrayClassB
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|testCompositeTypeToken ()
specifier|public
name|void
name|testCompositeTypeToken
parameter_list|()
block|{
name|Foo
argument_list|<
name|String
index|[]
argument_list|,
name|List
argument_list|<
name|int
index|[]
argument_list|>
argument_list|>
name|foo
init|=
operator|new
name|Foo
argument_list|<
name|String
index|[]
argument_list|,
name|List
argument_list|<
name|int
index|[]
argument_list|>
argument_list|>
argument_list|()
block|{}
decl_stmt|;
name|assertEquals
argument_list|(
name|String
index|[]
operator|.
expr|class
argument_list|,
name|foo
operator|.
name|getClassA
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|List
operator|.
name|class
argument_list|,
name|foo
operator|.
name|getClassB
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|String
index|[]
index|[]
operator|.
expr|class
argument_list|,
name|foo
operator|.
name|getArrayClassA
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|List
index|[]
operator|.
expr|class
argument_list|,
name|foo
operator|.
name|getArrayClassB
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function

begin_class
DECL|class|StringFoo
specifier|private
specifier|static
class|class
name|StringFoo
parameter_list|<
name|T
parameter_list|>
extends|extends
name|Foo
argument_list|<
name|String
argument_list|,
name|T
argument_list|>
block|{}
end_class

begin_function
DECL|method|testPartialSpecialization ()
specifier|public
name|void
name|testPartialSpecialization
parameter_list|()
block|{
name|StringFoo
argument_list|<
name|Integer
argument_list|>
name|foo
init|=
operator|new
name|StringFoo
argument_list|<
name|Integer
argument_list|>
argument_list|()
block|{}
decl_stmt|;
name|assertEquals
argument_list|(
name|String
operator|.
name|class
argument_list|,
name|foo
operator|.
name|getClassA
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|class
argument_list|,
name|foo
operator|.
name|getClassB
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|String
index|[]
operator|.
expr|class
argument_list|,
name|foo
operator|.
name|getArrayClassA
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
index|[]
operator|.
expr|class
argument_list|,
name|foo
operator|.
name|getArrayClassB
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|String
index|[]
argument_list|>
argument_list|()
block|{}
operator|.
name|getType
argument_list|()
argument_list|,
name|foo
operator|.
name|getArrayTypeA
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|testTypeArgNotFound ()
specifier|public
name|void
name|testTypeArgNotFound
parameter_list|()
block|{
name|StringFoo
argument_list|<
name|Integer
argument_list|>
name|foo
init|=
operator|new
name|StringFoo
argument_list|<
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|String
operator|.
name|class
argument_list|,
name|foo
operator|.
name|getClassA
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|String
index|[]
operator|.
expr|class
argument_list|,
name|foo
operator|.
name|getArrayClassA
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Object
operator|.
name|class
argument_list|,
name|foo
operator|.
name|getClassB
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Object
index|[]
operator|.
expr|class
argument_list|,
name|foo
operator|.
name|getArrayClassB
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function

begin_class
DECL|class|Bar
specifier|private
specifier|static
specifier|abstract
class|class
name|Bar
parameter_list|<
name|T
parameter_list|>
block|{}
end_class

begin_class
DECL|class|Parameterized
specifier|private
specifier|abstract
specifier|static
class|class
name|Parameterized
parameter_list|<
name|O
parameter_list|,
name|T
parameter_list|,
name|P
parameter_list|>
block|{
DECL|method|parameterizedType ()
name|ParameterizedType
name|parameterizedType
parameter_list|()
block|{
return|return
operator|new
name|ParameterizedType
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Type
index|[]
name|getActualTypeArguments
parameter_list|()
block|{
return|return
operator|new
name|Type
index|[]
block|{
operator|new
name|TypeCapture
argument_list|<
name|P
argument_list|>
argument_list|()
block|{
block|}
operator|.
name|capture
argument_list|()
block|}
empty_stmt|;
block|}
expr|@
name|Override
specifier|public
name|Type
name|getOwnerType
argument_list|()
block|{
return|return
operator|new
name|TypeCapture
argument_list|<
name|O
argument_list|>
argument_list|()
block|{
block|}
operator|.
name|capture
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Type
name|getRawType
parameter_list|()
block|{
return|return
operator|new
name|TypeCapture
argument_list|<
name|T
argument_list|>
argument_list|()
block|{}
operator|.
name|capture
argument_list|()
return|;
block|}
block|}
end_class

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_function
unit|}   }
DECL|method|testResolveType_parameterizedType ()
specifier|public
name|void
name|testResolveType_parameterizedType
parameter_list|()
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
comment|// trying to test raw type
name|Parameterized
argument_list|<
name|?
argument_list|,
name|?
argument_list|,
name|?
argument_list|>
name|parameterized
init|=
operator|new
name|Parameterized
argument_list|<
name|TypeTokenResolutionTest
argument_list|,
name|Bar
argument_list|,
name|String
argument_list|>
argument_list|()
block|{}
decl_stmt|;
name|TypeResolver
name|typeResolver
init|=
name|TypeResolver
operator|.
name|accordingTo
argument_list|(
name|parameterized
operator|.
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
name|ParameterizedType
name|resolved
init|=
operator|(
name|ParameterizedType
operator|)
name|typeResolver
operator|.
name|resolveType
argument_list|(
name|parameterized
operator|.
name|parameterizedType
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|TypeTokenResolutionTest
operator|.
name|class
argument_list|,
name|resolved
operator|.
name|getOwnerType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Bar
operator|.
name|class
argument_list|,
name|resolved
operator|.
name|getRawType
argument_list|()
argument_list|)
expr_stmt|;
name|ASSERT
operator|.
name|that
argument_list|(
name|resolved
operator|.
name|getActualTypeArguments
argument_list|()
argument_list|)
operator|.
name|hasContentsInOrder
argument_list|(
name|String
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
end_function

begin_interface
DECL|interface|StringListPredicate
specifier|private
interface|interface
name|StringListPredicate
extends|extends
name|Predicate
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
block|{}
end_interface

begin_interface
DECL|interface|IntegerSupplier
specifier|private
interface|interface
name|IntegerSupplier
extends|extends
name|Supplier
argument_list|<
name|Integer
argument_list|>
block|{}
end_interface

begin_comment
comment|// Intentionally duplicate the Predicate interface to test that it won't cause
end_comment

begin_comment
comment|// exceptions
end_comment

begin_interface
DECL|interface|IntegerStringFunction
specifier|private
interface|interface
name|IntegerStringFunction
extends|extends
name|IntegerSupplier
extends|,
name|Predicate
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
extends|,
name|StringListPredicate
block|{}
end_interface

begin_function
DECL|method|testGenericInterface ()
specifier|public
name|void
name|testGenericInterface
parameter_list|()
block|{
comment|// test the 1st generic interface on the class
name|Type
name|fType
init|=
name|Supplier
operator|.
name|class
operator|.
name|getTypeParameters
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|class
argument_list|,
name|TypeToken
operator|.
name|of
argument_list|(
name|IntegerStringFunction
operator|.
name|class
argument_list|)
operator|.
name|resolveType
argument_list|(
name|fType
argument_list|)
operator|.
name|getRawType
argument_list|()
argument_list|)
expr_stmt|;
comment|// test the 2nd generic interface on the class
name|Type
name|predicateParameterType
init|=
name|Predicate
operator|.
name|class
operator|.
name|getTypeParameters
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
name|assertEquals
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
block|{}
operator|.
name|getType
argument_list|()
argument_list|,
name|TypeToken
operator|.
name|of
argument_list|(
name|IntegerStringFunction
operator|.
name|class
argument_list|)
operator|.
name|resolveType
argument_list|(
name|predicateParameterType
argument_list|)
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function

begin_class
DECL|class|StringIntegerFoo
specifier|private
specifier|static
specifier|abstract
class|class
name|StringIntegerFoo
extends|extends
name|Foo
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
block|{}
end_class

begin_function
DECL|method|testConstructor_typeArgsResolvedFromAncestorClass ()
specifier|public
name|void
name|testConstructor_typeArgsResolvedFromAncestorClass
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|String
operator|.
name|class
argument_list|,
operator|new
name|StringIntegerFoo
argument_list|()
block|{}
operator|.
name|getClassA
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|class
argument_list|,
operator|new
name|StringIntegerFoo
argument_list|()
block|{}
operator|.
name|getClassB
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function

begin_class
DECL|class|Owner
specifier|private
specifier|static
class|class
name|Owner
parameter_list|<
name|T
parameter_list|>
block|{
DECL|class|Nested
specifier|private
specifier|static
specifier|abstract
class|class
name|Nested
parameter_list|<
name|X
parameter_list|>
block|{
DECL|method|getTypeArgument ()
name|Class
argument_list|<
name|?
super|super
name|X
argument_list|>
name|getTypeArgument
parameter_list|()
block|{
return|return
operator|new
name|TypeToken
argument_list|<
name|X
argument_list|>
argument_list|(
name|getClass
argument_list|()
argument_list|)
block|{}
operator|.
name|getRawType
argument_list|()
return|;
block|}
block|}
DECL|class|Inner
specifier|private
specifier|abstract
class|class
name|Inner
parameter_list|<
name|Y
parameter_list|>
extends|extends
name|Nested
argument_list|<
name|Y
argument_list|>
block|{
DECL|method|getOwnerType ()
name|Class
argument_list|<
name|?
super|super
name|T
argument_list|>
name|getOwnerType
parameter_list|()
block|{
return|return
operator|new
name|TypeToken
argument_list|<
name|T
argument_list|>
argument_list|(
name|getClass
argument_list|()
argument_list|)
block|{}
operator|.
name|getRawType
argument_list|()
return|;
block|}
block|}
block|}
end_class

begin_function
DECL|method|testResolveNestedClass ()
specifier|public
name|void
name|testResolveNestedClass
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|String
operator|.
name|class
argument_list|,
operator|new
name|Owner
operator|.
name|Nested
argument_list|<
name|String
argument_list|>
argument_list|()
block|{}
operator|.
name|getTypeArgument
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|testResolveInnerClass ()
specifier|public
name|void
name|testResolveInnerClass
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|String
operator|.
name|class
argument_list|,
operator|new
name|Owner
argument_list|<
name|Integer
argument_list|>
argument_list|()
operator|.
operator|new
name|Inner
argument_list|<
name|String
argument_list|>
argument_list|()
block|{}
operator|.
name|getTypeArgument
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|testResolveOwnerClass ()
specifier|public
name|void
name|testResolveOwnerClass
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|Integer
operator|.
name|class
argument_list|,
operator|new
name|Owner
argument_list|<
name|Integer
argument_list|>
argument_list|()
operator|.
operator|new
name|Inner
argument_list|<
name|String
argument_list|>
argument_list|()
block|{}
operator|.
name|getOwnerType
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function

begin_class
DECL|class|Mapping
specifier|private
specifier|static
class|class
name|Mapping
parameter_list|<
name|F
parameter_list|,
name|T
parameter_list|>
block|{
DECL|field|f
specifier|final
name|Type
name|f
init|=
operator|new
name|TypeToken
argument_list|<
name|F
argument_list|>
argument_list|(
name|getClass
argument_list|()
argument_list|)
block|{}
operator|.
name|getType
argument_list|()
decl_stmt|;
DECL|field|t
specifier|final
name|Type
name|t
init|=
operator|new
name|TypeToken
argument_list|<
name|T
argument_list|>
argument_list|(
name|getClass
argument_list|()
argument_list|)
block|{}
operator|.
name|getType
argument_list|()
decl_stmt|;
DECL|method|getFromType ()
name|Type
name|getFromType
parameter_list|()
block|{
return|return
operator|new
name|TypeToken
argument_list|<
name|F
argument_list|>
argument_list|(
name|getClass
argument_list|()
argument_list|)
block|{}
operator|.
name|getType
argument_list|()
return|;
block|}
DECL|method|getToType ()
name|Type
name|getToType
parameter_list|()
block|{
return|return
operator|new
name|TypeToken
argument_list|<
name|T
argument_list|>
argument_list|(
name|getClass
argument_list|()
argument_list|)
block|{}
operator|.
name|getType
argument_list|()
return|;
block|}
DECL|method|flip ()
name|Mapping
argument_list|<
name|T
argument_list|,
name|F
argument_list|>
name|flip
parameter_list|()
block|{
return|return
operator|new
name|Mapping
argument_list|<
name|T
argument_list|,
name|F
argument_list|>
argument_list|()
block|{}
return|;
block|}
DECL|method|selfMapping ()
name|Mapping
argument_list|<
name|F
argument_list|,
name|T
argument_list|>
name|selfMapping
parameter_list|()
block|{
return|return
operator|new
name|Mapping
argument_list|<
name|F
argument_list|,
name|T
argument_list|>
argument_list|()
block|{}
return|;
block|}
block|}
end_class

begin_function
DECL|method|testCyclicMapping ()
specifier|public
name|void
name|testCyclicMapping
parameter_list|()
block|{
name|Mapping
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|mapping
init|=
operator|new
name|Mapping
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|mapping
operator|.
name|f
argument_list|,
name|mapping
operator|.
name|getFromType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|mapping
operator|.
name|t
argument_list|,
name|mapping
operator|.
name|getToType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|mapping
operator|.
name|f
argument_list|,
name|mapping
operator|.
name|flip
argument_list|()
operator|.
name|getFromType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|mapping
operator|.
name|t
argument_list|,
name|mapping
operator|.
name|flip
argument_list|()
operator|.
name|getToType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|mapping
operator|.
name|f
argument_list|,
name|mapping
operator|.
name|selfMapping
argument_list|()
operator|.
name|getFromType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|mapping
operator|.
name|t
argument_list|,
name|mapping
operator|.
name|selfMapping
argument_list|()
operator|.
name|getToType
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function

begin_class
DECL|class|ParameterizedOuter
specifier|private
specifier|static
class|class
name|ParameterizedOuter
parameter_list|<
name|T
parameter_list|>
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
comment|// used by reflection
DECL|field|field
specifier|public
name|Inner
name|field
decl_stmt|;
DECL|class|Inner
class|class
name|Inner
block|{}
block|}
end_class

begin_function
DECL|method|testInnerClassWithParameterizedOwner ()
specifier|public
name|void
name|testInnerClassWithParameterizedOwner
parameter_list|()
throws|throws
name|Exception
block|{
name|Type
name|fieldType
init|=
name|ParameterizedOuter
operator|.
name|class
operator|.
name|getField
argument_list|(
literal|"field"
argument_list|)
operator|.
name|getGenericType
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|fieldType
argument_list|,
name|TypeToken
operator|.
name|of
argument_list|(
name|ParameterizedOuter
operator|.
name|class
argument_list|)
operator|.
name|resolveType
argument_list|(
name|fieldType
argument_list|)
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function

begin_interface
DECL|interface|StringIterable
specifier|private
interface|interface
name|StringIterable
extends|extends
name|Iterable
argument_list|<
name|String
argument_list|>
block|{}
end_interface

begin_function
DECL|method|testResolveType ()
specifier|public
name|void
name|testResolveType
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|String
operator|.
name|class
argument_list|,
name|TypeToken
operator|.
name|of
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
argument_list|)
operator|.
name|resolveType
argument_list|(
name|String
operator|.
name|class
argument_list|)
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|String
operator|.
name|class
argument_list|,
name|TypeToken
operator|.
name|of
argument_list|(
name|StringIterable
operator|.
name|class
argument_list|)
operator|.
name|resolveType
argument_list|(
name|Iterable
operator|.
name|class
operator|.
name|getTypeParameters
argument_list|()
index|[
literal|0
index|]
argument_list|)
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|String
operator|.
name|class
argument_list|,
name|TypeToken
operator|.
name|of
argument_list|(
name|StringIterable
operator|.
name|class
argument_list|)
operator|.
name|resolveType
argument_list|(
name|Iterable
operator|.
name|class
operator|.
name|getTypeParameters
argument_list|()
index|[
literal|0
index|]
argument_list|)
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|TypeToken
operator|.
name|of
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
argument_list|)
operator|.
name|resolveType
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|expected
parameter_list|)
block|{}
block|}
end_function

begin_function
DECL|method|testConextIsParameterizedType ()
specifier|public
name|void
name|testConextIsParameterizedType
parameter_list|()
throws|throws
name|Exception
block|{
class|class
name|Context
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
comment|// used by reflection
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|returningMap
parameter_list|()
block|{
throw|throw
operator|new
name|AssertionError
argument_list|()
throw|;
block|}
block|}
name|Type
name|context
init|=
name|Context
operator|.
name|class
operator|.
name|getDeclaredMethod
argument_list|(
literal|"returningMap"
argument_list|)
operator|.
name|getGenericReturnType
argument_list|()
decl_stmt|;
name|Type
name|keyType
init|=
name|Map
operator|.
name|class
operator|.
name|getTypeParameters
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
name|Type
name|valueType
init|=
name|Map
operator|.
name|class
operator|.
name|getTypeParameters
argument_list|()
index|[
literal|1
index|]
decl_stmt|;
comment|// context is parameterized type
name|assertEquals
argument_list|(
name|String
operator|.
name|class
argument_list|,
name|TypeToken
operator|.
name|of
argument_list|(
name|context
argument_list|)
operator|.
name|resolveType
argument_list|(
name|keyType
argument_list|)
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|class
argument_list|,
name|TypeToken
operator|.
name|of
argument_list|(
name|context
argument_list|)
operator|.
name|resolveType
argument_list|(
name|valueType
argument_list|)
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
comment|// context is type variable
name|assertEquals
argument_list|(
name|keyType
argument_list|,
name|TypeToken
operator|.
name|of
argument_list|(
name|keyType
argument_list|)
operator|.
name|resolveType
argument_list|(
name|keyType
argument_list|)
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|valueType
argument_list|,
name|TypeToken
operator|.
name|of
argument_list|(
name|valueType
argument_list|)
operator|.
name|resolveType
argument_list|(
name|valueType
argument_list|)
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function

begin_class
DECL|class|GenericArray
specifier|private
specifier|static
specifier|final
class|class
name|GenericArray
parameter_list|<
name|T
parameter_list|>
block|{
DECL|field|t
specifier|final
name|Type
name|t
init|=
operator|new
name|TypeToken
argument_list|<
name|T
argument_list|>
argument_list|(
name|getClass
argument_list|()
argument_list|)
block|{}
operator|.
name|getType
argument_list|()
decl_stmt|;
DECL|field|array
specifier|final
name|Type
name|array
init|=
operator|new
name|TypeToken
argument_list|<
name|T
index|[]
argument_list|>
argument_list|(
name|getClass
argument_list|()
argument_list|)
block|{}
operator|.
name|getType
argument_list|()
decl_stmt|;
block|}
end_class

begin_function
DECL|method|testGenericArrayType ()
specifier|public
name|void
name|testGenericArrayType
parameter_list|()
block|{
name|GenericArray
argument_list|<
name|?
argument_list|>
name|genericArray
init|=
operator|new
name|GenericArray
argument_list|<
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|GenericArray
operator|.
name|class
operator|.
name|getTypeParameters
argument_list|()
index|[
literal|0
index|]
argument_list|,
name|genericArray
operator|.
name|t
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Types
operator|.
name|newArrayType
argument_list|(
name|genericArray
operator|.
name|t
argument_list|)
argument_list|,
name|genericArray
operator|.
name|array
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|testClassWrapper ()
specifier|public
name|void
name|testClassWrapper
parameter_list|()
block|{
name|TypeToken
argument_list|<
name|String
argument_list|>
name|typeExpression
init|=
name|TypeToken
operator|.
name|of
argument_list|(
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|String
operator|.
name|class
argument_list|,
name|typeExpression
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|String
operator|.
name|class
argument_list|,
name|typeExpression
operator|.
name|getRawType
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function

begin_class
DECL|class|Red
specifier|private
specifier|static
class|class
name|Red
parameter_list|<
name|A
parameter_list|>
block|{
DECL|class|Orange
specifier|private
class|class
name|Orange
block|{
DECL|method|getClassA ()
name|Class
argument_list|<
name|?
argument_list|>
name|getClassA
parameter_list|()
block|{
return|return
operator|new
name|TypeToken
argument_list|<
name|A
argument_list|>
argument_list|(
name|getClass
argument_list|()
argument_list|)
block|{}
operator|.
name|getRawType
argument_list|()
return|;
block|}
DECL|method|getSelfB ()
name|Red
argument_list|<
name|A
argument_list|>
name|getSelfB
parameter_list|()
block|{
return|return
name|Red
operator|.
name|this
return|;
block|}
block|}
DECL|method|getSelfA ()
name|Red
argument_list|<
name|A
argument_list|>
name|getSelfA
parameter_list|()
block|{
return|return
name|this
return|;
block|}
DECL|class|Yellow
specifier|private
class|class
name|Yellow
parameter_list|<
name|B
parameter_list|>
extends|extends
name|Red
argument_list|<
name|B
argument_list|>
operator|.
name|Orange
block|{
DECL|method|Yellow (Red<B> red)
name|Yellow
parameter_list|(
name|Red
argument_list|<
name|B
argument_list|>
name|red
parameter_list|)
block|{
name|red
operator|.
name|super
argument_list|()
expr_stmt|;
block|}
DECL|method|getClassB ()
name|Class
argument_list|<
name|?
argument_list|>
name|getClassB
parameter_list|()
block|{
return|return
operator|new
name|TypeToken
argument_list|<
name|B
argument_list|>
argument_list|(
name|getClass
argument_list|()
argument_list|)
block|{}
operator|.
name|getRawType
argument_list|()
return|;
block|}
DECL|method|getA ()
name|Red
argument_list|<
name|A
argument_list|>
name|getA
parameter_list|()
block|{
return|return
name|getSelfA
argument_list|()
return|;
block|}
DECL|method|getB ()
name|Red
argument_list|<
name|B
argument_list|>
name|getB
parameter_list|()
block|{
return|return
name|getSelfB
argument_list|()
return|;
block|}
block|}
DECL|method|getClassDirect ()
name|Class
argument_list|<
name|?
argument_list|>
name|getClassDirect
parameter_list|()
block|{
return|return
operator|new
name|TypeToken
argument_list|<
name|A
argument_list|>
argument_list|(
name|getClass
argument_list|()
argument_list|)
block|{}
operator|.
name|getRawType
argument_list|()
return|;
block|}
block|}
end_class

begin_function
DECL|method|test1 ()
specifier|public
name|void
name|test1
parameter_list|()
block|{
name|Red
argument_list|<
name|String
argument_list|>
name|redString
init|=
operator|new
name|Red
argument_list|<
name|String
argument_list|>
argument_list|()
block|{}
decl_stmt|;
name|Red
argument_list|<
name|Integer
argument_list|>
name|redInteger
init|=
operator|new
name|Red
argument_list|<
name|Integer
argument_list|>
argument_list|()
block|{}
decl_stmt|;
name|assertEquals
argument_list|(
name|String
operator|.
name|class
argument_list|,
name|redString
operator|.
name|getClassDirect
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|class
argument_list|,
name|redInteger
operator|.
name|getClassDirect
argument_list|()
argument_list|)
expr_stmt|;
name|Red
argument_list|<
name|String
argument_list|>
operator|.
name|Yellow
argument_list|<
name|Integer
argument_list|>
name|yellowInteger
init|=
name|redString
operator|.
expr|new
name|Yellow
argument_list|<
name|Integer
argument_list|>
argument_list|(
name|redInteger
argument_list|)
block|{}
decl_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|class
argument_list|,
name|yellowInteger
operator|.
name|getClassA
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|class
argument_list|,
name|yellowInteger
operator|.
name|getClassB
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|String
operator|.
name|class
argument_list|,
name|yellowInteger
operator|.
name|getA
argument_list|()
operator|.
name|getClassDirect
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|class
argument_list|,
name|yellowInteger
operator|.
name|getB
argument_list|()
operator|.
name|getClassDirect
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|test2 ()
specifier|public
name|void
name|test2
parameter_list|()
block|{
name|Red
argument_list|<
name|String
argument_list|>
name|redString
init|=
operator|new
name|Red
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|Red
argument_list|<
name|Integer
argument_list|>
name|redInteger
init|=
operator|new
name|Red
argument_list|<
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
name|Red
argument_list|<
name|String
argument_list|>
operator|.
name|Yellow
argument_list|<
name|Integer
argument_list|>
name|yellowInteger
init|=
name|redString
operator|.
expr|new
name|Yellow
argument_list|<
name|Integer
argument_list|>
argument_list|(
name|redInteger
argument_list|)
block|{}
decl_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|class
argument_list|,
name|yellowInteger
operator|.
name|getClassA
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|class
argument_list|,
name|yellowInteger
operator|.
name|getClassB
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|staticMethodWithLocalClass ()
specifier|private
specifier|static
parameter_list|<
name|T
parameter_list|>
name|Type
name|staticMethodWithLocalClass
parameter_list|()
block|{
class|class
name|MyLocalClass
block|{
name|Type
name|getType
parameter_list|()
block|{
return|return
operator|new
name|TypeToken
argument_list|<
name|T
argument_list|>
argument_list|(
name|getClass
argument_list|()
argument_list|)
block|{}
operator|.
name|getType
argument_list|()
return|;
block|}
block|}
return|return
operator|new
name|MyLocalClass
argument_list|()
operator|.
name|getType
argument_list|()
return|;
block|}
end_function

begin_function
DECL|method|testLocalClassInsideStaticMethod ()
specifier|public
name|void
name|testLocalClassInsideStaticMethod
parameter_list|()
block|{
name|assertNotNull
argument_list|(
name|staticMethodWithLocalClass
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|testLocalClassInsideNonStaticMethod ()
specifier|public
name|void
name|testLocalClassInsideNonStaticMethod
parameter_list|()
block|{
class|class
name|MyLocalClass
parameter_list|<
name|T
parameter_list|>
block|{
name|Type
name|getType
parameter_list|()
block|{
return|return
operator|new
name|TypeToken
argument_list|<
name|T
argument_list|>
argument_list|(
name|getClass
argument_list|()
argument_list|)
block|{}
operator|.
name|getType
argument_list|()
return|;
block|}
block|}
name|assertNotNull
argument_list|(
operator|new
name|MyLocalClass
argument_list|<
name|String
argument_list|>
argument_list|()
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|staticMethodWithAnonymousClass ()
specifier|private
specifier|static
parameter_list|<
name|T
parameter_list|>
name|Type
name|staticMethodWithAnonymousClass
parameter_list|()
block|{
return|return
operator|new
name|Object
argument_list|()
block|{
name|Type
name|getType
parameter_list|()
block|{
return|return
operator|new
name|TypeToken
argument_list|<
name|T
argument_list|>
argument_list|(
name|getClass
argument_list|()
argument_list|)
block|{}
operator|.
name|getType
argument_list|()
return|;
block|}
block|}
operator|.
name|getType
argument_list|()
return|;
block|}
end_function

begin_function
DECL|method|testAnonymousClassInsideStaticMethod ()
specifier|public
name|void
name|testAnonymousClassInsideStaticMethod
parameter_list|()
block|{
name|assertNotNull
argument_list|(
name|staticMethodWithAnonymousClass
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|testAnonymousClassInsideNonStaticMethod ()
specifier|public
name|void
name|testAnonymousClassInsideNonStaticMethod
parameter_list|()
block|{
name|assertNotNull
argument_list|(
operator|new
name|Object
argument_list|()
block|{
name|Type
name|getType
parameter_list|()
block|{
return|return
operator|new
name|TypeToken
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{}
operator|.
name|getType
argument_list|()
return|;
block|}
block|}
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|testStaticContext ()
specifier|public
name|void
name|testStaticContext
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|Map
operator|.
name|class
argument_list|,
name|mapType
argument_list|()
operator|.
name|getRawType
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function

begin_class
DECL|class|Holder
specifier|private
specifier|abstract
specifier|static
class|class
name|Holder
parameter_list|<
name|T
parameter_list|>
block|{
DECL|method|getContentType ()
name|Type
name|getContentType
parameter_list|()
block|{
return|return
operator|new
name|TypeToken
argument_list|<
name|T
argument_list|>
argument_list|(
name|getClass
argument_list|()
argument_list|)
block|{}
operator|.
name|getType
argument_list|()
return|;
block|}
block|}
end_class

begin_function
DECL|method|testResolvePrimitiveArrayType ()
specifier|public
name|void
name|testResolvePrimitiveArrayType
parameter_list|()
block|{
name|assertEquals
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|int
index|[]
argument_list|>
argument_list|()
block|{}
operator|.
name|getType
argument_list|()
argument_list|,
operator|new
name|Holder
argument_list|<
name|int
index|[]
argument_list|>
argument_list|()
block|{}
operator|.
name|getContentType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|int
index|[]
index|[]
argument_list|>
argument_list|()
block|{}
operator|.
name|getType
argument_list|()
argument_list|,
operator|new
name|Holder
argument_list|<
name|int
index|[]
index|[]
argument_list|>
argument_list|()
block|{}
operator|.
name|getContentType
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|testResolveToGenericArrayType ()
specifier|public
name|void
name|testResolveToGenericArrayType
parameter_list|()
block|{
name|GenericArrayType
name|arrayType
init|=
operator|(
name|GenericArrayType
operator|)
operator|new
name|Holder
argument_list|<
name|List
argument_list|<
name|int
index|[]
index|[]
argument_list|>
index|[]
argument_list|>
argument_list|()
block|{}
operator|.
name|getContentType
argument_list|()
decl_stmt|;
name|ParameterizedType
name|listType
init|=
operator|(
name|ParameterizedType
operator|)
name|arrayType
operator|.
name|getGenericComponentType
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|List
operator|.
name|class
argument_list|,
name|listType
operator|.
name|getRawType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Types
operator|.
name|newArrayType
argument_list|(
name|int
index|[]
operator|.
expr|class
argument_list|)
argument_list|,
name|listType
operator|.
name|getActualTypeArguments
argument_list|()
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
end_function

begin_class
DECL|class|WithGenericBound
specifier|private
specifier|abstract
class|class
name|WithGenericBound
parameter_list|<
name|A
parameter_list|>
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
DECL|method|withTypeVariable (List<B> list)
specifier|public
parameter_list|<
name|B
extends|extends
name|A
parameter_list|>
name|void
name|withTypeVariable
parameter_list|(
name|List
argument_list|<
name|B
argument_list|>
name|list
parameter_list|)
block|{}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
DECL|method|withRecursiveBound (List<E> list)
specifier|public
parameter_list|<
name|E
extends|extends
name|Enum
argument_list|<
name|E
argument_list|>
parameter_list|>
name|void
name|withRecursiveBound
parameter_list|(
name|List
argument_list|<
name|E
argument_list|>
name|list
parameter_list|)
block|{}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
DECL|method|withMutualRecursiveBound ( List<Map<K, V>> list)
specifier|public
parameter_list|<
name|K
extends|extends
name|List
argument_list|<
name|V
argument_list|>
parameter_list|,
name|V
extends|extends
name|List
argument_list|<
name|K
argument_list|>
parameter_list|>
name|void
name|withMutualRecursiveBound
parameter_list|(
name|List
argument_list|<
name|Map
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|list
parameter_list|)
block|{}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
DECL|method|withWildcardLowerBound (List<? super A> list)
name|void
name|withWildcardLowerBound
parameter_list|(
name|List
argument_list|<
name|?
super|super
name|A
argument_list|>
name|list
parameter_list|)
block|{}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
DECL|method|withWildcardUpperBound (List<? extends A> list)
name|void
name|withWildcardUpperBound
parameter_list|(
name|List
argument_list|<
name|?
extends|extends
name|A
argument_list|>
name|list
parameter_list|)
block|{}
DECL|method|getTargetType (String methodName)
name|Type
name|getTargetType
parameter_list|(
name|String
name|methodName
parameter_list|)
throws|throws
name|Exception
block|{
name|ParameterizedType
name|parameterType
init|=
operator|(
name|ParameterizedType
operator|)
name|WithGenericBound
operator|.
name|class
operator|.
name|getDeclaredMethod
argument_list|(
name|methodName
argument_list|,
name|List
operator|.
name|class
argument_list|)
operator|.
name|getGenericParameterTypes
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
name|parameterType
operator|=
operator|(
name|ParameterizedType
operator|)
name|TypeToken
operator|.
name|of
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
argument_list|)
operator|.
name|resolveType
argument_list|(
name|parameterType
argument_list|)
operator|.
name|getType
argument_list|()
expr_stmt|;
return|return
name|parameterType
operator|.
name|getActualTypeArguments
argument_list|()
index|[
literal|0
index|]
return|;
block|}
block|}
end_class

begin_function
DECL|method|testWithGenericBoundInTypeVariable ()
specifier|public
name|void
name|testWithGenericBoundInTypeVariable
parameter_list|()
throws|throws
name|Exception
block|{
name|TypeVariable
argument_list|<
name|?
argument_list|>
name|typeVariable
init|=
operator|(
name|TypeVariable
argument_list|<
name|?
argument_list|>
operator|)
operator|new
name|WithGenericBound
argument_list|<
name|String
argument_list|>
argument_list|()
block|{}
operator|.
name|getTargetType
argument_list|(
literal|"withTypeVariable"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|String
operator|.
name|class
argument_list|,
name|typeVariable
operator|.
name|getBounds
argument_list|()
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|testWithRecursiveBoundInTypeVariable ()
specifier|public
name|void
name|testWithRecursiveBoundInTypeVariable
parameter_list|()
throws|throws
name|Exception
block|{
name|TypeVariable
argument_list|<
name|?
argument_list|>
name|typeVariable
init|=
operator|(
name|TypeVariable
argument_list|<
name|?
argument_list|>
operator|)
operator|new
name|WithGenericBound
argument_list|<
name|String
argument_list|>
argument_list|()
block|{}
operator|.
name|getTargetType
argument_list|(
literal|"withRecursiveBound"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Types
operator|.
name|newParameterizedType
argument_list|(
name|Enum
operator|.
name|class
argument_list|,
name|typeVariable
argument_list|)
argument_list|,
name|typeVariable
operator|.
name|getBounds
argument_list|()
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|testWithMutualRecursiveBoundInTypeVariable ()
specifier|public
name|void
name|testWithMutualRecursiveBoundInTypeVariable
parameter_list|()
throws|throws
name|Exception
block|{
name|ParameterizedType
name|paramType
init|=
operator|(
name|ParameterizedType
operator|)
operator|new
name|WithGenericBound
argument_list|<
name|String
argument_list|>
argument_list|()
block|{}
operator|.
name|getTargetType
argument_list|(
literal|"withMutualRecursiveBound"
argument_list|)
decl_stmt|;
name|TypeVariable
argument_list|<
name|?
argument_list|>
name|k
init|=
operator|(
name|TypeVariable
argument_list|<
name|?
argument_list|>
operator|)
name|paramType
operator|.
name|getActualTypeArguments
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
name|TypeVariable
argument_list|<
name|?
argument_list|>
name|v
init|=
operator|(
name|TypeVariable
argument_list|<
name|?
argument_list|>
operator|)
name|paramType
operator|.
name|getActualTypeArguments
argument_list|()
index|[
literal|1
index|]
decl_stmt|;
name|assertEquals
argument_list|(
name|Types
operator|.
name|newParameterizedType
argument_list|(
name|List
operator|.
name|class
argument_list|,
name|v
argument_list|)
argument_list|,
name|k
operator|.
name|getBounds
argument_list|()
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Types
operator|.
name|newParameterizedType
argument_list|(
name|List
operator|.
name|class
argument_list|,
name|k
argument_list|)
argument_list|,
name|v
operator|.
name|getBounds
argument_list|()
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|testWithGenericLowerBoundInWildcard ()
specifier|public
name|void
name|testWithGenericLowerBoundInWildcard
parameter_list|()
throws|throws
name|Exception
block|{
name|WildcardType
name|wildcardType
init|=
operator|(
name|WildcardType
operator|)
operator|new
name|WithGenericBound
argument_list|<
name|String
argument_list|>
argument_list|()
block|{}
operator|.
name|getTargetType
argument_list|(
literal|"withWildcardLowerBound"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|String
operator|.
name|class
argument_list|,
name|wildcardType
operator|.
name|getLowerBounds
argument_list|()
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|testWithGenericUpperBoundInWildcard ()
specifier|public
name|void
name|testWithGenericUpperBoundInWildcard
parameter_list|()
throws|throws
name|Exception
block|{
name|WildcardType
name|wildcardType
init|=
operator|(
name|WildcardType
operator|)
operator|new
name|WithGenericBound
argument_list|<
name|String
argument_list|>
argument_list|()
block|{}
operator|.
name|getTargetType
argument_list|(
literal|"withWildcardUpperBound"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|String
operator|.
name|class
argument_list|,
name|wildcardType
operator|.
name|getUpperBounds
argument_list|()
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|testInterfaceTypeParameterResolution ()
specifier|public
name|void
name|testInterfaceTypeParameterResolution
parameter_list|()
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
name|String
operator|.
name|class
argument_list|,
name|TypeToken
operator|.
name|of
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
block|{}
operator|.
name|getType
argument_list|()
argument_list|)
operator|.
name|resolveType
argument_list|(
name|List
operator|.
name|class
operator|.
name|getTypeParameters
argument_list|()
index|[
literal|0
index|]
argument_list|)
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|mapType ()
specifier|private
specifier|static
name|TypeToken
argument_list|<
name|Map
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
argument_list|>
name|mapType
parameter_list|()
block|{
return|return
operator|new
name|TypeToken
argument_list|<
name|Map
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
argument_list|>
argument_list|()
block|{}
return|;
block|}
end_function

begin_comment
comment|// Looks like recursive, but legit.
end_comment

begin_interface
DECL|interface|WithFalseRecursiveType
specifier|private
interface|interface
name|WithFalseRecursiveType
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
block|{
DECL|method|keyShouldNotResolveToStringList ()
name|WithFalseRecursiveType
argument_list|<
name|List
argument_list|<
name|V
argument_list|>
argument_list|,
name|String
argument_list|>
name|keyShouldNotResolveToStringList
parameter_list|()
function_decl|;
DECL|method|shouldNotCauseInfiniteLoop ()
name|WithFalseRecursiveType
argument_list|<
name|List
argument_list|<
name|K
argument_list|>
argument_list|,
name|List
argument_list|<
name|V
argument_list|>
argument_list|>
name|shouldNotCauseInfiniteLoop
parameter_list|()
function_decl|;
DECL|method|evenSubTypeWorks ()
name|SubTypeOfWithFalseRecursiveType
argument_list|<
name|List
argument_list|<
name|V
argument_list|>
argument_list|,
name|List
argument_list|<
name|K
argument_list|>
argument_list|>
name|evenSubTypeWorks
parameter_list|()
function_decl|;
block|}
end_interface

begin_interface
DECL|interface|SubTypeOfWithFalseRecursiveType
specifier|private
interface|interface
name|SubTypeOfWithFalseRecursiveType
parameter_list|<
name|K1
parameter_list|,
name|V1
parameter_list|>
extends|extends
name|WithFalseRecursiveType
argument_list|<
name|List
argument_list|<
name|K1
argument_list|>
argument_list|,
name|List
argument_list|<
name|V1
argument_list|>
argument_list|>
block|{
DECL|method|revertKeyAndValueTypes ()
name|SubTypeOfWithFalseRecursiveType
argument_list|<
name|V1
argument_list|,
name|K1
argument_list|>
name|revertKeyAndValueTypes
parameter_list|()
function_decl|;
block|}
end_interface

begin_function
DECL|method|testFalseRecursiveType_mappingOnTheSameDeclarationNotUsed ()
specifier|public
name|void
name|testFalseRecursiveType_mappingOnTheSameDeclarationNotUsed
parameter_list|()
block|{
name|Type
name|returnType
init|=
name|genericReturnType
argument_list|(
name|WithFalseRecursiveType
operator|.
name|class
argument_list|,
literal|"keyShouldNotResolveToStringList"
argument_list|)
decl_stmt|;
name|TypeToken
argument_list|<
name|?
argument_list|>
name|keyType
init|=
name|TypeToken
operator|.
name|of
argument_list|(
name|returnType
argument_list|)
operator|.
name|resolveType
argument_list|(
name|WithFalseRecursiveType
operator|.
name|class
operator|.
name|getTypeParameters
argument_list|()
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"java.util.List<V>"
argument_list|,
name|keyType
operator|.
name|getType
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|testFalseRecursiveType_notRealRecursiveMapping ()
specifier|public
name|void
name|testFalseRecursiveType_notRealRecursiveMapping
parameter_list|()
block|{
name|Type
name|returnType
init|=
name|genericReturnType
argument_list|(
name|WithFalseRecursiveType
operator|.
name|class
argument_list|,
literal|"shouldNotCauseInfiniteLoop"
argument_list|)
decl_stmt|;
name|TypeToken
argument_list|<
name|?
argument_list|>
name|keyType
init|=
name|TypeToken
operator|.
name|of
argument_list|(
name|returnType
argument_list|)
operator|.
name|resolveType
argument_list|(
name|WithFalseRecursiveType
operator|.
name|class
operator|.
name|getTypeParameters
argument_list|()
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"java.util.List<K>"
argument_list|,
name|keyType
operator|.
name|getType
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|testFalseRecursiveType_referenceOfSubtypeDoesNotConfuseMe ()
specifier|public
name|void
name|testFalseRecursiveType_referenceOfSubtypeDoesNotConfuseMe
parameter_list|()
block|{
name|Type
name|returnType
init|=
name|genericReturnType
argument_list|(
name|WithFalseRecursiveType
operator|.
name|class
argument_list|,
literal|"evenSubTypeWorks"
argument_list|)
decl_stmt|;
name|TypeToken
argument_list|<
name|?
argument_list|>
name|keyType
init|=
name|TypeToken
operator|.
name|of
argument_list|(
name|returnType
argument_list|)
operator|.
name|resolveType
argument_list|(
name|WithFalseRecursiveType
operator|.
name|class
operator|.
name|getTypeParameters
argument_list|()
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"java.util.List<java.util.List<V>>"
argument_list|,
name|keyType
operator|.
name|getType
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|testFalseRecursiveType_intermediaryTypeMappingDoesNotConfuseMe ()
specifier|public
name|void
name|testFalseRecursiveType_intermediaryTypeMappingDoesNotConfuseMe
parameter_list|()
block|{
name|Type
name|returnType
init|=
name|genericReturnType
argument_list|(
name|SubTypeOfWithFalseRecursiveType
operator|.
name|class
argument_list|,
literal|"revertKeyAndValueTypes"
argument_list|)
decl_stmt|;
name|TypeToken
argument_list|<
name|?
argument_list|>
name|keyType
init|=
name|TypeToken
operator|.
name|of
argument_list|(
name|returnType
argument_list|)
operator|.
name|resolveType
argument_list|(
name|WithFalseRecursiveType
operator|.
name|class
operator|.
name|getTypeParameters
argument_list|()
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"java.util.List<K1>"
argument_list|,
name|keyType
operator|.
name|getType
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|genericReturnType (Class<?> cls, String methodName)
specifier|private
specifier|static
name|Type
name|genericReturnType
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|cls
parameter_list|,
name|String
name|methodName
parameter_list|)
block|{
try|try
block|{
return|return
name|cls
operator|.
name|getMethod
argument_list|(
name|methodName
argument_list|)
operator|.
name|getGenericReturnType
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
end_function

unit|}
end_unit

