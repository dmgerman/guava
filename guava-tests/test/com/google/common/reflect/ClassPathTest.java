begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2012 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.reflect
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|reflect
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|contrib
operator|.
name|truth
operator|.
name|Truth
operator|.
name|ASSERT
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Charsets
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|reflect
operator|.
name|ClassPath
operator|.
name|ClassInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|testing
operator|.
name|EqualsTester
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|testing
operator|.
name|NullPointerTester
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLClassLoader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|jar
operator|.
name|Manifest
import|;
end_import

begin_comment
comment|/**  * Functional tests of {@link ClassPath}.  */
end_comment

begin_class
DECL|class|ClassPathTest
specifier|public
class|class
name|ClassPathTest
extends|extends
name|TestCase
block|{
DECL|method|testGetClasses ()
specifier|public
name|void
name|testGetClasses
parameter_list|()
throws|throws
name|Exception
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|names
init|=
name|Sets
operator|.
name|newHashSet
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|strings
init|=
name|Sets
operator|.
name|newHashSet
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|classes
init|=
name|Sets
operator|.
name|newHashSet
argument_list|()
decl_stmt|;
name|ClassPath
name|classpath
init|=
name|ClassPath
operator|.
name|from
argument_list|(
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|ClassInfo
name|classInfo
range|:
name|classpath
operator|.
name|getClasses
argument_list|(
name|ClassPathTest
operator|.
name|class
operator|.
name|getPackage
argument_list|()
argument_list|)
control|)
block|{
name|names
operator|.
name|add
argument_list|(
name|classInfo
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|strings
operator|.
name|add
argument_list|(
name|classInfo
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|classes
operator|.
name|add
argument_list|(
name|classInfo
operator|.
name|load
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|ASSERT
operator|.
name|that
argument_list|(
name|names
argument_list|)
operator|.
name|containsAllOf
argument_list|(
name|ClassPath
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|ClassPathTest
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|ASSERT
operator|.
name|that
argument_list|(
name|strings
argument_list|)
operator|.
name|containsAllOf
argument_list|(
name|ClassPath
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|ClassPathTest
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|ASSERT
operator|.
name|that
argument_list|(
name|classes
argument_list|)
operator|.
name|containsAllOf
argument_list|(
name|ClassPath
operator|.
name|class
argument_list|,
name|ClassPathTest
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
DECL|method|testGetClasses_diamond ()
specifier|public
name|void
name|testGetClasses_diamond
parameter_list|()
throws|throws
name|Exception
block|{
name|ClassLoader
name|parent
init|=
name|ClassPathTest
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
decl_stmt|;
name|ClassLoader
name|sub1
init|=
operator|new
name|ClassLoader
argument_list|(
name|parent
argument_list|)
block|{}
decl_stmt|;
name|ClassLoader
name|sub2
init|=
operator|new
name|ClassLoader
argument_list|(
name|parent
argument_list|)
block|{}
decl_stmt|;
name|assertEquals
argument_list|(
name|findClass
argument_list|(
name|ClassPath
operator|.
name|from
argument_list|(
name|sub1
argument_list|)
operator|.
name|getClasses
argument_list|()
argument_list|,
name|ClassPathTest
operator|.
name|class
argument_list|)
argument_list|,
name|findClass
argument_list|(
name|ClassPath
operator|.
name|from
argument_list|(
name|sub2
argument_list|)
operator|.
name|getClasses
argument_list|()
argument_list|,
name|ClassPathTest
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testClassInfo ()
specifier|public
name|void
name|testClassInfo
parameter_list|()
block|{
operator|new
name|EqualsTester
argument_list|()
operator|.
name|addEqualityGroup
argument_list|(
name|classInfo
argument_list|(
name|ClassPathTest
operator|.
name|class
argument_list|)
argument_list|,
name|classInfo
argument_list|(
name|ClassPathTest
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|addEqualityGroup
argument_list|(
name|classInfo
argument_list|(
name|Test
operator|.
name|class
argument_list|)
argument_list|,
name|classInfo
argument_list|(
name|Test
operator|.
name|class
argument_list|,
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
argument_list|)
argument_list|)
operator|.
name|testEquals
argument_list|()
expr_stmt|;
block|}
DECL|method|testClassPathEntries_emptyURLClassLoader_noParent ()
specifier|public
name|void
name|testClassPathEntries_emptyURLClassLoader_noParent
parameter_list|()
block|{
name|ASSERT
operator|.
name|that
argument_list|(
name|ClassPath
operator|.
name|getClassPathEntries
argument_list|(
operator|new
name|URLClassLoader
argument_list|(
operator|new
name|URL
index|[
literal|0
index|]
argument_list|,
literal|null
argument_list|)
argument_list|)
operator|.
name|keySet
argument_list|()
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
DECL|method|testClassPathEntries_URLClassLoader_noParent ()
specifier|public
name|void
name|testClassPathEntries_URLClassLoader_noParent
parameter_list|()
throws|throws
name|Exception
block|{
name|URL
name|url1
init|=
operator|new
name|URL
argument_list|(
literal|"file:/a"
argument_list|)
decl_stmt|;
name|URL
name|url2
init|=
operator|new
name|URL
argument_list|(
literal|"file:/b"
argument_list|)
decl_stmt|;
name|URLClassLoader
name|classloader
init|=
operator|new
name|URLClassLoader
argument_list|(
operator|new
name|URL
index|[]
block|{
name|url1
block|,
name|url2
block|}
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
name|url1
operator|.
name|toURI
argument_list|()
argument_list|,
name|classloader
argument_list|,
name|url2
operator|.
name|toURI
argument_list|()
argument_list|,
name|classloader
argument_list|)
argument_list|,
name|ClassPath
operator|.
name|getClassPathEntries
argument_list|(
name|classloader
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testClassPathEntries_URLClassLoader_withParent ()
specifier|public
name|void
name|testClassPathEntries_URLClassLoader_withParent
parameter_list|()
throws|throws
name|Exception
block|{
name|URL
name|url1
init|=
operator|new
name|URL
argument_list|(
literal|"file:/a"
argument_list|)
decl_stmt|;
name|URL
name|url2
init|=
operator|new
name|URL
argument_list|(
literal|"file:/b"
argument_list|)
decl_stmt|;
name|URLClassLoader
name|parent
init|=
operator|new
name|URLClassLoader
argument_list|(
operator|new
name|URL
index|[]
block|{
name|url1
block|}
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|URLClassLoader
name|child
init|=
operator|new
name|URLClassLoader
argument_list|(
operator|new
name|URL
index|[]
block|{
name|url2
block|}
argument_list|,
name|parent
argument_list|)
block|{}
decl_stmt|;
name|ImmutableMap
argument_list|<
name|URI
argument_list|,
name|ClassLoader
argument_list|>
name|classPathEntries
init|=
name|ClassPath
operator|.
name|getClassPathEntries
argument_list|(
name|child
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
name|url1
operator|.
name|toURI
argument_list|()
argument_list|,
name|parent
argument_list|,
name|url2
operator|.
name|toURI
argument_list|()
argument_list|,
name|child
argument_list|)
argument_list|,
name|classPathEntries
argument_list|)
expr_stmt|;
name|ASSERT
operator|.
name|that
argument_list|(
name|classPathEntries
operator|.
name|keySet
argument_list|()
argument_list|)
operator|.
name|hasContentsInOrder
argument_list|(
name|url1
operator|.
name|toURI
argument_list|()
argument_list|,
name|url2
operator|.
name|toURI
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testClassPathEntries_duplicateUri_parentWins ()
specifier|public
name|void
name|testClassPathEntries_duplicateUri_parentWins
parameter_list|()
throws|throws
name|Exception
block|{
name|URL
name|url
init|=
operator|new
name|URL
argument_list|(
literal|"file:/a"
argument_list|)
decl_stmt|;
name|URLClassLoader
name|parent
init|=
operator|new
name|URLClassLoader
argument_list|(
operator|new
name|URL
index|[]
block|{
name|url
block|}
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|URLClassLoader
name|child
init|=
operator|new
name|URLClassLoader
argument_list|(
operator|new
name|URL
index|[]
block|{
name|url
block|}
argument_list|,
name|parent
argument_list|)
block|{}
decl_stmt|;
name|assertEquals
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
name|url
operator|.
name|toURI
argument_list|()
argument_list|,
name|parent
argument_list|)
argument_list|,
name|ClassPath
operator|.
name|getClassPathEntries
argument_list|(
name|child
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testClassPathEntries_notURLClassLoader_noParent ()
specifier|public
name|void
name|testClassPathEntries_notURLClassLoader_noParent
parameter_list|()
block|{
name|ASSERT
operator|.
name|that
argument_list|(
name|ClassPath
operator|.
name|getClassPathEntries
argument_list|(
operator|new
name|ClassLoader
argument_list|(
literal|null
argument_list|)
block|{}
argument_list|)
operator|.
name|keySet
argument_list|()
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
DECL|method|testClassPathEntries_notURLClassLoader_withParent ()
specifier|public
name|void
name|testClassPathEntries_notURLClassLoader_withParent
parameter_list|()
throws|throws
name|Exception
block|{
name|URL
name|url
init|=
operator|new
name|URL
argument_list|(
literal|"file:/a"
argument_list|)
decl_stmt|;
name|URLClassLoader
name|parent
init|=
operator|new
name|URLClassLoader
argument_list|(
operator|new
name|URL
index|[]
block|{
name|url
block|}
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
name|url
operator|.
name|toURI
argument_list|()
argument_list|,
name|parent
argument_list|)
argument_list|,
name|ClassPath
operator|.
name|getClassPathEntries
argument_list|(
operator|new
name|ClassLoader
argument_list|(
name|parent
argument_list|)
block|{}
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testClassPathEntries_notURLClassLoader_withParentAndGrandParent ()
specifier|public
name|void
name|testClassPathEntries_notURLClassLoader_withParentAndGrandParent
parameter_list|()
throws|throws
name|Exception
block|{
name|URL
name|url1
init|=
operator|new
name|URL
argument_list|(
literal|"file:/a"
argument_list|)
decl_stmt|;
name|URL
name|url2
init|=
operator|new
name|URL
argument_list|(
literal|"file:/b"
argument_list|)
decl_stmt|;
name|URLClassLoader
name|grandParent
init|=
operator|new
name|URLClassLoader
argument_list|(
operator|new
name|URL
index|[]
block|{
name|url1
block|}
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|URLClassLoader
name|parent
init|=
operator|new
name|URLClassLoader
argument_list|(
operator|new
name|URL
index|[]
block|{
name|url2
block|}
argument_list|,
name|grandParent
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
name|url1
operator|.
name|toURI
argument_list|()
argument_list|,
name|grandParent
argument_list|,
name|url2
operator|.
name|toURI
argument_list|()
argument_list|,
name|parent
argument_list|)
argument_list|,
name|ClassPath
operator|.
name|getClassPathEntries
argument_list|(
operator|new
name|ClassLoader
argument_list|(
name|parent
argument_list|)
block|{}
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testClassPathEntries_notURLClassLoader_withGrandParent ()
specifier|public
name|void
name|testClassPathEntries_notURLClassLoader_withGrandParent
parameter_list|()
throws|throws
name|Exception
block|{
name|URL
name|url
init|=
operator|new
name|URL
argument_list|(
literal|"file:/a"
argument_list|)
decl_stmt|;
name|URLClassLoader
name|grandParent
init|=
operator|new
name|URLClassLoader
argument_list|(
operator|new
name|URL
index|[]
block|{
name|url
block|}
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|ClassLoader
name|parent
init|=
operator|new
name|ClassLoader
argument_list|(
name|grandParent
argument_list|)
block|{}
decl_stmt|;
name|assertEquals
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
name|url
operator|.
name|toURI
argument_list|()
argument_list|,
name|grandParent
argument_list|)
argument_list|,
name|ClassPath
operator|.
name|getClassPathEntries
argument_list|(
operator|new
name|ClassLoader
argument_list|(
name|parent
argument_list|)
block|{}
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testReadClassesFromFile_fileNotExists ()
specifier|public
name|void
name|testReadClassesFromFile_fileNotExists
parameter_list|()
throws|throws
name|IOException
block|{
name|ClassLoader
name|classLoader
init|=
name|ClassPathTest
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
decl_stmt|;
name|ASSERT
operator|.
name|that
argument_list|(
name|ClassPath
operator|.
name|readClassesFrom
argument_list|(
operator|new
name|File
argument_list|(
literal|"no/such/file/anywhere"
argument_list|)
argument_list|,
name|classLoader
argument_list|)
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
DECL|method|testGetClassPathEntry ()
specifier|public
name|void
name|testGetClassPathEntry
parameter_list|()
throws|throws
name|URISyntaxException
block|{
name|assertEquals
argument_list|(
name|URI
operator|.
name|create
argument_list|(
literal|"file:/usr/test/dep.jar"
argument_list|)
argument_list|,
name|ClassPath
operator|.
name|getClassPathEntry
argument_list|(
operator|new
name|File
argument_list|(
literal|"/home/build/outer.jar"
argument_list|)
argument_list|,
literal|"file:/usr/test/dep.jar"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|URI
operator|.
name|create
argument_list|(
literal|"file:/home/build/a.jar"
argument_list|)
argument_list|,
name|ClassPath
operator|.
name|getClassPathEntry
argument_list|(
operator|new
name|File
argument_list|(
literal|"/home/build/outer.jar"
argument_list|)
argument_list|,
literal|"a.jar"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|URI
operator|.
name|create
argument_list|(
literal|"file:/home/build/x/y/z"
argument_list|)
argument_list|,
name|ClassPath
operator|.
name|getClassPathEntry
argument_list|(
operator|new
name|File
argument_list|(
literal|"/home/build/outer.jar"
argument_list|)
argument_list|,
literal|"x/y/z"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|URI
operator|.
name|create
argument_list|(
literal|"file:/home/build/x/y/z.jar"
argument_list|)
argument_list|,
name|ClassPath
operator|.
name|getClassPathEntry
argument_list|(
operator|new
name|File
argument_list|(
literal|"/home/build/outer.jar"
argument_list|)
argument_list|,
literal|"x/y/z.jar"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testGetClassPathFromManifest_nullManifest ()
specifier|public
name|void
name|testGetClassPathFromManifest_nullManifest
parameter_list|()
block|{
name|ASSERT
operator|.
name|that
argument_list|(
name|ClassPath
operator|.
name|getClassPathFromManifest
argument_list|(
operator|new
name|File
argument_list|(
literal|"some.jar"
argument_list|)
argument_list|,
literal|null
argument_list|)
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
DECL|method|testGetClassPathFromManifest_noClassPath ()
specifier|public
name|void
name|testGetClassPathFromManifest_noClassPath
parameter_list|()
throws|throws
name|IOException
block|{
name|File
name|jarFile
init|=
operator|new
name|File
argument_list|(
literal|"base.jar"
argument_list|)
decl_stmt|;
name|ASSERT
operator|.
name|that
argument_list|(
name|ClassPath
operator|.
name|getClassPathFromManifest
argument_list|(
name|jarFile
argument_list|,
name|manifest
argument_list|(
literal|""
argument_list|)
argument_list|)
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
DECL|method|testGetClassPathFromManifest_emptyClassPath ()
specifier|public
name|void
name|testGetClassPathFromManifest_emptyClassPath
parameter_list|()
throws|throws
name|IOException
block|{
name|File
name|jarFile
init|=
operator|new
name|File
argument_list|(
literal|"base.jar"
argument_list|)
decl_stmt|;
name|ASSERT
operator|.
name|that
argument_list|(
name|ClassPath
operator|.
name|getClassPathFromManifest
argument_list|(
name|jarFile
argument_list|,
name|manifestClasspath
argument_list|(
literal|""
argument_list|)
argument_list|)
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
DECL|method|testGetClassPathFromManifest_badClassPath ()
specifier|public
name|void
name|testGetClassPathFromManifest_badClassPath
parameter_list|()
throws|throws
name|IOException
block|{
name|File
name|jarFile
init|=
operator|new
name|File
argument_list|(
literal|"base.jar"
argument_list|)
decl_stmt|;
name|Manifest
name|manifest
init|=
name|manifestClasspath
argument_list|(
literal|"an_invalid^path"
argument_list|)
decl_stmt|;
name|ASSERT
operator|.
name|that
argument_list|(
name|ClassPath
operator|.
name|getClassPathFromManifest
argument_list|(
name|jarFile
argument_list|,
name|manifest
argument_list|)
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
DECL|method|testGetClassPathFromManifest_relativeDirectory ()
specifier|public
name|void
name|testGetClassPathFromManifest_relativeDirectory
parameter_list|()
throws|throws
name|IOException
block|{
name|File
name|jarFile
init|=
operator|new
name|File
argument_list|(
literal|"base/some.jar"
argument_list|)
decl_stmt|;
comment|// with/relative/directory is the Class-Path value in the mf file.
name|Manifest
name|manifest
init|=
name|manifestClasspath
argument_list|(
literal|"with/relative/dir"
argument_list|)
decl_stmt|;
name|ASSERT
operator|.
name|that
argument_list|(
name|ClassPath
operator|.
name|getClassPathFromManifest
argument_list|(
name|jarFile
argument_list|,
name|manifest
argument_list|)
argument_list|)
operator|.
name|hasContentsInOrder
argument_list|(
operator|new
name|File
argument_list|(
literal|"base/with/relative/dir"
argument_list|)
operator|.
name|toURI
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testGetClassPathFromManifest_relativeJar ()
specifier|public
name|void
name|testGetClassPathFromManifest_relativeJar
parameter_list|()
throws|throws
name|IOException
block|{
name|File
name|jarFile
init|=
operator|new
name|File
argument_list|(
literal|"base/some.jar"
argument_list|)
decl_stmt|;
comment|// with/relative/directory is the Class-Path value in the mf file.
name|Manifest
name|manifest
init|=
name|manifestClasspath
argument_list|(
literal|"with/relative.jar"
argument_list|)
decl_stmt|;
name|ASSERT
operator|.
name|that
argument_list|(
name|ClassPath
operator|.
name|getClassPathFromManifest
argument_list|(
name|jarFile
argument_list|,
name|manifest
argument_list|)
argument_list|)
operator|.
name|hasContentsInOrder
argument_list|(
operator|new
name|File
argument_list|(
literal|"base/with/relative.jar"
argument_list|)
operator|.
name|toURI
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testGetClassPathFromManifest_jarInCurrentDirectory ()
specifier|public
name|void
name|testGetClassPathFromManifest_jarInCurrentDirectory
parameter_list|()
throws|throws
name|IOException
block|{
name|File
name|jarFile
init|=
operator|new
name|File
argument_list|(
literal|"base/some.jar"
argument_list|)
decl_stmt|;
comment|// with/relative/directory is the Class-Path value in the mf file.
name|Manifest
name|manifest
init|=
name|manifestClasspath
argument_list|(
literal|"current.jar"
argument_list|)
decl_stmt|;
name|ASSERT
operator|.
name|that
argument_list|(
name|ClassPath
operator|.
name|getClassPathFromManifest
argument_list|(
name|jarFile
argument_list|,
name|manifest
argument_list|)
argument_list|)
operator|.
name|hasContentsInOrder
argument_list|(
operator|new
name|File
argument_list|(
literal|"base/current.jar"
argument_list|)
operator|.
name|toURI
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testGetClassPathFromManifest_absoluteDirectory ()
specifier|public
name|void
name|testGetClassPathFromManifest_absoluteDirectory
parameter_list|()
throws|throws
name|IOException
block|{
name|File
name|jarFile
init|=
operator|new
name|File
argument_list|(
literal|"base/some.jar"
argument_list|)
decl_stmt|;
name|Manifest
name|manifest
init|=
name|manifestClasspath
argument_list|(
literal|"file:/with/absolute/dir"
argument_list|)
decl_stmt|;
name|ASSERT
operator|.
name|that
argument_list|(
name|ClassPath
operator|.
name|getClassPathFromManifest
argument_list|(
name|jarFile
argument_list|,
name|manifest
argument_list|)
argument_list|)
operator|.
name|hasContentsInOrder
argument_list|(
operator|new
name|File
argument_list|(
literal|"/with/absolute/dir"
argument_list|)
operator|.
name|toURI
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testGetClassPathFromManifest_absoluteJar ()
specifier|public
name|void
name|testGetClassPathFromManifest_absoluteJar
parameter_list|()
throws|throws
name|IOException
block|{
name|File
name|jarFile
init|=
operator|new
name|File
argument_list|(
literal|"base/some.jar"
argument_list|)
decl_stmt|;
name|Manifest
name|manifest
init|=
name|manifestClasspath
argument_list|(
literal|"file:/with/absolute.jar"
argument_list|)
decl_stmt|;
name|ASSERT
operator|.
name|that
argument_list|(
name|ClassPath
operator|.
name|getClassPathFromManifest
argument_list|(
name|jarFile
argument_list|,
name|manifest
argument_list|)
argument_list|)
operator|.
name|hasContentsInOrder
argument_list|(
operator|new
name|File
argument_list|(
literal|"/with/absolute.jar"
argument_list|)
operator|.
name|toURI
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testGetClassPathFromManifest_multiplePaths ()
specifier|public
name|void
name|testGetClassPathFromManifest_multiplePaths
parameter_list|()
throws|throws
name|IOException
block|{
name|File
name|jarFile
init|=
operator|new
name|File
argument_list|(
literal|"base/some.jar"
argument_list|)
decl_stmt|;
name|Manifest
name|manifest
init|=
name|manifestClasspath
argument_list|(
literal|"file:/with/absolute.jar relative.jar  relative/dir"
argument_list|)
decl_stmt|;
name|ASSERT
operator|.
name|that
argument_list|(
name|ClassPath
operator|.
name|getClassPathFromManifest
argument_list|(
name|jarFile
argument_list|,
name|manifest
argument_list|)
argument_list|)
operator|.
name|hasContentsInOrder
argument_list|(
operator|new
name|File
argument_list|(
literal|"/with/absolute.jar"
argument_list|)
operator|.
name|toURI
argument_list|()
argument_list|,
operator|new
name|File
argument_list|(
literal|"base/relative.jar"
argument_list|)
operator|.
name|toURI
argument_list|()
argument_list|,
operator|new
name|File
argument_list|(
literal|"base/relative/dir"
argument_list|)
operator|.
name|toURI
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testGetClassPathFromManifest_leadingBlanks ()
specifier|public
name|void
name|testGetClassPathFromManifest_leadingBlanks
parameter_list|()
throws|throws
name|IOException
block|{
name|File
name|jarFile
init|=
operator|new
name|File
argument_list|(
literal|"base/some.jar"
argument_list|)
decl_stmt|;
name|Manifest
name|manifest
init|=
name|manifestClasspath
argument_list|(
literal|" relative.jar"
argument_list|)
decl_stmt|;
name|ASSERT
operator|.
name|that
argument_list|(
name|ClassPath
operator|.
name|getClassPathFromManifest
argument_list|(
name|jarFile
argument_list|,
name|manifest
argument_list|)
argument_list|)
operator|.
name|hasContentsInOrder
argument_list|(
operator|new
name|File
argument_list|(
literal|"base/relative.jar"
argument_list|)
operator|.
name|toURI
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testGetClassPathFromManifest_trailingBlanks ()
specifier|public
name|void
name|testGetClassPathFromManifest_trailingBlanks
parameter_list|()
throws|throws
name|IOException
block|{
name|File
name|jarFile
init|=
operator|new
name|File
argument_list|(
literal|"base/some.jar"
argument_list|)
decl_stmt|;
name|Manifest
name|manifest
init|=
name|manifestClasspath
argument_list|(
literal|"relative.jar "
argument_list|)
decl_stmt|;
name|ASSERT
operator|.
name|that
argument_list|(
name|ClassPath
operator|.
name|getClassPathFromManifest
argument_list|(
name|jarFile
argument_list|,
name|manifest
argument_list|)
argument_list|)
operator|.
name|hasContentsInOrder
argument_list|(
operator|new
name|File
argument_list|(
literal|"base/relative.jar"
argument_list|)
operator|.
name|toURI
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testGetClassName ()
specifier|public
name|void
name|testGetClassName
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"Abc"
argument_list|,
name|ClassPath
operator|.
name|getClassName
argument_list|(
literal|"Abc.class"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testIsTopLevelClassName ()
specifier|public
name|void
name|testIsTopLevelClassName
parameter_list|()
block|{
name|assertTrue
argument_list|(
name|ClassPath
operator|.
name|isTopLevelClassFile
argument_list|(
name|ClassPathTest
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|".class"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ClassPath
operator|.
name|isTopLevelClassFile
argument_list|(
name|ClassPathTest
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ClassPath
operator|.
name|isTopLevelClassFile
argument_list|(
name|Nested
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|".class"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|class|Nested
specifier|private
specifier|static
class|class
name|Nested
block|{}
DECL|method|testNulls ()
specifier|public
name|void
name|testNulls
parameter_list|()
throws|throws
name|IOException
block|{
operator|new
name|NullPointerTester
argument_list|()
operator|.
name|testAllPublicStaticMethods
argument_list|(
name|ClassPath
operator|.
name|class
argument_list|)
expr_stmt|;
operator|new
name|NullPointerTester
argument_list|()
operator|.
name|testAllPublicInstanceMethods
argument_list|(
name|ClassPath
operator|.
name|from
argument_list|(
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|findClass ( Iterable<ClassPath.ClassInfo> classes, Class<?> cls)
specifier|private
specifier|static
name|ClassPath
operator|.
name|ClassInfo
name|findClass
parameter_list|(
name|Iterable
argument_list|<
name|ClassPath
operator|.
name|ClassInfo
argument_list|>
name|classes
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|cls
parameter_list|)
block|{
for|for
control|(
name|ClassPath
operator|.
name|ClassInfo
name|classInfo
range|:
name|classes
control|)
block|{
if|if
condition|(
name|classInfo
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|cls
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|classInfo
return|;
block|}
block|}
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"failed to find "
operator|+
name|cls
argument_list|)
throw|;
block|}
DECL|method|classInfo (Class<?> cls)
specifier|private
specifier|static
name|ClassPath
operator|.
name|ClassInfo
name|classInfo
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|cls
parameter_list|)
block|{
return|return
name|classInfo
argument_list|(
name|cls
argument_list|,
name|cls
operator|.
name|getClassLoader
argument_list|()
argument_list|)
return|;
block|}
DECL|method|classInfo (Class<?> cls, ClassLoader classLoader)
specifier|private
specifier|static
name|ClassPath
operator|.
name|ClassInfo
name|classInfo
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|cls
parameter_list|,
name|ClassLoader
name|classLoader
parameter_list|)
block|{
return|return
operator|new
name|ClassPath
operator|.
name|ClassInfo
argument_list|(
name|cls
operator|.
name|getName
argument_list|()
argument_list|,
name|classLoader
argument_list|)
return|;
block|}
DECL|method|manifestClasspath (String classpath)
specifier|private
specifier|static
name|Manifest
name|manifestClasspath
parameter_list|(
name|String
name|classpath
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|manifest
argument_list|(
literal|"Class-Path: "
operator|+
name|classpath
operator|+
literal|"\n"
argument_list|)
return|;
block|}
DECL|method|manifest (String content)
specifier|private
specifier|static
name|Manifest
name|manifest
parameter_list|(
name|String
name|content
parameter_list|)
throws|throws
name|IOException
block|{
name|InputStream
name|in
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|content
operator|.
name|getBytes
argument_list|(
name|Charsets
operator|.
name|US_ASCII
argument_list|)
argument_list|)
decl_stmt|;
name|Manifest
name|manifest
init|=
operator|new
name|Manifest
argument_list|()
decl_stmt|;
name|manifest
operator|.
name|read
argument_list|(
name|in
argument_list|)
expr_stmt|;
return|return
name|manifest
return|;
block|}
block|}
end_class

end_unit

