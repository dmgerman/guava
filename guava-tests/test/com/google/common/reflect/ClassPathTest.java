begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2012 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.reflect
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|reflect
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Charsets
operator|.
name|US_ASCII
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|StandardSystemProperty
operator|.
name|JAVA_CLASS_PATH
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|StandardSystemProperty
operator|.
name|PATH_SEPARATOR
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|io
operator|.
name|MoreFiles
operator|.
name|deleteRecursively
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
operator|.
name|createDirectory
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
operator|.
name|createFile
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
operator|.
name|createSymbolicLink
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
operator|.
name|createTempDirectory
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Level
operator|.
name|WARNING
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Joiner
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|io
operator|.
name|Closer
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|io
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|io
operator|.
name|Resources
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|reflect
operator|.
name|ClassPath
operator|.
name|ClassInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|reflect
operator|.
name|ClassPath
operator|.
name|ResourceInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|testing
operator|.
name|EqualsTester
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|testing
operator|.
name|NullPointerTester
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FilePermission
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLClassLoader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Permission
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PermissionCollection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|jar
operator|.
name|Attributes
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|jar
operator|.
name|JarOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|jar
operator|.
name|Manifest
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|ZipEntry
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/** Functional tests of {@link ClassPath}. */
end_comment

begin_class
DECL|class|ClassPathTest
specifier|public
class|class
name|ClassPathTest
extends|extends
name|TestCase
block|{
DECL|field|log
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|ClassPathTest
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|FILE
specifier|private
specifier|static
specifier|final
name|File
name|FILE
init|=
operator|new
name|File
argument_list|(
literal|"."
argument_list|)
decl_stmt|;
DECL|method|testEquals ()
specifier|public
name|void
name|testEquals
parameter_list|()
block|{
operator|new
name|EqualsTester
argument_list|()
operator|.
name|addEqualityGroup
argument_list|(
name|classInfo
argument_list|(
name|ClassPathTest
operator|.
name|class
argument_list|)
argument_list|,
name|classInfo
argument_list|(
name|ClassPathTest
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|addEqualityGroup
argument_list|(
name|classInfo
argument_list|(
name|Test
operator|.
name|class
argument_list|)
argument_list|,
name|classInfo
argument_list|(
name|Test
operator|.
name|class
argument_list|,
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
argument_list|)
argument_list|)
operator|.
name|addEqualityGroup
argument_list|(
operator|new
name|ResourceInfo
argument_list|(
name|FILE
argument_list|,
literal|"a/b/c.txt"
argument_list|,
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
argument_list|)
argument_list|,
operator|new
name|ResourceInfo
argument_list|(
name|FILE
argument_list|,
literal|"a/b/c.txt"
argument_list|,
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
argument_list|)
argument_list|)
operator|.
name|addEqualityGroup
argument_list|(
operator|new
name|ResourceInfo
argument_list|(
name|FILE
argument_list|,
literal|"x.txt"
argument_list|,
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
argument_list|)
argument_list|)
operator|.
name|testEquals
argument_list|()
expr_stmt|;
block|}
annotation|@
name|AndroidIncompatible
comment|// Android forbids null parent ClassLoader
DECL|method|testClassPathEntries_emptyURLClassLoader_noParent ()
specifier|public
name|void
name|testClassPathEntries_emptyURLClassLoader_noParent
parameter_list|()
block|{
name|assertThat
argument_list|(
name|ClassPath
operator|.
name|getClassPathEntries
argument_list|(
operator|new
name|URLClassLoader
argument_list|(
operator|new
name|URL
index|[
literal|0
index|]
argument_list|,
literal|null
argument_list|)
argument_list|)
operator|.
name|keySet
argument_list|()
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
annotation|@
name|AndroidIncompatible
comment|// Android forbids null parent ClassLoader
DECL|method|testClassPathEntries_URLClassLoader_noParent ()
specifier|public
name|void
name|testClassPathEntries_URLClassLoader_noParent
parameter_list|()
throws|throws
name|Exception
block|{
name|URL
name|url1
init|=
operator|new
name|URL
argument_list|(
literal|"file:/a"
argument_list|)
decl_stmt|;
name|URL
name|url2
init|=
operator|new
name|URL
argument_list|(
literal|"file:/b"
argument_list|)
decl_stmt|;
name|URLClassLoader
name|classloader
init|=
operator|new
name|URLClassLoader
argument_list|(
operator|new
name|URL
index|[]
block|{
name|url1
block|,
name|url2
block|}
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|ClassPath
operator|.
name|getClassPathEntries
argument_list|(
name|classloader
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
operator|new
name|File
argument_list|(
literal|"/a"
argument_list|)
argument_list|,
name|classloader
argument_list|,
operator|new
name|File
argument_list|(
literal|"/b"
argument_list|)
argument_list|,
name|classloader
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AndroidIncompatible
comment|// Android forbids null parent ClassLoader
DECL|method|testClassPathEntries_URLClassLoader_withParent ()
specifier|public
name|void
name|testClassPathEntries_URLClassLoader_withParent
parameter_list|()
throws|throws
name|Exception
block|{
name|URL
name|url1
init|=
operator|new
name|URL
argument_list|(
literal|"file:/a"
argument_list|)
decl_stmt|;
name|URL
name|url2
init|=
operator|new
name|URL
argument_list|(
literal|"file:/b"
argument_list|)
decl_stmt|;
name|URLClassLoader
name|parent
init|=
operator|new
name|URLClassLoader
argument_list|(
operator|new
name|URL
index|[]
block|{
name|url1
block|}
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|URLClassLoader
name|child
init|=
operator|new
name|URLClassLoader
argument_list|(
operator|new
name|URL
index|[]
block|{
name|url2
block|}
argument_list|,
name|parent
argument_list|)
block|{}
decl_stmt|;
name|assertThat
argument_list|(
name|ClassPath
operator|.
name|getClassPathEntries
argument_list|(
name|child
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
operator|new
name|File
argument_list|(
literal|"/a"
argument_list|)
argument_list|,
name|parent
argument_list|,
operator|new
name|File
argument_list|(
literal|"/b"
argument_list|)
argument_list|,
name|child
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
block|}
annotation|@
name|AndroidIncompatible
comment|// Android forbids null parent ClassLoader
DECL|method|testClassPathEntries_duplicateUri_parentWins ()
specifier|public
name|void
name|testClassPathEntries_duplicateUri_parentWins
parameter_list|()
throws|throws
name|Exception
block|{
name|URL
name|url
init|=
operator|new
name|URL
argument_list|(
literal|"file:/a"
argument_list|)
decl_stmt|;
name|URLClassLoader
name|parent
init|=
operator|new
name|URLClassLoader
argument_list|(
operator|new
name|URL
index|[]
block|{
name|url
block|}
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|URLClassLoader
name|child
init|=
operator|new
name|URLClassLoader
argument_list|(
operator|new
name|URL
index|[]
block|{
name|url
block|}
argument_list|,
name|parent
argument_list|)
block|{}
decl_stmt|;
name|assertThat
argument_list|(
name|ClassPath
operator|.
name|getClassPathEntries
argument_list|(
name|child
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
operator|new
name|File
argument_list|(
literal|"/a"
argument_list|)
argument_list|,
name|parent
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AndroidIncompatible
comment|// Android forbids null parent ClassLoader
DECL|method|testClassPathEntries_notURLClassLoader_noParent ()
specifier|public
name|void
name|testClassPathEntries_notURLClassLoader_noParent
parameter_list|()
block|{
name|assertThat
argument_list|(
name|ClassPath
operator|.
name|getClassPathEntries
argument_list|(
operator|new
name|ClassLoader
argument_list|(
literal|null
argument_list|)
block|{}
argument_list|)
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
annotation|@
name|AndroidIncompatible
comment|// Android forbids null parent ClassLoader
DECL|method|testClassPathEntries_notURLClassLoader_withParent ()
specifier|public
name|void
name|testClassPathEntries_notURLClassLoader_withParent
parameter_list|()
throws|throws
name|Exception
block|{
name|URL
name|url
init|=
operator|new
name|URL
argument_list|(
literal|"file:/a"
argument_list|)
decl_stmt|;
name|URLClassLoader
name|parent
init|=
operator|new
name|URLClassLoader
argument_list|(
operator|new
name|URL
index|[]
block|{
name|url
block|}
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|ClassPath
operator|.
name|getClassPathEntries
argument_list|(
operator|new
name|ClassLoader
argument_list|(
name|parent
argument_list|)
block|{}
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
operator|new
name|File
argument_list|(
literal|"/a"
argument_list|)
argument_list|,
name|parent
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AndroidIncompatible
comment|// Android forbids null parent ClassLoader
DECL|method|testClassPathEntries_notURLClassLoader_withParentAndGrandParent ()
specifier|public
name|void
name|testClassPathEntries_notURLClassLoader_withParentAndGrandParent
parameter_list|()
throws|throws
name|Exception
block|{
name|URL
name|url1
init|=
operator|new
name|URL
argument_list|(
literal|"file:/a"
argument_list|)
decl_stmt|;
name|URL
name|url2
init|=
operator|new
name|URL
argument_list|(
literal|"file:/b"
argument_list|)
decl_stmt|;
name|URLClassLoader
name|grandParent
init|=
operator|new
name|URLClassLoader
argument_list|(
operator|new
name|URL
index|[]
block|{
name|url1
block|}
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|URLClassLoader
name|parent
init|=
operator|new
name|URLClassLoader
argument_list|(
operator|new
name|URL
index|[]
block|{
name|url2
block|}
argument_list|,
name|grandParent
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|ClassPath
operator|.
name|getClassPathEntries
argument_list|(
operator|new
name|ClassLoader
argument_list|(
name|parent
argument_list|)
block|{}
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
operator|new
name|File
argument_list|(
literal|"/a"
argument_list|)
argument_list|,
name|grandParent
argument_list|,
operator|new
name|File
argument_list|(
literal|"/b"
argument_list|)
argument_list|,
name|parent
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AndroidIncompatible
comment|// Android forbids null parent ClassLoader
DECL|method|testClassPathEntries_notURLClassLoader_withGrandParent ()
specifier|public
name|void
name|testClassPathEntries_notURLClassLoader_withGrandParent
parameter_list|()
throws|throws
name|Exception
block|{
name|URL
name|url
init|=
operator|new
name|URL
argument_list|(
literal|"file:/a"
argument_list|)
decl_stmt|;
name|URLClassLoader
name|grandParent
init|=
operator|new
name|URLClassLoader
argument_list|(
operator|new
name|URL
index|[]
block|{
name|url
block|}
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|ClassLoader
name|parent
init|=
operator|new
name|ClassLoader
argument_list|(
name|grandParent
argument_list|)
block|{}
decl_stmt|;
name|assertThat
argument_list|(
name|ClassPath
operator|.
name|getClassPathEntries
argument_list|(
operator|new
name|ClassLoader
argument_list|(
name|parent
argument_list|)
block|{}
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
operator|new
name|File
argument_list|(
literal|"/a"
argument_list|)
argument_list|,
name|grandParent
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AndroidIncompatible
comment|// Android forbids null parent ClassLoader
comment|// https://github.com/google/guava/issues/2152
DECL|method|testClassPathEntries_URLClassLoader_pathWithSpace ()
specifier|public
name|void
name|testClassPathEntries_URLClassLoader_pathWithSpace
parameter_list|()
throws|throws
name|Exception
block|{
name|URL
name|url
init|=
operator|new
name|URL
argument_list|(
literal|"file:///c:/Documents and Settings/"
argument_list|)
decl_stmt|;
name|URLClassLoader
name|classloader
init|=
operator|new
name|URLClassLoader
argument_list|(
operator|new
name|URL
index|[]
block|{
name|url
block|}
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|ClassPath
operator|.
name|getClassPathEntries
argument_list|(
name|classloader
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
operator|new
name|File
argument_list|(
literal|"/c:/Documents and Settings/"
argument_list|)
argument_list|,
name|classloader
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AndroidIncompatible
comment|// Android forbids null parent ClassLoader
comment|// https://github.com/google/guava/issues/2152
DECL|method|testClassPathEntries_URLClassLoader_pathWithEscapedSpace ()
specifier|public
name|void
name|testClassPathEntries_URLClassLoader_pathWithEscapedSpace
parameter_list|()
throws|throws
name|Exception
block|{
name|URL
name|url
init|=
operator|new
name|URL
argument_list|(
literal|"file:///c:/Documents%20and%20Settings/"
argument_list|)
decl_stmt|;
name|URLClassLoader
name|classloader
init|=
operator|new
name|URLClassLoader
argument_list|(
operator|new
name|URL
index|[]
block|{
name|url
block|}
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|ClassPath
operator|.
name|getClassPathEntries
argument_list|(
name|classloader
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
operator|new
name|File
argument_list|(
literal|"/c:/Documents and Settings/"
argument_list|)
argument_list|,
name|classloader
argument_list|)
expr_stmt|;
block|}
comment|// https://github.com/google/guava/issues/2152
DECL|method|testToFile ()
specifier|public
name|void
name|testToFile
parameter_list|()
throws|throws
name|Exception
block|{
name|assertThat
argument_list|(
name|ClassPath
operator|.
name|toFile
argument_list|(
operator|new
name|URL
argument_list|(
literal|"file:///c:/Documents%20and%20Settings/"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
operator|new
name|File
argument_list|(
literal|"/c:/Documents and Settings/"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ClassPath
operator|.
name|toFile
argument_list|(
operator|new
name|URL
argument_list|(
literal|"file:///c:/Documents ~ Settings, or not/11-12 12:05"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
operator|new
name|File
argument_list|(
literal|"/c:/Documents ~ Settings, or not/11-12 12:05"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// https://github.com/google/guava/issues/2152
annotation|@
name|AndroidIncompatible
comment|// works in newer Android versions but fails at the version we test with
DECL|method|testToFile_AndroidIncompatible ()
specifier|public
name|void
name|testToFile_AndroidIncompatible
parameter_list|()
throws|throws
name|Exception
block|{
name|assertThat
argument_list|(
name|ClassPath
operator|.
name|toFile
argument_list|(
operator|new
name|URL
argument_list|(
literal|"file:///c:\\Documents ~ Settings, or not\\11-12 12:05"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
operator|new
name|File
argument_list|(
literal|"/c:\\Documents ~ Settings, or not\\11-12 12:05"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ClassPath
operator|.
name|toFile
argument_list|(
operator|new
name|URL
argument_list|(
literal|"file:///C:\\Program Files\\Apache Software Foundation"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
operator|new
name|File
argument_list|(
literal|"/C:\\Program Files\\Apache Software Foundation/"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ClassPath
operator|.
name|toFile
argument_list|(
operator|new
name|URL
argument_list|(
literal|"file:///C:\\\u20320 \u22909"
argument_list|)
argument_list|)
argument_list|)
comment|// Chinese Ni Hao
operator|.
name|isEqualTo
argument_list|(
operator|new
name|File
argument_list|(
literal|"/C:\\\u20320 \u22909"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AndroidIncompatible
comment|// Android forbids null parent ClassLoader
comment|// https://github.com/google/guava/issues/2152
DECL|method|testJarFileWithSpaces ()
specifier|public
name|void
name|testJarFileWithSpaces
parameter_list|()
throws|throws
name|Exception
block|{
name|URL
name|url
init|=
name|makeJarUrlWithName
argument_list|(
literal|"To test unescaped spaces in jar file name.jar"
argument_list|)
decl_stmt|;
name|URLClassLoader
name|classloader
init|=
operator|new
name|URLClassLoader
argument_list|(
operator|new
name|URL
index|[]
block|{
name|url
block|}
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|ClassPath
operator|.
name|from
argument_list|(
name|classloader
argument_list|)
operator|.
name|getTopLevelClasses
argument_list|()
argument_list|)
operator|.
name|isNotEmpty
argument_list|()
expr_stmt|;
block|}
DECL|method|testScan_classPathCycle ()
specifier|public
name|void
name|testScan_classPathCycle
parameter_list|()
throws|throws
name|IOException
block|{
name|File
name|jarFile
init|=
name|File
operator|.
name|createTempFile
argument_list|(
literal|"with_circular_class_path"
argument_list|,
literal|".jar"
argument_list|)
decl_stmt|;
try|try
block|{
name|writeSelfReferencingJarFile
argument_list|(
name|jarFile
argument_list|,
literal|"test.txt"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|new
name|ClassPath
operator|.
name|LocationInfo
argument_list|(
name|jarFile
argument_list|,
name|ClassPathTest
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
argument_list|)
operator|.
name|scanResources
argument_list|()
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|jarFile
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|AndroidIncompatible
comment|// Path (for symlink creation)
DECL|method|testScanDirectory_symlinkCycle ()
specifier|public
name|void
name|testScanDirectory_symlinkCycle
parameter_list|()
throws|throws
name|IOException
block|{
name|ClassLoader
name|loader
init|=
name|ClassPathTest
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
decl_stmt|;
comment|// directory with a cycle,
comment|// /root
comment|//    /left
comment|//       /[sibling -> right]
comment|//    /right
comment|//       /[sibling -> left]
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
name|root
init|=
name|createTempDirectory
argument_list|(
literal|"ClassPathTest"
argument_list|)
decl_stmt|;
try|try
block|{
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
name|left
init|=
name|createDirectory
argument_list|(
name|root
operator|.
name|resolve
argument_list|(
literal|"left"
argument_list|)
argument_list|)
decl_stmt|;
name|createFile
argument_list|(
name|left
operator|.
name|resolve
argument_list|(
literal|"some.txt"
argument_list|)
argument_list|)
expr_stmt|;
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
name|right
init|=
name|createDirectory
argument_list|(
name|root
operator|.
name|resolve
argument_list|(
literal|"right"
argument_list|)
argument_list|)
decl_stmt|;
name|createFile
argument_list|(
name|right
operator|.
name|resolve
argument_list|(
literal|"another.txt"
argument_list|)
argument_list|)
expr_stmt|;
name|createSymbolicLink
argument_list|(
name|left
operator|.
name|resolve
argument_list|(
literal|"sibling"
argument_list|)
argument_list|,
name|right
argument_list|)
expr_stmt|;
name|createSymbolicLink
argument_list|(
name|right
operator|.
name|resolve
argument_list|(
literal|"sibling"
argument_list|)
argument_list|,
name|left
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
operator|new
name|ResourceInfo
argument_list|(
name|FILE
argument_list|,
literal|"left/some.txt"
argument_list|,
name|loader
argument_list|)
argument_list|,
operator|new
name|ResourceInfo
argument_list|(
name|FILE
argument_list|,
literal|"left/sibling/another.txt"
argument_list|,
name|loader
argument_list|)
argument_list|,
operator|new
name|ResourceInfo
argument_list|(
name|FILE
argument_list|,
literal|"right/another.txt"
argument_list|,
name|loader
argument_list|)
argument_list|,
operator|new
name|ResourceInfo
argument_list|(
name|FILE
argument_list|,
literal|"right/sibling/some.txt"
argument_list|,
name|loader
argument_list|)
argument_list|)
argument_list|,
operator|new
name|ClassPath
operator|.
name|LocationInfo
argument_list|(
name|root
operator|.
name|toFile
argument_list|()
argument_list|,
name|loader
argument_list|)
operator|.
name|scanResources
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|deleteRecursivelyOrLog
argument_list|(
name|root
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|AndroidIncompatible
comment|// Path (for symlink creation)
DECL|method|testScanDirectory_symlinkToRootCycle ()
specifier|public
name|void
name|testScanDirectory_symlinkToRootCycle
parameter_list|()
throws|throws
name|IOException
block|{
name|ClassLoader
name|loader
init|=
name|ClassPathTest
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
decl_stmt|;
comment|// directory with a cycle,
comment|// /root
comment|//    /child
comment|//       /[grandchild -> root]
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
name|root
init|=
name|createTempDirectory
argument_list|(
literal|"ClassPathTest"
argument_list|)
decl_stmt|;
try|try
block|{
name|createFile
argument_list|(
name|root
operator|.
name|resolve
argument_list|(
literal|"some.txt"
argument_list|)
argument_list|)
expr_stmt|;
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
name|child
init|=
name|createDirectory
argument_list|(
name|root
operator|.
name|resolve
argument_list|(
literal|"child"
argument_list|)
argument_list|)
decl_stmt|;
name|createSymbolicLink
argument_list|(
name|child
operator|.
name|resolve
argument_list|(
literal|"grandchild"
argument_list|)
argument_list|,
name|root
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
operator|new
name|ResourceInfo
argument_list|(
name|FILE
argument_list|,
literal|"some.txt"
argument_list|,
name|loader
argument_list|)
argument_list|)
argument_list|,
operator|new
name|ClassPath
operator|.
name|LocationInfo
argument_list|(
name|root
operator|.
name|toFile
argument_list|()
argument_list|,
name|loader
argument_list|)
operator|.
name|scanResources
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|deleteRecursivelyOrLog
argument_list|(
name|root
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testScanFromFile_fileNotExists ()
specifier|public
name|void
name|testScanFromFile_fileNotExists
parameter_list|()
throws|throws
name|IOException
block|{
name|ClassLoader
name|classLoader
init|=
name|ClassPathTest
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
operator|new
name|ClassPath
operator|.
name|LocationInfo
argument_list|(
operator|new
name|File
argument_list|(
literal|"no/such/file/anywhere"
argument_list|)
argument_list|,
name|classLoader
argument_list|)
operator|.
name|scanResources
argument_list|()
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
DECL|method|testScanFromFile_notJarFile ()
specifier|public
name|void
name|testScanFromFile_notJarFile
parameter_list|()
throws|throws
name|IOException
block|{
name|ClassLoader
name|classLoader
init|=
name|ClassPathTest
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
decl_stmt|;
name|File
name|notJar
init|=
name|File
operator|.
name|createTempFile
argument_list|(
literal|"not_a_jar"
argument_list|,
literal|"txt"
argument_list|)
decl_stmt|;
try|try
block|{
name|assertThat
argument_list|(
operator|new
name|ClassPath
operator|.
name|LocationInfo
argument_list|(
name|notJar
argument_list|,
name|classLoader
argument_list|)
operator|.
name|scanResources
argument_list|()
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|notJar
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|testGetClassPathEntry ()
specifier|public
name|void
name|testGetClassPathEntry
parameter_list|()
throws|throws
name|MalformedURLException
throws|,
name|URISyntaxException
block|{
name|assertEquals
argument_list|(
operator|new
name|File
argument_list|(
literal|"/usr/test/dep.jar"
argument_list|)
operator|.
name|toURI
argument_list|()
argument_list|,
name|ClassPath
operator|.
name|getClassPathEntry
argument_list|(
operator|new
name|File
argument_list|(
literal|"/home/build/outer.jar"
argument_list|)
argument_list|,
literal|"file:/usr/test/dep.jar"
argument_list|)
operator|.
name|toURI
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|File
argument_list|(
literal|"/home/build/a.jar"
argument_list|)
operator|.
name|toURI
argument_list|()
argument_list|,
name|ClassPath
operator|.
name|getClassPathEntry
argument_list|(
operator|new
name|File
argument_list|(
literal|"/home/build/outer.jar"
argument_list|)
argument_list|,
literal|"a.jar"
argument_list|)
operator|.
name|toURI
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|File
argument_list|(
literal|"/home/build/x/y/z"
argument_list|)
operator|.
name|toURI
argument_list|()
argument_list|,
name|ClassPath
operator|.
name|getClassPathEntry
argument_list|(
operator|new
name|File
argument_list|(
literal|"/home/build/outer.jar"
argument_list|)
argument_list|,
literal|"x/y/z"
argument_list|)
operator|.
name|toURI
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|File
argument_list|(
literal|"/home/build/x/y/z.jar"
argument_list|)
operator|.
name|toURI
argument_list|()
argument_list|,
name|ClassPath
operator|.
name|getClassPathEntry
argument_list|(
operator|new
name|File
argument_list|(
literal|"/home/build/outer.jar"
argument_list|)
argument_list|,
literal|"x/y/z.jar"
argument_list|)
operator|.
name|toURI
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/home/build/x y.jar"
argument_list|,
name|ClassPath
operator|.
name|getClassPathEntry
argument_list|(
operator|new
name|File
argument_list|(
literal|"/home/build/outer.jar"
argument_list|)
argument_list|,
literal|"x y.jar"
argument_list|)
operator|.
name|getFile
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testGetClassPathFromManifest_nullManifest ()
specifier|public
name|void
name|testGetClassPathFromManifest_nullManifest
parameter_list|()
block|{
name|assertThat
argument_list|(
name|ClassPath
operator|.
name|getClassPathFromManifest
argument_list|(
operator|new
name|File
argument_list|(
literal|"some.jar"
argument_list|)
argument_list|,
literal|null
argument_list|)
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
DECL|method|testGetClassPathFromManifest_noClassPath ()
specifier|public
name|void
name|testGetClassPathFromManifest_noClassPath
parameter_list|()
throws|throws
name|IOException
block|{
name|File
name|jarFile
init|=
operator|new
name|File
argument_list|(
literal|"base.jar"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|ClassPath
operator|.
name|getClassPathFromManifest
argument_list|(
name|jarFile
argument_list|,
name|manifest
argument_list|(
literal|""
argument_list|)
argument_list|)
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
DECL|method|testGetClassPathFromManifest_emptyClassPath ()
specifier|public
name|void
name|testGetClassPathFromManifest_emptyClassPath
parameter_list|()
throws|throws
name|IOException
block|{
name|File
name|jarFile
init|=
operator|new
name|File
argument_list|(
literal|"base.jar"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|ClassPath
operator|.
name|getClassPathFromManifest
argument_list|(
name|jarFile
argument_list|,
name|manifestClasspath
argument_list|(
literal|""
argument_list|)
argument_list|)
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
DECL|method|testGetClassPathFromManifest_badClassPath ()
specifier|public
name|void
name|testGetClassPathFromManifest_badClassPath
parameter_list|()
throws|throws
name|IOException
block|{
name|File
name|jarFile
init|=
operator|new
name|File
argument_list|(
literal|"base.jar"
argument_list|)
decl_stmt|;
name|Manifest
name|manifest
init|=
name|manifestClasspath
argument_list|(
literal|"nosuchscheme:an_invalid^path"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|ClassPath
operator|.
name|getClassPathFromManifest
argument_list|(
name|jarFile
argument_list|,
name|manifest
argument_list|)
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
DECL|method|testGetClassPathFromManifest_pathWithStrangeCharacter ()
specifier|public
name|void
name|testGetClassPathFromManifest_pathWithStrangeCharacter
parameter_list|()
throws|throws
name|IOException
block|{
name|File
name|jarFile
init|=
operator|new
name|File
argument_list|(
literal|"base/some.jar"
argument_list|)
decl_stmt|;
name|Manifest
name|manifest
init|=
name|manifestClasspath
argument_list|(
literal|"file:the^file.jar"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|ClassPath
operator|.
name|getClassPathFromManifest
argument_list|(
name|jarFile
argument_list|,
name|manifest
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|fullpath
argument_list|(
literal|"base/the^file.jar"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testGetClassPathFromManifest_relativeDirectory ()
specifier|public
name|void
name|testGetClassPathFromManifest_relativeDirectory
parameter_list|()
throws|throws
name|IOException
block|{
name|File
name|jarFile
init|=
operator|new
name|File
argument_list|(
literal|"base/some.jar"
argument_list|)
decl_stmt|;
comment|// with/relative/directory is the Class-Path value in the mf file.
name|Manifest
name|manifest
init|=
name|manifestClasspath
argument_list|(
literal|"with/relative/dir"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|ClassPath
operator|.
name|getClassPathFromManifest
argument_list|(
name|jarFile
argument_list|,
name|manifest
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|fullpath
argument_list|(
literal|"base/with/relative/dir"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testGetClassPathFromManifest_relativeJar ()
specifier|public
name|void
name|testGetClassPathFromManifest_relativeJar
parameter_list|()
throws|throws
name|IOException
block|{
name|File
name|jarFile
init|=
operator|new
name|File
argument_list|(
literal|"base/some.jar"
argument_list|)
decl_stmt|;
comment|// with/relative/directory is the Class-Path value in the mf file.
name|Manifest
name|manifest
init|=
name|manifestClasspath
argument_list|(
literal|"with/relative.jar"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|ClassPath
operator|.
name|getClassPathFromManifest
argument_list|(
name|jarFile
argument_list|,
name|manifest
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|fullpath
argument_list|(
literal|"base/with/relative.jar"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testGetClassPathFromManifest_jarInCurrentDirectory ()
specifier|public
name|void
name|testGetClassPathFromManifest_jarInCurrentDirectory
parameter_list|()
throws|throws
name|IOException
block|{
name|File
name|jarFile
init|=
operator|new
name|File
argument_list|(
literal|"base/some.jar"
argument_list|)
decl_stmt|;
comment|// with/relative/directory is the Class-Path value in the mf file.
name|Manifest
name|manifest
init|=
name|manifestClasspath
argument_list|(
literal|"current.jar"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|ClassPath
operator|.
name|getClassPathFromManifest
argument_list|(
name|jarFile
argument_list|,
name|manifest
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|fullpath
argument_list|(
literal|"base/current.jar"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testGetClassPathFromManifest_absoluteDirectory ()
specifier|public
name|void
name|testGetClassPathFromManifest_absoluteDirectory
parameter_list|()
throws|throws
name|IOException
block|{
name|File
name|jarFile
init|=
operator|new
name|File
argument_list|(
literal|"base/some.jar"
argument_list|)
decl_stmt|;
name|Manifest
name|manifest
init|=
name|manifestClasspath
argument_list|(
literal|"file:/with/absolute/dir"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|ClassPath
operator|.
name|getClassPathFromManifest
argument_list|(
name|jarFile
argument_list|,
name|manifest
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|fullpath
argument_list|(
literal|"/with/absolute/dir"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testGetClassPathFromManifest_absoluteJar ()
specifier|public
name|void
name|testGetClassPathFromManifest_absoluteJar
parameter_list|()
throws|throws
name|IOException
block|{
name|File
name|jarFile
init|=
operator|new
name|File
argument_list|(
literal|"base/some.jar"
argument_list|)
decl_stmt|;
name|Manifest
name|manifest
init|=
name|manifestClasspath
argument_list|(
literal|"file:/with/absolute.jar"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|ClassPath
operator|.
name|getClassPathFromManifest
argument_list|(
name|jarFile
argument_list|,
name|manifest
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|fullpath
argument_list|(
literal|"/with/absolute.jar"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testGetClassPathFromManifest_multiplePaths ()
specifier|public
name|void
name|testGetClassPathFromManifest_multiplePaths
parameter_list|()
throws|throws
name|IOException
block|{
name|File
name|jarFile
init|=
operator|new
name|File
argument_list|(
literal|"base/some.jar"
argument_list|)
decl_stmt|;
name|Manifest
name|manifest
init|=
name|manifestClasspath
argument_list|(
literal|"file:/with/absolute.jar relative.jar  relative/dir"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|ClassPath
operator|.
name|getClassPathFromManifest
argument_list|(
name|jarFile
argument_list|,
name|manifest
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|fullpath
argument_list|(
literal|"/with/absolute.jar"
argument_list|)
argument_list|,
name|fullpath
argument_list|(
literal|"base/relative.jar"
argument_list|)
argument_list|,
name|fullpath
argument_list|(
literal|"base/relative/dir"
argument_list|)
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
block|}
DECL|method|testGetClassPathFromManifest_leadingBlanks ()
specifier|public
name|void
name|testGetClassPathFromManifest_leadingBlanks
parameter_list|()
throws|throws
name|IOException
block|{
name|File
name|jarFile
init|=
operator|new
name|File
argument_list|(
literal|"base/some.jar"
argument_list|)
decl_stmt|;
name|Manifest
name|manifest
init|=
name|manifestClasspath
argument_list|(
literal|" relative.jar"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|ClassPath
operator|.
name|getClassPathFromManifest
argument_list|(
name|jarFile
argument_list|,
name|manifest
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|fullpath
argument_list|(
literal|"base/relative.jar"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testGetClassPathFromManifest_trailingBlanks ()
specifier|public
name|void
name|testGetClassPathFromManifest_trailingBlanks
parameter_list|()
throws|throws
name|IOException
block|{
name|File
name|jarFile
init|=
operator|new
name|File
argument_list|(
literal|"base/some.jar"
argument_list|)
decl_stmt|;
name|Manifest
name|manifest
init|=
name|manifestClasspath
argument_list|(
literal|"relative.jar "
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|ClassPath
operator|.
name|getClassPathFromManifest
argument_list|(
name|jarFile
argument_list|,
name|manifest
argument_list|)
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|fullpath
argument_list|(
literal|"base/relative.jar"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testGetClassName ()
specifier|public
name|void
name|testGetClassName
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"abc.d.Abc"
argument_list|,
name|ClassPath
operator|.
name|getClassName
argument_list|(
literal|"abc/d/Abc.class"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testResourceInfo_of ()
specifier|public
name|void
name|testResourceInfo_of
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|ClassInfo
operator|.
name|class
argument_list|,
name|resourceInfo
argument_list|(
name|ClassPathTest
operator|.
name|class
argument_list|)
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ClassInfo
operator|.
name|class
argument_list|,
name|resourceInfo
argument_list|(
name|ClassPath
operator|.
name|class
argument_list|)
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ClassInfo
operator|.
name|class
argument_list|,
name|resourceInfo
argument_list|(
name|Nested
operator|.
name|class
argument_list|)
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testGetSimpleName ()
specifier|public
name|void
name|testGetSimpleName
parameter_list|()
block|{
name|ClassLoader
name|classLoader
init|=
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Foo"
argument_list|,
operator|new
name|ClassInfo
argument_list|(
name|FILE
argument_list|,
literal|"Foo.class"
argument_list|,
name|classLoader
argument_list|)
operator|.
name|getSimpleName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Foo"
argument_list|,
operator|new
name|ClassInfo
argument_list|(
name|FILE
argument_list|,
literal|"a/b/Foo.class"
argument_list|,
name|classLoader
argument_list|)
operator|.
name|getSimpleName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Foo"
argument_list|,
operator|new
name|ClassInfo
argument_list|(
name|FILE
argument_list|,
literal|"a/b/Bar$Foo.class"
argument_list|,
name|classLoader
argument_list|)
operator|.
name|getSimpleName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
operator|new
name|ClassInfo
argument_list|(
name|FILE
argument_list|,
literal|"a/b/Bar$1.class"
argument_list|,
name|classLoader
argument_list|)
operator|.
name|getSimpleName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Foo"
argument_list|,
operator|new
name|ClassInfo
argument_list|(
name|FILE
argument_list|,
literal|"a/b/Bar$Foo.class"
argument_list|,
name|classLoader
argument_list|)
operator|.
name|getSimpleName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
operator|new
name|ClassInfo
argument_list|(
name|FILE
argument_list|,
literal|"a/b/Bar$1.class"
argument_list|,
name|classLoader
argument_list|)
operator|.
name|getSimpleName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Local"
argument_list|,
operator|new
name|ClassInfo
argument_list|(
name|FILE
argument_list|,
literal|"a/b/Bar$1Local.class"
argument_list|,
name|classLoader
argument_list|)
operator|.
name|getSimpleName
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testGetPackageName ()
specifier|public
name|void
name|testGetPackageName
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|""
argument_list|,
operator|new
name|ClassInfo
argument_list|(
name|FILE
argument_list|,
literal|"Foo.class"
argument_list|,
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
argument_list|)
operator|.
name|getPackageName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a.b"
argument_list|,
operator|new
name|ClassInfo
argument_list|(
name|FILE
argument_list|,
literal|"a/b/Foo.class"
argument_list|,
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
argument_list|)
operator|.
name|getPackageName
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Test that ResourceInfo.urls() returns identical content to ClassLoader.getResources()
DECL|method|testGetClassPathUrls ()
specifier|public
name|void
name|testGetClassPathUrls
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|oldPathSeparator
init|=
name|PATH_SEPARATOR
operator|.
name|value
argument_list|()
decl_stmt|;
name|String
name|oldClassPath
init|=
name|JAVA_CLASS_PATH
operator|.
name|value
argument_list|()
decl_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
name|PATH_SEPARATOR
operator|.
name|key
argument_list|()
argument_list|,
literal|":"
argument_list|)
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
name|JAVA_CLASS_PATH
operator|.
name|key
argument_list|()
argument_list|,
name|Joiner
operator|.
name|on
argument_list|(
literal|":"
argument_list|)
operator|.
name|join
argument_list|(
literal|"relative/path/to/some.jar"
argument_list|,
literal|"/absolute/path/to/some.jar"
argument_list|,
literal|"relative/path/to/class/root"
argument_list|,
literal|"/absolute/path/to/class/root"
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|ImmutableList
argument_list|<
name|URL
argument_list|>
name|urls
init|=
name|ClassPath
operator|.
name|parseJavaClassPath
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|urls
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getProtocol
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"file"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|urls
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getAuthority
argument_list|()
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|urls
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getPath
argument_list|()
argument_list|)
operator|.
name|endsWith
argument_list|(
literal|"/relative/path/to/some.jar"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|urls
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
operator|new
name|URL
argument_list|(
literal|"file:///absolute/path/to/some.jar"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|urls
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|getProtocol
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"file"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|urls
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|getAuthority
argument_list|()
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|urls
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|getPath
argument_list|()
argument_list|)
operator|.
name|endsWith
argument_list|(
literal|"/relative/path/to/class/root"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|urls
operator|.
name|get
argument_list|(
literal|3
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
operator|new
name|URL
argument_list|(
literal|"file:///absolute/path/to/class/root"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|urls
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|4
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|System
operator|.
name|setProperty
argument_list|(
name|PATH_SEPARATOR
operator|.
name|key
argument_list|()
argument_list|,
name|oldPathSeparator
argument_list|)
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
name|JAVA_CLASS_PATH
operator|.
name|key
argument_list|()
argument_list|,
name|oldClassPath
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|contentEquals (URL left, URL right)
specifier|private
specifier|static
name|boolean
name|contentEquals
parameter_list|(
name|URL
name|left
parameter_list|,
name|URL
name|right
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|Resources
operator|.
name|asByteSource
argument_list|(
name|left
argument_list|)
operator|.
name|contentEquals
argument_list|(
name|Resources
operator|.
name|asByteSource
argument_list|(
name|right
argument_list|)
argument_list|)
return|;
block|}
DECL|class|Nested
specifier|private
specifier|static
class|class
name|Nested
block|{}
DECL|method|testNulls ()
specifier|public
name|void
name|testNulls
parameter_list|()
throws|throws
name|IOException
block|{
operator|new
name|NullPointerTester
argument_list|()
operator|.
name|testAllPublicStaticMethods
argument_list|(
name|ClassPath
operator|.
name|class
argument_list|)
expr_stmt|;
operator|new
name|NullPointerTester
argument_list|()
operator|.
name|testAllPublicInstanceMethods
argument_list|(
name|ClassPath
operator|.
name|from
argument_list|(
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testLocationsFrom_idempotentScan ()
specifier|public
name|void
name|testLocationsFrom_idempotentScan
parameter_list|()
throws|throws
name|IOException
block|{
name|ImmutableSet
argument_list|<
name|ClassPath
operator|.
name|LocationInfo
argument_list|>
name|locations
init|=
name|ClassPath
operator|.
name|locationsFrom
argument_list|(
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|locations
argument_list|)
operator|.
name|isNotEmpty
argument_list|()
expr_stmt|;
for|for
control|(
name|ClassPath
operator|.
name|LocationInfo
name|location
range|:
name|locations
control|)
block|{
name|ImmutableSet
argument_list|<
name|ResourceInfo
argument_list|>
name|resources
init|=
name|location
operator|.
name|scanResources
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|resources
argument_list|)
operator|.
name|isNotEmpty
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|location
operator|.
name|scanResources
argument_list|()
argument_list|)
operator|.
name|containsExactlyElementsIn
argument_list|(
name|resources
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testLocationsFrom_idempotentLocations ()
specifier|public
name|void
name|testLocationsFrom_idempotentLocations
parameter_list|()
block|{
name|ImmutableSet
argument_list|<
name|ClassPath
operator|.
name|LocationInfo
argument_list|>
name|locations
init|=
name|ClassPath
operator|.
name|locationsFrom
argument_list|(
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|ClassPath
operator|.
name|locationsFrom
argument_list|(
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
argument_list|)
argument_list|)
operator|.
name|containsExactlyElementsIn
argument_list|(
name|locations
argument_list|)
expr_stmt|;
block|}
DECL|method|testLocationEquals ()
specifier|public
name|void
name|testLocationEquals
parameter_list|()
block|{
name|ClassLoader
name|child
init|=
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
decl_stmt|;
name|ClassLoader
name|parent
init|=
name|child
operator|.
name|getParent
argument_list|()
decl_stmt|;
operator|new
name|EqualsTester
argument_list|()
operator|.
name|addEqualityGroup
argument_list|(
operator|new
name|ClassPath
operator|.
name|LocationInfo
argument_list|(
operator|new
name|File
argument_list|(
literal|"foo.jar"
argument_list|)
argument_list|,
name|child
argument_list|)
argument_list|,
operator|new
name|ClassPath
operator|.
name|LocationInfo
argument_list|(
operator|new
name|File
argument_list|(
literal|"foo.jar"
argument_list|)
argument_list|,
name|child
argument_list|)
argument_list|)
operator|.
name|addEqualityGroup
argument_list|(
operator|new
name|ClassPath
operator|.
name|LocationInfo
argument_list|(
operator|new
name|File
argument_list|(
literal|"foo.jar"
argument_list|)
argument_list|,
name|parent
argument_list|)
argument_list|)
operator|.
name|addEqualityGroup
argument_list|(
operator|new
name|ClassPath
operator|.
name|LocationInfo
argument_list|(
operator|new
name|File
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
name|child
argument_list|)
argument_list|)
operator|.
name|testEquals
argument_list|()
expr_stmt|;
block|}
DECL|method|testScanAllResources ()
specifier|public
name|void
name|testScanAllResources
parameter_list|()
throws|throws
name|IOException
block|{
name|assertThat
argument_list|(
name|scanResourceNames
argument_list|(
name|ClassLoader
operator|.
name|getSystemClassLoader
argument_list|()
argument_list|)
argument_list|)
operator|.
name|contains
argument_list|(
literal|"com/google/common/reflect/ClassPathTest.class"
argument_list|)
expr_stmt|;
block|}
DECL|method|testExistsThrowsSecurityException ()
specifier|public
name|void
name|testExistsThrowsSecurityException
parameter_list|()
throws|throws
name|IOException
throws|,
name|URISyntaxException
block|{
name|SecurityManager
name|oldSecurityManager
init|=
name|System
operator|.
name|getSecurityManager
argument_list|()
decl_stmt|;
try|try
block|{
name|doTestExistsThrowsSecurityException
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|System
operator|.
name|setSecurityManager
argument_list|(
name|oldSecurityManager
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|doTestExistsThrowsSecurityException ()
specifier|private
name|void
name|doTestExistsThrowsSecurityException
parameter_list|()
throws|throws
name|IOException
throws|,
name|URISyntaxException
block|{
name|File
name|file
init|=
literal|null
decl_stmt|;
comment|// In Java 9, Logger may read the TZ database. Only disallow reading the class path URLs.
specifier|final
name|PermissionCollection
name|readClassPathFiles
init|=
operator|new
name|FilePermission
argument_list|(
literal|""
argument_list|,
literal|"read"
argument_list|)
operator|.
name|newPermissionCollection
argument_list|()
decl_stmt|;
for|for
control|(
name|URL
name|url
range|:
name|ClassPath
operator|.
name|parseJavaClassPath
argument_list|()
control|)
block|{
if|if
condition|(
name|url
operator|.
name|getProtocol
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"file"
argument_list|)
condition|)
block|{
name|file
operator|=
operator|new
name|File
argument_list|(
name|url
operator|.
name|toURI
argument_list|()
argument_list|)
expr_stmt|;
name|readClassPathFiles
operator|.
name|add
argument_list|(
operator|new
name|FilePermission
argument_list|(
name|file
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
literal|"read"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|assertThat
argument_list|(
name|file
argument_list|)
operator|.
name|isNotNull
argument_list|()
expr_stmt|;
name|SecurityManager
name|disallowFilesSecurityManager
init|=
operator|new
name|SecurityManager
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|checkPermission
parameter_list|(
name|Permission
name|p
parameter_list|)
block|{
if|if
condition|(
name|readClassPathFiles
operator|.
name|implies
argument_list|(
name|p
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|SecurityException
argument_list|(
literal|"Disallowed: "
operator|+
name|p
argument_list|)
throw|;
block|}
block|}
block|}
decl_stmt|;
name|System
operator|.
name|setSecurityManager
argument_list|(
name|disallowFilesSecurityManager
argument_list|)
expr_stmt|;
try|try
block|{
name|file
operator|.
name|exists
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Did not get expected SecurityException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SecurityException
name|expected
parameter_list|)
block|{     }
name|ClassPath
name|classPath
init|=
name|ClassPath
operator|.
name|from
argument_list|(
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
argument_list|)
decl_stmt|;
comment|// ClassPath may contain resources from the boot class loader; just not from the class path.
for|for
control|(
name|ResourceInfo
name|resource
range|:
name|classPath
operator|.
name|getResources
argument_list|()
control|)
block|{
name|assertThat
argument_list|(
name|resource
operator|.
name|getResourceName
argument_list|()
argument_list|)
operator|.
name|doesNotContain
argument_list|(
literal|"com/google/common/reflect/"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|findClass ( Iterable<ClassPath.ClassInfo> classes, Class<?> cls)
specifier|private
specifier|static
name|ClassPath
operator|.
name|ClassInfo
name|findClass
parameter_list|(
name|Iterable
argument_list|<
name|ClassPath
operator|.
name|ClassInfo
argument_list|>
name|classes
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|cls
parameter_list|)
block|{
for|for
control|(
name|ClassPath
operator|.
name|ClassInfo
name|classInfo
range|:
name|classes
control|)
block|{
if|if
condition|(
name|classInfo
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|cls
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|classInfo
return|;
block|}
block|}
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"failed to find "
operator|+
name|cls
argument_list|)
throw|;
block|}
DECL|method|resourceInfo (Class<?> cls)
specifier|private
specifier|static
name|ResourceInfo
name|resourceInfo
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|cls
parameter_list|)
block|{
name|String
name|resource
init|=
name|cls
operator|.
name|getName
argument_list|()
operator|.
name|replace
argument_list|(
literal|'.'
argument_list|,
literal|'/'
argument_list|)
operator|+
literal|".class"
decl_stmt|;
name|ClassLoader
name|loader
init|=
name|cls
operator|.
name|getClassLoader
argument_list|()
decl_stmt|;
return|return
name|ResourceInfo
operator|.
name|of
argument_list|(
name|FILE
argument_list|,
name|resource
argument_list|,
name|loader
argument_list|)
return|;
block|}
DECL|method|classInfo (Class<?> cls)
specifier|private
specifier|static
name|ClassInfo
name|classInfo
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|cls
parameter_list|)
block|{
return|return
name|classInfo
argument_list|(
name|cls
argument_list|,
name|cls
operator|.
name|getClassLoader
argument_list|()
argument_list|)
return|;
block|}
DECL|method|classInfo (Class<?> cls, ClassLoader classLoader)
specifier|private
specifier|static
name|ClassInfo
name|classInfo
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|cls
parameter_list|,
name|ClassLoader
name|classLoader
parameter_list|)
block|{
name|String
name|resource
init|=
name|cls
operator|.
name|getName
argument_list|()
operator|.
name|replace
argument_list|(
literal|'.'
argument_list|,
literal|'/'
argument_list|)
operator|+
literal|".class"
decl_stmt|;
return|return
operator|new
name|ClassInfo
argument_list|(
name|FILE
argument_list|,
name|resource
argument_list|,
name|classLoader
argument_list|)
return|;
block|}
DECL|method|manifestClasspath (String classpath)
specifier|private
specifier|static
name|Manifest
name|manifestClasspath
parameter_list|(
name|String
name|classpath
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|manifest
argument_list|(
literal|"Class-Path: "
operator|+
name|classpath
operator|+
literal|"\n"
argument_list|)
return|;
block|}
DECL|method|writeSelfReferencingJarFile (File jarFile, String... entries)
specifier|private
specifier|static
name|void
name|writeSelfReferencingJarFile
parameter_list|(
name|File
name|jarFile
parameter_list|,
name|String
modifier|...
name|entries
parameter_list|)
throws|throws
name|IOException
block|{
name|Manifest
name|manifest
init|=
operator|new
name|Manifest
argument_list|()
decl_stmt|;
comment|// Without version, the manifest is silently ignored. Ugh!
name|manifest
operator|.
name|getMainAttributes
argument_list|()
operator|.
name|put
argument_list|(
name|Attributes
operator|.
name|Name
operator|.
name|MANIFEST_VERSION
argument_list|,
literal|"1.0"
argument_list|)
expr_stmt|;
name|manifest
operator|.
name|getMainAttributes
argument_list|()
operator|.
name|put
argument_list|(
name|Attributes
operator|.
name|Name
operator|.
name|CLASS_PATH
argument_list|,
name|jarFile
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Closer
name|closer
init|=
name|Closer
operator|.
name|create
argument_list|()
decl_stmt|;
try|try
block|{
name|FileOutputStream
name|fileOut
init|=
name|closer
operator|.
name|register
argument_list|(
operator|new
name|FileOutputStream
argument_list|(
name|jarFile
argument_list|)
argument_list|)
decl_stmt|;
name|JarOutputStream
name|jarOut
init|=
name|closer
operator|.
name|register
argument_list|(
operator|new
name|JarOutputStream
argument_list|(
name|fileOut
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|entry
range|:
name|entries
control|)
block|{
name|jarOut
operator|.
name|putNextEntry
argument_list|(
operator|new
name|ZipEntry
argument_list|(
name|entry
argument_list|)
argument_list|)
expr_stmt|;
name|Resources
operator|.
name|copy
argument_list|(
name|ClassPathTest
operator|.
name|class
operator|.
name|getResource
argument_list|(
name|entry
argument_list|)
argument_list|,
name|jarOut
argument_list|)
expr_stmt|;
name|jarOut
operator|.
name|closeEntry
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
throw|throw
name|closer
operator|.
name|rethrow
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|closer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|manifest (String content)
specifier|private
specifier|static
name|Manifest
name|manifest
parameter_list|(
name|String
name|content
parameter_list|)
throws|throws
name|IOException
block|{
name|InputStream
name|in
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|content
operator|.
name|getBytes
argument_list|(
name|US_ASCII
argument_list|)
argument_list|)
decl_stmt|;
name|Manifest
name|manifest
init|=
operator|new
name|Manifest
argument_list|()
decl_stmt|;
name|manifest
operator|.
name|read
argument_list|(
name|in
argument_list|)
expr_stmt|;
return|return
name|manifest
return|;
block|}
DECL|method|fullpath (String path)
specifier|private
specifier|static
name|File
name|fullpath
parameter_list|(
name|String
name|path
parameter_list|)
block|{
return|return
operator|new
name|File
argument_list|(
operator|new
name|File
argument_list|(
name|path
argument_list|)
operator|.
name|toURI
argument_list|()
argument_list|)
return|;
block|}
DECL|method|makeJarUrlWithName (String name)
specifier|private
specifier|static
name|URL
name|makeJarUrlWithName
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
name|File
name|fullPath
init|=
operator|new
name|File
argument_list|(
name|Files
operator|.
name|createTempDir
argument_list|()
argument_list|,
name|name
argument_list|)
decl_stmt|;
name|File
name|jarFile
init|=
name|pickAnyJarFile
argument_list|()
decl_stmt|;
name|Files
operator|.
name|copy
argument_list|(
name|jarFile
argument_list|,
name|fullPath
argument_list|)
expr_stmt|;
return|return
name|fullPath
operator|.
name|toURI
argument_list|()
operator|.
name|toURL
argument_list|()
return|;
block|}
DECL|method|pickAnyJarFile ()
specifier|private
specifier|static
name|File
name|pickAnyJarFile
parameter_list|()
throws|throws
name|IOException
block|{
for|for
control|(
name|ClassPath
operator|.
name|LocationInfo
name|location
range|:
name|ClassPath
operator|.
name|locationsFrom
argument_list|(
name|ClassPathTest
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
argument_list|)
control|)
block|{
if|if
condition|(
operator|!
name|location
operator|.
name|file
argument_list|()
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
return|return
name|location
operator|.
name|file
argument_list|()
return|;
block|}
block|}
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"Failed to find a jar file"
argument_list|)
throw|;
block|}
annotation|@
name|AndroidIncompatible
comment|// Path (for symlink creation)
DECL|method|deleteRecursivelyOrLog (java.nio.file.Path path)
specifier|private
specifier|static
name|void
name|deleteRecursivelyOrLog
parameter_list|(
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
name|path
parameter_list|)
block|{
try|try
block|{
name|deleteRecursively
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|log
argument_list|(
name|WARNING
argument_list|,
literal|"Failure cleaning up test directory"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|scanResourceNames (ClassLoader loader)
specifier|private
specifier|static
name|ImmutableSet
argument_list|<
name|String
argument_list|>
name|scanResourceNames
parameter_list|(
name|ClassLoader
name|loader
parameter_list|)
throws|throws
name|IOException
block|{
name|ImmutableSet
operator|.
name|Builder
argument_list|<
name|String
argument_list|>
name|builder
init|=
name|ImmutableSet
operator|.
name|builder
argument_list|()
decl_stmt|;
for|for
control|(
name|ClassPath
operator|.
name|LocationInfo
name|location
range|:
name|ClassPath
operator|.
name|locationsFrom
argument_list|(
name|loader
argument_list|)
control|)
block|{
for|for
control|(
name|ResourceInfo
name|resource
range|:
name|location
operator|.
name|scanResources
argument_list|()
control|)
block|{
name|builder
operator|.
name|add
argument_list|(
name|resource
operator|.
name|getResourceName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
block|}
end_class

end_unit

