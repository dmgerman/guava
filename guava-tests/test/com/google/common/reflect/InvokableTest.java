begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2012 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.reflect
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|reflect
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|reflect
operator|.
name|TypeToken
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|testing
operator|.
name|EqualsTester
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|testing
operator|.
name|NullPointerTester
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|annotation
operator|.
name|Retention
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|annotation
operator|.
name|RetentionPolicy
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Constructor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|TypeVariable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_comment
comment|/**  * Unit tests for {@link Invokable}.  *  * @author Ben Yu  */
end_comment

begin_class
DECL|class|InvokableTest
specifier|public
class|class
name|InvokableTest
extends|extends
name|TestCase
block|{
DECL|method|testConstructor_returnType ()
specifier|public
name|void
name|testConstructor_returnType
parameter_list|()
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
name|Prepender
operator|.
name|class
argument_list|,
name|Prepender
operator|.
name|constructor
argument_list|()
operator|.
name|getReturnType
argument_list|()
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testConstructor_exceptionTypes ()
specifier|public
name|void
name|testConstructor_exceptionTypes
parameter_list|()
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
name|TypeToken
operator|.
name|of
argument_list|(
name|NullPointerException
operator|.
name|class
argument_list|)
argument_list|)
argument_list|,
name|Prepender
operator|.
name|constructor
argument_list|(
name|String
operator|.
name|class
argument_list|,
name|int
operator|.
name|class
argument_list|)
operator|.
name|getExceptionTypes
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testConstructor_typeParameters ()
specifier|public
name|void
name|testConstructor_typeParameters
parameter_list|()
throws|throws
name|Exception
block|{
name|TypeVariable
argument_list|<
name|?
argument_list|>
index|[]
name|variables
init|=
name|Prepender
operator|.
name|constructor
argument_list|()
operator|.
name|getTypeParameters
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|variables
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"A"
argument_list|,
name|variables
index|[
literal|0
index|]
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testConstructor_parameters ()
specifier|public
name|void
name|testConstructor_parameters
parameter_list|()
throws|throws
name|Exception
block|{
name|Invokable
argument_list|<
name|?
argument_list|,
name|Prepender
argument_list|>
name|delegate
init|=
name|Prepender
operator|.
name|constructor
argument_list|(
name|String
operator|.
name|class
argument_list|,
name|int
operator|.
name|class
argument_list|)
decl_stmt|;
name|ImmutableList
argument_list|<
name|Parameter
argument_list|<
name|?
argument_list|>
argument_list|>
name|parameters
init|=
name|delegate
operator|.
name|getParameters
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|parameters
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|String
operator|.
name|class
argument_list|,
name|parameters
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getType
argument_list|()
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|parameters
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|isAnnotationPresent
argument_list|(
name|NotBlank
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|int
operator|.
name|class
argument_list|,
name|parameters
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getType
argument_list|()
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|parameters
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|isAnnotationPresent
argument_list|(
name|NotBlank
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
operator|new
name|EqualsTester
argument_list|()
operator|.
name|addEqualityGroup
argument_list|(
name|parameters
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|addEqualityGroup
argument_list|(
name|parameters
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|testEquals
argument_list|()
expr_stmt|;
block|}
DECL|method|testConstructor_call ()
specifier|public
name|void
name|testConstructor_call
parameter_list|()
throws|throws
name|Exception
block|{
name|Invokable
argument_list|<
name|?
argument_list|,
name|Prepender
argument_list|>
name|delegate
init|=
name|Prepender
operator|.
name|constructor
argument_list|(
name|String
operator|.
name|class
argument_list|,
name|int
operator|.
name|class
argument_list|)
decl_stmt|;
name|Prepender
name|prepender
init|=
name|delegate
operator|.
name|invoke
argument_list|(
literal|null
argument_list|,
literal|"a"
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"a"
argument_list|,
name|prepender
operator|.
name|prefix
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|prepender
operator|.
name|times
argument_list|)
expr_stmt|;
block|}
DECL|method|testConstructor_returning ()
specifier|public
name|void
name|testConstructor_returning
parameter_list|()
throws|throws
name|Exception
block|{
name|Invokable
argument_list|<
name|?
argument_list|,
name|Prepender
argument_list|>
name|delegate
init|=
name|Prepender
operator|.
name|constructor
argument_list|(
name|String
operator|.
name|class
argument_list|,
name|int
operator|.
name|class
argument_list|)
operator|.
name|returning
argument_list|(
name|Prepender
operator|.
name|class
argument_list|)
decl_stmt|;
name|Prepender
name|prepender
init|=
name|delegate
operator|.
name|invoke
argument_list|(
literal|null
argument_list|,
literal|"a"
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"a"
argument_list|,
name|prepender
operator|.
name|prefix
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|prepender
operator|.
name|times
argument_list|)
expr_stmt|;
block|}
DECL|method|testConstructor_invalidReturning ()
specifier|public
name|void
name|testConstructor_invalidReturning
parameter_list|()
throws|throws
name|Exception
block|{
name|Invokable
argument_list|<
name|?
argument_list|,
name|Prepender
argument_list|>
name|delegate
init|=
name|Prepender
operator|.
name|constructor
argument_list|(
name|String
operator|.
name|class
argument_list|,
name|int
operator|.
name|class
argument_list|)
decl_stmt|;
try|try
block|{
name|delegate
operator|.
name|returning
argument_list|(
name|SubPrepender
operator|.
name|class
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{}
block|}
DECL|method|testStaticMethod_returnType ()
specifier|public
name|void
name|testStaticMethod_returnType
parameter_list|()
throws|throws
name|Exception
block|{
name|Invokable
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|delegate
init|=
name|Prepender
operator|.
name|method
argument_list|(
literal|"prepend"
argument_list|,
name|String
operator|.
name|class
argument_list|,
name|Iterable
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|Iterable
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|,
name|delegate
operator|.
name|getReturnType
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testStaticMethod_exceptionTypes ()
specifier|public
name|void
name|testStaticMethod_exceptionTypes
parameter_list|()
throws|throws
name|Exception
block|{
name|Invokable
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|delegate
init|=
name|Prepender
operator|.
name|method
argument_list|(
literal|"prepend"
argument_list|,
name|String
operator|.
name|class
argument_list|,
name|Iterable
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|()
argument_list|,
name|delegate
operator|.
name|getExceptionTypes
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testStaticMethod_typeParameters ()
specifier|public
name|void
name|testStaticMethod_typeParameters
parameter_list|()
throws|throws
name|Exception
block|{
name|Invokable
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|delegate
init|=
name|Prepender
operator|.
name|method
argument_list|(
literal|"prepend"
argument_list|,
name|String
operator|.
name|class
argument_list|,
name|Iterable
operator|.
name|class
argument_list|)
decl_stmt|;
name|TypeVariable
argument_list|<
name|?
argument_list|>
index|[]
name|variables
init|=
name|delegate
operator|.
name|getTypeParameters
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|variables
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"T"
argument_list|,
name|variables
index|[
literal|0
index|]
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testStaticMethod_parameters ()
specifier|public
name|void
name|testStaticMethod_parameters
parameter_list|()
throws|throws
name|Exception
block|{
name|Invokable
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|delegate
init|=
name|Prepender
operator|.
name|method
argument_list|(
literal|"prepend"
argument_list|,
name|String
operator|.
name|class
argument_list|,
name|Iterable
operator|.
name|class
argument_list|)
decl_stmt|;
name|ImmutableList
argument_list|<
name|Parameter
argument_list|<
name|?
argument_list|>
argument_list|>
name|parameters
init|=
name|delegate
operator|.
name|getParameters
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|parameters
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|String
operator|.
name|class
argument_list|,
name|parameters
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getType
argument_list|()
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|parameters
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|isAnnotationPresent
argument_list|(
name|NotBlank
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|Iterable
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|,
name|parameters
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|parameters
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|isAnnotationPresent
argument_list|(
name|NotBlank
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
operator|new
name|EqualsTester
argument_list|()
operator|.
name|addEqualityGroup
argument_list|(
name|parameters
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|addEqualityGroup
argument_list|(
name|parameters
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|testEquals
argument_list|()
expr_stmt|;
block|}
DECL|method|testStaticMethod_call ()
specifier|public
name|void
name|testStaticMethod_call
parameter_list|()
throws|throws
name|Exception
block|{
name|Invokable
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|delegate
init|=
name|Prepender
operator|.
name|method
argument_list|(
literal|"prepend"
argument_list|,
name|String
operator|.
name|class
argument_list|,
name|Iterable
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// prepend() returns Iterable<String>
name|Iterable
argument_list|<
name|String
argument_list|>
name|result
init|=
operator|(
name|Iterable
argument_list|<
name|String
argument_list|>
operator|)
name|delegate
operator|.
name|invoke
argument_list|(
literal|null
argument_list|,
literal|"a"
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"b"
argument_list|,
literal|"c"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|)
argument_list|,
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|result
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testStaticMethod_returning ()
specifier|public
name|void
name|testStaticMethod_returning
parameter_list|()
throws|throws
name|Exception
block|{
name|Invokable
argument_list|<
name|Object
argument_list|,
name|Iterable
argument_list|<
name|String
argument_list|>
argument_list|>
name|delegate
init|=
name|Prepender
operator|.
name|method
argument_list|(
literal|"prepend"
argument_list|,
name|String
operator|.
name|class
argument_list|,
name|Iterable
operator|.
name|class
argument_list|)
operator|.
name|returning
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|Iterable
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|Iterable
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|,
name|delegate
operator|.
name|getReturnType
argument_list|()
argument_list|)
expr_stmt|;
name|Iterable
argument_list|<
name|String
argument_list|>
name|result
init|=
name|delegate
operator|.
name|invoke
argument_list|(
literal|null
argument_list|,
literal|"a"
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"b"
argument_list|,
literal|"c"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|)
argument_list|,
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|result
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testStaticMethod_returningRawType ()
specifier|public
name|void
name|testStaticMethod_returningRawType
parameter_list|()
throws|throws
name|Exception
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
comment|// the purpose is to test raw type
name|Invokable
argument_list|<
name|Object
argument_list|,
name|Iterable
argument_list|>
name|delegate
init|=
name|Prepender
operator|.
name|method
argument_list|(
literal|"prepend"
argument_list|,
name|String
operator|.
name|class
argument_list|,
name|Iterable
operator|.
name|class
argument_list|)
operator|.
name|returning
argument_list|(
name|Iterable
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|Iterable
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|,
name|delegate
operator|.
name|getReturnType
argument_list|()
argument_list|)
expr_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// prepend() returns Iterable<String>
name|Iterable
argument_list|<
name|String
argument_list|>
name|result
init|=
name|delegate
operator|.
name|invoke
argument_list|(
literal|null
argument_list|,
literal|"a"
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"b"
argument_list|,
literal|"c"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|)
argument_list|,
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|result
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testStaticMethod_invalidReturning ()
specifier|public
name|void
name|testStaticMethod_invalidReturning
parameter_list|()
throws|throws
name|Exception
block|{
name|Invokable
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|delegate
init|=
name|Prepender
operator|.
name|method
argument_list|(
literal|"prepend"
argument_list|,
name|String
operator|.
name|class
argument_list|,
name|Iterable
operator|.
name|class
argument_list|)
decl_stmt|;
try|try
block|{
name|delegate
operator|.
name|returning
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|Iterable
argument_list|<
name|Integer
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{}
block|}
DECL|method|testInstanceMethod_returnType ()
specifier|public
name|void
name|testInstanceMethod_returnType
parameter_list|()
throws|throws
name|Exception
block|{
name|Invokable
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|delegate
init|=
name|Prepender
operator|.
name|method
argument_list|(
literal|"prepend"
argument_list|,
name|Iterable
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|Iterable
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|,
name|delegate
operator|.
name|getReturnType
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testInstanceMethod_exceptionTypes ()
specifier|public
name|void
name|testInstanceMethod_exceptionTypes
parameter_list|()
throws|throws
name|Exception
block|{
name|Invokable
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|delegate
init|=
name|Prepender
operator|.
name|method
argument_list|(
literal|"prepend"
argument_list|,
name|Iterable
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
name|TypeToken
operator|.
name|of
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|)
argument_list|,
name|TypeToken
operator|.
name|of
argument_list|(
name|NullPointerException
operator|.
name|class
argument_list|)
argument_list|)
argument_list|,
name|delegate
operator|.
name|getExceptionTypes
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testInstanceMethod_typeParameters ()
specifier|public
name|void
name|testInstanceMethod_typeParameters
parameter_list|()
throws|throws
name|Exception
block|{
name|Invokable
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|delegate
init|=
name|Prepender
operator|.
name|method
argument_list|(
literal|"prepend"
argument_list|,
name|Iterable
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|delegate
operator|.
name|getTypeParameters
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
DECL|method|testInstanceMethod_parameters ()
specifier|public
name|void
name|testInstanceMethod_parameters
parameter_list|()
throws|throws
name|Exception
block|{
name|Invokable
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|delegate
init|=
name|Prepender
operator|.
name|method
argument_list|(
literal|"prepend"
argument_list|,
name|Iterable
operator|.
name|class
argument_list|)
decl_stmt|;
name|ImmutableList
argument_list|<
name|Parameter
argument_list|<
name|?
argument_list|>
argument_list|>
name|parameters
init|=
name|delegate
operator|.
name|getParameters
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|parameters
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|Iterable
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|,
name|parameters
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|parameters
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getAnnotations
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
operator|new
name|EqualsTester
argument_list|()
operator|.
name|addEqualityGroup
argument_list|(
name|parameters
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|testEquals
argument_list|()
expr_stmt|;
block|}
DECL|method|testInstanceMethod_call ()
specifier|public
name|void
name|testInstanceMethod_call
parameter_list|()
throws|throws
name|Exception
block|{
name|Invokable
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|delegate
init|=
name|Prepender
operator|.
name|method
argument_list|(
literal|"prepend"
argument_list|,
name|Iterable
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// prepend() returns Iterable<String>
name|Iterable
argument_list|<
name|String
argument_list|>
name|result
init|=
operator|(
name|Iterable
argument_list|<
name|String
argument_list|>
operator|)
name|delegate
operator|.
name|invoke
argument_list|(
operator|new
name|Prepender
argument_list|(
literal|"a"
argument_list|,
literal|2
argument_list|)
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"b"
argument_list|,
literal|"c"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"a"
argument_list|,
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|)
argument_list|,
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|result
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testInstanceMethod_returning ()
specifier|public
name|void
name|testInstanceMethod_returning
parameter_list|()
throws|throws
name|Exception
block|{
name|Invokable
argument_list|<
name|Object
argument_list|,
name|Iterable
argument_list|<
name|String
argument_list|>
argument_list|>
name|delegate
init|=
name|Prepender
operator|.
name|method
argument_list|(
literal|"prepend"
argument_list|,
name|Iterable
operator|.
name|class
argument_list|)
operator|.
name|returning
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|Iterable
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|Iterable
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|,
name|delegate
operator|.
name|getReturnType
argument_list|()
argument_list|)
expr_stmt|;
name|Iterable
argument_list|<
name|String
argument_list|>
name|result
init|=
name|delegate
operator|.
name|invoke
argument_list|(
operator|new
name|Prepender
argument_list|(
literal|"a"
argument_list|,
literal|2
argument_list|)
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"b"
argument_list|,
literal|"c"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"a"
argument_list|,
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|)
argument_list|,
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|result
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testInstanceMethod_returningRawType ()
specifier|public
name|void
name|testInstanceMethod_returningRawType
parameter_list|()
throws|throws
name|Exception
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
comment|// the purpose is to test raw type
name|Invokable
argument_list|<
name|Object
argument_list|,
name|Iterable
argument_list|>
name|delegate
init|=
name|Prepender
operator|.
name|method
argument_list|(
literal|"prepend"
argument_list|,
name|Iterable
operator|.
name|class
argument_list|)
operator|.
name|returning
argument_list|(
name|Iterable
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|Iterable
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|,
name|delegate
operator|.
name|getReturnType
argument_list|()
argument_list|)
expr_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// prepend() returns Iterable<String>
name|Iterable
argument_list|<
name|String
argument_list|>
name|result
init|=
name|delegate
operator|.
name|invoke
argument_list|(
operator|new
name|Prepender
argument_list|(
literal|"a"
argument_list|,
literal|2
argument_list|)
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"b"
argument_list|,
literal|"c"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"a"
argument_list|,
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|)
argument_list|,
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|result
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testInstanceMethod_invalidReturning ()
specifier|public
name|void
name|testInstanceMethod_invalidReturning
parameter_list|()
throws|throws
name|Exception
block|{
name|Invokable
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|delegate
init|=
name|Prepender
operator|.
name|method
argument_list|(
literal|"prepend"
argument_list|,
name|Iterable
operator|.
name|class
argument_list|)
decl_stmt|;
try|try
block|{
name|delegate
operator|.
name|returning
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|Iterable
argument_list|<
name|Integer
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{}
block|}
DECL|method|testPrivateInstanceMethod_isOverridable ()
specifier|public
name|void
name|testPrivateInstanceMethod_isOverridable
parameter_list|()
throws|throws
name|Exception
block|{
name|Invokable
argument_list|<
name|Object
argument_list|,
name|?
argument_list|>
name|delegate
init|=
name|Prepender
operator|.
name|method
argument_list|(
literal|"privateMethod"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|delegate
operator|.
name|isPrivate
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|delegate
operator|.
name|isOverridable
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testPrivateFinalInstanceMethod_isOverridable ()
specifier|public
name|void
name|testPrivateFinalInstanceMethod_isOverridable
parameter_list|()
throws|throws
name|Exception
block|{
name|Invokable
argument_list|<
name|Object
argument_list|,
name|?
argument_list|>
name|delegate
init|=
name|Prepender
operator|.
name|method
argument_list|(
literal|"privateFinalMethod"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|delegate
operator|.
name|isPrivate
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|delegate
operator|.
name|isFinal
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|delegate
operator|.
name|isOverridable
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testStaticMethod_isOverridable ()
specifier|public
name|void
name|testStaticMethod_isOverridable
parameter_list|()
throws|throws
name|Exception
block|{
name|Invokable
argument_list|<
name|Object
argument_list|,
name|?
argument_list|>
name|delegate
init|=
name|Prepender
operator|.
name|method
argument_list|(
literal|"staticMethod"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|delegate
operator|.
name|isStatic
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|delegate
operator|.
name|isOverridable
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testStaticFinalMethod_isFinal ()
specifier|public
name|void
name|testStaticFinalMethod_isFinal
parameter_list|()
throws|throws
name|Exception
block|{
name|Invokable
argument_list|<
name|Object
argument_list|,
name|?
argument_list|>
name|delegate
init|=
name|Prepender
operator|.
name|method
argument_list|(
literal|"staticFinalMethod"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|delegate
operator|.
name|isStatic
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|delegate
operator|.
name|isFinal
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|delegate
operator|.
name|isOverridable
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|class|Foo
specifier|static
class|class
name|Foo
block|{}
DECL|method|testConstructor_isOverridablel ()
specifier|public
name|void
name|testConstructor_isOverridablel
parameter_list|()
throws|throws
name|Exception
block|{
name|Invokable
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|delegate
init|=
name|Invokable
operator|.
name|from
argument_list|(
name|Foo
operator|.
name|class
operator|.
name|getDeclaredConstructor
argument_list|()
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|delegate
operator|.
name|isOverridable
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|class|FinalClass
specifier|private
specifier|static
specifier|final
class|class
name|FinalClass
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
comment|// used by reflection
DECL|method|notFinalMethod ()
name|void
name|notFinalMethod
parameter_list|()
block|{}
block|}
DECL|method|testNonFinalMethodInFinalClass_isOverridable ()
specifier|public
name|void
name|testNonFinalMethodInFinalClass_isOverridable
parameter_list|()
throws|throws
name|Exception
block|{
name|Invokable
argument_list|<
name|Object
argument_list|,
name|?
argument_list|>
name|delegate
init|=
name|Invokable
operator|.
name|from
argument_list|(
name|FinalClass
operator|.
name|class
operator|.
name|getDeclaredMethod
argument_list|(
literal|"notFinalMethod"
argument_list|)
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|delegate
operator|.
name|isOverridable
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testEquals ()
specifier|public
name|void
name|testEquals
parameter_list|()
throws|throws
name|Exception
block|{
operator|new
name|EqualsTester
argument_list|()
operator|.
name|addEqualityGroup
argument_list|(
name|Prepender
operator|.
name|constructor
argument_list|()
argument_list|,
name|Prepender
operator|.
name|constructor
argument_list|()
argument_list|)
operator|.
name|addEqualityGroup
argument_list|(
name|Prepender
operator|.
name|constructor
argument_list|(
name|String
operator|.
name|class
argument_list|,
name|int
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|addEqualityGroup
argument_list|(
name|Prepender
operator|.
name|method
argument_list|(
literal|"privateMethod"
argument_list|)
argument_list|,
name|Prepender
operator|.
name|method
argument_list|(
literal|"privateMethod"
argument_list|)
argument_list|)
operator|.
name|addEqualityGroup
argument_list|(
name|Prepender
operator|.
name|method
argument_list|(
literal|"privateFinalMethod"
argument_list|)
argument_list|)
operator|.
name|testEquals
argument_list|()
expr_stmt|;
block|}
DECL|method|testNulls ()
specifier|public
name|void
name|testNulls
parameter_list|()
block|{
operator|new
name|NullPointerTester
argument_list|()
operator|.
name|testAllPublicStaticMethods
argument_list|(
name|Invokable
operator|.
name|class
argument_list|)
expr_stmt|;
operator|new
name|NullPointerTester
argument_list|()
operator|.
name|testAllPublicInstanceMethods
argument_list|(
name|Prepender
operator|.
name|method
argument_list|(
literal|"staticMethod"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Retention
argument_list|(
name|RetentionPolicy
operator|.
name|RUNTIME
argument_list|)
DECL|annotation|NotBlank
specifier|private
annotation_defn|@interface
name|NotBlank
block|{}
comment|/** Class for testing construcrtor, static method and instance method. */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
comment|// most are called by reflection
DECL|class|Prepender
specifier|private
specifier|static
class|class
name|Prepender
block|{
DECL|field|prefix
specifier|private
specifier|final
name|String
name|prefix
decl_stmt|;
DECL|field|times
specifier|private
specifier|final
name|int
name|times
decl_stmt|;
DECL|method|Prepender (@otBlank String prefix, int times)
name|Prepender
parameter_list|(
annotation|@
name|NotBlank
name|String
name|prefix
parameter_list|,
name|int
name|times
parameter_list|)
throws|throws
name|NullPointerException
block|{
name|this
operator|.
name|prefix
operator|=
name|prefix
expr_stmt|;
name|this
operator|.
name|times
operator|=
name|times
expr_stmt|;
block|}
comment|// just for testing
DECL|method|Prepender ()
specifier|private
parameter_list|<
name|A
parameter_list|>
name|Prepender
parameter_list|()
block|{
name|this
argument_list|(
literal|null
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
DECL|method|prepend (@otBlank String first, Iterable<String> tail)
specifier|static
parameter_list|<
name|T
parameter_list|>
name|Iterable
argument_list|<
name|String
argument_list|>
name|prepend
parameter_list|(
annotation|@
name|NotBlank
name|String
name|first
parameter_list|,
name|Iterable
argument_list|<
name|String
argument_list|>
name|tail
parameter_list|)
block|{
return|return
name|Iterables
operator|.
name|concat
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
name|first
argument_list|)
argument_list|,
name|tail
argument_list|)
return|;
block|}
DECL|method|prepend (Iterable<String> tail)
name|Iterable
argument_list|<
name|String
argument_list|>
name|prepend
parameter_list|(
name|Iterable
argument_list|<
name|String
argument_list|>
name|tail
parameter_list|)
throws|throws
name|IllegalArgumentException
throws|,
name|NullPointerException
block|{
return|return
name|Iterables
operator|.
name|concat
argument_list|(
name|Collections
operator|.
name|nCopies
argument_list|(
name|times
argument_list|,
name|prefix
argument_list|)
argument_list|,
name|tail
argument_list|)
return|;
block|}
DECL|method|constructor (Class<?>.... parameterTypes)
specifier|static
name|Invokable
argument_list|<
name|?
argument_list|,
name|Prepender
argument_list|>
name|constructor
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
modifier|...
name|parameterTypes
parameter_list|)
throws|throws
name|Exception
block|{
name|Constructor
argument_list|<
name|Prepender
argument_list|>
name|constructor
init|=
name|Prepender
operator|.
name|class
operator|.
name|getDeclaredConstructor
argument_list|(
name|parameterTypes
argument_list|)
decl_stmt|;
return|return
name|Invokable
operator|.
name|from
argument_list|(
name|constructor
argument_list|)
return|;
block|}
DECL|method|method (String name, Class<?>... parameterTypes)
specifier|static
name|Invokable
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|method
parameter_list|(
name|String
name|name
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
modifier|...
name|parameterTypes
parameter_list|)
block|{
try|try
block|{
name|Method
name|method
init|=
name|Prepender
operator|.
name|class
operator|.
name|getDeclaredMethod
argument_list|(
name|name
argument_list|,
name|parameterTypes
argument_list|)
decl_stmt|;
return|return
name|Invokable
operator|.
name|from
argument_list|(
name|method
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|privateMethod ()
specifier|private
name|void
name|privateMethod
parameter_list|()
block|{}
DECL|method|privateFinalMethod ()
specifier|private
specifier|final
name|void
name|privateFinalMethod
parameter_list|()
block|{}
DECL|method|staticMethod ()
specifier|static
name|void
name|staticMethod
parameter_list|()
block|{}
DECL|method|staticFinalMethod ()
specifier|static
specifier|final
name|void
name|staticFinalMethod
parameter_list|()
block|{}
block|}
DECL|class|SubPrepender
specifier|private
specifier|static
class|class
name|SubPrepender
extends|extends
name|Prepender
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
comment|// needed to satisfy compiler, never called
DECL|method|SubPrepender ()
specifier|public
name|SubPrepender
parameter_list|()
throws|throws
name|NullPointerException
block|{
throw|throw
operator|new
name|AssertionError
argument_list|()
throw|;
block|}
block|}
block|}
end_class

end_unit

