begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2007 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.reflect
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|reflect
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertThat
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|primitives
operator|.
name|Primitives
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|testing
operator|.
name|EqualsTester
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|testing
operator|.
name|NullPointerTester
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|testing
operator|.
name|SerializableTester
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|IterableSubject
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Constructor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|GenericArrayType
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|ParameterizedType
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|WildcardType
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * Test cases for {@link TypeToken}.  *  * @author Sven Mawson  * @author Ben Yu  */
end_comment

begin_class
annotation|@
name|AndroidIncompatible
comment|// lots of failures, possibly some related to bad equals() implementations?
DECL|class|TypeTokenTest
specifier|public
class|class
name|TypeTokenTest
extends|extends
name|TestCase
block|{
DECL|class|StringList
specifier|private
specifier|abstract
specifier|static
class|class
name|StringList
implements|implements
name|List
argument_list|<
name|String
argument_list|>
block|{}
DECL|class|IntegerList
specifier|private
specifier|abstract
specifier|static
class|class
name|IntegerList
implements|implements
name|List
argument_list|<
name|Integer
argument_list|>
block|{}
DECL|method|testValueEqualityNotInstanceEquality ()
specifier|public
name|void
name|testValueEqualityNotInstanceEquality
parameter_list|()
block|{
name|TypeToken
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|a
init|=
operator|new
name|TypeToken
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
block|{}
decl_stmt|;
name|TypeToken
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|b
init|=
operator|new
name|TypeToken
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
block|{}
decl_stmt|;
name|assertEquals
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
expr_stmt|;
block|}
DECL|method|testVariableTypeTokenNotAllowed ()
specifier|public
parameter_list|<
name|T
parameter_list|>
name|void
name|testVariableTypeTokenNotAllowed
parameter_list|()
block|{
try|try
block|{
operator|new
name|TypeToken
argument_list|<
name|T
argument_list|>
argument_list|()
block|{}
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|expected
parameter_list|)
block|{}
block|}
DECL|method|testRawTypeIsCorrect ()
specifier|public
name|void
name|testRawTypeIsCorrect
parameter_list|()
block|{
name|TypeToken
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|token
init|=
operator|new
name|TypeToken
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
block|{}
decl_stmt|;
name|assertEquals
argument_list|(
name|List
operator|.
name|class
argument_list|,
name|token
operator|.
name|getRawType
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testTypeIsCorrect ()
specifier|public
name|void
name|testTypeIsCorrect
parameter_list|()
block|{
name|TypeToken
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|token
init|=
operator|new
name|TypeToken
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
block|{}
decl_stmt|;
name|assertEquals
argument_list|(
name|StringList
operator|.
name|class
operator|.
name|getGenericInterfaces
argument_list|()
index|[
literal|0
index|]
argument_list|,
name|token
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
comment|// Trying to test TypeToken.of(List.class)
DECL|method|testGetClass ()
specifier|public
name|void
name|testGetClass
parameter_list|()
block|{
name|TypeToken
argument_list|<
name|List
argument_list|>
name|token
init|=
name|TypeToken
operator|.
name|of
argument_list|(
name|List
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|List
argument_list|>
argument_list|()
block|{}
argument_list|,
name|token
argument_list|)
expr_stmt|;
block|}
DECL|method|testGetType ()
specifier|public
name|void
name|testGetType
parameter_list|()
block|{
name|TypeToken
argument_list|<
name|?
argument_list|>
name|t
init|=
name|TypeToken
operator|.
name|of
argument_list|(
name|StringList
operator|.
name|class
operator|.
name|getGenericInterfaces
argument_list|()
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
DECL|method|testNonStaticLocalClass ()
specifier|public
name|void
name|testNonStaticLocalClass
parameter_list|()
block|{
class|class
name|Local
parameter_list|<
name|T
parameter_list|>
block|{}
name|TypeToken
argument_list|<
name|Local
argument_list|<
name|String
argument_list|>
argument_list|>
name|type
init|=
operator|new
name|TypeToken
argument_list|<
name|Local
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
block|{}
decl_stmt|;
name|assertEquals
argument_list|(
name|Types
operator|.
name|newParameterizedType
argument_list|(
name|Local
operator|.
name|class
argument_list|,
name|String
operator|.
name|class
argument_list|)
argument_list|,
name|type
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|Local
argument_list|<
name|String
argument_list|>
argument_list|()
block|{}
operator|.
name|getClass
argument_list|()
operator|.
name|getGenericSuperclass
argument_list|()
argument_list|,
name|type
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testStaticLocalClass ()
specifier|public
name|void
name|testStaticLocalClass
parameter_list|()
block|{
name|doTestStaticLocalClass
argument_list|()
expr_stmt|;
block|}
DECL|method|doTestStaticLocalClass ()
specifier|private
specifier|static
name|void
name|doTestStaticLocalClass
parameter_list|()
block|{
class|class
name|Local
parameter_list|<
name|T
parameter_list|>
block|{}
name|TypeToken
argument_list|<
name|Local
argument_list|<
name|String
argument_list|>
argument_list|>
name|type
init|=
operator|new
name|TypeToken
argument_list|<
name|Local
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
block|{}
decl_stmt|;
name|assertEquals
argument_list|(
name|Types
operator|.
name|newParameterizedType
argument_list|(
name|Local
operator|.
name|class
argument_list|,
name|String
operator|.
name|class
argument_list|)
argument_list|,
name|type
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|Local
argument_list|<
name|String
argument_list|>
argument_list|()
block|{}
operator|.
name|getClass
argument_list|()
operator|.
name|getGenericSuperclass
argument_list|()
argument_list|,
name|type
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testGenericArrayType ()
specifier|public
name|void
name|testGenericArrayType
parameter_list|()
block|{
name|TypeToken
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
index|[]
argument_list|>
name|token
init|=
operator|new
name|TypeToken
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
index|[]
argument_list|>
argument_list|()
block|{}
decl_stmt|;
name|assertEquals
argument_list|(
name|List
index|[]
operator|.
expr|class
argument_list|,
name|token
operator|.
name|getRawType
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|token
operator|.
name|getType
argument_list|()
argument_list|)
operator|.
name|isInstanceOf
argument_list|(
name|GenericArrayType
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
DECL|method|testMultiDimensionalGenericArrayType ()
specifier|public
name|void
name|testMultiDimensionalGenericArrayType
parameter_list|()
block|{
name|TypeToken
argument_list|<
name|List
argument_list|<
name|Long
argument_list|>
index|[]
index|[]
index|[]
argument_list|>
name|token
init|=
operator|new
name|TypeToken
argument_list|<
name|List
argument_list|<
name|Long
argument_list|>
index|[]
index|[]
index|[]
argument_list|>
argument_list|()
block|{}
decl_stmt|;
name|assertEquals
argument_list|(
name|List
index|[]
index|[]
index|[]
operator|.
expr|class
argument_list|,
name|token
operator|.
name|getRawType
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|token
operator|.
name|getType
argument_list|()
argument_list|)
operator|.
name|isInstanceOf
argument_list|(
name|GenericArrayType
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
DECL|method|testGenericVariableTypeArrays ()
specifier|public
parameter_list|<
name|T
parameter_list|>
name|void
name|testGenericVariableTypeArrays
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"T[]"
argument_list|,
operator|new
name|TypeToken
argument_list|<
name|T
index|[]
argument_list|>
argument_list|()
block|{}
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testResolveType ()
specifier|public
name|void
name|testResolveType
parameter_list|()
throws|throws
name|Exception
block|{
name|Method
name|getFromList
init|=
name|List
operator|.
name|class
operator|.
name|getMethod
argument_list|(
literal|"get"
argument_list|,
name|int
operator|.
name|class
argument_list|)
decl_stmt|;
name|TypeToken
argument_list|<
name|?
argument_list|>
name|returnType
init|=
operator|new
name|TypeToken
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
block|{}
operator|.
name|resolveType
argument_list|(
name|getFromList
operator|.
name|getGenericReturnType
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|String
operator|.
name|class
argument_list|,
name|returnType
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
parameter_list|<
name|F
extends|extends
name|Enum
argument_list|<
name|F
argument_list|>
operator|&
name|Function
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
operator|&
name|Iterable
argument_list|<
name|Long
argument_list|>
parameter_list|>
DECL|method|testResolveType_fromTypeVariable ()
name|void
name|testResolveType_fromTypeVariable
parameter_list|()
block|{
name|TypeToken
argument_list|<
name|?
argument_list|>
name|f
init|=
name|TypeToken
operator|.
name|of
argument_list|(
operator|new
name|TypeCapture
argument_list|<
name|F
argument_list|>
argument_list|()
block|{}
operator|.
name|capture
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|String
operator|.
name|class
argument_list|,
name|f
operator|.
name|resolveType
argument_list|(
name|Function
operator|.
name|class
operator|.
name|getTypeParameters
argument_list|()
index|[
literal|0
index|]
argument_list|)
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|class
argument_list|,
name|f
operator|.
name|resolveType
argument_list|(
name|Function
operator|.
name|class
operator|.
name|getTypeParameters
argument_list|()
index|[
literal|1
index|]
argument_list|)
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Long
operator|.
name|class
argument_list|,
name|f
operator|.
name|resolveType
argument_list|(
name|Iterable
operator|.
name|class
operator|.
name|getTypeParameters
argument_list|()
index|[
literal|0
index|]
argument_list|)
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
parameter_list|<
name|E
extends|extends
name|Comparable
argument_list|<
name|Iterable
argument_list|<
name|String
argument_list|>
argument_list|>
operator|&
name|Iterable
argument_list|<
name|Integer
argument_list|>
parameter_list|>
DECL|method|testResolveType_fromTypeVariable_onlyDirectBoundsAreUsed ()
name|void
name|testResolveType_fromTypeVariable_onlyDirectBoundsAreUsed
parameter_list|()
block|{
name|TypeToken
argument_list|<
name|?
argument_list|>
name|e
init|=
name|TypeToken
operator|.
name|of
argument_list|(
operator|new
name|TypeCapture
argument_list|<
name|E
argument_list|>
argument_list|()
block|{}
operator|.
name|capture
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|class
argument_list|,
name|e
operator|.
name|resolveType
argument_list|(
name|Iterable
operator|.
name|class
operator|.
name|getTypeParameters
argument_list|()
index|[
literal|0
index|]
argument_list|)
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testResolveType_fromWildcard ()
specifier|public
name|void
name|testResolveType_fromWildcard
parameter_list|()
block|{
name|ParameterizedType
name|withWildcardType
init|=
operator|(
name|ParameterizedType
operator|)
operator|new
name|TypeCapture
argument_list|<
name|Comparable
argument_list|<
name|?
extends|extends
name|Iterable
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|>
argument_list|()
block|{}
operator|.
name|capture
argument_list|()
expr_stmt|;
name|TypeToken
argument_list|<
name|?
argument_list|>
name|wildcardType
init|=
name|TypeToken
operator|.
name|of
argument_list|(
name|withWildcardType
operator|.
name|getActualTypeArguments
argument_list|()
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|String
operator|.
name|class
argument_list|,
name|wildcardType
operator|.
name|resolveType
argument_list|(
name|Iterable
operator|.
name|class
operator|.
name|getTypeParameters
argument_list|()
index|[
literal|0
index|]
argument_list|)
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testGetTypes_noSuperclass ()
specifier|public
name|void
name|testGetTypes_noSuperclass
parameter_list|()
block|{
name|TypeToken
argument_list|<
name|Object
argument_list|>
operator|.
name|TypeSet
name|types
init|=
operator|new
name|TypeToken
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{}
operator|.
name|getTypes
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|types
argument_list|)
operator|.
name|contains
argument_list|(
name|TypeToken
operator|.
name|of
argument_list|(
name|Object
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|types
operator|.
name|rawTypes
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
name|Object
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|types
operator|.
name|interfaces
argument_list|()
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|types
operator|.
name|interfaces
argument_list|()
operator|.
name|rawTypes
argument_list|()
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|types
operator|.
name|classes
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
name|TypeToken
operator|.
name|of
argument_list|(
name|Object
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|types
operator|.
name|classes
argument_list|()
operator|.
name|rawTypes
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
name|Object
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
DECL|method|testGetTypes_fromInterface ()
specifier|public
name|void
name|testGetTypes_fromInterface
parameter_list|()
block|{
name|TypeToken
argument_list|<
name|Interface1
argument_list|>
operator|.
name|TypeSet
name|types
init|=
operator|new
name|TypeToken
argument_list|<
name|Interface1
argument_list|>
argument_list|()
block|{}
operator|.
name|getTypes
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|types
argument_list|)
operator|.
name|contains
argument_list|(
name|TypeToken
operator|.
name|of
argument_list|(
name|Interface1
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|types
operator|.
name|rawTypes
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
name|Interface1
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|types
operator|.
name|interfaces
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
name|TypeToken
operator|.
name|of
argument_list|(
name|Interface1
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|types
operator|.
name|interfaces
argument_list|()
operator|.
name|rawTypes
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
name|Interface1
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|types
operator|.
name|classes
argument_list|()
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|types
operator|.
name|classes
argument_list|()
operator|.
name|rawTypes
argument_list|()
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
DECL|method|testGetTypes_fromPrimitive ()
specifier|public
name|void
name|testGetTypes_fromPrimitive
parameter_list|()
block|{
name|TypeToken
argument_list|<
name|Integer
argument_list|>
operator|.
name|TypeSet
name|types
init|=
name|TypeToken
operator|.
name|of
argument_list|(
name|int
operator|.
name|class
argument_list|)
operator|.
name|getTypes
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|types
argument_list|)
operator|.
name|contains
argument_list|(
name|TypeToken
operator|.
name|of
argument_list|(
name|int
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|types
operator|.
name|rawTypes
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
name|int
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|types
operator|.
name|interfaces
argument_list|()
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|types
operator|.
name|interfaces
argument_list|()
operator|.
name|rawTypes
argument_list|()
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|types
operator|.
name|classes
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
name|TypeToken
operator|.
name|of
argument_list|(
name|int
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|types
operator|.
name|classes
argument_list|()
operator|.
name|rawTypes
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
name|int
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
DECL|method|testGetTypes_withInterfacesAndSuperclasses ()
specifier|public
name|void
name|testGetTypes_withInterfacesAndSuperclasses
parameter_list|()
block|{
specifier|abstract
class|class
name|Class2
extends|extends
name|Class1
implements|implements
name|Interface12
block|{}
specifier|abstract
class|class
name|Class3
parameter_list|<
name|T
parameter_list|>
extends|extends
name|Class2
implements|implements
name|Interface3
argument_list|<
name|T
argument_list|>
block|{}
name|TypeToken
argument_list|<
name|Class3
argument_list|<
name|String
argument_list|>
argument_list|>
operator|.
name|TypeSet
name|types
init|=
operator|new
name|TypeToken
argument_list|<
name|Class3
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
block|{}
operator|.
name|getTypes
argument_list|()
decl_stmt|;
name|makeUnmodifiable
argument_list|(
name|types
argument_list|)
operator|.
name|containsExactly
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|Class3
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|,
operator|new
name|TypeToken
argument_list|<
name|Interface3
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|,
operator|new
name|TypeToken
argument_list|<
name|Iterable
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|,
name|TypeToken
operator|.
name|of
argument_list|(
name|Class2
operator|.
name|class
argument_list|)
argument_list|,
name|TypeToken
operator|.
name|of
argument_list|(
name|Interface12
operator|.
name|class
argument_list|)
argument_list|,
name|TypeToken
operator|.
name|of
argument_list|(
name|Interface1
operator|.
name|class
argument_list|)
argument_list|,
name|TypeToken
operator|.
name|of
argument_list|(
name|Interface2
operator|.
name|class
argument_list|)
argument_list|,
name|TypeToken
operator|.
name|of
argument_list|(
name|Class1
operator|.
name|class
argument_list|)
argument_list|,
name|TypeToken
operator|.
name|of
argument_list|(
name|Object
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|makeUnmodifiable
argument_list|(
name|types
operator|.
name|interfaces
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|Interface3
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|,
name|TypeToken
operator|.
name|of
argument_list|(
name|Interface12
operator|.
name|class
argument_list|)
argument_list|,
name|TypeToken
operator|.
name|of
argument_list|(
name|Interface1
operator|.
name|class
argument_list|)
argument_list|,
name|TypeToken
operator|.
name|of
argument_list|(
name|Interface2
operator|.
name|class
argument_list|)
argument_list|,
operator|new
name|TypeToken
argument_list|<
name|Iterable
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|)
expr_stmt|;
name|makeUnmodifiable
argument_list|(
name|types
operator|.
name|classes
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|Class3
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|,
name|TypeToken
operator|.
name|of
argument_list|(
name|Class2
operator|.
name|class
argument_list|)
argument_list|,
name|TypeToken
operator|.
name|of
argument_list|(
name|Class1
operator|.
name|class
argument_list|)
argument_list|,
name|TypeToken
operator|.
name|of
argument_list|(
name|Object
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertSubtypeFirst
argument_list|(
name|types
argument_list|)
expr_stmt|;
block|}
DECL|method|testGetTypes_rawTypes_withInterfacesAndSuperclasses ()
specifier|public
name|void
name|testGetTypes_rawTypes_withInterfacesAndSuperclasses
parameter_list|()
block|{
specifier|abstract
class|class
name|Class2
extends|extends
name|Class1
implements|implements
name|Interface12
block|{}
specifier|abstract
class|class
name|Class3
parameter_list|<
name|T
parameter_list|>
extends|extends
name|Class2
implements|implements
name|Interface3
argument_list|<
name|T
argument_list|>
block|{}
name|TypeToken
argument_list|<
name|Class3
argument_list|<
name|String
argument_list|>
argument_list|>
operator|.
name|TypeSet
name|types
init|=
operator|new
name|TypeToken
argument_list|<
name|Class3
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
block|{}
operator|.
name|getTypes
argument_list|()
decl_stmt|;
name|makeUnmodifiable
argument_list|(
name|types
operator|.
name|rawTypes
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|Class3
operator|.
name|class
argument_list|,
name|Interface3
operator|.
name|class
argument_list|,
name|Iterable
operator|.
name|class
argument_list|,
name|Class2
operator|.
name|class
argument_list|,
name|Interface12
operator|.
name|class
argument_list|,
name|Interface1
operator|.
name|class
argument_list|,
name|Interface2
operator|.
name|class
argument_list|,
name|Class1
operator|.
name|class
argument_list|,
name|Object
operator|.
name|class
argument_list|)
expr_stmt|;
name|makeUnmodifiable
argument_list|(
name|types
operator|.
name|interfaces
argument_list|()
operator|.
name|rawTypes
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|Interface3
operator|.
name|class
argument_list|,
name|Interface12
operator|.
name|class
argument_list|,
name|Interface1
operator|.
name|class
argument_list|,
name|Interface2
operator|.
name|class
argument_list|,
name|Iterable
operator|.
name|class
argument_list|)
expr_stmt|;
name|makeUnmodifiable
argument_list|(
name|types
operator|.
name|classes
argument_list|()
operator|.
name|rawTypes
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|Class3
operator|.
name|class
argument_list|,
name|Class2
operator|.
name|class
argument_list|,
name|Class1
operator|.
name|class
argument_list|,
name|Object
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertSubtypeFirst
argument_list|(
name|types
argument_list|)
expr_stmt|;
block|}
specifier|public
parameter_list|<
name|A
extends|extends
name|Class1
operator|&
name|Interface1
parameter_list|,
name|B
extends|extends
name|A
parameter_list|>
DECL|method|testGetTypes_ignoresTypeVariablesByDefault ()
name|void
name|testGetTypes_ignoresTypeVariablesByDefault
parameter_list|()
block|{
name|TypeToken
argument_list|<
name|?
argument_list|>
operator|.
name|TypeSet
name|types
init|=
name|TypeToken
operator|.
name|of
argument_list|(
operator|new
name|TypeCapture
argument_list|<
name|B
argument_list|>
argument_list|()
block|{}
operator|.
name|capture
argument_list|()
argument_list|)
operator|.
name|getTypes
argument_list|()
decl_stmt|;
name|makeUnmodifiable
argument_list|(
name|types
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|TypeToken
operator|.
name|of
argument_list|(
name|Interface1
operator|.
name|class
argument_list|)
argument_list|,
name|TypeToken
operator|.
name|of
argument_list|(
name|Class1
operator|.
name|class
argument_list|)
argument_list|,
name|TypeToken
operator|.
name|of
argument_list|(
name|Object
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertSubtypeFirst
argument_list|(
name|types
argument_list|)
expr_stmt|;
name|makeUnmodifiable
argument_list|(
name|types
operator|.
name|interfaces
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|TypeToken
operator|.
name|of
argument_list|(
name|Interface1
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|makeUnmodifiable
argument_list|(
name|types
operator|.
name|classes
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|TypeToken
operator|.
name|of
argument_list|(
name|Class1
operator|.
name|class
argument_list|)
argument_list|,
name|TypeToken
operator|.
name|of
argument_list|(
name|Object
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
block|}
specifier|public
parameter_list|<
name|A
extends|extends
name|Class1
operator|&
name|Interface1
parameter_list|,
name|B
extends|extends
name|A
parameter_list|>
DECL|method|testGetTypes_rawTypes_ignoresTypeVariablesByDefault ()
name|void
name|testGetTypes_rawTypes_ignoresTypeVariablesByDefault
parameter_list|()
block|{
name|TypeToken
argument_list|<
name|?
argument_list|>
operator|.
name|TypeSet
name|types
init|=
name|TypeToken
operator|.
name|of
argument_list|(
operator|new
name|TypeCapture
argument_list|<
name|B
argument_list|>
argument_list|()
block|{}
operator|.
name|capture
argument_list|()
argument_list|)
operator|.
name|getTypes
argument_list|()
decl_stmt|;
name|makeUnmodifiable
argument_list|(
name|types
operator|.
name|rawTypes
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|Interface1
operator|.
name|class
argument_list|,
name|Class1
operator|.
name|class
argument_list|,
name|Object
operator|.
name|class
argument_list|)
expr_stmt|;
name|makeUnmodifiable
argument_list|(
name|types
operator|.
name|interfaces
argument_list|()
operator|.
name|rawTypes
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|Interface1
operator|.
name|class
argument_list|)
expr_stmt|;
name|makeUnmodifiable
argument_list|(
name|types
operator|.
name|classes
argument_list|()
operator|.
name|rawTypes
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|Class1
operator|.
name|class
argument_list|,
name|Object
operator|.
name|class
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
block|}
specifier|public
parameter_list|<
name|A
extends|extends
name|Interface1
operator|&
name|Interface2
operator|&
name|Interface3
argument_list|<
name|String
argument_list|>
parameter_list|>
DECL|method|testGetTypes_manyBounds ()
name|void
name|testGetTypes_manyBounds
parameter_list|()
block|{
name|TypeToken
argument_list|<
name|?
argument_list|>
operator|.
name|TypeSet
name|types
init|=
name|TypeToken
operator|.
name|of
argument_list|(
operator|new
name|TypeCapture
argument_list|<
name|A
argument_list|>
argument_list|()
block|{}
operator|.
name|capture
argument_list|()
argument_list|)
operator|.
name|getTypes
argument_list|()
decl_stmt|;
name|makeUnmodifiable
argument_list|(
name|types
operator|.
name|rawTypes
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|Interface1
operator|.
name|class
argument_list|,
name|Interface2
operator|.
name|class
argument_list|,
name|Interface3
operator|.
name|class
argument_list|,
name|Iterable
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
DECL|method|assertSubtypeFirst (TypeToken<?>.TypeSet types)
specifier|private
specifier|static
name|void
name|assertSubtypeFirst
parameter_list|(
name|TypeToken
argument_list|<
name|?
argument_list|>
operator|.
name|TypeSet
name|types
parameter_list|)
block|{
name|assertSubtypeTokenBeforeSupertypeToken
argument_list|(
name|types
argument_list|)
expr_stmt|;
name|assertSubtypeTokenBeforeSupertypeToken
argument_list|(
name|types
operator|.
name|interfaces
argument_list|()
argument_list|)
expr_stmt|;
name|assertSubtypeTokenBeforeSupertypeToken
argument_list|(
name|types
operator|.
name|classes
argument_list|()
argument_list|)
expr_stmt|;
name|assertSubtypeBeforeSupertype
argument_list|(
name|types
operator|.
name|rawTypes
argument_list|()
argument_list|)
expr_stmt|;
name|assertSubtypeBeforeSupertype
argument_list|(
name|types
operator|.
name|interfaces
argument_list|()
operator|.
name|rawTypes
argument_list|()
argument_list|)
expr_stmt|;
name|assertSubtypeBeforeSupertype
argument_list|(
name|types
operator|.
name|classes
argument_list|()
operator|.
name|rawTypes
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|assertSubtypeTokenBeforeSupertypeToken ( Iterable<? extends TypeToken<?>> types)
specifier|private
specifier|static
name|void
name|assertSubtypeTokenBeforeSupertypeToken
parameter_list|(
name|Iterable
argument_list|<
name|?
extends|extends
name|TypeToken
argument_list|<
name|?
argument_list|>
argument_list|>
name|types
parameter_list|)
block|{
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|TypeToken
argument_list|<
name|?
argument_list|>
name|left
range|:
name|types
control|)
block|{
name|int
name|j
init|=
literal|0
decl_stmt|;
for|for
control|(
name|TypeToken
argument_list|<
name|?
argument_list|>
name|right
range|:
name|types
control|)
block|{
if|if
condition|(
name|left
operator|.
name|isSupertypeOf
argument_list|(
name|right
argument_list|)
condition|)
block|{
name|assertTrue
argument_list|(
name|left
operator|+
literal|" should be after "
operator|+
name|right
argument_list|,
name|i
operator|>=
name|j
argument_list|)
expr_stmt|;
block|}
name|j
operator|++
expr_stmt|;
block|}
name|i
operator|++
expr_stmt|;
block|}
block|}
DECL|method|assertSubtypeBeforeSupertype (Iterable<? extends Class<?>> types)
specifier|private
specifier|static
name|void
name|assertSubtypeBeforeSupertype
parameter_list|(
name|Iterable
argument_list|<
name|?
extends|extends
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|types
parameter_list|)
block|{
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Class
argument_list|<
name|?
argument_list|>
name|left
range|:
name|types
control|)
block|{
name|int
name|j
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Class
argument_list|<
name|?
argument_list|>
name|right
range|:
name|types
control|)
block|{
if|if
condition|(
name|left
operator|.
name|isAssignableFrom
argument_list|(
name|right
argument_list|)
condition|)
block|{
name|assertTrue
argument_list|(
name|left
operator|+
literal|" should be after "
operator|+
name|right
argument_list|,
name|i
operator|>=
name|j
argument_list|)
expr_stmt|;
block|}
name|j
operator|++
expr_stmt|;
block|}
name|i
operator|++
expr_stmt|;
block|}
block|}
comment|// Tests to make sure assertSubtypeBeforeSupertype() works.
DECL|method|testAssertSubtypeTokenBeforeSupertypeToken_empty ()
specifier|public
name|void
name|testAssertSubtypeTokenBeforeSupertypeToken_empty
parameter_list|()
block|{
name|assertSubtypeTokenBeforeSupertypeToken
argument_list|(
name|ImmutableList
operator|.
expr|<
name|TypeToken
argument_list|<
name|?
argument_list|>
operator|>
name|of
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testAssertSubtypeTokenBeforeSupertypeToken_oneType ()
specifier|public
name|void
name|testAssertSubtypeTokenBeforeSupertypeToken_oneType
parameter_list|()
block|{
name|assertSubtypeTokenBeforeSupertypeToken
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
name|TypeToken
operator|.
name|of
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testAssertSubtypeTokenBeforeSupertypeToken_subtypeFirst ()
specifier|public
name|void
name|testAssertSubtypeTokenBeforeSupertypeToken_subtypeFirst
parameter_list|()
block|{
name|assertSubtypeTokenBeforeSupertypeToken
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
name|TypeToken
operator|.
name|of
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|,
name|TypeToken
operator|.
name|of
argument_list|(
name|CharSequence
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testAssertSubtypeTokenBeforeSupertypeToken_supertypeFirst ()
specifier|public
name|void
name|testAssertSubtypeTokenBeforeSupertypeToken_supertypeFirst
parameter_list|()
block|{
try|try
block|{
name|assertSubtypeTokenBeforeSupertypeToken
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
name|TypeToken
operator|.
name|of
argument_list|(
name|CharSequence
operator|.
name|class
argument_list|)
argument_list|,
name|TypeToken
operator|.
name|of
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AssertionError
name|expected
parameter_list|)
block|{
return|return;
block|}
name|fail
argument_list|()
expr_stmt|;
block|}
DECL|method|testAssertSubtypeTokenBeforeSupertypeToken_duplicate ()
specifier|public
name|void
name|testAssertSubtypeTokenBeforeSupertypeToken_duplicate
parameter_list|()
block|{
try|try
block|{
name|assertSubtypeTokenBeforeSupertypeToken
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
name|TypeToken
operator|.
name|of
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|,
name|TypeToken
operator|.
name|of
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AssertionError
name|expected
parameter_list|)
block|{
return|return;
block|}
name|fail
argument_list|()
expr_stmt|;
block|}
DECL|method|testAssertSubtypeBeforeSupertype_empty ()
specifier|public
name|void
name|testAssertSubtypeBeforeSupertype_empty
parameter_list|()
block|{
name|assertSubtypeBeforeSupertype
argument_list|(
name|ImmutableList
operator|.
expr|<
name|Class
argument_list|<
name|?
argument_list|>
operator|>
name|of
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testAssertSubtypeBeforeSupertype_oneType ()
specifier|public
name|void
name|testAssertSubtypeBeforeSupertype_oneType
parameter_list|()
block|{
name|assertSubtypeBeforeSupertype
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testAssertSubtypeBeforeSupertype_subtypeFirst ()
specifier|public
name|void
name|testAssertSubtypeBeforeSupertype_subtypeFirst
parameter_list|()
block|{
name|assertSubtypeBeforeSupertype
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
name|String
operator|.
name|class
argument_list|,
name|CharSequence
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testAssertSubtypeBeforeSupertype_supertypeFirst ()
specifier|public
name|void
name|testAssertSubtypeBeforeSupertype_supertypeFirst
parameter_list|()
block|{
try|try
block|{
name|assertSubtypeBeforeSupertype
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
name|CharSequence
operator|.
name|class
argument_list|,
name|String
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AssertionError
name|expected
parameter_list|)
block|{
return|return;
block|}
name|fail
argument_list|()
expr_stmt|;
block|}
DECL|method|testAssertSubtypeBeforeSupertype_duplicate ()
specifier|public
name|void
name|testAssertSubtypeBeforeSupertype_duplicate
parameter_list|()
block|{
try|try
block|{
name|assertSubtypeBeforeSupertype
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
name|String
operator|.
name|class
argument_list|,
name|String
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AssertionError
name|expected
parameter_list|)
block|{
return|return;
block|}
name|fail
argument_list|()
expr_stmt|;
block|}
DECL|method|testGetGenericSuperclass_noSuperclass ()
specifier|public
name|void
name|testGetGenericSuperclass_noSuperclass
parameter_list|()
block|{
name|assertNull
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{}
operator|.
name|getGenericSuperclass
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|TypeToken
operator|.
name|of
argument_list|(
name|Object
operator|.
name|class
argument_list|)
argument_list|,
operator|new
name|TypeToken
argument_list|<
name|Object
index|[]
argument_list|>
argument_list|()
block|{}
operator|.
name|getGenericSuperclass
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
block|{}
operator|.
name|getGenericSuperclass
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|TypeToken
operator|.
name|of
argument_list|(
name|Object
operator|.
name|class
argument_list|)
argument_list|,
operator|new
name|TypeToken
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
index|[]
argument_list|>
argument_list|()
block|{}
operator|.
name|getGenericSuperclass
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testGetGenericSuperclass_withSuperclass ()
specifier|public
name|void
name|testGetGenericSuperclass_withSuperclass
parameter_list|()
block|{
name|TypeToken
argument_list|<
name|?
super|super
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|>
name|superToken
init|=
operator|new
name|TypeToken
argument_list|<
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
block|{}
operator|.
name|getGenericSuperclass
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|ArrayList
operator|.
name|class
operator|.
name|getSuperclass
argument_list|()
argument_list|,
name|superToken
operator|.
name|getRawType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|String
operator|.
name|class
argument_list|,
operator|(
operator|(
name|ParameterizedType
operator|)
name|superToken
operator|.
name|getType
argument_list|()
operator|)
operator|.
name|getActualTypeArguments
argument_list|()
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|TypeToken
operator|.
name|of
argument_list|(
name|Base
operator|.
name|class
argument_list|)
argument_list|,
name|TypeToken
operator|.
name|of
argument_list|(
name|Sub
operator|.
name|class
argument_list|)
operator|.
name|getGenericSuperclass
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|TypeToken
operator|.
name|of
argument_list|(
name|Object
operator|.
name|class
argument_list|)
argument_list|,
name|TypeToken
operator|.
name|of
argument_list|(
name|Sub
index|[]
operator|.
expr|class
argument_list|)
operator|.
name|getGenericSuperclass
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testGetGenericSuperclass_typeVariable_unbounded ()
specifier|public
parameter_list|<
name|T
parameter_list|>
name|void
name|testGetGenericSuperclass_typeVariable_unbounded
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|TypeToken
operator|.
name|of
argument_list|(
name|Object
operator|.
name|class
argument_list|)
argument_list|,
name|TypeToken
operator|.
name|of
argument_list|(
operator|new
name|TypeCapture
argument_list|<
name|T
argument_list|>
argument_list|()
block|{}
operator|.
name|capture
argument_list|()
argument_list|)
operator|.
name|getGenericSuperclass
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|TypeToken
operator|.
name|of
argument_list|(
name|Object
operator|.
name|class
argument_list|)
argument_list|,
operator|new
name|TypeToken
argument_list|<
name|T
index|[]
argument_list|>
argument_list|()
block|{}
operator|.
name|getGenericSuperclass
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
parameter_list|<
name|T
extends|extends
name|ArrayList
argument_list|<
name|String
argument_list|>
operator|&
name|CharSequence
parameter_list|>
DECL|method|testGetGenericSuperclass_typeVariable_boundIsClass ()
name|void
name|testGetGenericSuperclass_typeVariable_boundIsClass
parameter_list|()
block|{
name|assertEquals
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|,
name|TypeToken
operator|.
name|of
argument_list|(
operator|new
name|TypeCapture
argument_list|<
name|T
argument_list|>
argument_list|()
block|{}
operator|.
name|capture
argument_list|()
argument_list|)
operator|.
name|getGenericSuperclass
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|TypeToken
operator|.
name|of
argument_list|(
name|Object
operator|.
name|class
argument_list|)
argument_list|,
operator|new
name|TypeToken
argument_list|<
name|T
index|[]
argument_list|>
argument_list|()
block|{}
operator|.
name|getGenericSuperclass
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
parameter_list|<
name|T
extends|extends
name|Enum
argument_list|<
name|T
argument_list|>
operator|&
name|CharSequence
parameter_list|>
DECL|method|testGetGenericSuperclass_typeVariable_boundIsFBoundedClass ()
name|void
name|testGetGenericSuperclass_typeVariable_boundIsFBoundedClass
parameter_list|()
block|{
name|assertEquals
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|Enum
argument_list|<
name|T
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|,
name|TypeToken
operator|.
name|of
argument_list|(
operator|new
name|TypeCapture
argument_list|<
name|T
argument_list|>
argument_list|()
block|{}
operator|.
name|capture
argument_list|()
argument_list|)
operator|.
name|getGenericSuperclass
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|TypeToken
operator|.
name|of
argument_list|(
name|Object
operator|.
name|class
argument_list|)
argument_list|,
operator|new
name|TypeToken
argument_list|<
name|T
index|[]
argument_list|>
argument_list|()
block|{}
operator|.
name|getGenericSuperclass
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
parameter_list|<
name|T
extends|extends
name|List
argument_list|<
name|String
argument_list|>
operator|&
name|CharSequence
parameter_list|>
DECL|method|testGetGenericSuperclass_typeVariable_boundIsInterface ()
name|void
name|testGetGenericSuperclass_typeVariable_boundIsInterface
parameter_list|()
block|{
name|assertNull
argument_list|(
name|TypeToken
operator|.
name|of
argument_list|(
operator|new
name|TypeCapture
argument_list|<
name|T
argument_list|>
argument_list|()
block|{}
operator|.
name|capture
argument_list|()
argument_list|)
operator|.
name|getGenericSuperclass
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|TypeToken
operator|.
name|of
argument_list|(
name|Object
operator|.
name|class
argument_list|)
argument_list|,
operator|new
name|TypeToken
argument_list|<
name|T
index|[]
argument_list|>
argument_list|()
block|{}
operator|.
name|getGenericSuperclass
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
parameter_list|<
name|T
extends|extends
name|ArrayList
argument_list|<
name|String
argument_list|>
operator|&
name|CharSequence
parameter_list|,
name|T1
extends|extends
name|T
parameter_list|>
DECL|method|testGetGenericSuperclass_typeVariable_boundIsTypeVariableAndClass ()
name|void
name|testGetGenericSuperclass_typeVariable_boundIsTypeVariableAndClass
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|TypeToken
operator|.
name|of
argument_list|(
operator|new
name|TypeCapture
argument_list|<
name|T
argument_list|>
argument_list|()
block|{}
operator|.
name|capture
argument_list|()
argument_list|)
argument_list|,
name|TypeToken
operator|.
name|of
argument_list|(
operator|new
name|TypeCapture
argument_list|<
name|T1
argument_list|>
argument_list|()
block|{}
operator|.
name|capture
argument_list|()
argument_list|)
operator|.
name|getGenericSuperclass
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|TypeToken
operator|.
name|of
argument_list|(
name|Object
operator|.
name|class
argument_list|)
argument_list|,
operator|new
name|TypeToken
argument_list|<
name|T
index|[]
argument_list|>
argument_list|()
block|{}
operator|.
name|getGenericSuperclass
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
parameter_list|<
name|T
extends|extends
name|List
argument_list|<
name|String
argument_list|>
operator|&
name|CharSequence
parameter_list|,
name|T1
extends|extends
name|T
parameter_list|>
DECL|method|testGetGenericSuperclass_typeVariable_boundIsTypeVariableAndInterface ()
name|void
name|testGetGenericSuperclass_typeVariable_boundIsTypeVariableAndInterface
parameter_list|()
block|{
name|assertNull
argument_list|(
name|TypeToken
operator|.
name|of
argument_list|(
operator|new
name|TypeCapture
argument_list|<
name|T1
argument_list|>
argument_list|()
block|{}
operator|.
name|capture
argument_list|()
argument_list|)
operator|.
name|getGenericSuperclass
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|TypeToken
operator|.
name|of
argument_list|(
name|Object
operator|.
name|class
argument_list|)
argument_list|,
operator|new
name|TypeToken
argument_list|<
name|T1
index|[]
argument_list|>
argument_list|()
block|{}
operator|.
name|getGenericSuperclass
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testGetGenericSuperclass_wildcard_lowerBounded ()
specifier|public
name|void
name|testGetGenericSuperclass_wildcard_lowerBounded
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|TypeToken
operator|.
name|of
argument_list|(
name|Object
operator|.
name|class
argument_list|)
argument_list|,
name|TypeToken
operator|.
name|of
argument_list|(
name|Types
operator|.
name|supertypeOf
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|getGenericSuperclass
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{}
argument_list|,
name|TypeToken
operator|.
name|of
argument_list|(
name|Types
operator|.
name|supertypeOf
argument_list|(
name|String
index|[]
operator|.
expr|class
argument_list|)
argument_list|)
operator|.
name|getGenericSuperclass
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{}
argument_list|,
name|TypeToken
operator|.
name|of
argument_list|(
name|Types
operator|.
name|supertypeOf
argument_list|(
name|CharSequence
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|getGenericSuperclass
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testGetGenericSuperclass_wildcard_boundIsClass ()
specifier|public
name|void
name|testGetGenericSuperclass_wildcard_boundIsClass
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|TypeToken
operator|.
name|of
argument_list|(
name|Object
operator|.
name|class
argument_list|)
argument_list|,
name|TypeToken
operator|.
name|of
argument_list|(
name|Types
operator|.
name|subtypeOf
argument_list|(
name|Object
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|getGenericSuperclass
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|Object
index|[]
argument_list|>
argument_list|()
block|{}
argument_list|,
name|TypeToken
operator|.
name|of
argument_list|(
name|Types
operator|.
name|subtypeOf
argument_list|(
name|Object
index|[]
operator|.
expr|class
argument_list|)
argument_list|)
operator|.
name|getGenericSuperclass
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testGetGenericSuperclass_wildcard_boundIsInterface ()
specifier|public
name|void
name|testGetGenericSuperclass_wildcard_boundIsInterface
parameter_list|()
block|{
name|assertNull
argument_list|(
name|TypeToken
operator|.
name|of
argument_list|(
name|Types
operator|.
name|subtypeOf
argument_list|(
name|CharSequence
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|getGenericSuperclass
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|CharSequence
index|[]
argument_list|>
argument_list|()
block|{}
argument_list|,
name|TypeToken
operator|.
name|of
argument_list|(
name|Types
operator|.
name|subtypeOf
argument_list|(
name|CharSequence
index|[]
operator|.
expr|class
argument_list|)
argument_list|)
operator|.
name|getGenericSuperclass
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testGetGenericInterfaces_typeVariable_unbounded ()
specifier|public
parameter_list|<
name|T
parameter_list|>
name|void
name|testGetGenericInterfaces_typeVariable_unbounded
parameter_list|()
block|{
name|assertThat
argument_list|(
name|TypeToken
operator|.
name|of
argument_list|(
operator|new
name|TypeCapture
argument_list|<
name|T
argument_list|>
argument_list|()
block|{}
operator|.
name|capture
argument_list|()
argument_list|)
operator|.
name|getGenericInterfaces
argument_list|()
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
name|assertHasArrayInterfaces
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|T
index|[]
argument_list|>
argument_list|()
block|{}
argument_list|)
expr_stmt|;
block|}
DECL|method|testGetGenericInterfaces_typeVariable_boundIsClass ()
specifier|public
parameter_list|<
name|T
extends|extends
name|NoInterface
parameter_list|>
name|void
name|testGetGenericInterfaces_typeVariable_boundIsClass
parameter_list|()
block|{
name|assertThat
argument_list|(
name|TypeToken
operator|.
name|of
argument_list|(
operator|new
name|TypeCapture
argument_list|<
name|T
argument_list|>
argument_list|()
block|{}
operator|.
name|capture
argument_list|()
argument_list|)
operator|.
name|getGenericInterfaces
argument_list|()
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
name|assertHasArrayInterfaces
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|T
index|[]
argument_list|>
argument_list|()
block|{}
argument_list|)
expr_stmt|;
block|}
specifier|public
parameter_list|<
name|T
extends|extends
name|NoInterface
operator|&
name|Iterable
argument_list|<
name|String
argument_list|>
parameter_list|>
DECL|method|testGetGenericInterfaces_typeVariable_boundsAreClassWithInterface ()
name|void
name|testGetGenericInterfaces_typeVariable_boundsAreClassWithInterface
parameter_list|()
block|{
name|makeUnmodifiable
argument_list|(
name|TypeToken
operator|.
name|of
argument_list|(
operator|new
name|TypeCapture
argument_list|<
name|T
argument_list|>
argument_list|()
block|{}
operator|.
name|capture
argument_list|()
argument_list|)
operator|.
name|getGenericInterfaces
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|Iterable
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|)
expr_stmt|;
name|assertHasArrayInterfaces
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|T
index|[]
argument_list|>
argument_list|()
block|{}
argument_list|)
expr_stmt|;
block|}
specifier|public
parameter_list|<
name|T
extends|extends
name|CharSequence
operator|&
name|Iterable
argument_list|<
name|String
argument_list|>
parameter_list|>
DECL|method|testGetGenericInterfaces_typeVariable_boundsAreInterfaces ()
name|void
name|testGetGenericInterfaces_typeVariable_boundsAreInterfaces
parameter_list|()
block|{
name|makeUnmodifiable
argument_list|(
name|TypeToken
operator|.
name|of
argument_list|(
operator|new
name|TypeCapture
argument_list|<
name|T
argument_list|>
argument_list|()
block|{}
operator|.
name|capture
argument_list|()
argument_list|)
operator|.
name|getGenericInterfaces
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|TypeToken
operator|.
name|of
argument_list|(
name|CharSequence
operator|.
name|class
argument_list|)
argument_list|,
operator|new
name|TypeToken
argument_list|<
name|Iterable
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|)
expr_stmt|;
name|assertHasArrayInterfaces
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|T
index|[]
argument_list|>
argument_list|()
block|{}
argument_list|)
expr_stmt|;
block|}
specifier|public
parameter_list|<
name|T
extends|extends
name|CharSequence
operator|&
name|Iterable
argument_list|<
name|T
argument_list|>
parameter_list|>
DECL|method|testGetGenericInterfaces_typeVariable_boundsAreFBoundedInterfaces ()
name|void
name|testGetGenericInterfaces_typeVariable_boundsAreFBoundedInterfaces
parameter_list|()
block|{
name|makeUnmodifiable
argument_list|(
name|TypeToken
operator|.
name|of
argument_list|(
operator|new
name|TypeCapture
argument_list|<
name|T
argument_list|>
argument_list|()
block|{}
operator|.
name|capture
argument_list|()
argument_list|)
operator|.
name|getGenericInterfaces
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|TypeToken
operator|.
name|of
argument_list|(
name|CharSequence
operator|.
name|class
argument_list|)
argument_list|,
operator|new
name|TypeToken
argument_list|<
name|Iterable
argument_list|<
name|T
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|)
expr_stmt|;
name|assertHasArrayInterfaces
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|T
index|[]
argument_list|>
argument_list|()
block|{}
argument_list|)
expr_stmt|;
block|}
specifier|public
parameter_list|<
name|T
extends|extends
name|Base
operator|&
name|Iterable
argument_list|<
name|T
argument_list|>
parameter_list|>
DECL|method|testGetGenericInterfaces_typeVariable_boundsAreClassWithFBoundedInterface ()
name|void
name|testGetGenericInterfaces_typeVariable_boundsAreClassWithFBoundedInterface
parameter_list|()
block|{
name|makeUnmodifiable
argument_list|(
name|TypeToken
operator|.
name|of
argument_list|(
operator|new
name|TypeCapture
argument_list|<
name|T
argument_list|>
argument_list|()
block|{}
operator|.
name|capture
argument_list|()
argument_list|)
operator|.
name|getGenericInterfaces
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|Iterable
argument_list|<
name|T
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|)
expr_stmt|;
name|assertHasArrayInterfaces
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|T
index|[]
argument_list|>
argument_list|()
block|{}
argument_list|)
expr_stmt|;
block|}
specifier|public
parameter_list|<
name|T
extends|extends
name|NoInterface
parameter_list|,
name|T1
extends|extends
name|T
parameter_list|,
name|T2
extends|extends
name|T1
parameter_list|>
DECL|method|testGetGenericInterfaces_typeVariable_boundIsTypeVariableAndClass ()
name|void
name|testGetGenericInterfaces_typeVariable_boundIsTypeVariableAndClass
parameter_list|()
block|{
name|assertThat
argument_list|(
name|TypeToken
operator|.
name|of
argument_list|(
operator|new
name|TypeCapture
argument_list|<
name|T2
argument_list|>
argument_list|()
block|{}
operator|.
name|capture
argument_list|()
argument_list|)
operator|.
name|getGenericInterfaces
argument_list|()
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
name|assertHasArrayInterfaces
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|T2
index|[]
argument_list|>
argument_list|()
block|{}
argument_list|)
expr_stmt|;
block|}
specifier|public
parameter_list|<
name|T
extends|extends
name|Iterable
argument_list|<
name|T
argument_list|>
parameter_list|,
name|T1
extends|extends
name|T
parameter_list|,
name|T2
extends|extends
name|T1
parameter_list|>
DECL|method|testGetGenericInterfaces_typeVariable_boundIsTypeVariableAndInterface ()
name|void
name|testGetGenericInterfaces_typeVariable_boundIsTypeVariableAndInterface
parameter_list|()
block|{
name|makeUnmodifiable
argument_list|(
name|TypeToken
operator|.
name|of
argument_list|(
operator|new
name|TypeCapture
argument_list|<
name|T2
argument_list|>
argument_list|()
block|{}
operator|.
name|capture
argument_list|()
argument_list|)
operator|.
name|getGenericInterfaces
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|TypeToken
operator|.
name|of
argument_list|(
operator|new
name|TypeCapture
argument_list|<
name|T1
argument_list|>
argument_list|()
block|{}
operator|.
name|capture
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertHasArrayInterfaces
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|T2
index|[]
argument_list|>
argument_list|()
block|{}
argument_list|)
expr_stmt|;
block|}
DECL|method|testGetGenericInterfaces_wildcard_lowerBounded ()
specifier|public
name|void
name|testGetGenericInterfaces_wildcard_lowerBounded
parameter_list|()
block|{
name|assertThat
argument_list|(
name|TypeToken
operator|.
name|of
argument_list|(
name|Types
operator|.
name|supertypeOf
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|getGenericInterfaces
argument_list|()
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|TypeToken
operator|.
name|of
argument_list|(
name|Types
operator|.
name|supertypeOf
argument_list|(
name|String
index|[]
operator|.
expr|class
argument_list|)
argument_list|)
operator|.
name|getGenericInterfaces
argument_list|()
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
DECL|method|testGetGenericInterfaces_wildcard_boundIsClass ()
specifier|public
name|void
name|testGetGenericInterfaces_wildcard_boundIsClass
parameter_list|()
block|{
name|assertThat
argument_list|(
name|TypeToken
operator|.
name|of
argument_list|(
name|Types
operator|.
name|subtypeOf
argument_list|(
name|Object
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|getGenericInterfaces
argument_list|()
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|TypeToken
operator|.
name|of
argument_list|(
name|Types
operator|.
name|subtypeOf
argument_list|(
name|Object
index|[]
operator|.
expr|class
argument_list|)
argument_list|)
operator|.
name|getGenericInterfaces
argument_list|()
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
DECL|method|testGetGenericInterfaces_wildcard_boundIsInterface ()
specifier|public
name|void
name|testGetGenericInterfaces_wildcard_boundIsInterface
parameter_list|()
block|{
name|TypeToken
argument_list|<
name|Iterable
argument_list|<
name|String
argument_list|>
argument_list|>
name|interfaceType
init|=
operator|new
name|TypeToken
argument_list|<
name|Iterable
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
block|{}
decl_stmt|;
name|makeUnmodifiable
argument_list|(
name|TypeToken
operator|.
name|of
argument_list|(
name|Types
operator|.
name|subtypeOf
argument_list|(
name|interfaceType
operator|.
name|getType
argument_list|()
argument_list|)
argument_list|)
operator|.
name|getGenericInterfaces
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
name|interfaceType
argument_list|)
expr_stmt|;
name|assertHasArrayInterfaces
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|Iterable
argument_list|<
name|String
argument_list|>
index|[]
argument_list|>
argument_list|()
block|{}
argument_list|)
expr_stmt|;
block|}
DECL|method|testGetGenericInterfaces_noInterface ()
specifier|public
name|void
name|testGetGenericInterfaces_noInterface
parameter_list|()
block|{
name|assertThat
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|NoInterface
argument_list|>
argument_list|()
block|{}
operator|.
name|getGenericInterfaces
argument_list|()
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
name|assertHasArrayInterfaces
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|NoInterface
index|[]
argument_list|>
argument_list|()
block|{}
argument_list|)
expr_stmt|;
block|}
DECL|method|testGetGenericInterfaces_withInterfaces ()
specifier|public
name|void
name|testGetGenericInterfaces_withInterfaces
parameter_list|()
block|{
name|Map
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|,
name|Type
argument_list|>
name|interfaceMap
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
for|for
control|(
name|TypeToken
argument_list|<
name|?
argument_list|>
name|interfaceType
range|:
operator|new
name|TypeToken
argument_list|<
name|Implementation
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
argument_list|>
argument_list|()
block|{}
operator|.
name|getGenericInterfaces
argument_list|()
control|)
block|{
name|interfaceMap
operator|.
name|put
argument_list|(
name|interfaceType
operator|.
name|getRawType
argument_list|()
argument_list|,
name|interfaceType
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
name|Iterable
operator|.
name|class
argument_list|,
operator|new
name|TypeToken
argument_list|<
name|Iterable
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
block|{}
operator|.
name|getType
argument_list|()
argument_list|,
name|Map
operator|.
name|class
argument_list|,
operator|new
name|TypeToken
argument_list|<
name|Map
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
argument_list|>
argument_list|()
block|{}
operator|.
name|getType
argument_list|()
argument_list|)
argument_list|,
name|interfaceMap
argument_list|)
expr_stmt|;
block|}
DECL|interface|Interface1
specifier|private
interface|interface
name|Interface1
block|{}
DECL|interface|Interface2
specifier|private
interface|interface
name|Interface2
block|{}
DECL|interface|Interface3
specifier|private
interface|interface
name|Interface3
parameter_list|<
name|T
parameter_list|>
extends|extends
name|Iterable
argument_list|<
name|T
argument_list|>
block|{}
DECL|interface|Interface12
specifier|private
interface|interface
name|Interface12
extends|extends
name|Interface1
extends|,
name|Interface2
block|{}
DECL|class|Class1
specifier|private
specifier|static
class|class
name|Class1
implements|implements
name|Interface1
block|{}
DECL|class|NoInterface
specifier|private
specifier|static
specifier|final
class|class
name|NoInterface
block|{}
DECL|class|Implementation
specifier|private
specifier|abstract
specifier|static
class|class
name|Implementation
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
implements|implements
name|Iterable
argument_list|<
name|V
argument_list|>
implements|,
name|Map
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
block|{}
DECL|class|First
specifier|private
specifier|abstract
specifier|static
class|class
name|First
parameter_list|<
name|T
parameter_list|>
block|{}
DECL|class|Second
specifier|private
specifier|abstract
specifier|static
class|class
name|Second
parameter_list|<
name|D
parameter_list|>
extends|extends
name|First
argument_list|<
name|D
argument_list|>
block|{}
DECL|class|Third
specifier|private
specifier|abstract
specifier|static
class|class
name|Third
parameter_list|<
name|T
parameter_list|,
name|D
parameter_list|>
extends|extends
name|Second
argument_list|<
name|T
argument_list|>
block|{}
DECL|class|Fourth
specifier|private
specifier|abstract
specifier|static
class|class
name|Fourth
parameter_list|<
name|T
parameter_list|,
name|D
parameter_list|>
extends|extends
name|Third
argument_list|<
name|D
argument_list|,
name|T
argument_list|>
block|{}
DECL|class|ConcreteIS
specifier|private
specifier|static
class|class
name|ConcreteIS
extends|extends
name|Fourth
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
block|{}
DECL|class|ConcreteSI
specifier|private
specifier|static
class|class
name|ConcreteSI
extends|extends
name|Fourth
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
block|{}
DECL|method|testAssignableClassToClass ()
specifier|public
name|void
name|testAssignableClassToClass
parameter_list|()
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
comment|// To test TypeToken<List>
name|TypeToken
argument_list|<
name|List
argument_list|>
name|tokL
init|=
operator|new
name|TypeToken
argument_list|<
name|List
argument_list|>
argument_list|()
block|{}
decl_stmt|;
name|assertTrue
argument_list|(
name|tokL
operator|.
name|isSupertypeOf
argument_list|(
name|List
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|tokL
operator|.
name|isSupertypeOf
argument_list|(
name|ArrayList
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|tokL
operator|.
name|isSupertypeOf
argument_list|(
name|List
index|[]
operator|.
expr|class
argument_list|)
argument_list|)
expr_stmt|;
name|TypeToken
argument_list|<
name|Number
argument_list|>
name|tokN
init|=
operator|new
name|TypeToken
argument_list|<
name|Number
argument_list|>
argument_list|()
block|{}
decl_stmt|;
name|assertTrue
argument_list|(
name|tokN
operator|.
name|isSupertypeOf
argument_list|(
name|Number
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|tokN
operator|.
name|isSupertypeOf
argument_list|(
name|Integer
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testAssignableParameterizedTypeToObject ()
specifier|public
parameter_list|<
name|T
parameter_list|>
name|void
name|testAssignableParameterizedTypeToObject
parameter_list|()
block|{
name|assertTrue
argument_list|(
name|TypeToken
operator|.
name|of
argument_list|(
name|Object
operator|.
name|class
argument_list|)
operator|.
name|isSupertypeOf
argument_list|(
name|TypeToken
operator|.
name|of
argument_list|(
operator|new
name|TypeCapture
argument_list|<
name|T
argument_list|>
argument_list|()
block|{}
operator|.
name|capture
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|TypeToken
operator|.
name|of
argument_list|(
name|int
operator|.
name|class
argument_list|)
operator|.
name|isSupertypeOf
argument_list|(
name|TypeToken
operator|.
name|of
argument_list|(
operator|new
name|TypeCapture
argument_list|<
name|T
argument_list|>
argument_list|()
block|{}
operator|.
name|capture
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testAssignableGenericArrayToGenericArray ()
specifier|public
parameter_list|<
name|T
parameter_list|,
name|T1
extends|extends
name|T
parameter_list|>
name|void
name|testAssignableGenericArrayToGenericArray
parameter_list|()
block|{
name|assertTrue
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|T
index|[]
argument_list|>
argument_list|()
block|{}
operator|.
name|isSupertypeOf
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|T
index|[]
argument_list|>
argument_list|()
block|{}
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|T
index|[]
argument_list|>
argument_list|()
block|{}
operator|.
name|isSupertypeOf
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|T1
index|[]
argument_list|>
argument_list|()
block|{}
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|T
index|[]
argument_list|>
argument_list|()
block|{}
operator|.
name|isSupertypeOf
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|T
index|[]
index|[]
argument_list|>
argument_list|()
block|{}
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testAssignableGenericArrayToClass ()
specifier|public
parameter_list|<
name|T
parameter_list|,
name|T1
extends|extends
name|T
parameter_list|>
name|void
name|testAssignableGenericArrayToClass
parameter_list|()
block|{
name|assertTrue
argument_list|(
name|TypeToken
operator|.
name|of
argument_list|(
name|Object
index|[]
operator|.
expr|class
operator|.
name|getSuperclass
argument_list|()
argument_list|)
operator|.
name|isSupertypeOf
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|T
index|[]
argument_list|>
argument_list|()
block|{}
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Class
argument_list|<
name|?
argument_list|>
name|interfaceType
range|:
name|Object
index|[]
operator|.
expr|class
operator|.
name|getInterfaces
argument_list|()
control|)
block|{
name|assertTrue
argument_list|(
name|TypeToken
operator|.
name|of
argument_list|(
name|interfaceType
argument_list|)
operator|.
name|isSupertypeOf
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|T
index|[]
argument_list|>
argument_list|()
block|{}
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|TypeToken
operator|.
name|of
argument_list|(
name|Object
operator|.
name|class
argument_list|)
operator|.
name|isSupertypeOf
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|T
index|[]
argument_list|>
argument_list|()
block|{}
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|TypeToken
operator|.
name|of
argument_list|(
name|String
operator|.
name|class
argument_list|)
operator|.
name|isSupertypeOf
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|T
index|[]
argument_list|>
argument_list|()
block|{}
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testAssignableWildcardBoundedByArrayToArrayClass ()
specifier|public
name|void
name|testAssignableWildcardBoundedByArrayToArrayClass
parameter_list|()
block|{
name|Type
name|wildcardType
init|=
name|Types
operator|.
name|subtypeOf
argument_list|(
name|Object
index|[]
operator|.
expr|class
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|TypeToken
operator|.
name|of
argument_list|(
name|Object
index|[]
operator|.
expr|class
argument_list|)
operator|.
name|isSupertypeOf
argument_list|(
name|wildcardType
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|TypeToken
operator|.
name|of
argument_list|(
name|Object
operator|.
name|class
argument_list|)
operator|.
name|isSupertypeOf
argument_list|(
name|wildcardType
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|TypeToken
operator|.
name|of
argument_list|(
name|wildcardType
argument_list|)
operator|.
name|isSupertypeOf
argument_list|(
name|wildcardType
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|TypeToken
operator|.
name|of
argument_list|(
name|int
index|[]
operator|.
expr|class
argument_list|)
operator|.
name|isSupertypeOf
argument_list|(
name|wildcardType
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testAssignableWildcardTypeParameterToClassTypeParameter ()
specifier|public
name|void
name|testAssignableWildcardTypeParameterToClassTypeParameter
parameter_list|()
block|{
name|TypeToken
argument_list|<
name|?
argument_list|>
name|wildcardType
init|=
operator|new
name|TypeToken
operator|<
name|Iterable
operator|<
condition|?
then|extends
name|Object
index|[]
operator|>>
operator|(
operator|)
block|{}
decl_stmt|;
name|assertFalse
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|Iterable
argument_list|<
name|Object
index|[]
argument_list|>
argument_list|>
argument_list|()
block|{}
operator|.
name|isSupertypeOf
argument_list|(
name|wildcardType
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|Iterable
argument_list|<
name|Object
argument_list|>
argument_list|>
argument_list|()
block|{}
operator|.
name|isSupertypeOf
argument_list|(
name|wildcardType
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|wildcardType
operator|.
name|isSupertypeOf
argument_list|(
name|wildcardType
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|Iterable
argument_list|<
name|int
index|[]
argument_list|>
argument_list|>
argument_list|()
block|{}
operator|.
name|isSupertypeOf
argument_list|(
name|wildcardType
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testAssignableArrayClassToBoundedWildcard ()
specifier|public
name|void
name|testAssignableArrayClassToBoundedWildcard
parameter_list|()
block|{
name|TypeToken
argument_list|<
name|?
argument_list|>
name|subtypeOfArray
init|=
name|TypeToken
operator|.
name|of
argument_list|(
name|Types
operator|.
name|subtypeOf
argument_list|(
name|Object
index|[]
operator|.
expr|class
argument_list|)
argument_list|)
decl_stmt|;
name|TypeToken
argument_list|<
name|?
argument_list|>
name|supertypeOfArray
init|=
name|TypeToken
operator|.
name|of
argument_list|(
name|Types
operator|.
name|supertypeOf
argument_list|(
name|Object
index|[]
operator|.
expr|class
argument_list|)
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|subtypeOfArray
operator|.
name|isSupertypeOf
argument_list|(
name|Object
index|[]
operator|.
expr|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|subtypeOfArray
operator|.
name|isSupertypeOf
argument_list|(
name|Object
index|[]
index|[]
operator|.
expr|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|subtypeOfArray
operator|.
name|isSupertypeOf
argument_list|(
name|String
index|[]
operator|.
expr|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|supertypeOfArray
operator|.
name|isSupertypeOf
argument_list|(
name|Object
index|[]
operator|.
expr|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|supertypeOfArray
operator|.
name|isSupertypeOf
argument_list|(
name|Object
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|supertypeOfArray
operator|.
name|isSupertypeOf
argument_list|(
name|Object
index|[]
index|[]
operator|.
expr|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|supertypeOfArray
operator|.
name|isSupertypeOf
argument_list|(
name|String
index|[]
operator|.
expr|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testAssignableClassTypeParameterToWildcardTypeParameter ()
specifier|public
name|void
name|testAssignableClassTypeParameterToWildcardTypeParameter
parameter_list|()
block|{
name|TypeToken
argument_list|<
name|?
argument_list|>
name|subtypeOfArray
init|=
operator|new
name|TypeToken
operator|<
name|Iterable
operator|<
condition|?
then|extends
name|Object
index|[]
operator|>>
operator|(
operator|)
block|{}
decl_stmt|;
name|TypeToken
argument_list|<
name|?
argument_list|>
name|supertypeOfArray
init|=
operator|new
name|TypeToken
operator|<
name|Iterable
operator|<
condition|?
name|super
name|Object
index|[]
operator|>>
operator|(
operator|)
block|{}
decl_stmt|;
name|assertTrue
argument_list|(
name|subtypeOfArray
operator|.
name|isSupertypeOf
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|Iterable
argument_list|<
name|Object
index|[]
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|subtypeOfArray
operator|.
name|isSupertypeOf
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|Iterable
argument_list|<
name|Object
index|[]
index|[]
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|subtypeOfArray
operator|.
name|isSupertypeOf
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|Iterable
argument_list|<
name|String
index|[]
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|supertypeOfArray
operator|.
name|isSupertypeOf
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|Iterable
argument_list|<
name|Object
index|[]
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|supertypeOfArray
operator|.
name|isSupertypeOf
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|Iterable
argument_list|<
name|Object
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|supertypeOfArray
operator|.
name|isSupertypeOf
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|Iterable
argument_list|<
name|Object
index|[]
index|[]
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|supertypeOfArray
operator|.
name|isSupertypeOf
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|Iterable
argument_list|<
name|String
index|[]
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testAssignableNonParameterizedClassToWildcard ()
specifier|public
name|void
name|testAssignableNonParameterizedClassToWildcard
parameter_list|()
block|{
name|TypeToken
argument_list|<
name|?
argument_list|>
name|supertypeOfString
init|=
name|TypeToken
operator|.
name|of
argument_list|(
name|Types
operator|.
name|supertypeOf
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|supertypeOfString
operator|.
name|isSupertypeOf
argument_list|(
name|supertypeOfString
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|supertypeOfString
operator|.
name|isSupertypeOf
argument_list|(
name|Object
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|supertypeOfString
operator|.
name|isSupertypeOf
argument_list|(
name|CharSequence
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|supertypeOfString
operator|.
name|isSupertypeOf
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|supertypeOfString
operator|.
name|isSupertypeOf
argument_list|(
name|Types
operator|.
name|subtypeOf
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testAssignableWildcardBoundedByIntArrayToArrayClass ()
specifier|public
name|void
name|testAssignableWildcardBoundedByIntArrayToArrayClass
parameter_list|()
block|{
name|Type
name|wildcardType
init|=
name|Types
operator|.
name|subtypeOf
argument_list|(
name|int
index|[]
operator|.
expr|class
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|TypeToken
operator|.
name|of
argument_list|(
name|int
index|[]
operator|.
expr|class
argument_list|)
operator|.
name|isSupertypeOf
argument_list|(
name|wildcardType
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|TypeToken
operator|.
name|of
argument_list|(
name|Object
operator|.
name|class
argument_list|)
operator|.
name|isSupertypeOf
argument_list|(
name|wildcardType
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|TypeToken
operator|.
name|of
argument_list|(
name|wildcardType
argument_list|)
operator|.
name|isSupertypeOf
argument_list|(
name|wildcardType
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|TypeToken
operator|.
name|of
argument_list|(
name|Object
index|[]
operator|.
expr|class
argument_list|)
operator|.
name|isSupertypeOf
argument_list|(
name|wildcardType
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testAssignableWildcardTypeParameterBoundedByIntArrayToArrayClassTypeParameter ()
specifier|public
name|void
name|testAssignableWildcardTypeParameterBoundedByIntArrayToArrayClassTypeParameter
parameter_list|()
block|{
name|TypeToken
argument_list|<
name|?
argument_list|>
name|wildcardType
init|=
operator|new
name|TypeToken
operator|<
name|Iterable
operator|<
condition|?
then|extends
name|int
index|[]
operator|>>
operator|(
operator|)
block|{}
decl_stmt|;
name|assertFalse
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|Iterable
argument_list|<
name|int
index|[]
argument_list|>
argument_list|>
argument_list|()
block|{}
operator|.
name|isSupertypeOf
argument_list|(
name|wildcardType
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|Iterable
argument_list|<
name|Object
argument_list|>
argument_list|>
argument_list|()
block|{}
operator|.
name|isSupertypeOf
argument_list|(
name|wildcardType
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|wildcardType
operator|.
name|isSupertypeOf
argument_list|(
name|wildcardType
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|Iterable
argument_list|<
name|Object
index|[]
argument_list|>
argument_list|>
argument_list|()
block|{}
operator|.
name|isSupertypeOf
argument_list|(
name|wildcardType
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testAssignableWildcardToWildcard ()
specifier|public
name|void
name|testAssignableWildcardToWildcard
parameter_list|()
block|{
name|TypeToken
argument_list|<
name|?
argument_list|>
name|subtypeOfArray
init|=
name|TypeToken
operator|.
name|of
argument_list|(
name|Types
operator|.
name|subtypeOf
argument_list|(
name|Object
index|[]
operator|.
expr|class
argument_list|)
argument_list|)
decl_stmt|;
name|TypeToken
argument_list|<
name|?
argument_list|>
name|supertypeOfArray
init|=
name|TypeToken
operator|.
name|of
argument_list|(
name|Types
operator|.
name|supertypeOf
argument_list|(
name|Object
index|[]
operator|.
expr|class
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|supertypeOfArray
operator|.
name|isSupertypeOf
argument_list|(
name|subtypeOfArray
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|supertypeOfArray
operator|.
name|isSupertypeOf
argument_list|(
name|supertypeOfArray
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|subtypeOfArray
operator|.
name|isSupertypeOf
argument_list|(
name|subtypeOfArray
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|subtypeOfArray
operator|.
name|isSupertypeOf
argument_list|(
name|supertypeOfArray
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testAssignableWildcardTypeParameterToWildcardTypeParameter ()
specifier|public
name|void
name|testAssignableWildcardTypeParameterToWildcardTypeParameter
parameter_list|()
block|{
name|TypeToken
argument_list|<
name|?
argument_list|>
name|subtypeOfArray
init|=
operator|new
name|TypeToken
operator|<
name|Iterable
operator|<
condition|?
then|extends
name|Object
index|[]
operator|>>
operator|(
operator|)
block|{}
decl_stmt|;
name|TypeToken
argument_list|<
name|?
argument_list|>
name|supertypeOfArray
init|=
operator|new
name|TypeToken
operator|<
name|Iterable
operator|<
condition|?
name|super
name|Object
index|[]
operator|>>
operator|(
operator|)
block|{}
decl_stmt|;
name|assertFalse
argument_list|(
name|supertypeOfArray
operator|.
name|isSupertypeOf
argument_list|(
name|subtypeOfArray
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|supertypeOfArray
operator|.
name|isSupertypeOf
argument_list|(
name|supertypeOfArray
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|subtypeOfArray
operator|.
name|isSupertypeOf
argument_list|(
name|subtypeOfArray
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|subtypeOfArray
operator|.
name|isSupertypeOf
argument_list|(
name|supertypeOfArray
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testAssignableGenericArrayToArrayClass ()
specifier|public
parameter_list|<
name|T
parameter_list|>
name|void
name|testAssignableGenericArrayToArrayClass
parameter_list|()
block|{
name|assertTrue
argument_list|(
name|TypeToken
operator|.
name|of
argument_list|(
name|Object
index|[]
operator|.
expr|class
argument_list|)
operator|.
name|isSupertypeOf
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|T
index|[]
argument_list|>
argument_list|()
block|{}
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|TypeToken
operator|.
name|of
argument_list|(
name|Object
index|[]
operator|.
expr|class
argument_list|)
operator|.
name|isSupertypeOf
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|T
index|[]
index|[]
argument_list|>
argument_list|()
block|{}
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|TypeToken
operator|.
name|of
argument_list|(
name|Object
index|[]
index|[]
operator|.
expr|class
argument_list|)
operator|.
name|isSupertypeOf
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|T
index|[]
index|[]
argument_list|>
argument_list|()
block|{}
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testAssignableParameterizedTypeToClass ()
specifier|public
name|void
name|testAssignableParameterizedTypeToClass
parameter_list|()
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
comment|// Trying to test raw class
name|TypeToken
argument_list|<
name|List
argument_list|>
name|tokL
init|=
operator|new
name|TypeToken
argument_list|<
name|List
argument_list|>
argument_list|()
block|{}
decl_stmt|;
name|assertTrue
argument_list|(
name|tokL
operator|.
name|isSupertypeOf
argument_list|(
name|StringList
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|tokL
operator|.
name|isSupertypeOf
argument_list|(
name|StringList
operator|.
name|class
operator|.
name|getGenericInterfaces
argument_list|()
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
comment|// Trying to test raw class
name|TypeToken
argument_list|<
name|Second
argument_list|>
name|tokS
init|=
operator|new
name|TypeToken
argument_list|<
name|Second
argument_list|>
argument_list|()
block|{}
decl_stmt|;
name|assertTrue
argument_list|(
name|tokS
operator|.
name|isSupertypeOf
argument_list|(
name|Second
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|tokS
operator|.
name|isSupertypeOf
argument_list|(
name|Third
operator|.
name|class
operator|.
name|getGenericSuperclass
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testAssignableArrayToClass ()
specifier|public
name|void
name|testAssignableArrayToClass
parameter_list|()
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
comment|// Trying to test raw class
name|TypeToken
argument_list|<
name|List
index|[]
argument_list|>
name|tokL
init|=
operator|new
name|TypeToken
argument_list|<
name|List
index|[]
argument_list|>
argument_list|()
block|{}
decl_stmt|;
name|assertTrue
argument_list|(
name|tokL
operator|.
name|isSupertypeOf
argument_list|(
name|List
index|[]
operator|.
expr|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|tokL
operator|.
name|isSupertypeOf
argument_list|(
name|List
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
comment|// Trying to test raw class
name|TypeToken
argument_list|<
name|Second
index|[]
argument_list|>
name|tokS
init|=
operator|new
name|TypeToken
argument_list|<
name|Second
index|[]
argument_list|>
argument_list|()
block|{}
decl_stmt|;
name|assertTrue
argument_list|(
name|tokS
operator|.
name|isSupertypeOf
argument_list|(
name|Second
index|[]
operator|.
expr|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|tokS
operator|.
name|isSupertypeOf
argument_list|(
name|Third
index|[]
operator|.
expr|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
comment|// Trying to test raw class
DECL|method|testAssignableTokenToClass ()
specifier|public
name|void
name|testAssignableTokenToClass
parameter_list|()
block|{
name|TypeToken
argument_list|<
name|List
argument_list|>
name|tokL
init|=
operator|new
name|TypeToken
argument_list|<
name|List
argument_list|>
argument_list|()
block|{}
decl_stmt|;
name|assertTrue
argument_list|(
name|tokL
operator|.
name|isSupertypeOf
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|List
argument_list|>
argument_list|()
block|{}
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|tokL
operator|.
name|isSupertypeOf
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|tokL
operator|.
name|isSupertypeOf
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|List
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|()
block|{}
block|)
block|)
class|;
end_class

begin_decl_stmt
name|TypeToken
argument_list|<
name|Second
argument_list|>
name|tokS
init|=
operator|new
name|TypeToken
argument_list|<
name|Second
argument_list|>
argument_list|()
block|{}
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|assertTrue
argument_list|(
name|tokS
operator|.
name|isSupertypeOf
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|Second
argument_list|>
argument_list|()
block|{}
argument_list|)
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|assertTrue
argument_list|(
name|tokS
operator|.
name|isSupertypeOf
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|Third
argument_list|>
argument_list|()
block|{}
argument_list|)
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|assertTrue
argument_list|(
name|tokS
operator|.
name|isSupertypeOf
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|Third
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|)
argument_list|)
expr_stmt|;
end_expr_stmt

begin_decl_stmt
name|TypeToken
argument_list|<
name|List
index|[]
argument_list|>
name|tokA
init|=
operator|new
name|TypeToken
argument_list|<
name|List
index|[]
argument_list|>
argument_list|()
block|{}
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|assertTrue
argument_list|(
name|tokA
operator|.
name|isSupertypeOf
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|List
index|[]
argument_list|>
argument_list|()
block|{}
argument_list|)
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|assertTrue
argument_list|(
name|tokA
operator|.
name|isSupertypeOf
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
index|[]
argument_list|>
argument_list|()
block|{}
argument_list|)
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|assertTrue
argument_list|(
name|tokA
operator|.
name|isSupertypeOf
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|List
argument_list|<
name|?
argument_list|>
index|[]
argument_list|>
argument_list|()
block|{}
end_expr_stmt

begin_empty_stmt
unit|))
empty_stmt|;
end_empty_stmt

begin_function
unit|}    public
DECL|method|testAssignableClassToType ()
name|void
name|testAssignableClassToType
parameter_list|()
block|{
name|TypeToken
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|tokenL
init|=
operator|new
name|TypeToken
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
block|{}
decl_stmt|;
name|assertTrue
argument_list|(
name|tokenL
operator|.
name|isSupertypeOf
argument_list|(
name|StringList
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|tokenL
operator|.
name|isSupertypeOf
argument_list|(
name|List
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|TypeToken
argument_list|<
name|First
argument_list|<
name|String
argument_list|>
argument_list|>
name|tokenF
init|=
operator|new
name|TypeToken
argument_list|<
name|First
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
block|{}
decl_stmt|;
name|assertTrue
argument_list|(
name|tokenF
operator|.
name|isSupertypeOf
argument_list|(
name|ConcreteIS
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|tokenF
operator|.
name|isSupertypeOf
argument_list|(
name|ConcreteSI
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|testAssignableClassToArrayType ()
specifier|public
name|void
name|testAssignableClassToArrayType
parameter_list|()
block|{
name|TypeToken
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
index|[]
argument_list|>
name|tokenL
init|=
operator|new
name|TypeToken
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
index|[]
argument_list|>
argument_list|()
block|{}
decl_stmt|;
name|assertTrue
argument_list|(
name|tokenL
operator|.
name|isSupertypeOf
argument_list|(
name|StringList
index|[]
operator|.
expr|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|tokenL
operator|.
name|isSupertypeOf
argument_list|(
name|List
index|[]
operator|.
expr|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|testAssignableParameterizedTypeToType ()
specifier|public
name|void
name|testAssignableParameterizedTypeToType
parameter_list|()
block|{
name|TypeToken
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|tokenL
init|=
operator|new
name|TypeToken
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
block|{}
decl_stmt|;
name|assertTrue
argument_list|(
name|tokenL
operator|.
name|isSupertypeOf
argument_list|(
name|StringList
operator|.
name|class
operator|.
name|getGenericInterfaces
argument_list|()
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|tokenL
operator|.
name|isSupertypeOf
argument_list|(
name|IntegerList
operator|.
name|class
operator|.
name|getGenericInterfaces
argument_list|()
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|TypeToken
argument_list|<
name|First
argument_list|<
name|String
argument_list|>
argument_list|>
name|tokenF
init|=
operator|new
name|TypeToken
argument_list|<
name|First
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
block|{}
decl_stmt|;
name|assertTrue
argument_list|(
name|tokenF
operator|.
name|isSupertypeOf
argument_list|(
name|ConcreteIS
operator|.
name|class
operator|.
name|getGenericSuperclass
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|tokenF
operator|.
name|isSupertypeOf
argument_list|(
name|ConcreteSI
operator|.
name|class
operator|.
name|getGenericSuperclass
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|testGenericArrayTypeToArrayType ()
specifier|public
name|void
name|testGenericArrayTypeToArrayType
parameter_list|()
block|{
name|TypeToken
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
index|[]
argument_list|>
name|tokL
init|=
operator|new
name|TypeToken
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
index|[]
argument_list|>
argument_list|()
block|{}
decl_stmt|;
name|TypeToken
argument_list|<
name|ArrayList
argument_list|<
name|String
argument_list|>
index|[]
argument_list|>
name|token
init|=
operator|new
name|TypeToken
argument_list|<
name|ArrayList
argument_list|<
name|String
argument_list|>
index|[]
argument_list|>
argument_list|()
block|{}
decl_stmt|;
name|assertTrue
argument_list|(
name|tokL
operator|.
name|isSupertypeOf
argument_list|(
name|tokL
operator|.
name|getType
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|tokL
operator|.
name|isSupertypeOf
argument_list|(
name|token
operator|.
name|getType
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|testAssignableTokenToType ()
specifier|public
name|void
name|testAssignableTokenToType
parameter_list|()
block|{
name|TypeToken
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|tokenL
init|=
operator|new
name|TypeToken
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
block|{}
decl_stmt|;
name|assertTrue
argument_list|(
name|tokenL
operator|.
name|isSupertypeOf
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|tokenL
operator|.
name|isSupertypeOf
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|tokenL
operator|.
name|isSupertypeOf
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|StringList
argument_list|>
argument_list|()
block|{}
argument_list|)
argument_list|)
expr_stmt|;
name|TypeToken
argument_list|<
name|First
argument_list|<
name|String
argument_list|>
argument_list|>
name|tokenF
init|=
operator|new
name|TypeToken
argument_list|<
name|First
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
block|{}
decl_stmt|;
name|assertTrue
argument_list|(
name|tokenF
operator|.
name|isSupertypeOf
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|Second
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|tokenF
operator|.
name|isSupertypeOf
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|Third
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|tokenF
operator|.
name|isSupertypeOf
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|Third
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|tokenF
operator|.
name|isSupertypeOf
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|Fourth
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|tokenF
operator|.
name|isSupertypeOf
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|Fourth
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|tokenF
operator|.
name|isSupertypeOf
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|ConcreteIS
argument_list|>
argument_list|()
block|{}
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|tokenF
operator|.
name|isSupertypeOf
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|ConcreteSI
argument_list|>
argument_list|()
block|{}
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|testAssignableWithWildcards ()
specifier|public
name|void
name|testAssignableWithWildcards
parameter_list|()
block|{
name|TypeToken
argument_list|<
name|?
argument_list|>
name|unboundedToken
init|=
operator|new
name|TypeToken
argument_list|<
name|List
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|()
block|{}
empty_stmt|;
name|TypeToken
argument_list|<
name|?
argument_list|>
name|upperBoundToken
init|=
operator|new
name|TypeToken
argument_list|<
name|List
argument_list|<
name|?
extends|extends
name|Number
argument_list|>
argument_list|>
argument_list|()
block|{}
empty_stmt|;
name|TypeToken
argument_list|<
name|?
argument_list|>
name|lowerBoundToken
init|=
operator|new
name|TypeToken
argument_list|<
name|List
argument_list|<
name|?
super|super
name|Number
argument_list|>
argument_list|>
argument_list|()
block|{}
empty_stmt|;
name|TypeToken
argument_list|<
name|?
argument_list|>
name|concreteToken
init|=
operator|new
name|TypeToken
argument_list|<
name|List
argument_list|<
name|Number
argument_list|>
argument_list|>
argument_list|()
block|{}
decl_stmt|;
name|TypeToken
argument_list|<
name|?
argument_list|>
name|subtypeToken
init|=
operator|new
name|TypeToken
argument_list|<
name|List
argument_list|<
name|Integer
argument_list|>
argument_list|>
argument_list|()
block|{}
decl_stmt|;
name|TypeToken
argument_list|<
name|?
argument_list|>
name|supertypeToken
init|=
operator|new
name|TypeToken
argument_list|<
name|List
argument_list|<
name|Serializable
argument_list|>
argument_list|>
argument_list|()
block|{}
decl_stmt|;
name|List
argument_list|<
name|TypeToken
argument_list|<
name|?
argument_list|>
argument_list|>
name|allTokens
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
name|unboundedToken
argument_list|,
name|upperBoundToken
argument_list|,
name|lowerBoundToken
argument_list|,
name|concreteToken
argument_list|,
name|subtypeToken
argument_list|,
name|supertypeToken
argument_list|)
decl_stmt|;
for|for
control|(
name|TypeToken
argument_list|<
name|?
argument_list|>
name|typeToken
range|:
name|allTokens
control|)
block|{
name|assertTrue
argument_list|(
name|typeToken
operator|.
name|toString
argument_list|()
argument_list|,
name|unboundedToken
operator|.
name|isSupertypeOf
argument_list|(
name|typeToken
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertFalse
argument_list|(
name|upperBoundToken
operator|.
name|isSupertypeOf
argument_list|(
name|unboundedToken
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|upperBoundToken
operator|.
name|isSupertypeOf
argument_list|(
name|upperBoundToken
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|upperBoundToken
operator|.
name|isSupertypeOf
argument_list|(
name|lowerBoundToken
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|upperBoundToken
operator|.
name|isSupertypeOf
argument_list|(
name|concreteToken
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|upperBoundToken
operator|.
name|isSupertypeOf
argument_list|(
name|subtypeToken
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|upperBoundToken
operator|.
name|isSupertypeOf
argument_list|(
name|supertypeToken
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|lowerBoundToken
operator|.
name|isSupertypeOf
argument_list|(
name|unboundedToken
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|lowerBoundToken
operator|.
name|isSupertypeOf
argument_list|(
name|upperBoundToken
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|lowerBoundToken
operator|.
name|isSupertypeOf
argument_list|(
name|lowerBoundToken
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|lowerBoundToken
operator|.
name|isSupertypeOf
argument_list|(
name|concreteToken
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|lowerBoundToken
operator|.
name|isSupertypeOf
argument_list|(
name|subtypeToken
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|lowerBoundToken
operator|.
name|isSupertypeOf
argument_list|(
name|supertypeToken
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|TypeToken
argument_list|<
name|?
argument_list|>
name|typeToken
range|:
name|allTokens
control|)
block|{
name|assertEquals
argument_list|(
name|typeToken
operator|.
name|toString
argument_list|()
argument_list|,
name|typeToken
operator|==
name|concreteToken
argument_list|,
name|concreteToken
operator|.
name|isSupertypeOf
argument_list|(
name|typeToken
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|TypeToken
argument_list|<
name|?
argument_list|>
name|typeToken
range|:
name|allTokens
control|)
block|{
name|assertEquals
argument_list|(
name|typeToken
operator|.
name|toString
argument_list|()
argument_list|,
name|typeToken
operator|==
name|subtypeToken
argument_list|,
name|subtypeToken
operator|.
name|isSupertypeOf
argument_list|(
name|typeToken
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|TypeToken
argument_list|<
name|?
argument_list|>
name|typeToken
range|:
name|allTokens
control|)
block|{
name|assertEquals
argument_list|(
name|typeToken
operator|.
name|toString
argument_list|()
argument_list|,
name|typeToken
operator|==
name|supertypeToken
argument_list|,
name|supertypeToken
operator|.
name|isSupertypeOf
argument_list|(
name|typeToken
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
specifier|public
parameter_list|<
name|N1
extends|extends
name|Number
parameter_list|,
name|N2
extends|extends
name|Number
parameter_list|,
name|N11
extends|extends
name|N1
parameter_list|>
DECL|method|testisSupertypeOf_typeVariable ()
name|void
name|testisSupertypeOf_typeVariable
parameter_list|()
block|{
name|assertAssignable
argument_list|(
name|TypeToken
operator|.
name|of
argument_list|(
operator|new
name|TypeCapture
argument_list|<
name|N1
argument_list|>
argument_list|()
block|{}
operator|.
name|capture
argument_list|()
argument_list|)
argument_list|,
name|TypeToken
operator|.
name|of
argument_list|(
operator|new
name|TypeCapture
argument_list|<
name|N1
argument_list|>
argument_list|()
block|{}
operator|.
name|capture
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotAssignable
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|List
argument_list|<
name|N11
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|,
operator|new
name|TypeToken
argument_list|<
name|List
argument_list|<
name|N1
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|)
expr_stmt|;
name|assertNotAssignable
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|Number
argument_list|>
argument_list|()
block|{}
argument_list|,
name|TypeToken
operator|.
name|of
argument_list|(
operator|new
name|TypeCapture
argument_list|<
name|N1
argument_list|>
argument_list|()
block|{}
operator|.
name|capture
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertAssignable
argument_list|(
name|TypeToken
operator|.
name|of
argument_list|(
operator|new
name|TypeCapture
argument_list|<
name|N11
argument_list|>
argument_list|()
block|{}
operator|.
name|capture
argument_list|()
argument_list|)
argument_list|,
name|TypeToken
operator|.
name|of
argument_list|(
operator|new
name|TypeCapture
argument_list|<
name|N1
argument_list|>
argument_list|()
block|{}
operator|.
name|capture
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotAssignable
argument_list|(
name|TypeToken
operator|.
name|of
argument_list|(
operator|new
name|TypeCapture
argument_list|<
name|N2
argument_list|>
argument_list|()
block|{}
operator|.
name|capture
argument_list|()
argument_list|)
argument_list|,
name|TypeToken
operator|.
name|of
argument_list|(
operator|new
name|TypeCapture
argument_list|<
name|N1
argument_list|>
argument_list|()
block|{}
operator|.
name|capture
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|public
parameter_list|<
name|N1
extends|extends
name|Number
parameter_list|,
name|N2
extends|extends
name|Number
parameter_list|,
name|N11
extends|extends
name|N1
parameter_list|>
DECL|method|testisSupertypeOf_equalWildcardTypes ()
name|void
name|testisSupertypeOf_equalWildcardTypes
parameter_list|()
block|{
name|assertAssignable
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|List
argument_list|<
name|?
extends|extends
name|N1
argument_list|>
argument_list|>
argument_list|()
block|{}
operator|,
operator|new
name|TypeToken
argument_list|<
name|List
argument_list|<
name|?
extends|extends
name|N1
argument_list|>
argument_list|>
argument_list|()
block|{}
block|)
function|;
end_function

begin_expr_stmt
name|assertAssignable
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|List
argument_list|<
name|?
super|super
name|N1
argument_list|>
argument_list|>
argument_list|()
block|{}
end_expr_stmt

begin_operator
operator|,
end_operator

begin_expr_stmt
operator|new
name|TypeToken
argument_list|<
name|List
argument_list|<
name|?
super|super
name|N1
argument_list|>
argument_list|>
argument_list|()
block|{}
end_expr_stmt

begin_empty_stmt
unit|)
empty_stmt|;
end_empty_stmt

begin_expr_stmt
name|assertAssignable
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|List
argument_list|<
name|?
extends|extends
name|Number
argument_list|>
argument_list|>
argument_list|()
block|{}
end_expr_stmt

begin_operator
operator|,
end_operator

begin_expr_stmt
operator|new
name|TypeToken
argument_list|<
name|List
argument_list|<
name|?
extends|extends
name|Number
argument_list|>
argument_list|>
argument_list|()
block|{}
end_expr_stmt

begin_empty_stmt
unit|)
empty_stmt|;
end_empty_stmt

begin_expr_stmt
name|assertAssignable
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|List
argument_list|<
name|?
super|super
name|Number
argument_list|>
argument_list|>
argument_list|()
block|{}
end_expr_stmt

begin_operator
operator|,
end_operator

begin_expr_stmt
operator|new
name|TypeToken
argument_list|<
name|List
argument_list|<
name|?
super|super
name|Number
argument_list|>
argument_list|>
argument_list|()
block|{}
end_expr_stmt

begin_empty_stmt
unit|)
empty_stmt|;
end_empty_stmt

begin_function
unit|}    public
DECL|method|testisSupertypeOf_wildcard_noBound ()
parameter_list|<
name|N
parameter_list|>
name|void
name|testisSupertypeOf_wildcard_noBound
parameter_list|()
block|{
name|assertAssignable
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|List
argument_list|<
name|?
super|super
name|N
argument_list|>
argument_list|>
argument_list|()
block|{}
operator|,
operator|new
name|TypeToken
argument_list|<
name|List
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|()
block|{}
block|)
function|;
end_function

begin_expr_stmt
name|assertAssignable
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|List
argument_list|<
name|N
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|,
operator|new
name|TypeToken
argument_list|<
name|List
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|()
block|{}
end_expr_stmt

begin_empty_stmt
unit|)
empty_stmt|;
end_empty_stmt

begin_function
unit|}    public
parameter_list|<
name|N1
extends|extends
name|Number
parameter_list|,
name|N2
extends|extends
name|Number
parameter_list|,
name|N11
extends|extends
name|N1
parameter_list|>
DECL|method|testisSupertypeOf_wildcardType_upperBoundMatch ()
name|void
name|testisSupertypeOf_wildcardType_upperBoundMatch
parameter_list|()
block|{
comment|// ? extends T
name|assertAssignable
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|List
argument_list|<
name|N11
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|,
operator|new
name|TypeToken
argument_list|<
name|List
argument_list|<
name|?
extends|extends
name|N1
argument_list|>
argument_list|>
argument_list|()
block|{}
block|)
function|;
end_function

begin_expr_stmt
name|assertNotAssignable
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|List
argument_list|<
name|N1
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|,
operator|new
name|TypeToken
argument_list|<
name|List
argument_list|<
name|?
extends|extends
name|N11
argument_list|>
argument_list|>
argument_list|()
block|{}
end_expr_stmt

begin_empty_stmt
unit|)
empty_stmt|;
end_empty_stmt

begin_expr_stmt
name|assertNotAssignable
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|List
argument_list|<
name|Number
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|,
operator|new
name|TypeToken
argument_list|<
name|List
argument_list|<
name|?
extends|extends
name|N11
argument_list|>
argument_list|>
argument_list|()
block|{}
end_expr_stmt

begin_empty_stmt
unit|)
empty_stmt|;
end_empty_stmt

begin_comment
comment|// ? extends Number
end_comment

begin_expr_stmt
name|assertAssignable
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|List
argument_list|<
name|N1
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|,
operator|new
name|TypeToken
argument_list|<
name|List
argument_list|<
name|?
extends|extends
name|Number
argument_list|>
argument_list|>
argument_list|()
block|{}
end_expr_stmt

begin_empty_stmt
unit|)
empty_stmt|;
end_empty_stmt

begin_expr_stmt
name|assertAssignable
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|ArrayList
argument_list|<
name|N1
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|,
operator|new
name|TypeToken
argument_list|<
name|List
argument_list|<
name|?
extends|extends
name|Number
argument_list|>
argument_list|>
argument_list|()
block|{}
end_expr_stmt

begin_empty_stmt
unit|)
empty_stmt|;
end_empty_stmt

begin_expr_stmt
name|assertAssignable
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|List
argument_list|<
name|?
extends|extends
name|N11
argument_list|>
argument_list|>
argument_list|()
block|{}
end_expr_stmt

begin_operator
operator|,
end_operator

begin_expr_stmt
operator|new
name|TypeToken
argument_list|<
name|List
argument_list|<
name|?
extends|extends
name|Number
argument_list|>
argument_list|>
argument_list|()
block|{}
end_expr_stmt

begin_empty_stmt
unit|)
empty_stmt|;
end_empty_stmt

begin_function
unit|}    public
parameter_list|<
name|N1
extends|extends
name|Number
parameter_list|,
name|N2
extends|extends
name|Number
parameter_list|,
name|N11
extends|extends
name|N1
parameter_list|>
DECL|method|testisSupertypeOf_wildcardType_lowerBoundMatch ()
name|void
name|testisSupertypeOf_wildcardType_lowerBoundMatch
parameter_list|()
block|{
comment|// ? super T
name|assertAssignable
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|List
argument_list|<
name|N1
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|,
operator|new
name|TypeToken
argument_list|<
name|List
argument_list|<
name|?
super|super
name|N11
argument_list|>
argument_list|>
argument_list|()
block|{}
block|)
function|;
end_function

begin_expr_stmt
name|assertAssignable
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|ArrayList
argument_list|<
name|Number
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|,
operator|new
name|TypeToken
argument_list|<
name|List
argument_list|<
name|?
super|super
name|N1
argument_list|>
argument_list|>
argument_list|()
block|{}
end_expr_stmt

begin_empty_stmt
unit|)
empty_stmt|;
end_empty_stmt

begin_expr_stmt
name|assertNotAssignable
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|ArrayList
argument_list|<
name|?
super|super
name|N11
argument_list|>
argument_list|>
argument_list|()
block|{}
end_expr_stmt

begin_operator
operator|,
end_operator

begin_expr_stmt
operator|new
name|TypeToken
argument_list|<
name|List
argument_list|<
name|?
super|super
name|Number
argument_list|>
argument_list|>
argument_list|()
block|{}
end_expr_stmt

begin_empty_stmt
unit|)
empty_stmt|;
end_empty_stmt

begin_expr_stmt
name|assertAssignable
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|ArrayList
argument_list|<
name|?
super|super
name|N1
argument_list|>
argument_list|>
argument_list|()
block|{}
end_expr_stmt

begin_operator
operator|,
end_operator

begin_expr_stmt
operator|new
name|TypeToken
argument_list|<
name|List
argument_list|<
name|?
super|super
name|N11
argument_list|>
argument_list|>
argument_list|()
block|{}
end_expr_stmt

begin_empty_stmt
unit|)
empty_stmt|;
end_empty_stmt

begin_expr_stmt
name|assertAssignable
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|ArrayList
argument_list|<
name|?
super|super
name|Number
argument_list|>
argument_list|>
argument_list|()
block|{}
end_expr_stmt

begin_operator
operator|,
end_operator

begin_expr_stmt
operator|new
name|TypeToken
argument_list|<
name|List
argument_list|<
name|?
super|super
name|N11
argument_list|>
argument_list|>
argument_list|()
block|{}
end_expr_stmt

begin_empty_stmt
unit|)
empty_stmt|;
end_empty_stmt

begin_comment
comment|// ? super Number
end_comment

begin_expr_stmt
name|assertNotAssignable
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|ArrayList
argument_list|<
name|N11
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|,
operator|new
name|TypeToken
argument_list|<
name|List
argument_list|<
name|?
super|super
name|Number
argument_list|>
argument_list|>
argument_list|()
block|{}
end_expr_stmt

begin_empty_stmt
unit|)
empty_stmt|;
end_empty_stmt

begin_expr_stmt
name|assertAssignable
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|ArrayList
argument_list|<
name|Number
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|,
operator|new
name|TypeToken
argument_list|<
name|List
argument_list|<
name|?
super|super
name|Number
argument_list|>
argument_list|>
argument_list|()
block|{}
end_expr_stmt

begin_empty_stmt
unit|)
empty_stmt|;
end_empty_stmt

begin_expr_stmt
name|assertAssignable
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|,
operator|new
name|TypeToken
argument_list|<
name|List
argument_list|<
name|?
super|super
name|Number
argument_list|>
argument_list|>
argument_list|()
block|{}
end_expr_stmt

begin_empty_stmt
unit|)
empty_stmt|;
end_empty_stmt

begin_function
unit|}    public
parameter_list|<
name|L
extends|extends
name|List
argument_list|<
name|R
argument_list|>
parameter_list|,
name|R
extends|extends
name|List
argument_list|<
name|L
argument_list|>
parameter_list|>
DECL|method|testisSupertypeOf_recursiveTypeVariableBounds ()
name|void
name|testisSupertypeOf_recursiveTypeVariableBounds
parameter_list|()
block|{
name|assertAssignable
argument_list|(
name|TypeToken
operator|.
name|of
argument_list|(
operator|new
name|TypeCapture
argument_list|<
name|L
argument_list|>
argument_list|()
block|{}
operator|.
name|capture
argument_list|()
argument_list|)
argument_list|,
name|TypeToken
operator|.
name|of
argument_list|(
operator|new
name|TypeCapture
argument_list|<
name|L
argument_list|>
argument_list|()
block|{}
operator|.
name|capture
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotAssignable
argument_list|(
name|TypeToken
operator|.
name|of
argument_list|(
operator|new
name|TypeCapture
argument_list|<
name|R
argument_list|>
argument_list|()
block|{}
operator|.
name|capture
argument_list|()
argument_list|)
argument_list|,
name|TypeToken
operator|.
name|of
argument_list|(
operator|new
name|TypeCapture
argument_list|<
name|L
argument_list|>
argument_list|()
block|{}
operator|.
name|capture
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertAssignable
argument_list|(
name|TypeToken
operator|.
name|of
argument_list|(
operator|new
name|TypeCapture
argument_list|<
name|L
argument_list|>
argument_list|()
block|{}
operator|.
name|capture
argument_list|()
argument_list|)
argument_list|,
operator|new
name|TypeToken
argument_list|<
name|List
argument_list|<
name|R
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|testisSupertypeOf_resolved ()
specifier|public
name|void
name|testisSupertypeOf_resolved
parameter_list|()
block|{
name|assertFalse
argument_list|(
name|Assignability
operator|.
name|of
argument_list|()
operator|.
name|isAssignable
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|new
name|Assignability
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
argument_list|()
block|{}
operator|.
name|isAssignable
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|new
name|Assignability
argument_list|<
name|Integer
argument_list|,
name|Object
argument_list|>
argument_list|()
block|{}
operator|.
name|isAssignable
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
operator|new
name|Assignability
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
argument_list|()
block|{}
operator|.
name|isAssignable
argument_list|()
argument_list|)
expr_stmt|;
name|TypeTokenTest
operator|.
expr|<
name|Number
operator|,
name|Integer
operator|>
name|assignabilityTestWithTypeVariables
argument_list|()
expr_stmt|;
block|}
end_function

begin_function
specifier|public
parameter_list|<
name|From
extends|extends
name|String
operator|&
name|List
argument_list|<
name|?
extends|extends
name|String
argument_list|>
parameter_list|>
DECL|method|testMultipleTypeBoundsAssignability ()
name|void
name|testMultipleTypeBoundsAssignability
parameter_list|()
block|{
name|assertTrue
argument_list|(
operator|new
name|Assignability
argument_list|<
name|From
argument_list|,
name|String
argument_list|>
argument_list|()
block|{}
operator|.
name|isAssignable
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
operator|new
name|Assignability
argument_list|<
name|From
argument_list|,
name|Number
argument_list|>
argument_list|()
block|{}
operator|.
name|isAssignable
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|new
name|Assignability
argument_list|<
name|From
argument_list|,
name|Iterable
argument_list|<
name|?
extends|extends
name|CharSequence
argument_list|>
argument_list|>
argument_list|()
block|{}
operator|.
name|isAssignable
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
operator|new
name|Assignability
argument_list|<
name|From
argument_list|,
name|Iterable
argument_list|<
name|Object
argument_list|>
argument_list|>
argument_list|()
block|{}
operator|.
name|isAssignable
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|private
specifier|static
parameter_list|<
name|N1
extends|extends
name|Number
parameter_list|,
name|N11
extends|extends
name|N1
parameter_list|>
DECL|method|assignabilityTestWithTypeVariables ()
name|void
name|assignabilityTestWithTypeVariables
parameter_list|()
block|{
name|assertTrue
argument_list|(
operator|new
name|Assignability
argument_list|<
name|N11
argument_list|,
name|N1
argument_list|>
argument_list|()
block|{}
operator|.
name|isAssignable
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|new
name|Assignability
argument_list|<
name|N11
argument_list|,
name|Number
argument_list|>
argument_list|()
block|{}
operator|.
name|isAssignable
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
operator|new
name|Assignability
argument_list|<
name|Number
argument_list|,
name|N11
argument_list|>
argument_list|()
block|{}
operator|.
name|isAssignable
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|testIsArray_arrayClasses ()
specifier|public
name|void
name|testIsArray_arrayClasses
parameter_list|()
block|{
name|assertTrue
argument_list|(
name|TypeToken
operator|.
name|of
argument_list|(
name|Object
index|[]
operator|.
expr|class
argument_list|)
operator|.
name|isArray
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|TypeToken
operator|.
name|of
argument_list|(
name|Object
index|[]
index|[]
operator|.
expr|class
argument_list|)
operator|.
name|isArray
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|TypeToken
operator|.
name|of
argument_list|(
name|char
index|[]
operator|.
expr|class
argument_list|)
operator|.
name|isArray
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|TypeToken
operator|.
name|of
argument_list|(
name|char
index|[]
index|[]
operator|.
expr|class
argument_list|)
operator|.
name|isArray
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|TypeToken
operator|.
name|of
argument_list|(
name|byte
index|[]
operator|.
expr|class
argument_list|)
operator|.
name|isArray
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|TypeToken
operator|.
name|of
argument_list|(
name|short
index|[]
operator|.
expr|class
argument_list|)
operator|.
name|isArray
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|TypeToken
operator|.
name|of
argument_list|(
name|int
index|[]
operator|.
expr|class
argument_list|)
operator|.
name|isArray
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|TypeToken
operator|.
name|of
argument_list|(
name|long
index|[]
operator|.
expr|class
argument_list|)
operator|.
name|isArray
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|TypeToken
operator|.
name|of
argument_list|(
name|float
index|[]
operator|.
expr|class
argument_list|)
operator|.
name|isArray
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|TypeToken
operator|.
name|of
argument_list|(
name|double
index|[]
operator|.
expr|class
argument_list|)
operator|.
name|isArray
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|TypeToken
operator|.
name|of
argument_list|(
name|Object
operator|.
name|class
argument_list|)
operator|.
name|isArray
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|TypeToken
operator|.
name|of
argument_list|(
name|void
operator|.
name|class
argument_list|)
operator|.
name|isArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|testIsArray_genericArrayClasses ()
specifier|public
parameter_list|<
name|T
parameter_list|>
name|void
name|testIsArray_genericArrayClasses
parameter_list|()
block|{
name|assertFalse
argument_list|(
name|TypeToken
operator|.
name|of
argument_list|(
operator|new
name|TypeCapture
argument_list|<
name|T
argument_list|>
argument_list|()
block|{}
operator|.
name|capture
argument_list|()
argument_list|)
operator|.
name|isArray
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|T
index|[]
argument_list|>
argument_list|()
block|{}
operator|.
name|isArray
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|T
index|[]
index|[]
argument_list|>
argument_list|()
block|{}
operator|.
name|isArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|testIsArray_wildcardType ()
specifier|public
name|void
name|testIsArray_wildcardType
parameter_list|()
block|{
name|assertTrue
argument_list|(
name|TypeToken
operator|.
name|of
argument_list|(
name|Types
operator|.
name|subtypeOf
argument_list|(
name|Object
index|[]
operator|.
expr|class
argument_list|)
argument_list|)
operator|.
name|isArray
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|TypeToken
operator|.
name|of
argument_list|(
name|Types
operator|.
name|subtypeOf
argument_list|(
name|int
index|[]
operator|.
expr|class
argument_list|)
argument_list|)
operator|.
name|isArray
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|TypeToken
operator|.
name|of
argument_list|(
name|Types
operator|.
name|subtypeOf
argument_list|(
name|Object
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|isArray
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|TypeToken
operator|.
name|of
argument_list|(
name|Types
operator|.
name|supertypeOf
argument_list|(
name|Object
index|[]
operator|.
expr|class
argument_list|)
argument_list|)
operator|.
name|isArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|testPrimitiveWrappingAndUnwrapping ()
specifier|public
parameter_list|<
name|T
extends|extends
name|Integer
parameter_list|>
name|void
name|testPrimitiveWrappingAndUnwrapping
parameter_list|()
block|{
for|for
control|(
name|Class
argument_list|<
name|?
argument_list|>
name|type
range|:
name|Primitives
operator|.
name|allPrimitiveTypes
argument_list|()
control|)
block|{
name|assertIsPrimitive
argument_list|(
name|TypeToken
operator|.
name|of
argument_list|(
name|type
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Class
argument_list|<
name|?
argument_list|>
name|type
range|:
name|Primitives
operator|.
name|allWrapperTypes
argument_list|()
control|)
block|{
name|assertIsWrapper
argument_list|(
name|TypeToken
operator|.
name|of
argument_list|(
name|type
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertNotPrimitiveNorWrapper
argument_list|(
name|TypeToken
operator|.
name|of
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotPrimitiveNorWrapper
argument_list|(
name|TypeToken
operator|.
name|of
argument_list|(
name|Object
index|[]
operator|.
expr|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotPrimitiveNorWrapper
argument_list|(
name|TypeToken
operator|.
name|of
argument_list|(
name|Types
operator|.
name|subtypeOf
argument_list|(
name|Object
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotPrimitiveNorWrapper
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|)
expr_stmt|;
name|assertNotPrimitiveNorWrapper
argument_list|(
name|TypeToken
operator|.
name|of
argument_list|(
operator|new
name|TypeCapture
argument_list|<
name|T
argument_list|>
argument_list|()
block|{}
operator|.
name|capture
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|testGetComponentType_arrayClasses ()
specifier|public
name|void
name|testGetComponentType_arrayClasses
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|Object
operator|.
name|class
argument_list|,
name|TypeToken
operator|.
name|of
argument_list|(
name|Object
index|[]
operator|.
expr|class
argument_list|)
operator|.
name|getComponentType
argument_list|()
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Object
index|[]
operator|.
expr|class
argument_list|,
name|TypeToken
operator|.
name|of
argument_list|(
name|Object
index|[]
index|[]
operator|.
expr|class
argument_list|)
operator|.
name|getComponentType
argument_list|()
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|char
operator|.
name|class
argument_list|,
name|TypeToken
operator|.
name|of
argument_list|(
name|char
index|[]
operator|.
expr|class
argument_list|)
operator|.
name|getComponentType
argument_list|()
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|char
index|[]
operator|.
expr|class
argument_list|,
name|TypeToken
operator|.
name|of
argument_list|(
name|char
index|[]
index|[]
operator|.
expr|class
argument_list|)
operator|.
name|getComponentType
argument_list|()
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|byte
operator|.
name|class
argument_list|,
name|TypeToken
operator|.
name|of
argument_list|(
name|byte
index|[]
operator|.
expr|class
argument_list|)
operator|.
name|getComponentType
argument_list|()
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|short
operator|.
name|class
argument_list|,
name|TypeToken
operator|.
name|of
argument_list|(
name|short
index|[]
operator|.
expr|class
argument_list|)
operator|.
name|getComponentType
argument_list|()
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|int
operator|.
name|class
argument_list|,
name|TypeToken
operator|.
name|of
argument_list|(
name|int
index|[]
operator|.
expr|class
argument_list|)
operator|.
name|getComponentType
argument_list|()
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|long
operator|.
name|class
argument_list|,
name|TypeToken
operator|.
name|of
argument_list|(
name|long
index|[]
operator|.
expr|class
argument_list|)
operator|.
name|getComponentType
argument_list|()
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|float
operator|.
name|class
argument_list|,
name|TypeToken
operator|.
name|of
argument_list|(
name|float
index|[]
operator|.
expr|class
argument_list|)
operator|.
name|getComponentType
argument_list|()
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|double
operator|.
name|class
argument_list|,
name|TypeToken
operator|.
name|of
argument_list|(
name|double
index|[]
operator|.
expr|class
argument_list|)
operator|.
name|getComponentType
argument_list|()
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|TypeToken
operator|.
name|of
argument_list|(
name|Object
operator|.
name|class
argument_list|)
operator|.
name|getComponentType
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|TypeToken
operator|.
name|of
argument_list|(
name|void
operator|.
name|class
argument_list|)
operator|.
name|getComponentType
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|testGetComponentType_genericArrayClasses ()
specifier|public
parameter_list|<
name|T
parameter_list|>
name|void
name|testGetComponentType_genericArrayClasses
parameter_list|()
block|{
name|assertNull
argument_list|(
name|TypeToken
operator|.
name|of
argument_list|(
operator|new
name|TypeCapture
argument_list|<
name|T
argument_list|>
argument_list|()
block|{}
operator|.
name|capture
argument_list|()
argument_list|)
operator|.
name|getComponentType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|TypeToken
operator|.
name|of
argument_list|(
operator|new
name|TypeCapture
argument_list|<
name|T
argument_list|>
argument_list|()
block|{}
operator|.
name|capture
argument_list|()
argument_list|)
argument_list|,
operator|new
name|TypeToken
argument_list|<
name|T
index|[]
argument_list|>
argument_list|()
block|{}
operator|.
name|getComponentType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|T
index|[]
argument_list|>
argument_list|()
block|{}
argument_list|,
operator|new
name|TypeToken
argument_list|<
name|T
index|[]
index|[]
argument_list|>
argument_list|()
block|{}
operator|.
name|getComponentType
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|testGetComponentType_wildcardType ()
specifier|public
name|void
name|testGetComponentType_wildcardType
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|Types
operator|.
name|subtypeOf
argument_list|(
name|Object
operator|.
name|class
argument_list|)
argument_list|,
name|TypeToken
operator|.
name|of
argument_list|(
name|Types
operator|.
name|subtypeOf
argument_list|(
name|Object
index|[]
operator|.
expr|class
argument_list|)
argument_list|)
operator|.
name|getComponentType
argument_list|()
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Types
operator|.
name|subtypeOf
argument_list|(
name|Object
index|[]
operator|.
expr|class
argument_list|)
argument_list|,
name|Types
operator|.
name|newArrayType
argument_list|(
name|TypeToken
operator|.
name|of
argument_list|(
name|Types
operator|.
name|subtypeOf
argument_list|(
name|Object
index|[]
operator|.
expr|class
argument_list|)
argument_list|)
operator|.
name|getComponentType
argument_list|()
operator|.
name|getType
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|int
operator|.
name|class
argument_list|,
name|TypeToken
operator|.
name|of
argument_list|(
name|Types
operator|.
name|subtypeOf
argument_list|(
name|int
index|[]
operator|.
expr|class
argument_list|)
argument_list|)
operator|.
name|getComponentType
argument_list|()
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|TypeToken
operator|.
name|of
argument_list|(
name|Types
operator|.
name|subtypeOf
argument_list|(
name|Object
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|getComponentType
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|TypeToken
operator|.
name|of
argument_list|(
name|Types
operator|.
name|supertypeOf
argument_list|(
name|Object
index|[]
operator|.
expr|class
argument_list|)
argument_list|)
operator|.
name|getComponentType
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function

begin_interface
DECL|interface|NumberList
specifier|private
interface|interface
name|NumberList
parameter_list|<
name|T
extends|extends
name|Number
parameter_list|>
block|{}
end_interface

begin_function
DECL|method|testImplicitUpperBoundForWildcards ()
specifier|public
name|void
name|testImplicitUpperBoundForWildcards
parameter_list|()
block|{
name|assertAssignable
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|NumberList
argument_list|<
name|?
extends|extends
name|Number
argument_list|>
argument_list|>
argument_list|()
block|{}
operator|,
operator|new
name|TypeToken
argument_list|<
name|NumberList
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|()
block|{}
block|)
function|;
end_function

begin_expr_stmt
name|assertAssignable
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|NumberList
argument_list|<
name|?
super|super
name|Integer
argument_list|>
argument_list|>
argument_list|()
block|{}
end_expr_stmt

begin_operator
operator|,
end_operator

begin_expr_stmt
operator|new
name|TypeToken
argument_list|<
name|NumberList
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|()
block|{}
end_expr_stmt

begin_empty_stmt
unit|)
empty_stmt|;
end_empty_stmt

begin_function
unit|}    public
DECL|method|testMultiBound ()
parameter_list|<
name|T
extends|extends
name|Readable
operator|&
name|Appendable
parameter_list|>
name|void
name|testMultiBound
parameter_list|()
block|{
name|assertAssignable
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|List
argument_list|<
name|T
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|,
operator|new
name|TypeToken
argument_list|<
name|List
argument_list|<
name|?
extends|extends
name|Readable
argument_list|>
argument_list|>
argument_list|()
block|{}
block|)
function|;
end_function

begin_expr_stmt
name|assertAssignable
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|List
argument_list|<
name|T
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|,
operator|new
name|TypeToken
argument_list|<
name|List
argument_list|<
name|?
extends|extends
name|Appendable
argument_list|>
argument_list|>
argument_list|()
block|{}
end_expr_stmt

begin_empty_stmt
unit|)
empty_stmt|;
end_empty_stmt

begin_function
unit|}    public
DECL|method|testToGenericType ()
name|void
name|testToGenericType
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|TypeToken
operator|.
name|of
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|,
name|TypeToken
operator|.
name|toGenericType
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|int
index|[]
argument_list|>
argument_list|()
block|{}
argument_list|,
name|TypeToken
operator|.
name|toGenericType
argument_list|(
name|int
index|[]
operator|.
expr|class
argument_list|)
argument_list|)
expr_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
comment|// Iterable.class
name|TypeToken
argument_list|<
name|?
extends|extends
name|Iterable
argument_list|>
name|genericType
init|=
name|TypeToken
operator|.
name|toGenericType
argument_list|(
name|Iterable
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Iterable
operator|.
name|class
argument_list|,
name|genericType
operator|.
name|getRawType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Types
operator|.
name|newParameterizedType
argument_list|(
name|Iterable
operator|.
name|class
argument_list|,
name|Iterable
operator|.
name|class
operator|.
name|getTypeParameters
argument_list|()
index|[
literal|0
index|]
argument_list|)
argument_list|,
name|genericType
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function

begin_interface
DECL|interface|ListIterable
specifier|private
interface|interface
name|ListIterable
parameter_list|<
name|T
parameter_list|>
extends|extends
name|Iterable
argument_list|<
name|List
argument_list|<
name|T
argument_list|>
argument_list|>
block|{}
end_interface

begin_interface
DECL|interface|StringListIterable
specifier|private
interface|interface
name|StringListIterable
extends|extends
name|ListIterable
argument_list|<
name|String
argument_list|>
block|{}
end_interface

begin_interface
DECL|interface|ListArrayIterable
specifier|private
interface|interface
name|ListArrayIterable
parameter_list|<
name|T
parameter_list|>
extends|extends
name|Iterable
argument_list|<
name|List
argument_list|<
name|T
argument_list|>
index|[]
argument_list|>
block|{}
end_interface

begin_interface
DECL|interface|StringListArrayIterable
specifier|private
interface|interface
name|StringListArrayIterable
extends|extends
name|ListIterable
argument_list|<
name|String
argument_list|>
block|{}
end_interface

begin_function
DECL|method|testGetSupertype_withTypeVariable ()
specifier|public
name|void
name|testGetSupertype_withTypeVariable
parameter_list|()
block|{
name|ParameterizedType
name|expectedType
init|=
name|Types
operator|.
name|newParameterizedType
argument_list|(
name|Iterable
operator|.
name|class
argument_list|,
name|Types
operator|.
name|newParameterizedType
argument_list|(
name|List
operator|.
name|class
argument_list|,
name|ListIterable
operator|.
name|class
operator|.
name|getTypeParameters
argument_list|()
index|[
literal|0
index|]
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedType
argument_list|,
name|TypeToken
operator|.
name|of
argument_list|(
name|ListIterable
operator|.
name|class
argument_list|)
operator|.
name|getSupertype
argument_list|(
name|Iterable
operator|.
name|class
argument_list|)
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|public
parameter_list|<
name|A
parameter_list|,
name|T
extends|extends
name|Number
operator|&
name|Iterable
argument_list|<
name|A
argument_list|>
parameter_list|>
DECL|method|testGetSupertype_typeVariableWithMultipleBounds ()
name|void
name|testGetSupertype_typeVariableWithMultipleBounds
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|Number
operator|.
name|class
argument_list|,
operator|new
name|TypeToken
argument_list|<
name|T
argument_list|>
argument_list|(
name|getClass
argument_list|()
argument_list|)
block|{}
operator|.
name|getSupertype
argument_list|(
name|Number
operator|.
name|class
argument_list|)
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|Iterable
argument_list|<
name|A
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|,
operator|new
name|TypeToken
argument_list|<
name|T
argument_list|>
argument_list|(
name|getClass
argument_list|()
argument_list|)
block|{}
operator|.
name|getSupertype
argument_list|(
name|Iterable
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|testGetSupertype_withoutTypeVariable ()
specifier|public
name|void
name|testGetSupertype_withoutTypeVariable
parameter_list|()
block|{
name|ParameterizedType
name|expectedType
init|=
name|Types
operator|.
name|newParameterizedType
argument_list|(
name|Iterable
operator|.
name|class
argument_list|,
name|Types
operator|.
name|newParameterizedType
argument_list|(
name|List
operator|.
name|class
argument_list|,
name|String
operator|.
name|class
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedType
argument_list|,
name|TypeToken
operator|.
name|of
argument_list|(
name|StringListIterable
operator|.
name|class
argument_list|)
operator|.
name|getSupertype
argument_list|(
name|Iterable
operator|.
name|class
argument_list|)
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|testGetSupertype_chained ()
specifier|public
name|void
name|testGetSupertype_chained
parameter_list|()
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// StringListIterable extensd ListIterable<String>
name|TypeToken
argument_list|<
name|ListIterable
argument_list|<
name|String
argument_list|>
argument_list|>
name|listIterableType
init|=
operator|(
name|TypeToken
argument_list|<
name|ListIterable
argument_list|<
name|String
argument_list|>
argument_list|>
operator|)
name|TypeToken
operator|.
name|of
argument_list|(
name|StringListIterable
operator|.
name|class
argument_list|)
operator|.
name|getSupertype
argument_list|(
name|ListIterable
operator|.
name|class
argument_list|)
decl_stmt|;
name|ParameterizedType
name|expectedType
init|=
name|Types
operator|.
name|newParameterizedType
argument_list|(
name|Iterable
operator|.
name|class
argument_list|,
name|Types
operator|.
name|newParameterizedType
argument_list|(
name|List
operator|.
name|class
argument_list|,
name|String
operator|.
name|class
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedType
argument_list|,
name|listIterableType
operator|.
name|getSupertype
argument_list|(
name|Iterable
operator|.
name|class
argument_list|)
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|testGetSupertype_withArray ()
specifier|public
name|void
name|testGetSupertype_withArray
parameter_list|()
block|{
name|assertEquals
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|Iterable
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
index|[]
argument_list|>
argument_list|()
block|{}
argument_list|,
name|TypeToken
operator|.
name|of
argument_list|(
name|StringListIterable
index|[]
operator|.
expr|class
argument_list|)
operator|.
name|getSupertype
argument_list|(
name|Iterable
index|[]
operator|.
expr|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|int
index|[]
operator|.
expr|class
argument_list|,
name|TypeToken
operator|.
name|of
argument_list|(
name|int
index|[]
operator|.
expr|class
argument_list|)
operator|.
name|getSupertype
argument_list|(
name|int
index|[]
operator|.
expr|class
argument_list|)
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Object
operator|.
name|class
argument_list|,
name|TypeToken
operator|.
name|of
argument_list|(
name|int
index|[]
operator|.
expr|class
argument_list|)
operator|.
name|getSupertype
argument_list|(
name|Object
operator|.
name|class
argument_list|)
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|int
index|[]
index|[]
operator|.
expr|class
argument_list|,
name|TypeToken
operator|.
name|of
argument_list|(
name|int
index|[]
index|[]
operator|.
expr|class
argument_list|)
operator|.
name|getSupertype
argument_list|(
name|int
index|[]
index|[]
operator|.
expr|class
argument_list|)
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Object
index|[]
operator|.
expr|class
argument_list|,
name|TypeToken
operator|.
name|of
argument_list|(
name|String
index|[]
operator|.
expr|class
argument_list|)
operator|.
name|getSupertype
argument_list|(
name|Object
index|[]
operator|.
expr|class
argument_list|)
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Object
operator|.
name|class
argument_list|,
name|TypeToken
operator|.
name|of
argument_list|(
name|String
index|[]
operator|.
expr|class
argument_list|)
operator|.
name|getSupertype
argument_list|(
name|Object
operator|.
name|class
argument_list|)
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|testGetSupertype_fromWildcard ()
specifier|public
name|void
name|testGetSupertype_fromWildcard
parameter_list|()
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// can't do new TypeToken<? extends ...>() {}
name|TypeToken
argument_list|<
name|?
extends|extends
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|type
init|=
operator|(
name|TypeToken
argument_list|<
name|?
extends|extends
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
operator|)
name|TypeToken
operator|.
name|of
argument_list|(
name|Types
operator|.
name|subtypeOf
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
block|{}
operator|.
name|getType
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|Iterable
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|,
name|type
operator|.
name|getSupertype
argument_list|(
name|Iterable
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|testGetSupertype_fromTypeVariable ()
specifier|public
parameter_list|<
name|T
extends|extends
name|Iterable
argument_list|<
name|String
argument_list|>
parameter_list|>
name|void
name|testGetSupertype_fromTypeVariable
parameter_list|()
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// to construct TypeToken<T> from TypeToken.of()
name|TypeToken
argument_list|<
name|T
argument_list|>
name|typeVariableToken
init|=
operator|(
name|TypeToken
argument_list|<
name|T
argument_list|>
operator|)
name|TypeToken
operator|.
name|of
argument_list|(
operator|new
name|TypeCapture
argument_list|<
name|T
argument_list|>
argument_list|()
block|{}
operator|.
name|capture
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|Iterable
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|,
name|typeVariableToken
operator|.
name|getSupertype
argument_list|(
name|Iterable
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
comment|// purpose is to test raw type
DECL|method|testGetSupertype_fromRawClass ()
specifier|public
name|void
name|testGetSupertype_fromRawClass
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|Types
operator|.
name|newParameterizedType
argument_list|(
name|Iterable
operator|.
name|class
argument_list|,
name|List
operator|.
name|class
operator|.
name|getTypeParameters
argument_list|()
index|[
literal|0
index|]
argument_list|)
argument_list|,
operator|new
name|TypeToken
argument_list|<
name|List
argument_list|>
argument_list|()
block|{}
operator|.
name|getSupertype
argument_list|(
name|Iterable
operator|.
name|class
argument_list|)
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"rawtypes"
block|,
literal|"unchecked"
block|}
argument_list|)
comment|// purpose is to test raw type
DECL|method|testGetSupertype_notSupertype ()
specifier|public
name|void
name|testGetSupertype_notSupertype
parameter_list|()
block|{
try|try
block|{
operator|new
name|TypeToken
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
block|{}
operator|.
name|getSupertype
argument_list|(
operator|(
name|Class
operator|)
name|String
operator|.
name|class
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{}
block|}
end_function

begin_function
DECL|method|testGetSupertype_fromArray ()
specifier|public
name|void
name|testGetSupertype_fromArray
parameter_list|()
block|{
name|assertEquals
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|Iterable
argument_list|<
name|String
argument_list|>
index|[]
argument_list|>
argument_list|()
block|{}
argument_list|,
operator|new
name|TypeToken
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
index|[]
argument_list|>
argument_list|()
block|{}
operator|.
name|getSupertype
argument_list|(
name|Iterable
index|[]
operator|.
expr|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_interface
DECL|interface|ListMap
specifier|private
interface|interface
name|ListMap
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
extends|extends
name|Map
argument_list|<
name|K
argument_list|,
name|List
argument_list|<
name|V
argument_list|>
argument_list|>
block|{}
end_interface

begin_function
DECL|method|testGetSupertype_fullyGenericType ()
specifier|public
name|void
name|testGetSupertype_fullyGenericType
parameter_list|()
block|{
name|ParameterizedType
name|expectedType
init|=
name|Types
operator|.
name|newParameterizedType
argument_list|(
name|Map
operator|.
name|class
argument_list|,
name|ListMap
operator|.
name|class
operator|.
name|getTypeParameters
argument_list|()
index|[
literal|0
index|]
argument_list|,
name|Types
operator|.
name|newParameterizedType
argument_list|(
name|List
operator|.
name|class
argument_list|,
name|ListMap
operator|.
name|class
operator|.
name|getTypeParameters
argument_list|()
index|[
literal|1
index|]
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedType
argument_list|,
name|TypeToken
operator|.
name|of
argument_list|(
name|ListMap
operator|.
name|class
argument_list|)
operator|.
name|getSupertype
argument_list|(
name|Map
operator|.
name|class
argument_list|)
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|testGetSupertype_fullySpecializedType ()
specifier|public
name|void
name|testGetSupertype_fullySpecializedType
parameter_list|()
block|{
name|Type
name|expectedType
init|=
operator|new
name|TypeToken
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|Object
argument_list|>
argument_list|>
argument_list|>
argument_list|()
block|{}
operator|.
name|getType
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedType
argument_list|,
operator|new
name|TypeToken
argument_list|<
name|ListMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
argument_list|()
block|{}
operator|.
name|getSupertype
argument_list|(
name|Map
operator|.
name|class
argument_list|)
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function

begin_interface
DECL|interface|StringListMap
specifier|private
interface|interface
name|StringListMap
parameter_list|<
name|V
parameter_list|>
extends|extends
name|ListMap
argument_list|<
name|String
argument_list|,
name|V
argument_list|>
block|{}
end_interface

begin_function
DECL|method|testGetSupertype_partiallySpecializedType ()
specifier|public
parameter_list|<
name|V
parameter_list|>
name|void
name|testGetSupertype_partiallySpecializedType
parameter_list|()
block|{
name|Type
name|expectedType
init|=
operator|new
name|TypeToken
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|V
argument_list|>
argument_list|>
argument_list|>
argument_list|()
block|{}
operator|.
name|getType
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedType
argument_list|,
operator|new
name|TypeToken
argument_list|<
name|StringListMap
argument_list|<
name|V
argument_list|>
argument_list|>
argument_list|()
block|{}
operator|.
name|getSupertype
argument_list|(
name|Map
operator|.
name|class
argument_list|)
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|testGetSubtype_withTypeVariable ()
specifier|public
name|void
name|testGetSubtype_withTypeVariable
parameter_list|()
block|{
name|assertEquals
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|ListIterable
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|,
operator|new
name|TypeToken
argument_list|<
name|Iterable
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|>
argument_list|()
block|{}
operator|.
name|getSubtype
argument_list|(
name|ListIterable
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|ListArrayIterable
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|,
operator|new
name|TypeToken
argument_list|<
name|Iterable
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
index|[]
argument_list|>
argument_list|>
argument_list|()
block|{}
operator|.
name|getSubtype
argument_list|(
name|ListArrayIterable
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|ListArrayIterable
argument_list|<
name|String
argument_list|>
index|[]
argument_list|>
argument_list|()
block|{}
argument_list|,
operator|new
name|TypeToken
argument_list|<
name|Iterable
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
index|[]
argument_list|>
index|[]
argument_list|>
argument_list|()
block|{}
operator|.
name|getSubtype
argument_list|(
name|ListArrayIterable
index|[]
operator|.
expr|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|testGetSubtype_withoutTypeVariable ()
specifier|public
name|void
name|testGetSubtype_withoutTypeVariable
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|StringListIterable
operator|.
name|class
argument_list|,
name|TypeToken
operator|.
name|of
argument_list|(
name|Iterable
operator|.
name|class
argument_list|)
operator|.
name|getSubtype
argument_list|(
name|StringListIterable
operator|.
name|class
argument_list|)
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|StringListIterable
index|[]
operator|.
expr|class
argument_list|,
name|TypeToken
operator|.
name|of
argument_list|(
name|Iterable
index|[]
operator|.
expr|class
argument_list|)
operator|.
name|getSubtype
argument_list|(
name|StringListIterable
index|[]
operator|.
expr|class
argument_list|)
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|TypeToken
operator|.
name|of
argument_list|(
name|StringListArrayIterable
operator|.
name|class
argument_list|)
argument_list|,
operator|new
name|TypeToken
argument_list|<
name|Iterable
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|>
argument_list|()
block|{}
operator|.
name|getSubtype
argument_list|(
name|StringListArrayIterable
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|TypeToken
operator|.
name|of
argument_list|(
name|StringListArrayIterable
index|[]
operator|.
expr|class
argument_list|)
argument_list|,
operator|new
name|TypeToken
argument_list|<
name|Iterable
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
index|[]
argument_list|>
argument_list|()
block|{}
operator|.
name|getSubtype
argument_list|(
name|StringListArrayIterable
index|[]
operator|.
expr|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|testGetSubtype_withArray ()
specifier|public
name|void
name|testGetSubtype_withArray
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|TypeToken
operator|.
name|of
argument_list|(
name|StringListIterable
index|[]
operator|.
expr|class
argument_list|)
argument_list|,
name|TypeToken
operator|.
name|of
argument_list|(
name|Iterable
index|[]
operator|.
expr|class
argument_list|)
operator|.
name|getSubtype
argument_list|(
name|StringListIterable
index|[]
operator|.
expr|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|TypeToken
operator|.
name|of
argument_list|(
name|String
index|[]
operator|.
expr|class
argument_list|)
argument_list|,
name|TypeToken
operator|.
name|of
argument_list|(
name|Object
index|[]
operator|.
expr|class
argument_list|)
operator|.
name|getSubtype
argument_list|(
name|String
index|[]
operator|.
expr|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|TypeToken
operator|.
name|of
argument_list|(
name|int
index|[]
operator|.
expr|class
argument_list|)
argument_list|,
name|TypeToken
operator|.
name|of
argument_list|(
name|Object
operator|.
name|class
argument_list|)
operator|.
name|getSubtype
argument_list|(
name|int
index|[]
operator|.
expr|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|testGetSubtype_fromWildcard ()
specifier|public
name|void
name|testGetSubtype_fromWildcard
parameter_list|()
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// can't do new TypeToken<? extends ...>() {}
name|TypeToken
argument_list|<
name|?
super|super
name|Iterable
argument_list|<
name|String
argument_list|>
argument_list|>
name|type
init|=
operator|(
name|TypeToken
argument_list|<
name|?
super|super
name|Iterable
argument_list|<
name|String
argument_list|>
argument_list|>
operator|)
name|TypeToken
operator|.
name|of
argument_list|(
name|Types
operator|.
name|supertypeOf
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|Iterable
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
block|{}
operator|.
name|getType
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|,
name|type
operator|.
name|getSubtype
argument_list|(
name|List
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|testGetSubtype_fromWildcard_lowerBoundNotSupertype ()
specifier|public
name|void
name|testGetSubtype_fromWildcard_lowerBoundNotSupertype
parameter_list|()
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// can't do new TypeToken<? extends ...>() {}
name|TypeToken
argument_list|<
name|?
super|super
name|Iterable
argument_list|<
name|String
argument_list|>
argument_list|>
name|type
init|=
operator|(
name|TypeToken
argument_list|<
name|?
super|super
name|Iterable
argument_list|<
name|String
argument_list|>
argument_list|>
operator|)
name|TypeToken
operator|.
name|of
argument_list|(
name|Types
operator|.
name|supertypeOf
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|ImmutableList
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
block|{}
operator|.
name|getType
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|type
operator|.
name|getSubtype
argument_list|(
name|List
operator|.
name|class
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{}
block|}
end_function

begin_function
DECL|method|testGetSubtype_fromWildcard_upperBounded ()
specifier|public
name|void
name|testGetSubtype_fromWildcard_upperBounded
parameter_list|()
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// can't do new TypeToken<? extends ...>() {}
name|TypeToken
argument_list|<
name|?
extends|extends
name|Iterable
argument_list|<
name|String
argument_list|>
argument_list|>
name|type
init|=
operator|(
name|TypeToken
argument_list|<
name|?
extends|extends
name|Iterable
argument_list|<
name|String
argument_list|>
argument_list|>
operator|)
name|TypeToken
operator|.
name|of
argument_list|(
name|Types
operator|.
name|subtypeOf
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|Iterable
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
block|{}
operator|.
name|getType
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|type
operator|.
name|getSubtype
argument_list|(
name|Iterable
operator|.
name|class
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{}
block|}
end_function

begin_function
DECL|method|testGetSubtype_fromTypeVariable ()
specifier|public
parameter_list|<
name|T
extends|extends
name|Iterable
argument_list|<
name|String
argument_list|>
parameter_list|>
name|void
name|testGetSubtype_fromTypeVariable
parameter_list|()
block|{
try|try
block|{
name|TypeToken
operator|.
name|of
argument_list|(
operator|new
name|TypeCapture
argument_list|<
name|T
argument_list|>
argument_list|()
block|{}
operator|.
name|capture
argument_list|()
argument_list|)
operator|.
name|getSubtype
argument_list|(
name|List
operator|.
name|class
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{}
block|}
end_function

begin_function
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
comment|// purpose is to test raw type
DECL|method|testGetSubtype_fromRawClass ()
specifier|public
name|void
name|testGetSubtype_fromRawClass
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|List
operator|.
name|class
argument_list|,
operator|new
name|TypeToken
argument_list|<
name|Iterable
argument_list|>
argument_list|()
block|{}
operator|.
name|getSubtype
argument_list|(
name|List
operator|.
name|class
argument_list|)
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|testGetSubtype_fromArray ()
specifier|public
name|void
name|testGetSubtype_fromArray
parameter_list|()
block|{
name|assertEquals
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
index|[]
argument_list|>
argument_list|()
block|{}
argument_list|,
operator|new
name|TypeToken
argument_list|<
name|Iterable
argument_list|<
name|String
argument_list|>
index|[]
argument_list|>
argument_list|()
block|{}
operator|.
name|getSubtype
argument_list|(
name|List
index|[]
operator|.
expr|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|testGetSubtype_toWildcard ()
specifier|public
name|void
name|testGetSubtype_toWildcard
parameter_list|()
block|{
class|class
name|TwoTypeArgs
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
block|{}
class|class
name|StringForFirstTypeArg
parameter_list|<
name|V
parameter_list|>
extends|extends
name|TwoTypeArgs
argument_list|<
name|String
argument_list|,
name|V
argument_list|>
block|{}
name|TypeToken
argument_list|<
name|TwoTypeArgs
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
argument_list|>
name|superType
init|=
operator|new
name|TypeToken
argument_list|<
name|TwoTypeArgs
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
argument_list|>
argument_list|()
block|{}
empty_stmt|;
name|TypeToken
argument_list|<
name|StringForFirstTypeArg
argument_list|<
name|String
argument_list|>
argument_list|>
name|subType
init|=
operator|new
name|TypeToken
argument_list|<
name|StringForFirstTypeArg
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
block|{}
decl_stmt|;
name|assertTrue
argument_list|(
name|subType
operator|.
name|isSubtypeOf
argument_list|(
name|superType
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|StringForFirstTypeArg
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|()
block|{}
operator|,
name|superType
operator|.
name|getSubtype
argument_list|(
name|subType
operator|.
name|getRawType
argument_list|()
argument_list|)
block|)
function|;
end_function

begin_class
unit|}    private
DECL|class|TwoTypeArgs
specifier|static
class|class
name|TwoTypeArgs
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
block|{
DECL|class|InnerType
class|class
name|InnerType
parameter_list|<
name|K2
parameter_list|,
name|V2
parameter_list|>
block|{}
block|}
end_class

begin_class
DECL|class|StringForFirstTypeArg
specifier|private
specifier|static
class|class
name|StringForFirstTypeArg
parameter_list|<
name|V
parameter_list|>
extends|extends
name|TwoTypeArgs
argument_list|<
name|String
argument_list|,
name|V
argument_list|>
block|{
DECL|class|StringInnerType
class|class
name|StringInnerType
parameter_list|<
name|V2
parameter_list|>
extends|extends
name|InnerType
argument_list|<
name|String
argument_list|,
name|V2
argument_list|>
block|{}
block|}
end_class

begin_function
DECL|method|testGetSubtype_innerTypeOfGenericClassTranslatesOwnerTypeVars ()
specifier|public
name|void
name|testGetSubtype_innerTypeOfGenericClassTranslatesOwnerTypeVars
parameter_list|()
block|{
name|TypeToken
argument_list|<
name|TwoTypeArgs
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|.
name|InnerType
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
argument_list|>
name|superType
init|=
operator|new
name|TypeToken
argument_list|<
name|TwoTypeArgs
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|.
name|InnerType
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
argument_list|>
argument_list|()
block|{}
empty_stmt|;
name|TypeToken
argument_list|<
name|StringForFirstTypeArg
argument_list|<
name|Integer
argument_list|>
operator|.
name|StringInnerType
argument_list|<
name|Long
argument_list|>
argument_list|>
name|subType
init|=
operator|new
name|TypeToken
argument_list|<
name|StringForFirstTypeArg
argument_list|<
name|Integer
argument_list|>
operator|.
name|StringInnerType
argument_list|<
name|Long
argument_list|>
argument_list|>
argument_list|()
block|{}
decl_stmt|;
name|assertTrue
argument_list|(
name|subType
operator|.
name|isSubtypeOf
argument_list|(
name|superType
argument_list|)
argument_list|)
expr_stmt|;
name|ParameterizedType
name|actualSubType
init|=
operator|(
name|ParameterizedType
operator|)
name|superType
operator|.
name|getSubtype
argument_list|(
name|subType
operator|.
name|getRawType
argument_list|()
argument_list|)
operator|.
name|getType
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|StringForFirstTypeArg
operator|.
name|StringInnerType
operator|.
name|class
argument_list|,
name|actualSubType
operator|.
name|getRawType
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|actualSubType
operator|.
name|getActualTypeArguments
argument_list|()
index|[
literal|0
index|]
argument_list|)
operator|.
name|isInstanceOf
argument_list|(
name|WildcardType
operator|.
name|class
argument_list|)
expr_stmt|;
name|ParameterizedType
name|actualOwnerType
init|=
operator|(
name|ParameterizedType
operator|)
name|actualSubType
operator|.
name|getOwnerType
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|StringForFirstTypeArg
operator|.
name|class
argument_list|,
name|actualOwnerType
operator|.
name|getRawType
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|testGetSubtype_outerTypeVarTranslatesInnerTypeVar ()
specifier|public
name|void
name|testGetSubtype_outerTypeVarTranslatesInnerTypeVar
parameter_list|()
block|{
class|class
name|TwoTypeArgs
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
block|{}
class|class
name|StringForFirstTypeArg
parameter_list|<
name|V
parameter_list|>
extends|extends
name|TwoTypeArgs
argument_list|<
name|String
argument_list|,
name|V
argument_list|>
block|{}
class|class
name|OuterTypeVar
parameter_list|<
name|V
parameter_list|>
extends|extends
name|StringForFirstTypeArg
argument_list|<
name|List
argument_list|<
name|V
argument_list|>
argument_list|>
block|{}
name|TypeToken
argument_list|<
name|StringForFirstTypeArg
argument_list|<
name|List
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|>
name|type
init|=
operator|new
name|TypeToken
argument_list|<
name|StringForFirstTypeArg
argument_list|<
name|List
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|>
argument_list|()
block|{}
empty_stmt|;
name|assertEquals
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|OuterTypeVar
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|()
block|{}
operator|,
name|type
operator|.
name|getSubtype
argument_list|(
name|OuterTypeVar
operator|.
name|class
argument_list|)
block|)
function|;
end_function

begin_function
unit|}      public
DECL|method|testGetSubtype_toWildcardWithBounds ()
name|void
name|testGetSubtype_toWildcardWithBounds
parameter_list|()
block|{
class|class
name|TwoTypeArgs
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
block|{}
class|class
name|StringForFirstTypeArg
parameter_list|<
name|V
parameter_list|>
extends|extends
name|TwoTypeArgs
argument_list|<
name|String
argument_list|,
name|V
argument_list|>
block|{}
name|TypeToken
argument_list|<
name|TwoTypeArgs
argument_list|<
name|?
argument_list|,
name|?
extends|extends
name|Number
argument_list|>
argument_list|>
name|superType
init|=
operator|new
name|TypeToken
argument_list|<
name|TwoTypeArgs
argument_list|<
name|?
argument_list|,
name|?
extends|extends
name|Number
argument_list|>
argument_list|>
argument_list|()
block|{}
empty_stmt|;
name|TypeToken
argument_list|<
name|StringForFirstTypeArg
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|subType
init|=
operator|new
name|TypeToken
argument_list|<
name|StringForFirstTypeArg
argument_list|<
name|Integer
argument_list|>
argument_list|>
argument_list|()
block|{}
decl_stmt|;
name|assertTrue
argument_list|(
name|subType
operator|.
name|isSubtypeOf
argument_list|(
name|superType
argument_list|)
argument_list|)
expr_stmt|;
comment|// TODO(benyu): This should check equality to an expected value, see discussion in cl/98674873
name|superType
operator|.
name|getSubtype
argument_list|(
name|subType
operator|.
name|getRawType
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|testGetSubtype_baseClassWithNoTypeArgs ()
specifier|public
name|void
name|testGetSubtype_baseClassWithNoTypeArgs
parameter_list|()
block|{
class|class
name|SingleGenericExtendsBase
parameter_list|<
name|T
parameter_list|>
extends|extends
name|Base
block|{}
name|TypeToken
argument_list|<
name|Base
argument_list|>
name|superType
init|=
operator|new
name|TypeToken
argument_list|<
name|Base
argument_list|>
argument_list|()
block|{}
decl_stmt|;
name|TypeToken
argument_list|<
name|SingleGenericExtendsBase
argument_list|<
name|String
argument_list|>
argument_list|>
name|subType
init|=
operator|new
name|TypeToken
argument_list|<
name|SingleGenericExtendsBase
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
block|{}
decl_stmt|;
name|assertTrue
argument_list|(
name|subType
operator|.
name|isSubtypeOf
argument_list|(
name|superType
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|TypeToken
operator|.
name|of
argument_list|(
name|SingleGenericExtendsBase
operator|.
name|class
argument_list|)
argument_list|,
name|superType
operator|.
name|getSubtype
argument_list|(
name|subType
operator|.
name|getRawType
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|testGetSubtype_baseClassWithLessTypeArgs ()
specifier|public
name|void
name|testGetSubtype_baseClassWithLessTypeArgs
parameter_list|()
block|{
class|class
name|SingleGenericExtendsBase
parameter_list|<
name|T
parameter_list|>
extends|extends
name|Base
block|{}
class|class
name|DoubleGenericExtendsSingleGeneric
parameter_list|<
name|T1
parameter_list|,
name|TUnused
parameter_list|>
extends|extends
name|SingleGenericExtendsBase
argument_list|<
name|T1
argument_list|>
block|{}
name|TypeToken
argument_list|<
name|SingleGenericExtendsBase
argument_list|<
name|?
argument_list|>
argument_list|>
name|superType
init|=
operator|new
name|TypeToken
argument_list|<
name|SingleGenericExtendsBase
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|()
block|{}
empty_stmt|;
name|TypeToken
argument_list|<
name|DoubleGenericExtendsSingleGeneric
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|>
name|subType
init|=
operator|new
name|TypeToken
argument_list|<
name|DoubleGenericExtendsSingleGeneric
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|>
argument_list|()
block|{}
decl_stmt|;
name|assertTrue
argument_list|(
name|subType
operator|.
name|isSubtypeOf
argument_list|(
name|superType
argument_list|)
argument_list|)
expr_stmt|;
name|ParameterizedType
name|actualSubType
init|=
operator|(
name|ParameterizedType
operator|)
name|superType
operator|.
name|getSubtype
argument_list|(
name|subType
operator|.
name|getRawType
argument_list|()
argument_list|)
operator|.
name|getType
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|DoubleGenericExtendsSingleGeneric
operator|.
name|class
argument_list|,
name|actualSubType
operator|.
name|getRawType
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|actualSubType
operator|.
name|getActualTypeArguments
argument_list|()
index|[
literal|0
index|]
argument_list|)
operator|.
name|isInstanceOf
argument_list|(
name|WildcardType
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|testGetSubtype_manyGenericArgs ()
specifier|public
parameter_list|<
name|T
parameter_list|>
name|void
name|testGetSubtype_manyGenericArgs
parameter_list|()
block|{
class|class
name|FourTypeArgs
parameter_list|<
name|T1
parameter_list|,
name|T2
parameter_list|,
name|T3
parameter_list|,
name|T4
parameter_list|>
block|{}
class|class
name|ThreeTypeArgs
parameter_list|<
name|T1
parameter_list|,
name|T2
parameter_list|,
name|T3
parameter_list|>
extends|extends
name|FourTypeArgs
argument_list|<
name|T1
argument_list|,
name|T2
argument_list|,
name|T3
argument_list|,
name|String
argument_list|>
block|{}
name|TypeToken
argument_list|<
name|FourTypeArgs
argument_list|<
name|T
argument_list|,
name|Integer
argument_list|,
name|?
argument_list|,
name|?
argument_list|>
argument_list|>
name|superType
init|=
operator|new
name|TypeToken
argument_list|<
name|FourTypeArgs
argument_list|<
name|T
argument_list|,
name|Integer
argument_list|,
name|?
argument_list|,
name|?
argument_list|>
argument_list|>
argument_list|()
block|{}
decl_stmt|;
name|TypeToken
argument_list|<
name|ThreeTypeArgs
argument_list|<
name|T
argument_list|,
name|Integer
argument_list|,
name|String
argument_list|>
argument_list|>
name|subType
init|=
operator|new
name|TypeToken
argument_list|<
name|ThreeTypeArgs
argument_list|<
name|T
argument_list|,
name|Integer
argument_list|,
name|String
argument_list|>
argument_list|>
argument_list|()
block|{}
decl_stmt|;
name|assertTrue
argument_list|(
name|subType
operator|.
name|isSubtypeOf
argument_list|(
name|superType
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|ThreeTypeArgs
argument_list|<
name|T
argument_list|,
name|Integer
argument_list|,
name|?
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|,
name|superType
operator|.
name|getSubtype
argument_list|(
name|subType
operator|.
name|getRawType
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|testGetSubtype_recursiveTypeBoundInSubTypeTranslatedAsIs ()
specifier|public
name|void
name|testGetSubtype_recursiveTypeBoundInSubTypeTranslatedAsIs
parameter_list|()
block|{
class|class
name|BaseWithTypeVar
parameter_list|<
name|T
parameter_list|>
block|{}
class|class
name|Outer
parameter_list|<
name|O
parameter_list|>
block|{
class|class
name|Sub
parameter_list|<
name|X
parameter_list|>
extends|extends
name|BaseWithTypeVar
argument_list|<
name|List
argument_list|<
name|X
argument_list|>
argument_list|>
block|{}
class|class
name|Sub2
parameter_list|<
name|Y
extends|extends
name|Sub2
parameter_list|<
name|Y
parameter_list|>
parameter_list|>
extends|extends
name|BaseWithTypeVar
argument_list|<
name|List
argument_list|<
name|Y
argument_list|>
argument_list|>
block|{}
block|}
name|ParameterizedType
name|subtype
init|=
operator|(
name|ParameterizedType
operator|)
operator|new
name|TypeToken
argument_list|<
name|BaseWithTypeVar
argument_list|<
name|List
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|>
argument_list|()
block|{}
operator|.
name|getSubtype
argument_list|(
name|Outer
operator|.
name|Sub
operator|.
name|class
argument_list|)
operator|.
name|getType
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|Outer
operator|.
name|Sub
operator|.
name|class
argument_list|,
name|subtype
operator|.
name|getRawType
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|subtype
operator|.
name|getActualTypeArguments
argument_list|()
index|[
literal|0
index|]
argument_list|)
operator|.
name|isInstanceOf
argument_list|(
name|WildcardType
operator|.
name|class
argument_list|)
expr_stmt|;
name|ParameterizedType
name|owner
init|=
operator|(
name|ParameterizedType
operator|)
name|subtype
operator|.
name|getOwnerType
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|Outer
operator|.
name|class
argument_list|,
name|owner
operator|.
name|getRawType
argument_list|()
argument_list|)
expr_stmt|;
comment|// This returns a strange ? extends Sub2<Y> type, which isn't ideal.
operator|new
name|TypeToken
argument_list|<
name|BaseWithTypeVar
argument_list|<
name|List
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|>
argument_list|()
block|{}
operator|.
name|getSubtype
argument_list|(
name|Outer
operator|.
name|Sub2
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|testGetSubtype_subtypeSameAsDeclaringType ()
specifier|public
name|void
name|testGetSubtype_subtypeSameAsDeclaringType
parameter_list|()
throws|throws
name|Exception
block|{
class|class
name|Bar
parameter_list|<
name|T
parameter_list|>
block|{}
class|class
name|SubBar
parameter_list|<
name|T
parameter_list|>
extends|extends
name|Bar
argument_list|<
name|T
argument_list|>
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
name|Bar
argument_list|<
name|T
argument_list|>
name|delegate
decl_stmt|;
name|TypeToken
argument_list|<
name|SubBar
argument_list|<
name|T
argument_list|>
argument_list|>
name|fieldTypeAsSubBar
parameter_list|()
block|{
return|return
operator|new
name|TypeToken
argument_list|<
name|SubBar
argument_list|<
name|T
argument_list|>
argument_list|>
argument_list|()
block|{}
return|;
block|}
block|}
name|Field
name|delegateField
init|=
name|SubBar
operator|.
name|class
operator|.
name|getDeclaredField
argument_list|(
literal|"delegate"
argument_list|)
decl_stmt|;
comment|// barType is Bar<T>, a ParameterizedType with no generic arguments specified
name|TypeToken
argument_list|<
name|?
argument_list|>
name|barType
init|=
name|TypeToken
operator|.
name|of
argument_list|(
name|delegateField
operator|.
name|getGenericType
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|barType
operator|.
name|getSubtype
argument_list|(
name|SubBar
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
operator|new
name|SubBar
argument_list|<
name|Void
argument_list|>
argument_list|()
operator|.
name|fieldTypeAsSubBar
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// To construct TypeToken<T> with TypeToken.of()
DECL|method|testWhere_circleRejected ()
specifier|public
parameter_list|<
name|T
parameter_list|>
name|void
name|testWhere_circleRejected
parameter_list|()
block|{
name|TypeToken
argument_list|<
name|List
argument_list|<
name|T
argument_list|>
argument_list|>
name|type
init|=
operator|new
name|TypeToken
argument_list|<
name|List
argument_list|<
name|T
argument_list|>
argument_list|>
argument_list|()
block|{}
decl_stmt|;
try|try
block|{
name|type
operator|.
name|where
argument_list|(
operator|new
name|TypeParameter
argument_list|<
name|T
argument_list|>
argument_list|()
block|{}
argument_list|,
operator|(
name|TypeToken
argument_list|<
name|T
argument_list|>
operator|)
name|TypeToken
operator|.
name|of
argument_list|(
operator|new
name|TypeCapture
argument_list|<
name|T
argument_list|>
argument_list|()
block|{}
operator|.
name|capture
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{}
block|}
end_function

begin_function
DECL|method|testWhere ()
specifier|public
name|void
name|testWhere
parameter_list|()
block|{
name|assertEquals
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|,
name|mapOf
argument_list|(
name|String
operator|.
name|class
argument_list|,
name|Integer
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|int
index|[]
argument_list|>
argument_list|()
block|{}
argument_list|,
name|arrayOf
argument_list|(
name|int
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|int
index|[]
operator|.
expr|class
argument_list|,
name|arrayOf
argument_list|(
name|int
operator|.
name|class
argument_list|)
operator|.
name|getRawType
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function

begin_class
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
comment|// used by reflection
DECL|class|Holder
specifier|private
specifier|static
class|class
name|Holder
parameter_list|<
name|T
parameter_list|>
block|{
DECL|field|element
name|T
name|element
decl_stmt|;
DECL|field|list
name|List
argument_list|<
name|T
argument_list|>
name|list
decl_stmt|;
DECL|field|matrix
name|List
argument_list|<
name|T
argument_list|>
index|[]
name|matrix
decl_stmt|;
DECL|method|setList (List<T> list)
name|void
name|setList
parameter_list|(
name|List
argument_list|<
name|T
argument_list|>
name|list
parameter_list|)
block|{
name|this
operator|.
name|list
operator|=
name|list
expr_stmt|;
block|}
block|}
end_class

begin_function
DECL|method|testWildcardCaptured_methodParameter_upperBound ()
specifier|public
name|void
name|testWildcardCaptured_methodParameter_upperBound
parameter_list|()
throws|throws
name|Exception
block|{
name|TypeToken
argument_list|<
name|Holder
argument_list|<
name|?
argument_list|>
argument_list|>
name|type
init|=
operator|new
name|TypeToken
argument_list|<
name|Holder
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|()
block|{}
empty_stmt|;
name|TypeToken
argument_list|<
name|?
argument_list|>
name|parameterType
init|=
name|type
operator|.
name|resolveType
argument_list|(
name|Holder
operator|.
name|class
operator|.
name|getDeclaredMethod
argument_list|(
literal|"setList"
argument_list|,
name|List
operator|.
name|class
argument_list|)
operator|.
name|getGenericParameterTypes
argument_list|()
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|List
operator|.
name|class
argument_list|,
name|parameterType
operator|.
name|getRawType
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|parameterType
operator|.
name|getType
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|parameterType
operator|.
name|isSupertypeOf
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|List
argument_list|<
name|Integer
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|testWildcardCaptured_field_upperBound ()
specifier|public
name|void
name|testWildcardCaptured_field_upperBound
parameter_list|()
throws|throws
name|Exception
block|{
name|TypeToken
argument_list|<
name|Holder
argument_list|<
name|?
argument_list|>
argument_list|>
name|type
init|=
operator|new
name|TypeToken
argument_list|<
name|Holder
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|()
block|{}
empty_stmt|;
name|TypeToken
argument_list|<
name|?
argument_list|>
name|matrixType
init|=
name|type
operator|.
name|resolveType
argument_list|(
name|Holder
operator|.
name|class
operator|.
name|getDeclaredField
argument_list|(
literal|"matrix"
argument_list|)
operator|.
name|getGenericType
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|List
index|[]
operator|.
expr|class
argument_list|,
name|matrixType
operator|.
name|getRawType
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|matrixType
operator|.
name|getType
argument_list|()
argument_list|)
operator|.
name|isNotEqualTo
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|List
argument_list|<
name|?
argument_list|>
index|[]
argument_list|>
argument_list|()
block|{}
operator|.
name|getType
argument_list|()
block|)
function|;
end_function

begin_function
unit|}    public
DECL|method|testArrayClassPreserved ()
name|void
name|testArrayClassPreserved
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|int
index|[]
operator|.
expr|class
argument_list|,
name|TypeToken
operator|.
name|of
argument_list|(
name|int
index|[]
operator|.
expr|class
argument_list|)
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|int
index|[]
index|[]
operator|.
expr|class
argument_list|,
name|TypeToken
operator|.
name|of
argument_list|(
name|int
index|[]
index|[]
operator|.
expr|class
argument_list|)
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|String
index|[]
operator|.
expr|class
argument_list|,
name|TypeToken
operator|.
name|of
argument_list|(
name|String
index|[]
operator|.
expr|class
argument_list|)
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|class
argument_list|,
operator|new
name|TypeToken
argument_list|<
name|Integer
argument_list|>
argument_list|()
block|{}
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|class
argument_list|,
name|TypeToken
operator|.
name|of
argument_list|(
name|Integer
operator|.
name|class
argument_list|)
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|testMethod_getOwnerType ()
specifier|public
name|void
name|testMethod_getOwnerType
parameter_list|()
throws|throws
name|NoSuchMethodException
block|{
name|Method
name|sizeMethod
init|=
name|List
operator|.
name|class
operator|.
name|getMethod
argument_list|(
literal|"size"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|TypeToken
operator|.
name|of
argument_list|(
name|List
operator|.
name|class
argument_list|)
argument_list|,
name|TypeToken
operator|.
name|of
argument_list|(
name|List
operator|.
name|class
argument_list|)
operator|.
name|method
argument_list|(
name|sizeMethod
argument_list|)
operator|.
name|getOwnerType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|,
operator|new
name|TypeToken
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
block|{}
operator|.
name|method
argument_list|(
name|sizeMethod
argument_list|)
operator|.
name|getOwnerType
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|testMethod_notDeclaredByType ()
specifier|public
name|void
name|testMethod_notDeclaredByType
parameter_list|()
throws|throws
name|NoSuchMethodException
block|{
name|Method
name|sizeMethod
init|=
name|Map
operator|.
name|class
operator|.
name|getMethod
argument_list|(
literal|"size"
argument_list|)
decl_stmt|;
try|try
block|{
name|TypeToken
operator|.
name|of
argument_list|(
name|List
operator|.
name|class
argument_list|)
operator|.
name|method
argument_list|(
name|sizeMethod
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{}
block|}
end_function

begin_function
DECL|method|testMethod_declaredBySuperclass ()
specifier|public
name|void
name|testMethod_declaredBySuperclass
parameter_list|()
throws|throws
name|Exception
block|{
name|Method
name|toStringMethod
init|=
name|Object
operator|.
name|class
operator|.
name|getMethod
argument_list|(
literal|"toString"
argument_list|)
decl_stmt|;
name|ImmutableList
argument_list|<
name|String
argument_list|>
name|list
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"foo"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|list
operator|.
name|toString
argument_list|()
argument_list|,
name|TypeToken
operator|.
name|of
argument_list|(
name|List
operator|.
name|class
argument_list|)
operator|.
name|method
argument_list|(
name|toStringMethod
argument_list|)
operator|.
name|invoke
argument_list|(
name|list
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|testMethod_returnType_resolvedAgainstTypeBound ()
specifier|public
parameter_list|<
name|T
extends|extends
name|Number
operator|&
name|List
argument_list|<
name|String
argument_list|>
parameter_list|>
name|void
name|testMethod_returnType_resolvedAgainstTypeBound
parameter_list|()
throws|throws
name|NoSuchMethodException
block|{
name|Method
name|getMethod
init|=
name|List
operator|.
name|class
operator|.
name|getMethod
argument_list|(
literal|"get"
argument_list|,
name|int
operator|.
name|class
argument_list|)
decl_stmt|;
name|Invokable
argument_list|<
name|T
argument_list|,
name|String
argument_list|>
name|invokable
init|=
operator|new
name|TypeToken
argument_list|<
name|T
argument_list|>
argument_list|(
name|getClass
argument_list|()
argument_list|)
block|{}
operator|.
name|method
argument_list|(
name|getMethod
argument_list|)
operator|.
name|returning
argument_list|(
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|TypeToken
operator|.
name|of
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|,
name|invokable
operator|.
name|getReturnType
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|testMethod_parameterTypes ()
specifier|public
parameter_list|<
name|T
extends|extends
name|List
argument_list|<
name|String
argument_list|>
parameter_list|>
name|void
name|testMethod_parameterTypes
parameter_list|()
throws|throws
name|NoSuchMethodException
block|{
name|Method
name|setMethod
init|=
name|List
operator|.
name|class
operator|.
name|getMethod
argument_list|(
literal|"set"
argument_list|,
name|int
operator|.
name|class
argument_list|,
name|Object
operator|.
name|class
argument_list|)
decl_stmt|;
name|Invokable
argument_list|<
name|T
argument_list|,
name|?
argument_list|>
name|invokable
init|=
operator|new
name|TypeToken
argument_list|<
name|T
argument_list|>
argument_list|(
name|getClass
argument_list|()
argument_list|)
block|{}
operator|.
name|method
argument_list|(
name|setMethod
argument_list|)
decl_stmt|;
name|ImmutableList
argument_list|<
name|Parameter
argument_list|>
name|params
init|=
name|invokable
operator|.
name|getParameters
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|params
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|TypeToken
operator|.
name|of
argument_list|(
name|int
operator|.
name|class
argument_list|)
argument_list|,
name|params
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|TypeToken
operator|.
name|of
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|,
name|params
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|testMethod_equals ()
specifier|public
name|void
name|testMethod_equals
parameter_list|()
throws|throws
name|NoSuchMethodException
block|{
name|Method
name|getMethod
init|=
name|List
operator|.
name|class
operator|.
name|getMethod
argument_list|(
literal|"get"
argument_list|,
name|int
operator|.
name|class
argument_list|)
decl_stmt|;
name|Method
name|setMethod
init|=
name|List
operator|.
name|class
operator|.
name|getMethod
argument_list|(
literal|"set"
argument_list|,
name|int
operator|.
name|class
argument_list|,
name|Object
operator|.
name|class
argument_list|)
decl_stmt|;
operator|new
name|EqualsTester
argument_list|()
operator|.
name|addEqualityGroup
argument_list|(
name|Invokable
operator|.
name|from
argument_list|(
name|getMethod
argument_list|)
argument_list|,
name|Invokable
operator|.
name|from
argument_list|(
name|getMethod
argument_list|)
argument_list|)
operator|.
name|addEqualityGroup
argument_list|(
name|Invokable
operator|.
name|from
argument_list|(
name|setMethod
argument_list|)
argument_list|)
operator|.
name|addEqualityGroup
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|List
argument_list|<
name|Integer
argument_list|>
argument_list|>
argument_list|()
block|{}
operator|.
name|method
argument_list|(
name|getMethod
argument_list|)
argument_list|)
operator|.
name|addEqualityGroup
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
block|{}
operator|.
name|method
argument_list|(
name|getMethod
argument_list|)
argument_list|)
operator|.
name|addEqualityGroup
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|List
argument_list|<
name|Integer
argument_list|>
argument_list|>
argument_list|()
block|{}
operator|.
name|method
argument_list|(
name|setMethod
argument_list|)
argument_list|)
operator|.
name|addEqualityGroup
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
block|{}
operator|.
name|method
argument_list|(
name|setMethod
argument_list|)
argument_list|)
operator|.
name|testEquals
argument_list|()
expr_stmt|;
block|}
end_function

begin_interface
DECL|interface|Loser
specifier|private
interface|interface
name|Loser
parameter_list|<
name|E
extends|extends
name|Throwable
parameter_list|>
block|{
DECL|method|lose ()
name|void
name|lose
parameter_list|()
throws|throws
name|E
function_decl|;
block|}
end_interface

begin_function
DECL|method|testMethod_exceptionTypes ()
specifier|public
parameter_list|<
name|T
extends|extends
name|Loser
argument_list|<
name|AssertionError
argument_list|>
parameter_list|>
name|void
name|testMethod_exceptionTypes
parameter_list|()
throws|throws
name|NoSuchMethodException
block|{
name|Method
name|failMethod
init|=
name|Loser
operator|.
name|class
operator|.
name|getMethod
argument_list|(
literal|"lose"
argument_list|)
decl_stmt|;
name|Invokable
argument_list|<
name|T
argument_list|,
name|?
argument_list|>
name|invokable
init|=
operator|new
name|TypeToken
argument_list|<
name|T
argument_list|>
argument_list|(
name|getClass
argument_list|()
argument_list|)
block|{}
operator|.
name|method
argument_list|(
name|failMethod
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|invokable
operator|.
name|getExceptionTypes
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
name|TypeToken
operator|.
name|of
argument_list|(
name|AssertionError
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|testConstructor_getOwnerType ()
specifier|public
name|void
name|testConstructor_getOwnerType
parameter_list|()
throws|throws
name|NoSuchMethodException
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
comment|// raw class ArrayList.class
name|Constructor
argument_list|<
name|ArrayList
argument_list|>
name|constructor
init|=
name|ArrayList
operator|.
name|class
operator|.
name|getConstructor
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|TypeToken
operator|.
name|of
argument_list|(
name|ArrayList
operator|.
name|class
argument_list|)
argument_list|,
name|TypeToken
operator|.
name|of
argument_list|(
name|ArrayList
operator|.
name|class
argument_list|)
operator|.
name|constructor
argument_list|(
name|constructor
argument_list|)
operator|.
name|getOwnerType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|,
operator|new
name|TypeToken
argument_list|<
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
block|{}
operator|.
name|constructor
argument_list|(
name|constructor
argument_list|)
operator|.
name|getOwnerType
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|testConstructor_notDeclaredByType ()
specifier|public
name|void
name|testConstructor_notDeclaredByType
parameter_list|()
throws|throws
name|NoSuchMethodException
block|{
name|Constructor
argument_list|<
name|String
argument_list|>
name|constructor
init|=
name|String
operator|.
name|class
operator|.
name|getConstructor
argument_list|()
decl_stmt|;
try|try
block|{
name|TypeToken
operator|.
name|of
argument_list|(
name|Object
operator|.
name|class
argument_list|)
operator|.
name|constructor
argument_list|(
name|constructor
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{}
block|}
end_function

begin_function
DECL|method|testConstructor_declaredBySuperclass ()
specifier|public
name|void
name|testConstructor_declaredBySuperclass
parameter_list|()
throws|throws
name|NoSuchMethodException
block|{
name|Constructor
argument_list|<
name|Object
argument_list|>
name|constructor
init|=
name|Object
operator|.
name|class
operator|.
name|getConstructor
argument_list|()
decl_stmt|;
try|try
block|{
name|TypeToken
operator|.
name|of
argument_list|(
name|String
operator|.
name|class
argument_list|)
operator|.
name|constructor
argument_list|(
name|constructor
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{}
block|}
end_function

begin_function
DECL|method|testConstructor_equals ()
specifier|public
name|void
name|testConstructor_equals
parameter_list|()
throws|throws
name|NoSuchMethodException
block|{
name|Constructor
argument_list|<
name|?
argument_list|>
name|defaultConstructor
init|=
name|ArrayList
operator|.
name|class
operator|.
name|getConstructor
argument_list|()
decl_stmt|;
name|Constructor
argument_list|<
name|?
argument_list|>
name|oneArgConstructor
init|=
name|ArrayList
operator|.
name|class
operator|.
name|getConstructor
argument_list|(
name|int
operator|.
name|class
argument_list|)
decl_stmt|;
operator|new
name|EqualsTester
argument_list|()
operator|.
name|addEqualityGroup
argument_list|(
name|Invokable
operator|.
name|from
argument_list|(
name|defaultConstructor
argument_list|)
argument_list|,
name|Invokable
operator|.
name|from
argument_list|(
name|defaultConstructor
argument_list|)
argument_list|)
operator|.
name|addEqualityGroup
argument_list|(
name|Invokable
operator|.
name|from
argument_list|(
name|oneArgConstructor
argument_list|)
argument_list|)
operator|.
name|addEqualityGroup
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|ArrayList
argument_list|<
name|Integer
argument_list|>
argument_list|>
argument_list|()
block|{}
operator|.
name|constructor
argument_list|(
name|defaultConstructor
argument_list|)
argument_list|)
operator|.
name|addEqualityGroup
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
block|{}
operator|.
name|constructor
argument_list|(
name|defaultConstructor
argument_list|)
argument_list|)
operator|.
name|addEqualityGroup
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|ArrayList
argument_list|<
name|Integer
argument_list|>
argument_list|>
argument_list|()
block|{}
operator|.
name|constructor
argument_list|(
name|oneArgConstructor
argument_list|)
argument_list|)
operator|.
name|addEqualityGroup
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
block|{}
operator|.
name|constructor
argument_list|(
name|oneArgConstructor
argument_list|)
argument_list|)
operator|.
name|testEquals
argument_list|()
expr_stmt|;
block|}
end_function

begin_class
DECL|class|Container
specifier|private
specifier|static
class|class
name|Container
parameter_list|<
name|T
parameter_list|>
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
DECL|method|Container (T data)
specifier|public
name|Container
parameter_list|(
name|T
name|data
parameter_list|)
block|{}
block|}
end_class

begin_function
DECL|method|testConstructor_parameterTypes ()
specifier|public
parameter_list|<
name|T
extends|extends
name|Container
argument_list|<
name|String
argument_list|>
parameter_list|>
name|void
name|testConstructor_parameterTypes
parameter_list|()
throws|throws
name|NoSuchMethodException
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
comment|// Reflection API skew
name|Constructor
argument_list|<
name|Container
argument_list|>
name|constructor
init|=
name|Container
operator|.
name|class
operator|.
name|getConstructor
argument_list|(
name|Object
operator|.
name|class
argument_list|)
decl_stmt|;
name|Invokable
argument_list|<
name|T
argument_list|,
name|?
argument_list|>
name|invokable
init|=
operator|new
name|TypeToken
argument_list|<
name|T
argument_list|>
argument_list|(
name|getClass
argument_list|()
argument_list|)
block|{}
operator|.
name|constructor
argument_list|(
name|constructor
argument_list|)
decl_stmt|;
name|ImmutableList
argument_list|<
name|Parameter
argument_list|>
name|params
init|=
name|invokable
operator|.
name|getParameters
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|params
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|TypeToken
operator|.
name|of
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|,
name|params
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function

begin_class
DECL|class|CannotConstruct
specifier|private
specifier|static
class|class
name|CannotConstruct
parameter_list|<
name|E
extends|extends
name|Throwable
parameter_list|>
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
DECL|method|CannotConstruct ()
specifier|public
name|CannotConstruct
parameter_list|()
throws|throws
name|E
block|{}
block|}
end_class

begin_function
DECL|method|testConstructor_exceptionTypes ()
specifier|public
parameter_list|<
name|T
extends|extends
name|CannotConstruct
argument_list|<
name|AssertionError
argument_list|>
parameter_list|>
name|void
name|testConstructor_exceptionTypes
parameter_list|()
throws|throws
name|NoSuchMethodException
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
comment|// Reflection API skew
name|Constructor
argument_list|<
name|CannotConstruct
argument_list|>
name|constructor
init|=
name|CannotConstruct
operator|.
name|class
operator|.
name|getConstructor
argument_list|()
decl_stmt|;
name|Invokable
argument_list|<
name|T
argument_list|,
name|?
argument_list|>
name|invokable
init|=
operator|new
name|TypeToken
argument_list|<
name|T
argument_list|>
argument_list|(
name|getClass
argument_list|()
argument_list|)
block|{}
operator|.
name|constructor
argument_list|(
name|constructor
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|invokable
operator|.
name|getExceptionTypes
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
name|TypeToken
operator|.
name|of
argument_list|(
name|AssertionError
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|testRejectTypeVariable_class ()
specifier|public
name|void
name|testRejectTypeVariable_class
parameter_list|()
block|{
name|assertNoTypeVariable
argument_list|(
name|String
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertNoTypeVariable
argument_list|(
name|String
index|[]
operator|.
expr|class
argument_list|)
expr_stmt|;
name|assertNoTypeVariable
argument_list|(
name|int
index|[]
operator|.
expr|class
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|testRejectTypeVariable_parameterizedType ()
specifier|public
name|void
name|testRejectTypeVariable_parameterizedType
parameter_list|()
block|{
name|assertNoTypeVariable
argument_list|(
operator|new
name|TypeCapture
argument_list|<
name|Iterable
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
block|{}
operator|.
name|capture
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|testRejectTypeVariable_wildcardType ()
specifier|public
name|void
name|testRejectTypeVariable_wildcardType
parameter_list|()
block|{
name|assertNoTypeVariable
argument_list|(
operator|new
name|TypeCapture
argument_list|<
name|Iterable
argument_list|<
name|?
extends|extends
name|String
argument_list|>
argument_list|>
argument_list|()
block|{}
operator|.
name|capture
argument_list|()
block|)
function|;
end_function

begin_expr_stmt
name|assertNoTypeVariable
argument_list|(
operator|new
name|TypeCapture
argument_list|<
name|Iterable
argument_list|<
name|?
super|super
name|String
argument_list|>
argument_list|>
argument_list|()
block|{}
end_expr_stmt

begin_expr_stmt
operator|.
name|capture
argument_list|()
end_expr_stmt

begin_empty_stmt
unit|)
empty_stmt|;
end_empty_stmt

begin_function
unit|}    public
DECL|method|testRejectTypeVariable_genericArrayType ()
name|void
name|testRejectTypeVariable_genericArrayType
parameter_list|()
block|{
name|assertNoTypeVariable
argument_list|(
operator|new
name|TypeCapture
argument_list|<
name|Iterable
argument_list|<
name|?
extends|extends
name|String
argument_list|>
index|[]
argument_list|>
argument_list|()
block|{}
operator|.
name|capture
argument_list|()
block|)
function|;
end_function

begin_function
unit|}    public
DECL|method|testRejectTypeVariable_withTypeVariable ()
parameter_list|<
name|T
parameter_list|>
name|void
name|testRejectTypeVariable_withTypeVariable
parameter_list|()
block|{
name|assertHasTypeVariable
argument_list|(
operator|new
name|TypeCapture
argument_list|<
name|T
argument_list|>
argument_list|()
block|{}
operator|.
name|capture
argument_list|()
argument_list|)
expr_stmt|;
name|assertHasTypeVariable
argument_list|(
operator|new
name|TypeCapture
argument_list|<
name|T
index|[]
argument_list|>
argument_list|()
block|{}
operator|.
name|capture
argument_list|()
argument_list|)
expr_stmt|;
name|assertHasTypeVariable
argument_list|(
operator|new
name|TypeCapture
argument_list|<
name|Iterable
argument_list|<
name|T
argument_list|>
argument_list|>
argument_list|()
block|{}
operator|.
name|capture
argument_list|()
argument_list|)
expr_stmt|;
name|assertHasTypeVariable
argument_list|(
operator|new
name|TypeCapture
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|T
argument_list|>
argument_list|>
argument_list|()
block|{}
operator|.
name|capture
argument_list|()
argument_list|)
expr_stmt|;
name|assertHasTypeVariable
argument_list|(
operator|new
name|TypeCapture
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|?
extends|extends
name|T
argument_list|>
argument_list|>
argument_list|()
block|{}
operator|.
name|capture
argument_list|()
argument_list|)
expr_stmt|;
name|assertHasTypeVariable
argument_list|(
operator|new
name|TypeCapture
operator|<
name|Map
operator|<
name|String
argument_list|,
operator|?
name|super
name|T
index|[]
operator|>>
operator|(
operator|)
block|{}
operator|.
name|capture
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function

begin_class
DECL|class|From
specifier|private
specifier|static
class|class
name|From
parameter_list|<
name|K
parameter_list|>
block|{
DECL|class|To
class|class
name|To
parameter_list|<
name|V
parameter_list|>
block|{
DECL|method|type ()
name|Type
name|type
parameter_list|()
block|{
return|return
operator|new
name|TypeToken
argument_list|<
name|To
argument_list|<
name|V
argument_list|>
argument_list|>
argument_list|(
name|getClass
argument_list|()
argument_list|)
block|{}
operator|.
name|getType
argument_list|()
return|;
block|}
block|}
block|}
end_class

begin_function
DECL|method|testRejectTypeVariable_withOwnerType ()
specifier|public
parameter_list|<
name|T
parameter_list|>
name|void
name|testRejectTypeVariable_withOwnerType
parameter_list|()
block|{
comment|// Neither has subclass
name|assertHasTypeVariable
argument_list|(
operator|new
name|From
argument_list|<
name|Integer
argument_list|>
argument_list|()
operator|.
operator|new
name|To
argument_list|<
name|String
argument_list|>
argument_list|()
operator|.
name|type
argument_list|()
argument_list|)
expr_stmt|;
name|assertHasTypeVariable
argument_list|(
operator|new
name|From
argument_list|<
name|T
argument_list|>
argument_list|()
operator|.
operator|new
name|To
argument_list|<
name|String
argument_list|>
argument_list|()
operator|.
name|type
argument_list|()
argument_list|)
expr_stmt|;
name|assertHasTypeVariable
argument_list|(
operator|new
name|From
argument_list|<
name|Integer
argument_list|>
argument_list|()
operator|.
operator|new
name|To
argument_list|<
name|T
argument_list|>
argument_list|()
operator|.
name|type
argument_list|()
argument_list|)
expr_stmt|;
comment|// Owner is subclassed
name|assertHasTypeVariable
argument_list|(
operator|new
name|From
argument_list|<
name|Integer
argument_list|>
argument_list|()
block|{}
operator|.
operator|new
name|To
argument_list|<
name|String
argument_list|>
argument_list|()
operator|.
name|type
argument_list|()
argument_list|)
expr_stmt|;
name|assertHasTypeVariable
argument_list|(
operator|new
name|From
argument_list|<
name|T
argument_list|>
argument_list|()
block|{}
operator|.
operator|new
name|To
argument_list|<
name|String
argument_list|>
argument_list|()
operator|.
name|type
argument_list|()
argument_list|)
expr_stmt|;
comment|// Inner is subclassed
name|assertNoTypeVariable
argument_list|(
operator|new
name|From
argument_list|<
name|Integer
argument_list|>
argument_list|()
operator|.
operator|new
name|To
argument_list|<
name|String
argument_list|>
argument_list|()
block|{}
operator|.
name|type
argument_list|()
argument_list|)
expr_stmt|;
name|assertHasTypeVariable
argument_list|(
operator|new
name|From
argument_list|<
name|Integer
argument_list|>
argument_list|()
operator|.
operator|new
name|To
argument_list|<
name|T
argument_list|>
argument_list|()
block|{}
operator|.
name|type
argument_list|()
argument_list|)
expr_stmt|;
name|assertHasTypeVariable
argument_list|(
operator|new
name|From
argument_list|<
name|T
argument_list|>
argument_list|()
operator|.
operator|new
name|To
argument_list|<
name|String
argument_list|>
argument_list|()
block|{}
operator|.
name|type
argument_list|()
argument_list|)
expr_stmt|;
comment|// both subclassed
name|assertHasTypeVariable
argument_list|(
operator|new
name|From
argument_list|<
name|T
argument_list|>
argument_list|()
block|{}
operator|.
operator|new
name|To
argument_list|<
name|String
argument_list|>
argument_list|()
block|{}
operator|.
name|type
argument_list|()
argument_list|)
expr_stmt|;
name|assertNoTypeVariable
argument_list|(
operator|new
name|From
argument_list|<
name|Integer
argument_list|>
argument_list|()
block|{}
operator|.
operator|new
name|To
argument_list|<
name|String
argument_list|>
argument_list|()
block|{}
operator|.
name|type
argument_list|()
argument_list|)
expr_stmt|;
name|assertHasTypeVariable
argument_list|(
operator|new
name|From
argument_list|<
name|Integer
argument_list|>
argument_list|()
block|{}
operator|.
operator|new
name|To
argument_list|<
name|T
argument_list|>
argument_list|()
block|{}
operator|.
name|type
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|assertHasTypeVariable (Type type)
specifier|private
specifier|static
name|void
name|assertHasTypeVariable
parameter_list|(
name|Type
name|type
parameter_list|)
block|{
try|try
block|{
name|TypeToken
operator|.
name|of
argument_list|(
name|type
argument_list|)
operator|.
name|rejectTypeVariables
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Should contain TypeVariable"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{}
block|}
end_function

begin_function
DECL|method|assertNoTypeVariable (Type type)
specifier|private
specifier|static
name|void
name|assertNoTypeVariable
parameter_list|(
name|Type
name|type
parameter_list|)
block|{
name|TypeToken
operator|.
name|of
argument_list|(
name|type
argument_list|)
operator|.
name|rejectTypeVariables
argument_list|()
expr_stmt|;
block|}
end_function

begin_class
DECL|class|RawTypeConsistencyTester
specifier|private
specifier|abstract
specifier|static
class|class
name|RawTypeConsistencyTester
parameter_list|<
name|T
extends|extends
name|Enum
parameter_list|<
name|T
parameter_list|>
operator|&
name|CharSequence
parameter_list|>
block|{
DECL|method|returningT ()
specifier|abstract
name|T
name|returningT
parameter_list|()
function_decl|;
DECL|method|acceptT (T t)
specifier|abstract
name|void
name|acceptT
parameter_list|(
name|T
name|t
parameter_list|)
function_decl|;
DECL|method|returningX ()
specifier|abstract
parameter_list|<
name|X
extends|extends
name|T
parameter_list|>
name|X
name|returningX
parameter_list|()
function_decl|;
DECL|method|acceptX (X x)
specifier|abstract
parameter_list|<
name|X
parameter_list|>
name|void
name|acceptX
parameter_list|(
name|X
name|x
parameter_list|)
function_decl|;
DECL|method|returningT2 ()
specifier|abstract
parameter_list|<
name|T2
extends|extends
name|Enum
argument_list|<
name|T2
argument_list|>
operator|&
name|CharSequence
parameter_list|>
name|T2
name|returningT2
parameter_list|()
function_decl|;
DECL|method|acceptT2 (T2 t2)
specifier|abstract
parameter_list|<
name|T2
extends|extends
name|CharSequence
operator|&
name|Iterable
argument_list|<
name|T2
argument_list|>
parameter_list|>
name|void
name|acceptT2
parameter_list|(
name|T2
name|t2
parameter_list|)
function_decl|;
DECL|method|verifyConsitentRawType ()
specifier|static
name|void
name|verifyConsitentRawType
parameter_list|()
block|{
for|for
control|(
name|Method
name|method
range|:
name|RawTypeConsistencyTester
operator|.
name|class
operator|.
name|getDeclaredMethods
argument_list|()
control|)
block|{
name|assertEquals
argument_list|(
name|method
operator|.
name|getReturnType
argument_list|()
argument_list|,
name|TypeToken
operator|.
name|of
argument_list|(
name|method
operator|.
name|getGenericReturnType
argument_list|()
argument_list|)
operator|.
name|getRawType
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|method
operator|.
name|getParameterTypes
argument_list|()
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|method
operator|.
name|getParameterTypes
argument_list|()
index|[
name|i
index|]
argument_list|,
name|TypeToken
operator|.
name|of
argument_list|(
name|method
operator|.
name|getGenericParameterTypes
argument_list|()
index|[
name|i
index|]
argument_list|)
operator|.
name|getRawType
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

begin_function
DECL|method|testRawTypes ()
specifier|public
name|void
name|testRawTypes
parameter_list|()
block|{
name|RawTypeConsistencyTester
operator|.
name|verifyConsitentRawType
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|Object
operator|.
name|class
argument_list|,
name|TypeToken
operator|.
name|of
argument_list|(
name|Types
operator|.
name|subtypeOf
argument_list|(
name|Object
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|getRawType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|CharSequence
operator|.
name|class
argument_list|,
name|TypeToken
operator|.
name|of
argument_list|(
name|Types
operator|.
name|subtypeOf
argument_list|(
name|CharSequence
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|getRawType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Object
operator|.
name|class
argument_list|,
name|TypeToken
operator|.
name|of
argument_list|(
name|Types
operator|.
name|supertypeOf
argument_list|(
name|CharSequence
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|getRawType
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function

begin_class
DECL|class|IKnowMyType
specifier|private
specifier|abstract
specifier|static
class|class
name|IKnowMyType
parameter_list|<
name|T
parameter_list|>
block|{
DECL|method|type ()
name|TypeToken
argument_list|<
name|T
argument_list|>
name|type
parameter_list|()
block|{
return|return
operator|new
name|TypeToken
argument_list|<
name|T
argument_list|>
argument_list|(
name|getClass
argument_list|()
argument_list|)
block|{}
return|;
block|}
block|}
end_class

begin_function
DECL|method|testTypeResolution ()
specifier|public
name|void
name|testTypeResolution
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|String
operator|.
name|class
argument_list|,
operator|new
name|IKnowMyType
argument_list|<
name|String
argument_list|>
argument_list|()
block|{}
operator|.
name|type
argument_list|()
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|,
operator|new
name|IKnowMyType
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|>
argument_list|()
block|{}
operator|.
name|type
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|testSerializable ()
specifier|public
parameter_list|<
name|A
extends|extends
name|Iterable
argument_list|<
name|?
extends|extends
name|String
argument_list|>
parameter_list|,
name|B
extends|extends
name|A
parameter_list|>
name|void
name|testSerializable
parameter_list|()
block|{
name|reserialize
argument_list|(
name|TypeToken
operator|.
name|of
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|reserialize
argument_list|(
name|TypeToken
operator|.
name|of
argument_list|(
name|String
operator|.
name|class
argument_list|)
operator|.
name|getTypes
argument_list|()
argument_list|)
expr_stmt|;
name|reserialize
argument_list|(
name|TypeToken
operator|.
name|of
argument_list|(
name|String
operator|.
name|class
argument_list|)
operator|.
name|getTypes
argument_list|()
operator|.
name|classes
argument_list|()
argument_list|)
expr_stmt|;
name|reserialize
argument_list|(
name|TypeToken
operator|.
name|of
argument_list|(
name|String
operator|.
name|class
argument_list|)
operator|.
name|getTypes
argument_list|()
operator|.
name|interfaces
argument_list|()
argument_list|)
expr_stmt|;
name|reserialize
argument_list|(
name|TypeToken
operator|.
name|of
argument_list|(
name|String
operator|.
name|class
argument_list|)
operator|.
name|getTypes
argument_list|()
operator|.
name|rawTypes
argument_list|()
argument_list|)
expr_stmt|;
name|reserialize
argument_list|(
name|TypeToken
operator|.
name|of
argument_list|(
name|String
operator|.
name|class
argument_list|)
operator|.
name|getTypes
argument_list|()
operator|.
name|classes
argument_list|()
operator|.
name|rawTypes
argument_list|()
argument_list|)
expr_stmt|;
name|reserialize
argument_list|(
name|TypeToken
operator|.
name|of
argument_list|(
name|String
operator|.
name|class
argument_list|)
operator|.
name|getTypes
argument_list|()
operator|.
name|interfaces
argument_list|()
operator|.
name|rawTypes
argument_list|()
argument_list|)
expr_stmt|;
name|reserialize
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|int
index|[]
argument_list|>
argument_list|()
block|{}
argument_list|)
expr_stmt|;
name|reserialize
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|)
expr_stmt|;
name|reserialize
argument_list|(
operator|new
name|IKnowMyType
operator|<
name|Map
operator|<
condition|?
name|super
name|String
argument_list|,
operator|?
expr|extends
name|int
index|[]
operator|>>
operator|(
operator|)
block|{}
operator|.
name|type
argument_list|()
argument_list|)
expr_stmt|;
name|reserialize
argument_list|(
name|TypeToken
operator|.
name|of
argument_list|(
operator|new
name|TypeCapture
argument_list|<
name|B
argument_list|>
argument_list|()
block|{}
operator|.
name|capture
argument_list|()
argument_list|)
operator|.
name|getTypes
argument_list|()
operator|.
name|rawTypes
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|SerializableTester
operator|.
name|reserialize
argument_list|(
name|TypeToken
operator|.
name|of
argument_list|(
operator|new
name|TypeCapture
argument_list|<
name|B
argument_list|>
argument_list|()
block|{}
operator|.
name|capture
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|expected
parameter_list|)
block|{}
block|}
end_function

begin_function
DECL|method|testSerializable_typeVariableNotSupported ()
specifier|public
parameter_list|<
name|A
parameter_list|>
name|void
name|testSerializable_typeVariableNotSupported
parameter_list|()
block|{
try|try
block|{
operator|new
name|ITryToSerializeMyTypeVariable
argument_list|<
name|String
argument_list|>
argument_list|()
operator|.
name|go
argument_list|()
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|expected
parameter_list|)
block|{}
block|}
end_function

begin_class
DECL|class|ITryToSerializeMyTypeVariable
specifier|private
specifier|static
class|class
name|ITryToSerializeMyTypeVariable
parameter_list|<
name|T
parameter_list|>
block|{
DECL|method|go ()
name|void
name|go
parameter_list|()
block|{
name|SerializableTester
operator|.
name|reserialize
argument_list|(
name|TypeToken
operator|.
name|of
argument_list|(
operator|new
name|TypeCapture
argument_list|<
name|T
argument_list|>
argument_list|()
block|{}
operator|.
name|capture
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

begin_function
DECL|method|reserialize (T object)
specifier|private
specifier|static
parameter_list|<
name|T
parameter_list|>
name|T
name|reserialize
parameter_list|(
name|T
name|object
parameter_list|)
block|{
name|T
name|copy
init|=
name|SerializableTester
operator|.
name|reserialize
argument_list|(
name|object
argument_list|)
decl_stmt|;
operator|new
name|EqualsTester
argument_list|()
operator|.
name|addEqualityGroup
argument_list|(
name|object
argument_list|,
name|copy
argument_list|)
operator|.
name|testEquals
argument_list|()
expr_stmt|;
return|return
name|copy
return|;
block|}
end_function

begin_function
DECL|method|testTypeResolutionAfterReserialized ()
specifier|public
name|void
name|testTypeResolutionAfterReserialized
parameter_list|()
block|{
name|reserialize
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|String
argument_list|>
argument_list|()
block|{}
argument_list|)
expr_stmt|;
name|reserialize
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|)
expr_stmt|;
name|TypeToken
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|>
name|reserialized
init|=
name|reserialize
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|reserialized
argument_list|,
name|substitute
argument_list|(
name|reserialized
argument_list|,
name|String
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|substitute (TypeToken<T> type, Class<X> arg)
specifier|private
specifier|static
parameter_list|<
name|T
parameter_list|,
name|X
parameter_list|>
name|TypeToken
argument_list|<
name|T
argument_list|>
name|substitute
parameter_list|(
name|TypeToken
argument_list|<
name|T
argument_list|>
name|type
parameter_list|,
name|Class
argument_list|<
name|X
argument_list|>
name|arg
parameter_list|)
block|{
return|return
name|type
operator|.
name|where
argument_list|(
operator|new
name|TypeParameter
argument_list|<
name|X
argument_list|>
argument_list|()
block|{}
argument_list|,
name|arg
argument_list|)
return|;
block|}
end_function

begin_class
DECL|class|ToReproduceGenericSignatureFormatError
specifier|private
specifier|abstract
specifier|static
class|class
name|ToReproduceGenericSignatureFormatError
parameter_list|<
name|V
parameter_list|>
block|{
DECL|class|BaseOuter
specifier|private
specifier|abstract
class|class
name|BaseOuter
block|{
DECL|class|BaseInner
specifier|abstract
class|class
name|BaseInner
block|{}
block|}
DECL|class|SubOuter
specifier|private
specifier|abstract
class|class
name|SubOuter
extends|extends
name|BaseOuter
block|{
DECL|class|SubInner
specifier|private
specifier|abstract
class|class
name|SubInner
extends|extends
name|BaseInner
block|{}
block|}
block|}
end_class

begin_comment
comment|// For Guava bug http://code.google.com/p/guava-libraries/issues/detail?id=1025
end_comment

begin_function
DECL|method|testDespiteGenericSignatureFormatError ()
specifier|public
name|void
name|testDespiteGenericSignatureFormatError
parameter_list|()
block|{
name|ImmutableSet
operator|.
name|copyOf
argument_list|(
name|TypeToken
operator|.
name|of
argument_list|(
name|ToReproduceGenericSignatureFormatError
operator|.
name|SubOuter
operator|.
name|SubInner
operator|.
name|class
argument_list|)
operator|.
name|getTypes
argument_list|()
operator|.
name|rawTypes
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function

begin_class
DECL|class|Entry
specifier|private
specifier|abstract
specifier|static
class|class
name|Entry
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
block|{
DECL|method|keyType ()
name|TypeToken
argument_list|<
name|K
argument_list|>
name|keyType
parameter_list|()
block|{
return|return
operator|new
name|TypeToken
argument_list|<
name|K
argument_list|>
argument_list|(
name|getClass
argument_list|()
argument_list|)
block|{}
return|;
block|}
DECL|method|valueType ()
name|TypeToken
argument_list|<
name|V
argument_list|>
name|valueType
parameter_list|()
block|{
return|return
operator|new
name|TypeToken
argument_list|<
name|V
argument_list|>
argument_list|(
name|getClass
argument_list|()
argument_list|)
block|{}
return|;
block|}
block|}
end_class

begin_comment
comment|// The A and B type parameters are used inside the test to test type variable
end_comment

begin_function
DECL|method|testEquals ()
specifier|public
parameter_list|<
name|A
parameter_list|,
name|B
parameter_list|>
name|void
name|testEquals
parameter_list|()
block|{
operator|new
name|EqualsTester
argument_list|()
operator|.
name|addEqualityGroup
argument_list|(
name|TypeToken
operator|.
name|of
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|,
name|TypeToken
operator|.
name|of
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|,
operator|new
name|Entry
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|()
block|{}
operator|.
name|keyType
argument_list|()
argument_list|,
operator|new
name|Entry
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
argument_list|()
block|{}
operator|.
name|valueType
argument_list|()
argument_list|,
operator|new
name|TypeToken
argument_list|<
name|String
argument_list|>
argument_list|()
block|{}
argument_list|,
operator|new
name|TypeToken
argument_list|<
name|String
argument_list|>
argument_list|()
block|{}
argument_list|)
operator|.
name|addEqualityGroup
argument_list|(
name|TypeToken
operator|.
name|of
argument_list|(
name|Integer
operator|.
name|class
argument_list|)
argument_list|,
operator|new
name|TypeToken
argument_list|<
name|Integer
argument_list|>
argument_list|()
block|{}
argument_list|,
operator|new
name|Entry
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
argument_list|()
block|{}
operator|.
name|keyType
argument_list|()
argument_list|,
operator|new
name|Entry
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|()
block|{}
operator|.
name|valueType
argument_list|()
argument_list|)
operator|.
name|addEqualityGroup
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|,
operator|new
name|TypeToken
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|)
operator|.
name|addEqualityGroup
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|List
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|()
block|{}
operator|,
operator|new
name|TypeToken
argument_list|<
name|List
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|()
block|{}
block|)
function|.addEqualityGroup
parameter_list|(
function|new TypeToken<Map<A
operator|,
function|?>>
parameter_list|()
block|{}
end_function

begin_operator
operator|,
end_operator

begin_expr_stmt
operator|new
name|TypeToken
argument_list|<
name|Map
argument_list|<
name|A
argument_list|,
name|?
argument_list|>
argument_list|>
argument_list|()
block|{}
end_expr_stmt

begin_expr_stmt
unit|)
operator|.
name|addEqualityGroup
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|Map
argument_list|<
name|B
argument_list|,
name|?
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|)
operator|.
name|addEqualityGroup
argument_list|(
name|TypeToken
operator|.
name|of
argument_list|(
operator|new
name|TypeCapture
argument_list|<
name|A
argument_list|>
argument_list|()
block|{}
operator|.
name|capture
argument_list|()
argument_list|)
argument_list|,
name|TypeToken
operator|.
name|of
argument_list|(
operator|new
name|TypeCapture
argument_list|<
name|A
argument_list|>
argument_list|()
block|{}
operator|.
name|capture
argument_list|()
argument_list|)
argument_list|)
operator|.
name|addEqualityGroup
argument_list|(
name|TypeToken
operator|.
name|of
argument_list|(
operator|new
name|TypeCapture
argument_list|<
name|B
argument_list|>
argument_list|()
block|{}
operator|.
name|capture
argument_list|()
argument_list|)
argument_list|)
operator|.
name|testEquals
argument_list|()
expr_stmt|;
end_expr_stmt

begin_comment
unit|}
comment|// T is used inside to test type variable
end_comment

begin_function
DECL|method|testToString ()
unit|public
parameter_list|<
name|T
parameter_list|>
name|void
name|testToString
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|String
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
operator|new
name|TypeToken
argument_list|<
name|String
argument_list|>
argument_list|()
block|{}
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"T"
argument_list|,
name|TypeToken
operator|.
name|of
argument_list|(
operator|new
name|TypeCapture
argument_list|<
name|T
argument_list|>
argument_list|()
block|{}
operator|.
name|capture
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"java.lang.String"
argument_list|,
operator|new
name|Entry
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|()
block|{}
operator|.
name|keyType
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|mapOf (Class<K> keyType, Class<V> valueType)
specifier|private
specifier|static
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
name|TypeToken
argument_list|<
name|Map
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|mapOf
parameter_list|(
name|Class
argument_list|<
name|K
argument_list|>
name|keyType
parameter_list|,
name|Class
argument_list|<
name|V
argument_list|>
name|valueType
parameter_list|)
block|{
return|return
operator|new
name|TypeToken
argument_list|<
name|Map
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
argument_list|()
block|{}
operator|.
name|where
argument_list|(
operator|new
name|TypeParameter
argument_list|<
name|K
argument_list|>
argument_list|()
block|{}
argument_list|,
name|keyType
argument_list|)
operator|.
name|where
argument_list|(
operator|new
name|TypeParameter
argument_list|<
name|V
argument_list|>
argument_list|()
block|{}
argument_list|,
name|valueType
argument_list|)
return|;
block|}
end_function

begin_function
DECL|method|arrayOf (Class<T> componentType)
specifier|private
specifier|static
parameter_list|<
name|T
parameter_list|>
name|TypeToken
argument_list|<
name|T
index|[]
argument_list|>
name|arrayOf
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|componentType
parameter_list|)
block|{
return|return
operator|new
name|TypeToken
argument_list|<
name|T
index|[]
argument_list|>
argument_list|()
block|{}
operator|.
name|where
argument_list|(
operator|new
name|TypeParameter
argument_list|<
name|T
argument_list|>
argument_list|()
block|{}
argument_list|,
name|componentType
argument_list|)
return|;
block|}
end_function

begin_function
DECL|method|testNulls ()
specifier|public
parameter_list|<
name|T
parameter_list|>
name|void
name|testNulls
parameter_list|()
block|{
operator|new
name|NullPointerTester
argument_list|()
operator|.
name|testAllPublicStaticMethods
argument_list|(
name|TypeToken
operator|.
name|class
argument_list|)
expr_stmt|;
operator|new
name|NullPointerTester
argument_list|()
operator|.
name|setDefault
argument_list|(
name|TypeParameter
operator|.
name|class
argument_list|,
operator|new
name|TypeParameter
argument_list|<
name|T
argument_list|>
argument_list|()
block|{}
argument_list|)
operator|.
name|testAllPublicInstanceMethods
argument_list|(
name|TypeToken
operator|.
name|of
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_class
DECL|class|Assignability
specifier|private
specifier|static
class|class
name|Assignability
parameter_list|<
name|From
parameter_list|,
name|To
parameter_list|>
block|{
DECL|method|isAssignable ()
name|boolean
name|isAssignable
parameter_list|()
block|{
return|return
operator|new
name|TypeToken
argument_list|<
name|To
argument_list|>
argument_list|(
name|getClass
argument_list|()
argument_list|)
block|{}
operator|.
name|isSupertypeOf
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|From
argument_list|>
argument_list|(
name|getClass
argument_list|()
argument_list|)
block|{}
argument_list|)
return|;
block|}
DECL|method|of ()
specifier|static
parameter_list|<
name|From
parameter_list|,
name|To
parameter_list|>
name|Assignability
argument_list|<
name|From
argument_list|,
name|To
argument_list|>
name|of
parameter_list|()
block|{
return|return
operator|new
name|Assignability
argument_list|<
name|From
argument_list|,
name|To
argument_list|>
argument_list|()
return|;
block|}
block|}
end_class

begin_function
DECL|method|assertAssignable (TypeToken<?> from, TypeToken<?> to)
specifier|private
specifier|static
name|void
name|assertAssignable
parameter_list|(
name|TypeToken
argument_list|<
name|?
argument_list|>
name|from
parameter_list|,
name|TypeToken
argument_list|<
name|?
argument_list|>
name|to
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|from
operator|.
name|getType
argument_list|()
operator|+
literal|" is expected to be assignable to "
operator|+
name|to
operator|.
name|getType
argument_list|()
argument_list|,
name|to
operator|.
name|isSupertypeOf
argument_list|(
name|from
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|to
operator|.
name|getType
argument_list|()
operator|+
literal|" is expected to be a supertype of "
operator|+
name|from
operator|.
name|getType
argument_list|()
argument_list|,
name|to
operator|.
name|isSupertypeOf
argument_list|(
name|from
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|from
operator|.
name|getType
argument_list|()
operator|+
literal|" is expected to be a subtype of "
operator|+
name|to
operator|.
name|getType
argument_list|()
argument_list|,
name|from
operator|.
name|isSubtypeOf
argument_list|(
name|to
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|assertNotAssignable (TypeToken<?> from, TypeToken<?> to)
specifier|private
specifier|static
name|void
name|assertNotAssignable
parameter_list|(
name|TypeToken
argument_list|<
name|?
argument_list|>
name|from
parameter_list|,
name|TypeToken
argument_list|<
name|?
argument_list|>
name|to
parameter_list|)
block|{
name|assertFalse
argument_list|(
name|from
operator|.
name|getType
argument_list|()
operator|+
literal|" shouldn't be assignable to "
operator|+
name|to
operator|.
name|getType
argument_list|()
argument_list|,
name|to
operator|.
name|isSupertypeOf
argument_list|(
name|from
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|to
operator|.
name|getType
argument_list|()
operator|+
literal|" shouldn't be a supertype of "
operator|+
name|from
operator|.
name|getType
argument_list|()
argument_list|,
name|to
operator|.
name|isSupertypeOf
argument_list|(
name|from
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|from
operator|.
name|getType
argument_list|()
operator|+
literal|" shouldn't be a subtype of "
operator|+
name|to
operator|.
name|getType
argument_list|()
argument_list|,
name|from
operator|.
name|isSubtypeOf
argument_list|(
name|to
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|assertHasArrayInterfaces (TypeToken<?> arrayType)
specifier|private
specifier|static
name|void
name|assertHasArrayInterfaces
parameter_list|(
name|TypeToken
argument_list|<
name|?
argument_list|>
name|arrayType
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|arrayInterfaces
argument_list|()
argument_list|,
name|ImmutableSet
operator|.
name|copyOf
argument_list|(
name|arrayType
operator|.
name|getGenericInterfaces
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|arrayInterfaces ()
specifier|private
specifier|static
name|ImmutableSet
argument_list|<
name|TypeToken
argument_list|<
name|?
argument_list|>
argument_list|>
name|arrayInterfaces
parameter_list|()
block|{
name|ImmutableSet
operator|.
name|Builder
argument_list|<
name|TypeToken
argument_list|<
name|?
argument_list|>
argument_list|>
name|builder
init|=
name|ImmutableSet
operator|.
name|builder
argument_list|()
decl_stmt|;
for|for
control|(
name|Class
argument_list|<
name|?
argument_list|>
name|interfaceType
range|:
name|Object
index|[]
operator|.
expr|class
operator|.
name|getInterfaces
argument_list|()
control|)
block|{
name|builder
operator|.
name|add
argument_list|(
name|TypeToken
operator|.
name|of
argument_list|(
name|interfaceType
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
end_function

begin_function
DECL|method|assertIsPrimitive (TypeToken<?> type)
specifier|private
specifier|static
name|void
name|assertIsPrimitive
parameter_list|(
name|TypeToken
argument_list|<
name|?
argument_list|>
name|type
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|type
operator|.
name|isPrimitive
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotWrapper
argument_list|(
name|type
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|TypeToken
operator|.
name|of
argument_list|(
name|Primitives
operator|.
name|wrap
argument_list|(
operator|(
name|Class
argument_list|<
name|?
argument_list|>
operator|)
name|type
operator|.
name|getType
argument_list|()
argument_list|)
argument_list|)
argument_list|,
name|type
operator|.
name|wrap
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|assertNotPrimitive (TypeToken<?> type)
specifier|private
specifier|static
name|void
name|assertNotPrimitive
parameter_list|(
name|TypeToken
argument_list|<
name|?
argument_list|>
name|type
parameter_list|)
block|{
name|assertFalse
argument_list|(
name|type
operator|.
name|isPrimitive
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|type
argument_list|,
name|type
operator|.
name|wrap
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|assertIsWrapper (TypeToken<?> type)
specifier|private
specifier|static
name|void
name|assertIsWrapper
parameter_list|(
name|TypeToken
argument_list|<
name|?
argument_list|>
name|type
parameter_list|)
block|{
name|assertNotPrimitive
argument_list|(
name|type
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|TypeToken
operator|.
name|of
argument_list|(
name|Primitives
operator|.
name|unwrap
argument_list|(
operator|(
name|Class
argument_list|<
name|?
argument_list|>
operator|)
name|type
operator|.
name|getType
argument_list|()
argument_list|)
argument_list|)
argument_list|,
name|type
operator|.
name|unwrap
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|assertNotWrapper (TypeToken<?> type)
specifier|private
specifier|static
name|void
name|assertNotWrapper
parameter_list|(
name|TypeToken
argument_list|<
name|?
argument_list|>
name|type
parameter_list|)
block|{
name|assertSame
argument_list|(
name|type
argument_list|,
name|type
operator|.
name|unwrap
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|assertNotPrimitiveNorWrapper (TypeToken<?> type)
specifier|private
specifier|static
name|void
name|assertNotPrimitiveNorWrapper
parameter_list|(
name|TypeToken
argument_list|<
name|?
argument_list|>
name|type
parameter_list|)
block|{
name|assertNotPrimitive
argument_list|(
name|type
argument_list|)
expr_stmt|;
name|assertNotWrapper
argument_list|(
name|type
argument_list|)
expr_stmt|;
block|}
end_function

begin_interface
DECL|interface|BaseInterface
specifier|private
interface|interface
name|BaseInterface
block|{}
end_interface

begin_class
DECL|class|Base
specifier|private
specifier|static
class|class
name|Base
implements|implements
name|BaseInterface
block|{}
end_class

begin_class
DECL|class|Sub
specifier|private
specifier|static
class|class
name|Sub
extends|extends
name|Base
block|{}
end_class

begin_function
DECL|method|makeUnmodifiable (Collection<?> actual)
specifier|private
specifier|static
name|IterableSubject
argument_list|<
name|?
argument_list|,
name|Object
argument_list|,
name|?
argument_list|>
name|makeUnmodifiable
parameter_list|(
name|Collection
argument_list|<
name|?
argument_list|>
name|actual
parameter_list|)
block|{
return|return
name|assertThat
argument_list|(
name|Collections
operator|.
expr|<
name|Object
operator|>
name|unmodifiableCollection
argument_list|(
name|actual
argument_list|)
argument_list|)
return|;
block|}
end_function

unit|}
end_unit

