begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2010 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.collect
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|caliper
operator|.
name|Param
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|caliper
operator|.
name|Runner
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|caliper
operator|.
name|SimpleBenchmark
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * A Caliper benchmark used to track Builder performance.  Currently supports:  * ImmutableMap's copyOf and addAll methods.  *  * @author Paul Lindner  */
end_comment

begin_class
DECL|class|ImmutableMapCreationBenchmark
specifier|public
class|class
name|ImmutableMapCreationBenchmark
extends|extends
name|SimpleBenchmark
block|{
DECL|field|size
annotation|@
name|Param
argument_list|(
block|{
literal|"0"
block|,
literal|"1"
block|,
literal|"5"
block|,
literal|"50"
block|,
literal|"500"
block|,
literal|"5000"
block|,
literal|"50000"
block|}
argument_list|)
specifier|private
name|int
name|size
decl_stmt|;
comment|/** Holds testdata that is inserted into the Builder, populated by setUp() */
DECL|field|testData
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|testData
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
comment|/** A map we insert into, in class scope to keep the JVM from optimizing local references */
DECL|field|testMap
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|testMap
decl_stmt|;
comment|// Preinitialize these to keep them out of the inner benchmark loop
DECL|field|SINGLETON_MAP
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|SINGLETON_MAP
init|=
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"1"
argument_list|,
literal|"1"
argument_list|)
decl_stmt|;
DECL|field|EMPTY_MAP
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|EMPTY_MAP
init|=
name|Collections
operator|.
name|emptyMap
argument_list|()
decl_stmt|;
annotation|@
name|Override
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
block|{
if|if
condition|(
name|size
operator|==
literal|0
condition|)
block|{
name|testData
operator|=
name|EMPTY_MAP
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|size
operator|==
literal|1
condition|)
block|{
name|testData
operator|=
name|SINGLETON_MAP
expr_stmt|;
block|}
else|else
block|{
name|testData
operator|=
name|Maps
operator|.
name|newHashMap
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|String
name|number
init|=
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|testData
operator|.
name|put
argument_list|(
name|number
argument_list|,
name|number
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Test performance of ImmutableMap.copyOf()    *    * @param reps repetitions (used by Caliper)    * @return a dummy string to ensure that the JVM does not optimize our code    */
DECL|method|timeCopyOf (int reps)
specifier|public
name|String
name|timeCopyOf
parameter_list|(
name|int
name|reps
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|reps
condition|;
name|i
operator|++
control|)
block|{
name|testMap
operator|=
name|ImmutableMap
operator|.
name|copyOf
argument_list|(
name|testData
argument_list|)
expr_stmt|;
block|}
return|return
name|testMap
operator|.
name|get
argument_list|(
literal|""
argument_list|)
return|;
block|}
comment|/**    * Test performance of the ImmutableMap.Builder putAll method.    *    * @param reps repetitions (used by Caliper)    * @return a dummy string to ensure that the JVM does not optimize our code    */
DECL|method|timeBuilder (int reps)
specifier|public
name|String
name|timeBuilder
parameter_list|(
name|int
name|reps
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|reps
condition|;
name|i
operator|++
control|)
block|{
name|ImmutableMap
operator|.
name|Builder
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|builder
init|=
name|ImmutableMap
operator|.
name|builder
argument_list|()
decl_stmt|;
name|testMap
operator|=
name|builder
operator|.
name|putAll
argument_list|(
name|testData
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
return|return
name|testMap
operator|.
name|get
argument_list|(
literal|""
argument_list|)
return|;
block|}
DECL|method|main (String[] args)
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
name|Runner
operator|.
name|main
argument_list|(
name|ImmutableMapCreationBenchmark
operator|.
name|class
argument_list|,
name|args
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

