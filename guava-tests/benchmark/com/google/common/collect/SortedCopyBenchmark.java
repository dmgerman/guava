begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2014 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except  * in compliance with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software distributed under the License  * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express  * or implied. See the License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|com.google.common.collect
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkArgument
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|caliper
operator|.
name|BeforeExperiment
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|caliper
operator|.
name|Benchmark
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|caliper
operator|.
name|Param
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_comment
comment|/**  * Provides supporting data for performance notes in the documentation of {@link  * Ordering#sortedCopy} and {@link Ordering#immutableSortedCopy}, as well as for automated code  * suggestions.  *  */
end_comment

begin_class
DECL|class|SortedCopyBenchmark
specifier|public
class|class
name|SortedCopyBenchmark
block|{
annotation|@
name|Param
argument_list|(
block|{
literal|"1"
block|,
literal|"10"
block|,
literal|"1000"
block|,
literal|"1000000"
block|}
argument_list|)
DECL|field|size
name|int
name|size
decl_stmt|;
comment|// logarithmic triangular
DECL|field|mutable
annotation|@
name|Param
name|boolean
name|mutable
decl_stmt|;
DECL|field|inputOrder
annotation|@
name|Param
name|InputOrder
name|inputOrder
decl_stmt|;
DECL|enum|InputOrder
enum|enum
name|InputOrder
block|{
DECL|enumConstant|SORTED
name|SORTED
block|{
annotation|@
name|Override
name|void
name|arrange
parameter_list|(
name|List
argument_list|<
name|Integer
argument_list|>
name|list
parameter_list|)
block|{
name|Collections
operator|.
name|sort
argument_list|(
name|list
argument_list|)
expr_stmt|;
block|}
block|}
block|,
DECL|enumConstant|ALMOST_SORTED
name|ALMOST_SORTED
block|{
annotation|@
name|Override
name|void
name|arrange
parameter_list|(
name|List
argument_list|<
name|Integer
argument_list|>
name|list
parameter_list|)
block|{
name|Collections
operator|.
name|sort
argument_list|(
name|list
argument_list|)
expr_stmt|;
if|if
condition|(
name|list
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
name|int
name|i
init|=
operator|(
name|list
operator|.
name|size
argument_list|()
operator|-
literal|1
operator|)
operator|/
literal|2
decl_stmt|;
name|Collections
operator|.
name|swap
argument_list|(
name|list
argument_list|,
name|i
argument_list|,
name|i
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|,
DECL|enumConstant|RANDOM
name|RANDOM
block|{
annotation|@
name|Override
name|void
name|arrange
parameter_list|(
name|List
argument_list|<
name|Integer
argument_list|>
name|list
parameter_list|)
block|{}
block|}
block|;
DECL|method|arrange (List<Integer> list)
specifier|abstract
name|void
name|arrange
parameter_list|(
name|List
argument_list|<
name|Integer
argument_list|>
name|list
parameter_list|)
function_decl|;
block|}
DECL|field|input
specifier|private
name|ImmutableList
argument_list|<
name|Integer
argument_list|>
name|input
decl_stmt|;
annotation|@
name|BeforeExperiment
DECL|method|setUp ()
name|void
name|setUp
parameter_list|()
block|{
name|checkArgument
argument_list|(
name|size
operator|>
literal|0
argument_list|,
literal|"empty collection not supported"
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|Integer
argument_list|>
name|set
init|=
operator|new
name|LinkedHashSet
argument_list|<>
argument_list|(
name|size
argument_list|)
decl_stmt|;
name|Random
name|random
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
while|while
condition|(
name|set
operator|.
name|size
argument_list|()
operator|<
name|size
condition|)
block|{
name|set
operator|.
name|add
argument_list|(
name|random
operator|.
name|nextInt
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|Integer
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|set
argument_list|)
decl_stmt|;
name|inputOrder
operator|.
name|arrange
argument_list|(
name|list
argument_list|)
expr_stmt|;
name|input
operator|=
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|list
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Benchmark
DECL|method|collections (int reps)
name|int
name|collections
parameter_list|(
name|int
name|reps
parameter_list|)
block|{
name|int
name|dummy
init|=
literal|0
decl_stmt|;
comment|// Yes, this could be done more elegantly
if|if
condition|(
name|mutable
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|reps
condition|;
name|i
operator|++
control|)
block|{
name|List
argument_list|<
name|Integer
argument_list|>
name|copy
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|input
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|copy
argument_list|)
expr_stmt|;
name|dummy
operator|+=
name|copy
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|reps
condition|;
name|i
operator|++
control|)
block|{
name|List
argument_list|<
name|Integer
argument_list|>
name|copy
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|input
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|copy
argument_list|)
expr_stmt|;
name|dummy
operator|+=
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|copy
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|dummy
return|;
block|}
annotation|@
name|Benchmark
DECL|method|ordering (int reps)
name|int
name|ordering
parameter_list|(
name|int
name|reps
parameter_list|)
block|{
name|int
name|dummy
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|mutable
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|reps
condition|;
name|i
operator|++
control|)
block|{
name|dummy
operator|+=
name|ORDERING
operator|.
name|sortedCopy
argument_list|(
name|input
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|reps
condition|;
name|i
operator|++
control|)
block|{
name|dummy
operator|+=
name|ORDERING
operator|.
name|immutableSortedCopy
argument_list|(
name|input
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|dummy
return|;
block|}
annotation|@
name|Benchmark
DECL|method|sortedSet (int reps)
name|int
name|sortedSet
parameter_list|(
name|int
name|reps
parameter_list|)
block|{
name|int
name|dummy
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|mutable
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|reps
condition|;
name|i
operator|++
control|)
block|{
name|dummy
operator|+=
operator|new
name|TreeSet
argument_list|<
name|Integer
argument_list|>
argument_list|(
name|input
argument_list|)
operator|.
name|first
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|reps
condition|;
name|i
operator|++
control|)
block|{
name|dummy
operator|+=
name|ImmutableSortedSet
operator|.
name|copyOf
argument_list|(
name|input
argument_list|)
operator|.
name|first
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|dummy
return|;
block|}
DECL|field|ORDERING
specifier|private
specifier|static
specifier|final
name|Ordering
argument_list|<
name|Integer
argument_list|>
name|ORDERING
init|=
name|Ordering
operator|.
name|natural
argument_list|()
decl_stmt|;
block|}
end_class

end_unit

