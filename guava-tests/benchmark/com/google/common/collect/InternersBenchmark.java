begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2011 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.collect
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|caliper
operator|.
name|Benchmark
import|;
end_import

begin_comment
comment|/**  * Benchmarking interners.  *  * @author Dimitris Andreou  */
end_comment

begin_class
DECL|class|InternersBenchmark
specifier|public
class|class
name|InternersBenchmark
block|{
annotation|@
name|Benchmark
DECL|method|weakInterner (int reps)
name|int
name|weakInterner
parameter_list|(
name|int
name|reps
parameter_list|)
block|{
name|Interner
argument_list|<
name|String
argument_list|>
name|interner
init|=
name|Interners
operator|.
name|newWeakInterner
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|reps
condition|;
name|i
operator|++
control|)
block|{
name|interner
operator|.
name|intern
argument_list|(
name|Double
operator|.
name|toHexString
argument_list|(
name|Math
operator|.
name|random
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|reps
return|;
block|}
annotation|@
name|Benchmark
DECL|method|strongInterner (int reps)
name|int
name|strongInterner
parameter_list|(
name|int
name|reps
parameter_list|)
block|{
name|Interner
argument_list|<
name|String
argument_list|>
name|interner
init|=
name|Interners
operator|.
name|newStrongInterner
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|reps
condition|;
name|i
operator|++
control|)
block|{
name|interner
operator|.
name|intern
argument_list|(
name|Double
operator|.
name|toHexString
argument_list|(
name|Math
operator|.
name|random
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|reps
return|;
block|}
annotation|@
name|Benchmark
DECL|method|stringIntern (int reps)
name|int
name|stringIntern
parameter_list|(
name|int
name|reps
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|reps
condition|;
name|i
operator|++
control|)
block|{
name|String
name|unused
init|=
name|Double
operator|.
name|toHexString
argument_list|(
name|Math
operator|.
name|random
argument_list|()
argument_list|)
operator|.
name|intern
argument_list|()
decl_stmt|;
block|}
return|return
name|reps
return|;
block|}
block|}
end_class

end_unit

