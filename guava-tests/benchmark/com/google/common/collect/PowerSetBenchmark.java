begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2010 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.collect
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|DiscreteDomain
operator|.
name|integers
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|caliper
operator|.
name|Benchmark
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|caliper
operator|.
name|Param
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|caliper
operator|.
name|runner
operator|.
name|CaliperMain
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**  * Very simple powerSet iteration benchmark.  *  * @author Kevin Bourrillion  */
end_comment

begin_class
DECL|class|PowerSetBenchmark
specifier|public
class|class
name|PowerSetBenchmark
extends|extends
name|Benchmark
block|{
DECL|field|elements
annotation|@
name|Param
argument_list|(
block|{
literal|"2"
block|,
literal|"4"
block|,
literal|"8"
block|,
literal|"16"
block|}
argument_list|)
name|int
name|elements
decl_stmt|;
DECL|field|powerSet
name|Set
argument_list|<
name|Set
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|powerSet
decl_stmt|;
DECL|method|setUp ()
annotation|@
name|Override
specifier|protected
name|void
name|setUp
parameter_list|()
block|{
name|Set
argument_list|<
name|Integer
argument_list|>
name|set
init|=
name|Range
operator|.
name|closed
argument_list|(
literal|1
argument_list|,
name|elements
argument_list|)
operator|.
name|asSet
argument_list|(
name|integers
argument_list|()
argument_list|)
decl_stmt|;
name|powerSet
operator|=
name|Sets
operator|.
name|powerSet
argument_list|(
name|set
argument_list|)
expr_stmt|;
block|}
DECL|method|timeIteration (int reps)
specifier|public
name|int
name|timeIteration
parameter_list|(
name|int
name|reps
parameter_list|)
block|{
name|int
name|sum
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|reps
condition|;
name|i
operator|++
control|)
block|{
for|for
control|(
name|Set
argument_list|<
name|Integer
argument_list|>
name|subset
range|:
name|powerSet
control|)
block|{
for|for
control|(
name|Integer
name|value
range|:
name|subset
control|)
block|{
name|sum
operator|+=
name|value
expr_stmt|;
block|}
block|}
block|}
return|return
name|sum
return|;
block|}
DECL|method|main (String[] args)
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
name|CaliperMain
operator|.
name|main
argument_list|(
name|PowerSetBenchmark
operator|.
name|class
argument_list|,
name|args
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

