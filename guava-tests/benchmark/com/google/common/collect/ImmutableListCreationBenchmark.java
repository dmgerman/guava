begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2012 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.collect
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|caliper
operator|.
name|Benchmark
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|caliper
operator|.
name|Param
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|caliper
operator|.
name|runner
operator|.
name|CaliperMain
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Benchmark for various ways to create an {@code ImmutableList}.  *  * @author Louis Wasserman  */
end_comment

begin_class
DECL|class|ImmutableListCreationBenchmark
specifier|public
class|class
name|ImmutableListCreationBenchmark
extends|extends
name|Benchmark
block|{
annotation|@
name|Param
argument_list|(
block|{
literal|"10"
block|,
literal|"1000"
block|,
literal|"1000000"
block|}
argument_list|)
DECL|field|size
name|int
name|size
decl_stmt|;
DECL|field|OBJECT
specifier|private
specifier|static
specifier|final
name|Object
name|OBJECT
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
DECL|method|timeBuilderAdd (int reps)
specifier|public
name|int
name|timeBuilderAdd
parameter_list|(
name|int
name|reps
parameter_list|)
block|{
name|int
name|size
init|=
name|this
operator|.
name|size
decl_stmt|;
name|int
name|dummy
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|rep
init|=
literal|0
init|;
name|rep
operator|<
name|reps
condition|;
name|rep
operator|++
control|)
block|{
name|ImmutableList
operator|.
name|Builder
argument_list|<
name|Object
argument_list|>
name|builder
init|=
name|ImmutableList
operator|.
name|builder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|builder
operator|.
name|add
argument_list|(
name|OBJECT
argument_list|)
expr_stmt|;
block|}
name|dummy
operator|+=
name|builder
operator|.
name|build
argument_list|()
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
return|return
name|dummy
return|;
block|}
DECL|method|timePreSizedBuilderAdd (int reps)
specifier|public
name|int
name|timePreSizedBuilderAdd
parameter_list|(
name|int
name|reps
parameter_list|)
block|{
name|int
name|size
init|=
name|this
operator|.
name|size
decl_stmt|;
name|int
name|dummy
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|rep
init|=
literal|0
init|;
name|rep
operator|<
name|reps
condition|;
name|rep
operator|++
control|)
block|{
name|ImmutableList
operator|.
name|Builder
argument_list|<
name|Object
argument_list|>
name|builder
init|=
operator|new
name|ImmutableList
operator|.
name|Builder
argument_list|<
name|Object
argument_list|>
argument_list|(
name|size
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|builder
operator|.
name|add
argument_list|(
name|OBJECT
argument_list|)
expr_stmt|;
block|}
name|dummy
operator|+=
name|builder
operator|.
name|build
argument_list|()
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
return|return
name|dummy
return|;
block|}
DECL|method|timeCopyArrayList (int reps)
specifier|public
name|int
name|timeCopyArrayList
parameter_list|(
name|int
name|reps
parameter_list|)
block|{
name|int
name|size
init|=
name|this
operator|.
name|size
decl_stmt|;
name|int
name|dummy
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|rep
init|=
literal|0
init|;
name|rep
operator|<
name|reps
condition|;
name|rep
operator|++
control|)
block|{
name|List
argument_list|<
name|Object
argument_list|>
name|builder
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|builder
operator|.
name|add
argument_list|(
name|OBJECT
argument_list|)
expr_stmt|;
block|}
name|dummy
operator|+=
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|builder
argument_list|)
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
return|return
name|dummy
return|;
block|}
DECL|method|timeCopyPreSizedArrayList (int reps)
specifier|public
name|int
name|timeCopyPreSizedArrayList
parameter_list|(
name|int
name|reps
parameter_list|)
block|{
name|int
name|size
init|=
name|this
operator|.
name|size
decl_stmt|;
name|int
name|tmp
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|rep
init|=
literal|0
init|;
name|rep
operator|<
name|reps
condition|;
name|rep
operator|++
control|)
block|{
name|List
argument_list|<
name|Object
argument_list|>
name|builder
init|=
name|Lists
operator|.
name|newArrayListWithCapacity
argument_list|(
name|size
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|builder
operator|.
name|add
argument_list|(
name|OBJECT
argument_list|)
expr_stmt|;
block|}
name|tmp
operator|+=
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|builder
argument_list|)
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
return|return
name|tmp
return|;
block|}
DECL|method|main (String[] args)
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
name|CaliperMain
operator|.
name|main
argument_list|(
name|ImmutableListCreationBenchmark
operator|.
name|class
argument_list|,
name|args
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

