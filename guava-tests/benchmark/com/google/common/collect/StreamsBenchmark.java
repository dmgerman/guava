begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2016 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.collect
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|caliper
operator|.
name|BeforeExperiment
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|caliper
operator|.
name|Benchmark
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|caliper
operator|.
name|Param
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|caliper
operator|.
name|api
operator|.
name|SkipThisScenarioException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NoSuchElementException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Supplier
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Stream
import|;
end_import

begin_comment
comment|/**  * Test stream operation speed.  *  * @author Louis Wasserman  */
end_comment

begin_class
DECL|class|StreamsBenchmark
specifier|public
class|class
name|StreamsBenchmark
block|{
annotation|@
name|Param
argument_list|(
block|{
literal|"1"
block|,
literal|"10"
block|,
literal|"100"
block|,
literal|"1000"
block|,
literal|"10000"
block|}
argument_list|)
DECL|field|size
specifier|private
name|int
name|size
decl_stmt|;
DECL|enum|CollectionType
enum|enum
name|CollectionType
block|{
DECL|enumConstant|ARRAY_LIST
name|ARRAY_LIST
argument_list|(
name|ArrayList
operator|::
operator|new
argument_list|)
block|,
DECL|enumConstant|LINKED_LIST
name|LINKED_LIST
argument_list|(
name|LinkedList
operator|::
operator|new
argument_list|)
block|;
DECL|field|supplier
specifier|final
name|Supplier
argument_list|<
name|Collection
argument_list|<
name|Object
argument_list|>
argument_list|>
name|supplier
decl_stmt|;
DECL|method|CollectionType (Supplier<Collection<Object>> supplier)
specifier|private
name|CollectionType
parameter_list|(
name|Supplier
argument_list|<
name|Collection
argument_list|<
name|Object
argument_list|>
argument_list|>
name|supplier
parameter_list|)
block|{
name|this
operator|.
name|supplier
operator|=
name|supplier
expr_stmt|;
block|}
block|}
DECL|field|source
annotation|@
name|Param
specifier|private
name|CollectionType
name|source
decl_stmt|;
DECL|enum|Operation
enum|enum
name|Operation
block|{
DECL|enumConstant|FIND_FIRST
name|FIND_FIRST
block|{
annotation|@
name|Override
name|Object
name|operate
parameter_list|(
name|Stream
argument_list|<
name|?
argument_list|>
name|stream
parameter_list|)
block|{
return|return
name|stream
operator|.
name|findFirst
argument_list|()
return|;
block|}
block|}
block|,
DECL|enumConstant|STREAMS_ONLY_ELEMENT
name|STREAMS_ONLY_ELEMENT
block|{
annotation|@
name|Override
name|Object
name|operate
parameter_list|(
name|Stream
argument_list|<
name|?
argument_list|>
name|stream
parameter_list|)
block|{
try|try
block|{
return|return
name|stream
operator|.
name|collect
argument_list|(
name|MoreCollectors
operator|.
name|onlyElement
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
decl||
name|NoSuchElementException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SkipThisScenarioException
argument_list|()
throw|;
block|}
block|}
block|}
block|,
DECL|enumConstant|STREAMS_FIND_LAST
name|STREAMS_FIND_LAST
block|{
annotation|@
name|Override
name|Object
name|operate
parameter_list|(
name|Stream
argument_list|<
name|?
argument_list|>
name|stream
parameter_list|)
block|{
return|return
name|Streams
operator|.
name|findLast
argument_list|(
name|stream
argument_list|)
return|;
block|}
block|}
block|,
DECL|enumConstant|REDUCE_LAST
name|REDUCE_LAST
block|{
annotation|@
name|Override
name|Object
name|operate
parameter_list|(
name|Stream
argument_list|<
name|?
argument_list|>
name|stream
parameter_list|)
block|{
return|return
name|stream
operator|.
name|reduce
argument_list|(
parameter_list|(
name|a
parameter_list|,
name|b
parameter_list|)
lambda|->
name|b
argument_list|)
return|;
block|}
block|}
block|,
DECL|enumConstant|REDUCE_LAST_PARALLEL
name|REDUCE_LAST_PARALLEL
block|{
annotation|@
name|Override
name|Object
name|operate
parameter_list|(
name|Stream
argument_list|<
name|?
argument_list|>
name|stream
parameter_list|)
block|{
return|return
name|stream
operator|.
name|parallel
argument_list|()
operator|.
name|reduce
argument_list|(
parameter_list|(
name|a
parameter_list|,
name|b
parameter_list|)
lambda|->
name|b
argument_list|)
return|;
block|}
block|}
block|;
DECL|method|operate (Stream<?> stream)
specifier|abstract
name|Object
name|operate
parameter_list|(
name|Stream
argument_list|<
name|?
argument_list|>
name|stream
parameter_list|)
function_decl|;
block|}
DECL|field|operation
annotation|@
name|Param
specifier|private
name|Operation
name|operation
decl_stmt|;
DECL|field|collection
name|Collection
argument_list|<
name|Object
argument_list|>
name|collection
decl_stmt|;
annotation|@
name|BeforeExperiment
DECL|method|setUp ()
name|void
name|setUp
parameter_list|()
block|{
name|collection
operator|=
name|source
operator|.
name|supplier
operator|.
name|get
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|collection
operator|.
name|add
argument_list|(
operator|new
name|Object
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Benchmark
DECL|method|runOperation (int reps)
name|int
name|runOperation
parameter_list|(
name|int
name|reps
parameter_list|)
block|{
name|int
name|result
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|reps
condition|;
name|i
operator|++
control|)
block|{
name|result
operator|+=
name|System
operator|.
name|identityHashCode
argument_list|(
name|operation
operator|.
name|operate
argument_list|(
name|collection
operator|.
name|stream
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
block|}
end_class

end_unit

