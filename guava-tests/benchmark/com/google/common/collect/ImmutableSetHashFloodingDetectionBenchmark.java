begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2019 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.collect
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|caliper
operator|.
name|BeforeExperiment
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|caliper
operator|.
name|Benchmark
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|caliper
operator|.
name|Param
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|IntMath
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|RoundingMode
import|;
end_import

begin_comment
comment|/** Benchmark of implementations of {@link ImmutableSet#hashFloodingDetected(Object[])}. */
end_comment

begin_class
DECL|class|ImmutableSetHashFloodingDetectionBenchmark
specifier|public
class|class
name|ImmutableSetHashFloodingDetectionBenchmark
block|{
DECL|field|TEST_CASES
specifier|private
specifier|static
specifier|final
name|int
name|TEST_CASES
init|=
literal|0x100
decl_stmt|;
annotation|@
name|Param
argument_list|(
block|{
literal|"10"
block|,
literal|"100"
block|,
literal|"1000"
block|,
literal|"10000"
block|}
argument_list|)
DECL|field|size
name|int
name|size
decl_stmt|;
DECL|field|impl
annotation|@
name|Param
name|Impl
name|impl
decl_stmt|;
DECL|field|tables
specifier|private
specifier|static
specifier|final
name|Object
index|[]
index|[]
name|tables
init|=
operator|new
name|Object
index|[
name|TEST_CASES
index|]
index|[]
decl_stmt|;
annotation|@
name|BeforeExperiment
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|int
name|tableSize
init|=
name|ImmutableSet
operator|.
name|chooseTableSize
argument_list|(
name|size
argument_list|)
decl_stmt|;
name|int
name|mask
init|=
name|tableSize
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|TEST_CASES
condition|;
name|i
operator|++
control|)
block|{
name|tables
index|[
name|i
index|]
operator|=
operator|new
name|Object
index|[
name|tableSize
index|]
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|size
condition|;
name|j
operator|++
control|)
block|{
name|Object
name|o
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|k
init|=
name|o
operator|.
name|hashCode
argument_list|()
init|;
condition|;
name|k
operator|++
control|)
block|{
name|int
name|index
init|=
name|k
operator|&
name|mask
decl_stmt|;
if|if
condition|(
name|tables
index|[
name|i
index|]
index|[
name|index
index|]
operator|==
literal|null
condition|)
block|{
name|tables
index|[
name|i
index|]
index|[
name|index
index|]
operator|=
name|o
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
block|}
DECL|enum|Impl
enum|enum
name|Impl
block|{
DECL|enumConstant|EXHAUSTIVE
name|EXHAUSTIVE
block|{
name|int
name|maxRunBeforeFallback
parameter_list|(
name|int
name|tableSize
parameter_list|)
block|{
return|return
literal|12
operator|*
name|IntMath
operator|.
name|log2
argument_list|(
name|tableSize
argument_list|,
name|RoundingMode
operator|.
name|UNNECESSARY
argument_list|)
return|;
block|}
annotation|@
name|Override
name|boolean
name|hashFloodingDetected
parameter_list|(
name|Object
index|[]
name|hashTable
parameter_list|)
block|{
name|int
name|maxRunBeforeFallback
init|=
name|maxRunBeforeFallback
argument_list|(
name|hashTable
operator|.
name|length
argument_list|)
decl_stmt|;
comment|// Test for a run wrapping around the end of the table, then check for runs in the middle.
name|int
name|endOfStartRun
decl_stmt|;
for|for
control|(
name|endOfStartRun
operator|=
literal|0
init|;
name|endOfStartRun
operator|<
name|hashTable
operator|.
name|length
condition|;
control|)
block|{
if|if
condition|(
name|hashTable
index|[
name|endOfStartRun
index|]
operator|==
literal|null
condition|)
block|{
break|break;
block|}
name|endOfStartRun
operator|++
expr_stmt|;
if|if
condition|(
name|endOfStartRun
operator|>
name|maxRunBeforeFallback
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
name|int
name|startOfEndRun
decl_stmt|;
for|for
control|(
name|startOfEndRun
operator|=
name|hashTable
operator|.
name|length
operator|-
literal|1
init|;
name|startOfEndRun
operator|>
name|endOfStartRun
condition|;
name|startOfEndRun
operator|--
control|)
block|{
if|if
condition|(
name|hashTable
index|[
name|startOfEndRun
index|]
operator|==
literal|null
condition|)
block|{
break|break;
block|}
if|if
condition|(
name|endOfStartRun
operator|+
operator|(
name|hashTable
operator|.
name|length
operator|-
literal|1
operator|-
name|startOfEndRun
operator|)
operator|>
name|maxRunBeforeFallback
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
for|for
control|(
name|int
name|i
init|=
name|endOfStartRun
operator|+
literal|1
init|;
name|i
operator|<
name|startOfEndRun
condition|;
name|i
operator|++
control|)
block|{
for|for
control|(
name|int
name|runLength
init|=
literal|0
init|;
name|i
operator|<
name|startOfEndRun
operator|&&
name|hashTable
index|[
name|i
index|]
operator|!=
literal|null
condition|;
name|i
operator|++
control|)
block|{
name|runLength
operator|++
expr_stmt|;
if|if
condition|(
name|runLength
operator|>
name|maxRunBeforeFallback
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
return|return
literal|false
return|;
block|}
block|}
block|,
DECL|enumConstant|SEPARATE_RANGES
name|SEPARATE_RANGES
block|{
name|int
name|maxRunBeforeFallback
parameter_list|(
name|int
name|tableSize
parameter_list|)
block|{
return|return
literal|13
operator|*
name|IntMath
operator|.
name|log2
argument_list|(
name|tableSize
argument_list|,
name|RoundingMode
operator|.
name|UNNECESSARY
argument_list|)
return|;
block|}
annotation|@
name|Override
name|boolean
name|hashFloodingDetected
parameter_list|(
name|Object
index|[]
name|hashTable
parameter_list|)
block|{
name|int
name|maxRunBeforeFallback
init|=
name|maxRunBeforeFallback
argument_list|(
name|hashTable
operator|.
name|length
argument_list|)
decl_stmt|;
comment|// Test for a run wrapping around the end of the table, then check for runs in the middle.
name|int
name|endOfStartRun
decl_stmt|;
for|for
control|(
name|endOfStartRun
operator|=
literal|0
init|;
name|endOfStartRun
operator|<
name|hashTable
operator|.
name|length
condition|;
control|)
block|{
if|if
condition|(
name|hashTable
index|[
name|endOfStartRun
index|]
operator|==
literal|null
condition|)
block|{
break|break;
block|}
name|endOfStartRun
operator|++
expr_stmt|;
if|if
condition|(
name|endOfStartRun
operator|>
name|maxRunBeforeFallback
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
name|int
name|startOfEndRun
decl_stmt|;
for|for
control|(
name|startOfEndRun
operator|=
name|hashTable
operator|.
name|length
operator|-
literal|1
init|;
name|startOfEndRun
operator|>
name|endOfStartRun
condition|;
name|startOfEndRun
operator|--
control|)
block|{
if|if
condition|(
name|hashTable
index|[
name|startOfEndRun
index|]
operator|==
literal|null
condition|)
block|{
break|break;
block|}
if|if
condition|(
name|endOfStartRun
operator|+
operator|(
name|hashTable
operator|.
name|length
operator|-
literal|1
operator|-
name|startOfEndRun
operator|)
operator|>
name|maxRunBeforeFallback
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
comment|// If this part returns true, there is definitely a run of size maxRunBeforeFallback/2.
comment|// If this part returns false, there are definitely no runs of size>= maxRunBeforeFallback.
name|int
name|testBlockSize
init|=
name|maxRunBeforeFallback
operator|/
literal|2
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|endOfStartRun
operator|+
literal|1
init|;
name|i
operator|+
name|testBlockSize
operator|<=
name|startOfEndRun
condition|;
name|i
operator|+=
name|testBlockSize
control|)
block|{
name|boolean
name|runGood
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|testBlockSize
condition|;
name|j
operator|++
control|)
block|{
if|if
condition|(
name|hashTable
index|[
name|i
operator|+
name|j
index|]
operator|==
literal|null
condition|)
block|{
name|runGood
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|runGood
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
block|}
block|;
DECL|method|hashFloodingDetected (Object[] array)
specifier|abstract
name|boolean
name|hashFloodingDetected
parameter_list|(
name|Object
index|[]
name|array
parameter_list|)
function_decl|;
block|}
annotation|@
name|Benchmark
DECL|method|detect (int reps)
specifier|public
name|int
name|detect
parameter_list|(
name|int
name|reps
parameter_list|)
block|{
name|int
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|reps
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|impl
operator|.
name|hashFloodingDetected
argument_list|(
name|tables
index|[
name|i
operator|&
literal|0xFF
index|]
argument_list|)
condition|)
block|{
name|count
operator|++
expr_stmt|;
block|}
block|}
return|return
name|count
return|;
block|}
block|}
end_class

end_unit

