begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2014 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.net
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|net
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|caliper
operator|.
name|Benchmark
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Charsets
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Splitter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLDecoder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_comment
comment|/**  * Compares performance of an old implementation of {@link UriParameterMap#parse(String, Charset)},  * with the current implementation.  */
end_comment

begin_class
DECL|class|UriParameterMapBenchmark
specifier|public
class|class
name|UriParameterMapBenchmark
block|{
DECL|field|NUMBER_OF_RANDOM_PARAMETER_STRINGS
specifier|private
specifier|static
specifier|final
name|int
name|NUMBER_OF_RANDOM_PARAMETER_STRINGS
init|=
literal|1024
decl_stmt|;
DECL|field|MAX_PARAMS_IN_RANDOM_STRING
specifier|private
specifier|static
specifier|final
name|int
name|MAX_PARAMS_IN_RANDOM_STRING
init|=
literal|10
decl_stmt|;
DECL|field|VALUE_ODDS
specifier|private
specifier|static
specifier|final
name|double
name|VALUE_ODDS
init|=
literal|0.7
decl_stmt|;
DECL|field|PARAM_NAMES
specifier|private
specifier|static
specifier|final
name|String
index|[]
name|PARAM_NAMES
init|=
block|{
literal|"n1"
block|,
literal|"name2"
block|,
literal|"name3"
block|,
literal|"name4"
block|,
literal|"name5"
block|,
literal|"name6"
block|,
literal|"name7"
block|,
literal|"longname8"
block|,
literal|"longername9"
block|,
literal|"veryVeryLongName10"
block|}
decl_stmt|;
DECL|field|PARAM_VALUES
specifier|private
specifier|static
specifier|final
name|String
index|[]
name|PARAM_VALUES
init|=
block|{
literal|"v1"
block|,
literal|"value2"
block|,
literal|"value3"
block|,
literal|"value%204"
block|,
literal|"longValueName5"
block|,
literal|"very%20Very%20Long%Name6"
block|,
literal|"ABCDEFGHIJKLMNOPQRSTUVWXYZ%20abcdefghijklmnopqrstuvwxyz%200123456789"
block|}
decl_stmt|;
DECL|field|randomParams
specifier|private
specifier|static
name|String
index|[]
name|randomParams
init|=
name|generateAllRandomParams
argument_list|()
decl_stmt|;
DECL|method|generateAllRandomParams ()
specifier|private
specifier|static
name|String
index|[]
name|generateAllRandomParams
parameter_list|()
block|{
name|String
index|[]
name|params
init|=
operator|new
name|String
index|[
name|NUMBER_OF_RANDOM_PARAMETER_STRINGS
index|]
decl_stmt|;
name|Random
name|random
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
name|randomParams
operator|=
operator|new
name|String
index|[
name|NUMBER_OF_RANDOM_PARAMETER_STRINGS
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUMBER_OF_RANDOM_PARAMETER_STRINGS
condition|;
name|i
operator|++
control|)
block|{
name|params
index|[
name|i
index|]
operator|=
name|generateRandomParams
argument_list|(
name|random
argument_list|)
expr_stmt|;
block|}
return|return
name|params
return|;
block|}
DECL|method|generateRandomParams (Random random)
specifier|private
specifier|static
name|String
name|generateRandomParams
parameter_list|(
name|Random
name|random
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|int
name|numParameters
init|=
name|random
operator|.
name|nextInt
argument_list|(
name|MAX_PARAMS_IN_RANDOM_STRING
operator|-
literal|1
argument_list|)
operator|+
literal|1
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numParameters
condition|;
name|i
operator|++
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|PARAM_NAMES
index|[
name|random
operator|.
name|nextInt
argument_list|(
name|PARAM_NAMES
operator|.
name|length
argument_list|)
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|random
operator|.
name|nextDouble
argument_list|()
operator|<
name|VALUE_ODDS
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|'='
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|PARAM_VALUES
index|[
name|random
operator|.
name|nextInt
argument_list|(
name|PARAM_VALUES
operator|.
name|length
argument_list|)
index|]
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|i
operator|<
operator|(
name|numParameters
operator|-
literal|1
operator|)
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|'&'
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|legacyImplRandom (int reps)
annotation|@
name|Benchmark
name|boolean
name|legacyImplRandom
parameter_list|(
name|int
name|reps
parameter_list|)
block|{
comment|// Paranoia: acting on hearsay that accessing fields might be slow.
name|String
index|[]
name|randomParams
init|=
name|this
operator|.
name|randomParams
decl_stmt|;
name|boolean
name|created
init|=
literal|false
decl_stmt|;
comment|// Allows us to use& instead of %, acting on hearsay that division
comment|// operators (/%) are disproportionately expensive.
name|int
name|mask
init|=
name|NUMBER_OF_RANDOM_PARAMETER_STRINGS
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|reps
condition|;
name|i
operator|++
control|)
block|{
name|UriParameterMap
name|map
init|=
name|legacyParse
argument_list|(
name|randomParams
index|[
name|i
operator|&
name|mask
index|]
argument_list|,
name|Charsets
operator|.
name|UTF_8
argument_list|)
decl_stmt|;
name|created
operator|^=
operator|(
name|map
operator|!=
literal|null
operator|)
expr_stmt|;
block|}
return|return
name|created
return|;
block|}
DECL|method|currentImplRandom (int reps)
annotation|@
name|Benchmark
name|boolean
name|currentImplRandom
parameter_list|(
name|int
name|reps
parameter_list|)
block|{
comment|// Paranoia: acting on hearsay that accessing fields might be slow.
name|String
index|[]
name|randomParams
init|=
name|this
operator|.
name|randomParams
decl_stmt|;
name|boolean
name|created
init|=
literal|false
decl_stmt|;
comment|// Allows us to use& instead of %, acting on hearsay that division
comment|// operators (/%) are disproportionately expensive.
name|int
name|mask
init|=
name|NUMBER_OF_RANDOM_PARAMETER_STRINGS
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|reps
condition|;
name|i
operator|++
control|)
block|{
name|UriParameterMap
name|map
init|=
name|UriParameterMap
operator|.
name|parse
argument_list|(
name|randomParams
index|[
name|i
operator|&
name|mask
index|]
argument_list|,
name|Charsets
operator|.
name|UTF_8
argument_list|)
decl_stmt|;
name|created
operator|^=
operator|(
name|map
operator|!=
literal|null
operator|)
expr_stmt|;
block|}
return|return
name|created
return|;
block|}
comment|/**    * This is an old implementation of {@link UriParameterMap#parse(String, Charset)},    * which used {@link Splitter}, String#split(String, int), String#toUpperCase() and    * String#endsWith(String).    */
DECL|method|legacyParse (String query, Charset encoding)
specifier|private
specifier|static
name|UriParameterMap
name|legacyParse
parameter_list|(
name|String
name|query
parameter_list|,
name|Charset
name|encoding
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|checkNotNull
argument_list|(
name|encoding
argument_list|)
expr_stmt|;
name|UriParameterMap
name|map
init|=
operator|new
name|UriParameterMap
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|query
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Iterable
argument_list|<
name|String
argument_list|>
name|pieces
init|=
name|Splitter
operator|.
name|on
argument_list|(
literal|'&'
argument_list|)
operator|.
name|split
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|String
name|piece
range|:
name|pieces
control|)
block|{
name|count
operator|++
expr_stmt|;
if|if
condition|(
name|count
operator|>
name|maxUriParameterCount
condition|)
block|{
throw|throw
operator|new
name|TooManyUriParametersException
argument_list|()
throw|;
block|}
name|String
index|[]
name|pair
init|=
name|piece
operator|.
name|split
argument_list|(
literal|"="
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|String
name|name
init|=
name|decodeString
argument_list|(
name|pair
index|[
literal|0
index|]
argument_list|,
name|encoding
argument_list|)
decl_stmt|;
name|String
name|value
init|=
name|pair
operator|.
name|length
operator|<
literal|2
condition|?
literal|""
else|:
name|decodeString
argument_list|(
name|pair
index|[
literal|1
index|]
argument_list|,
name|encoding
argument_list|)
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|map
return|;
block|}
DECL|method|decodeString (String str, Charset encoding)
specifier|private
specifier|static
name|String
name|decodeString
parameter_list|(
name|String
name|str
parameter_list|,
name|Charset
name|encoding
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
name|requiresByteLevelDecoding
argument_list|(
name|encoding
argument_list|)
condition|)
block|{
name|byte
index|[]
name|rawBytes
init|=
name|URLDecoder
operator|.
name|decode
argument_list|(
name|str
argument_list|,
literal|"ISO-8859-1"
argument_list|)
operator|.
name|getBytes
argument_list|(
name|Charsets
operator|.
name|ISO_8859_1
argument_list|)
decl_stmt|;
return|return
operator|new
name|String
argument_list|(
name|rawBytes
argument_list|,
name|encoding
argument_list|)
return|;
block|}
return|return
name|URLDecoder
operator|.
name|decode
argument_list|(
name|str
argument_list|,
name|encoding
operator|.
name|name
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|iae
parameter_list|)
block|{
return|return
name|str
return|;
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|e
parameter_list|)
block|{
return|return
name|str
return|;
block|}
block|}
DECL|method|requiresByteLevelDecoding (Charset charset)
specifier|private
specifier|static
name|boolean
name|requiresByteLevelDecoding
parameter_list|(
name|Charset
name|charset
parameter_list|)
block|{
name|String
name|encoding
init|=
name|charset
operator|.
name|name
argument_list|()
operator|.
name|toUpperCase
argument_list|()
decl_stmt|;
comment|// Use endsWith() to include our wrapper character sets, whose names are
comment|// of the form "X-Variant-Shift_JIS" or "X-Variant-windows-31j".
return|return
operator|(
name|encoding
operator|.
name|endsWith
argument_list|(
literal|"SHIFT_JIS"
argument_list|)
operator|||
name|encoding
operator|.
name|endsWith
argument_list|(
literal|"WINDOWS-31J"
argument_list|)
operator|)
return|;
block|}
DECL|field|maxUriParameterCount
specifier|private
specifier|static
name|int
name|maxUriParameterCount
init|=
literal|512
decl_stmt|;
block|}
end_class

end_unit

