begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2012 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.hash
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|hash
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|caliper
operator|.
name|BeforeExperiment
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|caliper
operator|.
name|Benchmark
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|caliper
operator|.
name|Param
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|MessageDigest
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|NoSuchAlgorithmException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_comment
comment|/**  * Benchmarks for comparing {@link MessageDigest}s and {@link com.google.common.hash.HashFunction}s  * that wrap {@link MessageDigest}s.  *  *<p>Parameters for the benchmark are:  *  *<ul>  *<li>size: The length of the byte array to hash.  *<li>algorithm: the algorithm to hash with (e.g. MD5, SHA1, etc.).  *<li>hashMethod: how to hash the data (using the Hashing API or the MessageDigest API).  *</ul>  *  * @author Kurt Alfred Kluever  */
end_comment

begin_class
DECL|class|MessageDigestAlgorithmBenchmark
specifier|public
class|class
name|MessageDigestAlgorithmBenchmark
block|{
annotation|@
name|Param
argument_list|(
block|{
literal|"10"
block|,
literal|"1000"
block|,
literal|"100000"
block|,
literal|"1000000"
block|}
argument_list|)
DECL|field|size
name|int
name|size
decl_stmt|;
DECL|field|algorithm
annotation|@
name|Param
name|Algorithm
name|algorithm
decl_stmt|;
DECL|field|hashMethod
annotation|@
name|Param
name|HashMethod
name|hashMethod
decl_stmt|;
DECL|enum|HashMethod
specifier|private
enum|enum
name|HashMethod
block|{
DECL|enumConstant|MESSAGE_DIGEST_API
DECL|method|MESSAGE_DIGEST_API ()
name|MESSAGE_DIGEST_API
parameter_list|()
block|{
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|hash
parameter_list|(
name|Algorithm
name|algorithm
parameter_list|,
name|byte
index|[]
name|input
parameter_list|)
block|{
name|MessageDigest
name|md
init|=
name|algorithm
operator|.
name|getMessageDigest
argument_list|()
decl_stmt|;
name|md
operator|.
name|update
argument_list|(
name|input
argument_list|)
expr_stmt|;
return|return
name|md
operator|.
name|digest
argument_list|()
return|;
block|}
block|}
block|,
DECL|enumConstant|HASH_FUNCTION_DIRECT
DECL|method|HASH_FUNCTION_DIRECT ()
name|HASH_FUNCTION_DIRECT
parameter_list|()
block|{
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|hash
parameter_list|(
name|Algorithm
name|algorithm
parameter_list|,
name|byte
index|[]
name|input
parameter_list|)
block|{
return|return
name|algorithm
operator|.
name|getHashFunction
argument_list|()
operator|.
name|hashBytes
argument_list|(
name|input
argument_list|)
operator|.
name|asBytes
argument_list|()
return|;
block|}
block|}
block|,
DECL|enumConstant|HASH_FUNCTION_VIA_HASHER
DECL|method|HASH_FUNCTION_VIA_HASHER ()
name|HASH_FUNCTION_VIA_HASHER
parameter_list|()
block|{
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|hash
parameter_list|(
name|Algorithm
name|algorithm
parameter_list|,
name|byte
index|[]
name|input
parameter_list|)
block|{
return|return
name|algorithm
operator|.
name|getHashFunction
argument_list|()
operator|.
name|newHasher
argument_list|()
operator|.
name|putBytes
argument_list|(
name|input
argument_list|)
operator|.
name|hash
argument_list|()
operator|.
name|asBytes
argument_list|()
return|;
block|}
block|}
block|;     ;
DECL|method|hash (Algorithm algorithm, byte[] input)
specifier|public
specifier|abstract
name|byte
index|[]
name|hash
parameter_list|(
name|Algorithm
name|algorithm
parameter_list|,
name|byte
index|[]
name|input
parameter_list|)
function_decl|;
block|}
DECL|enum|Algorithm
specifier|private
enum|enum
name|Algorithm
block|{
DECL|enumConstant|MD5
name|MD5
argument_list|(
literal|"MD5"
argument_list|,
name|Hashing
operator|.
name|md5
argument_list|()
argument_list|)
block|,
DECL|enumConstant|SHA_1
name|SHA_1
argument_list|(
literal|"SHA-1"
argument_list|,
name|Hashing
operator|.
name|sha1
argument_list|()
argument_list|)
block|,
DECL|enumConstant|SHA_256
name|SHA_256
argument_list|(
literal|"SHA-256"
argument_list|,
name|Hashing
operator|.
name|sha256
argument_list|()
argument_list|)
block|,
DECL|enumConstant|SHA_384
name|SHA_384
argument_list|(
literal|"SHA-384"
argument_list|,
name|Hashing
operator|.
name|sha384
argument_list|()
argument_list|)
block|,
DECL|enumConstant|SHA_512
name|SHA_512
argument_list|(
literal|"SHA-512"
argument_list|,
name|Hashing
operator|.
name|sha512
argument_list|()
argument_list|)
block|;
DECL|field|algorithmName
specifier|private
specifier|final
name|String
name|algorithmName
decl_stmt|;
DECL|field|hashFn
specifier|private
specifier|final
name|HashFunction
name|hashFn
decl_stmt|;
DECL|method|Algorithm (String algorithmName, HashFunction hashFn)
name|Algorithm
parameter_list|(
name|String
name|algorithmName
parameter_list|,
name|HashFunction
name|hashFn
parameter_list|)
block|{
name|this
operator|.
name|algorithmName
operator|=
name|algorithmName
expr_stmt|;
name|this
operator|.
name|hashFn
operator|=
name|hashFn
expr_stmt|;
block|}
DECL|method|getMessageDigest ()
specifier|public
name|MessageDigest
name|getMessageDigest
parameter_list|()
block|{
try|try
block|{
return|return
name|MessageDigest
operator|.
name|getInstance
argument_list|(
name|algorithmName
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NoSuchAlgorithmException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|getHashFunction ()
specifier|public
name|HashFunction
name|getHashFunction
parameter_list|()
block|{
return|return
name|hashFn
return|;
block|}
block|}
comment|// Use a constant seed for all of the benchmarks to ensure apples to apples comparisons.
DECL|field|RANDOM_SEED
specifier|private
specifier|static
specifier|final
name|int
name|RANDOM_SEED
init|=
operator|new
name|Random
argument_list|()
operator|.
name|nextInt
argument_list|()
decl_stmt|;
DECL|field|testBytes
specifier|private
name|byte
index|[]
name|testBytes
decl_stmt|;
annotation|@
name|BeforeExperiment
DECL|method|setUp ()
name|void
name|setUp
parameter_list|()
block|{
name|testBytes
operator|=
operator|new
name|byte
index|[
name|size
index|]
expr_stmt|;
operator|new
name|Random
argument_list|(
name|RANDOM_SEED
argument_list|)
operator|.
name|nextBytes
argument_list|(
name|testBytes
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Benchmark
DECL|method|hashing (int reps)
name|byte
name|hashing
parameter_list|(
name|int
name|reps
parameter_list|)
block|{
name|byte
name|result
init|=
literal|0x01
decl_stmt|;
name|HashMethod
name|hashMethod
init|=
name|this
operator|.
name|hashMethod
decl_stmt|;
name|Algorithm
name|algorithm
init|=
name|this
operator|.
name|algorithm
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|reps
condition|;
name|i
operator|++
control|)
block|{
name|result
operator|^=
name|hashMethod
operator|.
name|hash
argument_list|(
name|algorithm
argument_list|,
name|testBytes
argument_list|)
index|[
literal|0
index|]
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
block|}
end_class

end_unit

