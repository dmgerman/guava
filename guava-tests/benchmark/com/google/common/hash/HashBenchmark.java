begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2011 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.hash
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|hash
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|caliper
operator|.
name|Param
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|caliper
operator|.
name|Runner
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|caliper
operator|.
name|SimpleBenchmark
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_comment
comment|/**  * Benchmarks for hashing functions. This class benchmarks various hasing functions for a range of  * sizes of byte array. The input data is generated by a call to {@link Random#nextBytes}.  *  *<p>Parameters for the benchmark are:  *<ul>  *<li>size: The length of the byte array to hash.  *<li>function: The name of the function(s) to test (eg, "goodFastHash32" or "murmur3_32")  *</ul>  *  * @author David Beaumont  */
end_comment

begin_class
DECL|class|HashBenchmark
specifier|public
class|class
name|HashBenchmark
extends|extends
name|SimpleBenchmark
block|{
annotation|@
name|Param
argument_list|(
block|{
literal|"10"
block|,
literal|"1000"
block|,
literal|"1000000"
block|}
argument_list|)
DECL|field|size
specifier|private
name|int
name|size
decl_stmt|;
DECL|field|function
annotation|@
name|Param
specifier|private
name|HashType
name|function
decl_stmt|;
DECL|enum|HashType
specifier|private
enum|enum
name|HashType
block|{
DECL|enumConstant|goodFastHash32
DECL|method|goodFastHash32 ()
name|goodFastHash32
parameter_list|()
block|{
annotation|@
name|Override
specifier|public
name|long
name|hash
parameter_list|(
name|byte
index|[]
name|data
parameter_list|)
block|{
return|return
name|Hashing
operator|.
name|goodFastHash
argument_list|(
literal|32
argument_list|)
operator|.
name|hashBytes
argument_list|(
name|data
argument_list|)
operator|.
name|asInt
argument_list|()
return|;
block|}
block|}
block|,
DECL|enumConstant|goodFastHash64
DECL|method|goodFastHash64 ()
name|goodFastHash64
parameter_list|()
block|{
annotation|@
name|Override
specifier|public
name|long
name|hash
parameter_list|(
name|byte
index|[]
name|data
parameter_list|)
block|{
return|return
name|Hashing
operator|.
name|goodFastHash
argument_list|(
literal|64
argument_list|)
operator|.
name|hashBytes
argument_list|(
name|data
argument_list|)
operator|.
name|asLong
argument_list|()
return|;
block|}
block|}
block|,
DECL|enumConstant|murmur32
DECL|method|murmur32 ()
name|murmur32
parameter_list|()
block|{
annotation|@
name|Override
specifier|public
name|long
name|hash
parameter_list|(
name|byte
index|[]
name|data
parameter_list|)
block|{
return|return
name|Hashing
operator|.
name|murmur3_32
argument_list|()
operator|.
name|hashBytes
argument_list|(
name|data
argument_list|)
operator|.
name|asInt
argument_list|()
return|;
block|}
block|}
block|,
DECL|enumConstant|murmur128
DECL|method|murmur128 ()
name|murmur128
parameter_list|()
block|{
annotation|@
name|Override
specifier|public
name|long
name|hash
parameter_list|(
name|byte
index|[]
name|data
parameter_list|)
block|{
return|return
name|Hashing
operator|.
name|murmur3_128
argument_list|()
operator|.
name|hashBytes
argument_list|(
name|data
argument_list|)
operator|.
name|asLong
argument_list|()
return|;
block|}
block|}
block|,
DECL|enumConstant|md5
DECL|method|md5 ()
name|md5
parameter_list|()
block|{
annotation|@
name|Override
specifier|public
name|long
name|hash
parameter_list|(
name|byte
index|[]
name|data
parameter_list|)
block|{
return|return
name|Hashing
operator|.
name|md5
argument_list|()
operator|.
name|hashBytes
argument_list|(
name|data
argument_list|)
operator|.
name|asLong
argument_list|()
return|;
block|}
block|}
block|;
DECL|method|hash (byte[] data)
specifier|public
specifier|abstract
name|long
name|hash
parameter_list|(
name|byte
index|[]
name|data
parameter_list|)
function_decl|;
block|}
DECL|field|testData
specifier|private
name|byte
index|[]
name|testData
decl_stmt|;
annotation|@
name|Override
DECL|method|setUp ()
specifier|protected
name|void
name|setUp
parameter_list|()
block|{
name|testData
operator|=
operator|new
name|byte
index|[
name|size
index|]
expr_stmt|;
operator|new
name|Random
argument_list|()
operator|.
name|nextBytes
argument_list|(
name|testData
argument_list|)
expr_stmt|;
block|}
DECL|method|timeHashFunction (int reps)
specifier|public
name|int
name|timeHashFunction
parameter_list|(
name|int
name|reps
parameter_list|)
block|{
name|long
name|dummy
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|reps
condition|;
name|i
operator|++
control|)
block|{
name|dummy
operator|^=
name|function
operator|.
name|hash
argument_list|(
name|testData
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
name|int
operator|)
name|dummy
return|;
block|}
DECL|method|main (String[] args)
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
name|Runner
operator|.
name|main
argument_list|(
name|HashBenchmark
operator|.
name|class
argument_list|,
name|args
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

