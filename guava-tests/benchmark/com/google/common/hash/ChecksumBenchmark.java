begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2012 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.hash
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|hash
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|caliper
operator|.
name|Param
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|caliper
operator|.
name|legacy
operator|.
name|Benchmark
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|Adler32
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|CRC32
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|Checksum
import|;
end_import

begin_comment
comment|/**  * Benchmarks for comparing {@link Checksum}s and {@link HashFunction}s that wrap {@link Checksum}s.  *  *<p>Parameters for the benchmark are:<ul><li>size: The length of the byte array to hash.</ul>  *  * @author Colin Decker  */
end_comment

begin_class
DECL|class|ChecksumBenchmark
specifier|public
class|class
name|ChecksumBenchmark
extends|extends
name|Benchmark
block|{
comment|// Use a constant seed for all of the benchmarks to ensure apples to apples comparisons.
DECL|field|RANDOM_SEED
specifier|private
specifier|static
specifier|final
name|int
name|RANDOM_SEED
init|=
operator|new
name|Random
argument_list|()
operator|.
name|nextInt
argument_list|()
decl_stmt|;
annotation|@
name|Param
argument_list|(
block|{
literal|"10"
block|,
literal|"1000"
block|,
literal|"100000"
block|,
literal|"1000000"
block|}
argument_list|)
DECL|field|size
specifier|private
name|int
name|size
decl_stmt|;
DECL|field|testBytes
specifier|private
name|byte
index|[]
name|testBytes
decl_stmt|;
annotation|@
name|Override
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|testBytes
operator|=
operator|new
name|byte
index|[
name|size
index|]
expr_stmt|;
operator|new
name|Random
argument_list|(
name|RANDOM_SEED
argument_list|)
operator|.
name|nextBytes
argument_list|(
name|testBytes
argument_list|)
expr_stmt|;
block|}
comment|// CRC32
DECL|method|timeCrc32HashFunction (int reps)
specifier|public
name|byte
name|timeCrc32HashFunction
parameter_list|(
name|int
name|reps
parameter_list|)
block|{
return|return
name|runHashFunction
argument_list|(
name|reps
argument_list|,
name|Hashing
operator|.
name|crc32
argument_list|()
argument_list|)
return|;
block|}
DECL|method|timeCrc32Checksum (int reps)
specifier|public
name|byte
name|timeCrc32Checksum
parameter_list|(
name|int
name|reps
parameter_list|)
throws|throws
name|Exception
block|{
name|byte
name|result
init|=
literal|0x01
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|reps
condition|;
name|i
operator|++
control|)
block|{
name|CRC32
name|checksum
init|=
operator|new
name|CRC32
argument_list|()
decl_stmt|;
name|checksum
operator|.
name|update
argument_list|(
name|testBytes
argument_list|)
expr_stmt|;
name|result
operator|^=
name|checksum
operator|.
name|getValue
argument_list|()
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
comment|// Adler32
DECL|method|timeAdler32HashFunction (int reps)
specifier|public
name|byte
name|timeAdler32HashFunction
parameter_list|(
name|int
name|reps
parameter_list|)
block|{
return|return
name|runHashFunction
argument_list|(
name|reps
argument_list|,
name|Hashing
operator|.
name|adler32
argument_list|()
argument_list|)
return|;
block|}
DECL|method|timeAdler32Checksum (int reps)
specifier|public
name|byte
name|timeAdler32Checksum
parameter_list|(
name|int
name|reps
parameter_list|)
throws|throws
name|Exception
block|{
name|byte
name|result
init|=
literal|0x01
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|reps
condition|;
name|i
operator|++
control|)
block|{
name|Adler32
name|checksum
init|=
operator|new
name|Adler32
argument_list|()
decl_stmt|;
name|checksum
operator|.
name|update
argument_list|(
name|testBytes
argument_list|)
expr_stmt|;
name|result
operator|^=
name|checksum
operator|.
name|getValue
argument_list|()
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
comment|// Helpers + main
DECL|method|runHashFunction (int reps, HashFunction hashFunction)
specifier|private
name|byte
name|runHashFunction
parameter_list|(
name|int
name|reps
parameter_list|,
name|HashFunction
name|hashFunction
parameter_list|)
block|{
name|byte
name|result
init|=
literal|0x01
decl_stmt|;
comment|// Trick the JVM to prevent it from using the hash function non-polymorphically
name|result
operator|^=
name|Hashing
operator|.
name|crc32
argument_list|()
operator|.
name|hashInt
argument_list|(
name|reps
argument_list|)
operator|.
name|asBytes
argument_list|()
index|[
literal|0
index|]
expr_stmt|;
name|result
operator|^=
name|Hashing
operator|.
name|adler32
argument_list|()
operator|.
name|hashInt
argument_list|(
name|reps
argument_list|)
operator|.
name|asBytes
argument_list|()
index|[
literal|0
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|reps
condition|;
name|i
operator|++
control|)
block|{
name|result
operator|^=
name|hashFunction
operator|.
name|hashBytes
argument_list|(
name|testBytes
argument_list|)
operator|.
name|asBytes
argument_list|()
index|[
literal|0
index|]
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
block|}
end_class

end_unit

