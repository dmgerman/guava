begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2011 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.primitives
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|primitives
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|caliper
operator|.
name|legacy
operator|.
name|Benchmark
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_comment
comment|/**  * Benchmarks for certain methods of {@code UnsignedLongs}.  *  * @author Eamonn McManus  */
end_comment

begin_class
DECL|class|UnsignedLongsBenchmark
specifier|public
class|class
name|UnsignedLongsBenchmark
extends|extends
name|Benchmark
block|{
DECL|field|ARRAY_SIZE
specifier|private
specifier|static
specifier|final
name|int
name|ARRAY_SIZE
init|=
literal|0x10000
decl_stmt|;
DECL|field|ARRAY_MASK
specifier|private
specifier|static
specifier|final
name|int
name|ARRAY_MASK
init|=
literal|0x0ffff
decl_stmt|;
DECL|field|RANDOM_SOURCE
specifier|private
specifier|static
specifier|final
name|Random
name|RANDOM_SOURCE
init|=
operator|new
name|Random
argument_list|(
literal|314159265358979L
argument_list|)
decl_stmt|;
DECL|field|longs
specifier|private
specifier|static
specifier|final
name|long
index|[]
name|longs
init|=
operator|new
name|long
index|[
name|ARRAY_SIZE
index|]
decl_stmt|;
DECL|field|divisors
specifier|private
specifier|static
specifier|final
name|long
index|[]
name|divisors
init|=
operator|new
name|long
index|[
name|ARRAY_SIZE
index|]
decl_stmt|;
DECL|field|decimalStrings
specifier|private
specifier|static
specifier|final
name|String
index|[]
name|decimalStrings
init|=
operator|new
name|String
index|[
name|ARRAY_SIZE
index|]
decl_stmt|;
DECL|field|binaryStrings
specifier|private
specifier|static
specifier|final
name|String
index|[]
name|binaryStrings
init|=
operator|new
name|String
index|[
name|ARRAY_SIZE
index|]
decl_stmt|;
DECL|field|hexStrings
specifier|private
specifier|static
specifier|final
name|String
index|[]
name|hexStrings
init|=
operator|new
name|String
index|[
name|ARRAY_SIZE
index|]
decl_stmt|;
DECL|field|prefixedHexStrings
specifier|private
specifier|static
specifier|final
name|String
index|[]
name|prefixedHexStrings
init|=
operator|new
name|String
index|[
name|ARRAY_SIZE
index|]
decl_stmt|;
annotation|@
name|Override
DECL|method|setUp ()
specifier|protected
name|void
name|setUp
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ARRAY_SIZE
condition|;
name|i
operator|++
control|)
block|{
name|longs
index|[
name|i
index|]
operator|=
name|random
argument_list|()
expr_stmt|;
name|divisors
index|[
name|i
index|]
operator|=
name|randomDivisor
argument_list|(
name|longs
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|decimalStrings
index|[
name|i
index|]
operator|=
name|UnsignedLongs
operator|.
name|toString
argument_list|(
name|longs
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|binaryStrings
index|[
name|i
index|]
operator|=
name|UnsignedLongs
operator|.
name|toString
argument_list|(
name|longs
index|[
name|i
index|]
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|hexStrings
index|[
name|i
index|]
operator|=
name|UnsignedLongs
operator|.
name|toString
argument_list|(
name|longs
index|[
name|i
index|]
argument_list|,
literal|16
argument_list|)
expr_stmt|;
name|prefixedHexStrings
index|[
name|i
index|]
operator|=
literal|"0x"
operator|+
name|hexStrings
index|[
name|i
index|]
expr_stmt|;
block|}
block|}
DECL|method|timeDivide (int reps)
specifier|public
name|long
name|timeDivide
parameter_list|(
name|int
name|reps
parameter_list|)
block|{
name|long
name|tmp
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|reps
condition|;
name|i
operator|++
control|)
block|{
name|int
name|j
init|=
name|i
operator|&
name|ARRAY_MASK
decl_stmt|;
name|tmp
operator|+=
name|UnsignedLongs
operator|.
name|divide
argument_list|(
name|longs
index|[
name|j
index|]
argument_list|,
name|divisors
index|[
name|j
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|tmp
return|;
block|}
DECL|method|timeRemainder (int reps)
specifier|public
name|long
name|timeRemainder
parameter_list|(
name|int
name|reps
parameter_list|)
block|{
name|long
name|tmp
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|reps
condition|;
name|i
operator|++
control|)
block|{
name|int
name|j
init|=
name|i
operator|&
name|ARRAY_MASK
decl_stmt|;
name|tmp
operator|+=
name|UnsignedLongs
operator|.
name|remainder
argument_list|(
name|longs
index|[
name|j
index|]
argument_list|,
name|divisors
index|[
name|j
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|tmp
return|;
block|}
DECL|method|timeParseUnsignedLong (int reps)
specifier|public
name|long
name|timeParseUnsignedLong
parameter_list|(
name|int
name|reps
parameter_list|)
block|{
name|long
name|tmp
init|=
literal|0
decl_stmt|;
comment|// Given that we make three calls per pass, we scale reps down in order
comment|// to do a comparable amount of work to other measurements.
name|int
name|scaledReps
init|=
name|reps
operator|/
literal|3
operator|+
literal|1
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|scaledReps
condition|;
name|i
operator|++
control|)
block|{
name|int
name|j
init|=
name|i
operator|&
name|ARRAY_MASK
decl_stmt|;
name|tmp
operator|+=
name|UnsignedLongs
operator|.
name|parseUnsignedLong
argument_list|(
name|decimalStrings
index|[
name|j
index|]
argument_list|)
expr_stmt|;
name|tmp
operator|+=
name|UnsignedLongs
operator|.
name|parseUnsignedLong
argument_list|(
name|hexStrings
index|[
name|j
index|]
argument_list|,
literal|16
argument_list|)
expr_stmt|;
name|tmp
operator|+=
name|UnsignedLongs
operator|.
name|parseUnsignedLong
argument_list|(
name|binaryStrings
index|[
name|j
index|]
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
return|return
name|tmp
return|;
block|}
DECL|method|timeParseDecode10 (int reps)
specifier|public
name|long
name|timeParseDecode10
parameter_list|(
name|int
name|reps
parameter_list|)
block|{
name|long
name|tmp
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|reps
condition|;
name|i
operator|++
control|)
block|{
name|int
name|j
init|=
name|i
operator|&
name|ARRAY_MASK
decl_stmt|;
name|tmp
operator|+=
name|UnsignedLongs
operator|.
name|decode
argument_list|(
name|decimalStrings
index|[
name|j
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|tmp
return|;
block|}
DECL|method|timeParseDecode16 (int reps)
specifier|public
name|long
name|timeParseDecode16
parameter_list|(
name|int
name|reps
parameter_list|)
block|{
name|long
name|tmp
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|reps
condition|;
name|i
operator|++
control|)
block|{
name|int
name|j
init|=
name|i
operator|&
name|ARRAY_MASK
decl_stmt|;
name|tmp
operator|+=
name|UnsignedLongs
operator|.
name|decode
argument_list|(
name|prefixedHexStrings
index|[
name|j
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|tmp
return|;
block|}
DECL|method|timeToString (int reps)
specifier|public
name|int
name|timeToString
parameter_list|(
name|int
name|reps
parameter_list|)
block|{
name|int
name|tmp
init|=
literal|0
decl_stmt|;
comment|// Given that we make three calls per pass, we scale reps down in order
comment|// to do a comparable amount of work to other measurements.
name|int
name|scaledReps
init|=
name|reps
operator|/
literal|3
operator|+
literal|1
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|scaledReps
condition|;
name|i
operator|++
control|)
block|{
name|int
name|j
init|=
name|i
operator|&
name|ARRAY_MASK
decl_stmt|;
name|long
name|x
init|=
name|longs
index|[
name|j
index|]
decl_stmt|;
name|tmp
operator|+=
name|UnsignedLongs
operator|.
name|toString
argument_list|(
name|x
argument_list|)
operator|.
name|length
argument_list|()
expr_stmt|;
name|tmp
operator|+=
name|UnsignedLongs
operator|.
name|toString
argument_list|(
name|x
argument_list|,
literal|16
argument_list|)
operator|.
name|length
argument_list|()
expr_stmt|;
name|tmp
operator|+=
name|UnsignedLongs
operator|.
name|toString
argument_list|(
name|x
argument_list|,
literal|2
argument_list|)
operator|.
name|length
argument_list|()
expr_stmt|;
block|}
return|return
name|tmp
return|;
block|}
DECL|method|random ()
specifier|private
specifier|static
name|long
name|random
parameter_list|()
block|{
return|return
name|RANDOM_SOURCE
operator|.
name|nextLong
argument_list|()
return|;
block|}
comment|// A random value that cannot be 0 and that is unsigned-less-than or equal
comment|// to the given dividend, so that we don't have half of our divisions being
comment|// trivial because the divisor is bigger than the dividend.
comment|// Using remainder here does not give us a uniform distribution but it should
comment|// not have a big impact on the measurement.
DECL|method|randomDivisor (long dividend)
specifier|private
specifier|static
name|long
name|randomDivisor
parameter_list|(
name|long
name|dividend
parameter_list|)
block|{
name|long
name|r
init|=
name|RANDOM_SOURCE
operator|.
name|nextLong
argument_list|()
decl_stmt|;
if|if
condition|(
name|dividend
operator|==
operator|-
literal|1
condition|)
block|{
return|return
name|r
return|;
block|}
else|else
block|{
return|return
name|UnsignedLongs
operator|.
name|remainder
argument_list|(
name|r
argument_list|,
name|dividend
operator|+
literal|1
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

