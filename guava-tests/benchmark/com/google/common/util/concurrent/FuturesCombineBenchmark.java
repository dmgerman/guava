begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2014 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.util.concurrent
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|caliper
operator|.
name|Benchmark
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|caliper
operator|.
name|Param
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|caliper
operator|.
name|api
operator|.
name|VmOptions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CancellationException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executor
import|;
end_import

begin_comment
comment|/**  * A benchmark for {@link Futures#combine}  */
end_comment

begin_class
annotation|@
name|VmOptions
argument_list|(
block|{
literal|"-Xms12g"
block|,
literal|"-Xmx12g"
block|,
literal|"-d64"
block|}
argument_list|)
DECL|class|FuturesCombineBenchmark
specifier|public
class|class
name|FuturesCombineBenchmark
block|{
DECL|enum|Impl
enum|enum
name|Impl
block|{
DECL|enumConstant|OLD
name|OLD
block|{
annotation|@
name|Override
argument_list|<
name|V
argument_list|>
name|ListenableFuture
argument_list|<
name|V
argument_list|>
name|combine
parameter_list|(
specifier|final
name|Callable
argument_list|<
name|V
argument_list|>
name|combiner
parameter_list|,
name|Executor
name|executor
parameter_list|,
name|Iterable
argument_list|<
name|?
extends|extends
name|ListenableFuture
argument_list|<
name|?
argument_list|>
argument_list|>
name|futures
parameter_list|)
block|{
name|ListenableFuture
argument_list|<
name|?
argument_list|>
name|trigger
init|=
name|Futures
operator|.
name|successfulAsList
argument_list|(
name|futures
argument_list|)
decl_stmt|;
name|checkNotNull
argument_list|(
name|combiner
argument_list|)
expr_stmt|;
name|checkNotNull
argument_list|(
name|trigger
argument_list|)
expr_stmt|;
return|return
name|Futures
operator|.
name|transform
argument_list|(
name|trigger
argument_list|,
operator|new
name|AsyncFunction
argument_list|<
name|Object
argument_list|,
name|V
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ListenableFuture
argument_list|<
name|V
argument_list|>
name|apply
parameter_list|(
name|Object
name|arg
parameter_list|)
throws|throws
name|Exception
block|{
try|try
block|{
return|return
name|Futures
operator|.
name|immediateFuture
argument_list|(
name|combiner
operator|.
name|call
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|CancellationException
name|e
parameter_list|)
block|{
return|return
name|Futures
operator|.
name|immediateCancelledFuture
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|e
parameter_list|)
block|{
return|return
name|Futures
operator|.
name|immediateFailedFuture
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
return|;
comment|// OK to rethrow on Error
block|}
block|}
block|}
argument_list|,
name|executor
argument_list|)
return|;
block|}
block|}
block|,
DECL|enumConstant|NEW
name|NEW
block|{
annotation|@
name|Override
argument_list|<
name|V
argument_list|>
name|ListenableFuture
argument_list|<
name|V
argument_list|>
name|combine
parameter_list|(
name|Callable
argument_list|<
name|V
argument_list|>
name|combiner
parameter_list|,
specifier|final
name|Executor
name|executor
parameter_list|,
name|Iterable
argument_list|<
name|?
extends|extends
name|ListenableFuture
argument_list|<
name|?
argument_list|>
argument_list|>
name|futures
parameter_list|)
block|{
return|return
name|Futures
operator|.
name|combine
argument_list|(
name|combiner
argument_list|,
name|executor
argument_list|,
name|futures
argument_list|)
return|;
block|}
block|}
block|;
DECL|method|combine ( Callable<V> combiner, Executor executor, Iterable<? extends ListenableFuture<?>> futures)
specifier|abstract
parameter_list|<
name|V
parameter_list|>
name|ListenableFuture
argument_list|<
name|V
argument_list|>
name|combine
parameter_list|(
name|Callable
argument_list|<
name|V
argument_list|>
name|combiner
parameter_list|,
name|Executor
name|executor
parameter_list|,
name|Iterable
argument_list|<
name|?
extends|extends
name|ListenableFuture
argument_list|<
name|?
argument_list|>
argument_list|>
name|futures
parameter_list|)
function_decl|;
block|}
DECL|field|INLINE_EXECUTOR
specifier|private
specifier|static
specifier|final
name|Executor
name|INLINE_EXECUTOR
init|=
operator|new
name|Executor
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|(
name|Runnable
name|command
parameter_list|)
block|{
name|command
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
block|}
decl_stmt|;
DECL|field|impl
annotation|@
name|Param
name|Impl
name|impl
decl_stmt|;
DECL|field|numInputs
annotation|@
name|Param
argument_list|(
block|{
literal|"1"
block|,
literal|"5"
block|,
literal|"10"
block|}
argument_list|)
name|int
name|numInputs
decl_stmt|;
DECL|method|timeDoneSuccesfulFutures (int reps)
annotation|@
name|Benchmark
name|int
name|timeDoneSuccesfulFutures
parameter_list|(
name|int
name|reps
parameter_list|)
throws|throws
name|Exception
block|{
name|ImmutableList
operator|.
name|Builder
argument_list|<
name|ListenableFuture
argument_list|<
name|?
argument_list|>
argument_list|>
name|futuresBuilder
init|=
name|ImmutableList
operator|.
name|builder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numInputs
condition|;
name|i
operator|++
control|)
block|{
name|futuresBuilder
operator|.
name|add
argument_list|(
name|Futures
operator|.
name|immediateFuture
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|ImmutableList
argument_list|<
name|ListenableFuture
argument_list|<
name|?
argument_list|>
argument_list|>
name|futures
init|=
name|futuresBuilder
operator|.
name|build
argument_list|()
decl_stmt|;
name|Impl
name|impl
init|=
name|this
operator|.
name|impl
decl_stmt|;
name|Callable
argument_list|<
name|Integer
argument_list|>
name|callable
init|=
name|Callables
operator|.
name|returning
argument_list|(
literal|12
argument_list|)
decl_stmt|;
name|int
name|sum
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|reps
condition|;
name|i
operator|++
control|)
block|{
name|sum
operator|+=
name|impl
operator|.
name|combine
argument_list|(
name|callable
argument_list|,
name|INLINE_EXECUTOR
argument_list|,
name|futures
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
return|return
name|sum
return|;
block|}
DECL|method|timeDoneFailedFutures (int reps)
annotation|@
name|Benchmark
name|int
name|timeDoneFailedFutures
parameter_list|(
name|int
name|reps
parameter_list|)
throws|throws
name|Exception
block|{
name|ImmutableList
operator|.
name|Builder
argument_list|<
name|ListenableFuture
argument_list|<
name|?
argument_list|>
argument_list|>
name|futuresBuilder
init|=
name|ImmutableList
operator|.
name|builder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numInputs
condition|;
name|i
operator|++
control|)
block|{
name|futuresBuilder
operator|.
name|add
argument_list|(
name|Futures
operator|.
name|immediateFailedFuture
argument_list|(
operator|new
name|Exception
argument_list|(
literal|"boom"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|ImmutableList
argument_list|<
name|ListenableFuture
argument_list|<
name|?
argument_list|>
argument_list|>
name|futures
init|=
name|futuresBuilder
operator|.
name|build
argument_list|()
decl_stmt|;
name|Impl
name|impl
init|=
name|this
operator|.
name|impl
decl_stmt|;
name|Callable
argument_list|<
name|Integer
argument_list|>
name|callable
init|=
name|Callables
operator|.
name|returning
argument_list|(
literal|12
argument_list|)
decl_stmt|;
name|int
name|sum
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|reps
condition|;
name|i
operator|++
control|)
block|{
name|sum
operator|+=
name|impl
operator|.
name|combine
argument_list|(
name|callable
argument_list|,
name|INLINE_EXECUTOR
argument_list|,
name|futures
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
return|return
name|sum
return|;
block|}
DECL|method|timeSuccesfulFutures (int reps)
annotation|@
name|Benchmark
name|int
name|timeSuccesfulFutures
parameter_list|(
name|int
name|reps
parameter_list|)
throws|throws
name|Exception
block|{
name|Impl
name|impl
init|=
name|this
operator|.
name|impl
decl_stmt|;
name|Callable
argument_list|<
name|Integer
argument_list|>
name|callable
init|=
name|Callables
operator|.
name|returning
argument_list|(
literal|12
argument_list|)
decl_stmt|;
name|int
name|sum
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|reps
condition|;
name|i
operator|++
control|)
block|{
name|ImmutableList
argument_list|<
name|SettableFuture
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|futures
init|=
name|getSettableFutureList
argument_list|()
decl_stmt|;
name|ListenableFuture
argument_list|<
name|Integer
argument_list|>
name|combined
init|=
name|impl
operator|.
name|combine
argument_list|(
name|callable
argument_list|,
name|INLINE_EXECUTOR
argument_list|,
name|futures
argument_list|)
decl_stmt|;
for|for
control|(
name|SettableFuture
argument_list|<
name|Integer
argument_list|>
name|future
range|:
name|futures
control|)
block|{
name|future
operator|.
name|set
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
name|sum
operator|+=
name|combined
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
return|return
name|sum
return|;
block|}
DECL|method|timeFailedFutures (int reps)
annotation|@
name|Benchmark
name|int
name|timeFailedFutures
parameter_list|(
name|int
name|reps
parameter_list|)
throws|throws
name|Exception
block|{
name|Impl
name|impl
init|=
name|this
operator|.
name|impl
decl_stmt|;
name|Callable
argument_list|<
name|Integer
argument_list|>
name|callable
init|=
name|Callables
operator|.
name|returning
argument_list|(
literal|12
argument_list|)
decl_stmt|;
name|int
name|sum
init|=
literal|0
decl_stmt|;
name|Exception
name|throwable
init|=
operator|new
name|Exception
argument_list|(
literal|"boom"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|reps
condition|;
name|i
operator|++
control|)
block|{
name|ImmutableList
argument_list|<
name|SettableFuture
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|futures
init|=
name|getSettableFutureList
argument_list|()
decl_stmt|;
name|ListenableFuture
argument_list|<
name|Integer
argument_list|>
name|combined
init|=
name|impl
operator|.
name|combine
argument_list|(
name|callable
argument_list|,
name|INLINE_EXECUTOR
argument_list|,
name|futures
argument_list|)
decl_stmt|;
for|for
control|(
name|SettableFuture
argument_list|<
name|Integer
argument_list|>
name|future
range|:
name|futures
control|)
block|{
name|future
operator|.
name|setException
argument_list|(
name|throwable
argument_list|)
expr_stmt|;
block|}
name|sum
operator|+=
name|combined
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
return|return
name|sum
return|;
block|}
DECL|method|getSettableFutureList ()
specifier|private
name|ImmutableList
argument_list|<
name|SettableFuture
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|getSettableFutureList
parameter_list|()
block|{
name|ImmutableList
operator|.
name|Builder
argument_list|<
name|SettableFuture
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|futuresBuilder
init|=
name|ImmutableList
operator|.
name|builder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numInputs
condition|;
name|i
operator|++
control|)
block|{
name|futuresBuilder
operator|.
name|add
argument_list|(
name|SettableFuture
operator|.
expr|<
name|Integer
operator|>
name|create
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|futuresBuilder
operator|.
name|build
argument_list|()
return|;
block|}
block|}
end_class

end_unit

