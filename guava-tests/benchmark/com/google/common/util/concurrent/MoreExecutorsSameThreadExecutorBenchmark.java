begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2014 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.util.concurrent
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|caliper
operator|.
name|AfterExperiment
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|caliper
operator|.
name|BeforeExperiment
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|caliper
operator|.
name|Benchmark
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|caliper
operator|.
name|Param
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|caliper
operator|.
name|api
operator|.
name|Footprint
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|caliper
operator|.
name|api
operator|.
name|VmOptions
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_comment
comment|/**  * A benchmark comparing the {@link MoreExecutors#sameThreadExecutor()} to a trivial  * implementation.  */
end_comment

begin_class
annotation|@
name|VmOptions
argument_list|(
block|{
literal|"-Xms12g"
block|,
literal|"-Xmx12g"
block|,
literal|"-d64"
block|}
argument_list|)
DECL|class|MoreExecutorsSameThreadExecutorBenchmark
specifier|public
class|class
name|MoreExecutorsSameThreadExecutorBenchmark
block|{
DECL|field|INLINE_EXECUTOR
specifier|private
specifier|static
specifier|final
name|Executor
name|INLINE_EXECUTOR
init|=
operator|new
name|Executor
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|(
name|Runnable
name|command
parameter_list|)
block|{
name|command
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
block|}
decl_stmt|;
DECL|enum|Impl
enum|enum
name|Impl
block|{
DECL|enumConstant|OLD
name|OLD
block|{
annotation|@
name|Override
name|Executor
name|executor
parameter_list|()
block|{
return|return
name|MoreExecutors
operator|.
name|sameThreadExecutor
argument_list|()
return|;
block|}
block|}
block|,
DECL|enumConstant|NEW
name|NEW
block|{
annotation|@
name|Override
name|Executor
name|executor
parameter_list|()
block|{
return|return
name|INLINE_EXECUTOR
return|;
block|}
block|}
block|;
DECL|method|executor ()
specifier|abstract
name|Executor
name|executor
parameter_list|()
function_decl|;
block|}
DECL|field|impl
annotation|@
name|Param
name|Impl
name|impl
decl_stmt|;
DECL|field|executor
name|Executor
name|executor
decl_stmt|;
DECL|class|CountingRunnable
specifier|static
specifier|final
class|class
name|CountingRunnable
implements|implements
name|Runnable
block|{
DECL|field|integer
name|AtomicInteger
name|integer
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
DECL|method|run ()
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|integer
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
block|}
DECL|field|countingRunnable
name|CountingRunnable
name|countingRunnable
init|=
operator|new
name|CountingRunnable
argument_list|()
decl_stmt|;
DECL|field|threads
name|Set
argument_list|<
name|Thread
argument_list|>
name|threads
init|=
operator|new
name|HashSet
argument_list|<
name|Thread
argument_list|>
argument_list|()
decl_stmt|;
DECL|method|before ()
annotation|@
name|BeforeExperiment
name|void
name|before
parameter_list|()
block|{
name|executor
operator|=
name|impl
operator|.
name|executor
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
name|i
operator|++
control|)
block|{
name|Thread
name|thread
init|=
operator|new
name|Thread
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|CountingRunnable
name|localRunnable
init|=
operator|new
name|CountingRunnable
argument_list|()
decl_stmt|;
while|while
condition|(
operator|!
name|isInterrupted
argument_list|()
condition|)
block|{
name|executor
operator|.
name|execute
argument_list|(
name|localRunnable
argument_list|)
expr_stmt|;
block|}
name|countingRunnable
operator|.
name|integer
operator|.
name|addAndGet
argument_list|(
name|localRunnable
operator|.
name|integer
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|threads
operator|.
name|add
argument_list|(
name|thread
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|after ()
annotation|@
name|AfterExperiment
name|void
name|after
parameter_list|()
throws|throws
name|InterruptedException
block|{
for|for
control|(
name|Thread
name|thread
range|:
name|threads
control|)
block|{
name|thread
operator|.
name|interrupt
argument_list|()
expr_stmt|;
comment|// try to get them to exit
block|}
name|threads
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
DECL|method|measureSize ()
annotation|@
name|Footprint
name|Object
name|measureSize
parameter_list|()
block|{
return|return
name|executor
return|;
block|}
DECL|method|timeUncontendedExecute (int reps)
annotation|@
name|Benchmark
name|int
name|timeUncontendedExecute
parameter_list|(
name|int
name|reps
parameter_list|)
block|{
specifier|final
name|Executor
name|executor
init|=
name|this
operator|.
name|executor
decl_stmt|;
specifier|final
name|CountingRunnable
name|countingRunnable
init|=
name|this
operator|.
name|countingRunnable
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|reps
condition|;
name|i
operator|++
control|)
block|{
name|executor
operator|.
name|execute
argument_list|(
name|countingRunnable
argument_list|)
expr_stmt|;
block|}
return|return
name|countingRunnable
operator|.
name|integer
operator|.
name|get
argument_list|()
return|;
block|}
DECL|method|timeContendedExecute (int reps)
annotation|@
name|Benchmark
name|int
name|timeContendedExecute
parameter_list|(
name|int
name|reps
parameter_list|)
block|{
specifier|final
name|Executor
name|executor
init|=
name|this
operator|.
name|executor
decl_stmt|;
for|for
control|(
name|Thread
name|thread
range|:
name|threads
control|)
block|{
if|if
condition|(
operator|!
name|thread
operator|.
name|isAlive
argument_list|()
condition|)
block|{
name|thread
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
block|}
specifier|final
name|CountingRunnable
name|countingRunnable
init|=
name|this
operator|.
name|countingRunnable
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|reps
condition|;
name|i
operator|++
control|)
block|{
name|executor
operator|.
name|execute
argument_list|(
name|countingRunnable
argument_list|)
expr_stmt|;
block|}
return|return
name|countingRunnable
operator|.
name|integer
operator|.
name|get
argument_list|()
return|;
block|}
block|}
end_class

end_unit

