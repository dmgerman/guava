begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2010 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.util.concurrent
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|errorprone
operator|.
name|annotations
operator|.
name|CanIgnoreReturnValue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|AbstractQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ConcurrentModificationException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NoSuchElementException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|PriorityQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Queue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|BlockingQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|checkerframework
operator|.
name|checker
operator|.
name|nullness
operator|.
name|qual
operator|.
name|Nullable
import|;
end_import

begin_comment
comment|/**  * An unbounded {@linkplain BlockingQueue blocking queue} that uses the same ordering rules as class  * {@link PriorityQueue} and supplies blocking retrieval operations. While this queue is logically  * unbounded, attempted additions may fail due to resource exhaustion (causing {@code  * OutOfMemoryError}). This class does not permit {@code null} elements. A priority queue relying on  * {@linkplain Comparable natural ordering} also does not permit insertion of non-comparable objects  * (doing so results in {@code ClassCastException}).  *  *<p>This class and its iterator implement all of the<em>optional</em> methods of the {@link  * Collection} and {@link Iterator} interfaces. The Iterator provided in method {@link #iterator()}  * is<em>not</em> guaranteed to traverse the elements of the MonitorBasedPriorityBlockingQueue in  * any particular order. If you need ordered traversal, consider using {@code  * Arrays.sort(pq.toArray())}. Also, method {@code drainTo} can be used to<em>remove</em> some or  * all elements in priority order and place them in another collection.  *  *<p>Operations on this class make no guarantees about the ordering of elements with equal  * priority. If you need to enforce an ordering, you can define custom classes or comparators that  * use a secondary key to break ties in primary priority values. For example, here is a class that  * applies first-in-first-out tie-breaking to comparable elements. To use it, you would insert a  * {@code new FIFOEntry(anEntry)} instead of a plain entry object.  *  *<pre>  * class FIFOEntry&lt;E extends Comparable&lt;? super E&gt;&gt;  *     implements Comparable&lt;FIFOEntry&lt;E&gt;&gt; {  *   final static AtomicLong seq = new AtomicLong();  *   final long seqNum;  *   final E entry;  *   public FIFOEntry(E entry) {  *     seqNum = seq.getAndIncrement();  *     this.entry = entry;  *   }  *   public E getEntry() { return entry; }  *   public int compareTo(FIFOEntry&lt;E&gt; other) {  *     int res = entry.compareTo(other.entry);  *     if (res == 0&amp;&amp; other.entry != this.entry)  *       res = (seqNum&lt; other.seqNum ? -1 : 1);  *     return res;  *   }  * }</pre>  *  * @author Doug Lea  * @author Justin T. Sampson  * @param<E> the type of elements held in this collection  */
end_comment

begin_class
annotation|@
name|CanIgnoreReturnValue
comment|// TODO(cpovirk): Consider being more strict.
DECL|class|MonitorBasedPriorityBlockingQueue
specifier|public
class|class
name|MonitorBasedPriorityBlockingQueue
parameter_list|<
name|E
parameter_list|>
extends|extends
name|AbstractQueue
argument_list|<
name|E
argument_list|>
implements|implements
name|BlockingQueue
argument_list|<
name|E
argument_list|>
block|{
comment|// Based on revision 1.55 of PriorityBlockingQueue by Doug Lea, from
comment|// http://gee.cs.oswego.edu/cgi-bin/viewcvs.cgi/jsr166/src/main/java/util/concurrent/
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|5595510919245408276L
decl_stmt|;
DECL|field|q
specifier|final
name|PriorityQueue
argument_list|<
name|E
argument_list|>
name|q
decl_stmt|;
DECL|field|monitor
specifier|final
name|Monitor
name|monitor
init|=
operator|new
name|Monitor
argument_list|(
literal|true
argument_list|)
decl_stmt|;
DECL|field|notEmpty
specifier|private
specifier|final
name|Monitor
operator|.
name|Guard
name|notEmpty
init|=
operator|new
name|Monitor
operator|.
name|Guard
argument_list|(
name|monitor
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isSatisfied
parameter_list|()
block|{
return|return
operator|!
name|q
operator|.
name|isEmpty
argument_list|()
return|;
block|}
block|}
decl_stmt|;
comment|/**    * Creates a {@code MonitorBasedPriorityBlockingQueue} with the default initial capacity (11) that    * orders its elements according to their {@linkplain Comparable natural ordering}.    */
DECL|method|MonitorBasedPriorityBlockingQueue ()
specifier|public
name|MonitorBasedPriorityBlockingQueue
parameter_list|()
block|{
name|q
operator|=
operator|new
name|PriorityQueue
argument_list|<
name|E
argument_list|>
argument_list|()
expr_stmt|;
block|}
comment|/**    * Creates a {@code MonitorBasedPriorityBlockingQueue} with the specified initial capacity that    * orders its elements according to their {@linkplain Comparable natural ordering}.    *    * @param initialCapacity the initial capacity for this priority queue    * @throws IllegalArgumentException if {@code initialCapacity} is less than 1    */
DECL|method|MonitorBasedPriorityBlockingQueue (int initialCapacity)
specifier|public
name|MonitorBasedPriorityBlockingQueue
parameter_list|(
name|int
name|initialCapacity
parameter_list|)
block|{
name|q
operator|=
operator|new
name|PriorityQueue
argument_list|<
name|E
argument_list|>
argument_list|(
name|initialCapacity
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**    * Creates a {@code MonitorBasedPriorityBlockingQueue} with the specified initial capacity that    * orders its elements according to the specified comparator.    *    * @param initialCapacity the initial capacity for this priority queue    * @param comparator the comparator that will be used to order this priority queue. If {@code    *     null}, the {@linkplain Comparable natural ordering} of the elements will be used.    * @throws IllegalArgumentException if {@code initialCapacity} is less than 1    */
DECL|method|MonitorBasedPriorityBlockingQueue ( int initialCapacity, @Nullable Comparator<? super E> comparator)
specifier|public
name|MonitorBasedPriorityBlockingQueue
parameter_list|(
name|int
name|initialCapacity
parameter_list|,
annotation|@
name|Nullable
name|Comparator
argument_list|<
name|?
super|super
name|E
argument_list|>
name|comparator
parameter_list|)
block|{
name|q
operator|=
operator|new
name|PriorityQueue
argument_list|<
name|E
argument_list|>
argument_list|(
name|initialCapacity
argument_list|,
name|comparator
argument_list|)
expr_stmt|;
block|}
comment|/**    * Creates a {@code MonitorBasedPriorityBlockingQueue} containing the elements in the specified    * collection. If the specified collection is a {@link SortedSet} or a {@link PriorityQueue}, this    * priority queue will be ordered according to the same ordering. Otherwise, this priority queue    * will be ordered according to the {@linkplain Comparable natural ordering} of its elements.    *    * @param c the collection whose elements are to be placed into this priority queue    * @throws ClassCastException if elements of the specified collection cannot be compared to one    *     another according to the priority queue's ordering    * @throws NullPointerException if the specified collection or any of its elements are null    */
DECL|method|MonitorBasedPriorityBlockingQueue (Collection<? extends E> c)
specifier|public
name|MonitorBasedPriorityBlockingQueue
parameter_list|(
name|Collection
argument_list|<
name|?
extends|extends
name|E
argument_list|>
name|c
parameter_list|)
block|{
name|q
operator|=
operator|new
name|PriorityQueue
argument_list|<
name|E
argument_list|>
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
comment|/**    * Inserts the specified element into this priority queue.    *    * @param e the element to add    * @return {@code true} (as specified by {@link Collection#add})    * @throws ClassCastException if the specified element cannot be compared with elements currently    *     in the priority queue according to the priority queue's ordering    * @throws NullPointerException if the specified element is null    */
annotation|@
name|Override
DECL|method|add (E e)
specifier|public
name|boolean
name|add
parameter_list|(
name|E
name|e
parameter_list|)
block|{
return|return
name|offer
argument_list|(
name|e
argument_list|)
return|;
block|}
comment|/**    * Inserts the specified element into this priority queue.    *    * @param e the element to add    * @return {@code true} (as specified by {@link Queue#offer})    * @throws ClassCastException if the specified element cannot be compared with elements currently    *     in the priority queue according to the priority queue's ordering    * @throws NullPointerException if the specified element is null    */
annotation|@
name|Override
DECL|method|offer (E e)
specifier|public
name|boolean
name|offer
parameter_list|(
name|E
name|e
parameter_list|)
block|{
specifier|final
name|Monitor
name|monitor
init|=
name|this
operator|.
name|monitor
decl_stmt|;
name|monitor
operator|.
name|enter
argument_list|()
expr_stmt|;
try|try
block|{
name|boolean
name|ok
init|=
name|q
operator|.
name|offer
argument_list|(
name|e
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|ok
condition|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|()
throw|;
block|}
return|return
literal|true
return|;
block|}
finally|finally
block|{
name|monitor
operator|.
name|leave
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Inserts the specified element into this priority queue. As the queue is unbounded this method    * will never block.    *    * @param e the element to add    * @param timeout This parameter is ignored as the method never blocks    * @param unit This parameter is ignored as the method never blocks    * @return {@code true}    * @throws ClassCastException if the specified element cannot be compared with elements currently    *     in the priority queue according to the priority queue's ordering    * @throws NullPointerException if the specified element is null    */
annotation|@
name|Override
DECL|method|offer (E e, long timeout, TimeUnit unit)
specifier|public
name|boolean
name|offer
parameter_list|(
name|E
name|e
parameter_list|,
name|long
name|timeout
parameter_list|,
name|TimeUnit
name|unit
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|unit
argument_list|)
expr_stmt|;
return|return
name|offer
argument_list|(
name|e
argument_list|)
return|;
comment|// never need to block
block|}
comment|/**    * Inserts the specified element into this priority queue. As the queue is unbounded this method    * will never block.    *    * @param e the element to add    * @throws ClassCastException if the specified element cannot be compared with elements currently    *     in the priority queue according to the priority queue's ordering    * @throws NullPointerException if the specified element is null    */
annotation|@
name|Override
DECL|method|put (E e)
specifier|public
name|void
name|put
parameter_list|(
name|E
name|e
parameter_list|)
block|{
name|offer
argument_list|(
name|e
argument_list|)
expr_stmt|;
comment|// never need to block
block|}
annotation|@
name|Override
DECL|method|poll ()
specifier|public
name|E
name|poll
parameter_list|()
block|{
specifier|final
name|Monitor
name|monitor
init|=
name|this
operator|.
name|monitor
decl_stmt|;
name|monitor
operator|.
name|enter
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|q
operator|.
name|poll
argument_list|()
return|;
block|}
finally|finally
block|{
name|monitor
operator|.
name|leave
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|poll (long timeout, TimeUnit unit)
specifier|public
name|E
name|poll
parameter_list|(
name|long
name|timeout
parameter_list|,
name|TimeUnit
name|unit
parameter_list|)
throws|throws
name|InterruptedException
block|{
specifier|final
name|Monitor
name|monitor
init|=
name|this
operator|.
name|monitor
decl_stmt|;
if|if
condition|(
name|monitor
operator|.
name|enterWhen
argument_list|(
name|notEmpty
argument_list|,
name|timeout
argument_list|,
name|unit
argument_list|)
condition|)
block|{
try|try
block|{
return|return
name|q
operator|.
name|poll
argument_list|()
return|;
block|}
finally|finally
block|{
name|monitor
operator|.
name|leave
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|take ()
specifier|public
name|E
name|take
parameter_list|()
throws|throws
name|InterruptedException
block|{
specifier|final
name|Monitor
name|monitor
init|=
name|this
operator|.
name|monitor
decl_stmt|;
name|monitor
operator|.
name|enterWhen
argument_list|(
name|notEmpty
argument_list|)
expr_stmt|;
try|try
block|{
return|return
name|q
operator|.
name|poll
argument_list|()
return|;
block|}
finally|finally
block|{
name|monitor
operator|.
name|leave
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|peek ()
specifier|public
name|E
name|peek
parameter_list|()
block|{
specifier|final
name|Monitor
name|monitor
init|=
name|this
operator|.
name|monitor
decl_stmt|;
name|monitor
operator|.
name|enter
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|q
operator|.
name|peek
argument_list|()
return|;
block|}
finally|finally
block|{
name|monitor
operator|.
name|leave
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Returns the comparator used to order the elements in this queue, or {@code null} if this queue    * uses the {@linkplain Comparable natural ordering} of its elements.    *    * @return the comparator used to order the elements in this queue, or {@code null} if this queue    *     uses the natural ordering of its elements    */
DECL|method|comparator ()
specifier|public
name|Comparator
argument_list|<
name|?
super|super
name|E
argument_list|>
name|comparator
parameter_list|()
block|{
return|return
name|q
operator|.
name|comparator
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|size ()
specifier|public
name|int
name|size
parameter_list|()
block|{
specifier|final
name|Monitor
name|monitor
init|=
name|this
operator|.
name|monitor
decl_stmt|;
name|monitor
operator|.
name|enter
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|q
operator|.
name|size
argument_list|()
return|;
block|}
finally|finally
block|{
name|monitor
operator|.
name|leave
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Always returns {@code Integer.MAX_VALUE} because a {@code MonitorBasedPriorityBlockingQueue} is    * not capacity constrained.    *    * @return {@code Integer.MAX_VALUE}    */
annotation|@
name|Override
DECL|method|remainingCapacity ()
specifier|public
name|int
name|remainingCapacity
parameter_list|()
block|{
return|return
name|Integer
operator|.
name|MAX_VALUE
return|;
block|}
comment|/**    * Removes a single instance of the specified element from this queue, if it is present. More    * formally, removes an element {@code e} such that {@code o.equals(e)}, if this queue contains    * one or more such elements. Returns {@code true} if and only if this queue contained the    * specified element (or equivalently, if this queue changed as a result of the call).    *    * @param o element to be removed from this queue, if present    * @return {@code true} if this queue changed as a result of the call    */
annotation|@
name|Override
DECL|method|remove (@ullable Object o)
specifier|public
name|boolean
name|remove
parameter_list|(
annotation|@
name|Nullable
name|Object
name|o
parameter_list|)
block|{
specifier|final
name|Monitor
name|monitor
init|=
name|this
operator|.
name|monitor
decl_stmt|;
name|monitor
operator|.
name|enter
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|q
operator|.
name|remove
argument_list|(
name|o
argument_list|)
return|;
block|}
finally|finally
block|{
name|monitor
operator|.
name|leave
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Returns {@code true} if this queue contains the specified element. More formally, returns    * {@code true} if and only if this queue contains at least one element {@code e} such that {@code    * o.equals(e)}.    *    * @param o object to be checked for containment in this queue    * @return {@code true} if this queue contains the specified element    */
annotation|@
name|Override
DECL|method|contains (@ullable Object o)
specifier|public
name|boolean
name|contains
parameter_list|(
annotation|@
name|Nullable
name|Object
name|o
parameter_list|)
block|{
specifier|final
name|Monitor
name|monitor
init|=
name|this
operator|.
name|monitor
decl_stmt|;
name|monitor
operator|.
name|enter
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|q
operator|.
name|contains
argument_list|(
name|o
argument_list|)
return|;
block|}
finally|finally
block|{
name|monitor
operator|.
name|leave
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Returns an array containing all of the elements in this queue. The returned array elements are    * in no particular order.    *    *<p>The returned array will be "safe" in that no references to it are maintained by this queue.    * (In other words, this method must allocate a new array). The caller is thus free to modify the    * returned array.    *    *<p>This method acts as bridge between array-based and collection-based APIs.    *    * @return an array containing all of the elements in this queue    */
annotation|@
name|Override
DECL|method|toArray ()
specifier|public
name|Object
index|[]
name|toArray
parameter_list|()
block|{
specifier|final
name|Monitor
name|monitor
init|=
name|this
operator|.
name|monitor
decl_stmt|;
name|monitor
operator|.
name|enter
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|q
operator|.
name|toArray
argument_list|()
return|;
block|}
finally|finally
block|{
name|monitor
operator|.
name|leave
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Returns an array containing all of the elements in this queue; the runtime type of the returned    * array is that of the specified array. The returned array elements are in no particular order.    * If the queue fits in the specified array, it is returned therein. Otherwise, a new array is    * allocated with the runtime type of the specified array and the size of this queue.    *    *<p>If this queue fits in the specified array with room to spare (i.e., the array has more    * elements than this queue), the element in the array immediately following the end of the queue    * is set to {@code null}.    *    *<p>Like the {@link #toArray()} method, this method acts as bridge between array-based and    * collection-based APIs. Further, this method allows precise control over the runtime type of the    * output array, and may, under certain circumstances, be used to save allocation costs.    *    *<p>Suppose {@code x} is a queue known to contain only strings. The following code can be used    * to dump the queue into a newly allocated array of {@code String}:    *    *<pre>    *     String[] y = x.toArray(new String[0]);</pre>    *    *<p>Note that {@code toArray(new Object[0])} is identical in function to {@code toArray()}.    *    * @param a the array into which the elements of the queue are to be stored, if it is big enough;    *     otherwise, a new array of the same runtime type is allocated for this purpose    * @return an array containing all of the elements in this queue    * @throws ArrayStoreException if the runtime type of the specified array is not a supertype of    *     the runtime type of every element in this queue    * @throws NullPointerException if the specified array is null    */
annotation|@
name|Override
DECL|method|toArray (T[] a)
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
index|[]
name|toArray
parameter_list|(
name|T
index|[]
name|a
parameter_list|)
block|{
specifier|final
name|Monitor
name|monitor
init|=
name|this
operator|.
name|monitor
decl_stmt|;
name|monitor
operator|.
name|enter
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|q
operator|.
name|toArray
argument_list|(
name|a
argument_list|)
return|;
block|}
finally|finally
block|{
name|monitor
operator|.
name|leave
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
specifier|final
name|Monitor
name|monitor
init|=
name|this
operator|.
name|monitor
decl_stmt|;
name|monitor
operator|.
name|enter
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|q
operator|.
name|toString
argument_list|()
return|;
block|}
finally|finally
block|{
name|monitor
operator|.
name|leave
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * @throws UnsupportedOperationException {@inheritDoc}    * @throws ClassCastException {@inheritDoc}    * @throws NullPointerException {@inheritDoc}    * @throws IllegalArgumentException {@inheritDoc}    */
annotation|@
name|Override
DECL|method|drainTo (Collection<? super E> c)
specifier|public
name|int
name|drainTo
parameter_list|(
name|Collection
argument_list|<
name|?
super|super
name|E
argument_list|>
name|c
parameter_list|)
block|{
if|if
condition|(
name|c
operator|==
literal|null
condition|)
throw|throw
operator|new
name|NullPointerException
argument_list|()
throw|;
if|if
condition|(
name|c
operator|==
name|this
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
specifier|final
name|Monitor
name|monitor
init|=
name|this
operator|.
name|monitor
decl_stmt|;
name|monitor
operator|.
name|enter
argument_list|()
expr_stmt|;
try|try
block|{
name|int
name|n
init|=
literal|0
decl_stmt|;
name|E
name|e
decl_stmt|;
while|while
condition|(
operator|(
name|e
operator|=
name|q
operator|.
name|poll
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|c
operator|.
name|add
argument_list|(
name|e
argument_list|)
expr_stmt|;
operator|++
name|n
expr_stmt|;
block|}
return|return
name|n
return|;
block|}
finally|finally
block|{
name|monitor
operator|.
name|leave
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * @throws UnsupportedOperationException {@inheritDoc}    * @throws ClassCastException {@inheritDoc}    * @throws NullPointerException {@inheritDoc}    * @throws IllegalArgumentException {@inheritDoc}    */
annotation|@
name|Override
DECL|method|drainTo (Collection<? super E> c, int maxElements)
specifier|public
name|int
name|drainTo
parameter_list|(
name|Collection
argument_list|<
name|?
super|super
name|E
argument_list|>
name|c
parameter_list|,
name|int
name|maxElements
parameter_list|)
block|{
if|if
condition|(
name|c
operator|==
literal|null
condition|)
throw|throw
operator|new
name|NullPointerException
argument_list|()
throw|;
if|if
condition|(
name|c
operator|==
name|this
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
if|if
condition|(
name|maxElements
operator|<=
literal|0
condition|)
return|return
literal|0
return|;
specifier|final
name|Monitor
name|monitor
init|=
name|this
operator|.
name|monitor
decl_stmt|;
name|monitor
operator|.
name|enter
argument_list|()
expr_stmt|;
try|try
block|{
name|int
name|n
init|=
literal|0
decl_stmt|;
name|E
name|e
decl_stmt|;
while|while
condition|(
name|n
operator|<
name|maxElements
operator|&&
operator|(
name|e
operator|=
name|q
operator|.
name|poll
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|c
operator|.
name|add
argument_list|(
name|e
argument_list|)
expr_stmt|;
operator|++
name|n
expr_stmt|;
block|}
return|return
name|n
return|;
block|}
finally|finally
block|{
name|monitor
operator|.
name|leave
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Atomically removes all of the elements from this queue. The queue will be empty after this call    * returns.    */
annotation|@
name|Override
DECL|method|clear ()
specifier|public
name|void
name|clear
parameter_list|()
block|{
specifier|final
name|Monitor
name|monitor
init|=
name|this
operator|.
name|monitor
decl_stmt|;
name|monitor
operator|.
name|enter
argument_list|()
expr_stmt|;
try|try
block|{
name|q
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|monitor
operator|.
name|leave
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Returns an iterator over the elements in this queue. The iterator does not return the elements    * in any particular order. The returned {@code Iterator} is a "weakly consistent" iterator that    * will never throw {@link ConcurrentModificationException}, and guarantees to traverse elements    * as they existed upon construction of the iterator, and may (but is not guaranteed to) reflect    * any modifications subsequent to construction.    *    * @return an iterator over the elements in this queue    */
annotation|@
name|Override
DECL|method|iterator ()
specifier|public
name|Iterator
argument_list|<
name|E
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
operator|new
name|Itr
argument_list|(
name|toArray
argument_list|()
argument_list|)
return|;
block|}
comment|/** Snapshot iterator that works off copy of underlying q array. */
DECL|class|Itr
specifier|private
class|class
name|Itr
implements|implements
name|Iterator
argument_list|<
name|E
argument_list|>
block|{
DECL|field|array
specifier|final
name|Object
index|[]
name|array
decl_stmt|;
comment|// Array of all elements
DECL|field|cursor
name|int
name|cursor
decl_stmt|;
comment|// index of next element to return;
DECL|field|lastRet
name|int
name|lastRet
decl_stmt|;
comment|// index of last element, or -1 if no such
DECL|method|Itr (Object[] array)
name|Itr
parameter_list|(
name|Object
index|[]
name|array
parameter_list|)
block|{
name|lastRet
operator|=
operator|-
literal|1
expr_stmt|;
name|this
operator|.
name|array
operator|=
name|array
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|hasNext ()
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|cursor
operator|<
name|array
operator|.
name|length
return|;
block|}
annotation|@
name|Override
DECL|method|next ()
specifier|public
name|E
name|next
parameter_list|()
block|{
if|if
condition|(
name|cursor
operator|>=
name|array
operator|.
name|length
condition|)
throw|throw
operator|new
name|NoSuchElementException
argument_list|()
throw|;
name|lastRet
operator|=
name|cursor
expr_stmt|;
comment|// array comes from q.toArray() and so should have only E's in it
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|E
name|e
init|=
operator|(
name|E
operator|)
name|array
index|[
name|cursor
operator|++
index|]
decl_stmt|;
return|return
name|e
return|;
block|}
annotation|@
name|Override
DECL|method|remove ()
specifier|public
name|void
name|remove
parameter_list|()
block|{
if|if
condition|(
name|lastRet
operator|<
literal|0
condition|)
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
name|Object
name|x
init|=
name|array
index|[
name|lastRet
index|]
decl_stmt|;
name|lastRet
operator|=
operator|-
literal|1
expr_stmt|;
comment|// Traverse underlying queue to find == element,
comment|// not just a .equals element.
name|monitor
operator|.
name|enter
argument_list|()
expr_stmt|;
try|try
block|{
for|for
control|(
name|Iterator
argument_list|<
name|E
argument_list|>
name|it
init|=
name|q
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
if|if
condition|(
name|it
operator|.
name|next
argument_list|()
operator|==
name|x
condition|)
block|{
name|it
operator|.
name|remove
argument_list|()
expr_stmt|;
return|return;
block|}
block|}
block|}
finally|finally
block|{
name|monitor
operator|.
name|leave
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Saves the state to a stream (that is, serializes it). This merely wraps default serialization    * within the monitor. The serialization strategy for items is left to underlying Queue. Note that    * locking is not needed on deserialization, so readObject is not defined, just relying on    * default.    */
DECL|method|writeObject (java.io.ObjectOutputStream s)
specifier|private
name|void
name|writeObject
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectOutputStream
name|s
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
block|{
name|monitor
operator|.
name|enter
argument_list|()
expr_stmt|;
try|try
block|{
name|s
operator|.
name|defaultWriteObject
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|monitor
operator|.
name|leave
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

