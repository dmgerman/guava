begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2013 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.util.concurrent
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|MoreExecutors
operator|.
name|directExecutor
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|caliper
operator|.
name|AfterExperiment
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|caliper
operator|.
name|BeforeExperiment
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|caliper
operator|.
name|Benchmark
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|caliper
operator|.
name|Param
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|caliper
operator|.
name|api
operator|.
name|Footprint
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|caliper
operator|.
name|api
operator|.
name|VmOptions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|AbstractFutureBenchmarks
operator|.
name|OldAbstractFuture
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Queue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ArrayBlockingQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadPoolExecutor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|concurrent
operator|.
name|GuardedBy
import|;
end_import

begin_comment
comment|/**  * Benchmarks for {@link ExecutionList}.  */
end_comment

begin_class
annotation|@
name|VmOptions
argument_list|(
block|{
literal|"-Xms8g"
block|,
literal|"-Xmx8g"
block|}
argument_list|)
DECL|class|ExecutionListBenchmark
specifier|public
class|class
name|ExecutionListBenchmark
block|{
DECL|field|NUM_THREADS
specifier|private
specifier|static
specifier|final
name|int
name|NUM_THREADS
init|=
literal|10
decl_stmt|;
comment|// make a param?
comment|// simple interface to wrap our two implementations.
DECL|interface|ExecutionListWrapper
interface|interface
name|ExecutionListWrapper
block|{
DECL|method|add (Runnable runnable, Executor executor)
name|void
name|add
parameter_list|(
name|Runnable
name|runnable
parameter_list|,
name|Executor
name|executor
parameter_list|)
function_decl|;
DECL|method|execute ()
name|void
name|execute
parameter_list|()
function_decl|;
comment|/** Returns the underlying implementation, useful for the Footprint benchmark. */
DECL|method|getImpl ()
name|Object
name|getImpl
parameter_list|()
function_decl|;
block|}
DECL|enum|Impl
enum|enum
name|Impl
block|{
DECL|enumConstant|NEW
name|NEW
block|{
annotation|@
name|Override
name|ExecutionListWrapper
name|newExecutionList
parameter_list|()
block|{
return|return
operator|new
name|ExecutionListWrapper
argument_list|()
block|{
specifier|final
name|ExecutionList
name|list
init|=
operator|new
name|ExecutionList
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|add
parameter_list|(
name|Runnable
name|runnable
parameter_list|,
name|Executor
name|executor
parameter_list|)
block|{
name|list
operator|.
name|add
argument_list|(
name|runnable
argument_list|,
name|executor
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|list
operator|.
name|execute
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|getImpl
parameter_list|()
block|{
return|return
name|list
return|;
block|}
block|}
return|;
block|}
block|}
block|,
DECL|enumConstant|NEW_WITH_CAS
name|NEW_WITH_CAS
block|{
annotation|@
name|Override
name|ExecutionListWrapper
name|newExecutionList
parameter_list|()
block|{
return|return
operator|new
name|ExecutionListWrapper
argument_list|()
block|{
specifier|final
name|ExecutionListCAS
name|list
init|=
operator|new
name|ExecutionListCAS
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|add
parameter_list|(
name|Runnable
name|runnable
parameter_list|,
name|Executor
name|executor
parameter_list|)
block|{
name|list
operator|.
name|add
argument_list|(
name|runnable
argument_list|,
name|executor
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|list
operator|.
name|execute
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|getImpl
parameter_list|()
block|{
return|return
name|list
return|;
block|}
block|}
return|;
block|}
block|}
block|,
DECL|enumConstant|NEW_WITH_QUEUE
name|NEW_WITH_QUEUE
block|{
annotation|@
name|Override
name|ExecutionListWrapper
name|newExecutionList
parameter_list|()
block|{
return|return
operator|new
name|ExecutionListWrapper
argument_list|()
block|{
specifier|final
name|NewExecutionListQueue
name|list
init|=
operator|new
name|NewExecutionListQueue
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|add
parameter_list|(
name|Runnable
name|runnable
parameter_list|,
name|Executor
name|executor
parameter_list|)
block|{
name|list
operator|.
name|add
argument_list|(
name|runnable
argument_list|,
name|executor
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|list
operator|.
name|execute
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|getImpl
parameter_list|()
block|{
return|return
name|list
return|;
block|}
block|}
return|;
block|}
block|}
block|,
DECL|enumConstant|NEW_WITHOUT_REVERSE
name|NEW_WITHOUT_REVERSE
block|{
annotation|@
name|Override
name|ExecutionListWrapper
name|newExecutionList
parameter_list|()
block|{
return|return
operator|new
name|ExecutionListWrapper
argument_list|()
block|{
specifier|final
name|NewExecutionListWithoutReverse
name|list
init|=
operator|new
name|NewExecutionListWithoutReverse
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|add
parameter_list|(
name|Runnable
name|runnable
parameter_list|,
name|Executor
name|executor
parameter_list|)
block|{
name|list
operator|.
name|add
argument_list|(
name|runnable
argument_list|,
name|executor
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|list
operator|.
name|execute
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|getImpl
parameter_list|()
block|{
return|return
name|list
return|;
block|}
block|}
return|;
block|}
block|}
block|,
DECL|enumConstant|OLD
name|OLD
block|{
annotation|@
name|Override
name|ExecutionListWrapper
name|newExecutionList
parameter_list|()
block|{
return|return
operator|new
name|ExecutionListWrapper
argument_list|()
block|{
specifier|final
name|OldExecutionList
name|list
init|=
operator|new
name|OldExecutionList
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|add
parameter_list|(
name|Runnable
name|runnable
parameter_list|,
name|Executor
name|executor
parameter_list|)
block|{
name|list
operator|.
name|add
argument_list|(
name|runnable
argument_list|,
name|executor
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|list
operator|.
name|execute
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|getImpl
parameter_list|()
block|{
return|return
name|list
return|;
block|}
block|}
return|;
block|}
block|}
block|,
DECL|enumConstant|ABSTRACT_FUTURE
name|ABSTRACT_FUTURE
block|{
annotation|@
name|Override
name|ExecutionListWrapper
name|newExecutionList
parameter_list|()
block|{
return|return
operator|new
name|ExecutionListWrapper
argument_list|()
block|{
specifier|final
name|AbstractFuture
argument_list|<
name|?
argument_list|>
name|future
init|=
operator|new
name|AbstractFuture
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{}
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|add
parameter_list|(
name|Runnable
name|runnable
parameter_list|,
name|Executor
name|executor
parameter_list|)
block|{
name|future
operator|.
name|addListener
argument_list|(
name|runnable
argument_list|,
name|executor
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|future
operator|.
name|set
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|getImpl
parameter_list|()
block|{
return|return
name|future
return|;
block|}
block|}
return|;
block|}
block|}
block|,
DECL|enumConstant|OLD_ABSTRACT_FUTURE
name|OLD_ABSTRACT_FUTURE
block|{
annotation|@
name|Override
name|ExecutionListWrapper
name|newExecutionList
parameter_list|()
block|{
return|return
operator|new
name|ExecutionListWrapper
argument_list|()
block|{
specifier|final
name|OldAbstractFuture
argument_list|<
name|Object
argument_list|>
name|future
init|=
operator|new
name|OldAbstractFuture
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{}
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|add
parameter_list|(
name|Runnable
name|runnable
parameter_list|,
name|Executor
name|executor
parameter_list|)
block|{
name|future
operator|.
name|addListener
argument_list|(
name|runnable
argument_list|,
name|executor
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|future
operator|.
name|set
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|getImpl
parameter_list|()
block|{
return|return
name|future
return|;
block|}
block|}
return|;
block|}
block|}
block|;
DECL|method|newExecutionList ()
specifier|abstract
name|ExecutionListWrapper
name|newExecutionList
parameter_list|()
function_decl|;
block|}
DECL|field|executorService
specifier|private
name|ThreadPoolExecutor
name|executorService
decl_stmt|;
DECL|field|listenerLatch
specifier|private
name|CountDownLatch
name|listenerLatch
decl_stmt|;
DECL|field|list
specifier|private
name|ExecutionListWrapper
name|list
decl_stmt|;
DECL|field|impl
annotation|@
name|Param
name|Impl
name|impl
decl_stmt|;
DECL|field|numListeners
annotation|@
name|Param
argument_list|(
block|{
literal|"1"
block|,
literal|"5"
block|,
literal|"10"
block|}
argument_list|)
name|int
name|numListeners
decl_stmt|;
DECL|field|listener
specifier|private
specifier|final
name|Runnable
name|listener
init|=
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|listenerLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
decl_stmt|;
DECL|method|setUp ()
annotation|@
name|BeforeExperiment
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|executorService
operator|=
operator|new
name|ThreadPoolExecutor
argument_list|(
name|NUM_THREADS
argument_list|,
name|NUM_THREADS
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|,
operator|new
name|ArrayBlockingQueue
argument_list|<
name|Runnable
argument_list|>
argument_list|(
literal|1000
argument_list|)
argument_list|)
expr_stmt|;
name|executorService
operator|.
name|prestartAllCoreThreads
argument_list|()
expr_stmt|;
specifier|final
name|AtomicInteger
name|integer
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
comment|// Execute a bunch of tasks to ensure that our threads are allocated and hot
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_THREADS
operator|*
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|executorService
operator|.
name|submit
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|integer
operator|.
name|getAndIncrement
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|tearDown ()
annotation|@
name|AfterExperiment
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|executorService
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Footprint
argument_list|(
name|exclude
operator|=
block|{
name|Runnable
operator|.
name|class
block|,
name|Executor
operator|.
name|class
block|}
argument_list|)
DECL|method|measureSize ()
specifier|public
name|Object
name|measureSize
parameter_list|()
block|{
name|list
operator|=
name|impl
operator|.
name|newExecutionList
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numListeners
condition|;
name|i
operator|++
control|)
block|{
name|list
operator|.
name|add
argument_list|(
name|listener
argument_list|,
name|directExecutor
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|list
operator|.
name|getImpl
argument_list|()
return|;
block|}
DECL|method|addThenExecute_singleThreaded (int reps)
annotation|@
name|Benchmark
name|int
name|addThenExecute_singleThreaded
parameter_list|(
name|int
name|reps
parameter_list|)
block|{
name|int
name|returnValue
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|reps
condition|;
name|i
operator|++
control|)
block|{
name|list
operator|=
name|impl
operator|.
name|newExecutionList
argument_list|()
expr_stmt|;
name|listenerLatch
operator|=
operator|new
name|CountDownLatch
argument_list|(
name|numListeners
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|numListeners
condition|;
name|j
operator|++
control|)
block|{
name|list
operator|.
name|add
argument_list|(
name|listener
argument_list|,
name|directExecutor
argument_list|()
argument_list|)
expr_stmt|;
name|returnValue
operator|+=
name|listenerLatch
operator|.
name|getCount
argument_list|()
expr_stmt|;
block|}
name|list
operator|.
name|execute
argument_list|()
expr_stmt|;
name|returnValue
operator|+=
name|listenerLatch
operator|.
name|getCount
argument_list|()
expr_stmt|;
block|}
return|return
name|returnValue
return|;
block|}
DECL|method|executeThenAdd_singleThreaded (int reps)
annotation|@
name|Benchmark
name|int
name|executeThenAdd_singleThreaded
parameter_list|(
name|int
name|reps
parameter_list|)
block|{
name|int
name|returnValue
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|reps
condition|;
name|i
operator|++
control|)
block|{
name|list
operator|=
name|impl
operator|.
name|newExecutionList
argument_list|()
expr_stmt|;
name|list
operator|.
name|execute
argument_list|()
expr_stmt|;
name|listenerLatch
operator|=
operator|new
name|CountDownLatch
argument_list|(
name|numListeners
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|numListeners
condition|;
name|j
operator|++
control|)
block|{
name|list
operator|.
name|add
argument_list|(
name|listener
argument_list|,
name|directExecutor
argument_list|()
argument_list|)
expr_stmt|;
name|returnValue
operator|+=
name|listenerLatch
operator|.
name|getCount
argument_list|()
expr_stmt|;
block|}
name|returnValue
operator|+=
name|listenerLatch
operator|.
name|getCount
argument_list|()
expr_stmt|;
block|}
return|return
name|returnValue
return|;
block|}
DECL|field|executeTask
specifier|private
specifier|final
name|Runnable
name|executeTask
init|=
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|list
operator|.
name|execute
argument_list|()
expr_stmt|;
block|}
block|}
decl_stmt|;
DECL|method|addThenExecute_multiThreaded (final int reps)
annotation|@
name|Benchmark
name|int
name|addThenExecute_multiThreaded
parameter_list|(
specifier|final
name|int
name|reps
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|Runnable
name|addTask
init|=
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numListeners
condition|;
name|i
operator|++
control|)
block|{
name|list
operator|.
name|add
argument_list|(
name|listener
argument_list|,
name|directExecutor
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
decl_stmt|;
name|int
name|returnValue
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|reps
condition|;
name|i
operator|++
control|)
block|{
name|list
operator|=
name|impl
operator|.
name|newExecutionList
argument_list|()
expr_stmt|;
name|listenerLatch
operator|=
operator|new
name|CountDownLatch
argument_list|(
name|numListeners
operator|*
name|NUM_THREADS
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|NUM_THREADS
condition|;
name|j
operator|++
control|)
block|{
name|executorService
operator|.
name|submit
argument_list|(
name|addTask
argument_list|)
expr_stmt|;
block|}
name|executorService
operator|.
name|submit
argument_list|(
name|executeTask
argument_list|)
expr_stmt|;
name|returnValue
operator|+=
operator|(
name|int
operator|)
name|listenerLatch
operator|.
name|getCount
argument_list|()
expr_stmt|;
name|listenerLatch
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
return|return
name|returnValue
return|;
block|}
DECL|method|executeThenAdd_multiThreaded (final int reps)
annotation|@
name|Benchmark
name|int
name|executeThenAdd_multiThreaded
parameter_list|(
specifier|final
name|int
name|reps
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|Runnable
name|addTask
init|=
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numListeners
condition|;
name|i
operator|++
control|)
block|{
name|list
operator|.
name|add
argument_list|(
name|listener
argument_list|,
name|directExecutor
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
decl_stmt|;
name|int
name|returnValue
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|reps
condition|;
name|i
operator|++
control|)
block|{
name|list
operator|=
name|impl
operator|.
name|newExecutionList
argument_list|()
expr_stmt|;
name|listenerLatch
operator|=
operator|new
name|CountDownLatch
argument_list|(
name|numListeners
operator|*
name|NUM_THREADS
argument_list|)
expr_stmt|;
name|executorService
operator|.
name|submit
argument_list|(
name|executeTask
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|NUM_THREADS
condition|;
name|j
operator|++
control|)
block|{
name|executorService
operator|.
name|submit
argument_list|(
name|addTask
argument_list|)
expr_stmt|;
block|}
name|returnValue
operator|+=
operator|(
name|int
operator|)
name|listenerLatch
operator|.
name|getCount
argument_list|()
expr_stmt|;
name|listenerLatch
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
return|return
name|returnValue
return|;
block|}
comment|// This is the old implementation of ExecutionList using a LinkedList.
DECL|class|OldExecutionList
specifier|private
specifier|static
specifier|final
class|class
name|OldExecutionList
block|{
DECL|field|log
specifier|static
specifier|final
name|Logger
name|log
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|OldExecutionList
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|runnables
specifier|final
name|Queue
argument_list|<
name|OldExecutionList
operator|.
name|RunnableExecutorPair
argument_list|>
name|runnables
init|=
name|Lists
operator|.
name|newLinkedList
argument_list|()
decl_stmt|;
DECL|field|executed
name|boolean
name|executed
init|=
literal|false
decl_stmt|;
DECL|method|add (Runnable runnable, Executor executor)
specifier|public
name|void
name|add
parameter_list|(
name|Runnable
name|runnable
parameter_list|,
name|Executor
name|executor
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|runnable
argument_list|,
literal|"Runnable was null."
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|executor
argument_list|,
literal|"Executor was null."
argument_list|)
expr_stmt|;
name|boolean
name|executeImmediate
init|=
literal|false
decl_stmt|;
synchronized|synchronized
init|(
name|runnables
init|)
block|{
if|if
condition|(
operator|!
name|executed
condition|)
block|{
name|runnables
operator|.
name|add
argument_list|(
operator|new
name|RunnableExecutorPair
argument_list|(
name|runnable
argument_list|,
name|executor
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|executeImmediate
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
name|executeImmediate
condition|)
block|{
operator|new
name|RunnableExecutorPair
argument_list|(
name|runnable
argument_list|,
name|executor
argument_list|)
operator|.
name|execute
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|execute ()
specifier|public
name|void
name|execute
parameter_list|()
block|{
synchronized|synchronized
init|(
name|runnables
init|)
block|{
if|if
condition|(
name|executed
condition|)
block|{
return|return;
block|}
name|executed
operator|=
literal|true
expr_stmt|;
block|}
while|while
condition|(
operator|!
name|runnables
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|runnables
operator|.
name|poll
argument_list|()
operator|.
name|execute
argument_list|()
expr_stmt|;
block|}
block|}
DECL|class|RunnableExecutorPair
specifier|private
specifier|static
class|class
name|RunnableExecutorPair
block|{
DECL|field|runnable
specifier|final
name|Runnable
name|runnable
decl_stmt|;
DECL|field|executor
specifier|final
name|Executor
name|executor
decl_stmt|;
DECL|method|RunnableExecutorPair (Runnable runnable, Executor executor)
name|RunnableExecutorPair
parameter_list|(
name|Runnable
name|runnable
parameter_list|,
name|Executor
name|executor
parameter_list|)
block|{
name|this
operator|.
name|runnable
operator|=
name|runnable
expr_stmt|;
name|this
operator|.
name|executor
operator|=
name|executor
expr_stmt|;
block|}
DECL|method|execute ()
name|void
name|execute
parameter_list|()
block|{
try|try
block|{
name|executor
operator|.
name|execute
argument_list|(
name|runnable
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
name|log
operator|.
name|log
argument_list|(
name|Level
operator|.
name|SEVERE
argument_list|,
literal|"RuntimeException while executing runnable "
operator|+
name|runnable
operator|+
literal|" with executor "
operator|+
name|executor
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|// A version of the execution list that doesn't reverse the stack in execute().
DECL|class|NewExecutionListWithoutReverse
specifier|private
specifier|static
specifier|final
class|class
name|NewExecutionListWithoutReverse
block|{
DECL|field|log
specifier|static
specifier|final
name|Logger
name|log
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|NewExecutionListWithoutReverse
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
annotation|@
name|GuardedBy
argument_list|(
literal|"this"
argument_list|)
DECL|field|runnables
specifier|private
name|RunnableExecutorPair
name|runnables
decl_stmt|;
annotation|@
name|GuardedBy
argument_list|(
literal|"this"
argument_list|)
DECL|field|executed
specifier|private
name|boolean
name|executed
decl_stmt|;
DECL|method|add (Runnable runnable, Executor executor)
specifier|public
name|void
name|add
parameter_list|(
name|Runnable
name|runnable
parameter_list|,
name|Executor
name|executor
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|runnable
argument_list|,
literal|"Runnable was null."
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|executor
argument_list|,
literal|"Executor was null."
argument_list|)
expr_stmt|;
synchronized|synchronized
init|(
name|this
init|)
block|{
if|if
condition|(
operator|!
name|executed
condition|)
block|{
name|runnables
operator|=
operator|new
name|RunnableExecutorPair
argument_list|(
name|runnable
argument_list|,
name|executor
argument_list|,
name|runnables
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
name|executeListener
argument_list|(
name|runnable
argument_list|,
name|executor
argument_list|)
expr_stmt|;
block|}
DECL|method|execute ()
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|RunnableExecutorPair
name|list
decl_stmt|;
synchronized|synchronized
init|(
name|this
init|)
block|{
if|if
condition|(
name|executed
condition|)
block|{
return|return;
block|}
name|executed
operator|=
literal|true
expr_stmt|;
name|list
operator|=
name|runnables
expr_stmt|;
name|runnables
operator|=
literal|null
expr_stmt|;
comment|// allow GC to free listeners even if this stays around for a while.
block|}
while|while
condition|(
name|list
operator|!=
literal|null
condition|)
block|{
name|executeListener
argument_list|(
name|list
operator|.
name|runnable
argument_list|,
name|list
operator|.
name|executor
argument_list|)
expr_stmt|;
name|list
operator|=
name|list
operator|.
name|next
expr_stmt|;
block|}
block|}
DECL|method|executeListener (Runnable runnable, Executor executor)
specifier|private
specifier|static
name|void
name|executeListener
parameter_list|(
name|Runnable
name|runnable
parameter_list|,
name|Executor
name|executor
parameter_list|)
block|{
try|try
block|{
name|executor
operator|.
name|execute
argument_list|(
name|runnable
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
name|log
operator|.
name|log
argument_list|(
name|Level
operator|.
name|SEVERE
argument_list|,
literal|"RuntimeException while executing runnable "
operator|+
name|runnable
operator|+
literal|" with executor "
operator|+
name|executor
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|RunnableExecutorPair
specifier|private
specifier|static
specifier|final
class|class
name|RunnableExecutorPair
block|{
DECL|field|runnable
specifier|final
name|Runnable
name|runnable
decl_stmt|;
DECL|field|executor
specifier|final
name|Executor
name|executor
decl_stmt|;
DECL|field|next
annotation|@
name|Nullable
name|RunnableExecutorPair
name|next
decl_stmt|;
DECL|method|RunnableExecutorPair (Runnable runnable, Executor executor, RunnableExecutorPair next)
name|RunnableExecutorPair
parameter_list|(
name|Runnable
name|runnable
parameter_list|,
name|Executor
name|executor
parameter_list|,
name|RunnableExecutorPair
name|next
parameter_list|)
block|{
name|this
operator|.
name|runnable
operator|=
name|runnable
expr_stmt|;
name|this
operator|.
name|executor
operator|=
name|executor
expr_stmt|;
name|this
operator|.
name|next
operator|=
name|next
expr_stmt|;
block|}
block|}
block|}
comment|// A version of the ExecutionList that uses an explicit tail pointer to keep the nodes in order
comment|// rather than flipping the stack in execute().
DECL|class|NewExecutionListQueue
specifier|private
specifier|static
specifier|final
class|class
name|NewExecutionListQueue
block|{
DECL|field|log
specifier|static
specifier|final
name|Logger
name|log
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|NewExecutionListQueue
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
annotation|@
name|GuardedBy
argument_list|(
literal|"this"
argument_list|)
DECL|field|head
specifier|private
name|RunnableExecutorPair
name|head
decl_stmt|;
annotation|@
name|GuardedBy
argument_list|(
literal|"this"
argument_list|)
DECL|field|tail
specifier|private
name|RunnableExecutorPair
name|tail
decl_stmt|;
annotation|@
name|GuardedBy
argument_list|(
literal|"this"
argument_list|)
DECL|field|executed
specifier|private
name|boolean
name|executed
decl_stmt|;
DECL|method|add (Runnable runnable, Executor executor)
specifier|public
name|void
name|add
parameter_list|(
name|Runnable
name|runnable
parameter_list|,
name|Executor
name|executor
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|runnable
argument_list|,
literal|"Runnable was null."
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|executor
argument_list|,
literal|"Executor was null."
argument_list|)
expr_stmt|;
synchronized|synchronized
init|(
name|this
init|)
block|{
if|if
condition|(
operator|!
name|executed
condition|)
block|{
name|RunnableExecutorPair
name|newTail
init|=
operator|new
name|RunnableExecutorPair
argument_list|(
name|runnable
argument_list|,
name|executor
argument_list|)
decl_stmt|;
if|if
condition|(
name|head
operator|==
literal|null
condition|)
block|{
name|head
operator|=
name|newTail
expr_stmt|;
name|tail
operator|=
name|newTail
expr_stmt|;
block|}
else|else
block|{
name|tail
operator|.
name|next
operator|=
name|newTail
expr_stmt|;
name|tail
operator|=
name|newTail
expr_stmt|;
block|}
return|return;
block|}
block|}
name|executeListener
argument_list|(
name|runnable
argument_list|,
name|executor
argument_list|)
expr_stmt|;
block|}
DECL|method|execute ()
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|RunnableExecutorPair
name|list
decl_stmt|;
synchronized|synchronized
init|(
name|this
init|)
block|{
if|if
condition|(
name|executed
condition|)
block|{
return|return;
block|}
name|executed
operator|=
literal|true
expr_stmt|;
name|list
operator|=
name|head
expr_stmt|;
name|head
operator|=
literal|null
expr_stmt|;
comment|// allow GC to free listeners even if this stays around for a while.
name|tail
operator|=
literal|null
expr_stmt|;
block|}
while|while
condition|(
name|list
operator|!=
literal|null
condition|)
block|{
name|executeListener
argument_list|(
name|list
operator|.
name|runnable
argument_list|,
name|list
operator|.
name|executor
argument_list|)
expr_stmt|;
name|list
operator|=
name|list
operator|.
name|next
expr_stmt|;
block|}
block|}
DECL|method|executeListener (Runnable runnable, Executor executor)
specifier|private
specifier|static
name|void
name|executeListener
parameter_list|(
name|Runnable
name|runnable
parameter_list|,
name|Executor
name|executor
parameter_list|)
block|{
try|try
block|{
name|executor
operator|.
name|execute
argument_list|(
name|runnable
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
name|log
operator|.
name|log
argument_list|(
name|Level
operator|.
name|SEVERE
argument_list|,
literal|"RuntimeException while executing runnable "
operator|+
name|runnable
operator|+
literal|" with executor "
operator|+
name|executor
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|RunnableExecutorPair
specifier|private
specifier|static
specifier|final
class|class
name|RunnableExecutorPair
block|{
DECL|field|runnable
name|Runnable
name|runnable
decl_stmt|;
DECL|field|executor
name|Executor
name|executor
decl_stmt|;
DECL|field|next
annotation|@
name|Nullable
name|RunnableExecutorPair
name|next
decl_stmt|;
DECL|method|RunnableExecutorPair (Runnable runnable, Executor executor)
name|RunnableExecutorPair
parameter_list|(
name|Runnable
name|runnable
parameter_list|,
name|Executor
name|executor
parameter_list|)
block|{
name|this
operator|.
name|runnable
operator|=
name|runnable
expr_stmt|;
name|this
operator|.
name|executor
operator|=
name|executor
expr_stmt|;
block|}
block|}
block|}
comment|// A version of the list that uses compare and swap to manage the stack without locks.
DECL|class|ExecutionListCAS
specifier|private
specifier|static
specifier|final
class|class
name|ExecutionListCAS
block|{
DECL|field|log
specifier|static
specifier|final
name|Logger
name|log
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|ExecutionListCAS
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|UNSAFE
specifier|private
specifier|static
specifier|final
name|sun
operator|.
name|misc
operator|.
name|Unsafe
name|UNSAFE
decl_stmt|;
DECL|field|HEAD_OFFSET
specifier|private
specifier|static
specifier|final
name|long
name|HEAD_OFFSET
decl_stmt|;
comment|/**      * A special instance of {@link RunnableExecutorPair} that is used as a sentinel value for the      * bottom of the stack.      */
DECL|field|NULL_PAIR
specifier|private
specifier|static
specifier|final
name|RunnableExecutorPair
name|NULL_PAIR
init|=
operator|new
name|RunnableExecutorPair
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
static|static
block|{
try|try
block|{
name|UNSAFE
operator|=
name|getUnsafe
argument_list|()
expr_stmt|;
name|HEAD_OFFSET
operator|=
name|UNSAFE
operator|.
name|objectFieldOffset
argument_list|(
name|ExecutionListCAS
operator|.
name|class
operator|.
name|getDeclaredField
argument_list|(
literal|"head"
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|Error
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
comment|/**      * TODO(user):  This was copied verbatim from Striped64.java... standardize this?      */
DECL|method|getUnsafe ()
specifier|private
specifier|static
name|sun
operator|.
name|misc
operator|.
name|Unsafe
name|getUnsafe
parameter_list|()
block|{
try|try
block|{
return|return
name|sun
operator|.
name|misc
operator|.
name|Unsafe
operator|.
name|getUnsafe
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|SecurityException
name|tryReflectionInstead
parameter_list|)
block|{}
try|try
block|{
return|return
name|java
operator|.
name|security
operator|.
name|AccessController
operator|.
name|doPrivileged
argument_list|(
operator|new
name|java
operator|.
name|security
operator|.
name|PrivilegedExceptionAction
argument_list|<
name|sun
operator|.
name|misc
operator|.
name|Unsafe
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|sun
operator|.
name|misc
operator|.
name|Unsafe
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|Class
argument_list|<
name|sun
operator|.
name|misc
operator|.
name|Unsafe
argument_list|>
name|k
init|=
name|sun
operator|.
name|misc
operator|.
name|Unsafe
operator|.
name|class
decl_stmt|;
for|for
control|(
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
name|f
range|:
name|k
operator|.
name|getDeclaredFields
argument_list|()
control|)
block|{
name|f
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Object
name|x
init|=
name|f
operator|.
name|get
argument_list|(
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|k
operator|.
name|isInstance
argument_list|(
name|x
argument_list|)
condition|)
return|return
name|k
operator|.
name|cast
argument_list|(
name|x
argument_list|)
return|;
block|}
throw|throw
operator|new
name|NoSuchFieldError
argument_list|(
literal|"the Unsafe"
argument_list|)
throw|;
block|}
block|}
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|java
operator|.
name|security
operator|.
name|PrivilegedActionException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Could not initialize intrinsics"
argument_list|,
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
throw|;
block|}
block|}
DECL|field|head
specifier|private
specifier|volatile
name|RunnableExecutorPair
name|head
init|=
name|NULL_PAIR
decl_stmt|;
DECL|method|add (Runnable runnable, Executor executor)
specifier|public
name|void
name|add
parameter_list|(
name|Runnable
name|runnable
parameter_list|,
name|Executor
name|executor
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|runnable
argument_list|,
literal|"Runnable was null."
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|executor
argument_list|,
literal|"Executor was null."
argument_list|)
expr_stmt|;
name|RunnableExecutorPair
name|newHead
init|=
operator|new
name|RunnableExecutorPair
argument_list|(
name|runnable
argument_list|,
name|executor
argument_list|)
decl_stmt|;
name|RunnableExecutorPair
name|oldHead
decl_stmt|;
do|do
block|{
name|oldHead
operator|=
name|head
expr_stmt|;
if|if
condition|(
name|oldHead
operator|==
literal|null
condition|)
block|{
comment|// If runnables == null then execute() has been called so we should just execute our
comment|// listener immediately.
name|newHead
operator|.
name|execute
argument_list|()
expr_stmt|;
return|return;
block|}
comment|// Try to make newHead the new head of the stack at runnables.
name|newHead
operator|.
name|next
operator|=
name|oldHead
expr_stmt|;
block|}
do|while
condition|(
operator|!
name|UNSAFE
operator|.
name|compareAndSwapObject
argument_list|(
name|this
argument_list|,
name|HEAD_OFFSET
argument_list|,
name|oldHead
argument_list|,
name|newHead
argument_list|)
condition|)
do|;
block|}
DECL|method|execute ()
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|RunnableExecutorPair
name|stack
decl_stmt|;
do|do
block|{
name|stack
operator|=
name|head
expr_stmt|;
if|if
condition|(
name|stack
operator|==
literal|null
condition|)
block|{
comment|// If head == null then execute() has been called so we should just return
return|return;
block|}
comment|// try to swap null into head.
block|}
do|while
condition|(
operator|!
name|UNSAFE
operator|.
name|compareAndSwapObject
argument_list|(
name|this
argument_list|,
name|HEAD_OFFSET
argument_list|,
name|stack
argument_list|,
literal|null
argument_list|)
condition|)
do|;
name|RunnableExecutorPair
name|reversedStack
init|=
literal|null
decl_stmt|;
while|while
condition|(
name|stack
operator|!=
name|NULL_PAIR
condition|)
block|{
name|RunnableExecutorPair
name|head
init|=
name|stack
decl_stmt|;
name|stack
operator|=
name|stack
operator|.
name|next
expr_stmt|;
name|head
operator|.
name|next
operator|=
name|reversedStack
expr_stmt|;
name|reversedStack
operator|=
name|head
expr_stmt|;
block|}
name|stack
operator|=
name|reversedStack
expr_stmt|;
while|while
condition|(
name|stack
operator|!=
literal|null
condition|)
block|{
name|stack
operator|.
name|execute
argument_list|()
expr_stmt|;
name|stack
operator|=
name|stack
operator|.
name|next
expr_stmt|;
block|}
block|}
DECL|class|RunnableExecutorPair
specifier|private
specifier|static
class|class
name|RunnableExecutorPair
block|{
DECL|field|runnable
specifier|final
name|Runnable
name|runnable
decl_stmt|;
DECL|field|executor
specifier|final
name|Executor
name|executor
decl_stmt|;
comment|// Volatile because this is written on one thread and read on another with no synchronization.
DECL|field|next
annotation|@
name|Nullable
specifier|volatile
name|RunnableExecutorPair
name|next
decl_stmt|;
DECL|method|RunnableExecutorPair (Runnable runnable, Executor executor)
name|RunnableExecutorPair
parameter_list|(
name|Runnable
name|runnable
parameter_list|,
name|Executor
name|executor
parameter_list|)
block|{
name|this
operator|.
name|runnable
operator|=
name|runnable
expr_stmt|;
name|this
operator|.
name|executor
operator|=
name|executor
expr_stmt|;
block|}
DECL|method|execute ()
name|void
name|execute
parameter_list|()
block|{
try|try
block|{
name|executor
operator|.
name|execute
argument_list|(
name|runnable
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
name|log
operator|.
name|log
argument_list|(
name|Level
operator|.
name|SEVERE
argument_list|,
literal|"RuntimeException while executing runnable "
operator|+
name|runnable
operator|+
literal|" with executor "
operator|+
name|executor
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

