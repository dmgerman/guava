begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2012 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.base
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|caliper
operator|.
name|Benchmark
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|caliper
operator|.
name|Param
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_comment
comment|/**  * Some microbenchmarks for the {@link MoreObjects.ToStringHelper} class.  *  * @author Osvaldo Doederlein  */
end_comment

begin_class
DECL|class|ToStringHelperBenchmark
specifier|public
class|class
name|ToStringHelperBenchmark
block|{
annotation|@
name|Param
argument_list|(
block|{
literal|"0"
block|,
literal|"1"
block|,
literal|"5"
block|}
argument_list|)
DECL|field|dataSize
name|int
name|dataSize
decl_stmt|;
annotation|@
name|Param
argument_list|(
block|{
literal|"false"
block|,
literal|"true"
block|}
argument_list|)
DECL|field|omitNulls
name|boolean
name|omitNulls
decl_stmt|;
DECL|enum|Dataset
enum|enum
name|Dataset
block|{
DECL|enumConstant|SMALL
name|SMALL
block|{
name|void
name|addEntries
parameter_list|(
name|MoreObjects
operator|.
name|ToStringHelper
name|helper
parameter_list|)
block|{
name|helper
operator|.
name|add
argument_list|(
name|SHORT_NAME
argument_list|,
literal|10
argument_list|)
operator|.
name|addValue
argument_list|(
literal|10L
argument_list|)
operator|.
name|add
argument_list|(
name|SHORT_NAME
argument_list|,
literal|3.14f
argument_list|)
operator|.
name|addValue
argument_list|(
literal|3.14d
argument_list|)
operator|.
name|add
argument_list|(
name|LONG_NAME
argument_list|,
literal|false
argument_list|)
operator|.
name|add
argument_list|(
name|LONG_NAME
argument_list|,
name|LONG_NAME
argument_list|)
expr_stmt|;
block|}
block|}
block|,
DECL|enumConstant|CONDITIONAL
name|CONDITIONAL
block|{
name|void
name|addEntries
parameter_list|(
name|MoreObjects
operator|.
name|ToStringHelper
name|helper
parameter_list|)
block|{
name|helper
operator|.
name|add
argument_list|(
name|SHORT_NAME
argument_list|,
literal|"x"
argument_list|)
operator|.
name|add
argument_list|(
name|LONG_NAME
argument_list|,
literal|"y"
argument_list|)
operator|.
name|add
argument_list|(
name|SHORT_NAME
argument_list|,
literal|null
argument_list|)
operator|.
name|add
argument_list|(
name|LONG_NAME
argument_list|,
literal|null
argument_list|)
operator|.
name|addValue
argument_list|(
literal|"z"
argument_list|)
operator|.
name|addValue
argument_list|(
literal|""
argument_list|)
operator|.
name|addValue
argument_list|(
literal|null
argument_list|)
operator|.
name|add
argument_list|(
name|SHORT_NAME
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"A"
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|LONG_NAME
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"B"
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|SHORT_NAME
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|()
argument_list|)
operator|.
name|add
argument_list|(
name|LONG_NAME
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|()
argument_list|)
operator|.
name|addValue
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"C"
argument_list|)
argument_list|)
operator|.
name|addValue
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|()
argument_list|)
operator|.
name|add
argument_list|(
name|SHORT_NAME
argument_list|,
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"k1"
argument_list|,
literal|"v1"
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|LONG_NAME
argument_list|,
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"k2"
argument_list|,
literal|"v2"
argument_list|)
argument_list|)
operator|.
name|addValue
argument_list|(
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"k3"
argument_list|,
literal|"v3"
argument_list|)
argument_list|)
operator|.
name|addValue
argument_list|(
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
operator|.
name|addValue
argument_list|(
literal|null
argument_list|)
operator|.
name|add
argument_list|(
name|SHORT_NAME
argument_list|,
name|java
operator|.
name|util
operator|.
name|Optional
operator|.
name|of
argument_list|(
literal|"1"
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|LONG_NAME
argument_list|,
name|java
operator|.
name|util
operator|.
name|Optional
operator|.
name|of
argument_list|(
literal|"1"
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|SHORT_NAME
argument_list|,
name|java
operator|.
name|util
operator|.
name|Optional
operator|.
name|empty
argument_list|()
argument_list|)
operator|.
name|add
argument_list|(
name|LONG_NAME
argument_list|,
name|java
operator|.
name|util
operator|.
name|Optional
operator|.
name|empty
argument_list|()
argument_list|)
operator|.
name|add
argument_list|(
name|SHORT_NAME
argument_list|,
name|Optional
operator|.
name|of
argument_list|(
literal|"2"
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|SHORT_NAME
argument_list|,
name|Optional
operator|.
name|absent
argument_list|()
argument_list|)
operator|.
name|addValue
argument_list|(
literal|null
argument_list|)
operator|.
name|add
argument_list|(
name|SHORT_NAME
argument_list|,
operator|new
name|int
index|[]
block|{
literal|1
block|}
argument_list|)
operator|.
name|add
argument_list|(
name|LONG_NAME
argument_list|,
operator|new
name|int
index|[]
block|{
literal|2
block|}
argument_list|)
operator|.
name|addValue
argument_list|(
operator|new
name|int
index|[]
block|{
literal|3
block|}
argument_list|)
operator|.
name|addValue
argument_list|(
operator|new
name|int
index|[]
block|{}
argument_list|)
operator|.
name|addValue
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
block|,
DECL|enumConstant|UNCONDITIONAL
name|UNCONDITIONAL
block|{
name|void
name|addEntries
parameter_list|(
name|MoreObjects
operator|.
name|ToStringHelper
name|helper
parameter_list|)
block|{
name|helper
operator|.
name|add
argument_list|(
name|SHORT_NAME
argument_list|,
literal|false
argument_list|)
operator|.
name|add
argument_list|(
name|LONG_NAME
argument_list|,
literal|false
argument_list|)
operator|.
name|addValue
argument_list|(
literal|true
argument_list|)
operator|.
name|add
argument_list|(
name|SHORT_NAME
argument_list|,
operator|(
name|byte
operator|)
literal|1
argument_list|)
operator|.
name|add
argument_list|(
name|LONG_NAME
argument_list|,
operator|(
name|byte
operator|)
literal|2
argument_list|)
operator|.
name|addValue
argument_list|(
operator|(
name|byte
operator|)
literal|3
argument_list|)
operator|.
name|add
argument_list|(
name|SHORT_NAME
argument_list|,
literal|'A'
argument_list|)
operator|.
name|add
argument_list|(
name|LONG_NAME
argument_list|,
literal|'B'
argument_list|)
operator|.
name|addValue
argument_list|(
literal|'C'
argument_list|)
operator|.
name|add
argument_list|(
name|SHORT_NAME
argument_list|,
operator|(
name|short
operator|)
literal|4
argument_list|)
operator|.
name|add
argument_list|(
name|LONG_NAME
argument_list|,
operator|(
name|short
operator|)
literal|5
argument_list|)
operator|.
name|addValue
argument_list|(
operator|(
name|short
operator|)
literal|6
argument_list|)
operator|.
name|add
argument_list|(
name|SHORT_NAME
argument_list|,
literal|7
argument_list|)
operator|.
name|add
argument_list|(
name|LONG_NAME
argument_list|,
literal|8
argument_list|)
operator|.
name|addValue
argument_list|(
literal|9
argument_list|)
operator|.
name|add
argument_list|(
name|SHORT_NAME
argument_list|,
literal|10L
argument_list|)
operator|.
name|add
argument_list|(
name|LONG_NAME
argument_list|,
literal|11L
argument_list|)
operator|.
name|addValue
argument_list|(
literal|12L
argument_list|)
operator|.
name|add
argument_list|(
name|SHORT_NAME
argument_list|,
literal|13.0f
argument_list|)
operator|.
name|add
argument_list|(
name|LONG_NAME
argument_list|,
literal|14.0f
argument_list|)
operator|.
name|addValue
argument_list|(
literal|15.0f
argument_list|)
expr_stmt|;
block|}
block|}
block|;
DECL|method|addEntries (MoreObjects.ToStringHelper helper)
name|void
name|addEntries
parameter_list|(
name|MoreObjects
operator|.
name|ToStringHelper
name|helper
parameter_list|)
block|{}
block|}
DECL|field|dataset
annotation|@
name|Param
name|Dataset
name|dataset
decl_stmt|;
DECL|field|SHORT_NAME
specifier|private
specifier|static
specifier|final
name|String
name|SHORT_NAME
init|=
literal|"userId"
decl_stmt|;
DECL|field|LONG_NAME
specifier|private
specifier|static
specifier|final
name|String
name|LONG_NAME
init|=
literal|"fluxCapacitorFailureRate95Percentile"
decl_stmt|;
DECL|method|newHelper ()
specifier|private
name|MoreObjects
operator|.
name|ToStringHelper
name|newHelper
parameter_list|()
block|{
name|MoreObjects
operator|.
name|ToStringHelper
name|helper
init|=
name|MoreObjects
operator|.
name|toStringHelper
argument_list|(
literal|"klass"
argument_list|)
decl_stmt|;
if|if
condition|(
name|omitNulls
condition|)
block|{
name|helper
operator|=
name|helper
operator|.
name|omitNullValues
argument_list|()
expr_stmt|;
block|}
return|return
name|helper
return|;
block|}
annotation|@
name|Benchmark
DECL|method|toString (int reps)
name|int
name|toString
parameter_list|(
name|int
name|reps
parameter_list|)
block|{
name|int
name|dummy
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|reps
condition|;
name|i
operator|++
control|)
block|{
name|MoreObjects
operator|.
name|ToStringHelper
name|helper
init|=
name|newHelper
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|dataSize
condition|;
operator|++
name|j
control|)
block|{
name|dataset
operator|.
name|addEntries
argument_list|(
name|helper
argument_list|)
expr_stmt|;
block|}
name|dummy
operator|^=
name|helper
operator|.
name|toString
argument_list|()
operator|.
name|hashCode
argument_list|()
expr_stmt|;
block|}
return|return
name|dummy
return|;
block|}
block|}
end_class

end_unit

