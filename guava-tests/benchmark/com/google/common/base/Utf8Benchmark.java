begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2011 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.base
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|caliper
operator|.
name|BeforeExperiment
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|caliper
operator|.
name|Benchmark
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|caliper
operator|.
name|Param
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_comment
comment|/**  * Benchmark for the {@link Utf8} class.  *  *  * @author Martin Buchholz  */
end_comment

begin_class
DECL|class|Utf8Benchmark
specifier|public
class|class
name|Utf8Benchmark
block|{
DECL|class|MaxCodePoint
specifier|static
class|class
name|MaxCodePoint
block|{
DECL|field|value
specifier|final
name|int
name|value
decl_stmt|;
comment|/**      * Convert the input string to a code point.  Accepts regular      * decimal numerals, hex strings, and some symbolic names      * meaningful to humans.      */
DECL|method|decode (String userFriendly)
specifier|private
specifier|static
name|int
name|decode
parameter_list|(
name|String
name|userFriendly
parameter_list|)
block|{
try|try
block|{
return|return
name|Integer
operator|.
name|decode
argument_list|(
name|userFriendly
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|ignored
parameter_list|)
block|{
if|if
condition|(
name|userFriendly
operator|.
name|matches
argument_list|(
literal|"(?i)(?:American|English|ASCII)"
argument_list|)
condition|)
block|{
comment|// 1-byte UTF-8 sequences - "American" ASCII text
return|return
literal|0x80
return|;
block|}
elseif|else
if|if
condition|(
name|userFriendly
operator|.
name|matches
argument_list|(
literal|"(?i)(?:French|Latin|Western.*European)"
argument_list|)
condition|)
block|{
comment|// Mostly 1-byte UTF-8 sequences, mixed with occasional 2-byte
comment|// sequences - "Western European" text
return|return
literal|0x90
return|;
block|}
elseif|else
if|if
condition|(
name|userFriendly
operator|.
name|matches
argument_list|(
literal|"(?i)(?:Greek|Cyrillic|European|ISO.?8859)"
argument_list|)
condition|)
block|{
comment|// Mostly 2-byte UTF-8 sequences - "European" text
return|return
literal|0x800
return|;
block|}
elseif|else
if|if
condition|(
name|userFriendly
operator|.
name|matches
argument_list|(
literal|"(?i)(?:Chinese|Han|Asian|BMP)"
argument_list|)
condition|)
block|{
comment|// Mostly 3-byte UTF-8 sequences - "Asian" text
return|return
name|Character
operator|.
name|MIN_SUPPLEMENTARY_CODE_POINT
return|;
block|}
elseif|else
if|if
condition|(
name|userFriendly
operator|.
name|matches
argument_list|(
literal|"(?i)(?:Cuneiform|rare|exotic|supplementary.*)"
argument_list|)
condition|)
block|{
comment|// Mostly 4-byte UTF-8 sequences - "rare exotic" text
return|return
name|Character
operator|.
name|MAX_CODE_POINT
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Can't decode codepoint "
operator|+
name|userFriendly
argument_list|)
throw|;
block|}
block|}
block|}
DECL|method|valueOf (String userFriendly)
specifier|public
specifier|static
name|MaxCodePoint
name|valueOf
parameter_list|(
name|String
name|userFriendly
parameter_list|)
block|{
return|return
operator|new
name|MaxCodePoint
argument_list|(
name|userFriendly
argument_list|)
return|;
block|}
DECL|method|MaxCodePoint (String userFriendly)
specifier|public
name|MaxCodePoint
parameter_list|(
name|String
name|userFriendly
parameter_list|)
block|{
name|value
operator|=
name|decode
argument_list|(
name|userFriendly
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * The default values of maxCodePoint below provide pretty good    * performance models of different kinds of common human text.    * @see MaxCodePoint#decode    */
DECL|field|maxCodePoint
annotation|@
name|Param
argument_list|(
block|{
literal|"0x80"
block|,
literal|"0x90"
block|,
literal|"0x800"
block|,
literal|"0x10000"
block|,
literal|"0x10ffff"
block|}
argument_list|)
name|MaxCodePoint
name|maxCodePoint
decl_stmt|;
DECL|field|byteArrayCount
annotation|@
name|Param
argument_list|(
block|{
literal|"100"
block|}
argument_list|)
name|int
name|byteArrayCount
decl_stmt|;
DECL|field|charCount
annotation|@
name|Param
argument_list|(
block|{
literal|"16384"
block|}
argument_list|)
name|int
name|charCount
decl_stmt|;
DECL|field|byteArrays
specifier|private
name|byte
index|[]
index|[]
name|byteArrays
decl_stmt|;
DECL|method|setUp ()
annotation|@
name|BeforeExperiment
name|void
name|setUp
parameter_list|()
block|{
specifier|final
name|long
name|seed
init|=
literal|99
decl_stmt|;
specifier|final
name|Random
name|rnd
init|=
operator|new
name|Random
argument_list|(
name|seed
argument_list|)
decl_stmt|;
name|byteArrays
operator|=
operator|new
name|byte
index|[
name|byteArrayCount
index|]
index|[]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|byteArrayCount
condition|;
name|i
operator|++
control|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|charCount
condition|;
name|j
operator|++
control|)
block|{
name|int
name|codePoint
decl_stmt|;
do|do
block|{
name|codePoint
operator|=
name|rnd
operator|.
name|nextInt
argument_list|(
name|maxCodePoint
operator|.
name|value
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
name|isSurrogate
argument_list|(
name|codePoint
argument_list|)
condition|)
do|;
name|sb
operator|.
name|appendCodePoint
argument_list|(
name|codePoint
argument_list|)
expr_stmt|;
block|}
name|byte
index|[]
name|bytes
init|=
name|sb
operator|.
name|toString
argument_list|()
operator|.
name|getBytes
argument_list|(
name|Charsets
operator|.
name|UTF_8
argument_list|)
decl_stmt|;
name|byteArrays
index|[
name|i
index|]
operator|=
name|bytes
expr_stmt|;
block|}
block|}
comment|/**    * Benchmarks {@link Utf8#isWellFormed} on valid byte arrays    * containing pseudo-randomly-generated codePoints less than {@code    * maxCodePoint}.  A constant seed is used, so separate runs perform    * identical computations.    */
DECL|method|isWellFormed (int reps)
annotation|@
name|Benchmark
name|void
name|isWellFormed
parameter_list|(
name|int
name|reps
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|reps
condition|;
name|i
operator|++
control|)
block|{
for|for
control|(
name|byte
index|[]
name|byteArray
range|:
name|byteArrays
control|)
block|{
if|if
condition|(
operator|!
name|Utf8
operator|.
name|isWellFormed
argument_list|(
name|byteArray
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|Error
argument_list|(
literal|"unexpected invalid UTF-8"
argument_list|)
throw|;
block|}
block|}
block|}
block|}
comment|/** Character.isSurrogate was added in Java SE 7. */
DECL|method|isSurrogate (int c)
specifier|private
name|boolean
name|isSurrogate
parameter_list|(
name|int
name|c
parameter_list|)
block|{
return|return
operator|(
name|Character
operator|.
name|MIN_HIGH_SURROGATE
operator|<=
name|c
operator|&&
name|c
operator|<=
name|Character
operator|.
name|MAX_LOW_SURROGATE
operator|)
return|;
block|}
block|}
end_class

end_unit

