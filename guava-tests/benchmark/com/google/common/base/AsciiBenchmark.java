begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2010 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.base
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|caliper
operator|.
name|Param
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|caliper
operator|.
name|Runner
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|caliper
operator|.
name|SimpleBenchmark
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Ascii
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|primitives
operator|.
name|Chars
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_comment
comment|/**  * Benchmarks for the ASCII class.  *  * @author Kevin Bourrillion  */
end_comment

begin_class
DECL|class|AsciiBenchmark
specifier|public
class|class
name|AsciiBenchmark
extends|extends
name|SimpleBenchmark
block|{
DECL|field|ALPHA
specifier|private
specifier|static
name|String
name|ALPHA
init|=
literal|"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz"
decl_stmt|;
DECL|field|NONALPHA
specifier|private
specifier|static
name|String
name|NONALPHA
init|=
literal|"0123456789`~-_=+[]{}|;:',.<>/?!@#$%^&*()\"\\"
decl_stmt|;
DECL|field|size
annotation|@
name|Param
argument_list|(
block|{
literal|"20"
block|,
literal|"2000"
block|}
argument_list|)
name|int
name|size
decl_stmt|;
DECL|field|nonAlphaRatio
annotation|@
name|Param
argument_list|(
block|{
literal|"2"
block|,
literal|"20"
block|}
argument_list|)
name|int
name|nonAlphaRatio
decl_stmt|;
comment|// one non-alpha char per this many chars
DECL|field|noWorkToDo
annotation|@
name|Param
name|boolean
name|noWorkToDo
decl_stmt|;
DECL|field|random
name|Random
name|random
decl_stmt|;
DECL|field|testString
name|String
name|testString
decl_stmt|;
DECL|method|setUp ()
annotation|@
name|Override
specifier|protected
name|void
name|setUp
parameter_list|()
block|{
name|random
operator|=
operator|new
name|Random
argument_list|()
expr_stmt|;
name|int
name|nonAlpha
init|=
name|size
operator|/
name|nonAlphaRatio
decl_stmt|;
name|int
name|alpha
init|=
name|size
operator|-
name|nonAlpha
decl_stmt|;
name|List
argument_list|<
name|Character
argument_list|>
name|chars
init|=
name|Lists
operator|.
name|newArrayListWithCapacity
argument_list|(
name|size
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|alpha
condition|;
name|i
operator|++
control|)
block|{
name|chars
operator|.
name|add
argument_list|(
name|randomAlpha
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nonAlpha
condition|;
name|i
operator|++
control|)
block|{
name|chars
operator|.
name|add
argument_list|(
name|randomNonAlpha
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Collections
operator|.
name|shuffle
argument_list|(
name|chars
argument_list|,
name|random
argument_list|)
expr_stmt|;
name|char
index|[]
name|array
init|=
name|Chars
operator|.
name|toArray
argument_list|(
name|chars
argument_list|)
decl_stmt|;
name|this
operator|.
name|testString
operator|=
operator|new
name|String
argument_list|(
name|array
argument_list|)
expr_stmt|;
block|}
DECL|method|randomAlpha ()
specifier|private
name|char
name|randomAlpha
parameter_list|()
block|{
return|return
name|ALPHA
operator|.
name|charAt
argument_list|(
name|random
operator|.
name|nextInt
argument_list|(
name|ALPHA
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
DECL|method|randomNonAlpha ()
specifier|private
name|char
name|randomNonAlpha
parameter_list|()
block|{
return|return
name|NONALPHA
operator|.
name|charAt
argument_list|(
name|random
operator|.
name|nextInt
argument_list|(
name|NONALPHA
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
DECL|method|timeAsciiToUpperCase (int reps)
specifier|public
name|int
name|timeAsciiToUpperCase
parameter_list|(
name|int
name|reps
parameter_list|)
block|{
name|String
name|string
init|=
name|noWorkToDo
condition|?
name|Ascii
operator|.
name|toUpperCase
argument_list|(
name|testString
argument_list|)
else|:
name|testString
decl_stmt|;
name|int
name|dummy
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|reps
condition|;
name|i
operator|++
control|)
block|{
name|dummy
operator|+=
name|Ascii
operator|.
name|toUpperCase
argument_list|(
name|string
argument_list|)
operator|.
name|length
argument_list|()
expr_stmt|;
block|}
return|return
name|dummy
return|;
block|}
DECL|method|timeStringToUpperCase1 (int reps)
specifier|public
name|int
name|timeStringToUpperCase1
parameter_list|(
name|int
name|reps
parameter_list|)
block|{
name|String
name|string
init|=
name|noWorkToDo
condition|?
name|testString
operator|.
name|toUpperCase
argument_list|()
else|:
name|testString
decl_stmt|;
name|int
name|dummy
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|reps
condition|;
name|i
operator|++
control|)
block|{
name|dummy
operator|+=
name|string
operator|.
name|toUpperCase
argument_list|()
operator|.
name|length
argument_list|()
expr_stmt|;
block|}
return|return
name|dummy
return|;
block|}
DECL|method|timeStringToUpperCase2 (int reps)
specifier|public
name|int
name|timeStringToUpperCase2
parameter_list|(
name|int
name|reps
parameter_list|)
block|{
name|String
name|string
init|=
name|noWorkToDo
condition|?
name|testString
operator|.
name|toUpperCase
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
else|:
name|testString
decl_stmt|;
name|int
name|dummy
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|reps
condition|;
name|i
operator|++
control|)
block|{
name|dummy
operator|+=
name|string
operator|.
name|toUpperCase
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
operator|.
name|length
argument_list|()
expr_stmt|;
block|}
return|return
name|dummy
return|;
block|}
DECL|method|main (String[] args)
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
name|Runner
operator|.
name|main
argument_list|(
name|AsciiBenchmark
operator|.
name|class
argument_list|,
name|args
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

