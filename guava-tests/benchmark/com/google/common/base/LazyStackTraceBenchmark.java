begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2013 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.base
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Throwables
operator|.
name|lazyStackTrace
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Arrays
operator|.
name|asList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|caliper
operator|.
name|BeforeExperiment
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|caliper
operator|.
name|Benchmark
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|caliper
operator|.
name|Param
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|caliper
operator|.
name|api
operator|.
name|SkipThisScenarioException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Quick and dirty benchmark of {@link Throwables#lazyStackTrace(Throwable)}. We benchmark a "caller  * finder" implementation that might be used in a logging framework.  */
end_comment

begin_class
DECL|class|LazyStackTraceBenchmark
specifier|public
class|class
name|LazyStackTraceBenchmark
block|{
DECL|field|stackDepth
annotation|@
name|Param
argument_list|(
block|{
literal|"20"
block|,
literal|"200"
block|,
literal|"2000"
block|}
argument_list|)
name|int
name|stackDepth
decl_stmt|;
DECL|field|breakAt
annotation|@
name|Param
argument_list|(
block|{
literal|"-1"
block|,
literal|"3"
block|,
literal|"15"
block|}
argument_list|)
name|int
name|breakAt
decl_stmt|;
DECL|field|recursionCount
name|int
name|recursionCount
decl_stmt|;
DECL|field|duh
specifier|private
specifier|static
specifier|final
name|Object
name|duh
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
DECL|field|mode
annotation|@
name|Param
name|Mode
name|mode
decl_stmt|;
DECL|enum|Mode
enum|enum
name|Mode
block|{
DECL|enumConstant|LAZY_STACK_TRACE
name|LAZY_STACK_TRACE
block|{
annotation|@
name|Override
name|List
argument_list|<
name|StackTraceElement
argument_list|>
name|getStackTrace
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
return|return
name|lazyStackTrace
argument_list|(
name|t
argument_list|)
return|;
block|}
block|}
block|,
DECL|enumConstant|GET_STACK_TRACE
name|GET_STACK_TRACE
block|{
annotation|@
name|Override
name|List
argument_list|<
name|StackTraceElement
argument_list|>
name|getStackTrace
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
return|return
name|asList
argument_list|(
name|t
operator|.
name|getStackTrace
argument_list|()
argument_list|)
return|;
block|}
block|}
block|;
DECL|method|timeIt (int reps, int breakAt)
name|boolean
name|timeIt
parameter_list|(
name|int
name|reps
parameter_list|,
name|int
name|breakAt
parameter_list|)
block|{
name|boolean
name|dummy
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|reps
condition|;
name|i
operator|++
control|)
block|{
name|int
name|f
init|=
literal|0
decl_stmt|;
name|Throwable
name|t
init|=
operator|new
name|Throwable
argument_list|()
decl_stmt|;
for|for
control|(
name|StackTraceElement
name|ste
range|:
name|getStackTrace
argument_list|(
name|t
argument_list|)
control|)
block|{
name|dummy
operator||=
name|ste
operator|==
name|duh
expr_stmt|;
if|if
condition|(
name|f
operator|++
operator|==
name|breakAt
condition|)
block|{
break|break;
block|}
block|}
block|}
return|return
name|dummy
return|;
block|}
DECL|method|getStackTrace (Throwable t)
specifier|abstract
name|List
argument_list|<
name|StackTraceElement
argument_list|>
name|getStackTrace
parameter_list|(
name|Throwable
name|t
parameter_list|)
function_decl|;
block|}
annotation|@
name|BeforeExperiment
DECL|method|doBefore ()
specifier|public
name|void
name|doBefore
parameter_list|()
block|{
name|recursionCount
operator|=
name|stackDepth
operator|-
operator|new
name|Throwable
argument_list|()
operator|.
name|getStackTrace
argument_list|()
operator|.
name|length
operator|-
literal|1
expr_stmt|;
if|if
condition|(
name|recursionCount
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|SkipThisScenarioException
argument_list|()
throw|;
block|}
block|}
annotation|@
name|Benchmark
DECL|method|timeFindCaller (int reps)
specifier|public
name|boolean
name|timeFindCaller
parameter_list|(
name|int
name|reps
parameter_list|)
block|{
return|return
name|timeFindCaller
argument_list|(
name|reps
argument_list|,
name|recursionCount
argument_list|)
return|;
block|}
DECL|method|timeFindCaller (int reps, int recurse)
specifier|private
name|boolean
name|timeFindCaller
parameter_list|(
name|int
name|reps
parameter_list|,
name|int
name|recurse
parameter_list|)
block|{
return|return
name|recurse
operator|>
literal|0
condition|?
name|timeFindCaller
argument_list|(
name|reps
argument_list|,
name|recurse
operator|-
literal|1
argument_list|)
else|:
name|mode
operator|.
name|timeIt
argument_list|(
name|reps
argument_list|,
name|breakAt
argument_list|)
return|;
block|}
block|}
end_class

end_unit

