begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2011 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.base
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|caliper
operator|.
name|BeforeExperiment
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|caliper
operator|.
name|Benchmark
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|caliper
operator|.
name|Param
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_comment
comment|/**  * Microbenchmark for {@link Splitter#on} with char vs String with length == 1.  *  * @author Paul Lindner  */
end_comment

begin_class
DECL|class|SplitterBenchmark
specifier|public
class|class
name|SplitterBenchmark
block|{
comment|// overall size of string
DECL|field|length
annotation|@
name|Param
argument_list|(
block|{
literal|"1"
block|,
literal|"10"
block|,
literal|"100"
block|,
literal|"1000"
block|}
argument_list|)
name|int
name|length
decl_stmt|;
comment|// Number of matching strings
DECL|field|text
annotation|@
name|Param
argument_list|(
block|{
literal|"xxxx"
block|,
literal|"xxXx"
block|,
literal|"xXxX"
block|,
literal|"XXXX"
block|}
argument_list|)
name|String
name|text
decl_stmt|;
DECL|field|input
specifier|private
name|String
name|input
decl_stmt|;
DECL|field|CHAR_SPLITTER
specifier|private
specifier|static
specifier|final
name|Splitter
name|CHAR_SPLITTER
init|=
name|Splitter
operator|.
name|on
argument_list|(
literal|'X'
argument_list|)
decl_stmt|;
DECL|field|STRING_SPLITTER
specifier|private
specifier|static
specifier|final
name|Splitter
name|STRING_SPLITTER
init|=
name|Splitter
operator|.
name|on
argument_list|(
literal|"X"
argument_list|)
decl_stmt|;
DECL|method|setUp ()
annotation|@
name|BeforeExperiment
name|void
name|setUp
parameter_list|()
block|{
name|input
operator|=
name|Strings
operator|.
name|repeat
argument_list|(
name|text
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
DECL|method|charSplitter (int reps)
annotation|@
name|Benchmark
name|void
name|charSplitter
parameter_list|(
name|int
name|reps
parameter_list|)
block|{
name|int
name|total
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|reps
condition|;
name|i
operator|++
control|)
block|{
name|total
operator|+=
name|Iterables
operator|.
name|size
argument_list|(
name|CHAR_SPLITTER
operator|.
name|split
argument_list|(
name|input
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|stringSplitter (int reps)
annotation|@
name|Benchmark
name|void
name|stringSplitter
parameter_list|(
name|int
name|reps
parameter_list|)
block|{
name|int
name|total
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|reps
condition|;
name|i
operator|++
control|)
block|{
name|total
operator|+=
name|Iterables
operator|.
name|size
argument_list|(
name|STRING_SPLITTER
operator|.
name|split
argument_list|(
name|input
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

