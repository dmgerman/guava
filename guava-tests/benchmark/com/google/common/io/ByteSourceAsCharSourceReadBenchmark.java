begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2017 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except  * in compliance with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software distributed under the License  * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express  * or implied. See the License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|com.google.common.io
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|io
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|caliper
operator|.
name|BeforeExperiment
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|caliper
operator|.
name|Benchmark
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|caliper
operator|.
name|Param
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|caliper
operator|.
name|api
operator|.
name|VmOptions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_comment
comment|/**  * Benchmarks for various potential implementations of {@code ByteSource.asCharSource(...).read()}.  */
end_comment

begin_comment
comment|// These benchmarks allocate a lot of data so use a large heap
end_comment

begin_class
annotation|@
name|VmOptions
argument_list|(
block|{
literal|"-Xms12g"
block|,
literal|"-Xmx12g"
block|,
literal|"-d64"
block|}
argument_list|)
DECL|class|ByteSourceAsCharSourceReadBenchmark
specifier|public
class|class
name|ByteSourceAsCharSourceReadBenchmark
block|{
DECL|enum|ReadStrategy
enum|enum
name|ReadStrategy
block|{
DECL|enumConstant|TO_BYTE_ARRAY_NEW_STRING
name|TO_BYTE_ARRAY_NEW_STRING
block|{
annotation|@
name|Override
name|String
name|read
parameter_list|(
name|ByteSource
name|byteSource
parameter_list|,
name|Charset
name|cs
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|String
argument_list|(
name|byteSource
operator|.
name|read
argument_list|()
argument_list|,
name|cs
argument_list|)
return|;
block|}
block|}
block|,
DECL|enumConstant|USING_CHARSTREAMS_COPY
name|USING_CHARSTREAMS_COPY
block|{
annotation|@
name|Override
name|String
name|read
parameter_list|(
name|ByteSource
name|byteSource
parameter_list|,
name|Charset
name|cs
parameter_list|)
throws|throws
name|IOException
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
try|try
init|(
name|InputStreamReader
name|reader
init|=
operator|new
name|InputStreamReader
argument_list|(
name|byteSource
operator|.
name|openStream
argument_list|()
argument_list|,
name|cs
argument_list|)
init|)
block|{
name|CharStreams
operator|.
name|copy
argument_list|(
name|reader
argument_list|,
name|sb
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
block|,
comment|// It really seems like this should be faster than TO_BYTE_ARRAY_NEW_STRING.  But it just isn't
comment|// my best guess is that the jdk authors have spent more time optimizing that callpath than this
comment|// one. (StringCoding$StringDecoder vs. StreamDecoder).  StringCoding has a ton of special cases
comment|// theoretically we could duplicate all that logic here to try to beat 'new String' or at least
comment|// come close.
DECL|enumConstant|USING_DECODER_WITH_SIZE_HINT
name|USING_DECODER_WITH_SIZE_HINT
block|{
annotation|@
name|Override
name|String
name|read
parameter_list|(
name|ByteSource
name|byteSource
parameter_list|,
name|Charset
name|cs
parameter_list|)
throws|throws
name|IOException
block|{
name|Optional
argument_list|<
name|Long
argument_list|>
name|size
init|=
name|byteSource
operator|.
name|sizeIfKnown
argument_list|()
decl_stmt|;
comment|// if we know the size and it fits in an int
if|if
condition|(
name|size
operator|.
name|isPresent
argument_list|()
operator|&&
name|size
operator|.
name|get
argument_list|()
operator|.
name|longValue
argument_list|()
operator|==
name|size
operator|.
name|get
argument_list|()
operator|.
name|intValue
argument_list|()
condition|)
block|{
comment|// otherwise try to presize a StringBuilder
comment|// it is kind of lame that we need to construct a decoder to access this value.
comment|// if this is a concern we could add special cases for some known charsets (like utf8)
comment|// or we could avoid inputstreamreader and use the decoder api directly
comment|// TODO(lukes): in a real implementation we would need to handle overflow conditions
name|int
name|maxChars
init|=
call|(
name|int
call|)
argument_list|(
name|size
operator|.
name|get
argument_list|()
operator|.
name|intValue
argument_list|()
operator|*
name|cs
operator|.
name|newDecoder
argument_list|()
operator|.
name|maxCharsPerByte
argument_list|()
argument_list|)
decl_stmt|;
name|char
index|[]
name|buffer
init|=
operator|new
name|char
index|[
name|maxChars
index|]
decl_stmt|;
name|int
name|bufIndex
init|=
literal|0
decl_stmt|;
name|int
name|remaining
init|=
name|buffer
operator|.
name|length
decl_stmt|;
try|try
init|(
name|InputStreamReader
name|reader
init|=
operator|new
name|InputStreamReader
argument_list|(
name|byteSource
operator|.
name|openStream
argument_list|()
argument_list|,
name|cs
argument_list|)
init|)
block|{
name|int
name|nRead
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|remaining
operator|>
literal|0
operator|&&
operator|(
name|nRead
operator|=
name|reader
operator|.
name|read
argument_list|(
name|buffer
argument_list|,
name|bufIndex
argument_list|,
name|remaining
argument_list|)
operator|)
operator|!=
operator|-
literal|1
condition|)
block|{
name|bufIndex
operator|+=
name|nRead
expr_stmt|;
name|remaining
operator|-=
name|nRead
expr_stmt|;
block|}
if|if
condition|(
name|nRead
operator|==
operator|-
literal|1
condition|)
block|{
comment|// we reached EOF
return|return
operator|new
name|String
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|bufIndex
argument_list|)
return|;
block|}
comment|// otherwise we got the size wrong.  This can happen if the size changes between when
comment|// we called sizeIfKnown and when we started reading the file (or i guess if
comment|// maxCharsPerByte is wrong)
comment|// Fallback to an incremental approach
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|(
name|bufIndex
operator|+
literal|32
argument_list|)
decl_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|bufIndex
argument_list|)
expr_stmt|;
name|buffer
operator|=
literal|null
expr_stmt|;
comment|// release for gc
name|CharStreams
operator|.
name|copy
argument_list|(
name|reader
argument_list|,
name|builder
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
else|else
block|{
return|return
name|TO_BYTE_ARRAY_NEW_STRING
operator|.
name|read
argument_list|(
name|byteSource
argument_list|,
name|cs
argument_list|)
return|;
block|}
block|}
block|}
block|;
DECL|method|read (ByteSource byteSource, Charset cs)
specifier|abstract
name|String
name|read
parameter_list|(
name|ByteSource
name|byteSource
parameter_list|,
name|Charset
name|cs
parameter_list|)
throws|throws
name|IOException
function_decl|;
block|}
annotation|@
name|Param
argument_list|(
block|{
literal|"UTF-8"
block|}
argument_list|)
DECL|field|charsetName
name|String
name|charsetName
decl_stmt|;
DECL|field|strategy
annotation|@
name|Param
name|ReadStrategy
name|strategy
decl_stmt|;
annotation|@
name|Param
argument_list|(
block|{
literal|"10"
block|,
literal|"1024"
block|,
literal|"1048576"
block|}
argument_list|)
DECL|field|size
name|int
name|size
decl_stmt|;
DECL|field|charset
name|Charset
name|charset
decl_stmt|;
DECL|field|data
name|ByteSource
name|data
decl_stmt|;
annotation|@
name|BeforeExperiment
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|charset
operator|=
name|Charset
operator|.
name|forName
argument_list|(
name|charsetName
argument_list|)
expr_stmt|;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|Random
name|random
init|=
operator|new
name|Random
argument_list|(
literal|0xdeadbeef
argument_list|)
decl_stmt|;
comment|// for unpredictable but reproducible behavior
name|sb
operator|.
name|ensureCapacity
argument_list|(
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
name|size
condition|;
name|k
operator|++
control|)
block|{
comment|// [9-127) includes all ascii non-control characters
name|sb
operator|.
name|append
argument_list|(
call|(
name|char
call|)
argument_list|(
name|random
operator|.
name|nextInt
argument_list|(
literal|127
operator|-
literal|9
argument_list|)
operator|+
literal|9
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|String
name|string
init|=
name|sb
operator|.
name|toString
argument_list|()
decl_stmt|;
name|sb
operator|.
name|setLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|data
operator|=
name|ByteSource
operator|.
name|wrap
argument_list|(
name|string
operator|.
name|getBytes
argument_list|(
name|charset
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"GoodTime"
argument_list|)
comment|// b/130759882
annotation|@
name|Benchmark
DECL|method|timeCopy (int reps)
specifier|public
name|int
name|timeCopy
parameter_list|(
name|int
name|reps
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|r
init|=
literal|0
decl_stmt|;
specifier|final
name|Charset
name|localCharset
init|=
name|charset
decl_stmt|;
specifier|final
name|ByteSource
name|localData
init|=
name|data
decl_stmt|;
specifier|final
name|ReadStrategy
name|localStrategy
init|=
name|strategy
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|reps
condition|;
name|i
operator|++
control|)
block|{
name|r
operator|+=
name|localStrategy
operator|.
name|read
argument_list|(
name|localData
argument_list|,
name|localCharset
argument_list|)
operator|.
name|hashCode
argument_list|()
expr_stmt|;
block|}
return|return
name|r
return|;
block|}
block|}
end_class

end_unit

