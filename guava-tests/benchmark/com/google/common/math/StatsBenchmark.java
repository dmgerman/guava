begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2013 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.math
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|caliper
operator|.
name|Param
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|caliper
operator|.
name|api
operator|.
name|SkipThisScenarioException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|caliper
operator|.
name|legacy
operator|.
name|Benchmark
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|primitives
operator|.
name|Doubles
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_comment
comment|/**  * Benchmarks for various algorithms for computing the mean and/or variance.  *   * @author Louis Wasserman  */
end_comment

begin_class
DECL|class|StatsBenchmark
specifier|public
class|class
name|StatsBenchmark
extends|extends
name|Benchmark
block|{
DECL|enum|MeanAlgorithm
enum|enum
name|MeanAlgorithm
block|{
DECL|enumConstant|SIMPLE
name|SIMPLE
block|{
annotation|@
name|Override
name|double
name|mean
parameter_list|(
name|double
index|[]
name|values
parameter_list|)
block|{
name|double
name|sum
init|=
literal|0.0
decl_stmt|;
for|for
control|(
name|double
name|value
range|:
name|values
control|)
block|{
name|sum
operator|+=
name|value
expr_stmt|;
block|}
return|return
name|sum
operator|/
name|values
operator|.
name|length
return|;
block|}
block|}
block|,
DECL|enumConstant|KAHAN
name|KAHAN
block|{
annotation|@
name|Override
name|double
name|mean
parameter_list|(
name|double
index|[]
name|values
parameter_list|)
block|{
name|double
name|sum
init|=
literal|0.0
decl_stmt|;
name|double
name|c
init|=
literal|0.0
decl_stmt|;
for|for
control|(
name|double
name|value
range|:
name|values
control|)
block|{
name|double
name|y
init|=
name|value
operator|-
name|c
decl_stmt|;
name|double
name|t
init|=
name|sum
operator|+
name|y
decl_stmt|;
name|c
operator|=
operator|(
name|t
operator|-
name|sum
operator|)
operator|-
name|y
expr_stmt|;
name|sum
operator|=
name|t
expr_stmt|;
block|}
return|return
name|sum
operator|/
name|values
operator|.
name|length
return|;
block|}
block|}
block|,
DECL|enumConstant|KNUTH
name|KNUTH
block|{
annotation|@
name|Override
name|double
name|mean
parameter_list|(
name|double
index|[]
name|values
parameter_list|)
block|{
name|double
name|mean
init|=
name|values
index|[
literal|0
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|values
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|mean
operator|=
name|mean
operator|+
operator|(
name|values
index|[
name|i
index|]
operator|-
name|mean
operator|)
operator|/
operator|(
name|i
operator|+
literal|1
operator|)
expr_stmt|;
block|}
return|return
name|mean
return|;
block|}
block|}
block|;
DECL|method|mean (double[] values)
specifier|abstract
name|double
name|mean
parameter_list|(
name|double
index|[]
name|values
parameter_list|)
function_decl|;
block|}
DECL|class|MeanAndVariance
specifier|static
class|class
name|MeanAndVariance
block|{
DECL|field|mean
specifier|private
specifier|final
name|double
name|mean
decl_stmt|;
DECL|field|variance
specifier|private
specifier|final
name|double
name|variance
decl_stmt|;
DECL|method|MeanAndVariance (double mean, double variance)
name|MeanAndVariance
parameter_list|(
name|double
name|mean
parameter_list|,
name|double
name|variance
parameter_list|)
block|{
name|this
operator|.
name|mean
operator|=
name|mean
expr_stmt|;
name|this
operator|.
name|variance
operator|=
name|variance
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|Doubles
operator|.
name|hashCode
argument_list|(
name|mean
argument_list|)
operator|*
literal|31
operator|+
name|Doubles
operator|.
name|hashCode
argument_list|(
name|variance
argument_list|)
return|;
block|}
block|}
DECL|enum|VarianceAlgorithm
enum|enum
name|VarianceAlgorithm
block|{
DECL|enumConstant|DO_NOT_COMPUTE
name|DO_NOT_COMPUTE
block|{
annotation|@
name|Override
name|MeanAndVariance
name|variance
parameter_list|(
name|double
index|[]
name|values
parameter_list|,
name|MeanAlgorithm
name|meanAlgorithm
parameter_list|)
block|{
return|return
operator|new
name|MeanAndVariance
argument_list|(
name|meanAlgorithm
operator|.
name|mean
argument_list|(
name|values
argument_list|)
argument_list|,
literal|0.0
argument_list|)
return|;
block|}
block|}
block|,
DECL|enumConstant|SIMPLE
name|SIMPLE
block|{
annotation|@
name|Override
name|MeanAndVariance
name|variance
parameter_list|(
name|double
index|[]
name|values
parameter_list|,
name|MeanAlgorithm
name|meanAlgorithm
parameter_list|)
block|{
name|double
name|mean
init|=
name|meanAlgorithm
operator|.
name|mean
argument_list|(
name|values
argument_list|)
decl_stmt|;
name|double
name|sumOfSquaresOfDeltas
init|=
literal|0.0
decl_stmt|;
for|for
control|(
name|double
name|value
range|:
name|values
control|)
block|{
name|double
name|delta
init|=
name|value
operator|-
name|mean
decl_stmt|;
name|sumOfSquaresOfDeltas
operator|+=
name|delta
operator|*
name|delta
expr_stmt|;
block|}
return|return
operator|new
name|MeanAndVariance
argument_list|(
name|mean
argument_list|,
name|sumOfSquaresOfDeltas
operator|/
name|values
operator|.
name|length
argument_list|)
return|;
block|}
block|}
block|,
DECL|enumConstant|KAHAN
name|KAHAN
block|{
annotation|@
name|Override
name|MeanAndVariance
name|variance
parameter_list|(
name|double
index|[]
name|values
parameter_list|,
name|MeanAlgorithm
name|meanAlgorithm
parameter_list|)
block|{
name|double
name|mean
init|=
name|meanAlgorithm
operator|.
name|mean
argument_list|(
name|values
argument_list|)
decl_stmt|;
name|double
name|sumOfSquaresOfDeltas
init|=
literal|0.0
decl_stmt|;
name|double
name|c
init|=
literal|0.0
decl_stmt|;
for|for
control|(
name|double
name|value
range|:
name|values
control|)
block|{
name|double
name|delta
init|=
name|value
operator|-
name|mean
decl_stmt|;
name|double
name|deltaSquared
init|=
name|delta
operator|*
name|delta
decl_stmt|;
name|double
name|y
init|=
name|deltaSquared
operator|-
name|c
decl_stmt|;
name|double
name|t
init|=
name|sumOfSquaresOfDeltas
operator|+
name|deltaSquared
decl_stmt|;
name|c
operator|=
operator|(
name|t
operator|-
name|sumOfSquaresOfDeltas
operator|)
operator|-
name|y
expr_stmt|;
name|sumOfSquaresOfDeltas
operator|=
name|t
expr_stmt|;
block|}
return|return
operator|new
name|MeanAndVariance
argument_list|(
name|mean
argument_list|,
name|sumOfSquaresOfDeltas
operator|/
name|values
operator|.
name|length
argument_list|)
return|;
block|}
block|}
block|,
DECL|enumConstant|KNUTH
name|KNUTH
block|{
annotation|@
name|Override
name|MeanAndVariance
name|variance
parameter_list|(
name|double
index|[]
name|values
parameter_list|,
name|MeanAlgorithm
name|meanAlgorithm
parameter_list|)
block|{
if|if
condition|(
name|meanAlgorithm
operator|!=
name|MeanAlgorithm
operator|.
name|KNUTH
condition|)
block|{
throw|throw
operator|new
name|SkipThisScenarioException
argument_list|()
throw|;
block|}
name|double
name|mean
init|=
name|values
index|[
literal|0
index|]
decl_stmt|;
name|double
name|s
init|=
literal|0.0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|values
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|double
name|nextMean
init|=
name|mean
operator|+
operator|(
name|values
index|[
name|i
index|]
operator|-
name|mean
operator|)
operator|/
operator|(
name|i
operator|+
literal|1
operator|)
decl_stmt|;
name|s
operator|+=
operator|(
name|values
index|[
name|i
index|]
operator|-
name|mean
operator|)
operator|*
operator|(
name|values
index|[
name|i
index|]
operator|-
name|nextMean
operator|)
expr_stmt|;
name|mean
operator|=
name|nextMean
expr_stmt|;
block|}
return|return
operator|new
name|MeanAndVariance
argument_list|(
name|mean
argument_list|,
name|s
operator|/
name|values
operator|.
name|length
argument_list|)
return|;
block|}
block|}
block|;
DECL|method|variance (double[] values, MeanAlgorithm meanAlgorithm)
specifier|abstract
name|MeanAndVariance
name|variance
parameter_list|(
name|double
index|[]
name|values
parameter_list|,
name|MeanAlgorithm
name|meanAlgorithm
parameter_list|)
function_decl|;
block|}
annotation|@
name|Param
argument_list|(
block|{
literal|"100"
block|,
literal|"10000"
block|}
argument_list|)
DECL|field|n
name|int
name|n
decl_stmt|;
annotation|@
name|Param
DECL|field|meanAlgorithm
name|MeanAlgorithm
name|meanAlgorithm
decl_stmt|;
annotation|@
name|Param
DECL|field|varianceAlgorithm
name|VarianceAlgorithm
name|varianceAlgorithm
decl_stmt|;
DECL|field|values
specifier|private
name|double
index|[]
index|[]
name|values
init|=
operator|new
name|double
index|[
literal|0x100
index|]
index|[]
decl_stmt|;
annotation|@
name|Override
DECL|method|setUp ()
specifier|protected
name|void
name|setUp
parameter_list|()
block|{
name|Random
name|rng
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|0x100
condition|;
name|i
operator|++
control|)
block|{
name|values
index|[
name|i
index|]
operator|=
operator|new
name|double
index|[
name|n
index|]
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|n
condition|;
name|j
operator|++
control|)
block|{
name|values
index|[
name|i
index|]
index|[
name|j
index|]
operator|=
name|rng
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|timeMeanAndVariance (int reps)
specifier|public
name|int
name|timeMeanAndVariance
parameter_list|(
name|int
name|reps
parameter_list|)
block|{
name|int
name|tmp
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|reps
condition|;
name|i
operator|++
control|)
block|{
name|tmp
operator|+=
name|varianceAlgorithm
operator|.
name|variance
argument_list|(
name|values
index|[
name|i
operator|&
literal|0xFF
index|]
argument_list|,
name|meanAlgorithm
argument_list|)
operator|.
name|hashCode
argument_list|()
expr_stmt|;
block|}
return|return
name|tmp
return|;
block|}
block|}
end_class

end_unit

