begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2008 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License"); you may not  * use this file except in compliance with the License.  You may obtain a copy  * of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|com.google.common.util.concurrent.testing
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|testing
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|MoreExecutors
operator|.
name|directExecutor
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|Beta
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ListenableFuture
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_comment
comment|/**  * A simple mock implementation of {@code Runnable} that can be used for  * testing ListenableFutures.  *  * @author Nishant Thakkar  * @since 10.0  */
end_comment

begin_class
annotation|@
name|Beta
DECL|class|MockFutureListener
specifier|public
class|class
name|MockFutureListener
implements|implements
name|Runnable
block|{
DECL|field|countDownLatch
specifier|private
specifier|final
name|CountDownLatch
name|countDownLatch
decl_stmt|;
DECL|field|future
specifier|private
specifier|final
name|ListenableFuture
argument_list|<
name|?
argument_list|>
name|future
decl_stmt|;
DECL|method|MockFutureListener (ListenableFuture<?> future)
specifier|public
name|MockFutureListener
parameter_list|(
name|ListenableFuture
argument_list|<
name|?
argument_list|>
name|future
parameter_list|)
block|{
name|this
operator|.
name|countDownLatch
operator|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|this
operator|.
name|future
operator|=
name|future
expr_stmt|;
name|future
operator|.
name|addListener
argument_list|(
name|this
argument_list|,
name|directExecutor
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
name|countDownLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
comment|/**    * Verify that the listener completes in a reasonable amount of time, and    * Asserts that the future returns the expected data.    * @throws Throwable if the listener isn't called or if it resulted in a    *     throwable or if the result doesn't match the expected value.    */
DECL|method|assertSuccess (Object expectedData)
specifier|public
name|void
name|assertSuccess
parameter_list|(
name|Object
name|expectedData
parameter_list|)
throws|throws
name|Throwable
block|{
comment|// Verify that the listener executed in a reasonable amount of time.
name|Assert
operator|.
name|assertTrue
argument_list|(
name|countDownLatch
operator|.
name|await
argument_list|(
literal|1L
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedData
argument_list|,
name|future
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|e
parameter_list|)
block|{
throw|throw
name|e
operator|.
name|getCause
argument_list|()
throw|;
block|}
block|}
comment|/**    * Verify that the listener completes in a reasonable amount of time, and    * Asserts that the future throws an {@code ExecutableException} and that the    * cause of the {@code ExecutableException} is {@code expectedCause}.    */
DECL|method|assertException (Throwable expectedCause)
specifier|public
name|void
name|assertException
parameter_list|(
name|Throwable
name|expectedCause
parameter_list|)
throws|throws
name|Exception
block|{
comment|// Verify that the listener executed in a reasonable amount of time.
name|Assert
operator|.
name|assertTrue
argument_list|(
name|countDownLatch
operator|.
name|await
argument_list|(
literal|1L
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|future
operator|.
name|get
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"This call was supposed to throw an ExecutionException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|expected
parameter_list|)
block|{
name|Assert
operator|.
name|assertSame
argument_list|(
name|expectedCause
argument_list|,
name|expected
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|assertTimeout ()
specifier|public
name|void
name|assertTimeout
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Verify that the listener does not get called in a reasonable amount of
comment|// time.
name|Assert
operator|.
name|assertFalse
argument_list|(
name|countDownLatch
operator|.
name|await
argument_list|(
literal|1L
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

