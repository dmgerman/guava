begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2007 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License"); you may not  * use this file except in compliance with the License.  You may obtain a copy  * of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|com.google.common.util.concurrent.testing
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|testing
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|Beta
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CheckedFuture
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ListenableFuture
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_comment
comment|/**  * Test case to make sure the {@link CheckedFuture#checkedGet()} and  * {@link CheckedFuture#checkedGet(long, TimeUnit)} methods work correctly.  *  * @author Sven Mawson  * @since 10.0  */
end_comment

begin_class
annotation|@
name|Beta
DECL|class|AbstractCheckedFutureTest
specifier|public
specifier|abstract
class|class
name|AbstractCheckedFutureTest
extends|extends
name|AbstractListenableFutureTest
block|{
comment|/**    * More specific type for the create method.    */
DECL|method|createCheckedFuture (V value, Exception except, CountDownLatch waitOn)
specifier|protected
specifier|abstract
parameter_list|<
name|V
parameter_list|>
name|CheckedFuture
argument_list|<
name|V
argument_list|,
name|?
argument_list|>
name|createCheckedFuture
parameter_list|(
name|V
name|value
parameter_list|,
name|Exception
name|except
parameter_list|,
name|CountDownLatch
name|waitOn
parameter_list|)
function_decl|;
comment|/**    * Checks that the exception is the correct type of cancellation exception.    */
DECL|method|checkCancelledException (Exception e)
specifier|protected
specifier|abstract
name|void
name|checkCancelledException
parameter_list|(
name|Exception
name|e
parameter_list|)
function_decl|;
comment|/**    * Checks that the exception is the correct type of execution exception.    */
DECL|method|checkExecutionException (Exception e)
specifier|protected
specifier|abstract
name|void
name|checkExecutionException
parameter_list|(
name|Exception
name|e
parameter_list|)
function_decl|;
comment|/**    * Checks that the exception is the correct type of interruption exception.    */
DECL|method|checkInterruptedException (Exception e)
specifier|protected
specifier|abstract
name|void
name|checkInterruptedException
parameter_list|(
name|Exception
name|e
parameter_list|)
function_decl|;
annotation|@
name|Override
DECL|method|createListenableFuture (V value, Exception except, CountDownLatch waitOn)
specifier|protected
parameter_list|<
name|V
parameter_list|>
name|ListenableFuture
argument_list|<
name|V
argument_list|>
name|createListenableFuture
parameter_list|(
name|V
name|value
parameter_list|,
name|Exception
name|except
parameter_list|,
name|CountDownLatch
name|waitOn
parameter_list|)
block|{
return|return
name|createCheckedFuture
argument_list|(
name|value
argument_list|,
name|except
argument_list|,
name|waitOn
argument_list|)
return|;
block|}
comment|/**    * Tests that the {@link CheckedFuture#checkedGet()} method throws the correct    * type of cancellation exception when it is cancelled.    */
DECL|method|testCheckedGetThrowsApplicationExceptionOnCancellation ()
specifier|public
name|void
name|testCheckedGetThrowsApplicationExceptionOnCancellation
parameter_list|()
block|{
specifier|final
name|CheckedFuture
argument_list|<
name|Boolean
argument_list|,
name|?
argument_list|>
name|future
init|=
name|createCheckedFuture
argument_list|(
name|Boolean
operator|.
name|TRUE
argument_list|,
literal|null
argument_list|,
name|latch
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|future
operator|.
name|isDone
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|future
operator|.
name|isCancelled
argument_list|()
argument_list|)
expr_stmt|;
operator|new
name|Thread
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|future
operator|.
name|cancel
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
operator|.
name|start
argument_list|()
expr_stmt|;
try|try
block|{
name|future
operator|.
name|checkedGet
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"RPC Should have been cancelled."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|checkCancelledException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|future
operator|.
name|isDone
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|future
operator|.
name|isCancelled
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testCheckedGetThrowsApplicationExceptionOnInterruption ()
specifier|public
name|void
name|testCheckedGetThrowsApplicationExceptionOnInterruption
parameter_list|()
throws|throws
name|InterruptedException
block|{
specifier|final
name|CheckedFuture
argument_list|<
name|Boolean
argument_list|,
name|?
argument_list|>
name|future
init|=
name|createCheckedFuture
argument_list|(
name|Boolean
operator|.
name|TRUE
argument_list|,
literal|null
argument_list|,
name|latch
argument_list|)
decl_stmt|;
specifier|final
name|CountDownLatch
name|startingGate
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|CountDownLatch
name|successLatch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|future
operator|.
name|isDone
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|future
operator|.
name|isCancelled
argument_list|()
argument_list|)
expr_stmt|;
name|Thread
name|getThread
init|=
operator|new
name|Thread
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|startingGate
operator|.
name|countDown
argument_list|()
expr_stmt|;
try|try
block|{
name|future
operator|.
name|checkedGet
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|checkInterruptedException
argument_list|(
name|e
argument_list|)
expr_stmt|;
comment|// This only gets hit if the original call throws an exception and
comment|// the check call above passes.
name|successLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
argument_list|)
decl_stmt|;
name|getThread
operator|.
name|start
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|startingGate
operator|.
name|await
argument_list|(
literal|500
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
argument_list|)
expr_stmt|;
name|getThread
operator|.
name|interrupt
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|successLatch
operator|.
name|await
argument_list|(
literal|500
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|future
operator|.
name|isDone
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|future
operator|.
name|isCancelled
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testCheckedGetThrowsApplicationExceptionOnError ()
specifier|public
name|void
name|testCheckedGetThrowsApplicationExceptionOnError
parameter_list|()
block|{
specifier|final
name|CheckedFuture
argument_list|<
name|Boolean
argument_list|,
name|?
argument_list|>
name|future
init|=
name|createCheckedFuture
argument_list|(
name|Boolean
operator|.
name|TRUE
argument_list|,
operator|new
name|Exception
argument_list|(
literal|"Error"
argument_list|)
argument_list|,
name|latch
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|future
operator|.
name|isDone
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|future
operator|.
name|isCancelled
argument_list|()
argument_list|)
expr_stmt|;
operator|new
name|Thread
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
operator|.
name|start
argument_list|()
expr_stmt|;
try|try
block|{
name|future
operator|.
name|checkedGet
argument_list|()
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|checkExecutionException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|future
operator|.
name|isDone
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|future
operator|.
name|isCancelled
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

