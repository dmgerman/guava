begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2009 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.escape.testing
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|escape
operator|.
name|testing
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|escape
operator|.
name|Escapers
operator|.
name|computeReplacement
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|Beta
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtCompatible
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|escape
operator|.
name|CharEscaper
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|escape
operator|.
name|Escaper
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|escape
operator|.
name|UnicodeEscaper
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|Assert
import|;
end_import

begin_comment
comment|/**  * Extra assert methods for testing Escaper implementations.  *  * @author David Beaumont  * @since 15.0  */
end_comment

begin_class
annotation|@
name|Beta
annotation|@
name|GwtCompatible
DECL|class|EscaperAsserts
specifier|public
specifier|final
class|class
name|EscaperAsserts
block|{
DECL|method|EscaperAsserts ()
specifier|private
name|EscaperAsserts
parameter_list|()
block|{}
comment|/**    * Asserts that an escaper behaves correctly with respect to null inputs.    *    * @param escaper the non-null escaper to test    * @throws IOException    */
DECL|method|assertBasic (Escaper escaper)
specifier|public
specifier|static
name|void
name|assertBasic
parameter_list|(
name|Escaper
name|escaper
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Escapers operate on characters: no characters, no escaping.
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|escaper
operator|.
name|escape
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
comment|// Assert that escapers throw null pointer exceptions.
try|try
block|{
name|escaper
operator|.
name|escape
argument_list|(
operator|(
name|String
operator|)
literal|null
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"exception not thrown when escaping a null string"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|e
parameter_list|)
block|{
comment|// pass
block|}
block|}
comment|/**    * Asserts that an escaper escapes the given character into the expected    * string.    *    * @param escaper the non-null escaper to test    * @param expected the expected output string    * @param c the character to escape    */
DECL|method|assertEscaping (CharEscaper escaper, String expected, char c)
specifier|public
specifier|static
name|void
name|assertEscaping
parameter_list|(
name|CharEscaper
name|escaper
parameter_list|,
name|String
name|expected
parameter_list|,
name|char
name|c
parameter_list|)
block|{
name|String
name|escaped
init|=
name|computeReplacement
argument_list|(
name|escaper
argument_list|,
name|c
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|escaped
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|escaped
argument_list|)
expr_stmt|;
block|}
comment|/**    * Asserts that an escaper does not escape the given character.    *    * @param escaper the non-null escaper to test    * @param c the character to test    */
DECL|method|assertUnescaped (CharEscaper escaper, char c)
specifier|public
specifier|static
name|void
name|assertUnescaped
parameter_list|(
name|CharEscaper
name|escaper
parameter_list|,
name|char
name|c
parameter_list|)
block|{
name|Assert
operator|.
name|assertNull
argument_list|(
name|computeReplacement
argument_list|(
name|escaper
argument_list|,
name|c
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Asserts that a Unicode escaper escapes the given code point into the    * expected string.    *    * @param escaper the non-null escaper to test    * @param expected the expected output string    * @param cp the Unicode code point to escape    */
DECL|method|assertEscaping (UnicodeEscaper escaper, String expected, int cp)
specifier|public
specifier|static
name|void
name|assertEscaping
parameter_list|(
name|UnicodeEscaper
name|escaper
parameter_list|,
name|String
name|expected
parameter_list|,
name|int
name|cp
parameter_list|)
block|{
name|String
name|escaped
init|=
name|computeReplacement
argument_list|(
name|escaper
argument_list|,
name|cp
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|escaped
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|escaped
argument_list|)
expr_stmt|;
block|}
comment|/**    * Asserts that a Unicode escaper does not escape the given character.    *    * @param escaper the non-null escaper to test    * @param cp the Unicode code point to test    */
DECL|method|assertUnescaped (UnicodeEscaper escaper, int cp)
specifier|public
specifier|static
name|void
name|assertUnescaped
parameter_list|(
name|UnicodeEscaper
name|escaper
parameter_list|,
name|int
name|cp
parameter_list|)
block|{
name|Assert
operator|.
name|assertNull
argument_list|(
name|computeReplacement
argument_list|(
name|escaper
argument_list|,
name|cp
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Asserts that a Unicode escaper escapes the given hi/lo surrogate pair into    * the expected string.    *    * @param escaper the non-null escaper to test    * @param expected the expected output string    * @param hi the high surrogate pair character    * @param lo the low surrogate pair character    */
DECL|method|assertUnicodeEscaping (UnicodeEscaper escaper, String expected, char hi, char lo)
specifier|public
specifier|static
name|void
name|assertUnicodeEscaping
parameter_list|(
name|UnicodeEscaper
name|escaper
parameter_list|,
name|String
name|expected
parameter_list|,
name|char
name|hi
parameter_list|,
name|char
name|lo
parameter_list|)
block|{
name|int
name|cp
init|=
name|Character
operator|.
name|toCodePoint
argument_list|(
name|hi
argument_list|,
name|lo
argument_list|)
decl_stmt|;
name|String
name|escaped
init|=
name|computeReplacement
argument_list|(
name|escaper
argument_list|,
name|cp
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|escaped
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|escaped
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

