begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2008 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.collect.testing.google
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|google
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|SampleElements
operator|.
name|Strings
operator|.
name|AFTER_LAST
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|SampleElements
operator|.
name|Strings
operator|.
name|AFTER_LAST_2
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|SampleElements
operator|.
name|Strings
operator|.
name|BEFORE_FIRST
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|SampleElements
operator|.
name|Strings
operator|.
name|BEFORE_FIRST_2
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtCompatible
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSortedSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Ordering
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|TestCollectionGenerator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|TestCollidingSetGenerator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|TestSetGenerator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|TestStringListGenerator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|TestStringSetGenerator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|TestStringSortedSetGenerator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|TestUnhashableCollectionGenerator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|UnhashableObject
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedSet
import|;
end_import

begin_comment
comment|/**  * Generators of different types of sets and derived collections from sets.  *   * @author Kevin Bourrillion  * @author Jared Levy  * @author Hayward Chan  */
end_comment

begin_class
annotation|@
name|GwtCompatible
DECL|class|SetGenerators
specifier|public
class|class
name|SetGenerators
block|{
DECL|class|ImmutableSetCopyOfGenerator
specifier|public
specifier|static
class|class
name|ImmutableSetCopyOfGenerator
extends|extends
name|TestStringSetGenerator
block|{
DECL|method|create (String[] elements)
annotation|@
name|Override
specifier|protected
name|Set
argument_list|<
name|String
argument_list|>
name|create
parameter_list|(
name|String
index|[]
name|elements
parameter_list|)
block|{
return|return
name|ImmutableSet
operator|.
name|copyOf
argument_list|(
name|elements
argument_list|)
return|;
block|}
block|}
DECL|class|ImmutableSetWithBadHashesGenerator
specifier|public
specifier|static
class|class
name|ImmutableSetWithBadHashesGenerator
extends|extends
name|TestCollidingSetGenerator
comment|// Work around a GWT compiler bug.  Not explicitly listing this will
comment|// cause the createArray() method missing in the generated javascript.
comment|// TODO: Remove this once the GWT bug is fixed.
implements|implements
name|TestCollectionGenerator
argument_list|<
name|Object
argument_list|>
block|{
annotation|@
name|Override
DECL|method|create (Object... elements)
specifier|public
name|Set
argument_list|<
name|Object
argument_list|>
name|create
parameter_list|(
name|Object
modifier|...
name|elements
parameter_list|)
block|{
return|return
name|ImmutableSet
operator|.
name|copyOf
argument_list|(
name|elements
argument_list|)
return|;
block|}
block|}
DECL|class|DegeneratedImmutableSetGenerator
specifier|public
specifier|static
class|class
name|DegeneratedImmutableSetGenerator
extends|extends
name|TestStringSetGenerator
block|{
comment|// Make sure we get what we think we're getting, or else this test
comment|// is pointless
annotation|@
name|SuppressWarnings
argument_list|(
literal|"cast"
argument_list|)
DECL|method|create (String[] elements)
annotation|@
name|Override
specifier|protected
name|Set
argument_list|<
name|String
argument_list|>
name|create
parameter_list|(
name|String
index|[]
name|elements
parameter_list|)
block|{
return|return
operator|(
name|ImmutableSet
argument_list|<
name|String
argument_list|>
operator|)
name|ImmutableSet
operator|.
name|of
argument_list|(
name|elements
index|[
literal|0
index|]
argument_list|,
name|elements
index|[
literal|0
index|]
argument_list|)
return|;
block|}
block|}
DECL|class|ImmutableSortedSetCopyOfGenerator
specifier|public
specifier|static
class|class
name|ImmutableSortedSetCopyOfGenerator
extends|extends
name|TestStringSortedSetGenerator
block|{
DECL|method|create (String[] elements)
annotation|@
name|Override
specifier|protected
name|SortedSet
argument_list|<
name|String
argument_list|>
name|create
parameter_list|(
name|String
index|[]
name|elements
parameter_list|)
block|{
return|return
name|ImmutableSortedSet
operator|.
name|copyOf
argument_list|(
name|elements
argument_list|)
return|;
block|}
block|}
DECL|class|ImmutableSortedSetHeadsetGenerator
specifier|public
specifier|static
class|class
name|ImmutableSortedSetHeadsetGenerator
extends|extends
name|TestStringSortedSetGenerator
block|{
DECL|method|create (String[] elements)
annotation|@
name|Override
specifier|protected
name|SortedSet
argument_list|<
name|String
argument_list|>
name|create
parameter_list|(
name|String
index|[]
name|elements
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|list
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|elements
argument_list|)
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
literal|"zzz"
argument_list|)
expr_stmt|;
return|return
name|ImmutableSortedSet
operator|.
name|copyOf
argument_list|(
name|list
argument_list|)
operator|.
name|headSet
argument_list|(
literal|"zzy"
argument_list|)
return|;
block|}
block|}
DECL|class|ImmutableSortedSetTailsetGenerator
specifier|public
specifier|static
class|class
name|ImmutableSortedSetTailsetGenerator
extends|extends
name|TestStringSortedSetGenerator
block|{
DECL|method|create (String[] elements)
annotation|@
name|Override
specifier|protected
name|SortedSet
argument_list|<
name|String
argument_list|>
name|create
parameter_list|(
name|String
index|[]
name|elements
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|list
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|elements
argument_list|)
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
literal|"\0"
argument_list|)
expr_stmt|;
return|return
name|ImmutableSortedSet
operator|.
name|copyOf
argument_list|(
name|list
argument_list|)
operator|.
name|tailSet
argument_list|(
literal|"\0\0"
argument_list|)
return|;
block|}
block|}
DECL|class|ImmutableSortedSetSubsetGenerator
specifier|public
specifier|static
class|class
name|ImmutableSortedSetSubsetGenerator
extends|extends
name|TestStringSortedSetGenerator
block|{
DECL|method|create (String[] elements)
annotation|@
name|Override
specifier|protected
name|SortedSet
argument_list|<
name|String
argument_list|>
name|create
parameter_list|(
name|String
index|[]
name|elements
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|list
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|elements
argument_list|)
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
literal|"\0"
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
literal|"zzz"
argument_list|)
expr_stmt|;
return|return
name|ImmutableSortedSet
operator|.
name|copyOf
argument_list|(
name|list
argument_list|)
operator|.
name|subSet
argument_list|(
literal|"\0\0"
argument_list|,
literal|"zzy"
argument_list|)
return|;
block|}
block|}
DECL|class|ImmutableSortedSetExplicitComparator
specifier|public
specifier|static
class|class
name|ImmutableSortedSetExplicitComparator
extends|extends
name|TestStringSetGenerator
block|{
DECL|field|STRING_REVERSED
specifier|private
specifier|static
specifier|final
name|Comparator
argument_list|<
name|String
argument_list|>
name|STRING_REVERSED
init|=
name|Collections
operator|.
name|reverseOrder
argument_list|()
decl_stmt|;
DECL|method|create (String[] elements)
annotation|@
name|Override
specifier|protected
name|SortedSet
argument_list|<
name|String
argument_list|>
name|create
parameter_list|(
name|String
index|[]
name|elements
parameter_list|)
block|{
return|return
name|ImmutableSortedSet
operator|.
name|orderedBy
argument_list|(
name|STRING_REVERSED
argument_list|)
operator|.
name|add
argument_list|(
name|elements
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|order (List<String> insertionOrder)
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|order
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|insertionOrder
parameter_list|)
block|{
name|Collections
operator|.
name|sort
argument_list|(
name|insertionOrder
argument_list|,
name|Collections
operator|.
name|reverseOrder
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|insertionOrder
return|;
block|}
block|}
DECL|class|ImmutableSortedSetExplicitSuperclassComparatorGenerator
specifier|public
specifier|static
class|class
name|ImmutableSortedSetExplicitSuperclassComparatorGenerator
extends|extends
name|TestStringSetGenerator
block|{
DECL|field|COMPARABLE_REVERSED
specifier|private
specifier|static
specifier|final
name|Comparator
argument_list|<
name|Comparable
argument_list|<
name|?
argument_list|>
argument_list|>
name|COMPARABLE_REVERSED
init|=
name|Collections
operator|.
name|reverseOrder
argument_list|()
decl_stmt|;
DECL|method|create (String[] elements)
annotation|@
name|Override
specifier|protected
name|SortedSet
argument_list|<
name|String
argument_list|>
name|create
parameter_list|(
name|String
index|[]
name|elements
parameter_list|)
block|{
return|return
operator|new
name|ImmutableSortedSet
operator|.
name|Builder
argument_list|<
name|String
argument_list|>
argument_list|(
name|COMPARABLE_REVERSED
argument_list|)
operator|.
name|add
argument_list|(
name|elements
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|order (List<String> insertionOrder)
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|order
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|insertionOrder
parameter_list|)
block|{
name|Collections
operator|.
name|sort
argument_list|(
name|insertionOrder
argument_list|,
name|Collections
operator|.
name|reverseOrder
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|insertionOrder
return|;
block|}
block|}
DECL|class|ImmutableSortedSetReversedOrderGenerator
specifier|public
specifier|static
class|class
name|ImmutableSortedSetReversedOrderGenerator
extends|extends
name|TestStringSetGenerator
block|{
DECL|method|create (String[] elements)
annotation|@
name|Override
specifier|protected
name|SortedSet
argument_list|<
name|String
argument_list|>
name|create
parameter_list|(
name|String
index|[]
name|elements
parameter_list|)
block|{
return|return
name|ImmutableSortedSet
operator|.
expr|<
name|String
operator|>
name|reverseOrder
argument_list|()
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|elements
argument_list|)
operator|.
name|iterator
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|order (List<String> insertionOrder)
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|order
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|insertionOrder
parameter_list|)
block|{
name|Collections
operator|.
name|sort
argument_list|(
name|insertionOrder
argument_list|,
name|Collections
operator|.
name|reverseOrder
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|insertionOrder
return|;
block|}
block|}
DECL|class|ImmutableSortedSetUnhashableGenerator
specifier|public
specifier|static
class|class
name|ImmutableSortedSetUnhashableGenerator
extends|extends
name|TestUnhashableSetGenerator
block|{
DECL|method|create ( UnhashableObject[] elements)
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|UnhashableObject
argument_list|>
name|create
parameter_list|(
name|UnhashableObject
index|[]
name|elements
parameter_list|)
block|{
return|return
name|ImmutableSortedSet
operator|.
name|copyOf
argument_list|(
name|elements
argument_list|)
return|;
block|}
block|}
DECL|class|ImmutableSetAsListGenerator
specifier|public
specifier|static
class|class
name|ImmutableSetAsListGenerator
extends|extends
name|TestStringListGenerator
block|{
DECL|method|create (String[] elements)
annotation|@
name|Override
specifier|protected
name|List
argument_list|<
name|String
argument_list|>
name|create
parameter_list|(
name|String
index|[]
name|elements
parameter_list|)
block|{
return|return
name|ImmutableSet
operator|.
name|copyOf
argument_list|(
name|elements
argument_list|)
operator|.
name|asList
argument_list|()
return|;
block|}
block|}
DECL|class|ImmutableSortedSetAsListGenerator
specifier|public
specifier|static
class|class
name|ImmutableSortedSetAsListGenerator
extends|extends
name|TestStringListGenerator
block|{
DECL|method|create (String[] elements)
annotation|@
name|Override
specifier|protected
name|List
argument_list|<
name|String
argument_list|>
name|create
parameter_list|(
name|String
index|[]
name|elements
parameter_list|)
block|{
name|Comparator
argument_list|<
name|String
argument_list|>
name|comparator
init|=
name|createExplicitComparator
argument_list|(
name|elements
argument_list|)
decl_stmt|;
name|ImmutableSet
argument_list|<
name|String
argument_list|>
name|set
init|=
name|ImmutableSortedSet
operator|.
name|copyOf
argument_list|(
name|comparator
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|elements
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|set
operator|.
name|asList
argument_list|()
return|;
block|}
block|}
DECL|class|ImmutableSortedSetSubsetAsListGenerator
specifier|public
specifier|static
class|class
name|ImmutableSortedSetSubsetAsListGenerator
extends|extends
name|TestStringListGenerator
block|{
DECL|method|create (String[] elements)
annotation|@
name|Override
specifier|protected
name|List
argument_list|<
name|String
argument_list|>
name|create
parameter_list|(
name|String
index|[]
name|elements
parameter_list|)
block|{
name|Comparator
argument_list|<
name|String
argument_list|>
name|comparator
init|=
name|createExplicitComparator
argument_list|(
name|elements
argument_list|)
decl_stmt|;
name|ImmutableSortedSet
operator|.
name|Builder
argument_list|<
name|String
argument_list|>
name|builder
init|=
name|ImmutableSortedSet
operator|.
name|orderedBy
argument_list|(
name|comparator
argument_list|)
decl_stmt|;
name|builder
operator|.
name|add
argument_list|(
name|BEFORE_FIRST
argument_list|)
expr_stmt|;
name|builder
operator|.
name|add
argument_list|(
name|elements
argument_list|)
expr_stmt|;
name|builder
operator|.
name|add
argument_list|(
name|AFTER_LAST
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|build
argument_list|()
operator|.
name|subSet
argument_list|(
name|BEFORE_FIRST_2
argument_list|,
name|AFTER_LAST
argument_list|)
operator|.
name|asList
argument_list|()
return|;
block|}
block|}
DECL|class|ImmutableSortedSetAsListSubListGenerator
specifier|public
specifier|static
class|class
name|ImmutableSortedSetAsListSubListGenerator
extends|extends
name|TestStringListGenerator
block|{
DECL|method|create (String[] elements)
annotation|@
name|Override
specifier|protected
name|List
argument_list|<
name|String
argument_list|>
name|create
parameter_list|(
name|String
index|[]
name|elements
parameter_list|)
block|{
name|Comparator
argument_list|<
name|String
argument_list|>
name|comparator
init|=
name|createExplicitComparator
argument_list|(
name|elements
argument_list|)
decl_stmt|;
name|ImmutableSortedSet
operator|.
name|Builder
argument_list|<
name|String
argument_list|>
name|builder
init|=
name|ImmutableSortedSet
operator|.
name|orderedBy
argument_list|(
name|comparator
argument_list|)
decl_stmt|;
name|builder
operator|.
name|add
argument_list|(
name|BEFORE_FIRST
argument_list|)
expr_stmt|;
name|builder
operator|.
name|add
argument_list|(
name|elements
argument_list|)
expr_stmt|;
name|builder
operator|.
name|add
argument_list|(
name|AFTER_LAST
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|build
argument_list|()
operator|.
name|asList
argument_list|()
operator|.
name|subList
argument_list|(
literal|1
argument_list|,
name|elements
operator|.
name|length
operator|+
literal|1
argument_list|)
return|;
block|}
block|}
DECL|class|ImmutableSortedsetSubsetAsListSubListGenerator
specifier|public
specifier|static
class|class
name|ImmutableSortedsetSubsetAsListSubListGenerator
extends|extends
name|TestStringListGenerator
block|{
DECL|method|create (String[] elements)
annotation|@
name|Override
specifier|protected
name|List
argument_list|<
name|String
argument_list|>
name|create
parameter_list|(
name|String
index|[]
name|elements
parameter_list|)
block|{
name|Comparator
argument_list|<
name|String
argument_list|>
name|comparator
init|=
name|createExplicitComparator
argument_list|(
name|elements
argument_list|)
decl_stmt|;
name|ImmutableSortedSet
operator|.
name|Builder
argument_list|<
name|String
argument_list|>
name|builder
init|=
name|ImmutableSortedSet
operator|.
name|orderedBy
argument_list|(
name|comparator
argument_list|)
decl_stmt|;
name|builder
operator|.
name|add
argument_list|(
name|BEFORE_FIRST
argument_list|)
expr_stmt|;
name|builder
operator|.
name|add
argument_list|(
name|BEFORE_FIRST_2
argument_list|)
expr_stmt|;
name|builder
operator|.
name|add
argument_list|(
name|elements
argument_list|)
expr_stmt|;
name|builder
operator|.
name|add
argument_list|(
name|AFTER_LAST
argument_list|)
expr_stmt|;
name|builder
operator|.
name|add
argument_list|(
name|AFTER_LAST_2
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|build
argument_list|()
operator|.
name|subSet
argument_list|(
name|BEFORE_FIRST_2
argument_list|,
name|AFTER_LAST_2
argument_list|)
operator|.
name|asList
argument_list|()
operator|.
name|subList
argument_list|(
literal|1
argument_list|,
name|elements
operator|.
name|length
operator|+
literal|1
argument_list|)
return|;
block|}
block|}
DECL|class|TestUnhashableSetGenerator
specifier|public
specifier|abstract
specifier|static
class|class
name|TestUnhashableSetGenerator
extends|extends
name|TestUnhashableCollectionGenerator
argument_list|<
name|Set
argument_list|<
name|UnhashableObject
argument_list|>
argument_list|>
implements|implements
name|TestSetGenerator
argument_list|<
name|UnhashableObject
argument_list|>
block|{   }
DECL|method|createExplicitComparator ( String[] elements)
specifier|private
specifier|static
name|Comparator
argument_list|<
name|String
argument_list|>
name|createExplicitComparator
parameter_list|(
name|String
index|[]
name|elements
parameter_list|)
block|{
comment|// Collapse equal elements, which Ordering.explicit() doesn't support, while
comment|// maintaining the ordering by first occurrence.
name|Set
argument_list|<
name|String
argument_list|>
name|elementsPlus
init|=
name|Sets
operator|.
name|newLinkedHashSet
argument_list|()
decl_stmt|;
name|elementsPlus
operator|.
name|add
argument_list|(
name|BEFORE_FIRST
argument_list|)
expr_stmt|;
name|elementsPlus
operator|.
name|add
argument_list|(
name|BEFORE_FIRST_2
argument_list|)
expr_stmt|;
name|elementsPlus
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|elements
argument_list|)
argument_list|)
expr_stmt|;
name|elementsPlus
operator|.
name|add
argument_list|(
name|AFTER_LAST
argument_list|)
expr_stmt|;
name|elementsPlus
operator|.
name|add
argument_list|(
name|AFTER_LAST_2
argument_list|)
expr_stmt|;
return|return
name|Ordering
operator|.
name|explicit
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
name|elementsPlus
argument_list|)
argument_list|)
return|;
block|}
block|}
end_class

end_unit

