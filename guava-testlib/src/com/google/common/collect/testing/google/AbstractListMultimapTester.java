begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2012 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except  * in compliance with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software distributed under the License  * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express  * or implied. See the License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|com.google.common.collect.testing.google
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|google
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|truth0
operator|.
name|Truth
operator|.
name|ASSERT
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtCompatible
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ListMultimap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_comment
comment|/**  * Superclass for all {@code ListMultimap} testers.  *  * @author Louis Wasserman  */
end_comment

begin_class
annotation|@
name|GwtCompatible
DECL|class|AbstractListMultimapTester
specifier|public
class|class
name|AbstractListMultimapTester
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
extends|extends
name|AbstractMultimapTester
argument_list|<
name|K
argument_list|,
name|V
argument_list|,
name|ListMultimap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
block|{
DECL|method|assertGet (K key, V... values)
specifier|protected
name|void
name|assertGet
parameter_list|(
name|K
name|key
parameter_list|,
name|V
modifier|...
name|values
parameter_list|)
block|{
name|assertGet
argument_list|(
name|key
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|values
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|assertGet (K key, Collection<V> values)
specifier|protected
name|void
name|assertGet
parameter_list|(
name|K
name|key
parameter_list|,
name|Collection
argument_list|<
name|V
argument_list|>
name|values
parameter_list|)
block|{
name|ASSERT
operator|.
name|that
argument_list|(
name|multimap
argument_list|()
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|)
operator|.
name|has
argument_list|()
operator|.
name|allFrom
argument_list|(
name|values
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|values
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|ASSERT
operator|.
name|that
argument_list|(
name|multimap
argument_list|()
operator|.
name|asMap
argument_list|()
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|)
operator|.
name|has
argument_list|()
operator|.
name|allFrom
argument_list|(
name|values
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|multimap
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ASSERT
operator|.
name|that
argument_list|(
name|multimap
argument_list|()
operator|.
name|asMap
argument_list|()
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|values
operator|.
name|size
argument_list|()
argument_list|,
name|multimap
argument_list|()
operator|.
name|get
argument_list|(
name|key
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|values
operator|.
name|size
argument_list|()
operator|>
literal|0
argument_list|,
name|multimap
argument_list|()
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|values
operator|.
name|size
argument_list|()
operator|>
literal|0
argument_list|,
name|multimap
argument_list|()
operator|.
name|keySet
argument_list|()
operator|.
name|contains
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|values
operator|.
name|size
argument_list|()
operator|>
literal|0
argument_list|,
name|multimap
argument_list|()
operator|.
name|keys
argument_list|()
operator|.
name|contains
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

