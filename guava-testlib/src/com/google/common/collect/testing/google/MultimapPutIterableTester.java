begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2012 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.collect.testing.google
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|google
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|features
operator|.
name|CollectionSize
operator|.
name|ZERO
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|features
operator|.
name|MapFeature
operator|.
name|SUPPORTS_PUT
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtCompatible
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Multimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|features
operator|.
name|CollectionSize
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|features
operator|.
name|MapFeature
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_comment
comment|/**  * Tests for {@link Multimap#putAll(Object, Iterable)}.  *  * @author Louis Wasserman  */
end_comment

begin_class
annotation|@
name|GwtCompatible
DECL|class|MultimapPutIterableTester
specifier|public
class|class
name|MultimapPutIterableTester
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
extends|extends
name|AbstractMultimapTester
argument_list|<
name|K
argument_list|,
name|V
argument_list|,
name|Multimap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
block|{
annotation|@
name|CollectionSize
operator|.
name|Require
argument_list|(
name|absent
operator|=
name|ZERO
argument_list|)
annotation|@
name|MapFeature
operator|.
name|Require
argument_list|(
name|SUPPORTS_PUT
argument_list|)
DECL|method|testPutAllNonEmptyOnPresentKey ()
specifier|public
name|void
name|testPutAllNonEmptyOnPresentKey
parameter_list|()
block|{
name|multimap
argument_list|()
operator|.
name|putAll
argument_list|(
name|sampleKeys
argument_list|()
operator|.
name|e0
argument_list|,
operator|new
name|Iterable
argument_list|<
name|V
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|V
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
name|Lists
operator|.
name|newArrayList
argument_list|(
name|sampleValues
argument_list|()
operator|.
name|e3
argument_list|,
name|sampleValues
argument_list|()
operator|.
name|e4
argument_list|)
operator|.
name|iterator
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|assertGet
argument_list|(
name|sampleKeys
argument_list|()
operator|.
name|e0
argument_list|,
name|sampleValues
argument_list|()
operator|.
name|e0
argument_list|,
name|sampleValues
argument_list|()
operator|.
name|e3
argument_list|,
name|sampleValues
argument_list|()
operator|.
name|e4
argument_list|)
expr_stmt|;
block|}
annotation|@
name|MapFeature
operator|.
name|Require
argument_list|(
name|SUPPORTS_PUT
argument_list|)
DECL|method|testPutAllNonEmptyOnAbsentKey ()
specifier|public
name|void
name|testPutAllNonEmptyOnAbsentKey
parameter_list|()
block|{
name|multimap
argument_list|()
operator|.
name|putAll
argument_list|(
name|sampleKeys
argument_list|()
operator|.
name|e3
argument_list|,
operator|new
name|Iterable
argument_list|<
name|V
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|V
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
name|Lists
operator|.
name|newArrayList
argument_list|(
name|sampleValues
argument_list|()
operator|.
name|e3
argument_list|,
name|sampleValues
argument_list|()
operator|.
name|e4
argument_list|)
operator|.
name|iterator
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|assertGet
argument_list|(
name|sampleKeys
argument_list|()
operator|.
name|e3
argument_list|,
name|sampleValues
argument_list|()
operator|.
name|e3
argument_list|,
name|sampleValues
argument_list|()
operator|.
name|e4
argument_list|)
expr_stmt|;
block|}
DECL|field|EMPTY
specifier|private
specifier|static
specifier|final
name|Object
index|[]
name|EMPTY
init|=
operator|new
name|Object
index|[
literal|0
index|]
decl_stmt|;
annotation|@
name|MapFeature
operator|.
name|Require
argument_list|(
name|SUPPORTS_PUT
argument_list|)
DECL|method|testPutAllEmptyIterableOnAbsentKey ()
specifier|public
name|void
name|testPutAllEmptyIterableOnAbsentKey
parameter_list|()
block|{
name|Iterable
argument_list|<
name|V
argument_list|>
name|iterable
init|=
name|Collections
operator|.
name|emptyList
argument_list|()
decl_stmt|;
name|multimap
argument_list|()
operator|.
name|putAll
argument_list|(
name|sampleKeys
argument_list|()
operator|.
name|e3
argument_list|,
name|iterable
argument_list|)
expr_stmt|;
name|expectUnchanged
argument_list|()
expr_stmt|;
block|}
annotation|@
name|CollectionSize
operator|.
name|Require
argument_list|(
name|absent
operator|=
name|ZERO
argument_list|)
annotation|@
name|MapFeature
operator|.
name|Require
argument_list|(
name|SUPPORTS_PUT
argument_list|)
DECL|method|testPutAllEmptyIterableOnPresentKey ()
specifier|public
name|void
name|testPutAllEmptyIterableOnPresentKey
parameter_list|()
block|{
name|multimap
argument_list|()
operator|.
name|putAll
argument_list|(
name|sampleKeys
argument_list|()
operator|.
name|e0
argument_list|,
name|Collections
operator|.
expr|<
name|V
operator|>
name|emptyList
argument_list|()
argument_list|)
expr_stmt|;
name|expectUnchanged
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

