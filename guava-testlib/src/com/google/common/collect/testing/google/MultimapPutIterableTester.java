begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2012 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.collect.testing.google
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|google
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkState
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|Helpers
operator|.
name|assertContainsAllOf
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|features
operator|.
name|CollectionSize
operator|.
name|ZERO
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|features
operator|.
name|MapFeature
operator|.
name|ALLOWS_NULL_KEYS
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|features
operator|.
name|MapFeature
operator|.
name|ALLOWS_NULL_VALUES
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|features
operator|.
name|MapFeature
operator|.
name|SUPPORTS_PUT
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtCompatible
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterators
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Multimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|features
operator|.
name|CollectionSize
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|features
operator|.
name|MapFeature
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_comment
comment|/**  * Tests for {@link Multimap#putAll(Object, Iterable)}.  *  * @author Louis Wasserman  */
end_comment

begin_class
annotation|@
name|GwtCompatible
annotation|@
name|SuppressUnderAndroid
DECL|class|MultimapPutIterableTester
specifier|public
class|class
name|MultimapPutIterableTester
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
extends|extends
name|AbstractMultimapTester
argument_list|<
name|K
argument_list|,
name|V
argument_list|,
name|Multimap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
block|{
annotation|@
name|CollectionSize
operator|.
name|Require
argument_list|(
name|absent
operator|=
name|ZERO
argument_list|)
annotation|@
name|MapFeature
operator|.
name|Require
argument_list|(
name|SUPPORTS_PUT
argument_list|)
DECL|method|testPutAllNonEmptyIterableOnPresentKey ()
specifier|public
name|void
name|testPutAllNonEmptyIterableOnPresentKey
parameter_list|()
block|{
name|assertTrue
argument_list|(
name|multimap
argument_list|()
operator|.
name|putAll
argument_list|(
name|k0
argument_list|()
argument_list|,
operator|new
name|Iterable
argument_list|<
name|V
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|V
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
name|Lists
operator|.
name|newArrayList
argument_list|(
name|v3
argument_list|()
argument_list|,
name|v4
argument_list|()
argument_list|)
operator|.
name|iterator
argument_list|()
return|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|assertGet
argument_list|(
name|k0
argument_list|()
argument_list|,
name|v0
argument_list|()
argument_list|,
name|v3
argument_list|()
argument_list|,
name|v4
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|CollectionSize
operator|.
name|Require
argument_list|(
name|absent
operator|=
name|ZERO
argument_list|)
annotation|@
name|MapFeature
operator|.
name|Require
argument_list|(
name|SUPPORTS_PUT
argument_list|)
DECL|method|testPutAllNonEmptyCollectionOnPresentKey ()
specifier|public
name|void
name|testPutAllNonEmptyCollectionOnPresentKey
parameter_list|()
block|{
name|assertTrue
argument_list|(
name|multimap
argument_list|()
operator|.
name|putAll
argument_list|(
name|k0
argument_list|()
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
name|v3
argument_list|()
argument_list|,
name|v4
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertGet
argument_list|(
name|k0
argument_list|()
argument_list|,
name|v0
argument_list|()
argument_list|,
name|v3
argument_list|()
argument_list|,
name|v4
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|MapFeature
operator|.
name|Require
argument_list|(
name|SUPPORTS_PUT
argument_list|)
DECL|method|testPutAllNonEmptyIterableOnAbsentKey ()
specifier|public
name|void
name|testPutAllNonEmptyIterableOnAbsentKey
parameter_list|()
block|{
name|assertTrue
argument_list|(
name|multimap
argument_list|()
operator|.
name|putAll
argument_list|(
name|k3
argument_list|()
argument_list|,
operator|new
name|Iterable
argument_list|<
name|V
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|V
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
name|Lists
operator|.
name|newArrayList
argument_list|(
name|v3
argument_list|()
argument_list|,
name|v4
argument_list|()
argument_list|)
operator|.
name|iterator
argument_list|()
return|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|assertGet
argument_list|(
name|k3
argument_list|()
argument_list|,
name|v3
argument_list|()
argument_list|,
name|v4
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|MapFeature
operator|.
name|Require
argument_list|(
name|SUPPORTS_PUT
argument_list|)
DECL|method|testPutAllNonEmptyCollectionOnAbsentKey ()
specifier|public
name|void
name|testPutAllNonEmptyCollectionOnAbsentKey
parameter_list|()
block|{
name|assertTrue
argument_list|(
name|multimap
argument_list|()
operator|.
name|putAll
argument_list|(
name|k3
argument_list|()
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
name|v3
argument_list|()
argument_list|,
name|v4
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertGet
argument_list|(
name|k3
argument_list|()
argument_list|,
name|v3
argument_list|()
argument_list|,
name|v4
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|CollectionSize
operator|.
name|Require
argument_list|(
name|absent
operator|=
name|ZERO
argument_list|)
annotation|@
name|MapFeature
operator|.
name|Require
argument_list|(
block|{
name|SUPPORTS_PUT
block|,
name|ALLOWS_NULL_VALUES
block|}
argument_list|)
DECL|method|testPutAllNullValueOnPresentKey_supported ()
specifier|public
name|void
name|testPutAllNullValueOnPresentKey_supported
parameter_list|()
block|{
name|assertTrue
argument_list|(
name|multimap
argument_list|()
operator|.
name|putAll
argument_list|(
name|k0
argument_list|()
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
name|v3
argument_list|()
argument_list|,
literal|null
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertGet
argument_list|(
name|k0
argument_list|()
argument_list|,
name|v0
argument_list|()
argument_list|,
name|v3
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|MapFeature
operator|.
name|Require
argument_list|(
block|{
name|SUPPORTS_PUT
block|,
name|ALLOWS_NULL_VALUES
block|}
argument_list|)
DECL|method|testPutAllNullValueOnAbsentKey_supported ()
specifier|public
name|void
name|testPutAllNullValueOnAbsentKey_supported
parameter_list|()
block|{
name|assertTrue
argument_list|(
name|multimap
argument_list|()
operator|.
name|putAll
argument_list|(
name|k3
argument_list|()
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
name|v3
argument_list|()
argument_list|,
literal|null
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertGet
argument_list|(
name|k3
argument_list|()
argument_list|,
name|v3
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|MapFeature
operator|.
name|Require
argument_list|(
name|value
operator|=
name|SUPPORTS_PUT
argument_list|,
name|absent
operator|=
name|ALLOWS_NULL_VALUES
argument_list|)
DECL|method|testPutAllNullValueSingle_unsupported ()
specifier|public
name|void
name|testPutAllNullValueSingle_unsupported
parameter_list|()
block|{
name|multimap
argument_list|()
operator|.
name|putAll
argument_list|(
name|k1
argument_list|()
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
operator|(
name|V
operator|)
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|expectUnchanged
argument_list|()
expr_stmt|;
block|}
comment|// In principle, it would be nice to apply these two tests to keys with existing values, too.
annotation|@
name|MapFeature
operator|.
name|Require
argument_list|(
name|value
operator|=
name|SUPPORTS_PUT
argument_list|,
name|absent
operator|=
name|ALLOWS_NULL_VALUES
argument_list|)
DECL|method|testPutAllNullValueNullLast_unsupported ()
specifier|public
name|void
name|testPutAllNullValueNullLast_unsupported
parameter_list|()
block|{
name|int
name|size
init|=
name|getNumElements
argument_list|()
decl_stmt|;
try|try
block|{
name|multimap
argument_list|()
operator|.
name|putAll
argument_list|(
name|k3
argument_list|()
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
name|v3
argument_list|()
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|expected
parameter_list|)
block|{     }
name|Collection
argument_list|<
name|V
argument_list|>
name|values
init|=
name|multimap
argument_list|()
operator|.
name|get
argument_list|(
name|k3
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|values
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|expectUnchanged
argument_list|()
expr_stmt|;
comment|// Be extra thorough in case internal state was corrupted by the expected null.
name|assertEquals
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|()
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
name|values
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|size
argument_list|,
name|multimap
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
name|v3
argument_list|()
argument_list|)
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
name|values
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|size
operator|+
literal|1
argument_list|,
name|multimap
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|MapFeature
operator|.
name|Require
argument_list|(
name|value
operator|=
name|SUPPORTS_PUT
argument_list|,
name|absent
operator|=
name|ALLOWS_NULL_VALUES
argument_list|)
DECL|method|testPutAllNullValueNullFirst_unsupported ()
specifier|public
name|void
name|testPutAllNullValueNullFirst_unsupported
parameter_list|()
block|{
name|int
name|size
init|=
name|getNumElements
argument_list|()
decl_stmt|;
try|try
block|{
name|multimap
argument_list|()
operator|.
name|putAll
argument_list|(
name|k3
argument_list|()
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|null
argument_list|,
name|v3
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|expected
parameter_list|)
block|{     }
comment|/*      * In principle, a Multimap implementation could add e3 first before failing on the null. But      * that seems unlikely enough to be worth complicating the test over, especially if there's any      * chance that a permissive test could mask a bug.      */
name|expectUnchanged
argument_list|()
expr_stmt|;
comment|// Be extra thorough in case internal state was corrupted by the expected null.
name|assertEquals
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|()
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
name|multimap
argument_list|()
operator|.
name|get
argument_list|(
name|k3
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|size
argument_list|,
name|multimap
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|MapFeature
operator|.
name|Require
argument_list|(
block|{
name|SUPPORTS_PUT
block|,
name|ALLOWS_NULL_KEYS
block|}
argument_list|)
DECL|method|testPutAllOnPresentNullKey ()
specifier|public
name|void
name|testPutAllOnPresentNullKey
parameter_list|()
block|{
name|assertTrue
argument_list|(
name|multimap
argument_list|()
operator|.
name|putAll
argument_list|(
literal|null
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
name|v3
argument_list|()
argument_list|,
name|v4
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertGet
argument_list|(
literal|null
argument_list|,
name|v3
argument_list|()
argument_list|,
name|v4
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|MapFeature
operator|.
name|Require
argument_list|(
name|absent
operator|=
name|ALLOWS_NULL_KEYS
argument_list|)
DECL|method|testPutAllNullForbidden ()
specifier|public
name|void
name|testPutAllNullForbidden
parameter_list|()
block|{
try|try
block|{
name|multimap
argument_list|()
operator|.
name|putAll
argument_list|(
literal|null
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|v3
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected NullPointerException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|expected
parameter_list|)
block|{
comment|// success
block|}
block|}
annotation|@
name|MapFeature
operator|.
name|Require
argument_list|(
name|SUPPORTS_PUT
argument_list|)
DECL|method|testPutAllEmptyCollectionOnAbsentKey ()
specifier|public
name|void
name|testPutAllEmptyCollectionOnAbsentKey
parameter_list|()
block|{
name|assertFalse
argument_list|(
name|multimap
argument_list|()
operator|.
name|putAll
argument_list|(
name|k3
argument_list|()
argument_list|,
name|Collections
operator|.
expr|<
name|V
operator|>
name|emptyList
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|expectUnchanged
argument_list|()
expr_stmt|;
block|}
annotation|@
name|MapFeature
operator|.
name|Require
argument_list|(
name|SUPPORTS_PUT
argument_list|)
DECL|method|testPutAllEmptyIterableOnAbsentKey ()
specifier|public
name|void
name|testPutAllEmptyIterableOnAbsentKey
parameter_list|()
block|{
name|Iterable
argument_list|<
name|V
argument_list|>
name|iterable
init|=
operator|new
name|Iterable
argument_list|<
name|V
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|V
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
name|ImmutableSet
operator|.
expr|<
name|V
operator|>
name|of
argument_list|()
operator|.
name|iterator
argument_list|()
return|;
block|}
block|}
decl_stmt|;
name|assertFalse
argument_list|(
name|multimap
argument_list|()
operator|.
name|putAll
argument_list|(
name|k3
argument_list|()
argument_list|,
name|iterable
argument_list|)
argument_list|)
expr_stmt|;
name|expectUnchanged
argument_list|()
expr_stmt|;
block|}
annotation|@
name|CollectionSize
operator|.
name|Require
argument_list|(
name|absent
operator|=
name|ZERO
argument_list|)
annotation|@
name|MapFeature
operator|.
name|Require
argument_list|(
name|SUPPORTS_PUT
argument_list|)
DECL|method|testPutAllEmptyIterableOnPresentKey ()
specifier|public
name|void
name|testPutAllEmptyIterableOnPresentKey
parameter_list|()
block|{
name|multimap
argument_list|()
operator|.
name|putAll
argument_list|(
name|k0
argument_list|()
argument_list|,
name|Collections
operator|.
expr|<
name|V
operator|>
name|emptyList
argument_list|()
argument_list|)
expr_stmt|;
name|expectUnchanged
argument_list|()
expr_stmt|;
block|}
annotation|@
name|MapFeature
operator|.
name|Require
argument_list|(
name|SUPPORTS_PUT
argument_list|)
DECL|method|testPutAllOnlyCallsIteratorOnce ()
specifier|public
name|void
name|testPutAllOnlyCallsIteratorOnce
parameter_list|()
block|{
name|Iterable
argument_list|<
name|V
argument_list|>
name|iterable
init|=
operator|new
name|Iterable
argument_list|<
name|V
argument_list|>
argument_list|()
block|{
specifier|private
name|boolean
name|calledIteratorAlready
init|=
literal|false
decl_stmt|;
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|V
argument_list|>
name|iterator
parameter_list|()
block|{
name|checkState
argument_list|(
operator|!
name|calledIteratorAlready
argument_list|)
expr_stmt|;
name|calledIteratorAlready
operator|=
literal|true
expr_stmt|;
return|return
name|Iterators
operator|.
name|forArray
argument_list|(
name|v3
argument_list|()
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|multimap
argument_list|()
operator|.
name|putAll
argument_list|(
name|k3
argument_list|()
argument_list|,
name|iterable
argument_list|)
expr_stmt|;
block|}
annotation|@
name|MapFeature
operator|.
name|Require
argument_list|(
name|SUPPORTS_PUT
argument_list|)
DECL|method|testPutAllPropagatesToGet ()
specifier|public
name|void
name|testPutAllPropagatesToGet
parameter_list|()
block|{
name|Collection
argument_list|<
name|V
argument_list|>
name|getCollection
init|=
name|multimap
argument_list|()
operator|.
name|get
argument_list|(
name|k0
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|getCollectionSize
init|=
name|getCollection
operator|.
name|size
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|multimap
argument_list|()
operator|.
name|putAll
argument_list|(
name|k0
argument_list|()
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
name|v3
argument_list|()
argument_list|,
name|v4
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|getCollectionSize
operator|+
literal|2
argument_list|,
name|getCollection
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertContainsAllOf
argument_list|(
name|getCollection
argument_list|,
name|v3
argument_list|()
argument_list|,
name|v4
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

