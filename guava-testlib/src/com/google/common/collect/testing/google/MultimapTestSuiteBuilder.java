begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2012 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.collect.testing.google
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|google
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkArgument
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|Helpers
operator|.
name|mapEntry
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMultimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Multimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Multiset
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|AbstractTester
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|CollectionTestSuiteBuilder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|DerivedGenerator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|FeatureSpecificTestSuiteBuilder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|Helpers
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|MapTestSuiteBuilder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|OneSizeTestContainerGenerator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|PerCollectionSizeTestSuiteBuilder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|SampleElements
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|TestCollectionGenerator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|TestMapGenerator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|TestSubjectGenerator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|features
operator|.
name|CollectionFeature
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|features
operator|.
name|Feature
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|features
operator|.
name|MapFeature
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|testing
operator|.
name|SerializableTester
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestSuite
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**  * Creates, based on your criteria, a JUnit test suite that exhaustively tests  * a {@code Multimap} implementation.  *  * @author Louis Wasserman  */
end_comment

begin_class
DECL|class|MultimapTestSuiteBuilder
specifier|public
class|class
name|MultimapTestSuiteBuilder
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|,
name|M
extends|extends
name|Multimap
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
parameter_list|>
extends|extends
name|PerCollectionSizeTestSuiteBuilder
argument_list|<
name|MultimapTestSuiteBuilder
argument_list|<
name|K
argument_list|,
name|V
argument_list|,
name|M
argument_list|>
argument_list|,
name|TestMultimapGenerator
argument_list|<
name|K
argument_list|,
name|V
argument_list|,
name|M
argument_list|>
argument_list|,
name|M
argument_list|,
name|Map
operator|.
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
block|{
DECL|method|using ( TestMultimapGenerator<K, V, M> generator)
specifier|public
specifier|static
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|,
name|M
extends|extends
name|Multimap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
parameter_list|>
name|MultimapTestSuiteBuilder
argument_list|<
name|K
argument_list|,
name|V
argument_list|,
name|M
argument_list|>
name|using
parameter_list|(
name|TestMultimapGenerator
argument_list|<
name|K
argument_list|,
name|V
argument_list|,
name|M
argument_list|>
name|generator
parameter_list|)
block|{
return|return
operator|new
name|MultimapTestSuiteBuilder
argument_list|<
name|K
argument_list|,
name|V
argument_list|,
name|M
argument_list|>
argument_list|()
operator|.
name|usingGenerator
argument_list|(
name|generator
argument_list|)
return|;
block|}
comment|// Class parameters must be raw.
annotation|@
name|Override
DECL|method|getTesters ()
specifier|protected
name|List
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|AbstractTester
argument_list|>
argument_list|>
name|getTesters
parameter_list|()
block|{
return|return
name|ImmutableList
operator|.
expr|<
name|Class
argument_list|<
name|?
extends|extends
name|AbstractTester
argument_list|>
operator|>
name|of
argument_list|(
name|MultimapSizeTester
operator|.
name|class
argument_list|,
name|MultimapClearTester
operator|.
name|class
argument_list|,
name|MultimapContainsKeyTester
operator|.
name|class
argument_list|,
name|MultimapContainsValueTester
operator|.
name|class
argument_list|,
name|MultimapContainsEntryTester
operator|.
name|class
argument_list|,
name|MultimapGetTester
operator|.
name|class
argument_list|,
name|MultimapPutTester
operator|.
name|class
argument_list|,
name|MultimapPutAllMultimapTester
operator|.
name|class
argument_list|,
name|MultimapPutIterableTester
operator|.
name|class
argument_list|,
name|MultimapReplaceValuesTester
operator|.
name|class
argument_list|,
name|MultimapRemoveEntryTester
operator|.
name|class
argument_list|,
name|MultimapRemoveAllTester
operator|.
name|class
argument_list|,
name|MultimapToStringTester
operator|.
name|class
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|createDerivedSuites ( FeatureSpecificTestSuiteBuilder< ?, ? extends OneSizeTestContainerGenerator<M, Map.Entry<K, V>>> parentBuilder)
specifier|protected
name|List
argument_list|<
name|TestSuite
argument_list|>
name|createDerivedSuites
parameter_list|(
name|FeatureSpecificTestSuiteBuilder
argument_list|<
name|?
argument_list|,
name|?
extends|extends
name|OneSizeTestContainerGenerator
argument_list|<
name|M
argument_list|,
name|Map
operator|.
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
argument_list|>
name|parentBuilder
parameter_list|)
block|{
comment|// TODO: Once invariant support is added, supply invariants to each of the
comment|// derived suites, to check that mutations to the derived collections are
comment|// reflected in the underlying map.
name|List
argument_list|<
name|TestSuite
argument_list|>
name|derivedSuites
init|=
name|super
operator|.
name|createDerivedSuites
argument_list|(
name|parentBuilder
argument_list|)
decl_stmt|;
if|if
condition|(
name|parentBuilder
operator|.
name|getFeatures
argument_list|()
operator|.
name|contains
argument_list|(
name|CollectionFeature
operator|.
name|SERIALIZABLE
argument_list|)
condition|)
block|{
name|derivedSuites
operator|.
name|add
argument_list|(
name|MultimapTestSuiteBuilder
operator|.
name|using
argument_list|(
operator|new
name|ReserializedMultimapGenerator
argument_list|<
name|K
argument_list|,
name|V
argument_list|,
name|M
argument_list|>
argument_list|(
name|parentBuilder
operator|.
name|getSubjectGenerator
argument_list|()
argument_list|)
argument_list|)
operator|.
name|withFeatures
argument_list|(
name|computeReserializedMultimapFeatures
argument_list|(
name|parentBuilder
operator|.
name|getFeatures
argument_list|()
argument_list|)
argument_list|)
operator|.
name|named
argument_list|(
name|parentBuilder
operator|.
name|getName
argument_list|()
operator|+
literal|" reserialized"
argument_list|)
operator|.
name|suppressing
argument_list|(
name|parentBuilder
operator|.
name|getSuppressedTests
argument_list|()
argument_list|)
operator|.
name|createTestSuite
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|derivedSuites
operator|.
name|add
argument_list|(
name|MapTestSuiteBuilder
operator|.
name|using
argument_list|(
operator|new
name|AsMapGenerator
argument_list|<
name|K
argument_list|,
name|V
argument_list|,
name|M
argument_list|>
argument_list|(
name|parentBuilder
operator|.
name|getSubjectGenerator
argument_list|()
argument_list|)
argument_list|)
operator|.
name|withFeatures
argument_list|(
name|computeAsMapFeatures
argument_list|(
name|parentBuilder
operator|.
name|getFeatures
argument_list|()
argument_list|)
argument_list|)
operator|.
name|named
argument_list|(
name|parentBuilder
operator|.
name|getName
argument_list|()
operator|+
literal|".asMap"
argument_list|)
operator|.
name|suppressing
argument_list|(
name|parentBuilder
operator|.
name|getSuppressedTests
argument_list|()
argument_list|)
operator|.
name|createTestSuite
argument_list|()
argument_list|)
expr_stmt|;
name|derivedSuites
operator|.
name|add
argument_list|(
name|computeEntriesTestSuite
argument_list|(
name|parentBuilder
argument_list|)
argument_list|)
expr_stmt|;
name|derivedSuites
operator|.
name|add
argument_list|(
name|computeMultimapGetTestSuite
argument_list|(
name|parentBuilder
argument_list|)
argument_list|)
expr_stmt|;
name|derivedSuites
operator|.
name|add
argument_list|(
name|computeKeysTestSuite
argument_list|(
name|parentBuilder
argument_list|)
argument_list|)
expr_stmt|;
name|derivedSuites
operator|.
name|add
argument_list|(
name|computeValuesTestSuite
argument_list|(
name|parentBuilder
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|derivedSuites
return|;
block|}
DECL|method|computeValuesTestSuite ( FeatureSpecificTestSuiteBuilder<?, ? extends OneSizeTestContainerGenerator<M, Map.Entry<K, V>>> parentBuilder)
name|TestSuite
name|computeValuesTestSuite
parameter_list|(
name|FeatureSpecificTestSuiteBuilder
argument_list|<
name|?
argument_list|,
name|?
extends|extends
name|OneSizeTestContainerGenerator
argument_list|<
name|M
argument_list|,
name|Map
operator|.
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
argument_list|>
name|parentBuilder
parameter_list|)
block|{
return|return
name|CollectionTestSuiteBuilder
operator|.
name|using
argument_list|(
operator|new
name|ValuesGenerator
argument_list|<
name|K
argument_list|,
name|V
argument_list|,
name|M
argument_list|>
argument_list|(
name|parentBuilder
operator|.
name|getSubjectGenerator
argument_list|()
argument_list|)
argument_list|)
operator|.
name|withFeatures
argument_list|(
name|computeValuesFeatures
argument_list|(
name|parentBuilder
operator|.
name|getFeatures
argument_list|()
argument_list|)
argument_list|)
operator|.
name|named
argument_list|(
name|parentBuilder
operator|.
name|getName
argument_list|()
operator|+
literal|".values"
argument_list|)
operator|.
name|suppressing
argument_list|(
name|parentBuilder
operator|.
name|getSuppressedTests
argument_list|()
argument_list|)
operator|.
name|createTestSuite
argument_list|()
return|;
block|}
DECL|method|computeEntriesTestSuite ( FeatureSpecificTestSuiteBuilder<?, ? extends OneSizeTestContainerGenerator<M, Map.Entry<K, V>>> parentBuilder)
name|TestSuite
name|computeEntriesTestSuite
parameter_list|(
name|FeatureSpecificTestSuiteBuilder
argument_list|<
name|?
argument_list|,
name|?
extends|extends
name|OneSizeTestContainerGenerator
argument_list|<
name|M
argument_list|,
name|Map
operator|.
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
argument_list|>
name|parentBuilder
parameter_list|)
block|{
return|return
name|CollectionTestSuiteBuilder
operator|.
name|using
argument_list|(
operator|new
name|EntriesGenerator
argument_list|<
name|K
argument_list|,
name|V
argument_list|,
name|M
argument_list|>
argument_list|(
name|parentBuilder
operator|.
name|getSubjectGenerator
argument_list|()
argument_list|)
argument_list|)
operator|.
name|withFeatures
argument_list|(
name|computeEntriesFeatures
argument_list|(
name|parentBuilder
operator|.
name|getFeatures
argument_list|()
argument_list|)
argument_list|)
operator|.
name|named
argument_list|(
name|parentBuilder
operator|.
name|getName
argument_list|()
operator|+
literal|".entries"
argument_list|)
operator|.
name|suppressing
argument_list|(
name|parentBuilder
operator|.
name|getSuppressedTests
argument_list|()
argument_list|)
operator|.
name|createTestSuite
argument_list|()
return|;
block|}
DECL|method|computeMultimapGetTestSuite ( FeatureSpecificTestSuiteBuilder<?, ? extends OneSizeTestContainerGenerator<M, Map.Entry<K, V>>> parentBuilder)
name|TestSuite
name|computeMultimapGetTestSuite
parameter_list|(
name|FeatureSpecificTestSuiteBuilder
argument_list|<
name|?
argument_list|,
name|?
extends|extends
name|OneSizeTestContainerGenerator
argument_list|<
name|M
argument_list|,
name|Map
operator|.
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
argument_list|>
name|parentBuilder
parameter_list|)
block|{
return|return
name|CollectionTestSuiteBuilder
operator|.
name|using
argument_list|(
operator|new
name|MultimapGetGenerator
argument_list|<
name|K
argument_list|,
name|V
argument_list|,
name|M
argument_list|>
argument_list|(
name|parentBuilder
operator|.
name|getSubjectGenerator
argument_list|()
argument_list|)
argument_list|)
operator|.
name|withFeatures
argument_list|(
name|computeMultimapGetFeatures
argument_list|(
name|parentBuilder
operator|.
name|getFeatures
argument_list|()
argument_list|)
argument_list|)
operator|.
name|named
argument_list|(
name|parentBuilder
operator|.
name|getName
argument_list|()
operator|+
literal|".get[key]"
argument_list|)
operator|.
name|suppressing
argument_list|(
name|parentBuilder
operator|.
name|getSuppressedTests
argument_list|()
argument_list|)
operator|.
name|createTestSuite
argument_list|()
return|;
block|}
DECL|method|computeKeysTestSuite ( FeatureSpecificTestSuiteBuilder<?, ? extends OneSizeTestContainerGenerator<M, Map.Entry<K, V>>> parentBuilder)
name|TestSuite
name|computeKeysTestSuite
parameter_list|(
name|FeatureSpecificTestSuiteBuilder
argument_list|<
name|?
argument_list|,
name|?
extends|extends
name|OneSizeTestContainerGenerator
argument_list|<
name|M
argument_list|,
name|Map
operator|.
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
argument_list|>
name|parentBuilder
parameter_list|)
block|{
return|return
name|MultisetTestSuiteBuilder
operator|.
name|using
argument_list|(
operator|new
name|KeysGenerator
argument_list|<
name|K
argument_list|,
name|V
argument_list|,
name|M
argument_list|>
argument_list|(
name|parentBuilder
operator|.
name|getSubjectGenerator
argument_list|()
argument_list|)
argument_list|)
operator|.
name|withFeatures
argument_list|(
name|computeKeysFeatures
argument_list|(
name|parentBuilder
operator|.
name|getFeatures
argument_list|()
argument_list|)
argument_list|)
operator|.
name|named
argument_list|(
name|parentBuilder
operator|.
name|getName
argument_list|()
operator|+
literal|".keys"
argument_list|)
operator|.
name|suppressing
argument_list|(
name|parentBuilder
operator|.
name|getSuppressedTests
argument_list|()
argument_list|)
operator|.
name|createTestSuite
argument_list|()
return|;
block|}
DECL|method|computeDerivedCollectionFeatures (Set<Feature<?>> multimapFeatures)
specifier|static
name|Set
argument_list|<
name|Feature
argument_list|<
name|?
argument_list|>
argument_list|>
name|computeDerivedCollectionFeatures
parameter_list|(
name|Set
argument_list|<
name|Feature
argument_list|<
name|?
argument_list|>
argument_list|>
name|multimapFeatures
parameter_list|)
block|{
name|Set
argument_list|<
name|Feature
argument_list|<
name|?
argument_list|>
argument_list|>
name|derivedFeatures
init|=
name|Helpers
operator|.
name|copyToSet
argument_list|(
name|multimapFeatures
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|derivedFeatures
operator|.
name|remove
argument_list|(
name|CollectionFeature
operator|.
name|SERIALIZABLE_INCLUDING_VIEWS
argument_list|)
condition|)
block|{
name|derivedFeatures
operator|.
name|remove
argument_list|(
name|CollectionFeature
operator|.
name|SERIALIZABLE
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|derivedFeatures
operator|.
name|remove
argument_list|(
name|MapFeature
operator|.
name|ALLOWS_NULL_QUERIES
argument_list|)
condition|)
block|{
name|derivedFeatures
operator|.
name|add
argument_list|(
name|CollectionFeature
operator|.
name|ALLOWS_NULL_QUERIES
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|derivedFeatures
operator|.
name|remove
argument_list|(
name|MapFeature
operator|.
name|SUPPORTS_REMOVE
argument_list|)
condition|)
block|{
name|derivedFeatures
operator|.
name|add
argument_list|(
name|CollectionFeature
operator|.
name|SUPPORTS_REMOVE
argument_list|)
expr_stmt|;
block|}
return|return
name|derivedFeatures
return|;
block|}
DECL|method|computeEntriesFeatures ( Set<Feature<?>> multimapFeatures)
specifier|static
name|Set
argument_list|<
name|Feature
argument_list|<
name|?
argument_list|>
argument_list|>
name|computeEntriesFeatures
parameter_list|(
name|Set
argument_list|<
name|Feature
argument_list|<
name|?
argument_list|>
argument_list|>
name|multimapFeatures
parameter_list|)
block|{
return|return
name|computeDerivedCollectionFeatures
argument_list|(
name|multimapFeatures
argument_list|)
return|;
block|}
DECL|method|computeValuesFeatures ( Set<Feature<?>> multimapFeatures)
specifier|static
name|Set
argument_list|<
name|Feature
argument_list|<
name|?
argument_list|>
argument_list|>
name|computeValuesFeatures
parameter_list|(
name|Set
argument_list|<
name|Feature
argument_list|<
name|?
argument_list|>
argument_list|>
name|multimapFeatures
parameter_list|)
block|{
return|return
name|computeDerivedCollectionFeatures
argument_list|(
name|multimapFeatures
argument_list|)
return|;
block|}
DECL|method|computeKeysFeatures ( Set<Feature<?>> multimapFeatures)
specifier|static
name|Set
argument_list|<
name|Feature
argument_list|<
name|?
argument_list|>
argument_list|>
name|computeKeysFeatures
parameter_list|(
name|Set
argument_list|<
name|Feature
argument_list|<
name|?
argument_list|>
argument_list|>
name|multimapFeatures
parameter_list|)
block|{
name|Set
argument_list|<
name|Feature
argument_list|<
name|?
argument_list|>
argument_list|>
name|result
init|=
name|computeDerivedCollectionFeatures
argument_list|(
name|multimapFeatures
argument_list|)
decl_stmt|;
if|if
condition|(
name|multimapFeatures
operator|.
name|contains
argument_list|(
name|MapFeature
operator|.
name|ALLOWS_NULL_KEYS
argument_list|)
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
name|CollectionFeature
operator|.
name|ALLOWS_NULL_VALUES
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
DECL|method|computeReserializedMultimapFeatures ( Set<Feature<?>> multimapFeatures)
specifier|private
specifier|static
name|Set
argument_list|<
name|Feature
argument_list|<
name|?
argument_list|>
argument_list|>
name|computeReserializedMultimapFeatures
parameter_list|(
name|Set
argument_list|<
name|Feature
argument_list|<
name|?
argument_list|>
argument_list|>
name|multimapFeatures
parameter_list|)
block|{
name|Set
argument_list|<
name|Feature
argument_list|<
name|?
argument_list|>
argument_list|>
name|derivedFeatures
init|=
name|Helpers
operator|.
name|copyToSet
argument_list|(
name|multimapFeatures
argument_list|)
decl_stmt|;
name|derivedFeatures
operator|.
name|remove
argument_list|(
name|CollectionFeature
operator|.
name|SERIALIZABLE
argument_list|)
expr_stmt|;
name|derivedFeatures
operator|.
name|remove
argument_list|(
name|CollectionFeature
operator|.
name|SERIALIZABLE_INCLUDING_VIEWS
argument_list|)
expr_stmt|;
return|return
name|derivedFeatures
return|;
block|}
DECL|method|computeAsMapFeatures ( Set<Feature<?>> multimapFeatures)
specifier|private
specifier|static
name|Set
argument_list|<
name|Feature
argument_list|<
name|?
argument_list|>
argument_list|>
name|computeAsMapFeatures
parameter_list|(
name|Set
argument_list|<
name|Feature
argument_list|<
name|?
argument_list|>
argument_list|>
name|multimapFeatures
parameter_list|)
block|{
name|Set
argument_list|<
name|Feature
argument_list|<
name|?
argument_list|>
argument_list|>
name|derivedFeatures
init|=
name|Helpers
operator|.
name|copyToSet
argument_list|(
name|multimapFeatures
argument_list|)
decl_stmt|;
name|derivedFeatures
operator|.
name|remove
argument_list|(
name|MapFeature
operator|.
name|GENERAL_PURPOSE
argument_list|)
expr_stmt|;
name|derivedFeatures
operator|.
name|remove
argument_list|(
name|MapFeature
operator|.
name|SUPPORTS_PUT
argument_list|)
expr_stmt|;
name|derivedFeatures
operator|.
name|remove
argument_list|(
name|MapFeature
operator|.
name|ALLOWS_NULL_VALUES
argument_list|)
expr_stmt|;
name|derivedFeatures
operator|.
name|add
argument_list|(
name|MapFeature
operator|.
name|REJECTS_DUPLICATES_AT_CREATION
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|derivedFeatures
operator|.
name|contains
argument_list|(
name|CollectionFeature
operator|.
name|SERIALIZABLE_INCLUDING_VIEWS
argument_list|)
condition|)
block|{
name|derivedFeatures
operator|.
name|remove
argument_list|(
name|CollectionFeature
operator|.
name|SERIALIZABLE
argument_list|)
expr_stmt|;
block|}
return|return
name|derivedFeatures
return|;
block|}
DECL|field|GET_FEATURE_MAP
specifier|private
specifier|static
specifier|final
name|Multimap
argument_list|<
name|Feature
argument_list|<
name|?
argument_list|>
argument_list|,
name|Feature
argument_list|<
name|?
argument_list|>
argument_list|>
name|GET_FEATURE_MAP
init|=
name|ImmutableMultimap
operator|.
expr|<
name|Feature
argument_list|<
name|?
argument_list|>
condition|,
name|Feature
argument_list|<
name|?
argument_list|>
operator|>
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|MapFeature
operator|.
name|FAILS_FAST_ON_CONCURRENT_MODIFICATION
argument_list|,
name|CollectionFeature
operator|.
name|FAILS_FAST_ON_CONCURRENT_MODIFICATION
argument_list|)
operator|.
name|put
argument_list|(
name|MapFeature
operator|.
name|GENERAL_PURPOSE
argument_list|,
name|CollectionFeature
operator|.
name|GENERAL_PURPOSE
argument_list|)
operator|.
name|put
argument_list|(
name|MapFeature
operator|.
name|ALLOWS_NULL_QUERIES
argument_list|,
name|CollectionFeature
operator|.
name|ALLOWS_NULL_QUERIES
argument_list|)
operator|.
name|put
argument_list|(
name|MapFeature
operator|.
name|ALLOWS_NULL_VALUES
argument_list|,
name|CollectionFeature
operator|.
name|ALLOWS_NULL_VALUES
argument_list|)
operator|.
name|put
argument_list|(
name|MapFeature
operator|.
name|SUPPORTS_REMOVE
argument_list|,
name|CollectionFeature
operator|.
name|SUPPORTS_REMOVE
argument_list|)
operator|.
name|put
argument_list|(
name|MapFeature
operator|.
name|SUPPORTS_PUT
argument_list|,
name|CollectionFeature
operator|.
name|SUPPORTS_ADD
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
DECL|method|computeMultimapGetFeatures ( Set<Feature<?>> multimapFeatures)
name|Set
argument_list|<
name|Feature
argument_list|<
name|?
argument_list|>
argument_list|>
name|computeMultimapGetFeatures
parameter_list|(
name|Set
argument_list|<
name|Feature
argument_list|<
name|?
argument_list|>
argument_list|>
name|multimapFeatures
parameter_list|)
block|{
name|Set
argument_list|<
name|Feature
argument_list|<
name|?
argument_list|>
argument_list|>
name|derivedFeatures
init|=
name|Helpers
operator|.
name|copyToSet
argument_list|(
name|multimapFeatures
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Feature
argument_list|<
name|?
argument_list|>
argument_list|,
name|Feature
argument_list|<
name|?
argument_list|>
argument_list|>
name|entry
range|:
name|GET_FEATURE_MAP
operator|.
name|entries
argument_list|()
control|)
block|{
if|if
condition|(
name|derivedFeatures
operator|.
name|contains
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
block|{
name|derivedFeatures
operator|.
name|add
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|derivedFeatures
operator|.
name|contains
argument_list|(
name|CollectionFeature
operator|.
name|SERIALIZABLE_INCLUDING_VIEWS
argument_list|)
condition|)
block|{
name|derivedFeatures
operator|.
name|remove
argument_list|(
name|CollectionFeature
operator|.
name|SERIALIZABLE
argument_list|)
expr_stmt|;
block|}
name|derivedFeatures
operator|.
name|removeAll
argument_list|(
name|GET_FEATURE_MAP
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|derivedFeatures
return|;
block|}
DECL|class|AsMapGenerator
specifier|private
specifier|static
class|class
name|AsMapGenerator
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|,
name|M
extends|extends
name|Multimap
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
parameter_list|>
implements|implements
name|TestMapGenerator
argument_list|<
name|K
argument_list|,
name|Collection
argument_list|<
name|V
argument_list|>
argument_list|>
implements|,
name|DerivedGenerator
block|{
DECL|field|multimapGenerator
specifier|private
specifier|final
name|OneSizeTestContainerGenerator
argument_list|<
name|M
argument_list|,
name|Map
operator|.
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|multimapGenerator
decl_stmt|;
DECL|method|AsMapGenerator ( OneSizeTestContainerGenerator<M, Entry<K, V>> multimapGenerator)
specifier|public
name|AsMapGenerator
parameter_list|(
name|OneSizeTestContainerGenerator
argument_list|<
name|M
argument_list|,
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|multimapGenerator
parameter_list|)
block|{
name|this
operator|.
name|multimapGenerator
operator|=
name|multimapGenerator
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getInnerGenerator ()
specifier|public
name|TestSubjectGenerator
argument_list|<
name|?
argument_list|>
name|getInnerGenerator
parameter_list|()
block|{
return|return
name|multimapGenerator
return|;
block|}
DECL|method|createCollection (V v)
specifier|private
name|Collection
argument_list|<
name|V
argument_list|>
name|createCollection
parameter_list|(
name|V
name|v
parameter_list|)
block|{
return|return
operator|(
operator|(
name|TestMultimapGenerator
argument_list|<
name|K
argument_list|,
name|V
argument_list|,
name|M
argument_list|>
operator|)
name|multimapGenerator
operator|.
name|getInnerGenerator
argument_list|()
operator|)
operator|.
name|createCollection
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|v
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|samples ()
specifier|public
name|SampleElements
argument_list|<
name|Entry
argument_list|<
name|K
argument_list|,
name|Collection
argument_list|<
name|V
argument_list|>
argument_list|>
argument_list|>
name|samples
parameter_list|()
block|{
name|SampleElements
argument_list|<
name|K
argument_list|>
name|sampleKeys
init|=
operator|(
operator|(
name|TestMultimapGenerator
argument_list|<
name|K
argument_list|,
name|V
argument_list|,
name|M
argument_list|>
operator|)
name|multimapGenerator
operator|.
name|getInnerGenerator
argument_list|()
operator|)
operator|.
name|sampleKeys
argument_list|()
decl_stmt|;
name|SampleElements
argument_list|<
name|V
argument_list|>
name|sampleValues
init|=
operator|(
operator|(
name|TestMultimapGenerator
argument_list|<
name|K
argument_list|,
name|V
argument_list|,
name|M
argument_list|>
operator|)
name|multimapGenerator
operator|.
name|getInnerGenerator
argument_list|()
operator|)
operator|.
name|sampleValues
argument_list|()
decl_stmt|;
return|return
operator|new
name|SampleElements
argument_list|<
name|Entry
argument_list|<
name|K
argument_list|,
name|Collection
argument_list|<
name|V
argument_list|>
argument_list|>
argument_list|>
argument_list|(
name|mapEntry
argument_list|(
name|sampleKeys
operator|.
name|e0
argument_list|,
name|createCollection
argument_list|(
name|sampleValues
operator|.
name|e0
argument_list|)
argument_list|)
argument_list|,
name|mapEntry
argument_list|(
name|sampleKeys
operator|.
name|e1
argument_list|,
name|createCollection
argument_list|(
name|sampleValues
operator|.
name|e1
argument_list|)
argument_list|)
argument_list|,
name|mapEntry
argument_list|(
name|sampleKeys
operator|.
name|e2
argument_list|,
name|createCollection
argument_list|(
name|sampleValues
operator|.
name|e2
argument_list|)
argument_list|)
argument_list|,
name|mapEntry
argument_list|(
name|sampleKeys
operator|.
name|e3
argument_list|,
name|createCollection
argument_list|(
name|sampleValues
operator|.
name|e3
argument_list|)
argument_list|)
argument_list|,
name|mapEntry
argument_list|(
name|sampleKeys
operator|.
name|e4
argument_list|,
name|createCollection
argument_list|(
name|sampleValues
operator|.
name|e4
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|create (Object... elements)
specifier|public
name|Map
argument_list|<
name|K
argument_list|,
name|Collection
argument_list|<
name|V
argument_list|>
argument_list|>
name|create
parameter_list|(
name|Object
modifier|...
name|elements
parameter_list|)
block|{
name|Set
argument_list|<
name|K
argument_list|>
name|keySet
init|=
operator|new
name|HashSet
argument_list|<
name|K
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|builder
init|=
operator|new
name|ArrayList
argument_list|<
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
name|o
range|:
name|elements
control|)
block|{
name|Map
operator|.
name|Entry
argument_list|<
name|K
argument_list|,
name|Collection
argument_list|<
name|V
argument_list|>
argument_list|>
name|entry
init|=
operator|(
name|Entry
argument_list|<
name|K
argument_list|,
name|Collection
argument_list|<
name|V
argument_list|>
argument_list|>
operator|)
name|o
decl_stmt|;
name|keySet
operator|.
name|add
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|V
name|v
range|:
name|entry
operator|.
name|getValue
argument_list|()
control|)
block|{
name|builder
operator|.
name|add
argument_list|(
name|mapEntry
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|v
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|checkArgument
argument_list|(
name|keySet
operator|.
name|size
argument_list|()
operator|==
name|elements
operator|.
name|length
argument_list|,
literal|"Duplicate keys"
argument_list|)
expr_stmt|;
return|return
name|multimapGenerator
operator|.
name|create
argument_list|(
name|builder
operator|.
name|toArray
argument_list|()
argument_list|)
operator|.
name|asMap
argument_list|()
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
DECL|method|createArray (int length)
specifier|public
name|Entry
argument_list|<
name|K
argument_list|,
name|Collection
argument_list|<
name|V
argument_list|>
argument_list|>
index|[]
name|createArray
parameter_list|(
name|int
name|length
parameter_list|)
block|{
return|return
operator|new
name|Entry
index|[
name|length
index|]
return|;
block|}
annotation|@
name|Override
DECL|method|order (List<Entry<K, Collection<V>>> insertionOrder)
specifier|public
name|Iterable
argument_list|<
name|Entry
argument_list|<
name|K
argument_list|,
name|Collection
argument_list|<
name|V
argument_list|>
argument_list|>
argument_list|>
name|order
parameter_list|(
name|List
argument_list|<
name|Entry
argument_list|<
name|K
argument_list|,
name|Collection
argument_list|<
name|V
argument_list|>
argument_list|>
argument_list|>
name|insertionOrder
parameter_list|)
block|{
name|Map
argument_list|<
name|K
argument_list|,
name|Collection
argument_list|<
name|V
argument_list|>
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<
name|K
argument_list|,
name|Collection
argument_list|<
name|V
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|builder
init|=
operator|new
name|ArrayList
argument_list|<
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|K
argument_list|,
name|Collection
argument_list|<
name|V
argument_list|>
argument_list|>
name|entry
range|:
name|insertionOrder
control|)
block|{
for|for
control|(
name|V
name|v
range|:
name|entry
operator|.
name|getValue
argument_list|()
control|)
block|{
name|builder
operator|.
name|add
argument_list|(
name|mapEntry
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|v
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|map
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Iterable
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|ordered
init|=
name|multimapGenerator
operator|.
name|order
argument_list|(
name|builder
argument_list|)
decl_stmt|;
name|LinkedHashMap
argument_list|<
name|K
argument_list|,
name|Collection
argument_list|<
name|V
argument_list|>
argument_list|>
name|orderedMap
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|K
argument_list|,
name|Collection
argument_list|<
name|V
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|entry
range|:
name|ordered
control|)
block|{
name|orderedMap
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|map
operator|.
name|get
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|orderedMap
operator|.
name|entrySet
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|createKeyArray (int length)
specifier|public
name|K
index|[]
name|createKeyArray
parameter_list|(
name|int
name|length
parameter_list|)
block|{
return|return
operator|(
operator|(
name|TestMultimapGenerator
argument_list|<
name|K
argument_list|,
name|V
argument_list|,
name|M
argument_list|>
operator|)
name|multimapGenerator
operator|.
name|getInnerGenerator
argument_list|()
operator|)
operator|.
name|createKeyArray
argument_list|(
name|length
argument_list|)
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
DECL|method|createValueArray (int length)
specifier|public
name|Collection
argument_list|<
name|V
argument_list|>
index|[]
name|createValueArray
parameter_list|(
name|int
name|length
parameter_list|)
block|{
return|return
operator|new
name|Collection
index|[
name|length
index|]
return|;
block|}
block|}
DECL|class|EntriesGenerator
specifier|static
class|class
name|EntriesGenerator
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|,
name|M
extends|extends
name|Multimap
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
parameter_list|>
implements|implements
name|TestCollectionGenerator
argument_list|<
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
implements|,
name|DerivedGenerator
block|{
DECL|field|multimapGenerator
specifier|private
specifier|final
name|OneSizeTestContainerGenerator
argument_list|<
name|M
argument_list|,
name|Map
operator|.
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|multimapGenerator
decl_stmt|;
DECL|method|EntriesGenerator ( OneSizeTestContainerGenerator<M, Entry<K, V>> multimapGenerator)
specifier|public
name|EntriesGenerator
parameter_list|(
name|OneSizeTestContainerGenerator
argument_list|<
name|M
argument_list|,
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|multimapGenerator
parameter_list|)
block|{
name|this
operator|.
name|multimapGenerator
operator|=
name|multimapGenerator
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getInnerGenerator ()
specifier|public
name|TestSubjectGenerator
argument_list|<
name|?
argument_list|>
name|getInnerGenerator
parameter_list|()
block|{
return|return
name|multimapGenerator
return|;
block|}
annotation|@
name|Override
DECL|method|samples ()
specifier|public
name|SampleElements
argument_list|<
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|samples
parameter_list|()
block|{
return|return
name|multimapGenerator
operator|.
name|samples
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|create (Object... elements)
specifier|public
name|Collection
argument_list|<
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|create
parameter_list|(
name|Object
modifier|...
name|elements
parameter_list|)
block|{
return|return
name|multimapGenerator
operator|.
name|create
argument_list|(
name|elements
argument_list|)
operator|.
name|entries
argument_list|()
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
DECL|method|createArray (int length)
specifier|public
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
index|[]
name|createArray
parameter_list|(
name|int
name|length
parameter_list|)
block|{
return|return
operator|new
name|Entry
index|[
name|length
index|]
return|;
block|}
annotation|@
name|Override
DECL|method|order (List<Entry<K, V>> insertionOrder)
specifier|public
name|Iterable
argument_list|<
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|order
parameter_list|(
name|List
argument_list|<
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|insertionOrder
parameter_list|)
block|{
return|return
name|multimapGenerator
operator|.
name|order
argument_list|(
name|insertionOrder
argument_list|)
return|;
block|}
block|}
DECL|class|ValuesGenerator
specifier|static
class|class
name|ValuesGenerator
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|,
name|M
extends|extends
name|Multimap
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
parameter_list|>
implements|implements
name|TestCollectionGenerator
argument_list|<
name|V
argument_list|>
block|{
DECL|field|multimapGenerator
specifier|private
specifier|final
name|OneSizeTestContainerGenerator
argument_list|<
name|M
argument_list|,
name|Map
operator|.
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|multimapGenerator
decl_stmt|;
DECL|method|ValuesGenerator ( OneSizeTestContainerGenerator<M, Entry<K, V>> multimapGenerator)
specifier|public
name|ValuesGenerator
parameter_list|(
name|OneSizeTestContainerGenerator
argument_list|<
name|M
argument_list|,
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|multimapGenerator
parameter_list|)
block|{
name|this
operator|.
name|multimapGenerator
operator|=
name|multimapGenerator
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|samples ()
specifier|public
name|SampleElements
argument_list|<
name|V
argument_list|>
name|samples
parameter_list|()
block|{
return|return
operator|(
operator|(
name|TestMultimapGenerator
argument_list|<
name|K
argument_list|,
name|V
argument_list|,
name|M
argument_list|>
operator|)
name|multimapGenerator
operator|.
name|getInnerGenerator
argument_list|()
operator|)
operator|.
name|sampleValues
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|create (Object... elements)
specifier|public
name|Collection
argument_list|<
name|V
argument_list|>
name|create
parameter_list|(
name|Object
modifier|...
name|elements
parameter_list|)
block|{
name|K
name|k
init|=
operator|(
operator|(
name|TestMultimapGenerator
argument_list|<
name|K
argument_list|,
name|V
argument_list|,
name|M
argument_list|>
operator|)
name|multimapGenerator
operator|.
name|getInnerGenerator
argument_list|()
operator|)
operator|.
name|sampleKeys
argument_list|()
operator|.
name|e0
decl_stmt|;
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
index|[]
name|entries
init|=
operator|new
name|Entry
index|[
name|elements
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|elements
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|entries
index|[
name|i
index|]
operator|=
name|mapEntry
argument_list|(
name|k
argument_list|,
operator|(
name|V
operator|)
name|elements
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|multimapGenerator
operator|.
name|create
argument_list|(
name|entries
argument_list|)
operator|.
name|values
argument_list|()
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
DECL|method|createArray (int length)
specifier|public
name|V
index|[]
name|createArray
parameter_list|(
name|int
name|length
parameter_list|)
block|{
return|return
operator|(
operator|(
name|TestMultimapGenerator
argument_list|<
name|K
argument_list|,
name|V
argument_list|,
name|M
argument_list|>
operator|)
name|multimapGenerator
operator|.
name|getInnerGenerator
argument_list|()
operator|)
operator|.
name|createValueArray
argument_list|(
name|length
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|order (List<V> insertionOrder)
specifier|public
name|Iterable
argument_list|<
name|V
argument_list|>
name|order
parameter_list|(
name|List
argument_list|<
name|V
argument_list|>
name|insertionOrder
parameter_list|)
block|{
name|K
name|k
init|=
operator|(
operator|(
name|TestMultimapGenerator
argument_list|<
name|K
argument_list|,
name|V
argument_list|,
name|M
argument_list|>
operator|)
name|multimapGenerator
operator|.
name|getInnerGenerator
argument_list|()
operator|)
operator|.
name|sampleKeys
argument_list|()
operator|.
name|e0
decl_stmt|;
name|List
argument_list|<
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|entries
init|=
operator|new
name|ArrayList
argument_list|<
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|V
name|v
range|:
name|insertionOrder
control|)
block|{
name|entries
operator|.
name|add
argument_list|(
name|mapEntry
argument_list|(
name|k
argument_list|,
name|v
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Iterable
argument_list|<
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|ordered
init|=
name|multimapGenerator
operator|.
name|order
argument_list|(
name|entries
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|V
argument_list|>
name|orderedValues
init|=
operator|new
name|ArrayList
argument_list|<
name|V
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|entry
range|:
name|ordered
control|)
block|{
name|orderedValues
operator|.
name|add
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|orderedValues
return|;
block|}
block|}
DECL|class|KeysGenerator
specifier|static
class|class
name|KeysGenerator
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|,
name|M
extends|extends
name|Multimap
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
parameter_list|>
implements|implements
name|TestMultisetGenerator
argument_list|<
name|K
argument_list|>
implements|,
name|DerivedGenerator
block|{
DECL|field|multimapGenerator
specifier|private
specifier|final
name|OneSizeTestContainerGenerator
argument_list|<
name|M
argument_list|,
name|Map
operator|.
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|multimapGenerator
decl_stmt|;
DECL|method|KeysGenerator ( OneSizeTestContainerGenerator<M, Entry<K, V>> multimapGenerator)
specifier|public
name|KeysGenerator
parameter_list|(
name|OneSizeTestContainerGenerator
argument_list|<
name|M
argument_list|,
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|multimapGenerator
parameter_list|)
block|{
name|this
operator|.
name|multimapGenerator
operator|=
name|multimapGenerator
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getInnerGenerator ()
specifier|public
name|TestSubjectGenerator
argument_list|<
name|?
argument_list|>
name|getInnerGenerator
parameter_list|()
block|{
return|return
name|multimapGenerator
return|;
block|}
annotation|@
name|Override
DECL|method|samples ()
specifier|public
name|SampleElements
argument_list|<
name|K
argument_list|>
name|samples
parameter_list|()
block|{
return|return
operator|(
operator|(
name|TestMultimapGenerator
argument_list|<
name|K
argument_list|,
name|V
argument_list|,
name|M
argument_list|>
operator|)
name|multimapGenerator
operator|.
name|getInnerGenerator
argument_list|()
operator|)
operator|.
name|sampleKeys
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|create (Object... elements)
specifier|public
name|Multiset
argument_list|<
name|K
argument_list|>
name|create
parameter_list|(
name|Object
modifier|...
name|elements
parameter_list|)
block|{
comment|/*        * This is nasty and complicated, but it's the only way to make sure keys get mapped to enough        * distinct values.        */
name|Map
operator|.
name|Entry
index|[]
name|entries
init|=
operator|new
name|Map
operator|.
name|Entry
index|[
name|elements
operator|.
name|length
index|]
decl_stmt|;
name|Map
argument_list|<
name|K
argument_list|,
name|Iterator
argument_list|<
name|V
argument_list|>
argument_list|>
name|valueIterators
init|=
operator|new
name|HashMap
argument_list|<
name|K
argument_list|,
name|Iterator
argument_list|<
name|V
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|elements
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|K
name|key
init|=
operator|(
name|K
operator|)
name|elements
index|[
name|i
index|]
decl_stmt|;
name|Iterator
argument_list|<
name|V
argument_list|>
name|valueItr
init|=
name|valueIterators
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|valueItr
operator|==
literal|null
condition|)
block|{
name|valueIterators
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|valueItr
operator|=
name|sampleValuesIterator
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|entries
index|[
name|i
index|]
operator|=
name|mapEntry
argument_list|(
operator|(
name|K
operator|)
name|elements
index|[
name|i
index|]
argument_list|,
name|valueItr
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|multimapGenerator
operator|.
name|create
argument_list|(
name|entries
argument_list|)
operator|.
name|keys
argument_list|()
return|;
block|}
DECL|method|sampleValuesIterator ()
specifier|private
name|Iterator
argument_list|<
name|V
argument_list|>
name|sampleValuesIterator
parameter_list|()
block|{
return|return
operator|(
operator|(
name|TestMultimapGenerator
argument_list|<
name|K
argument_list|,
name|V
argument_list|,
name|M
argument_list|>
operator|)
name|multimapGenerator
operator|.
name|getInnerGenerator
argument_list|()
operator|)
operator|.
name|sampleValues
argument_list|()
operator|.
name|iterator
argument_list|()
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
DECL|method|createArray (int length)
specifier|public
name|K
index|[]
name|createArray
parameter_list|(
name|int
name|length
parameter_list|)
block|{
return|return
operator|(
operator|(
name|TestMultimapGenerator
argument_list|<
name|K
argument_list|,
name|V
argument_list|,
name|M
argument_list|>
operator|)
name|multimapGenerator
operator|.
name|getInnerGenerator
argument_list|()
operator|)
operator|.
name|createKeyArray
argument_list|(
name|length
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|order (List<K> insertionOrder)
specifier|public
name|Iterable
argument_list|<
name|K
argument_list|>
name|order
parameter_list|(
name|List
argument_list|<
name|K
argument_list|>
name|insertionOrder
parameter_list|)
block|{
name|Iterator
argument_list|<
name|V
argument_list|>
name|valueIter
init|=
name|sampleValuesIterator
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|entries
init|=
operator|new
name|ArrayList
argument_list|<
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|K
name|k
range|:
name|insertionOrder
control|)
block|{
name|entries
operator|.
name|add
argument_list|(
name|mapEntry
argument_list|(
name|k
argument_list|,
name|valueIter
operator|.
name|next
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Iterable
argument_list|<
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|ordered
init|=
name|multimapGenerator
operator|.
name|order
argument_list|(
name|entries
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|K
argument_list|>
name|orderedValues
init|=
operator|new
name|ArrayList
argument_list|<
name|K
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|entry
range|:
name|ordered
control|)
block|{
name|orderedValues
operator|.
name|add
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|orderedValues
return|;
block|}
block|}
DECL|class|MultimapGetGenerator
specifier|static
class|class
name|MultimapGetGenerator
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|,
name|M
extends|extends
name|Multimap
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
parameter_list|>
implements|implements
name|TestCollectionGenerator
argument_list|<
name|V
argument_list|>
block|{
DECL|field|multimapGenerator
specifier|private
specifier|final
name|OneSizeTestContainerGenerator
argument_list|<
name|M
argument_list|,
name|Map
operator|.
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|multimapGenerator
decl_stmt|;
DECL|method|MultimapGetGenerator ( OneSizeTestContainerGenerator< M, Map.Entry<K, V>> multimapGenerator)
specifier|public
name|MultimapGetGenerator
parameter_list|(
name|OneSizeTestContainerGenerator
argument_list|<
name|M
argument_list|,
name|Map
operator|.
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|multimapGenerator
parameter_list|)
block|{
name|this
operator|.
name|multimapGenerator
operator|=
name|multimapGenerator
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|samples ()
specifier|public
name|SampleElements
argument_list|<
name|V
argument_list|>
name|samples
parameter_list|()
block|{
return|return
operator|(
operator|(
name|TestMultimapGenerator
argument_list|<
name|K
argument_list|,
name|V
argument_list|,
name|M
argument_list|>
operator|)
name|multimapGenerator
operator|.
name|getInnerGenerator
argument_list|()
operator|)
operator|.
name|sampleValues
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|createArray (int length)
specifier|public
name|V
index|[]
name|createArray
parameter_list|(
name|int
name|length
parameter_list|)
block|{
return|return
operator|(
operator|(
name|TestMultimapGenerator
argument_list|<
name|K
argument_list|,
name|V
argument_list|,
name|M
argument_list|>
operator|)
name|multimapGenerator
operator|.
name|getInnerGenerator
argument_list|()
operator|)
operator|.
name|createValueArray
argument_list|(
name|length
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|order (List<V> insertionOrder)
specifier|public
name|Iterable
argument_list|<
name|V
argument_list|>
name|order
parameter_list|(
name|List
argument_list|<
name|V
argument_list|>
name|insertionOrder
parameter_list|)
block|{
name|K
name|k
init|=
operator|(
operator|(
name|TestMultimapGenerator
argument_list|<
name|K
argument_list|,
name|V
argument_list|,
name|M
argument_list|>
operator|)
name|multimapGenerator
operator|.
name|getInnerGenerator
argument_list|()
operator|)
operator|.
name|sampleKeys
argument_list|()
operator|.
name|e0
decl_stmt|;
name|List
argument_list|<
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|entries
init|=
operator|new
name|ArrayList
argument_list|<
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|V
name|v
range|:
name|insertionOrder
control|)
block|{
name|entries
operator|.
name|add
argument_list|(
name|mapEntry
argument_list|(
name|k
argument_list|,
name|v
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Iterable
argument_list|<
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|orderedEntries
init|=
name|multimapGenerator
operator|.
name|order
argument_list|(
name|entries
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|V
argument_list|>
name|values
init|=
operator|new
name|ArrayList
argument_list|<
name|V
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|entry
range|:
name|orderedEntries
control|)
block|{
name|values
operator|.
name|add
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|values
return|;
block|}
annotation|@
name|Override
DECL|method|create (Object... elements)
specifier|public
name|Collection
argument_list|<
name|V
argument_list|>
name|create
parameter_list|(
name|Object
modifier|...
name|elements
parameter_list|)
block|{
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
index|[]
name|array
init|=
name|multimapGenerator
operator|.
name|createArray
argument_list|(
name|elements
operator|.
name|length
argument_list|)
decl_stmt|;
name|K
name|k
init|=
operator|(
operator|(
name|TestMultimapGenerator
argument_list|<
name|K
argument_list|,
name|V
argument_list|,
name|M
argument_list|>
operator|)
name|multimapGenerator
operator|.
name|getInnerGenerator
argument_list|()
operator|)
operator|.
name|sampleKeys
argument_list|()
operator|.
name|e0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|elements
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|array
index|[
name|i
index|]
operator|=
name|mapEntry
argument_list|(
name|k
argument_list|,
operator|(
name|V
operator|)
name|elements
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|multimapGenerator
operator|.
name|create
argument_list|(
name|array
argument_list|)
operator|.
name|get
argument_list|(
name|k
argument_list|)
return|;
block|}
block|}
DECL|class|ReserializedMultimapGenerator
specifier|private
specifier|static
class|class
name|ReserializedMultimapGenerator
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|,
name|M
extends|extends
name|Multimap
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
parameter_list|>
implements|implements
name|TestMultimapGenerator
argument_list|<
name|K
argument_list|,
name|V
argument_list|,
name|M
argument_list|>
block|{
DECL|field|multimapGenerator
specifier|private
specifier|final
name|OneSizeTestContainerGenerator
argument_list|<
name|M
argument_list|,
name|Map
operator|.
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|multimapGenerator
decl_stmt|;
DECL|method|ReserializedMultimapGenerator ( OneSizeTestContainerGenerator< M, Map.Entry<K, V>> multimapGenerator)
specifier|public
name|ReserializedMultimapGenerator
parameter_list|(
name|OneSizeTestContainerGenerator
argument_list|<
name|M
argument_list|,
name|Map
operator|.
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|multimapGenerator
parameter_list|)
block|{
name|this
operator|.
name|multimapGenerator
operator|=
name|multimapGenerator
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|samples ()
specifier|public
name|SampleElements
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|samples
parameter_list|()
block|{
return|return
name|multimapGenerator
operator|.
name|samples
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|createArray (int length)
specifier|public
name|Map
operator|.
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
index|[]
name|createArray
parameter_list|(
name|int
name|length
parameter_list|)
block|{
return|return
name|multimapGenerator
operator|.
name|createArray
argument_list|(
name|length
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|order ( List<Map.Entry<K, V>> insertionOrder)
specifier|public
name|Iterable
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|order
parameter_list|(
name|List
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|insertionOrder
parameter_list|)
block|{
return|return
name|multimapGenerator
operator|.
name|order
argument_list|(
name|insertionOrder
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|create (Object... elements)
specifier|public
name|M
name|create
parameter_list|(
name|Object
modifier|...
name|elements
parameter_list|)
block|{
return|return
name|SerializableTester
operator|.
name|reserialize
argument_list|(
operator|(
operator|(
name|TestMultimapGenerator
argument_list|<
name|K
argument_list|,
name|V
argument_list|,
name|M
argument_list|>
operator|)
name|multimapGenerator
operator|.
name|getInnerGenerator
argument_list|()
operator|)
operator|.
name|create
argument_list|(
name|elements
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|createKeyArray (int length)
specifier|public
name|K
index|[]
name|createKeyArray
parameter_list|(
name|int
name|length
parameter_list|)
block|{
return|return
operator|(
operator|(
name|TestMultimapGenerator
argument_list|<
name|K
argument_list|,
name|V
argument_list|,
name|M
argument_list|>
operator|)
name|multimapGenerator
operator|.
name|getInnerGenerator
argument_list|()
operator|)
operator|.
name|createKeyArray
argument_list|(
name|length
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|createValueArray (int length)
specifier|public
name|V
index|[]
name|createValueArray
parameter_list|(
name|int
name|length
parameter_list|)
block|{
return|return
operator|(
operator|(
name|TestMultimapGenerator
argument_list|<
name|K
argument_list|,
name|V
argument_list|,
name|M
argument_list|>
operator|)
name|multimapGenerator
operator|.
name|getInnerGenerator
argument_list|()
operator|)
operator|.
name|createValueArray
argument_list|(
name|length
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|sampleKeys ()
specifier|public
name|SampleElements
argument_list|<
name|K
argument_list|>
name|sampleKeys
parameter_list|()
block|{
return|return
operator|(
operator|(
name|TestMultimapGenerator
argument_list|<
name|K
argument_list|,
name|V
argument_list|,
name|M
argument_list|>
operator|)
name|multimapGenerator
operator|.
name|getInnerGenerator
argument_list|()
operator|)
operator|.
name|sampleKeys
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|sampleValues ()
specifier|public
name|SampleElements
argument_list|<
name|V
argument_list|>
name|sampleValues
parameter_list|()
block|{
return|return
operator|(
operator|(
name|TestMultimapGenerator
argument_list|<
name|K
argument_list|,
name|V
argument_list|,
name|M
argument_list|>
operator|)
name|multimapGenerator
operator|.
name|getInnerGenerator
argument_list|()
operator|)
operator|.
name|sampleValues
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|createCollection (Iterable<? extends V> values)
specifier|public
name|Collection
argument_list|<
name|V
argument_list|>
name|createCollection
parameter_list|(
name|Iterable
argument_list|<
name|?
extends|extends
name|V
argument_list|>
name|values
parameter_list|)
block|{
return|return
operator|(
operator|(
name|TestMultimapGenerator
argument_list|<
name|K
argument_list|,
name|V
argument_list|,
name|M
argument_list|>
operator|)
name|multimapGenerator
operator|.
name|getInnerGenerator
argument_list|()
operator|)
operator|.
name|createCollection
argument_list|(
name|values
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

