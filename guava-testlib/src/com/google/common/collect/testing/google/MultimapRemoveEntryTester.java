begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2012 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.collect.testing.google
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|google
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|features
operator|.
name|CollectionSize
operator|.
name|ZERO
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|features
operator|.
name|MapFeature
operator|.
name|ALLOWS_NULL_KEYS
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|features
operator|.
name|MapFeature
operator|.
name|ALLOWS_NULL_QUERIES
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|features
operator|.
name|MapFeature
operator|.
name|ALLOWS_NULL_VALUES
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|features
operator|.
name|MapFeature
operator|.
name|SUPPORTS_REMOVE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|contrib
operator|.
name|truth
operator|.
name|Truth
operator|.
name|ASSERT
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtCompatible
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Multimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|Helpers
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|features
operator|.
name|CollectionSize
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|features
operator|.
name|MapFeature
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_comment
comment|/**  * Tests for {@link Multimap#remove(Object, Object)}.  *  * @author Louis Wasserman  */
end_comment

begin_class
annotation|@
name|GwtCompatible
DECL|class|MultimapRemoveEntryTester
specifier|public
class|class
name|MultimapRemoveEntryTester
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
extends|extends
name|AbstractMultimapTester
argument_list|<
name|K
argument_list|,
name|V
argument_list|,
name|Multimap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
block|{
DECL|field|EMPTY
specifier|private
specifier|static
specifier|final
name|Object
index|[]
name|EMPTY
init|=
operator|new
name|Object
index|[
literal|0
index|]
decl_stmt|;
annotation|@
name|MapFeature
operator|.
name|Require
argument_list|(
name|SUPPORTS_REMOVE
argument_list|)
DECL|method|testRemoveAbsent ()
specifier|public
name|void
name|testRemoveAbsent
parameter_list|()
block|{
name|assertFalse
argument_list|(
name|multimap
argument_list|()
operator|.
name|remove
argument_list|(
name|sampleKeys
argument_list|()
operator|.
name|e0
argument_list|,
name|sampleValues
argument_list|()
operator|.
name|e1
argument_list|)
argument_list|)
expr_stmt|;
name|expectUnchanged
argument_list|()
expr_stmt|;
block|}
annotation|@
name|CollectionSize
operator|.
name|Require
argument_list|(
name|absent
operator|=
name|ZERO
argument_list|)
annotation|@
name|MapFeature
operator|.
name|Require
argument_list|(
name|SUPPORTS_REMOVE
argument_list|)
DECL|method|testRemovePresent ()
specifier|public
name|void
name|testRemovePresent
parameter_list|()
block|{
name|assertTrue
argument_list|(
name|multimap
argument_list|()
operator|.
name|remove
argument_list|(
name|sampleKeys
argument_list|()
operator|.
name|e0
argument_list|,
name|sampleValues
argument_list|()
operator|.
name|e0
argument_list|)
argument_list|)
expr_stmt|;
name|expectMissing
argument_list|(
name|samples
operator|.
name|e0
argument_list|)
expr_stmt|;
name|assertGet
argument_list|(
name|sampleKeys
argument_list|()
operator|.
name|e0
argument_list|,
name|EMPTY
argument_list|)
expr_stmt|;
block|}
annotation|@
name|CollectionSize
operator|.
name|Require
argument_list|(
name|absent
operator|=
name|ZERO
argument_list|)
annotation|@
name|MapFeature
operator|.
name|Require
argument_list|(
block|{
name|SUPPORTS_REMOVE
block|,
name|ALLOWS_NULL_KEYS
block|}
argument_list|)
DECL|method|testRemoveNullKeyPresent ()
specifier|public
name|void
name|testRemoveNullKeyPresent
parameter_list|()
block|{
name|initMultimapWithNullKey
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|multimap
argument_list|()
operator|.
name|remove
argument_list|(
literal|null
argument_list|,
name|getValueForNullKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|expectMissing
argument_list|(
name|Helpers
operator|.
name|mapEntry
argument_list|(
operator|(
name|K
operator|)
literal|null
argument_list|,
name|getValueForNullKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertGet
argument_list|(
name|getKeyForNullValue
argument_list|()
argument_list|,
name|EMPTY
argument_list|)
expr_stmt|;
block|}
annotation|@
name|CollectionSize
operator|.
name|Require
argument_list|(
name|absent
operator|=
name|ZERO
argument_list|)
annotation|@
name|MapFeature
operator|.
name|Require
argument_list|(
block|{
name|SUPPORTS_REMOVE
block|,
name|ALLOWS_NULL_VALUES
block|}
argument_list|)
DECL|method|testRemoveNullValuePresent ()
specifier|public
name|void
name|testRemoveNullValuePresent
parameter_list|()
block|{
name|initMultimapWithNullValue
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|multimap
argument_list|()
operator|.
name|remove
argument_list|(
name|getKeyForNullValue
argument_list|()
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|expectMissing
argument_list|(
name|Helpers
operator|.
name|mapEntry
argument_list|(
name|getKeyForNullValue
argument_list|()
argument_list|,
operator|(
name|V
operator|)
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertGet
argument_list|(
name|getKeyForNullValue
argument_list|()
argument_list|,
name|EMPTY
argument_list|)
expr_stmt|;
block|}
annotation|@
name|MapFeature
operator|.
name|Require
argument_list|(
block|{
name|SUPPORTS_REMOVE
block|,
name|ALLOWS_NULL_QUERIES
block|}
argument_list|)
DECL|method|testRemoveNullKeyAbsent ()
specifier|public
name|void
name|testRemoveNullKeyAbsent
parameter_list|()
block|{
name|assertFalse
argument_list|(
name|multimap
argument_list|()
operator|.
name|remove
argument_list|(
literal|null
argument_list|,
name|sampleValues
argument_list|()
operator|.
name|e0
argument_list|)
argument_list|)
expr_stmt|;
name|expectUnchanged
argument_list|()
expr_stmt|;
block|}
annotation|@
name|MapFeature
operator|.
name|Require
argument_list|(
block|{
name|SUPPORTS_REMOVE
block|,
name|ALLOWS_NULL_QUERIES
block|}
argument_list|)
DECL|method|testRemoveNullValueAbsent ()
specifier|public
name|void
name|testRemoveNullValueAbsent
parameter_list|()
block|{
name|assertFalse
argument_list|(
name|multimap
argument_list|()
operator|.
name|remove
argument_list|(
name|sampleKeys
argument_list|()
operator|.
name|e0
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|expectUnchanged
argument_list|()
expr_stmt|;
block|}
annotation|@
name|MapFeature
operator|.
name|Require
argument_list|(
name|value
operator|=
name|SUPPORTS_REMOVE
argument_list|,
name|absent
operator|=
name|ALLOWS_NULL_QUERIES
argument_list|)
DECL|method|testRemoveNullValueForbidden ()
specifier|public
name|void
name|testRemoveNullValueForbidden
parameter_list|()
block|{
try|try
block|{
name|multimap
argument_list|()
operator|.
name|remove
argument_list|(
name|sampleKeys
argument_list|()
operator|.
name|e0
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected NullPointerException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|expected
parameter_list|)
block|{
comment|// success
block|}
name|expectUnchanged
argument_list|()
expr_stmt|;
block|}
annotation|@
name|MapFeature
operator|.
name|Require
argument_list|(
name|value
operator|=
name|SUPPORTS_REMOVE
argument_list|,
name|absent
operator|=
name|ALLOWS_NULL_QUERIES
argument_list|)
DECL|method|testRemoveNullKeyForbidden ()
specifier|public
name|void
name|testRemoveNullKeyForbidden
parameter_list|()
block|{
try|try
block|{
name|multimap
argument_list|()
operator|.
name|remove
argument_list|(
literal|null
argument_list|,
name|sampleValues
argument_list|()
operator|.
name|e0
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected NullPointerException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|expected
parameter_list|)
block|{
comment|// success
block|}
name|expectUnchanged
argument_list|()
expr_stmt|;
block|}
annotation|@
name|MapFeature
operator|.
name|Require
argument_list|(
name|SUPPORTS_REMOVE
argument_list|)
annotation|@
name|CollectionSize
operator|.
name|Require
argument_list|(
name|absent
operator|=
name|ZERO
argument_list|)
DECL|method|testRemovePropagatesToGet ()
specifier|public
name|void
name|testRemovePropagatesToGet
parameter_list|()
block|{
name|List
argument_list|<
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|entries
init|=
name|Helpers
operator|.
name|copyToList
argument_list|(
name|multimap
argument_list|()
operator|.
name|entries
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|entry
range|:
name|entries
control|)
block|{
name|resetContainer
argument_list|()
expr_stmt|;
name|K
name|key
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|V
name|value
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|Collection
argument_list|<
name|V
argument_list|>
name|collection
init|=
name|multimap
argument_list|()
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|collection
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|V
argument_list|>
name|expectedCollection
init|=
name|Helpers
operator|.
name|copyToList
argument_list|(
name|collection
argument_list|)
decl_stmt|;
name|multimap
argument_list|()
operator|.
name|remove
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|expectedCollection
operator|.
name|remove
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|ASSERT
operator|.
name|that
argument_list|(
name|collection
argument_list|)
operator|.
name|hasContentsAnyOrder
argument_list|(
name|expectedCollection
operator|.
name|toArray
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|!
name|expectedCollection
operator|.
name|isEmpty
argument_list|()
argument_list|,
name|multimap
argument_list|()
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|MapFeature
operator|.
name|Require
argument_list|(
name|SUPPORTS_REMOVE
argument_list|)
annotation|@
name|CollectionSize
operator|.
name|Require
argument_list|(
name|absent
operator|=
name|ZERO
argument_list|)
DECL|method|testRemovePropagatesToAsMap ()
specifier|public
name|void
name|testRemovePropagatesToAsMap
parameter_list|()
block|{
name|List
argument_list|<
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|entries
init|=
name|Helpers
operator|.
name|copyToList
argument_list|(
name|multimap
argument_list|()
operator|.
name|entries
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|entry
range|:
name|entries
control|)
block|{
name|resetContainer
argument_list|()
expr_stmt|;
name|K
name|key
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|V
name|value
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|Collection
argument_list|<
name|V
argument_list|>
name|collection
init|=
name|multimap
argument_list|()
operator|.
name|asMap
argument_list|()
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|collection
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|V
argument_list|>
name|expectedCollection
init|=
name|Helpers
operator|.
name|copyToList
argument_list|(
name|collection
argument_list|)
decl_stmt|;
name|multimap
argument_list|()
operator|.
name|remove
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|expectedCollection
operator|.
name|remove
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|ASSERT
operator|.
name|that
argument_list|(
name|collection
argument_list|)
operator|.
name|hasContentsAnyOrder
argument_list|(
name|expectedCollection
operator|.
name|toArray
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|!
name|expectedCollection
operator|.
name|isEmpty
argument_list|()
argument_list|,
name|multimap
argument_list|()
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|MapFeature
operator|.
name|Require
argument_list|(
name|SUPPORTS_REMOVE
argument_list|)
annotation|@
name|CollectionSize
operator|.
name|Require
argument_list|(
name|absent
operator|=
name|ZERO
argument_list|)
DECL|method|testRemovePropagatesToAsMapEntrySet ()
specifier|public
name|void
name|testRemovePropagatesToAsMapEntrySet
parameter_list|()
block|{
name|List
argument_list|<
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|entries
init|=
name|Helpers
operator|.
name|copyToList
argument_list|(
name|multimap
argument_list|()
operator|.
name|entries
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|entry
range|:
name|entries
control|)
block|{
name|resetContainer
argument_list|()
expr_stmt|;
name|K
name|key
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|V
name|value
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|K
argument_list|,
name|Collection
argument_list|<
name|V
argument_list|>
argument_list|>
argument_list|>
name|asMapItr
init|=
name|multimap
argument_list|()
operator|.
name|asMap
argument_list|()
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|Collection
argument_list|<
name|V
argument_list|>
name|collection
init|=
literal|null
decl_stmt|;
while|while
condition|(
name|asMapItr
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Entry
argument_list|<
name|K
argument_list|,
name|Collection
argument_list|<
name|V
argument_list|>
argument_list|>
name|asMapEntry
init|=
name|asMapItr
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|key
operator|.
name|equals
argument_list|(
name|asMapEntry
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
block|{
name|collection
operator|=
name|asMapEntry
operator|.
name|getValue
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
name|assertNotNull
argument_list|(
name|collection
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|V
argument_list|>
name|expectedCollection
init|=
name|Helpers
operator|.
name|copyToList
argument_list|(
name|collection
argument_list|)
decl_stmt|;
name|multimap
argument_list|()
operator|.
name|remove
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|expectedCollection
operator|.
name|remove
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|ASSERT
operator|.
name|that
argument_list|(
name|collection
argument_list|)
operator|.
name|hasContentsAnyOrder
argument_list|(
name|expectedCollection
operator|.
name|toArray
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|!
name|expectedCollection
operator|.
name|isEmpty
argument_list|()
argument_list|,
name|multimap
argument_list|()
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

