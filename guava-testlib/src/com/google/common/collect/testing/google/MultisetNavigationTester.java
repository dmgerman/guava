begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2011 The Guava Authors  *   * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except  * in compliance with the License. You may obtain a copy of the License at  *   * http://www.apache.org/licenses/LICENSE-2.0  *   * Unless required by applicable law or agreed to in writing, software distributed under the  * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either  * express or implied. See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.collect.testing.google
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|google
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|BoundType
operator|.
name|CLOSED
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|BoundType
operator|.
name|OPEN
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|Helpers
operator|.
name|copyToList
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|features
operator|.
name|CollectionFeature
operator|.
name|SUPPORTS_ADD
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|features
operator|.
name|CollectionFeature
operator|.
name|SUPPORTS_REMOVE
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|features
operator|.
name|CollectionSize
operator|.
name|ONE
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|features
operator|.
name|CollectionSize
operator|.
name|SEVERAL
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|features
operator|.
name|CollectionSize
operator|.
name|ZERO
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtCompatible
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|BoundType
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterators
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Multiset
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Multiset
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Multisets
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|SortedMultiset
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|features
operator|.
name|CollectionFeature
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|features
operator|.
name|CollectionSize
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NoSuchElementException
import|;
end_import

begin_comment
comment|/**  * Tester for navigation of SortedMultisets.  *   * @author Louis Wasserman  */
end_comment

begin_class
annotation|@
name|GwtCompatible
DECL|class|MultisetNavigationTester
specifier|public
class|class
name|MultisetNavigationTester
parameter_list|<
name|E
parameter_list|>
extends|extends
name|AbstractMultisetTester
argument_list|<
name|E
argument_list|>
block|{
DECL|field|sortedMultiset
specifier|private
name|SortedMultiset
argument_list|<
name|E
argument_list|>
name|sortedMultiset
decl_stmt|;
DECL|field|entries
specifier|private
name|List
argument_list|<
name|E
argument_list|>
name|entries
decl_stmt|;
DECL|field|a
specifier|private
name|Entry
argument_list|<
name|E
argument_list|>
name|a
decl_stmt|;
DECL|field|b
specifier|private
name|Entry
argument_list|<
name|E
argument_list|>
name|b
decl_stmt|;
DECL|field|c
specifier|private
name|Entry
argument_list|<
name|E
argument_list|>
name|c
decl_stmt|;
comment|/**    * Used to avoid http://bugs.sun.com/view_bug.do?bug_id=6558557    */
DECL|method|cast (Multiset<T> iterable)
specifier|static
parameter_list|<
name|T
parameter_list|>
name|SortedMultiset
argument_list|<
name|T
argument_list|>
name|cast
parameter_list|(
name|Multiset
argument_list|<
name|T
argument_list|>
name|iterable
parameter_list|)
block|{
return|return
operator|(
name|SortedMultiset
argument_list|<
name|T
argument_list|>
operator|)
name|iterable
return|;
block|}
annotation|@
name|Override
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|sortedMultiset
operator|=
name|cast
argument_list|(
name|getMultiset
argument_list|()
argument_list|)
expr_stmt|;
name|entries
operator|=
name|copyToList
argument_list|(
name|getSubjectGenerator
argument_list|()
operator|.
name|getSampleElements
argument_list|(
name|getSubjectGenerator
argument_list|()
operator|.
name|getCollectionSize
argument_list|()
operator|.
name|getNumElements
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|entries
argument_list|,
name|sortedMultiset
operator|.
name|comparator
argument_list|()
argument_list|)
expr_stmt|;
comment|// some tests assume SEVERAL == 3
if|if
condition|(
name|entries
operator|.
name|size
argument_list|()
operator|>=
literal|1
condition|)
block|{
name|a
operator|=
name|Multisets
operator|.
name|immutableEntry
argument_list|(
name|entries
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|sortedMultiset
operator|.
name|count
argument_list|(
name|entries
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|entries
operator|.
name|size
argument_list|()
operator|>=
literal|3
condition|)
block|{
name|b
operator|=
name|Multisets
operator|.
name|immutableEntry
argument_list|(
name|entries
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
name|sortedMultiset
operator|.
name|count
argument_list|(
name|entries
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|c
operator|=
name|Multisets
operator|.
name|immutableEntry
argument_list|(
name|entries
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|,
name|sortedMultiset
operator|.
name|count
argument_list|(
name|entries
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Resets the contents of sortedMultiset to have entries a, c, for the navigation tests.    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// Needed to stop Eclipse whining
DECL|method|resetWithHole ()
specifier|private
name|void
name|resetWithHole
parameter_list|()
block|{
name|List
argument_list|<
name|E
argument_list|>
name|container
init|=
operator|new
name|ArrayList
argument_list|<
name|E
argument_list|>
argument_list|()
decl_stmt|;
name|container
operator|.
name|addAll
argument_list|(
name|Collections
operator|.
name|nCopies
argument_list|(
name|a
operator|.
name|getCount
argument_list|()
argument_list|,
name|a
operator|.
name|getElement
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|container
operator|.
name|addAll
argument_list|(
name|Collections
operator|.
name|nCopies
argument_list|(
name|c
operator|.
name|getCount
argument_list|()
argument_list|,
name|c
operator|.
name|getElement
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|super
operator|.
name|resetContainer
argument_list|(
name|getSubjectGenerator
argument_list|()
operator|.
name|create
argument_list|(
name|container
operator|.
name|toArray
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|sortedMultiset
operator|=
operator|(
name|SortedMultiset
argument_list|<
name|E
argument_list|>
operator|)
name|getMultiset
argument_list|()
expr_stmt|;
block|}
annotation|@
name|CollectionSize
operator|.
name|Require
argument_list|(
name|ZERO
argument_list|)
DECL|method|testEmptyMultisetFirst ()
specifier|public
name|void
name|testEmptyMultisetFirst
parameter_list|()
block|{
name|assertNull
argument_list|(
name|sortedMultiset
operator|.
name|firstEntry
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|sortedMultiset
operator|.
name|elementSet
argument_list|()
operator|.
name|first
argument_list|()
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchElementException
name|e
parameter_list|)
block|{}
block|}
annotation|@
name|CollectionFeature
operator|.
name|Require
argument_list|(
name|SUPPORTS_REMOVE
argument_list|)
annotation|@
name|CollectionSize
operator|.
name|Require
argument_list|(
name|ZERO
argument_list|)
DECL|method|testEmptyMultisetPollFirst ()
specifier|public
name|void
name|testEmptyMultisetPollFirst
parameter_list|()
block|{
name|assertNull
argument_list|(
name|sortedMultiset
operator|.
name|pollFirstEntry
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|CollectionSize
operator|.
name|Require
argument_list|(
name|ZERO
argument_list|)
DECL|method|testEmptyMultisetNearby ()
specifier|public
name|void
name|testEmptyMultisetNearby
parameter_list|()
block|{
for|for
control|(
name|BoundType
name|type
range|:
name|BoundType
operator|.
name|values
argument_list|()
control|)
block|{
name|assertNull
argument_list|(
name|sortedMultiset
operator|.
name|headMultiset
argument_list|(
name|samples
operator|.
name|e0
argument_list|()
argument_list|,
name|type
argument_list|)
operator|.
name|lastEntry
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|sortedMultiset
operator|.
name|tailMultiset
argument_list|(
name|samples
operator|.
name|e0
argument_list|()
argument_list|,
name|type
argument_list|)
operator|.
name|firstEntry
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|CollectionSize
operator|.
name|Require
argument_list|(
name|ZERO
argument_list|)
DECL|method|testEmptyMultisetLast ()
specifier|public
name|void
name|testEmptyMultisetLast
parameter_list|()
block|{
name|assertNull
argument_list|(
name|sortedMultiset
operator|.
name|lastEntry
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|assertNull
argument_list|(
name|sortedMultiset
operator|.
name|elementSet
argument_list|()
operator|.
name|last
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchElementException
name|e
parameter_list|)
block|{}
block|}
annotation|@
name|CollectionFeature
operator|.
name|Require
argument_list|(
name|SUPPORTS_REMOVE
argument_list|)
annotation|@
name|CollectionSize
operator|.
name|Require
argument_list|(
name|ZERO
argument_list|)
DECL|method|testEmptyMultisetPollLast ()
specifier|public
name|void
name|testEmptyMultisetPollLast
parameter_list|()
block|{
name|assertNull
argument_list|(
name|sortedMultiset
operator|.
name|pollLastEntry
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|CollectionSize
operator|.
name|Require
argument_list|(
name|ONE
argument_list|)
DECL|method|testSingletonMultisetFirst ()
specifier|public
name|void
name|testSingletonMultisetFirst
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|a
argument_list|,
name|sortedMultiset
operator|.
name|firstEntry
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|CollectionFeature
operator|.
name|Require
argument_list|(
name|SUPPORTS_REMOVE
argument_list|)
annotation|@
name|CollectionSize
operator|.
name|Require
argument_list|(
name|ONE
argument_list|)
DECL|method|testSingletonMultisetPollFirst ()
specifier|public
name|void
name|testSingletonMultisetPollFirst
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|a
argument_list|,
name|sortedMultiset
operator|.
name|pollFirstEntry
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sortedMultiset
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|CollectionSize
operator|.
name|Require
argument_list|(
name|ONE
argument_list|)
DECL|method|testSingletonMultisetNearby ()
specifier|public
name|void
name|testSingletonMultisetNearby
parameter_list|()
block|{
name|assertNull
argument_list|(
name|sortedMultiset
operator|.
name|headMultiset
argument_list|(
name|samples
operator|.
name|e0
argument_list|()
argument_list|,
name|OPEN
argument_list|)
operator|.
name|lastEntry
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|sortedMultiset
operator|.
name|tailMultiset
argument_list|(
name|samples
operator|.
name|e0
argument_list|()
argument_list|,
name|OPEN
argument_list|)
operator|.
name|lastEntry
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|a
argument_list|,
name|sortedMultiset
operator|.
name|headMultiset
argument_list|(
name|samples
operator|.
name|e0
argument_list|()
argument_list|,
name|CLOSED
argument_list|)
operator|.
name|lastEntry
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|a
argument_list|,
name|sortedMultiset
operator|.
name|tailMultiset
argument_list|(
name|samples
operator|.
name|e0
argument_list|()
argument_list|,
name|CLOSED
argument_list|)
operator|.
name|firstEntry
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|CollectionSize
operator|.
name|Require
argument_list|(
name|ONE
argument_list|)
DECL|method|testSingletonMultisetLast ()
specifier|public
name|void
name|testSingletonMultisetLast
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|a
argument_list|,
name|sortedMultiset
operator|.
name|lastEntry
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|CollectionFeature
operator|.
name|Require
argument_list|(
name|SUPPORTS_REMOVE
argument_list|)
annotation|@
name|CollectionSize
operator|.
name|Require
argument_list|(
name|ONE
argument_list|)
DECL|method|testSingletonMultisetPollLast ()
specifier|public
name|void
name|testSingletonMultisetPollLast
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|a
argument_list|,
name|sortedMultiset
operator|.
name|pollLastEntry
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sortedMultiset
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|CollectionSize
operator|.
name|Require
argument_list|(
name|SEVERAL
argument_list|)
DECL|method|testFirst ()
specifier|public
name|void
name|testFirst
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|a
argument_list|,
name|sortedMultiset
operator|.
name|firstEntry
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|CollectionFeature
operator|.
name|Require
argument_list|(
name|SUPPORTS_REMOVE
argument_list|)
annotation|@
name|CollectionSize
operator|.
name|Require
argument_list|(
name|SEVERAL
argument_list|)
DECL|method|testPollFirst ()
specifier|public
name|void
name|testPollFirst
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|a
argument_list|,
name|sortedMultiset
operator|.
name|pollFirstEntry
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|b
argument_list|,
name|c
argument_list|)
argument_list|,
name|copyToList
argument_list|(
name|sortedMultiset
operator|.
name|entrySet
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|CollectionFeature
operator|.
name|Require
argument_list|(
name|absent
operator|=
name|SUPPORTS_REMOVE
argument_list|)
DECL|method|testPollFirstUnsupported ()
specifier|public
name|void
name|testPollFirstUnsupported
parameter_list|()
block|{
try|try
block|{
name|sortedMultiset
operator|.
name|pollFirstEntry
argument_list|()
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|e
parameter_list|)
block|{}
block|}
annotation|@
name|CollectionSize
operator|.
name|Require
argument_list|(
name|SEVERAL
argument_list|)
DECL|method|testLower ()
specifier|public
name|void
name|testLower
parameter_list|()
block|{
name|resetWithHole
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|sortedMultiset
operator|.
name|headMultiset
argument_list|(
name|a
operator|.
name|getElement
argument_list|()
argument_list|,
name|OPEN
argument_list|)
operator|.
name|lastEntry
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|a
argument_list|,
name|sortedMultiset
operator|.
name|headMultiset
argument_list|(
name|b
operator|.
name|getElement
argument_list|()
argument_list|,
name|OPEN
argument_list|)
operator|.
name|lastEntry
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|a
argument_list|,
name|sortedMultiset
operator|.
name|headMultiset
argument_list|(
name|c
operator|.
name|getElement
argument_list|()
argument_list|,
name|OPEN
argument_list|)
operator|.
name|lastEntry
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|CollectionSize
operator|.
name|Require
argument_list|(
name|SEVERAL
argument_list|)
DECL|method|testFloor ()
specifier|public
name|void
name|testFloor
parameter_list|()
block|{
name|resetWithHole
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|a
argument_list|,
name|sortedMultiset
operator|.
name|headMultiset
argument_list|(
name|a
operator|.
name|getElement
argument_list|()
argument_list|,
name|CLOSED
argument_list|)
operator|.
name|lastEntry
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|a
argument_list|,
name|sortedMultiset
operator|.
name|headMultiset
argument_list|(
name|b
operator|.
name|getElement
argument_list|()
argument_list|,
name|CLOSED
argument_list|)
operator|.
name|lastEntry
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|c
argument_list|,
name|sortedMultiset
operator|.
name|headMultiset
argument_list|(
name|c
operator|.
name|getElement
argument_list|()
argument_list|,
name|CLOSED
argument_list|)
operator|.
name|lastEntry
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|CollectionSize
operator|.
name|Require
argument_list|(
name|SEVERAL
argument_list|)
DECL|method|testCeiling ()
specifier|public
name|void
name|testCeiling
parameter_list|()
block|{
name|resetWithHole
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|a
argument_list|,
name|sortedMultiset
operator|.
name|tailMultiset
argument_list|(
name|a
operator|.
name|getElement
argument_list|()
argument_list|,
name|CLOSED
argument_list|)
operator|.
name|firstEntry
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|c
argument_list|,
name|sortedMultiset
operator|.
name|tailMultiset
argument_list|(
name|b
operator|.
name|getElement
argument_list|()
argument_list|,
name|CLOSED
argument_list|)
operator|.
name|firstEntry
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|c
argument_list|,
name|sortedMultiset
operator|.
name|tailMultiset
argument_list|(
name|c
operator|.
name|getElement
argument_list|()
argument_list|,
name|CLOSED
argument_list|)
operator|.
name|firstEntry
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|CollectionSize
operator|.
name|Require
argument_list|(
name|SEVERAL
argument_list|)
DECL|method|testHigher ()
specifier|public
name|void
name|testHigher
parameter_list|()
block|{
name|resetWithHole
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|c
argument_list|,
name|sortedMultiset
operator|.
name|tailMultiset
argument_list|(
name|a
operator|.
name|getElement
argument_list|()
argument_list|,
name|OPEN
argument_list|)
operator|.
name|firstEntry
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|c
argument_list|,
name|sortedMultiset
operator|.
name|tailMultiset
argument_list|(
name|b
operator|.
name|getElement
argument_list|()
argument_list|,
name|OPEN
argument_list|)
operator|.
name|firstEntry
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|sortedMultiset
operator|.
name|tailMultiset
argument_list|(
name|c
operator|.
name|getElement
argument_list|()
argument_list|,
name|OPEN
argument_list|)
operator|.
name|firstEntry
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|CollectionSize
operator|.
name|Require
argument_list|(
name|SEVERAL
argument_list|)
DECL|method|testLast ()
specifier|public
name|void
name|testLast
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|c
argument_list|,
name|sortedMultiset
operator|.
name|lastEntry
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|CollectionFeature
operator|.
name|Require
argument_list|(
name|SUPPORTS_REMOVE
argument_list|)
annotation|@
name|CollectionSize
operator|.
name|Require
argument_list|(
name|SEVERAL
argument_list|)
DECL|method|testPollLast ()
specifier|public
name|void
name|testPollLast
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|c
argument_list|,
name|sortedMultiset
operator|.
name|pollLastEntry
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
argument_list|,
name|copyToList
argument_list|(
name|sortedMultiset
operator|.
name|entrySet
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|CollectionFeature
operator|.
name|Require
argument_list|(
name|absent
operator|=
name|SUPPORTS_REMOVE
argument_list|)
annotation|@
name|CollectionSize
operator|.
name|Require
argument_list|(
name|SEVERAL
argument_list|)
DECL|method|testPollLastUnsupported ()
specifier|public
name|void
name|testPollLastUnsupported
parameter_list|()
block|{
try|try
block|{
name|sortedMultiset
operator|.
name|pollLastEntry
argument_list|()
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|e
parameter_list|)
block|{}
block|}
annotation|@
name|CollectionSize
operator|.
name|Require
argument_list|(
name|SEVERAL
argument_list|)
DECL|method|testDescendingNavigation ()
specifier|public
name|void
name|testDescendingNavigation
parameter_list|()
block|{
name|List
argument_list|<
name|Entry
argument_list|<
name|E
argument_list|>
argument_list|>
name|ascending
init|=
operator|new
name|ArrayList
argument_list|<
name|Entry
argument_list|<
name|E
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|Iterators
operator|.
name|addAll
argument_list|(
name|ascending
argument_list|,
name|sortedMultiset
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Entry
argument_list|<
name|E
argument_list|>
argument_list|>
name|descending
init|=
operator|new
name|ArrayList
argument_list|<
name|Entry
argument_list|<
name|E
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|Iterators
operator|.
name|addAll
argument_list|(
name|descending
argument_list|,
name|sortedMultiset
operator|.
name|descendingMultiset
argument_list|()
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|reverse
argument_list|(
name|descending
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ascending
argument_list|,
name|descending
argument_list|)
expr_stmt|;
block|}
DECL|method|expectAddFailure (SortedMultiset<E> multiset, Entry<E> entry)
name|void
name|expectAddFailure
parameter_list|(
name|SortedMultiset
argument_list|<
name|E
argument_list|>
name|multiset
parameter_list|,
name|Entry
argument_list|<
name|E
argument_list|>
name|entry
parameter_list|)
block|{
try|try
block|{
name|multiset
operator|.
name|add
argument_list|(
name|entry
operator|.
name|getElement
argument_list|()
argument_list|,
name|entry
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected IllegalArgumentException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{}
try|try
block|{
name|multiset
operator|.
name|add
argument_list|(
name|entry
operator|.
name|getElement
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected IllegalArgumentException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{}
try|try
block|{
name|multiset
operator|.
name|addAll
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|entry
operator|.
name|getElement
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected IllegalArgumentException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{}
block|}
DECL|method|expectRemoveZero (SortedMultiset<E> multiset, Entry<E> entry)
name|void
name|expectRemoveZero
parameter_list|(
name|SortedMultiset
argument_list|<
name|E
argument_list|>
name|multiset
parameter_list|,
name|Entry
argument_list|<
name|E
argument_list|>
name|entry
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|multiset
operator|.
name|remove
argument_list|(
name|entry
operator|.
name|getElement
argument_list|()
argument_list|,
name|entry
operator|.
name|getCount
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|multiset
operator|.
name|remove
argument_list|(
name|entry
operator|.
name|getElement
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|multiset
operator|.
name|elementSet
argument_list|()
operator|.
name|remove
argument_list|(
name|entry
operator|.
name|getElement
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|expectSetCountFailure (SortedMultiset<E> multiset, Entry<E> entry)
name|void
name|expectSetCountFailure
parameter_list|(
name|SortedMultiset
argument_list|<
name|E
argument_list|>
name|multiset
parameter_list|,
name|Entry
argument_list|<
name|E
argument_list|>
name|entry
parameter_list|)
block|{
try|try
block|{
name|multiset
operator|.
name|setCount
argument_list|(
name|entry
operator|.
name|getElement
argument_list|()
argument_list|,
name|multiset
operator|.
name|count
argument_list|(
name|entry
operator|.
name|getElement
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|acceptable
parameter_list|)
block|{}
try|try
block|{
name|multiset
operator|.
name|setCount
argument_list|(
name|entry
operator|.
name|getElement
argument_list|()
argument_list|,
name|multiset
operator|.
name|count
argument_list|(
name|entry
operator|.
name|getElement
argument_list|()
argument_list|)
operator|+
literal|1
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected IllegalArgumentException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{}
block|}
annotation|@
name|CollectionSize
operator|.
name|Require
argument_list|(
name|ONE
argument_list|)
annotation|@
name|CollectionFeature
operator|.
name|Require
argument_list|(
name|SUPPORTS_ADD
argument_list|)
DECL|method|testAddOutOfTailBoundsOne ()
specifier|public
name|void
name|testAddOutOfTailBoundsOne
parameter_list|()
block|{
name|expectAddFailure
argument_list|(
name|sortedMultiset
operator|.
name|tailMultiset
argument_list|(
name|a
operator|.
name|getElement
argument_list|()
argument_list|,
name|OPEN
argument_list|)
argument_list|,
name|a
argument_list|)
expr_stmt|;
block|}
annotation|@
name|CollectionSize
operator|.
name|Require
argument_list|(
name|SEVERAL
argument_list|)
annotation|@
name|CollectionFeature
operator|.
name|Require
argument_list|(
name|SUPPORTS_ADD
argument_list|)
DECL|method|testAddOutOfTailBoundsSeveral ()
specifier|public
name|void
name|testAddOutOfTailBoundsSeveral
parameter_list|()
block|{
name|expectAddFailure
argument_list|(
name|sortedMultiset
operator|.
name|tailMultiset
argument_list|(
name|a
operator|.
name|getElement
argument_list|()
argument_list|,
name|OPEN
argument_list|)
argument_list|,
name|a
argument_list|)
expr_stmt|;
name|expectAddFailure
argument_list|(
name|sortedMultiset
operator|.
name|tailMultiset
argument_list|(
name|b
operator|.
name|getElement
argument_list|()
argument_list|,
name|CLOSED
argument_list|)
argument_list|,
name|a
argument_list|)
expr_stmt|;
name|expectAddFailure
argument_list|(
name|sortedMultiset
operator|.
name|tailMultiset
argument_list|(
name|b
operator|.
name|getElement
argument_list|()
argument_list|,
name|OPEN
argument_list|)
argument_list|,
name|a
argument_list|)
expr_stmt|;
name|expectAddFailure
argument_list|(
name|sortedMultiset
operator|.
name|tailMultiset
argument_list|(
name|b
operator|.
name|getElement
argument_list|()
argument_list|,
name|OPEN
argument_list|)
argument_list|,
name|b
argument_list|)
expr_stmt|;
name|expectAddFailure
argument_list|(
name|sortedMultiset
operator|.
name|tailMultiset
argument_list|(
name|c
operator|.
name|getElement
argument_list|()
argument_list|,
name|CLOSED
argument_list|)
argument_list|,
name|a
argument_list|)
expr_stmt|;
name|expectAddFailure
argument_list|(
name|sortedMultiset
operator|.
name|tailMultiset
argument_list|(
name|c
operator|.
name|getElement
argument_list|()
argument_list|,
name|CLOSED
argument_list|)
argument_list|,
name|b
argument_list|)
expr_stmt|;
name|expectAddFailure
argument_list|(
name|sortedMultiset
operator|.
name|tailMultiset
argument_list|(
name|c
operator|.
name|getElement
argument_list|()
argument_list|,
name|OPEN
argument_list|)
argument_list|,
name|a
argument_list|)
expr_stmt|;
name|expectAddFailure
argument_list|(
name|sortedMultiset
operator|.
name|tailMultiset
argument_list|(
name|c
operator|.
name|getElement
argument_list|()
argument_list|,
name|OPEN
argument_list|)
argument_list|,
name|b
argument_list|)
expr_stmt|;
name|expectAddFailure
argument_list|(
name|sortedMultiset
operator|.
name|tailMultiset
argument_list|(
name|c
operator|.
name|getElement
argument_list|()
argument_list|,
name|OPEN
argument_list|)
argument_list|,
name|c
argument_list|)
expr_stmt|;
block|}
annotation|@
name|CollectionSize
operator|.
name|Require
argument_list|(
name|ONE
argument_list|)
annotation|@
name|CollectionFeature
operator|.
name|Require
argument_list|(
name|SUPPORTS_ADD
argument_list|)
DECL|method|testAddOutOfHeadBoundsOne ()
specifier|public
name|void
name|testAddOutOfHeadBoundsOne
parameter_list|()
block|{
name|expectAddFailure
argument_list|(
name|sortedMultiset
operator|.
name|headMultiset
argument_list|(
name|a
operator|.
name|getElement
argument_list|()
argument_list|,
name|OPEN
argument_list|)
argument_list|,
name|a
argument_list|)
expr_stmt|;
block|}
annotation|@
name|CollectionSize
operator|.
name|Require
argument_list|(
name|SEVERAL
argument_list|)
annotation|@
name|CollectionFeature
operator|.
name|Require
argument_list|(
name|SUPPORTS_ADD
argument_list|)
DECL|method|testAddOutOfHeadBoundsSeveral ()
specifier|public
name|void
name|testAddOutOfHeadBoundsSeveral
parameter_list|()
block|{
name|expectAddFailure
argument_list|(
name|sortedMultiset
operator|.
name|headMultiset
argument_list|(
name|c
operator|.
name|getElement
argument_list|()
argument_list|,
name|OPEN
argument_list|)
argument_list|,
name|c
argument_list|)
expr_stmt|;
name|expectAddFailure
argument_list|(
name|sortedMultiset
operator|.
name|headMultiset
argument_list|(
name|b
operator|.
name|getElement
argument_list|()
argument_list|,
name|CLOSED
argument_list|)
argument_list|,
name|c
argument_list|)
expr_stmt|;
name|expectAddFailure
argument_list|(
name|sortedMultiset
operator|.
name|headMultiset
argument_list|(
name|b
operator|.
name|getElement
argument_list|()
argument_list|,
name|OPEN
argument_list|)
argument_list|,
name|c
argument_list|)
expr_stmt|;
name|expectAddFailure
argument_list|(
name|sortedMultiset
operator|.
name|headMultiset
argument_list|(
name|b
operator|.
name|getElement
argument_list|()
argument_list|,
name|OPEN
argument_list|)
argument_list|,
name|b
argument_list|)
expr_stmt|;
name|expectAddFailure
argument_list|(
name|sortedMultiset
operator|.
name|headMultiset
argument_list|(
name|a
operator|.
name|getElement
argument_list|()
argument_list|,
name|CLOSED
argument_list|)
argument_list|,
name|c
argument_list|)
expr_stmt|;
name|expectAddFailure
argument_list|(
name|sortedMultiset
operator|.
name|headMultiset
argument_list|(
name|a
operator|.
name|getElement
argument_list|()
argument_list|,
name|CLOSED
argument_list|)
argument_list|,
name|b
argument_list|)
expr_stmt|;
name|expectAddFailure
argument_list|(
name|sortedMultiset
operator|.
name|headMultiset
argument_list|(
name|a
operator|.
name|getElement
argument_list|()
argument_list|,
name|OPEN
argument_list|)
argument_list|,
name|c
argument_list|)
expr_stmt|;
name|expectAddFailure
argument_list|(
name|sortedMultiset
operator|.
name|headMultiset
argument_list|(
name|a
operator|.
name|getElement
argument_list|()
argument_list|,
name|OPEN
argument_list|)
argument_list|,
name|b
argument_list|)
expr_stmt|;
name|expectAddFailure
argument_list|(
name|sortedMultiset
operator|.
name|headMultiset
argument_list|(
name|a
operator|.
name|getElement
argument_list|()
argument_list|,
name|OPEN
argument_list|)
argument_list|,
name|a
argument_list|)
expr_stmt|;
block|}
annotation|@
name|CollectionSize
operator|.
name|Require
argument_list|(
name|ONE
argument_list|)
annotation|@
name|CollectionFeature
operator|.
name|Require
argument_list|(
name|SUPPORTS_REMOVE
argument_list|)
DECL|method|testRemoveOutOfTailBoundsOne ()
specifier|public
name|void
name|testRemoveOutOfTailBoundsOne
parameter_list|()
block|{
name|expectRemoveZero
argument_list|(
name|sortedMultiset
operator|.
name|tailMultiset
argument_list|(
name|a
operator|.
name|getElement
argument_list|()
argument_list|,
name|OPEN
argument_list|)
argument_list|,
name|a
argument_list|)
expr_stmt|;
block|}
annotation|@
name|CollectionSize
operator|.
name|Require
argument_list|(
name|SEVERAL
argument_list|)
annotation|@
name|CollectionFeature
operator|.
name|Require
argument_list|(
name|SUPPORTS_REMOVE
argument_list|)
DECL|method|testRemoveOutOfTailBoundsSeveral ()
specifier|public
name|void
name|testRemoveOutOfTailBoundsSeveral
parameter_list|()
block|{
name|expectRemoveZero
argument_list|(
name|sortedMultiset
operator|.
name|tailMultiset
argument_list|(
name|a
operator|.
name|getElement
argument_list|()
argument_list|,
name|OPEN
argument_list|)
argument_list|,
name|a
argument_list|)
expr_stmt|;
name|expectRemoveZero
argument_list|(
name|sortedMultiset
operator|.
name|tailMultiset
argument_list|(
name|b
operator|.
name|getElement
argument_list|()
argument_list|,
name|CLOSED
argument_list|)
argument_list|,
name|a
argument_list|)
expr_stmt|;
name|expectRemoveZero
argument_list|(
name|sortedMultiset
operator|.
name|tailMultiset
argument_list|(
name|b
operator|.
name|getElement
argument_list|()
argument_list|,
name|OPEN
argument_list|)
argument_list|,
name|a
argument_list|)
expr_stmt|;
name|expectRemoveZero
argument_list|(
name|sortedMultiset
operator|.
name|tailMultiset
argument_list|(
name|b
operator|.
name|getElement
argument_list|()
argument_list|,
name|OPEN
argument_list|)
argument_list|,
name|b
argument_list|)
expr_stmt|;
name|expectRemoveZero
argument_list|(
name|sortedMultiset
operator|.
name|tailMultiset
argument_list|(
name|c
operator|.
name|getElement
argument_list|()
argument_list|,
name|CLOSED
argument_list|)
argument_list|,
name|a
argument_list|)
expr_stmt|;
name|expectRemoveZero
argument_list|(
name|sortedMultiset
operator|.
name|tailMultiset
argument_list|(
name|c
operator|.
name|getElement
argument_list|()
argument_list|,
name|CLOSED
argument_list|)
argument_list|,
name|b
argument_list|)
expr_stmt|;
name|expectRemoveZero
argument_list|(
name|sortedMultiset
operator|.
name|tailMultiset
argument_list|(
name|c
operator|.
name|getElement
argument_list|()
argument_list|,
name|OPEN
argument_list|)
argument_list|,
name|a
argument_list|)
expr_stmt|;
name|expectRemoveZero
argument_list|(
name|sortedMultiset
operator|.
name|tailMultiset
argument_list|(
name|c
operator|.
name|getElement
argument_list|()
argument_list|,
name|OPEN
argument_list|)
argument_list|,
name|b
argument_list|)
expr_stmt|;
name|expectRemoveZero
argument_list|(
name|sortedMultiset
operator|.
name|tailMultiset
argument_list|(
name|c
operator|.
name|getElement
argument_list|()
argument_list|,
name|OPEN
argument_list|)
argument_list|,
name|c
argument_list|)
expr_stmt|;
block|}
annotation|@
name|CollectionSize
operator|.
name|Require
argument_list|(
name|ONE
argument_list|)
annotation|@
name|CollectionFeature
operator|.
name|Require
argument_list|(
name|SUPPORTS_REMOVE
argument_list|)
DECL|method|testRemoveOutOfHeadBoundsOne ()
specifier|public
name|void
name|testRemoveOutOfHeadBoundsOne
parameter_list|()
block|{
name|expectRemoveZero
argument_list|(
name|sortedMultiset
operator|.
name|headMultiset
argument_list|(
name|a
operator|.
name|getElement
argument_list|()
argument_list|,
name|OPEN
argument_list|)
argument_list|,
name|a
argument_list|)
expr_stmt|;
block|}
annotation|@
name|CollectionSize
operator|.
name|Require
argument_list|(
name|SEVERAL
argument_list|)
annotation|@
name|CollectionFeature
operator|.
name|Require
argument_list|(
name|SUPPORTS_REMOVE
argument_list|)
DECL|method|testRemoveOutOfHeadBoundsSeveral ()
specifier|public
name|void
name|testRemoveOutOfHeadBoundsSeveral
parameter_list|()
block|{
name|expectRemoveZero
argument_list|(
name|sortedMultiset
operator|.
name|headMultiset
argument_list|(
name|c
operator|.
name|getElement
argument_list|()
argument_list|,
name|OPEN
argument_list|)
argument_list|,
name|c
argument_list|)
expr_stmt|;
name|expectRemoveZero
argument_list|(
name|sortedMultiset
operator|.
name|headMultiset
argument_list|(
name|b
operator|.
name|getElement
argument_list|()
argument_list|,
name|CLOSED
argument_list|)
argument_list|,
name|c
argument_list|)
expr_stmt|;
name|expectRemoveZero
argument_list|(
name|sortedMultiset
operator|.
name|headMultiset
argument_list|(
name|b
operator|.
name|getElement
argument_list|()
argument_list|,
name|OPEN
argument_list|)
argument_list|,
name|c
argument_list|)
expr_stmt|;
name|expectRemoveZero
argument_list|(
name|sortedMultiset
operator|.
name|headMultiset
argument_list|(
name|b
operator|.
name|getElement
argument_list|()
argument_list|,
name|OPEN
argument_list|)
argument_list|,
name|b
argument_list|)
expr_stmt|;
name|expectRemoveZero
argument_list|(
name|sortedMultiset
operator|.
name|headMultiset
argument_list|(
name|a
operator|.
name|getElement
argument_list|()
argument_list|,
name|CLOSED
argument_list|)
argument_list|,
name|c
argument_list|)
expr_stmt|;
name|expectRemoveZero
argument_list|(
name|sortedMultiset
operator|.
name|headMultiset
argument_list|(
name|a
operator|.
name|getElement
argument_list|()
argument_list|,
name|CLOSED
argument_list|)
argument_list|,
name|b
argument_list|)
expr_stmt|;
name|expectRemoveZero
argument_list|(
name|sortedMultiset
operator|.
name|headMultiset
argument_list|(
name|a
operator|.
name|getElement
argument_list|()
argument_list|,
name|OPEN
argument_list|)
argument_list|,
name|c
argument_list|)
expr_stmt|;
name|expectRemoveZero
argument_list|(
name|sortedMultiset
operator|.
name|headMultiset
argument_list|(
name|a
operator|.
name|getElement
argument_list|()
argument_list|,
name|OPEN
argument_list|)
argument_list|,
name|b
argument_list|)
expr_stmt|;
name|expectRemoveZero
argument_list|(
name|sortedMultiset
operator|.
name|headMultiset
argument_list|(
name|a
operator|.
name|getElement
argument_list|()
argument_list|,
name|OPEN
argument_list|)
argument_list|,
name|a
argument_list|)
expr_stmt|;
block|}
annotation|@
name|CollectionSize
operator|.
name|Require
argument_list|(
name|ONE
argument_list|)
annotation|@
name|CollectionFeature
operator|.
name|Require
argument_list|(
block|{
name|SUPPORTS_ADD
block|,
name|SUPPORTS_REMOVE
block|}
argument_list|)
DECL|method|testSetCountOutOfTailBoundsOne ()
specifier|public
name|void
name|testSetCountOutOfTailBoundsOne
parameter_list|()
block|{
name|expectSetCountFailure
argument_list|(
name|sortedMultiset
operator|.
name|tailMultiset
argument_list|(
name|a
operator|.
name|getElement
argument_list|()
argument_list|,
name|OPEN
argument_list|)
argument_list|,
name|a
argument_list|)
expr_stmt|;
block|}
annotation|@
name|CollectionSize
operator|.
name|Require
argument_list|(
name|SEVERAL
argument_list|)
annotation|@
name|CollectionFeature
operator|.
name|Require
argument_list|(
block|{
name|SUPPORTS_ADD
block|,
name|SUPPORTS_REMOVE
block|}
argument_list|)
DECL|method|testSetCountOutOfTailBoundsSeveral ()
specifier|public
name|void
name|testSetCountOutOfTailBoundsSeveral
parameter_list|()
block|{
name|expectSetCountFailure
argument_list|(
name|sortedMultiset
operator|.
name|tailMultiset
argument_list|(
name|a
operator|.
name|getElement
argument_list|()
argument_list|,
name|OPEN
argument_list|)
argument_list|,
name|a
argument_list|)
expr_stmt|;
name|expectSetCountFailure
argument_list|(
name|sortedMultiset
operator|.
name|tailMultiset
argument_list|(
name|b
operator|.
name|getElement
argument_list|()
argument_list|,
name|CLOSED
argument_list|)
argument_list|,
name|a
argument_list|)
expr_stmt|;
name|expectSetCountFailure
argument_list|(
name|sortedMultiset
operator|.
name|tailMultiset
argument_list|(
name|b
operator|.
name|getElement
argument_list|()
argument_list|,
name|OPEN
argument_list|)
argument_list|,
name|a
argument_list|)
expr_stmt|;
name|expectSetCountFailure
argument_list|(
name|sortedMultiset
operator|.
name|tailMultiset
argument_list|(
name|b
operator|.
name|getElement
argument_list|()
argument_list|,
name|OPEN
argument_list|)
argument_list|,
name|b
argument_list|)
expr_stmt|;
name|expectSetCountFailure
argument_list|(
name|sortedMultiset
operator|.
name|tailMultiset
argument_list|(
name|c
operator|.
name|getElement
argument_list|()
argument_list|,
name|CLOSED
argument_list|)
argument_list|,
name|a
argument_list|)
expr_stmt|;
name|expectSetCountFailure
argument_list|(
name|sortedMultiset
operator|.
name|tailMultiset
argument_list|(
name|c
operator|.
name|getElement
argument_list|()
argument_list|,
name|CLOSED
argument_list|)
argument_list|,
name|b
argument_list|)
expr_stmt|;
name|expectSetCountFailure
argument_list|(
name|sortedMultiset
operator|.
name|tailMultiset
argument_list|(
name|c
operator|.
name|getElement
argument_list|()
argument_list|,
name|OPEN
argument_list|)
argument_list|,
name|a
argument_list|)
expr_stmt|;
name|expectSetCountFailure
argument_list|(
name|sortedMultiset
operator|.
name|tailMultiset
argument_list|(
name|c
operator|.
name|getElement
argument_list|()
argument_list|,
name|OPEN
argument_list|)
argument_list|,
name|b
argument_list|)
expr_stmt|;
name|expectSetCountFailure
argument_list|(
name|sortedMultiset
operator|.
name|tailMultiset
argument_list|(
name|c
operator|.
name|getElement
argument_list|()
argument_list|,
name|OPEN
argument_list|)
argument_list|,
name|c
argument_list|)
expr_stmt|;
block|}
annotation|@
name|CollectionSize
operator|.
name|Require
argument_list|(
name|ONE
argument_list|)
annotation|@
name|CollectionFeature
operator|.
name|Require
argument_list|(
block|{
name|SUPPORTS_ADD
block|,
name|SUPPORTS_REMOVE
block|}
argument_list|)
DECL|method|testSetCountOutOfHeadBoundsOne ()
specifier|public
name|void
name|testSetCountOutOfHeadBoundsOne
parameter_list|()
block|{
name|expectSetCountFailure
argument_list|(
name|sortedMultiset
operator|.
name|headMultiset
argument_list|(
name|a
operator|.
name|getElement
argument_list|()
argument_list|,
name|OPEN
argument_list|)
argument_list|,
name|a
argument_list|)
expr_stmt|;
block|}
annotation|@
name|CollectionSize
operator|.
name|Require
argument_list|(
name|SEVERAL
argument_list|)
annotation|@
name|CollectionFeature
operator|.
name|Require
argument_list|(
block|{
name|SUPPORTS_ADD
block|,
name|SUPPORTS_REMOVE
block|}
argument_list|)
DECL|method|testSetCountOutOfHeadBoundsSeveral ()
specifier|public
name|void
name|testSetCountOutOfHeadBoundsSeveral
parameter_list|()
block|{
name|expectSetCountFailure
argument_list|(
name|sortedMultiset
operator|.
name|headMultiset
argument_list|(
name|c
operator|.
name|getElement
argument_list|()
argument_list|,
name|OPEN
argument_list|)
argument_list|,
name|c
argument_list|)
expr_stmt|;
name|expectSetCountFailure
argument_list|(
name|sortedMultiset
operator|.
name|headMultiset
argument_list|(
name|b
operator|.
name|getElement
argument_list|()
argument_list|,
name|CLOSED
argument_list|)
argument_list|,
name|c
argument_list|)
expr_stmt|;
name|expectSetCountFailure
argument_list|(
name|sortedMultiset
operator|.
name|headMultiset
argument_list|(
name|b
operator|.
name|getElement
argument_list|()
argument_list|,
name|OPEN
argument_list|)
argument_list|,
name|c
argument_list|)
expr_stmt|;
name|expectSetCountFailure
argument_list|(
name|sortedMultiset
operator|.
name|headMultiset
argument_list|(
name|b
operator|.
name|getElement
argument_list|()
argument_list|,
name|OPEN
argument_list|)
argument_list|,
name|b
argument_list|)
expr_stmt|;
name|expectSetCountFailure
argument_list|(
name|sortedMultiset
operator|.
name|headMultiset
argument_list|(
name|a
operator|.
name|getElement
argument_list|()
argument_list|,
name|CLOSED
argument_list|)
argument_list|,
name|c
argument_list|)
expr_stmt|;
name|expectSetCountFailure
argument_list|(
name|sortedMultiset
operator|.
name|headMultiset
argument_list|(
name|a
operator|.
name|getElement
argument_list|()
argument_list|,
name|CLOSED
argument_list|)
argument_list|,
name|b
argument_list|)
expr_stmt|;
name|expectSetCountFailure
argument_list|(
name|sortedMultiset
operator|.
name|headMultiset
argument_list|(
name|a
operator|.
name|getElement
argument_list|()
argument_list|,
name|OPEN
argument_list|)
argument_list|,
name|c
argument_list|)
expr_stmt|;
name|expectSetCountFailure
argument_list|(
name|sortedMultiset
operator|.
name|headMultiset
argument_list|(
name|a
operator|.
name|getElement
argument_list|()
argument_list|,
name|OPEN
argument_list|)
argument_list|,
name|b
argument_list|)
expr_stmt|;
name|expectSetCountFailure
argument_list|(
name|sortedMultiset
operator|.
name|headMultiset
argument_list|(
name|a
operator|.
name|getElement
argument_list|()
argument_list|,
name|OPEN
argument_list|)
argument_list|,
name|a
argument_list|)
expr_stmt|;
block|}
annotation|@
name|CollectionSize
operator|.
name|Require
argument_list|(
name|SEVERAL
argument_list|)
annotation|@
name|CollectionFeature
operator|.
name|Require
argument_list|(
name|SUPPORTS_ADD
argument_list|)
DECL|method|testAddWithConflictingBounds ()
specifier|public
name|void
name|testAddWithConflictingBounds
parameter_list|()
block|{
name|testEmptyRangeSubMultisetSupportingAdd
argument_list|(
name|sortedMultiset
operator|.
name|subMultiset
argument_list|(
name|a
operator|.
name|getElement
argument_list|()
argument_list|,
name|CLOSED
argument_list|,
name|a
operator|.
name|getElement
argument_list|()
argument_list|,
name|OPEN
argument_list|)
argument_list|)
expr_stmt|;
name|testEmptyRangeSubMultisetSupportingAdd
argument_list|(
name|sortedMultiset
operator|.
name|subMultiset
argument_list|(
name|a
operator|.
name|getElement
argument_list|()
argument_list|,
name|OPEN
argument_list|,
name|a
operator|.
name|getElement
argument_list|()
argument_list|,
name|OPEN
argument_list|)
argument_list|)
expr_stmt|;
name|testEmptyRangeSubMultisetSupportingAdd
argument_list|(
name|sortedMultiset
operator|.
name|subMultiset
argument_list|(
name|a
operator|.
name|getElement
argument_list|()
argument_list|,
name|OPEN
argument_list|,
name|a
operator|.
name|getElement
argument_list|()
argument_list|,
name|CLOSED
argument_list|)
argument_list|)
expr_stmt|;
name|testEmptyRangeSubMultisetSupportingAdd
argument_list|(
name|sortedMultiset
operator|.
name|subMultiset
argument_list|(
name|b
operator|.
name|getElement
argument_list|()
argument_list|,
name|CLOSED
argument_list|,
name|a
operator|.
name|getElement
argument_list|()
argument_list|,
name|CLOSED
argument_list|)
argument_list|)
expr_stmt|;
name|testEmptyRangeSubMultisetSupportingAdd
argument_list|(
name|sortedMultiset
operator|.
name|subMultiset
argument_list|(
name|b
operator|.
name|getElement
argument_list|()
argument_list|,
name|CLOSED
argument_list|,
name|a
operator|.
name|getElement
argument_list|()
argument_list|,
name|OPEN
argument_list|)
argument_list|)
expr_stmt|;
name|testEmptyRangeSubMultisetSupportingAdd
argument_list|(
name|sortedMultiset
operator|.
name|subMultiset
argument_list|(
name|b
operator|.
name|getElement
argument_list|()
argument_list|,
name|OPEN
argument_list|,
name|a
operator|.
name|getElement
argument_list|()
argument_list|,
name|OPEN
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|CollectionSize
operator|.
name|Require
argument_list|(
name|SEVERAL
argument_list|)
annotation|@
name|CollectionFeature
operator|.
name|Require
argument_list|(
name|SUPPORTS_ADD
argument_list|)
DECL|method|testConflictingBounds ()
specifier|public
name|void
name|testConflictingBounds
parameter_list|()
block|{
name|testEmptyRangeSubMultiset
argument_list|(
name|sortedMultiset
operator|.
name|subMultiset
argument_list|(
name|a
operator|.
name|getElement
argument_list|()
argument_list|,
name|CLOSED
argument_list|,
name|a
operator|.
name|getElement
argument_list|()
argument_list|,
name|OPEN
argument_list|)
argument_list|)
expr_stmt|;
name|testEmptyRangeSubMultiset
argument_list|(
name|sortedMultiset
operator|.
name|subMultiset
argument_list|(
name|a
operator|.
name|getElement
argument_list|()
argument_list|,
name|OPEN
argument_list|,
name|a
operator|.
name|getElement
argument_list|()
argument_list|,
name|OPEN
argument_list|)
argument_list|)
expr_stmt|;
name|testEmptyRangeSubMultiset
argument_list|(
name|sortedMultiset
operator|.
name|subMultiset
argument_list|(
name|a
operator|.
name|getElement
argument_list|()
argument_list|,
name|OPEN
argument_list|,
name|a
operator|.
name|getElement
argument_list|()
argument_list|,
name|CLOSED
argument_list|)
argument_list|)
expr_stmt|;
name|testEmptyRangeSubMultiset
argument_list|(
name|sortedMultiset
operator|.
name|subMultiset
argument_list|(
name|b
operator|.
name|getElement
argument_list|()
argument_list|,
name|CLOSED
argument_list|,
name|a
operator|.
name|getElement
argument_list|()
argument_list|,
name|CLOSED
argument_list|)
argument_list|)
expr_stmt|;
name|testEmptyRangeSubMultiset
argument_list|(
name|sortedMultiset
operator|.
name|subMultiset
argument_list|(
name|b
operator|.
name|getElement
argument_list|()
argument_list|,
name|CLOSED
argument_list|,
name|a
operator|.
name|getElement
argument_list|()
argument_list|,
name|OPEN
argument_list|)
argument_list|)
expr_stmt|;
name|testEmptyRangeSubMultiset
argument_list|(
name|sortedMultiset
operator|.
name|subMultiset
argument_list|(
name|b
operator|.
name|getElement
argument_list|()
argument_list|,
name|OPEN
argument_list|,
name|a
operator|.
name|getElement
argument_list|()
argument_list|,
name|OPEN
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testEmptyRangeSubMultiset (SortedMultiset<E> multiset)
specifier|public
name|void
name|testEmptyRangeSubMultiset
parameter_list|(
name|SortedMultiset
argument_list|<
name|E
argument_list|>
name|multiset
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|multiset
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|multiset
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|multiset
operator|.
name|toArray
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|multiset
operator|.
name|entrySet
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|multiset
operator|.
name|iterator
argument_list|()
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|multiset
operator|.
name|entrySet
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|multiset
operator|.
name|entrySet
argument_list|()
operator|.
name|toArray
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|multiset
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|testEmptyRangeSubMultisetSupportingAdd (SortedMultiset<E> multiset)
specifier|public
name|void
name|testEmptyRangeSubMultisetSupportingAdd
parameter_list|(
name|SortedMultiset
argument_list|<
name|E
argument_list|>
name|multiset
parameter_list|)
block|{
for|for
control|(
name|Entry
argument_list|<
name|E
argument_list|>
name|entry
range|:
name|Arrays
operator|.
name|asList
argument_list|(
name|a
argument_list|,
name|b
argument_list|,
name|c
argument_list|)
control|)
block|{
name|expectAddFailure
argument_list|(
name|multiset
argument_list|,
name|entry
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|totalSize (Iterable<? extends Entry<?>> entries)
specifier|private
name|int
name|totalSize
parameter_list|(
name|Iterable
argument_list|<
name|?
extends|extends
name|Entry
argument_list|<
name|?
argument_list|>
argument_list|>
name|entries
parameter_list|)
block|{
name|int
name|sum
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|?
argument_list|>
name|entry
range|:
name|entries
control|)
block|{
name|sum
operator|+=
name|entry
operator|.
name|getCount
argument_list|()
expr_stmt|;
block|}
return|return
name|sum
return|;
block|}
DECL|enum|SubMultisetSpec
specifier|private
enum|enum
name|SubMultisetSpec
block|{
DECL|enumConstant|TAIL_CLOSED
name|TAIL_CLOSED
block|{
annotation|@
name|Override
argument_list|<
name|E
argument_list|>
name|List
argument_list|<
name|Entry
argument_list|<
name|E
argument_list|>
argument_list|>
name|expectedEntries
parameter_list|(
name|int
name|targetEntry
parameter_list|,
name|List
argument_list|<
name|Entry
argument_list|<
name|E
argument_list|>
argument_list|>
name|entries
parameter_list|)
block|{
return|return
name|entries
operator|.
name|subList
argument_list|(
name|targetEntry
argument_list|,
name|entries
operator|.
name|size
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
argument_list|<
name|E
argument_list|>
name|SortedMultiset
argument_list|<
name|E
argument_list|>
name|subMultiset
parameter_list|(
name|SortedMultiset
argument_list|<
name|E
argument_list|>
name|multiset
parameter_list|,
name|List
argument_list|<
name|Entry
argument_list|<
name|E
argument_list|>
argument_list|>
name|entries
parameter_list|,
name|int
name|targetEntry
parameter_list|)
block|{
return|return
name|multiset
operator|.
name|tailMultiset
argument_list|(
name|entries
operator|.
name|get
argument_list|(
name|targetEntry
argument_list|)
operator|.
name|getElement
argument_list|()
argument_list|,
name|CLOSED
argument_list|)
return|;
block|}
block|}
block|,
DECL|enumConstant|TAIL_OPEN
name|TAIL_OPEN
block|{
annotation|@
name|Override
argument_list|<
name|E
argument_list|>
name|List
argument_list|<
name|Entry
argument_list|<
name|E
argument_list|>
argument_list|>
name|expectedEntries
parameter_list|(
name|int
name|targetEntry
parameter_list|,
name|List
argument_list|<
name|Entry
argument_list|<
name|E
argument_list|>
argument_list|>
name|entries
parameter_list|)
block|{
return|return
name|entries
operator|.
name|subList
argument_list|(
name|targetEntry
operator|+
literal|1
argument_list|,
name|entries
operator|.
name|size
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
argument_list|<
name|E
argument_list|>
name|SortedMultiset
argument_list|<
name|E
argument_list|>
name|subMultiset
parameter_list|(
name|SortedMultiset
argument_list|<
name|E
argument_list|>
name|multiset
parameter_list|,
name|List
argument_list|<
name|Entry
argument_list|<
name|E
argument_list|>
argument_list|>
name|entries
parameter_list|,
name|int
name|targetEntry
parameter_list|)
block|{
return|return
name|multiset
operator|.
name|tailMultiset
argument_list|(
name|entries
operator|.
name|get
argument_list|(
name|targetEntry
argument_list|)
operator|.
name|getElement
argument_list|()
argument_list|,
name|OPEN
argument_list|)
return|;
block|}
block|}
block|,
DECL|enumConstant|HEAD_CLOSED
name|HEAD_CLOSED
block|{
annotation|@
name|Override
argument_list|<
name|E
argument_list|>
name|List
argument_list|<
name|Entry
argument_list|<
name|E
argument_list|>
argument_list|>
name|expectedEntries
parameter_list|(
name|int
name|targetEntry
parameter_list|,
name|List
argument_list|<
name|Entry
argument_list|<
name|E
argument_list|>
argument_list|>
name|entries
parameter_list|)
block|{
return|return
name|entries
operator|.
name|subList
argument_list|(
literal|0
argument_list|,
name|targetEntry
operator|+
literal|1
argument_list|)
return|;
block|}
annotation|@
name|Override
argument_list|<
name|E
argument_list|>
name|SortedMultiset
argument_list|<
name|E
argument_list|>
name|subMultiset
parameter_list|(
name|SortedMultiset
argument_list|<
name|E
argument_list|>
name|multiset
parameter_list|,
name|List
argument_list|<
name|Entry
argument_list|<
name|E
argument_list|>
argument_list|>
name|entries
parameter_list|,
name|int
name|targetEntry
parameter_list|)
block|{
return|return
name|multiset
operator|.
name|headMultiset
argument_list|(
name|entries
operator|.
name|get
argument_list|(
name|targetEntry
argument_list|)
operator|.
name|getElement
argument_list|()
argument_list|,
name|CLOSED
argument_list|)
return|;
block|}
block|}
block|,
DECL|enumConstant|HEAD_OPEN
name|HEAD_OPEN
block|{
annotation|@
name|Override
argument_list|<
name|E
argument_list|>
name|List
argument_list|<
name|Entry
argument_list|<
name|E
argument_list|>
argument_list|>
name|expectedEntries
parameter_list|(
name|int
name|targetEntry
parameter_list|,
name|List
argument_list|<
name|Entry
argument_list|<
name|E
argument_list|>
argument_list|>
name|entries
parameter_list|)
block|{
return|return
name|entries
operator|.
name|subList
argument_list|(
literal|0
argument_list|,
name|targetEntry
argument_list|)
return|;
block|}
annotation|@
name|Override
argument_list|<
name|E
argument_list|>
name|SortedMultiset
argument_list|<
name|E
argument_list|>
name|subMultiset
parameter_list|(
name|SortedMultiset
argument_list|<
name|E
argument_list|>
name|multiset
parameter_list|,
name|List
argument_list|<
name|Entry
argument_list|<
name|E
argument_list|>
argument_list|>
name|entries
parameter_list|,
name|int
name|targetEntry
parameter_list|)
block|{
return|return
name|multiset
operator|.
name|headMultiset
argument_list|(
name|entries
operator|.
name|get
argument_list|(
name|targetEntry
argument_list|)
operator|.
name|getElement
argument_list|()
argument_list|,
name|OPEN
argument_list|)
return|;
block|}
block|}
block|;
DECL|method|expectedEntries (int targetEntry, List<Entry<E>> entries)
specifier|abstract
parameter_list|<
name|E
parameter_list|>
name|List
argument_list|<
name|Entry
argument_list|<
name|E
argument_list|>
argument_list|>
name|expectedEntries
parameter_list|(
name|int
name|targetEntry
parameter_list|,
name|List
argument_list|<
name|Entry
argument_list|<
name|E
argument_list|>
argument_list|>
name|entries
parameter_list|)
function_decl|;
DECL|method|subMultiset (SortedMultiset<E> multiset, List<Entry<E>> entries, int targetEntry)
specifier|abstract
parameter_list|<
name|E
parameter_list|>
name|SortedMultiset
argument_list|<
name|E
argument_list|>
name|subMultiset
parameter_list|(
name|SortedMultiset
argument_list|<
name|E
argument_list|>
name|multiset
parameter_list|,
name|List
argument_list|<
name|Entry
argument_list|<
name|E
argument_list|>
argument_list|>
name|entries
parameter_list|,
name|int
name|targetEntry
parameter_list|)
function_decl|;
block|}
DECL|method|testSubMultisetEntrySet (SubMultisetSpec spec)
specifier|private
name|void
name|testSubMultisetEntrySet
parameter_list|(
name|SubMultisetSpec
name|spec
parameter_list|)
block|{
name|List
argument_list|<
name|Entry
argument_list|<
name|E
argument_list|>
argument_list|>
name|entries
init|=
name|copyToList
argument_list|(
name|sortedMultiset
operator|.
name|entrySet
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|entries
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|List
argument_list|<
name|Entry
argument_list|<
name|E
argument_list|>
argument_list|>
name|expected
init|=
name|spec
operator|.
name|expectedEntries
argument_list|(
name|i
argument_list|,
name|entries
argument_list|)
decl_stmt|;
name|SortedMultiset
argument_list|<
name|E
argument_list|>
name|subMultiset
init|=
name|spec
operator|.
name|subMultiset
argument_list|(
name|sortedMultiset
argument_list|,
name|entries
argument_list|,
name|i
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|copyToList
argument_list|(
name|subMultiset
operator|.
name|entrySet
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testSubMultisetSize (SubMultisetSpec spec)
specifier|private
name|void
name|testSubMultisetSize
parameter_list|(
name|SubMultisetSpec
name|spec
parameter_list|)
block|{
name|List
argument_list|<
name|Entry
argument_list|<
name|E
argument_list|>
argument_list|>
name|entries
init|=
name|copyToList
argument_list|(
name|sortedMultiset
operator|.
name|entrySet
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|entries
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|List
argument_list|<
name|Entry
argument_list|<
name|E
argument_list|>
argument_list|>
name|expected
init|=
name|spec
operator|.
name|expectedEntries
argument_list|(
name|i
argument_list|,
name|entries
argument_list|)
decl_stmt|;
name|SortedMultiset
argument_list|<
name|E
argument_list|>
name|subMultiset
init|=
name|spec
operator|.
name|subMultiset
argument_list|(
name|sortedMultiset
argument_list|,
name|entries
argument_list|,
name|i
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|totalSize
argument_list|(
name|expected
argument_list|)
argument_list|,
name|subMultiset
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testSubMultisetDistinctElements (SubMultisetSpec spec)
specifier|private
name|void
name|testSubMultisetDistinctElements
parameter_list|(
name|SubMultisetSpec
name|spec
parameter_list|)
block|{
name|List
argument_list|<
name|Entry
argument_list|<
name|E
argument_list|>
argument_list|>
name|entries
init|=
name|copyToList
argument_list|(
name|sortedMultiset
operator|.
name|entrySet
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|entries
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|List
argument_list|<
name|Entry
argument_list|<
name|E
argument_list|>
argument_list|>
name|expected
init|=
name|spec
operator|.
name|expectedEntries
argument_list|(
name|i
argument_list|,
name|entries
argument_list|)
decl_stmt|;
name|SortedMultiset
argument_list|<
name|E
argument_list|>
name|subMultiset
init|=
name|spec
operator|.
name|subMultiset
argument_list|(
name|sortedMultiset
argument_list|,
name|entries
argument_list|,
name|i
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|size
argument_list|()
argument_list|,
name|subMultiset
operator|.
name|entrySet
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|size
argument_list|()
argument_list|,
name|subMultiset
operator|.
name|elementSet
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testTailClosedEntrySet ()
specifier|public
name|void
name|testTailClosedEntrySet
parameter_list|()
block|{
name|testSubMultisetEntrySet
argument_list|(
name|SubMultisetSpec
operator|.
name|TAIL_CLOSED
argument_list|)
expr_stmt|;
block|}
DECL|method|testTailClosedSize ()
specifier|public
name|void
name|testTailClosedSize
parameter_list|()
block|{
name|testSubMultisetSize
argument_list|(
name|SubMultisetSpec
operator|.
name|TAIL_CLOSED
argument_list|)
expr_stmt|;
block|}
DECL|method|testTailClosedDistinctElements ()
specifier|public
name|void
name|testTailClosedDistinctElements
parameter_list|()
block|{
name|testSubMultisetDistinctElements
argument_list|(
name|SubMultisetSpec
operator|.
name|TAIL_CLOSED
argument_list|)
expr_stmt|;
block|}
DECL|method|testTailOpenEntrySet ()
specifier|public
name|void
name|testTailOpenEntrySet
parameter_list|()
block|{
name|testSubMultisetEntrySet
argument_list|(
name|SubMultisetSpec
operator|.
name|TAIL_OPEN
argument_list|)
expr_stmt|;
block|}
DECL|method|testTailOpenSize ()
specifier|public
name|void
name|testTailOpenSize
parameter_list|()
block|{
name|testSubMultisetSize
argument_list|(
name|SubMultisetSpec
operator|.
name|TAIL_OPEN
argument_list|)
expr_stmt|;
block|}
DECL|method|testTailOpenDistinctElements ()
specifier|public
name|void
name|testTailOpenDistinctElements
parameter_list|()
block|{
name|testSubMultisetDistinctElements
argument_list|(
name|SubMultisetSpec
operator|.
name|TAIL_OPEN
argument_list|)
expr_stmt|;
block|}
DECL|method|testHeadClosedEntrySet ()
specifier|public
name|void
name|testHeadClosedEntrySet
parameter_list|()
block|{
name|testSubMultisetEntrySet
argument_list|(
name|SubMultisetSpec
operator|.
name|HEAD_CLOSED
argument_list|)
expr_stmt|;
block|}
DECL|method|testHeadClosedSize ()
specifier|public
name|void
name|testHeadClosedSize
parameter_list|()
block|{
name|testSubMultisetSize
argument_list|(
name|SubMultisetSpec
operator|.
name|HEAD_CLOSED
argument_list|)
expr_stmt|;
block|}
DECL|method|testHeadClosedDistinctElements ()
specifier|public
name|void
name|testHeadClosedDistinctElements
parameter_list|()
block|{
name|testSubMultisetDistinctElements
argument_list|(
name|SubMultisetSpec
operator|.
name|HEAD_CLOSED
argument_list|)
expr_stmt|;
block|}
DECL|method|testHeadOpenEntrySet ()
specifier|public
name|void
name|testHeadOpenEntrySet
parameter_list|()
block|{
name|testSubMultisetEntrySet
argument_list|(
name|SubMultisetSpec
operator|.
name|HEAD_OPEN
argument_list|)
expr_stmt|;
block|}
DECL|method|testHeadOpenSize ()
specifier|public
name|void
name|testHeadOpenSize
parameter_list|()
block|{
name|testSubMultisetSize
argument_list|(
name|SubMultisetSpec
operator|.
name|HEAD_OPEN
argument_list|)
expr_stmt|;
block|}
DECL|method|testHeadOpenDistinctElements ()
specifier|public
name|void
name|testHeadOpenDistinctElements
parameter_list|()
block|{
name|testSubMultisetDistinctElements
argument_list|(
name|SubMultisetSpec
operator|.
name|HEAD_OPEN
argument_list|)
expr_stmt|;
block|}
annotation|@
name|CollectionSize
operator|.
name|Require
argument_list|(
name|SEVERAL
argument_list|)
annotation|@
name|CollectionFeature
operator|.
name|Require
argument_list|(
name|SUPPORTS_REMOVE
argument_list|)
DECL|method|testClearTailOpen ()
specifier|public
name|void
name|testClearTailOpen
parameter_list|()
block|{
name|List
argument_list|<
name|Entry
argument_list|<
name|E
argument_list|>
argument_list|>
name|expected
init|=
name|copyToList
argument_list|(
name|sortedMultiset
operator|.
name|headMultiset
argument_list|(
name|b
operator|.
name|getElement
argument_list|()
argument_list|,
name|CLOSED
argument_list|)
operator|.
name|entrySet
argument_list|()
argument_list|)
decl_stmt|;
name|sortedMultiset
operator|.
name|tailMultiset
argument_list|(
name|b
operator|.
name|getElement
argument_list|()
argument_list|,
name|OPEN
argument_list|)
operator|.
name|clear
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|copyToList
argument_list|(
name|sortedMultiset
operator|.
name|entrySet
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|CollectionSize
operator|.
name|Require
argument_list|(
name|SEVERAL
argument_list|)
annotation|@
name|CollectionFeature
operator|.
name|Require
argument_list|(
name|SUPPORTS_REMOVE
argument_list|)
DECL|method|testClearTailOpenEntrySet ()
specifier|public
name|void
name|testClearTailOpenEntrySet
parameter_list|()
block|{
name|List
argument_list|<
name|Entry
argument_list|<
name|E
argument_list|>
argument_list|>
name|expected
init|=
name|copyToList
argument_list|(
name|sortedMultiset
operator|.
name|headMultiset
argument_list|(
name|b
operator|.
name|getElement
argument_list|()
argument_list|,
name|CLOSED
argument_list|)
operator|.
name|entrySet
argument_list|()
argument_list|)
decl_stmt|;
name|sortedMultiset
operator|.
name|tailMultiset
argument_list|(
name|b
operator|.
name|getElement
argument_list|()
argument_list|,
name|OPEN
argument_list|)
operator|.
name|entrySet
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|copyToList
argument_list|(
name|sortedMultiset
operator|.
name|entrySet
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|CollectionSize
operator|.
name|Require
argument_list|(
name|SEVERAL
argument_list|)
annotation|@
name|CollectionFeature
operator|.
name|Require
argument_list|(
name|SUPPORTS_REMOVE
argument_list|)
DECL|method|testClearTailClosed ()
specifier|public
name|void
name|testClearTailClosed
parameter_list|()
block|{
name|List
argument_list|<
name|Entry
argument_list|<
name|E
argument_list|>
argument_list|>
name|expected
init|=
name|copyToList
argument_list|(
name|sortedMultiset
operator|.
name|headMultiset
argument_list|(
name|b
operator|.
name|getElement
argument_list|()
argument_list|,
name|OPEN
argument_list|)
operator|.
name|entrySet
argument_list|()
argument_list|)
decl_stmt|;
name|sortedMultiset
operator|.
name|tailMultiset
argument_list|(
name|b
operator|.
name|getElement
argument_list|()
argument_list|,
name|CLOSED
argument_list|)
operator|.
name|clear
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|copyToList
argument_list|(
name|sortedMultiset
operator|.
name|entrySet
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|CollectionSize
operator|.
name|Require
argument_list|(
name|SEVERAL
argument_list|)
annotation|@
name|CollectionFeature
operator|.
name|Require
argument_list|(
name|SUPPORTS_REMOVE
argument_list|)
DECL|method|testClearTailClosedEntrySet ()
specifier|public
name|void
name|testClearTailClosedEntrySet
parameter_list|()
block|{
name|List
argument_list|<
name|Entry
argument_list|<
name|E
argument_list|>
argument_list|>
name|expected
init|=
name|copyToList
argument_list|(
name|sortedMultiset
operator|.
name|headMultiset
argument_list|(
name|b
operator|.
name|getElement
argument_list|()
argument_list|,
name|OPEN
argument_list|)
operator|.
name|entrySet
argument_list|()
argument_list|)
decl_stmt|;
name|sortedMultiset
operator|.
name|tailMultiset
argument_list|(
name|b
operator|.
name|getElement
argument_list|()
argument_list|,
name|CLOSED
argument_list|)
operator|.
name|entrySet
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|copyToList
argument_list|(
name|sortedMultiset
operator|.
name|entrySet
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|CollectionSize
operator|.
name|Require
argument_list|(
name|SEVERAL
argument_list|)
annotation|@
name|CollectionFeature
operator|.
name|Require
argument_list|(
name|SUPPORTS_REMOVE
argument_list|)
DECL|method|testClearHeadOpen ()
specifier|public
name|void
name|testClearHeadOpen
parameter_list|()
block|{
name|List
argument_list|<
name|Entry
argument_list|<
name|E
argument_list|>
argument_list|>
name|expected
init|=
name|copyToList
argument_list|(
name|sortedMultiset
operator|.
name|tailMultiset
argument_list|(
name|b
operator|.
name|getElement
argument_list|()
argument_list|,
name|CLOSED
argument_list|)
operator|.
name|entrySet
argument_list|()
argument_list|)
decl_stmt|;
name|sortedMultiset
operator|.
name|headMultiset
argument_list|(
name|b
operator|.
name|getElement
argument_list|()
argument_list|,
name|OPEN
argument_list|)
operator|.
name|clear
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|copyToList
argument_list|(
name|sortedMultiset
operator|.
name|entrySet
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|CollectionSize
operator|.
name|Require
argument_list|(
name|SEVERAL
argument_list|)
annotation|@
name|CollectionFeature
operator|.
name|Require
argument_list|(
name|SUPPORTS_REMOVE
argument_list|)
DECL|method|testClearHeadOpenEntrySet ()
specifier|public
name|void
name|testClearHeadOpenEntrySet
parameter_list|()
block|{
name|List
argument_list|<
name|Entry
argument_list|<
name|E
argument_list|>
argument_list|>
name|expected
init|=
name|copyToList
argument_list|(
name|sortedMultiset
operator|.
name|tailMultiset
argument_list|(
name|b
operator|.
name|getElement
argument_list|()
argument_list|,
name|CLOSED
argument_list|)
operator|.
name|entrySet
argument_list|()
argument_list|)
decl_stmt|;
name|sortedMultiset
operator|.
name|headMultiset
argument_list|(
name|b
operator|.
name|getElement
argument_list|()
argument_list|,
name|OPEN
argument_list|)
operator|.
name|entrySet
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|copyToList
argument_list|(
name|sortedMultiset
operator|.
name|entrySet
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|CollectionSize
operator|.
name|Require
argument_list|(
name|SEVERAL
argument_list|)
annotation|@
name|CollectionFeature
operator|.
name|Require
argument_list|(
name|SUPPORTS_REMOVE
argument_list|)
DECL|method|testClearHeadClosed ()
specifier|public
name|void
name|testClearHeadClosed
parameter_list|()
block|{
name|List
argument_list|<
name|Entry
argument_list|<
name|E
argument_list|>
argument_list|>
name|expected
init|=
name|copyToList
argument_list|(
name|sortedMultiset
operator|.
name|tailMultiset
argument_list|(
name|b
operator|.
name|getElement
argument_list|()
argument_list|,
name|OPEN
argument_list|)
operator|.
name|entrySet
argument_list|()
argument_list|)
decl_stmt|;
name|sortedMultiset
operator|.
name|headMultiset
argument_list|(
name|b
operator|.
name|getElement
argument_list|()
argument_list|,
name|CLOSED
argument_list|)
operator|.
name|clear
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|copyToList
argument_list|(
name|sortedMultiset
operator|.
name|entrySet
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|CollectionSize
operator|.
name|Require
argument_list|(
name|SEVERAL
argument_list|)
annotation|@
name|CollectionFeature
operator|.
name|Require
argument_list|(
name|SUPPORTS_REMOVE
argument_list|)
DECL|method|testClearHeadClosedEntrySet ()
specifier|public
name|void
name|testClearHeadClosedEntrySet
parameter_list|()
block|{
name|List
argument_list|<
name|Entry
argument_list|<
name|E
argument_list|>
argument_list|>
name|expected
init|=
name|copyToList
argument_list|(
name|sortedMultiset
operator|.
name|tailMultiset
argument_list|(
name|b
operator|.
name|getElement
argument_list|()
argument_list|,
name|OPEN
argument_list|)
operator|.
name|entrySet
argument_list|()
argument_list|)
decl_stmt|;
name|sortedMultiset
operator|.
name|headMultiset
argument_list|(
name|b
operator|.
name|getElement
argument_list|()
argument_list|,
name|CLOSED
argument_list|)
operator|.
name|entrySet
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|copyToList
argument_list|(
name|sortedMultiset
operator|.
name|entrySet
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

