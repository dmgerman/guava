begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2012 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.collect.testing.google
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|google
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtCompatible
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|BiMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|AbstractTester
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|FeatureSpecificTestSuiteBuilder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|Helpers
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|MapTestSuiteBuilder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|OneSizeTestContainerGenerator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|PerCollectionSizeTestSuiteBuilder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|SampleElements
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|SetTestSuiteBuilder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|TestMapGenerator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|TestSetGenerator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|features
operator|.
name|CollectionFeature
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|features
operator|.
name|CollectionSize
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|features
operator|.
name|Feature
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|features
operator|.
name|MapFeature
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestSuite
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**  * Creates, based on your criteria, a JUnit test suite that exhaustively tests a {@code BiMap}  * implementation.  *  * @author Louis Wasserman  */
end_comment

begin_class
annotation|@
name|GwtCompatible
DECL|class|BiMapTestSuiteBuilder
specifier|public
class|class
name|BiMapTestSuiteBuilder
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
extends|extends
name|PerCollectionSizeTestSuiteBuilder
argument_list|<
name|BiMapTestSuiteBuilder
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|,
name|TestBiMapGenerator
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|,
name|BiMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|,
name|Map
operator|.
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
block|{
DECL|method|using (TestBiMapGenerator<K, V> generator)
specifier|public
specifier|static
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
name|BiMapTestSuiteBuilder
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|using
parameter_list|(
name|TestBiMapGenerator
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|generator
parameter_list|)
block|{
return|return
operator|new
name|BiMapTestSuiteBuilder
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|()
operator|.
name|usingGenerator
argument_list|(
name|generator
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getTesters ()
specifier|protected
name|List
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|AbstractTester
argument_list|>
argument_list|>
name|getTesters
parameter_list|()
block|{
name|List
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|AbstractTester
argument_list|>
argument_list|>
name|testers
init|=
operator|new
name|ArrayList
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|AbstractTester
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|testers
operator|.
name|add
argument_list|(
name|BiMapPutTester
operator|.
name|class
argument_list|)
expr_stmt|;
return|return
name|testers
return|;
block|}
DECL|enum|NoRecurse
enum|enum
name|NoRecurse
implements|implements
name|Feature
argument_list|<
name|Void
argument_list|>
block|{
DECL|enumConstant|INVERSE
name|INVERSE
block|;
annotation|@
name|Override
DECL|method|getImpliedFeatures ()
specifier|public
name|Set
argument_list|<
name|Feature
argument_list|<
name|?
super|super
name|Void
argument_list|>
argument_list|>
name|getImpliedFeatures
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|emptySet
argument_list|()
return|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|List
argument_list|<
name|TestSuite
argument_list|>
DECL|method|createDerivedSuites ( FeatureSpecificTestSuiteBuilder<?, ? extends OneSizeTestContainerGenerator<BiMap<K, V>, Entry<K, V>>> parentBuilder)
name|createDerivedSuites
parameter_list|(
name|FeatureSpecificTestSuiteBuilder
argument_list|<
name|?
argument_list|,
name|?
extends|extends
name|OneSizeTestContainerGenerator
argument_list|<
name|BiMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|,
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
argument_list|>
name|parentBuilder
parameter_list|)
block|{
name|List
argument_list|<
name|TestSuite
argument_list|>
name|derived
init|=
name|super
operator|.
name|createDerivedSuites
argument_list|(
name|parentBuilder
argument_list|)
decl_stmt|;
comment|// TODO(cpovirk): consider using this approach (derived suites instead of extension) in
comment|// ListTestSuiteBuilder, etc.?
name|derived
operator|.
name|add
argument_list|(
name|MapTestSuiteBuilder
operator|.
name|using
argument_list|(
operator|new
name|MapGenerator
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|(
name|parentBuilder
operator|.
name|getSubjectGenerator
argument_list|()
argument_list|)
argument_list|)
operator|.
name|withFeatures
argument_list|(
name|parentBuilder
operator|.
name|getFeatures
argument_list|()
argument_list|)
operator|.
name|named
argument_list|(
name|parentBuilder
operator|.
name|getName
argument_list|()
operator|+
literal|" [Map]"
argument_list|)
operator|.
name|suppressing
argument_list|(
name|parentBuilder
operator|.
name|getSuppressedTests
argument_list|()
argument_list|)
operator|.
name|createTestSuite
argument_list|()
argument_list|)
expr_stmt|;
comment|/*      * TODO(cpovirk): the Map tests duplicate most of this effort by using a      * CollectionTestSuiteBuilder on values(). It would be nice to avoid that      */
name|derived
operator|.
name|add
argument_list|(
name|SetTestSuiteBuilder
operator|.
name|using
argument_list|(
operator|new
name|BiMapValueSetGenerator
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|(
name|parentBuilder
operator|.
name|getSubjectGenerator
argument_list|()
argument_list|)
argument_list|)
operator|.
name|withFeatures
argument_list|(
name|computeValuesSetFeatures
argument_list|(
name|parentBuilder
operator|.
name|getFeatures
argument_list|()
argument_list|)
argument_list|)
operator|.
name|named
argument_list|(
name|parentBuilder
operator|.
name|getName
argument_list|()
operator|+
literal|" values [Set]"
argument_list|)
operator|.
name|suppressing
argument_list|(
name|parentBuilder
operator|.
name|getSuppressedTests
argument_list|()
argument_list|)
operator|.
name|createTestSuite
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|parentBuilder
operator|.
name|getFeatures
argument_list|()
operator|.
name|contains
argument_list|(
name|NoRecurse
operator|.
name|INVERSE
argument_list|)
condition|)
block|{
name|derived
operator|.
name|add
argument_list|(
name|BiMapTestSuiteBuilder
operator|.
name|using
argument_list|(
operator|new
name|InverseBiMapGenerator
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|(
name|parentBuilder
operator|.
name|getSubjectGenerator
argument_list|()
argument_list|)
argument_list|)
operator|.
name|withFeatures
argument_list|(
name|computeInverseFeatures
argument_list|(
name|parentBuilder
operator|.
name|getFeatures
argument_list|()
argument_list|)
argument_list|)
operator|.
name|named
argument_list|(
name|parentBuilder
operator|.
name|getName
argument_list|()
operator|+
literal|" inverse"
argument_list|)
operator|.
name|suppressing
argument_list|(
name|parentBuilder
operator|.
name|getSuppressedTests
argument_list|()
argument_list|)
operator|.
name|createTestSuite
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|derived
return|;
block|}
DECL|method|computeInverseFeatures (Set<Feature<?>> mapFeatures)
specifier|private
specifier|static
name|Set
argument_list|<
name|Feature
argument_list|<
name|?
argument_list|>
argument_list|>
name|computeInverseFeatures
parameter_list|(
name|Set
argument_list|<
name|Feature
argument_list|<
name|?
argument_list|>
argument_list|>
name|mapFeatures
parameter_list|)
block|{
name|Set
argument_list|<
name|Feature
argument_list|<
name|?
argument_list|>
argument_list|>
name|inverseFeatures
init|=
operator|new
name|HashSet
argument_list|<
name|Feature
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|(
name|mapFeatures
argument_list|)
decl_stmt|;
name|inverseFeatures
operator|.
name|add
argument_list|(
name|NoRecurse
operator|.
name|INVERSE
argument_list|)
expr_stmt|;
name|inverseFeatures
operator|.
name|remove
argument_list|(
name|CollectionFeature
operator|.
name|KNOWN_ORDER
argument_list|)
expr_stmt|;
return|return
name|inverseFeatures
return|;
block|}
comment|// TODO(user): can we eliminate the duplication from MapTestSuiteBuilder here?
DECL|method|computeValuesSetFeatures ( Set<Feature<?>> mapFeatures)
specifier|private
specifier|static
name|Set
argument_list|<
name|Feature
argument_list|<
name|?
argument_list|>
argument_list|>
name|computeValuesSetFeatures
parameter_list|(
name|Set
argument_list|<
name|Feature
argument_list|<
name|?
argument_list|>
argument_list|>
name|mapFeatures
parameter_list|)
block|{
name|Set
argument_list|<
name|Feature
argument_list|<
name|?
argument_list|>
argument_list|>
name|valuesCollectionFeatures
init|=
name|computeCommonDerivedCollectionFeatures
argument_list|(
name|mapFeatures
argument_list|)
decl_stmt|;
name|valuesCollectionFeatures
operator|.
name|add
argument_list|(
name|CollectionFeature
operator|.
name|ALLOWS_NULL_QUERIES
argument_list|)
expr_stmt|;
if|if
condition|(
name|mapFeatures
operator|.
name|contains
argument_list|(
name|MapFeature
operator|.
name|ALLOWS_NULL_VALUES
argument_list|)
condition|)
block|{
name|valuesCollectionFeatures
operator|.
name|add
argument_list|(
name|CollectionFeature
operator|.
name|ALLOWS_NULL_VALUES
argument_list|)
expr_stmt|;
block|}
return|return
name|valuesCollectionFeatures
return|;
block|}
DECL|method|computeCommonDerivedCollectionFeatures ( Set<Feature<?>> mapFeatures)
specifier|private
specifier|static
name|Set
argument_list|<
name|Feature
argument_list|<
name|?
argument_list|>
argument_list|>
name|computeCommonDerivedCollectionFeatures
parameter_list|(
name|Set
argument_list|<
name|Feature
argument_list|<
name|?
argument_list|>
argument_list|>
name|mapFeatures
parameter_list|)
block|{
name|Set
argument_list|<
name|Feature
argument_list|<
name|?
argument_list|>
argument_list|>
name|derivedFeatures
init|=
operator|new
name|HashSet
argument_list|<
name|Feature
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|mapFeatures
operator|.
name|contains
argument_list|(
name|MapFeature
operator|.
name|SUPPORTS_REMOVE
argument_list|)
condition|)
block|{
name|derivedFeatures
operator|.
name|add
argument_list|(
name|CollectionFeature
operator|.
name|SUPPORTS_REMOVE
argument_list|)
expr_stmt|;
name|derivedFeatures
operator|.
name|add
argument_list|(
name|CollectionFeature
operator|.
name|SUPPORTS_REMOVE_ALL
argument_list|)
expr_stmt|;
name|derivedFeatures
operator|.
name|add
argument_list|(
name|CollectionFeature
operator|.
name|SUPPORTS_RETAIN_ALL
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|mapFeatures
operator|.
name|contains
argument_list|(
name|MapFeature
operator|.
name|SUPPORTS_CLEAR
argument_list|)
condition|)
block|{
name|derivedFeatures
operator|.
name|add
argument_list|(
name|CollectionFeature
operator|.
name|SUPPORTS_CLEAR
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|mapFeatures
operator|.
name|contains
argument_list|(
name|MapFeature
operator|.
name|REJECTS_DUPLICATES_AT_CREATION
argument_list|)
condition|)
block|{
name|derivedFeatures
operator|.
name|add
argument_list|(
name|CollectionFeature
operator|.
name|REJECTS_DUPLICATES_AT_CREATION
argument_list|)
expr_stmt|;
block|}
comment|// add the intersection of CollectionSize.values() and mapFeatures
for|for
control|(
name|CollectionSize
name|size
range|:
name|CollectionSize
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|mapFeatures
operator|.
name|contains
argument_list|(
name|size
argument_list|)
condition|)
block|{
name|derivedFeatures
operator|.
name|add
argument_list|(
name|size
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|derivedFeatures
return|;
block|}
DECL|class|MapGenerator
specifier|private
specifier|static
class|class
name|MapGenerator
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
implements|implements
name|TestMapGenerator
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
block|{
DECL|field|generator
specifier|private
specifier|final
name|OneSizeTestContainerGenerator
argument_list|<
name|BiMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|,
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|generator
decl_stmt|;
DECL|method|MapGenerator ( OneSizeTestContainerGenerator<BiMap<K, V>, Entry<K, V>> oneSizeTestContainerGenerator)
specifier|public
name|MapGenerator
parameter_list|(
name|OneSizeTestContainerGenerator
argument_list|<
name|BiMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|,
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|oneSizeTestContainerGenerator
parameter_list|)
block|{
name|this
operator|.
name|generator
operator|=
name|oneSizeTestContainerGenerator
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|samples ()
specifier|public
name|SampleElements
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|samples
parameter_list|()
block|{
return|return
name|generator
operator|.
name|samples
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|create (Object... elements)
specifier|public
name|Map
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|create
parameter_list|(
name|Object
modifier|...
name|elements
parameter_list|)
block|{
return|return
name|generator
operator|.
name|create
argument_list|(
name|elements
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|createArray (int length)
specifier|public
name|Map
operator|.
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
index|[]
name|createArray
parameter_list|(
name|int
name|length
parameter_list|)
block|{
return|return
name|generator
operator|.
name|createArray
argument_list|(
name|length
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|order (List<Map.Entry<K, V>> insertionOrder)
specifier|public
name|Iterable
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|order
parameter_list|(
name|List
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|insertionOrder
parameter_list|)
block|{
return|return
name|generator
operator|.
name|order
argument_list|(
name|insertionOrder
argument_list|)
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
DECL|method|createKeyArray (int length)
specifier|public
name|K
index|[]
name|createKeyArray
parameter_list|(
name|int
name|length
parameter_list|)
block|{
return|return
operator|(
name|K
index|[]
operator|)
operator|new
name|Object
index|[
name|length
index|]
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
DECL|method|createValueArray (int length)
specifier|public
name|V
index|[]
name|createValueArray
parameter_list|(
name|int
name|length
parameter_list|)
block|{
return|return
operator|(
name|V
index|[]
operator|)
operator|new
name|Object
index|[
name|length
index|]
return|;
block|}
block|}
DECL|class|InverseBiMapGenerator
specifier|private
specifier|static
class|class
name|InverseBiMapGenerator
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
implements|implements
name|TestBiMapGenerator
argument_list|<
name|V
argument_list|,
name|K
argument_list|>
block|{
DECL|field|generator
specifier|private
specifier|final
name|OneSizeTestContainerGenerator
argument_list|<
name|BiMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|,
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|generator
decl_stmt|;
DECL|method|InverseBiMapGenerator ( OneSizeTestContainerGenerator<BiMap<K, V>, Entry<K, V>> oneSizeTestContainerGenerator)
specifier|public
name|InverseBiMapGenerator
parameter_list|(
name|OneSizeTestContainerGenerator
argument_list|<
name|BiMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|,
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|oneSizeTestContainerGenerator
parameter_list|)
block|{
name|this
operator|.
name|generator
operator|=
name|oneSizeTestContainerGenerator
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|samples ()
specifier|public
name|SampleElements
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|V
argument_list|,
name|K
argument_list|>
argument_list|>
name|samples
parameter_list|()
block|{
name|SampleElements
argument_list|<
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|samples
init|=
name|generator
operator|.
name|samples
argument_list|()
decl_stmt|;
return|return
operator|new
name|SampleElements
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|V
argument_list|,
name|K
argument_list|>
argument_list|>
argument_list|(
name|reverse
argument_list|(
name|samples
operator|.
name|e0
argument_list|)
argument_list|,
name|reverse
argument_list|(
name|samples
operator|.
name|e1
argument_list|)
argument_list|,
name|reverse
argument_list|(
name|samples
operator|.
name|e2
argument_list|)
argument_list|,
name|reverse
argument_list|(
name|samples
operator|.
name|e3
argument_list|)
argument_list|,
name|reverse
argument_list|(
name|samples
operator|.
name|e4
argument_list|)
argument_list|)
return|;
block|}
DECL|method|reverse (Map.Entry<K, V> entry)
specifier|private
name|Map
operator|.
name|Entry
argument_list|<
name|V
argument_list|,
name|K
argument_list|>
name|reverse
parameter_list|(
name|Map
operator|.
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|entry
parameter_list|)
block|{
return|return
name|Helpers
operator|.
name|mapEntry
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
DECL|method|create (Object... elements)
specifier|public
name|BiMap
argument_list|<
name|V
argument_list|,
name|K
argument_list|>
name|create
parameter_list|(
name|Object
modifier|...
name|elements
parameter_list|)
block|{
name|Entry
index|[]
name|entries
init|=
operator|new
name|Entry
index|[
name|elements
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|elements
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|entries
index|[
name|i
index|]
operator|=
name|reverse
argument_list|(
operator|(
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
operator|)
name|elements
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|generator
operator|.
name|create
argument_list|(
operator|(
name|Object
index|[]
operator|)
name|entries
argument_list|)
operator|.
name|inverse
argument_list|()
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
DECL|method|createArray (int length)
specifier|public
name|Map
operator|.
name|Entry
argument_list|<
name|V
argument_list|,
name|K
argument_list|>
index|[]
name|createArray
parameter_list|(
name|int
name|length
parameter_list|)
block|{
return|return
operator|new
name|Entry
index|[
name|length
index|]
return|;
block|}
annotation|@
name|Override
DECL|method|order (List<Entry<V, K>> insertionOrder)
specifier|public
name|Iterable
argument_list|<
name|Entry
argument_list|<
name|V
argument_list|,
name|K
argument_list|>
argument_list|>
name|order
parameter_list|(
name|List
argument_list|<
name|Entry
argument_list|<
name|V
argument_list|,
name|K
argument_list|>
argument_list|>
name|insertionOrder
parameter_list|)
block|{
return|return
name|insertionOrder
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
DECL|method|createKeyArray (int length)
specifier|public
name|V
index|[]
name|createKeyArray
parameter_list|(
name|int
name|length
parameter_list|)
block|{
return|return
operator|(
name|V
index|[]
operator|)
operator|new
name|Object
index|[
name|length
index|]
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
DECL|method|createValueArray (int length)
specifier|public
name|K
index|[]
name|createValueArray
parameter_list|(
name|int
name|length
parameter_list|)
block|{
return|return
operator|(
name|K
index|[]
operator|)
operator|new
name|Object
index|[
name|length
index|]
return|;
block|}
block|}
DECL|class|BiMapValueSetGenerator
specifier|private
specifier|static
class|class
name|BiMapValueSetGenerator
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
implements|implements
name|TestSetGenerator
argument_list|<
name|V
argument_list|>
block|{
specifier|private
specifier|final
name|OneSizeTestContainerGenerator
argument_list|<
name|BiMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|,
name|Map
operator|.
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
DECL|field|mapGenerator
name|mapGenerator
decl_stmt|;
DECL|field|samples
specifier|private
specifier|final
name|SampleElements
argument_list|<
name|V
argument_list|>
name|samples
decl_stmt|;
DECL|method|BiMapValueSetGenerator ( OneSizeTestContainerGenerator<BiMap<K, V>, Entry<K, V>> mapGenerator)
specifier|public
name|BiMapValueSetGenerator
parameter_list|(
name|OneSizeTestContainerGenerator
argument_list|<
name|BiMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|,
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|mapGenerator
parameter_list|)
block|{
name|this
operator|.
name|mapGenerator
operator|=
name|mapGenerator
expr_stmt|;
specifier|final
name|SampleElements
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|mapSamples
init|=
name|this
operator|.
name|mapGenerator
operator|.
name|samples
argument_list|()
decl_stmt|;
name|this
operator|.
name|samples
operator|=
operator|new
name|SampleElements
argument_list|<
name|V
argument_list|>
argument_list|(
name|mapSamples
operator|.
name|e0
operator|.
name|getValue
argument_list|()
argument_list|,
name|mapSamples
operator|.
name|e1
operator|.
name|getValue
argument_list|()
argument_list|,
name|mapSamples
operator|.
name|e2
operator|.
name|getValue
argument_list|()
argument_list|,
name|mapSamples
operator|.
name|e3
operator|.
name|getValue
argument_list|()
argument_list|,
name|mapSamples
operator|.
name|e4
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|samples ()
specifier|public
name|SampleElements
argument_list|<
name|V
argument_list|>
name|samples
parameter_list|()
block|{
return|return
name|samples
return|;
block|}
annotation|@
name|Override
DECL|method|create (Object... elements)
specifier|public
name|Set
argument_list|<
name|V
argument_list|>
name|create
parameter_list|(
name|Object
modifier|...
name|elements
parameter_list|)
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|V
index|[]
name|valuesArray
init|=
operator|(
name|V
index|[]
operator|)
name|elements
decl_stmt|;
comment|// Start with a suitably shaped collection of entries
name|Collection
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|originalEntries
init|=
name|mapGenerator
operator|.
name|getSampleElements
argument_list|(
name|elements
operator|.
name|length
argument_list|)
decl_stmt|;
comment|// Create a copy of that, with the desired value for each value
name|Collection
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|entries
init|=
operator|new
name|ArrayList
argument_list|<
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
argument_list|(
name|elements
operator|.
name|length
argument_list|)
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|entry
range|:
name|originalEntries
control|)
block|{
name|entries
operator|.
name|add
argument_list|(
name|Helpers
operator|.
name|mapEntry
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|valuesArray
index|[
name|i
operator|++
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|mapGenerator
operator|.
name|create
argument_list|(
name|entries
operator|.
name|toArray
argument_list|()
argument_list|)
operator|.
name|values
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|createArray (int length)
specifier|public
name|V
index|[]
name|createArray
parameter_list|(
name|int
name|length
parameter_list|)
block|{
specifier|final
name|V
index|[]
name|vs
init|=
operator|(
operator|(
name|TestBiMapGenerator
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
operator|)
name|mapGenerator
operator|.
name|getInnerGenerator
argument_list|()
operator|)
operator|.
name|createValueArray
argument_list|(
name|length
argument_list|)
decl_stmt|;
return|return
name|vs
return|;
block|}
annotation|@
name|Override
DECL|method|order (List<V> insertionOrder)
specifier|public
name|Iterable
argument_list|<
name|V
argument_list|>
name|order
parameter_list|(
name|List
argument_list|<
name|V
argument_list|>
name|insertionOrder
parameter_list|)
block|{
return|return
name|insertionOrder
return|;
block|}
block|}
block|}
end_class

end_unit

