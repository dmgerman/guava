begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2013 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.collect.testing.google
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|google
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|Helpers
operator|.
name|assertEmpty
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|features
operator|.
name|CollectionSize
operator|.
name|ZERO
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|features
operator|.
name|MapFeature
operator|.
name|SUPPORTS_REMOVE
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|google
operator|.
name|GoogleHelpers
operator|.
name|assertEmpty
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtCompatible
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Multimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|features
operator|.
name|CollectionSize
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|features
operator|.
name|MapFeature
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_comment
comment|/**  * Tests for {@link Multimap#clear()}.  *  * @author Louis Wasserman  */
end_comment

begin_class
annotation|@
name|GwtCompatible
annotation|@
name|SuppressUnderAndroid
DECL|class|MultimapClearTester
specifier|public
class|class
name|MultimapClearTester
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
extends|extends
name|AbstractMultimapTester
argument_list|<
name|K
argument_list|,
name|V
argument_list|,
name|Multimap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
block|{
annotation|@
name|CollectionSize
operator|.
name|Require
argument_list|(
name|absent
operator|=
name|ZERO
argument_list|)
annotation|@
name|MapFeature
operator|.
name|Require
argument_list|(
name|absent
operator|=
name|SUPPORTS_REMOVE
argument_list|)
DECL|method|testClearUnsupported ()
specifier|public
name|void
name|testClearUnsupported
parameter_list|()
block|{
try|try
block|{
name|multimap
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Expected UnsupportedOperationException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|expected
parameter_list|)
block|{}
block|}
DECL|method|assertCleared ()
specifier|private
name|void
name|assertCleared
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|multimap
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEmpty
argument_list|(
name|multimap
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|multimap
argument_list|()
argument_list|,
name|getSubjectGenerator
argument_list|()
operator|.
name|create
argument_list|()
argument_list|)
expr_stmt|;
name|assertEmpty
argument_list|(
name|multimap
argument_list|()
operator|.
name|entries
argument_list|()
argument_list|)
expr_stmt|;
name|assertEmpty
argument_list|(
name|multimap
argument_list|()
operator|.
name|asMap
argument_list|()
argument_list|)
expr_stmt|;
name|assertEmpty
argument_list|(
name|multimap
argument_list|()
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
name|assertEmpty
argument_list|(
name|multimap
argument_list|()
operator|.
name|keys
argument_list|()
argument_list|)
expr_stmt|;
name|assertEmpty
argument_list|(
name|multimap
argument_list|()
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|K
name|key
range|:
name|sampleKeys
argument_list|()
control|)
block|{
name|assertGet
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|MapFeature
operator|.
name|Require
argument_list|(
name|SUPPORTS_REMOVE
argument_list|)
DECL|method|testClear ()
specifier|public
name|void
name|testClear
parameter_list|()
block|{
name|multimap
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
name|assertCleared
argument_list|()
expr_stmt|;
block|}
annotation|@
name|MapFeature
operator|.
name|Require
argument_list|(
name|SUPPORTS_REMOVE
argument_list|)
DECL|method|testClearThroughEntries ()
specifier|public
name|void
name|testClearThroughEntries
parameter_list|()
block|{
name|multimap
argument_list|()
operator|.
name|entries
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
name|assertCleared
argument_list|()
expr_stmt|;
block|}
annotation|@
name|MapFeature
operator|.
name|Require
argument_list|(
name|SUPPORTS_REMOVE
argument_list|)
DECL|method|testClearThroughAsMap ()
specifier|public
name|void
name|testClearThroughAsMap
parameter_list|()
block|{
name|multimap
argument_list|()
operator|.
name|asMap
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
name|assertCleared
argument_list|()
expr_stmt|;
block|}
annotation|@
name|MapFeature
operator|.
name|Require
argument_list|(
name|SUPPORTS_REMOVE
argument_list|)
DECL|method|testClearThroughKeySet ()
specifier|public
name|void
name|testClearThroughKeySet
parameter_list|()
block|{
name|multimap
argument_list|()
operator|.
name|keySet
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
name|assertCleared
argument_list|()
expr_stmt|;
block|}
annotation|@
name|MapFeature
operator|.
name|Require
argument_list|(
name|SUPPORTS_REMOVE
argument_list|)
DECL|method|testClearThroughKeys ()
specifier|public
name|void
name|testClearThroughKeys
parameter_list|()
block|{
name|multimap
argument_list|()
operator|.
name|keys
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
name|assertCleared
argument_list|()
expr_stmt|;
block|}
annotation|@
name|MapFeature
operator|.
name|Require
argument_list|(
name|SUPPORTS_REMOVE
argument_list|)
DECL|method|testClearThroughValues ()
specifier|public
name|void
name|testClearThroughValues
parameter_list|()
block|{
name|multimap
argument_list|()
operator|.
name|values
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
name|assertCleared
argument_list|()
expr_stmt|;
block|}
annotation|@
name|MapFeature
operator|.
name|Require
argument_list|(
name|SUPPORTS_REMOVE
argument_list|)
annotation|@
name|CollectionSize
operator|.
name|Require
argument_list|(
name|absent
operator|=
name|ZERO
argument_list|)
DECL|method|testClearPropagatesToGet ()
specifier|public
name|void
name|testClearPropagatesToGet
parameter_list|()
block|{
for|for
control|(
name|K
name|key
range|:
name|sampleKeys
argument_list|()
control|)
block|{
name|resetContainer
argument_list|()
expr_stmt|;
name|Collection
argument_list|<
name|V
argument_list|>
name|collection
init|=
name|multimap
argument_list|()
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|multimap
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
name|assertEmpty
argument_list|(
name|collection
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|MapFeature
operator|.
name|Require
argument_list|(
name|SUPPORTS_REMOVE
argument_list|)
annotation|@
name|CollectionSize
operator|.
name|Require
argument_list|(
name|absent
operator|=
name|ZERO
argument_list|)
DECL|method|testClearPropagatesToAsMapGet ()
specifier|public
name|void
name|testClearPropagatesToAsMapGet
parameter_list|()
block|{
for|for
control|(
name|K
name|key
range|:
name|sampleKeys
argument_list|()
control|)
block|{
name|resetContainer
argument_list|()
expr_stmt|;
name|Collection
argument_list|<
name|V
argument_list|>
name|collection
init|=
name|multimap
argument_list|()
operator|.
name|asMap
argument_list|()
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|collection
operator|!=
literal|null
condition|)
block|{
name|multimap
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
name|assertEmpty
argument_list|(
name|collection
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|MapFeature
operator|.
name|Require
argument_list|(
name|SUPPORTS_REMOVE
argument_list|)
DECL|method|testClearPropagatesToAsMap ()
specifier|public
name|void
name|testClearPropagatesToAsMap
parameter_list|()
block|{
name|Map
argument_list|<
name|K
argument_list|,
name|Collection
argument_list|<
name|V
argument_list|>
argument_list|>
name|asMap
init|=
name|multimap
argument_list|()
operator|.
name|asMap
argument_list|()
decl_stmt|;
name|multimap
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
name|assertEmpty
argument_list|(
name|asMap
argument_list|)
expr_stmt|;
block|}
annotation|@
name|MapFeature
operator|.
name|Require
argument_list|(
name|SUPPORTS_REMOVE
argument_list|)
DECL|method|testClearPropagatesToEntries ()
specifier|public
name|void
name|testClearPropagatesToEntries
parameter_list|()
block|{
name|Collection
argument_list|<
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|entries
init|=
name|multimap
argument_list|()
operator|.
name|entries
argument_list|()
decl_stmt|;
name|multimap
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
name|assertEmpty
argument_list|(
name|entries
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

