begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2008 Google Inc.  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.collect.testing
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
package|;
end_package

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_comment
comment|/**  * This abstract base class for testers allows the framework to inject needed  * information after JUnit constructs the instances.  *  *<p>This class is emulated in GWT.  *  * @param<G> the type of the test generator required by this tester. An  * instance of G should somehow provide an instance of the class under test,  * plus any other information required to parameterize the test.  *  * @author George van den Driessche  */
end_comment

begin_class
DECL|class|AbstractTester
specifier|public
class|class
name|AbstractTester
parameter_list|<
name|G
parameter_list|>
extends|extends
name|TestCase
block|{
DECL|field|subjectGenerator
specifier|private
name|G
name|subjectGenerator
decl_stmt|;
DECL|field|suiteName
specifier|private
name|String
name|suiteName
decl_stmt|;
DECL|field|setUp
specifier|private
name|Runnable
name|setUp
decl_stmt|;
DECL|field|tearDown
specifier|private
name|Runnable
name|tearDown
decl_stmt|;
comment|// public so that it can be referenced in generated GWT tests.
DECL|method|setUp ()
annotation|@
name|Override
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|setUp
operator|!=
literal|null
condition|)
block|{
name|setUp
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
block|}
comment|// public so that it can be referenced in generated GWT tests.
DECL|method|tearDown ()
annotation|@
name|Override
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|tearDown
operator|!=
literal|null
condition|)
block|{
name|tearDown
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
block|}
comment|// public so that it can be referenced in generated GWT tests.
DECL|method|init ( G subjectGenerator, String suiteName, Runnable setUp, Runnable tearDown)
specifier|public
specifier|final
name|void
name|init
parameter_list|(
name|G
name|subjectGenerator
parameter_list|,
name|String
name|suiteName
parameter_list|,
name|Runnable
name|setUp
parameter_list|,
name|Runnable
name|tearDown
parameter_list|)
block|{
name|this
operator|.
name|subjectGenerator
operator|=
name|subjectGenerator
expr_stmt|;
name|this
operator|.
name|suiteName
operator|=
name|suiteName
expr_stmt|;
name|this
operator|.
name|setUp
operator|=
name|setUp
expr_stmt|;
name|this
operator|.
name|tearDown
operator|=
name|tearDown
expr_stmt|;
block|}
comment|// public so that it can be referenced in generated GWT tests.
DECL|method|init (G subjectGenerator, String suiteName)
specifier|public
specifier|final
name|void
name|init
parameter_list|(
name|G
name|subjectGenerator
parameter_list|,
name|String
name|suiteName
parameter_list|)
block|{
name|init
argument_list|(
name|subjectGenerator
argument_list|,
name|suiteName
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|getSubjectGenerator ()
specifier|public
name|G
name|getSubjectGenerator
parameter_list|()
block|{
return|return
name|subjectGenerator
return|;
block|}
comment|/** Returns the name of the test method invoked by this test instance. */
DECL|method|getTestMethodName ()
specifier|public
specifier|final
name|String
name|getTestMethodName
parameter_list|()
block|{
return|return
name|super
operator|.
name|getName
argument_list|()
return|;
block|}
DECL|method|getName ()
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|Platform
operator|.
name|format
argument_list|(
literal|"%s[%s]"
argument_list|,
name|super
operator|.
name|getName
argument_list|()
argument_list|,
name|suiteName
argument_list|)
return|;
block|}
block|}
end_class

end_unit

