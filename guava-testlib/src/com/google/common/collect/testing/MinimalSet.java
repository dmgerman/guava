begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2009 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.collect.testing
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**  * A simplistic set which implements the bare minimum so that it can be used in  * tests without relying on any specific Set implementations. Slow. Explicitly  * allows null elements so that they can be used in the testers.  *  *<p>This class is GWT compatible.  *  * @author Regina O'Dell  */
end_comment

begin_class
DECL|class|MinimalSet
specifier|public
class|class
name|MinimalSet
parameter_list|<
name|E
parameter_list|>
extends|extends
name|MinimalCollection
argument_list|<
name|E
argument_list|>
implements|implements
name|Set
argument_list|<
name|E
argument_list|>
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// empty Object[] as E[]
DECL|method|of (E... contents)
specifier|public
specifier|static
parameter_list|<
name|E
parameter_list|>
name|MinimalSet
argument_list|<
name|E
argument_list|>
name|of
parameter_list|(
name|E
modifier|...
name|contents
parameter_list|)
block|{
return|return
name|ofClassAndContents
argument_list|(
name|Object
operator|.
name|class
argument_list|,
operator|(
name|E
index|[]
operator|)
operator|new
name|Object
index|[
literal|0
index|]
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|contents
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// empty Object[] as E[]
DECL|method|from (Collection<? extends E> contents)
specifier|public
specifier|static
parameter_list|<
name|E
parameter_list|>
name|MinimalSet
argument_list|<
name|E
argument_list|>
name|from
parameter_list|(
name|Collection
argument_list|<
name|?
extends|extends
name|E
argument_list|>
name|contents
parameter_list|)
block|{
return|return
name|ofClassAndContents
argument_list|(
name|Object
operator|.
name|class
argument_list|,
operator|(
name|E
index|[]
operator|)
operator|new
name|Object
index|[
literal|0
index|]
argument_list|,
name|contents
argument_list|)
return|;
block|}
DECL|method|ofClassAndContents ( Class<? super E> type, E[] emptyArrayForContents, Iterable<? extends E> contents)
specifier|public
specifier|static
parameter_list|<
name|E
parameter_list|>
name|MinimalSet
argument_list|<
name|E
argument_list|>
name|ofClassAndContents
parameter_list|(
name|Class
argument_list|<
name|?
super|super
name|E
argument_list|>
name|type
parameter_list|,
name|E
index|[]
name|emptyArrayForContents
parameter_list|,
name|Iterable
argument_list|<
name|?
extends|extends
name|E
argument_list|>
name|contents
parameter_list|)
block|{
name|List
argument_list|<
name|E
argument_list|>
name|setContents
init|=
operator|new
name|ArrayList
argument_list|<
name|E
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|E
name|e
range|:
name|contents
control|)
block|{
if|if
condition|(
operator|!
name|setContents
operator|.
name|contains
argument_list|(
name|e
argument_list|)
condition|)
block|{
name|setContents
operator|.
name|add
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|MinimalSet
argument_list|<
name|E
argument_list|>
argument_list|(
name|type
argument_list|,
name|setContents
operator|.
name|toArray
argument_list|(
name|emptyArrayForContents
argument_list|)
argument_list|)
return|;
block|}
DECL|method|MinimalSet (Class<? super E> type, E... contents)
specifier|private
name|MinimalSet
parameter_list|(
name|Class
argument_list|<
name|?
super|super
name|E
argument_list|>
name|type
parameter_list|,
name|E
modifier|...
name|contents
parameter_list|)
block|{
name|super
argument_list|(
name|type
argument_list|,
literal|true
argument_list|,
name|contents
argument_list|)
expr_stmt|;
block|}
comment|/*    * equals() and hashCode() are more specific in the Set contract.    */
DECL|method|equals (Object object)
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|object
parameter_list|)
block|{
if|if
condition|(
name|object
operator|instanceof
name|Set
condition|)
block|{
name|Set
argument_list|<
name|?
argument_list|>
name|that
init|=
operator|(
name|Set
argument_list|<
name|?
argument_list|>
operator|)
name|object
decl_stmt|;
return|return
operator|(
name|this
operator|.
name|size
argument_list|()
operator|==
name|that
operator|.
name|size
argument_list|()
operator|)
operator|&&
name|this
operator|.
name|containsAll
argument_list|(
name|that
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
DECL|method|hashCode ()
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|int
name|hashCodeSum
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Object
name|o
range|:
name|this
control|)
block|{
name|hashCodeSum
operator|+=
operator|(
name|o
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|o
operator|.
name|hashCode
argument_list|()
expr_stmt|;
block|}
return|return
name|hashCodeSum
return|;
block|}
block|}
end_class

end_unit

