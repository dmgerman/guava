begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2008 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.collect.testing.testers
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|testers
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|features
operator|.
name|CollectionSize
operator|.
name|ZERO
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtCompatible
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|features
operator|.
name|CollectionSize
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_comment
comment|/**  * A generic JUnit test which tests {@code toArray()} operations on a list.  * Can't be invoked directly; please see  * {@link com.google.common.collect.testing.ListTestSuiteBuilder}.  *  *<p>This class is GWT compatible.  *  * @author Chris Povirk  */
end_comment

begin_class
annotation|@
name|GwtCompatible
DECL|class|ListToArrayTester
specifier|public
class|class
name|ListToArrayTester
parameter_list|<
name|E
parameter_list|>
extends|extends
name|AbstractListTester
argument_list|<
name|E
argument_list|>
block|{
comment|// CollectionToArrayTester tests everything except ordering.
DECL|method|testToArray_noArg ()
specifier|public
name|void
name|testToArray_noArg
parameter_list|()
block|{
name|Object
index|[]
name|actual
init|=
name|getList
argument_list|()
operator|.
name|toArray
argument_list|()
decl_stmt|;
name|assertArrayEquals
argument_list|(
literal|"toArray() order should match list"
argument_list|,
name|createSamplesArray
argument_list|()
argument_list|,
name|actual
argument_list|)
expr_stmt|;
block|}
annotation|@
name|CollectionSize
operator|.
name|Require
argument_list|(
name|absent
operator|=
name|ZERO
argument_list|)
DECL|method|testToArray_tooSmall ()
specifier|public
name|void
name|testToArray_tooSmall
parameter_list|()
block|{
name|Object
index|[]
name|actual
init|=
name|getList
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|Object
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|assertArrayEquals
argument_list|(
literal|"toArray(tooSmall) order should match list"
argument_list|,
name|createSamplesArray
argument_list|()
argument_list|,
name|actual
argument_list|)
expr_stmt|;
block|}
DECL|method|testToArray_largeEnough ()
specifier|public
name|void
name|testToArray_largeEnough
parameter_list|()
block|{
name|Object
index|[]
name|actual
init|=
name|getList
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|Object
index|[
name|getNumElements
argument_list|()
index|]
argument_list|)
decl_stmt|;
name|assertArrayEquals
argument_list|(
literal|"toArray(largeEnough) order should match list"
argument_list|,
name|createSamplesArray
argument_list|()
argument_list|,
name|actual
argument_list|)
expr_stmt|;
block|}
DECL|method|assertArrayEquals (String message, Object[] expected, Object[] actual)
specifier|private
specifier|static
name|void
name|assertArrayEquals
parameter_list|(
name|String
name|message
parameter_list|,
name|Object
index|[]
name|expected
parameter_list|,
name|Object
index|[]
name|actual
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|message
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|expected
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|actual
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

