begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2015 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.collect.testing.testers
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|testers
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|features
operator|.
name|CollectionSize
operator|.
name|ZERO
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|features
operator|.
name|MapFeature
operator|.
name|ALLOWS_NULL_KEYS
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|features
operator|.
name|MapFeature
operator|.
name|ALLOWS_NULL_VALUES
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|features
operator|.
name|MapFeature
operator|.
name|SUPPORTS_PUT
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtCompatible
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|AbstractMapTester
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|features
operator|.
name|CollectionSize
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|features
operator|.
name|MapFeature
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|AssertionFailedError
import|;
end_import

begin_comment
comment|/**  * A generic JUnit test which tests {@link Map#computeIfAbsent}. Can't be  * invoked directly; please see  * {@link com.google.common.collect.testing.MapTestSuiteBuilder}.  *   * @author Louis Wasserman  */
end_comment

begin_class
annotation|@
name|GwtCompatible
DECL|class|MapComputeIfAbsentTester
specifier|public
class|class
name|MapComputeIfAbsentTester
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
extends|extends
name|AbstractMapTester
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
block|{
annotation|@
name|MapFeature
operator|.
name|Require
argument_list|(
name|SUPPORTS_PUT
argument_list|)
DECL|method|testComputeIfAbsent_supportedAbsent ()
specifier|public
name|void
name|testComputeIfAbsent_supportedAbsent
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"computeIfAbsent(notPresent, function) should return new value"
argument_list|,
name|v3
argument_list|()
argument_list|,
name|getMap
argument_list|()
operator|.
name|computeIfAbsent
argument_list|(
name|k3
argument_list|()
argument_list|,
name|k
lambda|->
block|{
name|assertEquals
argument_list|(
name|k3
argument_list|()
argument_list|,
name|k
argument_list|)
expr_stmt|;
return|return
name|v3
argument_list|()
return|;
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|expectAdded
argument_list|(
name|e3
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|MapFeature
operator|.
name|Require
argument_list|(
name|SUPPORTS_PUT
argument_list|)
annotation|@
name|CollectionSize
operator|.
name|Require
argument_list|(
name|absent
operator|=
name|ZERO
argument_list|)
DECL|method|testComputeIfAbsent_supportedPresent ()
specifier|public
name|void
name|testComputeIfAbsent_supportedPresent
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"computeIfAbsent(present, function) should return existing value"
argument_list|,
name|v0
argument_list|()
argument_list|,
name|getMap
argument_list|()
operator|.
name|computeIfAbsent
argument_list|(
name|k0
argument_list|()
argument_list|,
name|k
lambda|->
block|{
throw|throw
operator|new
name|AssertionFailedError
argument_list|()
throw|;
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|expectUnchanged
argument_list|()
expr_stmt|;
block|}
annotation|@
name|MapFeature
operator|.
name|Require
argument_list|(
name|SUPPORTS_PUT
argument_list|)
DECL|method|testComputeIfAbsent_functionReturnsNullNotInserted ()
specifier|public
name|void
name|testComputeIfAbsent_functionReturnsNullNotInserted
parameter_list|()
block|{
name|assertNull
argument_list|(
literal|"computeIfAbsent(absent, returnsNull) should return null"
argument_list|,
name|getMap
argument_list|()
operator|.
name|computeIfAbsent
argument_list|(
name|k3
argument_list|()
argument_list|,
name|k
lambda|->
block|{
name|assertEquals
argument_list|(
name|k3
argument_list|()
argument_list|,
name|k
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|expectUnchanged
argument_list|()
expr_stmt|;
block|}
annotation|@
name|MapFeature
operator|.
name|Require
argument_list|(
block|{
name|SUPPORTS_PUT
block|,
name|ALLOWS_NULL_VALUES
block|}
argument_list|)
annotation|@
name|CollectionSize
operator|.
name|Require
argument_list|(
name|absent
operator|=
name|ZERO
argument_list|)
DECL|method|testComputeIfAbsent_nullTreatedAsAbsent ()
specifier|public
name|void
name|testComputeIfAbsent_nullTreatedAsAbsent
parameter_list|()
block|{
name|initMapWithNullValue
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"computeIfAbsent(presentAssignedToNull, function) should return newValue"
argument_list|,
name|getValueForNullKey
argument_list|()
argument_list|,
name|getMap
argument_list|()
operator|.
name|computeIfAbsent
argument_list|(
name|getKeyForNullValue
argument_list|()
argument_list|,
name|k
lambda|->
block|{
name|assertEquals
argument_list|(
name|getKeyForNullValue
argument_list|()
argument_list|,
name|k
argument_list|)
expr_stmt|;
return|return
name|getValueForNullKey
argument_list|()
return|;
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|expectReplacement
argument_list|(
name|entry
argument_list|(
name|getKeyForNullValue
argument_list|()
argument_list|,
name|getValueForNullKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|MapFeature
operator|.
name|Require
argument_list|(
block|{
name|SUPPORTS_PUT
block|,
name|ALLOWS_NULL_KEYS
block|}
argument_list|)
DECL|method|testComputeIfAbsent_nullKeySupported ()
specifier|public
name|void
name|testComputeIfAbsent_nullKeySupported
parameter_list|()
block|{
name|getMap
argument_list|()
operator|.
name|computeIfAbsent
argument_list|(
literal|null
argument_list|,
name|k
lambda|->
block|{
name|assertNull
argument_list|(
name|k
argument_list|)
expr_stmt|;
return|return
name|v3
argument_list|()
return|;
block|}
argument_list|)
expr_stmt|;
name|expectAdded
argument_list|(
name|entry
argument_list|(
literal|null
argument_list|,
name|v3
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|class|ExpectedException
specifier|static
class|class
name|ExpectedException
extends|extends
name|RuntimeException
block|{}
annotation|@
name|MapFeature
operator|.
name|Require
argument_list|(
name|SUPPORTS_PUT
argument_list|)
DECL|method|testComputeIfAbsent_functionThrows ()
specifier|public
name|void
name|testComputeIfAbsent_functionThrows
parameter_list|()
block|{
try|try
block|{
name|getMap
argument_list|()
operator|.
name|computeIfAbsent
argument_list|(
name|k3
argument_list|()
argument_list|,
name|k
lambda|->
block|{
name|assertEquals
argument_list|(
name|k3
argument_list|()
argument_list|,
name|k
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ExpectedException
argument_list|()
throw|;
block|}
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected ExpectedException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExpectedException
name|expected
parameter_list|)
block|{     }
name|expectUnchanged
argument_list|()
expr_stmt|;
block|}
annotation|@
name|MapFeature
operator|.
name|Require
argument_list|(
name|absent
operator|=
name|SUPPORTS_PUT
argument_list|)
DECL|method|testComputeIfAbsent_unsupportedAbsent ()
specifier|public
name|void
name|testComputeIfAbsent_unsupportedAbsent
parameter_list|()
block|{
try|try
block|{
name|getMap
argument_list|()
operator|.
name|computeIfAbsent
argument_list|(
name|k3
argument_list|()
argument_list|,
name|k
lambda|->
block|{
comment|// allowed to be called
name|assertEquals
argument_list|(
name|k3
argument_list|()
argument_list|,
name|k
argument_list|)
expr_stmt|;
return|return
name|v3
argument_list|()
return|;
block|}
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"computeIfAbsent(notPresent, function) should throw"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|expected
parameter_list|)
block|{}
name|expectUnchanged
argument_list|()
expr_stmt|;
block|}
annotation|@
name|MapFeature
operator|.
name|Require
argument_list|(
name|absent
operator|=
name|SUPPORTS_PUT
argument_list|)
annotation|@
name|CollectionSize
operator|.
name|Require
argument_list|(
name|absent
operator|=
name|ZERO
argument_list|)
DECL|method|testComputeIfAbsent_unsupportedPresentExistingValue ()
specifier|public
name|void
name|testComputeIfAbsent_unsupportedPresentExistingValue
parameter_list|()
block|{
try|try
block|{
name|assertEquals
argument_list|(
literal|"computeIfAbsent(present, returnsCurrentValue) should return present or throw"
argument_list|,
name|v0
argument_list|()
argument_list|,
name|getMap
argument_list|()
operator|.
name|computeIfAbsent
argument_list|(
name|k0
argument_list|()
argument_list|,
name|k
lambda|->
block|{
name|assertEquals
argument_list|(
name|k0
argument_list|()
argument_list|,
name|k
argument_list|)
expr_stmt|;
return|return
name|v0
argument_list|()
return|;
block|}
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|tolerated
parameter_list|)
block|{}
name|expectUnchanged
argument_list|()
expr_stmt|;
block|}
annotation|@
name|MapFeature
operator|.
name|Require
argument_list|(
name|absent
operator|=
name|SUPPORTS_PUT
argument_list|)
annotation|@
name|CollectionSize
operator|.
name|Require
argument_list|(
name|absent
operator|=
name|ZERO
argument_list|)
DECL|method|testComputeIfAbsent_unsupportedPresentDifferentValue ()
specifier|public
name|void
name|testComputeIfAbsent_unsupportedPresentDifferentValue
parameter_list|()
block|{
try|try
block|{
name|assertEquals
argument_list|(
literal|"computeIfAbsent(present, returnsDifferentValue) should return present or throw"
argument_list|,
name|v0
argument_list|()
argument_list|,
name|getMap
argument_list|()
operator|.
name|computeIfAbsent
argument_list|(
name|k0
argument_list|()
argument_list|,
name|k
lambda|->
block|{
name|assertEquals
argument_list|(
name|k0
argument_list|()
argument_list|,
name|k
argument_list|)
expr_stmt|;
return|return
name|v3
argument_list|()
return|;
block|}
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|tolerated
parameter_list|)
block|{}
name|expectUnchanged
argument_list|()
expr_stmt|;
block|}
annotation|@
name|MapFeature
operator|.
name|Require
argument_list|(
name|value
operator|=
name|SUPPORTS_PUT
argument_list|,
name|absent
operator|=
name|ALLOWS_NULL_KEYS
argument_list|)
DECL|method|testComputeIfAbsent_nullKeyUnsupported ()
specifier|public
name|void
name|testComputeIfAbsent_nullKeyUnsupported
parameter_list|()
block|{
try|try
block|{
name|getMap
argument_list|()
operator|.
name|computeIfAbsent
argument_list|(
literal|null
argument_list|,
name|k
lambda|->
block|{
name|assertNull
argument_list|(
name|k
argument_list|)
expr_stmt|;
return|return
name|v3
argument_list|()
return|;
block|}
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"computeIfAbsent(null, function) should throw"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|expected
parameter_list|)
block|{}
name|expectUnchanged
argument_list|()
expr_stmt|;
name|expectNullKeyMissingWhenNullKeysUnsupported
argument_list|(
literal|"Should not contain null key after unsupported computeIfAbsent(null, function)"
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

