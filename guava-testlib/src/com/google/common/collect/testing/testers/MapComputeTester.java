begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2015 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.collect.testing.testers
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|testers
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|features
operator|.
name|CollectionSize
operator|.
name|ZERO
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|features
operator|.
name|MapFeature
operator|.
name|ALLOWS_NULL_KEYS
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|features
operator|.
name|MapFeature
operator|.
name|ALLOWS_NULL_VALUES
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|features
operator|.
name|MapFeature
operator|.
name|SUPPORTS_PUT
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|features
operator|.
name|MapFeature
operator|.
name|SUPPORTS_REMOVE
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtCompatible
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|AbstractMapTester
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|features
operator|.
name|CollectionSize
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|features
operator|.
name|MapFeature
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * A generic JUnit test which tests {@link Map#compute}. Can't be invoked directly; please see  * {@link com.google.common.collect.testing.MapTestSuiteBuilder}.  *  * @author Louis Wasserman  */
end_comment

begin_class
annotation|@
name|GwtCompatible
DECL|class|MapComputeTester
specifier|public
class|class
name|MapComputeTester
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
extends|extends
name|AbstractMapTester
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
block|{
annotation|@
name|MapFeature
operator|.
name|Require
argument_list|(
block|{
name|SUPPORTS_PUT
block|,
name|SUPPORTS_REMOVE
block|}
argument_list|)
DECL|method|testCompute_absentToPresent ()
specifier|public
name|void
name|testCompute_absentToPresent
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"Map.compute(absent, functionReturningValue) should return value"
argument_list|,
name|v3
argument_list|()
argument_list|,
name|getMap
argument_list|()
operator|.
name|compute
argument_list|(
name|k3
argument_list|()
argument_list|,
parameter_list|(
name|k
parameter_list|,
name|v
parameter_list|)
lambda|->
block|{
name|assertEquals
argument_list|(
name|k3
argument_list|()
argument_list|,
name|k
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|v
argument_list|)
expr_stmt|;
return|return
name|v3
argument_list|()
return|;
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|expectAdded
argument_list|(
name|e3
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|getNumElements
argument_list|()
operator|+
literal|1
argument_list|,
name|getMap
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|MapFeature
operator|.
name|Require
argument_list|(
block|{
name|SUPPORTS_PUT
block|,
name|SUPPORTS_REMOVE
block|}
argument_list|)
DECL|method|testCompute_absentToAbsent ()
specifier|public
name|void
name|testCompute_absentToAbsent
parameter_list|()
block|{
name|assertNull
argument_list|(
literal|"Map.compute(absent, functionReturningNull) should return null"
argument_list|,
name|getMap
argument_list|()
operator|.
name|compute
argument_list|(
name|k3
argument_list|()
argument_list|,
parameter_list|(
name|k
parameter_list|,
name|v
parameter_list|)
lambda|->
block|{
name|assertEquals
argument_list|(
name|k3
argument_list|()
argument_list|,
name|k
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|v
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|expectUnchanged
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|getNumElements
argument_list|()
argument_list|,
name|getMap
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|MapFeature
operator|.
name|Require
argument_list|(
block|{
name|SUPPORTS_PUT
block|,
name|SUPPORTS_REMOVE
block|}
argument_list|)
annotation|@
name|CollectionSize
operator|.
name|Require
argument_list|(
name|absent
operator|=
name|ZERO
argument_list|)
DECL|method|testCompute_presentToPresent ()
specifier|public
name|void
name|testCompute_presentToPresent
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"Map.compute(present, functionReturningValue) should return new value"
argument_list|,
name|v3
argument_list|()
argument_list|,
name|getMap
argument_list|()
operator|.
name|compute
argument_list|(
name|k0
argument_list|()
argument_list|,
parameter_list|(
name|k
parameter_list|,
name|v
parameter_list|)
lambda|->
block|{
name|assertEquals
argument_list|(
name|k0
argument_list|()
argument_list|,
name|k
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|v0
argument_list|()
argument_list|,
name|v
argument_list|)
expr_stmt|;
return|return
name|v3
argument_list|()
return|;
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|expectReplacement
argument_list|(
name|entry
argument_list|(
name|k0
argument_list|()
argument_list|,
name|v3
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|getNumElements
argument_list|()
argument_list|,
name|getMap
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|MapFeature
operator|.
name|Require
argument_list|(
block|{
name|SUPPORTS_PUT
block|,
name|SUPPORTS_REMOVE
block|}
argument_list|)
annotation|@
name|CollectionSize
operator|.
name|Require
argument_list|(
name|absent
operator|=
name|ZERO
argument_list|)
DECL|method|testCompute_presentToAbsent ()
specifier|public
name|void
name|testCompute_presentToAbsent
parameter_list|()
block|{
name|assertNull
argument_list|(
literal|"Map.compute(present, functionReturningNull) should return null"
argument_list|,
name|getMap
argument_list|()
operator|.
name|compute
argument_list|(
name|k0
argument_list|()
argument_list|,
parameter_list|(
name|k
parameter_list|,
name|v
parameter_list|)
lambda|->
block|{
name|assertEquals
argument_list|(
name|k0
argument_list|()
argument_list|,
name|k
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|v0
argument_list|()
argument_list|,
name|v
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|expectMissing
argument_list|(
name|e0
argument_list|()
argument_list|)
expr_stmt|;
name|expectMissingKeys
argument_list|(
name|k0
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|getNumElements
argument_list|()
operator|-
literal|1
argument_list|,
name|getMap
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|MapFeature
operator|.
name|Require
argument_list|(
block|{
name|SUPPORTS_PUT
block|,
name|SUPPORTS_REMOVE
block|,
name|ALLOWS_NULL_VALUES
block|}
argument_list|)
annotation|@
name|CollectionSize
operator|.
name|Require
argument_list|(
name|absent
operator|=
name|ZERO
argument_list|)
DECL|method|testCompute_presentNullToPresentNonnull ()
specifier|public
name|void
name|testCompute_presentNullToPresentNonnull
parameter_list|()
block|{
name|initMapWithNullValue
argument_list|()
expr_stmt|;
name|V
name|value
init|=
name|getValueForNullKey
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Map.compute(presentMappedToNull, functionReturningValue) should return new value"
argument_list|,
name|value
argument_list|,
name|getMap
argument_list|()
operator|.
name|compute
argument_list|(
name|getKeyForNullValue
argument_list|()
argument_list|,
parameter_list|(
name|k
parameter_list|,
name|v
parameter_list|)
lambda|->
block|{
name|assertEquals
argument_list|(
name|getKeyForNullValue
argument_list|()
argument_list|,
name|k
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|v
argument_list|)
expr_stmt|;
return|return
name|value
return|;
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|expectReplacement
argument_list|(
name|entry
argument_list|(
name|getKeyForNullValue
argument_list|()
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|getNumElements
argument_list|()
argument_list|,
name|getMap
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|MapFeature
operator|.
name|Require
argument_list|(
block|{
name|SUPPORTS_PUT
block|,
name|SUPPORTS_REMOVE
block|,
name|ALLOWS_NULL_VALUES
block|}
argument_list|)
annotation|@
name|CollectionSize
operator|.
name|Require
argument_list|(
name|absent
operator|=
name|ZERO
argument_list|)
DECL|method|testCompute_presentNullToNull ()
specifier|public
name|void
name|testCompute_presentNullToNull
parameter_list|()
block|{
comment|// The spec is somewhat ambiguous about this case, but the actual default implementation
comment|// in Map will remove a present null.
name|initMapWithNullValue
argument_list|()
expr_stmt|;
name|assertNull
argument_list|(
literal|"Map.compute(presentMappedToNull, functionReturningNull) should return null"
argument_list|,
name|getMap
argument_list|()
operator|.
name|compute
argument_list|(
name|getKeyForNullValue
argument_list|()
argument_list|,
parameter_list|(
name|k
parameter_list|,
name|v
parameter_list|)
lambda|->
block|{
name|assertEquals
argument_list|(
name|getKeyForNullValue
argument_list|()
argument_list|,
name|k
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|v
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|expectMissingKeys
argument_list|(
name|getKeyForNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|getNumElements
argument_list|()
operator|-
literal|1
argument_list|,
name|getMap
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|MapFeature
operator|.
name|Require
argument_list|(
block|{
name|SUPPORTS_PUT
block|,
name|SUPPORTS_REMOVE
block|,
name|ALLOWS_NULL_KEYS
block|}
argument_list|)
annotation|@
name|CollectionSize
operator|.
name|Require
argument_list|(
name|absent
operator|=
name|ZERO
argument_list|)
DECL|method|testCompute_nullKeyPresentToPresent ()
specifier|public
name|void
name|testCompute_nullKeyPresentToPresent
parameter_list|()
block|{
name|initMapWithNullKey
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Map.compute(present, functionReturningValue) should return new value"
argument_list|,
name|v3
argument_list|()
argument_list|,
name|getMap
argument_list|()
operator|.
name|compute
argument_list|(
literal|null
argument_list|,
parameter_list|(
name|k
parameter_list|,
name|v
parameter_list|)
lambda|->
block|{
name|assertNull
argument_list|(
name|k
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|getValueForNullKey
argument_list|()
argument_list|,
name|v
argument_list|)
expr_stmt|;
return|return
name|v3
argument_list|()
return|;
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|getNumElements
argument_list|()
argument_list|,
name|getMap
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|class|ExpectedException
specifier|static
class|class
name|ExpectedException
extends|extends
name|RuntimeException
block|{}
annotation|@
name|MapFeature
operator|.
name|Require
argument_list|(
block|{
name|SUPPORTS_PUT
block|,
name|SUPPORTS_REMOVE
block|}
argument_list|)
annotation|@
name|CollectionSize
operator|.
name|Require
argument_list|(
name|absent
operator|=
name|ZERO
argument_list|)
DECL|method|testCompute_presentFunctionThrows ()
specifier|public
name|void
name|testCompute_presentFunctionThrows
parameter_list|()
block|{
try|try
block|{
name|getMap
argument_list|()
operator|.
name|compute
argument_list|(
name|k0
argument_list|()
argument_list|,
parameter_list|(
name|k
parameter_list|,
name|v
parameter_list|)
lambda|->
block|{
name|assertEquals
argument_list|(
name|k0
argument_list|()
argument_list|,
name|k
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|v0
argument_list|()
argument_list|,
name|v
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ExpectedException
argument_list|()
throw|;
block|}
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected ExpectedException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExpectedException
name|expected
parameter_list|)
block|{     }
name|expectUnchanged
argument_list|()
expr_stmt|;
block|}
annotation|@
name|MapFeature
operator|.
name|Require
argument_list|(
block|{
name|SUPPORTS_PUT
block|,
name|SUPPORTS_REMOVE
block|}
argument_list|)
DECL|method|testCompute_absentFunctionThrows ()
specifier|public
name|void
name|testCompute_absentFunctionThrows
parameter_list|()
block|{
try|try
block|{
name|getMap
argument_list|()
operator|.
name|compute
argument_list|(
name|k3
argument_list|()
argument_list|,
parameter_list|(
name|k
parameter_list|,
name|v
parameter_list|)
lambda|->
block|{
name|assertEquals
argument_list|(
name|k3
argument_list|()
argument_list|,
name|k
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|v
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ExpectedException
argument_list|()
throw|;
block|}
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected ExpectedException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExpectedException
name|expected
parameter_list|)
block|{     }
name|expectUnchanged
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

