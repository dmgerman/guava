begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2008 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.collect.testing.testers
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|testers
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|features
operator|.
name|MapFeature
operator|.
name|ALLOWS_NULL_KEYS
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|features
operator|.
name|MapFeature
operator|.
name|ALLOWS_NULL_VALUES
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|AbstractMapTester
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|Helpers
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|features
operator|.
name|CollectionSize
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|features
operator|.
name|MapFeature
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_comment
comment|/**  * Tests {@link java.util.Map#equals}.  *  *<p>This class is GWT compatible.  *  * @author George van den Driessche  * @author Chris Povirk  */
end_comment

begin_class
DECL|class|MapEqualsTester
specifier|public
class|class
name|MapEqualsTester
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
extends|extends
name|AbstractMapTester
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
block|{
DECL|method|testEquals_otherMapWithSameEntries ()
specifier|public
name|void
name|testEquals_otherMapWithSameEntries
parameter_list|()
block|{
name|assertTrue
argument_list|(
literal|"A Map should equal any other Map containing the same entries."
argument_list|,
name|getMap
argument_list|()
operator|.
name|equals
argument_list|(
name|newHashMap
argument_list|(
name|getSampleEntries
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|CollectionSize
operator|.
name|Require
argument_list|(
name|absent
operator|=
name|CollectionSize
operator|.
name|ZERO
argument_list|)
DECL|method|testEquals_otherMapWithDifferentEntries ()
specifier|public
name|void
name|testEquals_otherMapWithDifferentEntries
parameter_list|()
block|{
name|Map
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|other
init|=
name|newHashMap
argument_list|(
name|getSampleEntries
argument_list|(
name|getNumEntries
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|e3
init|=
name|getSubjectGenerator
argument_list|()
operator|.
name|samples
argument_list|()
operator|.
name|e3
decl_stmt|;
name|other
operator|.
name|put
argument_list|(
name|e3
operator|.
name|getKey
argument_list|()
argument_list|,
name|e3
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"A Map should not equal another Map containing different entries."
argument_list|,
name|getMap
argument_list|()
operator|.
name|equals
argument_list|(
name|other
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|CollectionSize
operator|.
name|Require
argument_list|(
name|absent
operator|=
name|CollectionSize
operator|.
name|ZERO
argument_list|)
annotation|@
name|MapFeature
operator|.
name|Require
argument_list|(
name|ALLOWS_NULL_KEYS
argument_list|)
DECL|method|testEquals_containingNullKey ()
specifier|public
name|void
name|testEquals_containingNullKey
parameter_list|()
block|{
name|Collection
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|entries
init|=
name|getSampleEntries
argument_list|(
name|getNumEntries
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
name|entries
operator|.
name|add
argument_list|(
name|entry
argument_list|(
literal|null
argument_list|,
name|samples
operator|.
name|e3
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|resetContainer
argument_list|(
name|getSubjectGenerator
argument_list|()
operator|.
name|create
argument_list|(
name|entries
operator|.
name|toArray
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"A Map should equal any other Map containing the same entries,"
operator|+
literal|" even if some keys are null."
argument_list|,
name|getMap
argument_list|()
operator|.
name|equals
argument_list|(
name|newHashMap
argument_list|(
name|entries
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|CollectionSize
operator|.
name|Require
argument_list|(
name|absent
operator|=
name|CollectionSize
operator|.
name|ZERO
argument_list|)
DECL|method|testEquals_otherContainsNullKey ()
specifier|public
name|void
name|testEquals_otherContainsNullKey
parameter_list|()
block|{
name|Collection
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|entries
init|=
name|getSampleEntries
argument_list|(
name|getNumEntries
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
name|entries
operator|.
name|add
argument_list|(
name|entry
argument_list|(
literal|null
argument_list|,
name|samples
operator|.
name|e3
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|other
init|=
name|newHashMap
argument_list|(
name|entries
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
literal|"Two Maps should not be equal if exactly one of them contains a null "
operator|+
literal|"key."
argument_list|,
name|getMap
argument_list|()
operator|.
name|equals
argument_list|(
name|other
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|CollectionSize
operator|.
name|Require
argument_list|(
name|absent
operator|=
name|CollectionSize
operator|.
name|ZERO
argument_list|)
annotation|@
name|MapFeature
operator|.
name|Require
argument_list|(
name|ALLOWS_NULL_VALUES
argument_list|)
DECL|method|testEquals_containingNullValue ()
specifier|public
name|void
name|testEquals_containingNullValue
parameter_list|()
block|{
name|Collection
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|entries
init|=
name|getSampleEntries
argument_list|(
name|getNumEntries
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
name|entries
operator|.
name|add
argument_list|(
name|entry
argument_list|(
name|samples
operator|.
name|e3
operator|.
name|getKey
argument_list|()
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|resetContainer
argument_list|(
name|getSubjectGenerator
argument_list|()
operator|.
name|create
argument_list|(
name|entries
operator|.
name|toArray
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"A Map should equal any other Map containing the same entries,"
operator|+
literal|" even if some values are null."
argument_list|,
name|getMap
argument_list|()
operator|.
name|equals
argument_list|(
name|newHashMap
argument_list|(
name|entries
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|CollectionSize
operator|.
name|Require
argument_list|(
name|absent
operator|=
name|CollectionSize
operator|.
name|ZERO
argument_list|)
DECL|method|testEquals_otherContainsNullValue ()
specifier|public
name|void
name|testEquals_otherContainsNullValue
parameter_list|()
block|{
name|Collection
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|entries
init|=
name|getSampleEntries
argument_list|(
name|getNumEntries
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
name|entries
operator|.
name|add
argument_list|(
name|entry
argument_list|(
name|samples
operator|.
name|e3
operator|.
name|getKey
argument_list|()
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|other
init|=
name|newHashMap
argument_list|(
name|entries
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
literal|"Two Maps should not be equal if exactly one of them contains a null "
operator|+
literal|"value."
argument_list|,
name|getMap
argument_list|()
operator|.
name|equals
argument_list|(
name|other
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|CollectionSize
operator|.
name|Require
argument_list|(
name|absent
operator|=
name|CollectionSize
operator|.
name|ZERO
argument_list|)
DECL|method|testEquals_smallerMap ()
specifier|public
name|void
name|testEquals_smallerMap
parameter_list|()
block|{
name|Collection
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|fewerEntries
init|=
name|getSampleEntries
argument_list|(
name|getNumEntries
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
literal|"Maps of different sizes should not be equal."
argument_list|,
name|getMap
argument_list|()
operator|.
name|equals
argument_list|(
name|newHashMap
argument_list|(
name|fewerEntries
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testEquals_largerMap ()
specifier|public
name|void
name|testEquals_largerMap
parameter_list|()
block|{
name|Collection
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|moreEntries
init|=
name|getSampleEntries
argument_list|(
name|getNumEntries
argument_list|()
operator|+
literal|1
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
literal|"Maps of different sizes should not be equal."
argument_list|,
name|getMap
argument_list|()
operator|.
name|equals
argument_list|(
name|newHashMap
argument_list|(
name|moreEntries
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testEquals_list ()
specifier|public
name|void
name|testEquals_list
parameter_list|()
block|{
name|assertFalse
argument_list|(
literal|"A List should never equal a Map."
argument_list|,
name|getMap
argument_list|()
operator|.
name|equals
argument_list|(
name|Helpers
operator|.
name|copyToList
argument_list|(
name|getMap
argument_list|()
operator|.
name|entrySet
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|newHashMap ( Collection<? extends Map.Entry<? extends K, ? extends V>> entries)
specifier|private
specifier|static
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
name|HashMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|newHashMap
parameter_list|(
name|Collection
argument_list|<
name|?
extends|extends
name|Map
operator|.
name|Entry
argument_list|<
name|?
extends|extends
name|K
argument_list|,
name|?
extends|extends
name|V
argument_list|>
argument_list|>
name|entries
parameter_list|)
block|{
name|HashMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|?
extends|extends
name|K
argument_list|,
name|?
extends|extends
name|V
argument_list|>
name|entry
range|:
name|entries
control|)
block|{
name|map
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|map
return|;
block|}
block|}
end_class

end_unit

