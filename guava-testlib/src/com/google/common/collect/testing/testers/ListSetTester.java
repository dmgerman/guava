begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2008 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.collect.testing.testers
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|testers
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|features
operator|.
name|CollectionFeature
operator|.
name|ALLOWS_NULL_VALUES
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|features
operator|.
name|CollectionSize
operator|.
name|ZERO
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|features
operator|.
name|ListFeature
operator|.
name|SUPPORTS_SET
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtCompatible
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtIncompatible
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|Helpers
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|features
operator|.
name|CollectionFeature
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|features
operator|.
name|CollectionSize
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|features
operator|.
name|ListFeature
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_comment
comment|/**  * A generic JUnit test which tests {@code set()} operations on a list. Can't be  * invoked directly; please see  * {@link com.google.common.collect.testing.ListTestSuiteBuilder}.  *  * @author George van den Driessche  */
end_comment

begin_class
annotation|@
name|GwtCompatible
argument_list|(
name|emulated
operator|=
literal|true
argument_list|)
DECL|class|ListSetTester
specifier|public
class|class
name|ListSetTester
parameter_list|<
name|E
parameter_list|>
extends|extends
name|AbstractListTester
argument_list|<
name|E
argument_list|>
block|{
annotation|@
name|ListFeature
operator|.
name|Require
argument_list|(
name|SUPPORTS_SET
argument_list|)
annotation|@
name|CollectionSize
operator|.
name|Require
argument_list|(
name|absent
operator|=
name|ZERO
argument_list|)
DECL|method|testSet ()
specifier|public
name|void
name|testSet
parameter_list|()
block|{
name|doTestSet
argument_list|(
name|e3
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|CollectionSize
operator|.
name|Require
argument_list|(
name|absent
operator|=
name|ZERO
argument_list|)
annotation|@
name|CollectionFeature
operator|.
name|Require
argument_list|(
name|ALLOWS_NULL_VALUES
argument_list|)
annotation|@
name|ListFeature
operator|.
name|Require
argument_list|(
name|SUPPORTS_SET
argument_list|)
DECL|method|testSet_null ()
specifier|public
name|void
name|testSet_null
parameter_list|()
block|{
name|doTestSet
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|CollectionSize
operator|.
name|Require
argument_list|(
name|absent
operator|=
name|ZERO
argument_list|)
annotation|@
name|CollectionFeature
operator|.
name|Require
argument_list|(
name|ALLOWS_NULL_VALUES
argument_list|)
annotation|@
name|ListFeature
operator|.
name|Require
argument_list|(
name|SUPPORTS_SET
argument_list|)
DECL|method|testSet_replacingNull ()
specifier|public
name|void
name|testSet_replacingNull
parameter_list|()
block|{
name|E
index|[]
name|elements
init|=
name|createSamplesArray
argument_list|()
decl_stmt|;
name|int
name|i
init|=
name|aValidIndex
argument_list|()
decl_stmt|;
name|elements
index|[
name|i
index|]
operator|=
literal|null
expr_stmt|;
name|collection
operator|=
name|getSubjectGenerator
argument_list|()
operator|.
name|create
argument_list|(
name|elements
argument_list|)
expr_stmt|;
name|doTestSet
argument_list|(
name|e3
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|doTestSet (E newValue)
specifier|private
name|void
name|doTestSet
parameter_list|(
name|E
name|newValue
parameter_list|)
block|{
name|int
name|index
init|=
name|aValidIndex
argument_list|()
decl_stmt|;
name|E
name|initialValue
init|=
name|getList
argument_list|()
operator|.
name|get
argument_list|(
name|index
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"set(i, x) should return the old element at position i."
argument_list|,
name|initialValue
argument_list|,
name|getList
argument_list|()
operator|.
name|set
argument_list|(
name|index
argument_list|,
name|newValue
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"After set(i, x), get(i) should return x"
argument_list|,
name|newValue
argument_list|,
name|getList
argument_list|()
operator|.
name|get
argument_list|(
name|index
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"set() should not change the size of a list."
argument_list|,
name|getNumElements
argument_list|()
argument_list|,
name|getList
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|ListFeature
operator|.
name|Require
argument_list|(
name|SUPPORTS_SET
argument_list|)
DECL|method|testSet_indexTooLow ()
specifier|public
name|void
name|testSet_indexTooLow
parameter_list|()
block|{
try|try
block|{
name|getList
argument_list|()
operator|.
name|set
argument_list|(
operator|-
literal|1
argument_list|,
name|e3
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"set(-1) should throw IndexOutOfBoundsException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IndexOutOfBoundsException
name|expected
parameter_list|)
block|{     }
name|expectUnchanged
argument_list|()
expr_stmt|;
block|}
annotation|@
name|ListFeature
operator|.
name|Require
argument_list|(
name|SUPPORTS_SET
argument_list|)
DECL|method|testSet_indexTooHigh ()
specifier|public
name|void
name|testSet_indexTooHigh
parameter_list|()
block|{
name|int
name|index
init|=
name|getNumElements
argument_list|()
decl_stmt|;
try|try
block|{
name|getList
argument_list|()
operator|.
name|set
argument_list|(
name|index
argument_list|,
name|e3
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"set(size) should throw IndexOutOfBoundsException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IndexOutOfBoundsException
name|expected
parameter_list|)
block|{     }
name|expectUnchanged
argument_list|()
expr_stmt|;
block|}
annotation|@
name|CollectionSize
operator|.
name|Require
argument_list|(
name|absent
operator|=
name|ZERO
argument_list|)
annotation|@
name|ListFeature
operator|.
name|Require
argument_list|(
name|absent
operator|=
name|SUPPORTS_SET
argument_list|)
DECL|method|testSet_unsupported ()
specifier|public
name|void
name|testSet_unsupported
parameter_list|()
block|{
try|try
block|{
name|getList
argument_list|()
operator|.
name|set
argument_list|(
name|aValidIndex
argument_list|()
argument_list|,
name|e3
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"set() should throw UnsupportedOperationException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|expected
parameter_list|)
block|{     }
name|expectUnchanged
argument_list|()
expr_stmt|;
block|}
annotation|@
name|CollectionSize
operator|.
name|Require
argument_list|(
name|ZERO
argument_list|)
annotation|@
name|ListFeature
operator|.
name|Require
argument_list|(
name|absent
operator|=
name|SUPPORTS_SET
argument_list|)
DECL|method|testSet_unsupportedByEmptyList ()
specifier|public
name|void
name|testSet_unsupportedByEmptyList
parameter_list|()
block|{
try|try
block|{
name|getList
argument_list|()
operator|.
name|set
argument_list|(
literal|0
argument_list|,
name|e3
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"set() should throw UnsupportedOperationException "
operator|+
literal|"or IndexOutOfBoundsException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|tolerated
parameter_list|)
block|{     }
catch|catch
parameter_list|(
name|IndexOutOfBoundsException
name|tolerated
parameter_list|)
block|{     }
name|expectUnchanged
argument_list|()
expr_stmt|;
block|}
annotation|@
name|CollectionSize
operator|.
name|Require
argument_list|(
name|absent
operator|=
name|ZERO
argument_list|)
annotation|@
name|ListFeature
operator|.
name|Require
argument_list|(
name|SUPPORTS_SET
argument_list|)
annotation|@
name|CollectionFeature
operator|.
name|Require
argument_list|(
name|absent
operator|=
name|ALLOWS_NULL_VALUES
argument_list|)
DECL|method|testSet_nullUnsupported ()
specifier|public
name|void
name|testSet_nullUnsupported
parameter_list|()
block|{
try|try
block|{
name|getList
argument_list|()
operator|.
name|set
argument_list|(
name|aValidIndex
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"set(null) should throw NullPointerException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|expected
parameter_list|)
block|{     }
name|expectUnchanged
argument_list|()
expr_stmt|;
block|}
DECL|method|aValidIndex ()
specifier|private
name|int
name|aValidIndex
parameter_list|()
block|{
return|return
name|getList
argument_list|()
operator|.
name|size
argument_list|()
operator|/
literal|2
return|;
block|}
comment|/**    * Returns the {@link java.lang.reflect.Method} instance for    * {@link #testSet_null()} so that tests of {@link    * java.util.Collections#checkedCollection(java.util.Collection, Class)} can    * suppress it with {@code FeatureSpecificTestSuiteBuilder.suppressing()}    * until<a    * href="http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6409434">Sun bug    * 6409434</a> is fixed. It's unclear whether nulls were to be permitted or    * forbidden, but presumably the eventual fix will be to permit them, as it    * seems more likely that code would depend on that behavior than on the    * other. Thus, we say the bug is in set(), which fails to support null.    */
annotation|@
name|GwtIncompatible
comment|// reflection
DECL|method|getSetNullSupportedMethod ()
specifier|public
specifier|static
name|Method
name|getSetNullSupportedMethod
parameter_list|()
block|{
return|return
name|Helpers
operator|.
name|getMethod
argument_list|(
name|ListSetTester
operator|.
name|class
argument_list|,
literal|"testSet_null"
argument_list|)
return|;
block|}
block|}
end_class

end_unit

