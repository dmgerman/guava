begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2008 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.collect.testing.testers
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|testers
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|features
operator|.
name|CollectionFeature
operator|.
name|ALLOWS_NULL_VALUES
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|features
operator|.
name|CollectionFeature
operator|.
name|REJECTS_DUPLICATES_AT_CREATION
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|features
operator|.
name|CollectionSize
operator|.
name|ONE
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|features
operator|.
name|CollectionSize
operator|.
name|ZERO
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtCompatible
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|features
operator|.
name|CollectionFeature
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|features
operator|.
name|CollectionSize
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * A generic JUnit test which tests creation (typically through a constructor or  * static factory method) of a set. Can't be invoked directly; please see  * {@link com.google.common.collect.testing.SetTestSuiteBuilder}.  *  * @author Chris Povirk  */
end_comment

begin_class
annotation|@
name|GwtCompatible
DECL|class|SetCreationTester
specifier|public
class|class
name|SetCreationTester
parameter_list|<
name|E
parameter_list|>
extends|extends
name|AbstractSetTester
argument_list|<
name|E
argument_list|>
block|{
annotation|@
name|CollectionFeature
operator|.
name|Require
argument_list|(
name|value
operator|=
name|ALLOWS_NULL_VALUES
argument_list|,
name|absent
operator|=
name|REJECTS_DUPLICATES_AT_CREATION
argument_list|)
annotation|@
name|CollectionSize
operator|.
name|Require
argument_list|(
name|absent
operator|=
block|{
name|ZERO
block|,
name|ONE
block|}
argument_list|)
DECL|method|testCreateWithDuplicates_nullDuplicatesNotRejected ()
specifier|public
name|void
name|testCreateWithDuplicates_nullDuplicatesNotRejected
parameter_list|()
block|{
name|E
index|[]
name|array
init|=
name|createArrayWithNullElement
argument_list|()
decl_stmt|;
name|array
index|[
literal|0
index|]
operator|=
literal|null
expr_stmt|;
name|collection
operator|=
name|getSubjectGenerator
argument_list|()
operator|.
name|create
argument_list|(
name|array
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|E
argument_list|>
name|expectedWithDuplicateRemoved
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|array
argument_list|)
operator|.
name|subList
argument_list|(
literal|1
argument_list|,
name|getNumElements
argument_list|()
argument_list|)
decl_stmt|;
name|expectContents
argument_list|(
name|expectedWithDuplicateRemoved
argument_list|)
expr_stmt|;
block|}
annotation|@
name|CollectionFeature
operator|.
name|Require
argument_list|(
name|absent
operator|=
name|REJECTS_DUPLICATES_AT_CREATION
argument_list|)
annotation|@
name|CollectionSize
operator|.
name|Require
argument_list|(
name|absent
operator|=
block|{
name|ZERO
block|,
name|ONE
block|}
argument_list|)
DECL|method|testCreateWithDuplicates_nonNullDuplicatesNotRejected ()
specifier|public
name|void
name|testCreateWithDuplicates_nonNullDuplicatesNotRejected
parameter_list|()
block|{
name|E
index|[]
name|array
init|=
name|createSamplesArray
argument_list|()
decl_stmt|;
name|array
index|[
literal|1
index|]
operator|=
name|samples
operator|.
name|e0
expr_stmt|;
name|collection
operator|=
name|getSubjectGenerator
argument_list|()
operator|.
name|create
argument_list|(
name|array
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|E
argument_list|>
name|expectedWithDuplicateRemoved
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|array
argument_list|)
operator|.
name|subList
argument_list|(
literal|1
argument_list|,
name|getNumElements
argument_list|()
argument_list|)
decl_stmt|;
name|expectContents
argument_list|(
name|expectedWithDuplicateRemoved
argument_list|)
expr_stmt|;
block|}
annotation|@
name|CollectionFeature
operator|.
name|Require
argument_list|(
block|{
name|ALLOWS_NULL_VALUES
block|,
name|REJECTS_DUPLICATES_AT_CREATION
block|}
argument_list|)
annotation|@
name|CollectionSize
operator|.
name|Require
argument_list|(
name|absent
operator|=
block|{
name|ZERO
block|,
name|ONE
block|}
argument_list|)
DECL|method|testCreateWithDuplicates_nullDuplicatesRejected ()
specifier|public
name|void
name|testCreateWithDuplicates_nullDuplicatesRejected
parameter_list|()
block|{
name|E
index|[]
name|array
init|=
name|createArrayWithNullElement
argument_list|()
decl_stmt|;
name|array
index|[
literal|0
index|]
operator|=
literal|null
expr_stmt|;
try|try
block|{
name|collection
operator|=
name|getSubjectGenerator
argument_list|()
operator|.
name|create
argument_list|(
name|array
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should reject duplicate null elements at creation"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{     }
block|}
annotation|@
name|CollectionFeature
operator|.
name|Require
argument_list|(
name|REJECTS_DUPLICATES_AT_CREATION
argument_list|)
annotation|@
name|CollectionSize
operator|.
name|Require
argument_list|(
name|absent
operator|=
block|{
name|ZERO
block|,
name|ONE
block|}
argument_list|)
DECL|method|testCreateWithDuplicates_nonNullDuplicatesRejected ()
specifier|public
name|void
name|testCreateWithDuplicates_nonNullDuplicatesRejected
parameter_list|()
block|{
name|E
index|[]
name|array
init|=
name|createSamplesArray
argument_list|()
decl_stmt|;
name|array
index|[
literal|1
index|]
operator|=
name|samples
operator|.
name|e0
expr_stmt|;
try|try
block|{
name|collection
operator|=
name|getSubjectGenerator
argument_list|()
operator|.
name|create
argument_list|(
name|array
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should reject duplicate non-null elements at creation"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{     }
block|}
block|}
end_class

end_unit

