begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2009 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.collect.testing
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_comment
comment|/**  * An implementation of {@code Iterable} which throws an exception on all  * invocations of the {@link #iterator()} method after the first, and whose  * iterator is always unmodifiable.  *  *<p>The {@code Iterable} specification does not make it absolutely clear what  * should happen on a second invocation, so implementors have made various  * choices, including:  *  *<ul>  *<li>returning the same iterator again  *<li>throwing an exception of some kind  *<li>or the usual,<i>robust</i> behavior, which all known {@link Collection}  *     implementations have, of returning a new, independent iterator  *</ul>  *  * Because of this situation, any public method accepting an iterable should  * invoke the {@code iterator} method only once, and should be tested using this  * class. Exceptions to this rule should be clearly documented.  *  *<p>Note that although your APIs should be liberal in what they accept, your  * methods which<i>return</i> iterables should make every attempt to return  * ones of the robust variety.  *  *<p>This testing utility is not thread-safe.  *  * @author Kevin Bourrillion  */
end_comment

begin_class
DECL|class|MinimalIterable
specifier|public
specifier|final
class|class
name|MinimalIterable
parameter_list|<
name|E
parameter_list|>
implements|implements
name|Iterable
argument_list|<
name|E
argument_list|>
block|{
comment|/**    * Returns an iterable whose iterator returns the given elements in order.    */
DECL|method|of (E... elements)
specifier|public
specifier|static
parameter_list|<
name|E
parameter_list|>
name|MinimalIterable
argument_list|<
name|E
argument_list|>
name|of
parameter_list|(
name|E
modifier|...
name|elements
parameter_list|)
block|{
comment|// Make sure to get an unmodifiable iterator
return|return
operator|new
name|MinimalIterable
argument_list|<
name|E
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|elements
argument_list|)
operator|.
name|iterator
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Returns an iterable whose iterator returns the given elements in order.    * The elements are copied out of the source collection at the time this    * method is called.    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// Es come in, Es go out
DECL|method|from (final Collection<E> elements)
specifier|public
specifier|static
parameter_list|<
name|E
parameter_list|>
name|MinimalIterable
argument_list|<
name|E
argument_list|>
name|from
parameter_list|(
specifier|final
name|Collection
argument_list|<
name|E
argument_list|>
name|elements
parameter_list|)
block|{
return|return
operator|(
name|MinimalIterable
operator|)
name|of
argument_list|(
name|elements
operator|.
name|toArray
argument_list|()
argument_list|)
return|;
block|}
DECL|field|iterator
specifier|private
name|Iterator
argument_list|<
name|E
argument_list|>
name|iterator
decl_stmt|;
DECL|method|MinimalIterable (Iterator<E> iterator)
specifier|private
name|MinimalIterable
parameter_list|(
name|Iterator
argument_list|<
name|E
argument_list|>
name|iterator
parameter_list|)
block|{
name|this
operator|.
name|iterator
operator|=
name|iterator
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|iterator ()
specifier|public
name|Iterator
argument_list|<
name|E
argument_list|>
name|iterator
parameter_list|()
block|{
if|if
condition|(
name|iterator
operator|==
literal|null
condition|)
block|{
comment|// TODO: throw something else? Do we worry that people's code and tests
comment|// might be relying on this particular type of exception?
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
try|try
block|{
return|return
name|iterator
return|;
block|}
finally|finally
block|{
name|iterator
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

