begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2015 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.collect.testing
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|Helpers
operator|.
name|assertEqualIgnoringOrder
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|Helpers
operator|.
name|assertEqualInOrder
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|Platform
operator|.
name|format
import|;
end_import

begin_import
import|import static
name|junit
operator|.
name|framework
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|junit
operator|.
name|framework
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|junit
operator|.
name|framework
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|junit
operator|.
name|framework
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtCompatible
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Ordering
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|primitives
operator|.
name|Ints
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Spliterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Consumer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Supplier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|checkerframework
operator|.
name|checker
operator|.
name|nullness
operator|.
name|qual
operator|.
name|Nullable
import|;
end_import

begin_comment
comment|/** Tester for {@code Spliterator} implementations. */
end_comment

begin_class
annotation|@
name|GwtCompatible
DECL|class|SpliteratorTester
specifier|public
specifier|final
class|class
name|SpliteratorTester
parameter_list|<
name|E
parameter_list|>
block|{
comment|/** Return type from "contains the following elements" assertions. */
DECL|interface|Ordered
specifier|public
interface|interface
name|Ordered
block|{
comment|/**      * Attests that the expected values must not just be present but must be present in the order      * they were given.      */
DECL|method|inOrder ()
name|void
name|inOrder
parameter_list|()
function_decl|;
block|}
comment|/**    * Different ways of decomposing a Spliterator, all of which must produce the same elements (up to    * ordering, if Spliterator.ORDERED is not present).    */
DECL|enum|SpliteratorDecompositionStrategy
enum|enum
name|SpliteratorDecompositionStrategy
block|{
DECL|enumConstant|NO_SPLIT_FOR_EACH_REMAINING
name|NO_SPLIT_FOR_EACH_REMAINING
block|{
annotation|@
name|Override
argument_list|<
name|E
argument_list|>
name|void
name|forEach
parameter_list|(
name|Spliterator
argument_list|<
name|E
argument_list|>
name|spliterator
parameter_list|,
name|Consumer
argument_list|<
name|?
super|super
name|E
argument_list|>
name|consumer
parameter_list|)
block|{
name|spliterator
operator|.
name|forEachRemaining
argument_list|(
name|consumer
argument_list|)
expr_stmt|;
block|}
block|}
block|,
DECL|enumConstant|NO_SPLIT_TRY_ADVANCE
name|NO_SPLIT_TRY_ADVANCE
block|{
annotation|@
name|Override
argument_list|<
name|E
argument_list|>
name|void
name|forEach
parameter_list|(
name|Spliterator
argument_list|<
name|E
argument_list|>
name|spliterator
parameter_list|,
name|Consumer
argument_list|<
name|?
super|super
name|E
argument_list|>
name|consumer
parameter_list|)
block|{
while|while
condition|(
name|spliterator
operator|.
name|tryAdvance
argument_list|(
name|consumer
argument_list|)
condition|)
block|{
comment|// do nothing
block|}
block|}
block|}
block|,
DECL|enumConstant|MAXIMUM_SPLIT
name|MAXIMUM_SPLIT
block|{
annotation|@
name|Override
argument_list|<
name|E
argument_list|>
name|void
name|forEach
parameter_list|(
name|Spliterator
argument_list|<
name|E
argument_list|>
name|spliterator
parameter_list|,
name|Consumer
argument_list|<
name|?
super|super
name|E
argument_list|>
name|consumer
parameter_list|)
block|{
for|for
control|(
name|Spliterator
argument_list|<
name|E
argument_list|>
name|prefix
init|=
name|trySplitTestingSize
argument_list|(
name|spliterator
argument_list|)
init|;
name|prefix
operator|!=
literal|null
condition|;
name|prefix
operator|=
name|trySplitTestingSize
argument_list|(
name|spliterator
argument_list|)
control|)
block|{
name|forEach
argument_list|(
name|prefix
argument_list|,
name|consumer
argument_list|)
expr_stmt|;
block|}
name|long
name|size
init|=
name|spliterator
operator|.
name|getExactSizeIfKnown
argument_list|()
decl_stmt|;
name|long
index|[]
name|counter
init|=
block|{
literal|0
block|}
decl_stmt|;
name|spliterator
operator|.
name|forEachRemaining
argument_list|(
name|e
lambda|->
block|{
name|consumer
operator|.
name|accept
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|counter
index|[
literal|0
index|]
operator|++
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
if|if
condition|(
name|size
operator|>=
literal|0
condition|)
block|{
name|assertEquals
argument_list|(
name|size
argument_list|,
name|counter
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|,
DECL|enumConstant|ALTERNATE_ADVANCE_AND_SPLIT
name|ALTERNATE_ADVANCE_AND_SPLIT
block|{
annotation|@
name|Override
argument_list|<
name|E
argument_list|>
name|void
name|forEach
parameter_list|(
name|Spliterator
argument_list|<
name|E
argument_list|>
name|spliterator
parameter_list|,
name|Consumer
argument_list|<
name|?
super|super
name|E
argument_list|>
name|consumer
parameter_list|)
block|{
while|while
condition|(
name|spliterator
operator|.
name|tryAdvance
argument_list|(
name|consumer
argument_list|)
condition|)
block|{
name|Spliterator
argument_list|<
name|E
argument_list|>
name|prefix
init|=
name|trySplitTestingSize
argument_list|(
name|spliterator
argument_list|)
decl_stmt|;
if|if
condition|(
name|prefix
operator|!=
literal|null
condition|)
block|{
name|forEach
argument_list|(
name|prefix
argument_list|,
name|consumer
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|;
DECL|method|forEach (Spliterator<E> spliterator, Consumer<? super E> consumer)
specifier|abstract
parameter_list|<
name|E
parameter_list|>
name|void
name|forEach
parameter_list|(
name|Spliterator
argument_list|<
name|E
argument_list|>
name|spliterator
parameter_list|,
name|Consumer
argument_list|<
name|?
super|super
name|E
argument_list|>
name|consumer
parameter_list|)
function_decl|;
block|}
annotation|@
name|Nullable
DECL|method|trySplitTestingSize (Spliterator<E> spliterator)
specifier|private
specifier|static
parameter_list|<
name|E
parameter_list|>
name|Spliterator
argument_list|<
name|E
argument_list|>
name|trySplitTestingSize
parameter_list|(
name|Spliterator
argument_list|<
name|E
argument_list|>
name|spliterator
parameter_list|)
block|{
name|boolean
name|subsized
init|=
name|spliterator
operator|.
name|hasCharacteristics
argument_list|(
name|Spliterator
operator|.
name|SUBSIZED
argument_list|)
decl_stmt|;
name|long
name|originalSize
init|=
name|spliterator
operator|.
name|estimateSize
argument_list|()
decl_stmt|;
name|Spliterator
argument_list|<
name|E
argument_list|>
name|trySplit
init|=
name|spliterator
operator|.
name|trySplit
argument_list|()
decl_stmt|;
if|if
condition|(
name|spliterator
operator|.
name|estimateSize
argument_list|()
operator|>
name|originalSize
condition|)
block|{
name|fail
argument_list|(
name|format
argument_list|(
literal|"estimated size of spliterator after trySplit (%s) is larger than original size (%s)"
argument_list|,
name|spliterator
operator|.
name|estimateSize
argument_list|()
argument_list|,
name|originalSize
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|trySplit
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|trySplit
operator|.
name|estimateSize
argument_list|()
operator|>
name|originalSize
condition|)
block|{
name|fail
argument_list|(
name|format
argument_list|(
literal|"estimated size of trySplit result (%s) is larger than original size (%s)"
argument_list|,
name|trySplit
operator|.
name|estimateSize
argument_list|()
argument_list|,
name|originalSize
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|subsized
condition|)
block|{
if|if
condition|(
name|trySplit
operator|!=
literal|null
condition|)
block|{
name|assertEquals
argument_list|(
literal|"sum of estimated sizes of trySplit and original spliterator after trySplit"
argument_list|,
name|originalSize
argument_list|,
name|trySplit
operator|.
name|estimateSize
argument_list|()
operator|+
name|spliterator
operator|.
name|estimateSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
literal|"estimated size of spliterator after failed trySplit"
argument_list|,
name|originalSize
argument_list|,
name|spliterator
operator|.
name|estimateSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|trySplit
return|;
block|}
DECL|method|of (Supplier<Spliterator<E>> spliteratorSupplier)
specifier|public
specifier|static
parameter_list|<
name|E
parameter_list|>
name|SpliteratorTester
argument_list|<
name|E
argument_list|>
name|of
parameter_list|(
name|Supplier
argument_list|<
name|Spliterator
argument_list|<
name|E
argument_list|>
argument_list|>
name|spliteratorSupplier
parameter_list|)
block|{
return|return
operator|new
name|SpliteratorTester
argument_list|<
name|E
argument_list|>
argument_list|(
name|spliteratorSupplier
argument_list|)
return|;
block|}
DECL|field|spliteratorSupplier
specifier|private
specifier|final
name|Supplier
argument_list|<
name|Spliterator
argument_list|<
name|E
argument_list|>
argument_list|>
name|spliteratorSupplier
decl_stmt|;
DECL|method|SpliteratorTester (Supplier<Spliterator<E>> spliteratorSupplier)
specifier|private
name|SpliteratorTester
parameter_list|(
name|Supplier
argument_list|<
name|Spliterator
argument_list|<
name|E
argument_list|>
argument_list|>
name|spliteratorSupplier
parameter_list|)
block|{
name|this
operator|.
name|spliteratorSupplier
operator|=
name|checkNotNull
argument_list|(
name|spliteratorSupplier
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SafeVarargs
DECL|method|expect (Object... elements)
specifier|public
specifier|final
name|Ordered
name|expect
parameter_list|(
name|Object
modifier|...
name|elements
parameter_list|)
block|{
return|return
name|expect
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|elements
argument_list|)
argument_list|)
return|;
block|}
DECL|method|expect (Iterable<?> elements)
specifier|public
specifier|final
name|Ordered
name|expect
parameter_list|(
name|Iterable
argument_list|<
name|?
argument_list|>
name|elements
parameter_list|)
block|{
name|List
argument_list|<
name|List
argument_list|<
name|E
argument_list|>
argument_list|>
name|resultsForAllStrategies
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|Spliterator
argument_list|<
name|E
argument_list|>
name|spliterator
init|=
name|spliteratorSupplier
operator|.
name|get
argument_list|()
decl_stmt|;
name|int
name|characteristics
init|=
name|spliterator
operator|.
name|characteristics
argument_list|()
decl_stmt|;
name|long
name|estimatedSize
init|=
name|spliterator
operator|.
name|estimateSize
argument_list|()
decl_stmt|;
for|for
control|(
name|SpliteratorDecompositionStrategy
name|strategy
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|SpliteratorDecompositionStrategy
operator|.
name|class
argument_list|)
control|)
block|{
name|List
argument_list|<
name|E
argument_list|>
name|resultsForStrategy
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|strategy
operator|.
name|forEach
argument_list|(
name|spliteratorSupplier
operator|.
name|get
argument_list|()
argument_list|,
name|resultsForStrategy
operator|::
name|add
argument_list|)
expr_stmt|;
comment|// TODO(cpovirk): better failure messages
if|if
condition|(
operator|(
name|characteristics
operator|&
name|Spliterator
operator|.
name|NONNULL
operator|)
operator|!=
literal|0
condition|)
block|{
name|assertFalse
argument_list|(
name|resultsForStrategy
operator|.
name|contains
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|characteristics
operator|&
name|Spliterator
operator|.
name|SORTED
operator|)
operator|!=
literal|0
condition|)
block|{
name|Comparator
argument_list|<
name|?
super|super
name|E
argument_list|>
name|comparator
init|=
name|spliterator
operator|.
name|getComparator
argument_list|()
decl_stmt|;
if|if
condition|(
name|comparator
operator|==
literal|null
condition|)
block|{
name|comparator
operator|=
operator|(
name|Comparator
operator|)
name|Comparator
operator|.
name|naturalOrder
argument_list|()
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|Ordering
operator|.
name|from
argument_list|(
name|comparator
argument_list|)
operator|.
name|isOrdered
argument_list|(
name|resultsForStrategy
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|characteristics
operator|&
name|Spliterator
operator|.
name|SIZED
operator|)
operator|!=
literal|0
condition|)
block|{
name|assertEquals
argument_list|(
name|Ints
operator|.
name|checkedCast
argument_list|(
name|estimatedSize
argument_list|)
argument_list|,
name|resultsForStrategy
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertEqualIgnoringOrder
argument_list|(
name|elements
argument_list|,
name|resultsForStrategy
argument_list|)
expr_stmt|;
name|resultsForAllStrategies
operator|.
name|add
argument_list|(
name|resultsForStrategy
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|Ordered
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|inOrder
parameter_list|()
block|{
for|for
control|(
name|List
argument_list|<
name|E
argument_list|>
name|resultsForStrategy
range|:
name|resultsForAllStrategies
control|)
block|{
name|assertEqualInOrder
argument_list|(
name|elements
argument_list|,
name|resultsForStrategy
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

