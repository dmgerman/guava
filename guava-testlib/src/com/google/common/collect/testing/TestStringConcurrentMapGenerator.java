begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2015 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except  * in compliance with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software distributed under the License  * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express  * or implied. See the License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|com.google.common.collect.testing
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtCompatible
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentMap
import|;
end_import

begin_comment
comment|/**  * Implementation helper for {@link TestConcurrentMapGenerator} for use with maps of strings.  *  * @author Louis Wasserman  */
end_comment

begin_class
annotation|@
name|GwtCompatible
DECL|class|TestStringConcurrentMapGenerator
specifier|public
specifier|abstract
class|class
name|TestStringConcurrentMapGenerator
extends|extends
name|TestStringMapGenerator
implements|implements
name|TestConcurrentMapGenerator
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
block|{
annotation|@
name|Override
DECL|method|create (Object... entries)
specifier|public
name|ConcurrentMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|create
parameter_list|(
name|Object
modifier|...
name|entries
parameter_list|)
block|{
return|return
operator|(
name|ConcurrentMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
operator|)
name|super
operator|.
name|create
argument_list|(
name|entries
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|create (Entry<String, String>[] entries)
specifier|protected
specifier|abstract
name|ConcurrentMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|create
parameter_list|(
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
index|[]
name|entries
parameter_list|)
function_decl|;
block|}
end_class

end_unit

