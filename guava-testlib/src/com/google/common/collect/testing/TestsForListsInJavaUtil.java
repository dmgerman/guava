begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2009 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.collect.testing
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|features
operator|.
name|CollectionFeature
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|features
operator|.
name|CollectionSize
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|features
operator|.
name|ListFeature
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestSuite
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|AbstractList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|AbstractSequentialList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ListIterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CopyOnWriteArrayList
import|;
end_import

begin_comment
comment|/**  * Generates a test suite covering the {@link List} implementations in the  * {@link java.util} package. Can be subclassed to specify tests that should  * be suppressed.  *  * @author Kevin Bourrillion  */
end_comment

begin_class
DECL|class|TestsForListsInJavaUtil
specifier|public
class|class
name|TestsForListsInJavaUtil
block|{
DECL|method|suite ()
specifier|public
specifier|static
name|Test
name|suite
parameter_list|()
block|{
return|return
operator|new
name|TestsForListsInJavaUtil
argument_list|()
operator|.
name|allTests
argument_list|()
return|;
block|}
DECL|method|allTests ()
specifier|public
name|Test
name|allTests
parameter_list|()
block|{
name|TestSuite
name|suite
init|=
operator|new
name|TestSuite
argument_list|(
literal|"java.util Lists"
argument_list|)
decl_stmt|;
name|suite
operator|.
name|addTest
argument_list|(
name|testsForEmptyList
argument_list|()
argument_list|)
expr_stmt|;
name|suite
operator|.
name|addTest
argument_list|(
name|testsForSingletonList
argument_list|()
argument_list|)
expr_stmt|;
name|suite
operator|.
name|addTest
argument_list|(
name|testsForArraysAsList
argument_list|()
argument_list|)
expr_stmt|;
name|suite
operator|.
name|addTest
argument_list|(
name|testsForArrayList
argument_list|()
argument_list|)
expr_stmt|;
name|suite
operator|.
name|addTest
argument_list|(
name|testsForLinkedList
argument_list|()
argument_list|)
expr_stmt|;
name|suite
operator|.
name|addTest
argument_list|(
name|testsForCopyOnWriteArrayList
argument_list|()
argument_list|)
expr_stmt|;
name|suite
operator|.
name|addTest
argument_list|(
name|testsForUnmodifiableList
argument_list|()
argument_list|)
expr_stmt|;
name|suite
operator|.
name|addTest
argument_list|(
name|testsForCheckedList
argument_list|()
argument_list|)
expr_stmt|;
name|suite
operator|.
name|addTest
argument_list|(
name|testsForAbstractList
argument_list|()
argument_list|)
expr_stmt|;
name|suite
operator|.
name|addTest
argument_list|(
name|testsForAbstractSequentialList
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|suite
return|;
block|}
DECL|method|suppressForEmptyList ()
specifier|protected
name|Collection
argument_list|<
name|Method
argument_list|>
name|suppressForEmptyList
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|emptySet
argument_list|()
return|;
block|}
DECL|method|suppressForSingletonList ()
specifier|protected
name|Collection
argument_list|<
name|Method
argument_list|>
name|suppressForSingletonList
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|emptySet
argument_list|()
return|;
block|}
DECL|method|suppressForArraysAsList ()
specifier|protected
name|Collection
argument_list|<
name|Method
argument_list|>
name|suppressForArraysAsList
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|emptySet
argument_list|()
return|;
block|}
DECL|method|suppressForArrayList ()
specifier|protected
name|Collection
argument_list|<
name|Method
argument_list|>
name|suppressForArrayList
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|emptySet
argument_list|()
return|;
block|}
DECL|method|suppressForLinkedList ()
specifier|protected
name|Collection
argument_list|<
name|Method
argument_list|>
name|suppressForLinkedList
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|emptySet
argument_list|()
return|;
block|}
DECL|method|suppressForCopyOnWriteArrayList ()
specifier|protected
name|Collection
argument_list|<
name|Method
argument_list|>
name|suppressForCopyOnWriteArrayList
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|emptySet
argument_list|()
return|;
block|}
DECL|method|suppressForUnmodifiableList ()
specifier|protected
name|Collection
argument_list|<
name|Method
argument_list|>
name|suppressForUnmodifiableList
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|emptySet
argument_list|()
return|;
block|}
DECL|method|suppressForCheckedList ()
specifier|protected
name|Collection
argument_list|<
name|Method
argument_list|>
name|suppressForCheckedList
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|emptySet
argument_list|()
return|;
block|}
DECL|method|suppressForAbstractList ()
specifier|protected
name|Collection
argument_list|<
name|Method
argument_list|>
name|suppressForAbstractList
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|emptySet
argument_list|()
return|;
block|}
DECL|method|suppressForAbstractSequentialList ()
specifier|protected
name|Collection
argument_list|<
name|Method
argument_list|>
name|suppressForAbstractSequentialList
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|emptySet
argument_list|()
return|;
block|}
DECL|method|testsForEmptyList ()
specifier|public
name|Test
name|testsForEmptyList
parameter_list|()
block|{
return|return
name|ListTestSuiteBuilder
operator|.
name|using
argument_list|(
operator|new
name|TestStringListGenerator
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|create
parameter_list|(
name|String
index|[]
name|elements
parameter_list|)
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
block|}
argument_list|)
operator|.
name|named
argument_list|(
literal|"emptyList"
argument_list|)
operator|.
name|withFeatures
argument_list|(
name|CollectionFeature
operator|.
name|SERIALIZABLE
argument_list|,
name|CollectionSize
operator|.
name|ZERO
argument_list|)
operator|.
name|suppressing
argument_list|(
name|suppressForEmptyList
argument_list|()
argument_list|)
operator|.
name|createTestSuite
argument_list|()
return|;
block|}
DECL|method|testsForSingletonList ()
specifier|public
name|Test
name|testsForSingletonList
parameter_list|()
block|{
return|return
name|ListTestSuiteBuilder
operator|.
name|using
argument_list|(
operator|new
name|TestStringListGenerator
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|create
parameter_list|(
name|String
index|[]
name|elements
parameter_list|)
block|{
return|return
name|Collections
operator|.
name|singletonList
argument_list|(
name|elements
index|[
literal|0
index|]
argument_list|)
return|;
block|}
block|}
argument_list|)
operator|.
name|named
argument_list|(
literal|"singletonList"
argument_list|)
operator|.
name|withFeatures
argument_list|(
name|CollectionFeature
operator|.
name|SERIALIZABLE
argument_list|,
name|CollectionFeature
operator|.
name|ALLOWS_NULL_VALUES
argument_list|,
name|CollectionSize
operator|.
name|ONE
argument_list|)
operator|.
name|suppressing
argument_list|(
name|suppressForSingletonList
argument_list|()
argument_list|)
operator|.
name|createTestSuite
argument_list|()
return|;
block|}
DECL|method|testsForArraysAsList ()
specifier|public
name|Test
name|testsForArraysAsList
parameter_list|()
block|{
return|return
name|ListTestSuiteBuilder
operator|.
name|using
argument_list|(
operator|new
name|TestStringListGenerator
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|create
parameter_list|(
name|String
index|[]
name|elements
parameter_list|)
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
name|elements
operator|.
name|clone
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
operator|.
name|named
argument_list|(
literal|"Arrays.asList"
argument_list|)
operator|.
name|withFeatures
argument_list|(
name|ListFeature
operator|.
name|SUPPORTS_SET
argument_list|,
name|CollectionFeature
operator|.
name|SERIALIZABLE
argument_list|,
name|CollectionFeature
operator|.
name|ALLOWS_NULL_VALUES
argument_list|,
name|CollectionSize
operator|.
name|ANY
argument_list|)
operator|.
name|suppressing
argument_list|(
name|suppressForArraysAsList
argument_list|()
argument_list|)
operator|.
name|createTestSuite
argument_list|()
return|;
block|}
DECL|method|testsForArrayList ()
specifier|public
name|Test
name|testsForArrayList
parameter_list|()
block|{
return|return
name|ListTestSuiteBuilder
operator|.
name|using
argument_list|(
operator|new
name|TestStringListGenerator
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|create
parameter_list|(
name|String
index|[]
name|elements
parameter_list|)
block|{
return|return
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|MinimalCollection
operator|.
name|of
argument_list|(
name|elements
argument_list|)
argument_list|)
return|;
block|}
block|}
argument_list|)
operator|.
name|named
argument_list|(
literal|"ArrayList"
argument_list|)
operator|.
name|withFeatures
argument_list|(
name|ListFeature
operator|.
name|GENERAL_PURPOSE
argument_list|,
name|CollectionFeature
operator|.
name|SERIALIZABLE
argument_list|,
name|CollectionFeature
operator|.
name|ALLOWS_NULL_VALUES
argument_list|,
name|CollectionFeature
operator|.
name|FAILS_FAST_ON_CONCURRENT_MODIFICATION
argument_list|,
name|CollectionSize
operator|.
name|ANY
argument_list|)
operator|.
name|suppressing
argument_list|(
name|suppressForArrayList
argument_list|()
argument_list|)
operator|.
name|createTestSuite
argument_list|()
return|;
block|}
DECL|method|testsForLinkedList ()
specifier|public
name|Test
name|testsForLinkedList
parameter_list|()
block|{
return|return
name|ListTestSuiteBuilder
operator|.
name|using
argument_list|(
operator|new
name|TestStringListGenerator
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|create
parameter_list|(
name|String
index|[]
name|elements
parameter_list|)
block|{
return|return
operator|new
name|LinkedList
argument_list|<
name|String
argument_list|>
argument_list|(
name|MinimalCollection
operator|.
name|of
argument_list|(
name|elements
argument_list|)
argument_list|)
return|;
block|}
block|}
argument_list|)
operator|.
name|named
argument_list|(
literal|"LinkedList"
argument_list|)
operator|.
name|withFeatures
argument_list|(
name|ListFeature
operator|.
name|GENERAL_PURPOSE
argument_list|,
name|CollectionFeature
operator|.
name|SERIALIZABLE
argument_list|,
name|CollectionFeature
operator|.
name|ALLOWS_NULL_VALUES
argument_list|,
name|CollectionFeature
operator|.
name|FAILS_FAST_ON_CONCURRENT_MODIFICATION
argument_list|,
name|CollectionSize
operator|.
name|ANY
argument_list|)
operator|.
name|suppressing
argument_list|(
name|suppressForLinkedList
argument_list|()
argument_list|)
operator|.
name|createTestSuite
argument_list|()
return|;
block|}
DECL|method|testsForCopyOnWriteArrayList ()
specifier|public
name|Test
name|testsForCopyOnWriteArrayList
parameter_list|()
block|{
return|return
name|ListTestSuiteBuilder
operator|.
name|using
argument_list|(
operator|new
name|TestStringListGenerator
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|create
parameter_list|(
name|String
index|[]
name|elements
parameter_list|)
block|{
return|return
operator|new
name|CopyOnWriteArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|MinimalCollection
operator|.
name|of
argument_list|(
name|elements
argument_list|)
argument_list|)
return|;
block|}
block|}
argument_list|)
operator|.
name|named
argument_list|(
literal|"CopyOnWriteArrayList"
argument_list|)
operator|.
name|withFeatures
argument_list|(
name|ListFeature
operator|.
name|GENERAL_PURPOSE
argument_list|,
name|CollectionFeature
operator|.
name|SERIALIZABLE
argument_list|,
name|CollectionFeature
operator|.
name|ALLOWS_NULL_VALUES
argument_list|,
name|CollectionSize
operator|.
name|ANY
argument_list|)
operator|.
name|suppressing
argument_list|(
name|suppressForCopyOnWriteArrayList
argument_list|()
argument_list|)
operator|.
name|createTestSuite
argument_list|()
return|;
block|}
DECL|method|testsForUnmodifiableList ()
specifier|public
name|Test
name|testsForUnmodifiableList
parameter_list|()
block|{
return|return
name|ListTestSuiteBuilder
operator|.
name|using
argument_list|(
operator|new
name|TestStringListGenerator
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|create
parameter_list|(
name|String
index|[]
name|elements
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|innerList
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|Collections
operator|.
name|addAll
argument_list|(
name|innerList
argument_list|,
name|elements
argument_list|)
expr_stmt|;
return|return
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|innerList
argument_list|)
return|;
block|}
block|}
argument_list|)
operator|.
name|named
argument_list|(
literal|"unmodifiableList/ArrayList"
argument_list|)
operator|.
name|withFeatures
argument_list|(
name|CollectionFeature
operator|.
name|SERIALIZABLE
argument_list|,
name|CollectionFeature
operator|.
name|ALLOWS_NULL_VALUES
argument_list|,
name|CollectionSize
operator|.
name|ANY
argument_list|)
operator|.
name|suppressing
argument_list|(
name|suppressForUnmodifiableList
argument_list|()
argument_list|)
operator|.
name|createTestSuite
argument_list|()
return|;
block|}
DECL|method|testsForCheckedList ()
specifier|public
name|Test
name|testsForCheckedList
parameter_list|()
block|{
return|return
name|ListTestSuiteBuilder
operator|.
name|using
argument_list|(
operator|new
name|TestStringListGenerator
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|create
parameter_list|(
name|String
index|[]
name|elements
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|innerList
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|Collections
operator|.
name|addAll
argument_list|(
name|innerList
argument_list|,
name|elements
argument_list|)
expr_stmt|;
return|return
name|Collections
operator|.
name|checkedList
argument_list|(
name|innerList
argument_list|,
name|String
operator|.
name|class
argument_list|)
return|;
block|}
block|}
argument_list|)
operator|.
name|named
argument_list|(
literal|"checkedList/ArrayList"
argument_list|)
operator|.
name|withFeatures
argument_list|(
name|ListFeature
operator|.
name|GENERAL_PURPOSE
argument_list|,
name|CollectionFeature
operator|.
name|SERIALIZABLE
argument_list|,
name|CollectionFeature
operator|.
name|RESTRICTS_ELEMENTS
argument_list|,
name|CollectionFeature
operator|.
name|ALLOWS_NULL_VALUES
argument_list|,
name|CollectionSize
operator|.
name|ANY
argument_list|)
operator|.
name|suppressing
argument_list|(
name|suppressForCheckedList
argument_list|()
argument_list|)
operator|.
name|createTestSuite
argument_list|()
return|;
block|}
DECL|method|testsForAbstractList ()
specifier|public
name|Test
name|testsForAbstractList
parameter_list|()
block|{
return|return
name|ListTestSuiteBuilder
operator|.
name|using
argument_list|(
operator|new
name|TestStringListGenerator
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|List
argument_list|<
name|String
argument_list|>
name|create
parameter_list|(
specifier|final
name|String
index|[]
name|elements
parameter_list|)
block|{
return|return
operator|new
name|AbstractList
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|elements
operator|.
name|length
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|get
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
name|elements
index|[
name|index
index|]
return|;
block|}
block|}
return|;
block|}
block|}
argument_list|)
operator|.
name|named
argument_list|(
literal|"AbstractList"
argument_list|)
operator|.
name|withFeatures
argument_list|(
name|CollectionFeature
operator|.
name|NONE
argument_list|,
name|CollectionFeature
operator|.
name|ALLOWS_NULL_VALUES
argument_list|,
name|CollectionSize
operator|.
name|ANY
argument_list|)
operator|.
name|suppressing
argument_list|(
name|suppressForAbstractList
argument_list|()
argument_list|)
operator|.
name|createTestSuite
argument_list|()
return|;
block|}
DECL|method|testsForAbstractSequentialList ()
specifier|public
name|Test
name|testsForAbstractSequentialList
parameter_list|()
block|{
return|return
name|ListTestSuiteBuilder
operator|.
name|using
argument_list|(
operator|new
name|TestStringListGenerator
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|List
argument_list|<
name|String
argument_list|>
name|create
parameter_list|(
specifier|final
name|String
index|[]
name|elements
parameter_list|)
block|{
comment|// For this test we trust ArrayList works
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|Collections
operator|.
name|addAll
argument_list|(
name|list
argument_list|,
name|elements
argument_list|)
expr_stmt|;
return|return
operator|new
name|AbstractSequentialList
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|list
operator|.
name|size
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|ListIterator
argument_list|<
name|String
argument_list|>
name|listIterator
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
name|list
operator|.
name|listIterator
argument_list|(
name|index
argument_list|)
return|;
block|}
block|}
return|;
block|}
block|}
argument_list|)
operator|.
name|named
argument_list|(
literal|"AbstractSequentialList"
argument_list|)
operator|.
name|withFeatures
argument_list|(
name|ListFeature
operator|.
name|GENERAL_PURPOSE
argument_list|,
name|CollectionFeature
operator|.
name|ALLOWS_NULL_VALUES
argument_list|,
name|CollectionSize
operator|.
name|ANY
argument_list|)
operator|.
name|suppressing
argument_list|(
name|suppressForAbstractSequentialList
argument_list|()
argument_list|)
operator|.
name|createTestSuite
argument_list|()
return|;
block|}
block|}
end_class

end_unit

