begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2007 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.collect.testing
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtCompatible
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_comment
comment|/**  * A utility for testing an Iterator implementation by comparing its behavior to  * that of a "known good" reference implementation. In order to accomplish this,  * it's important to test a great variety of sequences of the  * {@link Iterator#next}, {@link Iterator#hasNext} and {@link Iterator#remove}  * operations. This utility takes the brute-force approach of trying<i>all</i>  * possible sequences of these operations, up to a given number of steps. So, if  * the caller specifies to use<i>n</i> steps, a total of<i>3^n</i> tests are  * actually performed.  *  *<p>For instance, if<i>steps</i> is 5, one example sequence that will be  * tested is:  *  *<ol>  *<li>remove();  *<li>hasNext()  *<li>hasNext();  *<li>remove();  *<li>next();  *</ol>  *  *<p>This particular order of operations may be unrealistic, and testing all 3^5  * of them may be thought of as overkill; however, it's difficult to determine  * which proper subset of this massive set would be sufficient to expose any  * possible bug. Brute force is simpler.  *  *<p>To use this class the concrete subclass must implement the  * {@link IteratorTester#newTargetIterator()} method. This is because it's  * impossible to test an Iterator without changing its state, so the tester  * needs a steady supply of fresh Iterators.  *  *<p>If your iterator supports modification through {@code remove()}, you may  * wish to override the verify() method, which is called<em>after</em>  * each sequence and is guaranteed to be called using the latest values  * obtained from {@link IteratorTester#newTargetIterator()}.  *  * @author Kevin Bourrillion  * @author Chris Povirk  */
end_comment

begin_class
annotation|@
name|GwtCompatible
DECL|class|IteratorTester
specifier|public
specifier|abstract
class|class
name|IteratorTester
parameter_list|<
name|E
parameter_list|>
extends|extends
name|AbstractIteratorTester
argument_list|<
name|E
argument_list|,
name|Iterator
argument_list|<
name|E
argument_list|>
argument_list|>
block|{
comment|/**    * Creates an IteratorTester.    *    * @param steps how many operations to test for each tested pair of iterators    * @param features the features supported by the iterator    */
DECL|method|IteratorTester ( int steps, Iterable<? extends IteratorFeature> features, Iterable<E> expectedElements, KnownOrder knownOrder)
specifier|protected
name|IteratorTester
parameter_list|(
name|int
name|steps
parameter_list|,
name|Iterable
argument_list|<
name|?
extends|extends
name|IteratorFeature
argument_list|>
name|features
parameter_list|,
name|Iterable
argument_list|<
name|E
argument_list|>
name|expectedElements
parameter_list|,
name|KnownOrder
name|knownOrder
parameter_list|)
block|{
name|super
argument_list|(
name|steps
argument_list|,
name|Collections
operator|.
expr|<
name|E
operator|>
name|singleton
argument_list|(
literal|null
argument_list|)
argument_list|,
name|features
argument_list|,
name|expectedElements
argument_list|,
name|knownOrder
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getStimulusValues ()
specifier|protected
specifier|final
name|Iterable
argument_list|<
name|Stimulus
argument_list|<
name|E
argument_list|,
name|Iterator
argument_list|<
name|E
argument_list|>
argument_list|>
argument_list|>
name|getStimulusValues
parameter_list|()
block|{
return|return
name|iteratorStimuli
argument_list|()
return|;
block|}
block|}
end_class

end_unit

