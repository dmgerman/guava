begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2008 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.collect.testing
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|Helpers
operator|.
name|castOrCopyToList
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|Helpers
operator|.
name|equal
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|Helpers
operator|.
name|mapEntry
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|sort
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtCompatible
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|DerivedCollectionGenerators
operator|.
name|SortedMapSubmapTestMapGenerator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedMap
import|;
end_import

begin_comment
comment|/**  * Derived suite generators, split out of the suite builders so that they are available to GWT.  *  * @author George van den Driessche  */
end_comment

begin_class
annotation|@
name|GwtCompatible
DECL|class|DerivedCollectionGenerators
specifier|public
specifier|final
class|class
name|DerivedCollectionGenerators
block|{
DECL|class|MapEntrySetGenerator
specifier|public
specifier|static
class|class
name|MapEntrySetGenerator
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
implements|implements
name|TestSetGenerator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
implements|,
name|DerivedGenerator
block|{
specifier|private
specifier|final
name|OneSizeTestContainerGenerator
argument_list|<
name|Map
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|,
name|Map
operator|.
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
DECL|field|mapGenerator
name|mapGenerator
decl_stmt|;
DECL|method|MapEntrySetGenerator ( OneSizeTestContainerGenerator< Map<K, V>, Map.Entry<K, V>> mapGenerator)
specifier|public
name|MapEntrySetGenerator
parameter_list|(
name|OneSizeTestContainerGenerator
argument_list|<
name|Map
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|,
name|Map
operator|.
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|mapGenerator
parameter_list|)
block|{
name|this
operator|.
name|mapGenerator
operator|=
name|mapGenerator
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|samples ()
specifier|public
name|SampleElements
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|samples
parameter_list|()
block|{
return|return
name|mapGenerator
operator|.
name|samples
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|create (Object... elements)
specifier|public
name|Set
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|create
parameter_list|(
name|Object
modifier|...
name|elements
parameter_list|)
block|{
return|return
name|mapGenerator
operator|.
name|create
argument_list|(
name|elements
argument_list|)
operator|.
name|entrySet
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|createArray (int length)
specifier|public
name|Map
operator|.
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
index|[]
name|createArray
parameter_list|(
name|int
name|length
parameter_list|)
block|{
return|return
name|mapGenerator
operator|.
name|createArray
argument_list|(
name|length
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|order ( List<Map.Entry<K, V>> insertionOrder)
specifier|public
name|Iterable
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|order
parameter_list|(
name|List
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|insertionOrder
parameter_list|)
block|{
return|return
name|mapGenerator
operator|.
name|order
argument_list|(
name|insertionOrder
argument_list|)
return|;
block|}
DECL|method|getInnerGenerator ()
specifier|public
name|OneSizeTestContainerGenerator
argument_list|<
name|Map
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|,
name|Map
operator|.
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|getInnerGenerator
parameter_list|()
block|{
return|return
name|mapGenerator
return|;
block|}
block|}
comment|// TODO: investigate some API changes to SampleElements that would tidy up
comment|// parts of the following classes.
DECL|class|MapKeySetGenerator
specifier|public
specifier|static
class|class
name|MapKeySetGenerator
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
implements|implements
name|TestSetGenerator
argument_list|<
name|K
argument_list|>
implements|,
name|DerivedGenerator
block|{
specifier|private
specifier|final
name|OneSizeTestContainerGenerator
argument_list|<
name|Map
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|,
name|Map
operator|.
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
DECL|field|mapGenerator
name|mapGenerator
decl_stmt|;
DECL|field|samples
specifier|private
specifier|final
name|SampleElements
argument_list|<
name|K
argument_list|>
name|samples
decl_stmt|;
DECL|method|MapKeySetGenerator ( OneSizeTestContainerGenerator<Map<K, V>, Map.Entry<K, V>> mapGenerator)
specifier|public
name|MapKeySetGenerator
parameter_list|(
name|OneSizeTestContainerGenerator
argument_list|<
name|Map
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|,
name|Map
operator|.
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|mapGenerator
parameter_list|)
block|{
name|this
operator|.
name|mapGenerator
operator|=
name|mapGenerator
expr_stmt|;
specifier|final
name|SampleElements
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|mapSamples
init|=
name|this
operator|.
name|mapGenerator
operator|.
name|samples
argument_list|()
decl_stmt|;
name|this
operator|.
name|samples
operator|=
operator|new
name|SampleElements
argument_list|<
name|K
argument_list|>
argument_list|(
name|mapSamples
operator|.
name|e0
operator|.
name|getKey
argument_list|()
argument_list|,
name|mapSamples
operator|.
name|e1
operator|.
name|getKey
argument_list|()
argument_list|,
name|mapSamples
operator|.
name|e2
operator|.
name|getKey
argument_list|()
argument_list|,
name|mapSamples
operator|.
name|e3
operator|.
name|getKey
argument_list|()
argument_list|,
name|mapSamples
operator|.
name|e4
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|samples ()
specifier|public
name|SampleElements
argument_list|<
name|K
argument_list|>
name|samples
parameter_list|()
block|{
return|return
name|samples
return|;
block|}
annotation|@
name|Override
DECL|method|create (Object... elements)
specifier|public
name|Set
argument_list|<
name|K
argument_list|>
name|create
parameter_list|(
name|Object
modifier|...
name|elements
parameter_list|)
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|K
index|[]
name|keysArray
init|=
operator|(
name|K
index|[]
operator|)
name|elements
decl_stmt|;
comment|// Start with a suitably shaped collection of entries
name|Collection
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|originalEntries
init|=
name|mapGenerator
operator|.
name|getSampleElements
argument_list|(
name|elements
operator|.
name|length
argument_list|)
decl_stmt|;
comment|// Create a copy of that, with the desired value for each key
name|Collection
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|entries
init|=
operator|new
name|ArrayList
argument_list|<
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
argument_list|(
name|elements
operator|.
name|length
argument_list|)
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|entry
range|:
name|originalEntries
control|)
block|{
name|entries
operator|.
name|add
argument_list|(
name|Helpers
operator|.
name|mapEntry
argument_list|(
name|keysArray
index|[
name|i
operator|++
index|]
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|mapGenerator
operator|.
name|create
argument_list|(
name|entries
operator|.
name|toArray
argument_list|()
argument_list|)
operator|.
name|keySet
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|createArray (int length)
specifier|public
name|K
index|[]
name|createArray
parameter_list|(
name|int
name|length
parameter_list|)
block|{
comment|// TODO: with appropriate refactoring of OneSizeGenerator, we can perhaps
comment|// tidy this up and get rid of the casts here and in
comment|// MapValueCollectionGenerator.
return|return
operator|(
operator|(
name|TestMapGenerator
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
operator|)
name|mapGenerator
operator|.
name|getInnerGenerator
argument_list|()
operator|)
operator|.
name|createKeyArray
argument_list|(
name|length
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|order (List<K> insertionOrder)
specifier|public
name|Iterable
argument_list|<
name|K
argument_list|>
name|order
parameter_list|(
name|List
argument_list|<
name|K
argument_list|>
name|insertionOrder
parameter_list|)
block|{
name|V
name|v
init|=
operator|(
operator|(
name|TestMapGenerator
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
operator|)
name|mapGenerator
operator|.
name|getInnerGenerator
argument_list|()
operator|)
operator|.
name|samples
argument_list|()
operator|.
name|e0
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|entries
init|=
operator|new
name|ArrayList
argument_list|<
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|K
name|element
range|:
name|insertionOrder
control|)
block|{
name|entries
operator|.
name|add
argument_list|(
name|mapEntry
argument_list|(
name|element
argument_list|,
name|v
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|K
argument_list|>
name|keys
init|=
operator|new
name|ArrayList
argument_list|<
name|K
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|entry
range|:
name|mapGenerator
operator|.
name|order
argument_list|(
name|entries
argument_list|)
control|)
block|{
name|keys
operator|.
name|add
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|keys
return|;
block|}
DECL|method|getInnerGenerator ()
specifier|public
name|OneSizeTestContainerGenerator
argument_list|<
name|Map
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|,
name|Map
operator|.
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|getInnerGenerator
parameter_list|()
block|{
return|return
name|mapGenerator
return|;
block|}
block|}
DECL|class|MapValueCollectionGenerator
specifier|public
specifier|static
class|class
name|MapValueCollectionGenerator
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
implements|implements
name|TestCollectionGenerator
argument_list|<
name|V
argument_list|>
implements|,
name|DerivedGenerator
block|{
specifier|private
specifier|final
name|OneSizeTestContainerGenerator
argument_list|<
name|Map
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|,
name|Map
operator|.
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
DECL|field|mapGenerator
name|mapGenerator
decl_stmt|;
DECL|field|samples
specifier|private
specifier|final
name|SampleElements
argument_list|<
name|V
argument_list|>
name|samples
decl_stmt|;
DECL|method|MapValueCollectionGenerator ( OneSizeTestContainerGenerator< Map<K, V>, Map.Entry<K, V>> mapGenerator)
specifier|public
name|MapValueCollectionGenerator
parameter_list|(
name|OneSizeTestContainerGenerator
argument_list|<
name|Map
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|,
name|Map
operator|.
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|mapGenerator
parameter_list|)
block|{
name|this
operator|.
name|mapGenerator
operator|=
name|mapGenerator
expr_stmt|;
specifier|final
name|SampleElements
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|mapSamples
init|=
name|this
operator|.
name|mapGenerator
operator|.
name|samples
argument_list|()
decl_stmt|;
name|this
operator|.
name|samples
operator|=
operator|new
name|SampleElements
argument_list|<
name|V
argument_list|>
argument_list|(
name|mapSamples
operator|.
name|e0
operator|.
name|getValue
argument_list|()
argument_list|,
name|mapSamples
operator|.
name|e1
operator|.
name|getValue
argument_list|()
argument_list|,
name|mapSamples
operator|.
name|e2
operator|.
name|getValue
argument_list|()
argument_list|,
name|mapSamples
operator|.
name|e3
operator|.
name|getValue
argument_list|()
argument_list|,
name|mapSamples
operator|.
name|e4
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|samples ()
specifier|public
name|SampleElements
argument_list|<
name|V
argument_list|>
name|samples
parameter_list|()
block|{
return|return
name|samples
return|;
block|}
annotation|@
name|Override
DECL|method|create (Object... elements)
specifier|public
name|Collection
argument_list|<
name|V
argument_list|>
name|create
parameter_list|(
name|Object
modifier|...
name|elements
parameter_list|)
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|V
index|[]
name|valuesArray
init|=
operator|(
name|V
index|[]
operator|)
name|elements
decl_stmt|;
comment|// Start with a suitably shaped collection of entries
name|Collection
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|originalEntries
init|=
name|mapGenerator
operator|.
name|getSampleElements
argument_list|(
name|elements
operator|.
name|length
argument_list|)
decl_stmt|;
comment|// Create a copy of that, with the desired value for each value
name|Collection
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|entries
init|=
operator|new
name|ArrayList
argument_list|<
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
argument_list|(
name|elements
operator|.
name|length
argument_list|)
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|entry
range|:
name|originalEntries
control|)
block|{
name|entries
operator|.
name|add
argument_list|(
name|Helpers
operator|.
name|mapEntry
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|valuesArray
index|[
name|i
operator|++
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|mapGenerator
operator|.
name|create
argument_list|(
name|entries
operator|.
name|toArray
argument_list|()
argument_list|)
operator|.
name|values
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|createArray (int length)
specifier|public
name|V
index|[]
name|createArray
parameter_list|(
name|int
name|length
parameter_list|)
block|{
comment|//noinspection UnnecessaryLocalVariable
specifier|final
name|V
index|[]
name|vs
init|=
operator|(
operator|(
name|TestMapGenerator
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
operator|)
name|mapGenerator
operator|.
name|getInnerGenerator
argument_list|()
operator|)
operator|.
name|createValueArray
argument_list|(
name|length
argument_list|)
decl_stmt|;
return|return
name|vs
return|;
block|}
annotation|@
name|Override
DECL|method|order (List<V> insertionOrder)
specifier|public
name|Iterable
argument_list|<
name|V
argument_list|>
name|order
parameter_list|(
name|List
argument_list|<
name|V
argument_list|>
name|insertionOrder
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|orderedEntries
init|=
name|castOrCopyToList
argument_list|(
name|mapGenerator
operator|.
name|order
argument_list|(
name|castOrCopyToList
argument_list|(
name|mapGenerator
operator|.
name|getSampleElements
argument_list|(
literal|5
argument_list|)
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|sort
argument_list|(
name|insertionOrder
argument_list|,
operator|new
name|Comparator
argument_list|<
name|V
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|V
name|left
parameter_list|,
name|V
name|right
parameter_list|)
block|{
comment|// The indexes are small enough for the subtraction trick to be safe.
return|return
name|indexOfEntryWithValue
argument_list|(
name|left
argument_list|)
operator|-
name|indexOfEntryWithValue
argument_list|(
name|right
argument_list|)
return|;
block|}
name|int
name|indexOfEntryWithValue
parameter_list|(
name|V
name|value
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|orderedEntries
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|equal
argument_list|(
name|orderedEntries
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|,
name|value
argument_list|)
condition|)
block|{
return|return
name|i
return|;
block|}
block|}
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Map.values generator can order only sample values"
argument_list|)
throw|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
name|insertionOrder
return|;
block|}
DECL|method|getInnerGenerator ()
specifier|public
name|OneSizeTestContainerGenerator
argument_list|<
name|Map
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|,
name|Map
operator|.
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|getInnerGenerator
parameter_list|()
block|{
return|return
name|mapGenerator
return|;
block|}
block|}
comment|// TODO(cpovirk): could something like this be used elsewhere, e.g., ReserializedListGenerator?
DECL|class|ForwardingTestMapGenerator
specifier|static
class|class
name|ForwardingTestMapGenerator
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
implements|implements
name|TestMapGenerator
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
block|{
DECL|field|delegate
name|TestMapGenerator
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|delegate
decl_stmt|;
DECL|method|ForwardingTestMapGenerator (TestMapGenerator<K, V> delegate)
name|ForwardingTestMapGenerator
parameter_list|(
name|TestMapGenerator
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|delegate
parameter_list|)
block|{
name|this
operator|.
name|delegate
operator|=
name|delegate
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|order (List<Entry<K, V>> insertionOrder)
specifier|public
name|Iterable
argument_list|<
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|order
parameter_list|(
name|List
argument_list|<
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|insertionOrder
parameter_list|)
block|{
return|return
name|delegate
operator|.
name|order
argument_list|(
name|insertionOrder
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|createKeyArray (int length)
specifier|public
name|K
index|[]
name|createKeyArray
parameter_list|(
name|int
name|length
parameter_list|)
block|{
return|return
name|delegate
operator|.
name|createKeyArray
argument_list|(
name|length
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|createValueArray (int length)
specifier|public
name|V
index|[]
name|createValueArray
parameter_list|(
name|int
name|length
parameter_list|)
block|{
return|return
name|delegate
operator|.
name|createValueArray
argument_list|(
name|length
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|samples ()
specifier|public
name|SampleElements
argument_list|<
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|samples
parameter_list|()
block|{
return|return
name|delegate
operator|.
name|samples
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|create (Object... elements)
specifier|public
name|Map
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|create
parameter_list|(
name|Object
modifier|...
name|elements
parameter_list|)
block|{
return|return
name|delegate
operator|.
name|create
argument_list|(
name|elements
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|createArray (int length)
specifier|public
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
index|[]
name|createArray
parameter_list|(
name|int
name|length
parameter_list|)
block|{
return|return
name|delegate
operator|.
name|createArray
argument_list|(
name|length
argument_list|)
return|;
block|}
block|}
comment|/**    * Two bounds (from and to) define how to build a subMap.    */
DECL|enum|Bound
specifier|public
enum|enum
name|Bound
block|{
DECL|enumConstant|INCLUSIVE
name|INCLUSIVE
block|,
DECL|enumConstant|EXCLUSIVE
name|EXCLUSIVE
block|,
DECL|enumConstant|NO_BOUND
name|NO_BOUND
block|;   }
comment|/*    * TODO(cpovirk): surely we can find a less ugly solution than a class that accepts 3 parameters,    * exposes as many getters, does work in the constructor, and has both a superclass and a subclass    */
DECL|class|SortedMapSubmapTestMapGenerator
specifier|public
specifier|static
class|class
name|SortedMapSubmapTestMapGenerator
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
extends|extends
name|ForwardingTestMapGenerator
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
block|{
DECL|field|to
specifier|final
name|Bound
name|to
decl_stmt|;
DECL|field|from
specifier|final
name|Bound
name|from
decl_stmt|;
DECL|field|firstInclusive
specifier|final
name|K
name|firstInclusive
decl_stmt|;
DECL|field|lastInclusive
specifier|final
name|K
name|lastInclusive
decl_stmt|;
DECL|field|entryComparator
specifier|private
specifier|final
name|Comparator
argument_list|<
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|entryComparator
decl_stmt|;
DECL|method|SortedMapSubmapTestMapGenerator (TestMapGenerator<K, V> delegate, Bound to, Bound from)
specifier|public
name|SortedMapSubmapTestMapGenerator
parameter_list|(
name|TestMapGenerator
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|delegate
parameter_list|,
name|Bound
name|to
parameter_list|,
name|Bound
name|from
parameter_list|)
block|{
name|super
argument_list|(
name|delegate
argument_list|)
expr_stmt|;
name|this
operator|.
name|to
operator|=
name|to
expr_stmt|;
name|this
operator|.
name|from
operator|=
name|from
expr_stmt|;
name|SortedMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|emptyMap
init|=
operator|(
name|SortedMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
operator|)
name|delegate
operator|.
name|create
argument_list|()
decl_stmt|;
name|this
operator|.
name|entryComparator
operator|=
name|Helpers
operator|.
name|entryComparator
argument_list|(
name|emptyMap
operator|.
name|comparator
argument_list|()
argument_list|)
expr_stmt|;
comment|// derive values for inclusive filtering from the input samples
name|SampleElements
argument_list|<
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|samples
init|=
name|delegate
operator|.
name|samples
argument_list|()
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// no elements are inserted into the array
name|List
argument_list|<
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|samplesList
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|samples
operator|.
name|e0
argument_list|,
name|samples
operator|.
name|e1
argument_list|,
name|samples
operator|.
name|e2
argument_list|,
name|samples
operator|.
name|e3
argument_list|,
name|samples
operator|.
name|e4
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|samplesList
argument_list|,
name|entryComparator
argument_list|)
expr_stmt|;
name|this
operator|.
name|firstInclusive
operator|=
name|samplesList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getKey
argument_list|()
expr_stmt|;
name|this
operator|.
name|lastInclusive
operator|=
name|samplesList
operator|.
name|get
argument_list|(
name|samplesList
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
operator|.
name|getKey
argument_list|()
expr_stmt|;
block|}
DECL|method|create (Object... entries)
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|create
parameter_list|(
name|Object
modifier|...
name|entries
parameter_list|)
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// we dangerously assume K and V are both strings
name|List
argument_list|<
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|extremeValues
init|=
operator|(
name|List
operator|)
name|getExtremeValues
argument_list|()
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// map generators must past entry objects
name|List
argument_list|<
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|normalValues
init|=
operator|(
name|List
operator|)
name|Arrays
operator|.
name|asList
argument_list|(
name|entries
argument_list|)
decl_stmt|;
comment|// prepare extreme values to be filtered out of view
name|Collections
operator|.
name|sort
argument_list|(
name|extremeValues
argument_list|,
name|entryComparator
argument_list|)
expr_stmt|;
name|K
name|firstExclusive
init|=
name|extremeValues
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|K
name|lastExclusive
init|=
name|extremeValues
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|getKey
argument_list|()
decl_stmt|;
if|if
condition|(
name|from
operator|==
name|Bound
operator|.
name|NO_BOUND
condition|)
block|{
name|extremeValues
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|extremeValues
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|to
operator|==
name|Bound
operator|.
name|NO_BOUND
condition|)
block|{
name|extremeValues
operator|.
name|remove
argument_list|(
name|extremeValues
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
name|extremeValues
operator|.
name|remove
argument_list|(
name|extremeValues
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
comment|// the regular values should be visible after filtering
name|List
argument_list|<
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|allEntries
init|=
operator|new
name|ArrayList
argument_list|<
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|allEntries
operator|.
name|addAll
argument_list|(
name|extremeValues
argument_list|)
expr_stmt|;
name|allEntries
operator|.
name|addAll
argument_list|(
name|normalValues
argument_list|)
expr_stmt|;
name|SortedMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|map
init|=
operator|(
name|SortedMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
operator|)
name|delegate
operator|.
name|create
argument_list|(
operator|(
name|Object
index|[]
operator|)
name|allEntries
operator|.
name|toArray
argument_list|(
operator|new
name|Entry
index|[
name|allEntries
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|createSubMap
argument_list|(
name|map
argument_list|,
name|firstExclusive
argument_list|,
name|lastExclusive
argument_list|)
return|;
block|}
comment|/**      * Calls the smallest subMap overload that filters out the extreme values. This method is      * overridden in NavigableMapTestSuiteBuilder.      */
DECL|method|createSubMap (SortedMap<K, V> map, K firstExclusive, K lastExclusive)
name|Map
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|createSubMap
parameter_list|(
name|SortedMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|map
parameter_list|,
name|K
name|firstExclusive
parameter_list|,
name|K
name|lastExclusive
parameter_list|)
block|{
if|if
condition|(
name|from
operator|==
name|Bound
operator|.
name|NO_BOUND
operator|&&
name|to
operator|==
name|Bound
operator|.
name|EXCLUSIVE
condition|)
block|{
return|return
name|map
operator|.
name|headMap
argument_list|(
name|lastExclusive
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|from
operator|==
name|Bound
operator|.
name|INCLUSIVE
operator|&&
name|to
operator|==
name|Bound
operator|.
name|NO_BOUND
condition|)
block|{
return|return
name|map
operator|.
name|tailMap
argument_list|(
name|firstInclusive
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|from
operator|==
name|Bound
operator|.
name|INCLUSIVE
operator|&&
name|to
operator|==
name|Bound
operator|.
name|EXCLUSIVE
condition|)
block|{
return|return
name|map
operator|.
name|subMap
argument_list|(
name|firstInclusive
argument_list|,
name|lastExclusive
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
block|}
DECL|method|getTo ()
specifier|public
specifier|final
name|Bound
name|getTo
parameter_list|()
block|{
return|return
name|to
return|;
block|}
DECL|method|getFrom ()
specifier|public
specifier|final
name|Bound
name|getFrom
parameter_list|()
block|{
return|return
name|from
return|;
block|}
DECL|method|getInnerGenerator ()
specifier|public
specifier|final
name|TestMapGenerator
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|getInnerGenerator
parameter_list|()
block|{
return|return
name|delegate
return|;
block|}
block|}
comment|/**    * Returns an array of four bogus elements that will always be too high or    * too low for the display. This includes two values for each extreme.    *    *<p>This method (dangerously) assume that the strings {@code "!! a"} and    * {@code "~~ z"} will work for this purpose, which may cause problems for    * navigable maps with non-string or unicode generators.    */
DECL|method|getExtremeValues ()
specifier|private
specifier|static
name|List
argument_list|<
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|getExtremeValues
parameter_list|()
block|{
name|List
argument_list|<
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|result
operator|.
name|add
argument_list|(
name|Helpers
operator|.
name|mapEntry
argument_list|(
literal|"!! a"
argument_list|,
literal|"below view"
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|add
argument_list|(
name|Helpers
operator|.
name|mapEntry
argument_list|(
literal|"!! b"
argument_list|,
literal|"below view"
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|add
argument_list|(
name|Helpers
operator|.
name|mapEntry
argument_list|(
literal|"~~ y"
argument_list|,
literal|"above view"
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|add
argument_list|(
name|Helpers
operator|.
name|mapEntry
argument_list|(
literal|"~~ z"
argument_list|,
literal|"above view"
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
DECL|method|DerivedCollectionGenerators ()
specifier|private
name|DerivedCollectionGenerators
parameter_list|()
block|{}
block|}
end_class

end_unit

