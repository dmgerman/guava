begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2010 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.collect.testing
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|Helpers
operator|.
name|castOrCopyToList
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|reverse
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtIncompatible
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|DerivedCollectionGenerators
operator|.
name|Bound
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|DerivedCollectionGenerators
operator|.
name|ForwardingTestMapGenerator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|DerivedCollectionGenerators
operator|.
name|SortedMapSubmapTestMapGenerator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|features
operator|.
name|Feature
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|testers
operator|.
name|NavigableMapNavigationTester
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NavigableMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedMap
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestSuite
import|;
end_import

begin_comment
comment|/**  * Creates, based on your criteria, a JUnit test suite that exhaustively tests a NavigableMap  * implementation.  */
end_comment

begin_class
annotation|@
name|GwtIncompatible
DECL|class|NavigableMapTestSuiteBuilder
specifier|public
class|class
name|NavigableMapTestSuiteBuilder
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
extends|extends
name|SortedMapTestSuiteBuilder
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
block|{
DECL|method|using ( TestSortedMapGenerator<K, V> generator)
specifier|public
specifier|static
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
name|NavigableMapTestSuiteBuilder
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|using
parameter_list|(
name|TestSortedMapGenerator
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|generator
parameter_list|)
block|{
name|NavigableMapTestSuiteBuilder
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|result
init|=
operator|new
name|NavigableMapTestSuiteBuilder
argument_list|<>
argument_list|()
decl_stmt|;
name|result
operator|.
name|usingGenerator
argument_list|(
name|generator
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|Override
DECL|method|getTesters ()
specifier|protected
name|List
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|AbstractTester
argument_list|>
argument_list|>
name|getTesters
parameter_list|()
block|{
name|List
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|AbstractTester
argument_list|>
argument_list|>
name|testers
init|=
name|Helpers
operator|.
name|copyToList
argument_list|(
name|super
operator|.
name|getTesters
argument_list|()
argument_list|)
decl_stmt|;
name|testers
operator|.
name|add
argument_list|(
name|NavigableMapNavigationTester
operator|.
name|class
argument_list|)
expr_stmt|;
return|return
name|testers
return|;
block|}
annotation|@
name|Override
DECL|method|createDerivedSuites ( FeatureSpecificTestSuiteBuilder< ?, ? extends OneSizeTestContainerGenerator<Map<K, V>, Entry<K, V>>> parentBuilder)
specifier|protected
name|List
argument_list|<
name|TestSuite
argument_list|>
name|createDerivedSuites
parameter_list|(
name|FeatureSpecificTestSuiteBuilder
argument_list|<
name|?
argument_list|,
name|?
extends|extends
name|OneSizeTestContainerGenerator
argument_list|<
name|Map
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|,
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
argument_list|>
name|parentBuilder
parameter_list|)
block|{
name|List
argument_list|<
name|TestSuite
argument_list|>
name|derivedSuites
init|=
name|super
operator|.
name|createDerivedSuites
argument_list|(
name|parentBuilder
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|parentBuilder
operator|.
name|getFeatures
argument_list|()
operator|.
name|contains
argument_list|(
name|NoRecurse
operator|.
name|DESCENDING
argument_list|)
condition|)
block|{
name|derivedSuites
operator|.
name|add
argument_list|(
name|createDescendingSuite
argument_list|(
name|parentBuilder
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|parentBuilder
operator|.
name|getFeatures
argument_list|()
operator|.
name|contains
argument_list|(
name|NoRecurse
operator|.
name|SUBMAP
argument_list|)
condition|)
block|{
comment|// Other combinations are inherited from SortedMapTestSuiteBuilder.
name|derivedSuites
operator|.
name|add
argument_list|(
name|createSubmapSuite
argument_list|(
name|parentBuilder
argument_list|,
name|Bound
operator|.
name|NO_BOUND
argument_list|,
name|Bound
operator|.
name|INCLUSIVE
argument_list|)
argument_list|)
expr_stmt|;
name|derivedSuites
operator|.
name|add
argument_list|(
name|createSubmapSuite
argument_list|(
name|parentBuilder
argument_list|,
name|Bound
operator|.
name|EXCLUSIVE
argument_list|,
name|Bound
operator|.
name|NO_BOUND
argument_list|)
argument_list|)
expr_stmt|;
name|derivedSuites
operator|.
name|add
argument_list|(
name|createSubmapSuite
argument_list|(
name|parentBuilder
argument_list|,
name|Bound
operator|.
name|EXCLUSIVE
argument_list|,
name|Bound
operator|.
name|EXCLUSIVE
argument_list|)
argument_list|)
expr_stmt|;
name|derivedSuites
operator|.
name|add
argument_list|(
name|createSubmapSuite
argument_list|(
name|parentBuilder
argument_list|,
name|Bound
operator|.
name|EXCLUSIVE
argument_list|,
name|Bound
operator|.
name|INCLUSIVE
argument_list|)
argument_list|)
expr_stmt|;
name|derivedSuites
operator|.
name|add
argument_list|(
name|createSubmapSuite
argument_list|(
name|parentBuilder
argument_list|,
name|Bound
operator|.
name|INCLUSIVE
argument_list|,
name|Bound
operator|.
name|INCLUSIVE
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|derivedSuites
return|;
block|}
annotation|@
name|Override
DECL|method|createDerivedKeySetSuite ( TestSetGenerator<K> keySetGenerator)
specifier|protected
name|NavigableSetTestSuiteBuilder
argument_list|<
name|K
argument_list|>
name|createDerivedKeySetSuite
parameter_list|(
name|TestSetGenerator
argument_list|<
name|K
argument_list|>
name|keySetGenerator
parameter_list|)
block|{
return|return
name|NavigableSetTestSuiteBuilder
operator|.
name|using
argument_list|(
operator|(
name|TestSortedSetGenerator
argument_list|<
name|K
argument_list|>
operator|)
name|keySetGenerator
argument_list|)
return|;
block|}
DECL|class|NavigableMapSubmapTestMapGenerator
specifier|public
specifier|static
specifier|final
class|class
name|NavigableMapSubmapTestMapGenerator
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
extends|extends
name|SortedMapSubmapTestMapGenerator
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
block|{
DECL|method|NavigableMapSubmapTestMapGenerator ( TestSortedMapGenerator<K, V> delegate, Bound to, Bound from)
specifier|public
name|NavigableMapSubmapTestMapGenerator
parameter_list|(
name|TestSortedMapGenerator
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|delegate
parameter_list|,
name|Bound
name|to
parameter_list|,
name|Bound
name|from
parameter_list|)
block|{
name|super
argument_list|(
name|delegate
argument_list|,
name|to
argument_list|,
name|from
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createSubMap (SortedMap<K, V> sortedMap, K firstExclusive, K lastExclusive)
name|NavigableMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|createSubMap
parameter_list|(
name|SortedMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|sortedMap
parameter_list|,
name|K
name|firstExclusive
parameter_list|,
name|K
name|lastExclusive
parameter_list|)
block|{
name|NavigableMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|map
init|=
operator|(
name|NavigableMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
operator|)
name|sortedMap
decl_stmt|;
if|if
condition|(
name|from
operator|==
name|Bound
operator|.
name|NO_BOUND
operator|&&
name|to
operator|==
name|Bound
operator|.
name|INCLUSIVE
condition|)
block|{
return|return
name|map
operator|.
name|headMap
argument_list|(
name|lastInclusive
argument_list|,
literal|true
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|from
operator|==
name|Bound
operator|.
name|EXCLUSIVE
operator|&&
name|to
operator|==
name|Bound
operator|.
name|NO_BOUND
condition|)
block|{
return|return
name|map
operator|.
name|tailMap
argument_list|(
name|firstExclusive
argument_list|,
literal|false
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|from
operator|==
name|Bound
operator|.
name|EXCLUSIVE
operator|&&
name|to
operator|==
name|Bound
operator|.
name|EXCLUSIVE
condition|)
block|{
return|return
name|map
operator|.
name|subMap
argument_list|(
name|firstExclusive
argument_list|,
literal|false
argument_list|,
name|lastExclusive
argument_list|,
literal|false
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|from
operator|==
name|Bound
operator|.
name|EXCLUSIVE
operator|&&
name|to
operator|==
name|Bound
operator|.
name|INCLUSIVE
condition|)
block|{
return|return
name|map
operator|.
name|subMap
argument_list|(
name|firstExclusive
argument_list|,
literal|false
argument_list|,
name|lastInclusive
argument_list|,
literal|true
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|from
operator|==
name|Bound
operator|.
name|INCLUSIVE
operator|&&
name|to
operator|==
name|Bound
operator|.
name|INCLUSIVE
condition|)
block|{
return|return
name|map
operator|.
name|subMap
argument_list|(
name|firstInclusive
argument_list|,
literal|true
argument_list|,
name|lastInclusive
argument_list|,
literal|true
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|(
name|NavigableMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
operator|)
name|super
operator|.
name|createSubMap
argument_list|(
name|map
argument_list|,
name|firstExclusive
argument_list|,
name|lastExclusive
argument_list|)
return|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|newBuilderUsing ( TestSortedMapGenerator<K, V> delegate, Bound to, Bound from)
specifier|public
name|NavigableMapTestSuiteBuilder
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|newBuilderUsing
parameter_list|(
name|TestSortedMapGenerator
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|delegate
parameter_list|,
name|Bound
name|to
parameter_list|,
name|Bound
name|from
parameter_list|)
block|{
return|return
name|subSuiteUsing
argument_list|(
operator|new
name|NavigableMapSubmapTestMapGenerator
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|(
name|delegate
argument_list|,
name|to
argument_list|,
name|from
argument_list|)
argument_list|)
return|;
block|}
comment|/** Create a suite whose maps are descending views of other maps. */
DECL|method|createDescendingSuite ( FeatureSpecificTestSuiteBuilder< ?, ? extends OneSizeTestContainerGenerator<Map<K, V>, Entry<K, V>>> parentBuilder)
specifier|private
name|TestSuite
name|createDescendingSuite
parameter_list|(
name|FeatureSpecificTestSuiteBuilder
argument_list|<
name|?
argument_list|,
name|?
extends|extends
name|OneSizeTestContainerGenerator
argument_list|<
name|Map
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|,
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
argument_list|>
name|parentBuilder
parameter_list|)
block|{
name|TestSortedMapGenerator
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|delegate
init|=
operator|(
name|TestSortedMapGenerator
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
operator|)
name|parentBuilder
operator|.
name|getSubjectGenerator
argument_list|()
operator|.
name|getInnerGenerator
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Feature
argument_list|<
name|?
argument_list|>
argument_list|>
name|features
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|features
operator|.
name|add
argument_list|(
name|NoRecurse
operator|.
name|DESCENDING
argument_list|)
expr_stmt|;
name|features
operator|.
name|addAll
argument_list|(
name|parentBuilder
operator|.
name|getFeatures
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|subSuiteUsing
argument_list|(
operator|new
name|DescendingTestMapGenerator
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|(
name|delegate
argument_list|)
argument_list|)
operator|.
name|named
argument_list|(
name|parentBuilder
operator|.
name|getName
argument_list|()
operator|+
literal|" descending"
argument_list|)
operator|.
name|withFeatures
argument_list|(
name|features
argument_list|)
operator|.
name|suppressing
argument_list|(
name|parentBuilder
operator|.
name|getSuppressedTests
argument_list|()
argument_list|)
operator|.
name|createTestSuite
argument_list|()
return|;
block|}
DECL|method|subSuiteUsing (TestSortedMapGenerator<K, V> generator)
name|NavigableMapTestSuiteBuilder
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|subSuiteUsing
parameter_list|(
name|TestSortedMapGenerator
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|generator
parameter_list|)
block|{
return|return
name|using
argument_list|(
name|generator
argument_list|)
return|;
block|}
DECL|class|DescendingTestMapGenerator
specifier|static
class|class
name|DescendingTestMapGenerator
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
extends|extends
name|ForwardingTestMapGenerator
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
implements|implements
name|TestSortedMapGenerator
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
block|{
DECL|method|DescendingTestMapGenerator (TestSortedMapGenerator<K, V> delegate)
name|DescendingTestMapGenerator
parameter_list|(
name|TestSortedMapGenerator
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|delegate
parameter_list|)
block|{
name|super
argument_list|(
name|delegate
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|create (Object... entries)
specifier|public
name|NavigableMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|create
parameter_list|(
name|Object
modifier|...
name|entries
parameter_list|)
block|{
name|NavigableMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|map
init|=
operator|(
name|NavigableMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
operator|)
name|delegate
operator|.
name|create
argument_list|(
name|entries
argument_list|)
decl_stmt|;
return|return
name|map
operator|.
name|descendingMap
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|order (List<Entry<K, V>> insertionOrder)
specifier|public
name|Iterable
argument_list|<
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|order
parameter_list|(
name|List
argument_list|<
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|insertionOrder
parameter_list|)
block|{
name|insertionOrder
operator|=
name|castOrCopyToList
argument_list|(
name|delegate
operator|.
name|order
argument_list|(
name|insertionOrder
argument_list|)
argument_list|)
expr_stmt|;
name|reverse
argument_list|(
name|insertionOrder
argument_list|)
expr_stmt|;
return|return
name|insertionOrder
return|;
block|}
DECL|method|delegate ()
name|TestSortedMapGenerator
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|delegate
parameter_list|()
block|{
return|return
operator|(
name|TestSortedMapGenerator
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
operator|)
name|delegate
return|;
block|}
annotation|@
name|Override
DECL|method|belowSamplesLesser ()
specifier|public
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|belowSamplesLesser
parameter_list|()
block|{
return|return
name|delegate
argument_list|()
operator|.
name|aboveSamplesGreater
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|belowSamplesGreater ()
specifier|public
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|belowSamplesGreater
parameter_list|()
block|{
return|return
name|delegate
argument_list|()
operator|.
name|aboveSamplesLesser
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|aboveSamplesLesser ()
specifier|public
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|aboveSamplesLesser
parameter_list|()
block|{
return|return
name|delegate
argument_list|()
operator|.
name|belowSamplesGreater
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|aboveSamplesGreater ()
specifier|public
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|aboveSamplesGreater
parameter_list|()
block|{
return|return
name|delegate
argument_list|()
operator|.
name|belowSamplesLesser
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

