begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2008 Google Inc.  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.collect.testing
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentMap
import|;
end_import

begin_comment
comment|/**  * Tests representing the contract of {@link ConcurrentMap}. Concrete  * subclasses of this base class test conformance of concrete  * {@link ConcurrentMap} subclasses to that contract.  *  *<p>This class is GWT compatible.  *  *<p>The tests in this class for null keys and values only check maps for  * which null keys and values are not allowed. There are currently no  * {@link ConcurrentMap} implementations that support nulls.  *  * @author Jared Levy  */
end_comment

begin_class
DECL|class|ConcurrentMapInterfaceTest
specifier|public
specifier|abstract
class|class
name|ConcurrentMapInterfaceTest
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
extends|extends
name|MapInterfaceTest
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
block|{
DECL|method|ConcurrentMapInterfaceTest (boolean allowsNullKeys, boolean allowsNullValues, boolean supportsPut, boolean supportsRemove, boolean supportsClear)
specifier|protected
name|ConcurrentMapInterfaceTest
parameter_list|(
name|boolean
name|allowsNullKeys
parameter_list|,
name|boolean
name|allowsNullValues
parameter_list|,
name|boolean
name|supportsPut
parameter_list|,
name|boolean
name|supportsRemove
parameter_list|,
name|boolean
name|supportsClear
parameter_list|)
block|{
name|super
argument_list|(
name|allowsNullKeys
argument_list|,
name|allowsNullValues
argument_list|,
name|supportsPut
argument_list|,
name|supportsRemove
argument_list|,
name|supportsClear
argument_list|)
expr_stmt|;
block|}
comment|/**    * Creates a new value that is not expected to be found in    * {@link #makePopulatedMap()} and differs from the value returned by    * {@link #getValueNotInPopulatedMap()}.    *    * @return a value    * @throws UnsupportedOperationException if it's not possible to make a value    * that will not be found in the map    */
DECL|method|getSecondValueNotInPopulatedMap ()
specifier|protected
specifier|abstract
name|V
name|getSecondValueNotInPopulatedMap
parameter_list|()
throws|throws
name|UnsupportedOperationException
function_decl|;
DECL|method|makeEmptyMap ()
annotation|@
name|Override
specifier|protected
specifier|abstract
name|ConcurrentMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|makeEmptyMap
parameter_list|()
throws|throws
name|UnsupportedOperationException
function_decl|;
DECL|method|makePopulatedMap ()
annotation|@
name|Override
specifier|protected
specifier|abstract
name|ConcurrentMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|makePopulatedMap
parameter_list|()
throws|throws
name|UnsupportedOperationException
function_decl|;
DECL|method|makeEitherMap ()
annotation|@
name|Override
specifier|protected
name|ConcurrentMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|makeEitherMap
parameter_list|()
block|{
try|try
block|{
return|return
name|makePopulatedMap
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|e
parameter_list|)
block|{
return|return
name|makeEmptyMap
argument_list|()
return|;
block|}
block|}
DECL|method|testPutIfAbsentNewKey ()
specifier|public
name|void
name|testPutIfAbsentNewKey
parameter_list|()
block|{
specifier|final
name|ConcurrentMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|map
decl_stmt|;
specifier|final
name|K
name|keyToPut
decl_stmt|;
specifier|final
name|V
name|valueToPut
decl_stmt|;
try|try
block|{
name|map
operator|=
name|makeEitherMap
argument_list|()
expr_stmt|;
name|keyToPut
operator|=
name|getKeyNotInPopulatedMap
argument_list|()
expr_stmt|;
name|valueToPut
operator|=
name|getValueNotInPopulatedMap
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|e
parameter_list|)
block|{
return|return;
block|}
if|if
condition|(
name|supportsPut
condition|)
block|{
name|int
name|initialSize
init|=
name|map
operator|.
name|size
argument_list|()
decl_stmt|;
name|V
name|oldValue
init|=
name|map
operator|.
name|putIfAbsent
argument_list|(
name|keyToPut
argument_list|,
name|valueToPut
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|valueToPut
argument_list|,
name|map
operator|.
name|get
argument_list|(
name|keyToPut
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|map
operator|.
name|containsKey
argument_list|(
name|keyToPut
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|map
operator|.
name|containsValue
argument_list|(
name|valueToPut
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|initialSize
operator|+
literal|1
argument_list|,
name|map
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|oldValue
argument_list|)
expr_stmt|;
block|}
else|else
block|{
try|try
block|{
name|map
operator|.
name|putIfAbsent
argument_list|(
name|keyToPut
argument_list|,
name|valueToPut
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected UnsupportedOperationException."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|e
parameter_list|)
block|{
comment|// Expected.
block|}
block|}
name|assertInvariants
argument_list|(
name|map
argument_list|)
expr_stmt|;
block|}
DECL|method|testPutIfAbsentExistingKey ()
specifier|public
name|void
name|testPutIfAbsentExistingKey
parameter_list|()
block|{
specifier|final
name|ConcurrentMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|map
decl_stmt|;
specifier|final
name|K
name|keyToPut
decl_stmt|;
specifier|final
name|V
name|valueToPut
decl_stmt|;
try|try
block|{
name|map
operator|=
name|makePopulatedMap
argument_list|()
expr_stmt|;
name|valueToPut
operator|=
name|getValueNotInPopulatedMap
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|e
parameter_list|)
block|{
return|return;
block|}
name|keyToPut
operator|=
name|map
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
name|supportsPut
condition|)
block|{
name|V
name|oldValue
init|=
name|map
operator|.
name|get
argument_list|(
name|keyToPut
argument_list|)
decl_stmt|;
name|int
name|initialSize
init|=
name|map
operator|.
name|size
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|oldValue
argument_list|,
name|map
operator|.
name|putIfAbsent
argument_list|(
name|keyToPut
argument_list|,
name|valueToPut
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|oldValue
argument_list|,
name|map
operator|.
name|get
argument_list|(
name|keyToPut
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|map
operator|.
name|containsKey
argument_list|(
name|keyToPut
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|map
operator|.
name|containsValue
argument_list|(
name|oldValue
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|map
operator|.
name|containsValue
argument_list|(
name|valueToPut
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|initialSize
argument_list|,
name|map
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
try|try
block|{
name|map
operator|.
name|putIfAbsent
argument_list|(
name|keyToPut
argument_list|,
name|valueToPut
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected UnsupportedOperationException."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|e
parameter_list|)
block|{
comment|// Expected.
block|}
block|}
name|assertInvariants
argument_list|(
name|map
argument_list|)
expr_stmt|;
block|}
DECL|method|testPutIfAbsentNullKey ()
specifier|public
name|void
name|testPutIfAbsentNullKey
parameter_list|()
block|{
if|if
condition|(
name|allowsNullKeys
condition|)
block|{
return|return;
comment|// Not yet implemented
block|}
specifier|final
name|ConcurrentMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|map
decl_stmt|;
specifier|final
name|V
name|valueToPut
decl_stmt|;
try|try
block|{
name|map
operator|=
name|makeEitherMap
argument_list|()
expr_stmt|;
name|valueToPut
operator|=
name|getValueNotInPopulatedMap
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|e
parameter_list|)
block|{
return|return;
block|}
name|int
name|initialSize
init|=
name|map
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|supportsPut
condition|)
block|{
try|try
block|{
name|map
operator|.
name|putIfAbsent
argument_list|(
literal|null
argument_list|,
name|valueToPut
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected NullPointerException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|e
parameter_list|)
block|{
comment|// Expected.
block|}
block|}
else|else
block|{
try|try
block|{
name|map
operator|.
name|putIfAbsent
argument_list|(
literal|null
argument_list|,
name|valueToPut
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected UnsupportedOperationException or NullPointerException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|e
parameter_list|)
block|{
comment|// Expected.
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|e
parameter_list|)
block|{
comment|// Expected.
block|}
block|}
name|assertEquals
argument_list|(
name|initialSize
argument_list|,
name|map
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertInvariants
argument_list|(
name|map
argument_list|)
expr_stmt|;
block|}
DECL|method|testPutIfAbsentNewKeyNullValue ()
specifier|public
name|void
name|testPutIfAbsentNewKeyNullValue
parameter_list|()
block|{
if|if
condition|(
name|allowsNullValues
condition|)
block|{
return|return;
comment|// Not yet implemented
block|}
specifier|final
name|ConcurrentMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|map
decl_stmt|;
specifier|final
name|K
name|keyToPut
decl_stmt|;
try|try
block|{
name|map
operator|=
name|makeEitherMap
argument_list|()
expr_stmt|;
name|keyToPut
operator|=
name|getKeyNotInPopulatedMap
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|e
parameter_list|)
block|{
return|return;
block|}
name|int
name|initialSize
init|=
name|map
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|supportsPut
condition|)
block|{
try|try
block|{
name|map
operator|.
name|putIfAbsent
argument_list|(
name|keyToPut
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected NullPointerException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|e
parameter_list|)
block|{
comment|// Expected.
block|}
block|}
else|else
block|{
try|try
block|{
name|map
operator|.
name|putIfAbsent
argument_list|(
name|keyToPut
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected UnsupportedOperationException or NullPointerException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|e
parameter_list|)
block|{
comment|// Expected.
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|e
parameter_list|)
block|{
comment|// Expected.
block|}
block|}
name|assertEquals
argument_list|(
name|initialSize
argument_list|,
name|map
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertInvariants
argument_list|(
name|map
argument_list|)
expr_stmt|;
block|}
DECL|method|testPutIfAbsentExistingKeyNullValue ()
specifier|public
name|void
name|testPutIfAbsentExistingKeyNullValue
parameter_list|()
block|{
if|if
condition|(
name|allowsNullValues
condition|)
block|{
return|return;
comment|// Not yet implemented
block|}
specifier|final
name|ConcurrentMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|map
decl_stmt|;
specifier|final
name|K
name|keyToPut
decl_stmt|;
try|try
block|{
name|map
operator|=
name|makePopulatedMap
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|e
parameter_list|)
block|{
return|return;
block|}
name|keyToPut
operator|=
name|map
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
expr_stmt|;
name|int
name|initialSize
init|=
name|map
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|supportsPut
condition|)
block|{
try|try
block|{
name|assertNull
argument_list|(
name|map
operator|.
name|putIfAbsent
argument_list|(
name|keyToPut
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|e
parameter_list|)
block|{
comment|// Optional.
block|}
block|}
else|else
block|{
try|try
block|{
name|map
operator|.
name|putIfAbsent
argument_list|(
name|keyToPut
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected UnsupportedOperationException or NullPointerException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|e
parameter_list|)
block|{
comment|// Expected.
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|e
parameter_list|)
block|{
comment|// Expected.
block|}
block|}
name|assertEquals
argument_list|(
name|initialSize
argument_list|,
name|map
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertInvariants
argument_list|(
name|map
argument_list|)
expr_stmt|;
block|}
DECL|method|testRemoveKeyValueExisting ()
specifier|public
name|void
name|testRemoveKeyValueExisting
parameter_list|()
block|{
specifier|final
name|ConcurrentMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|map
decl_stmt|;
specifier|final
name|K
name|keyToRemove
decl_stmt|;
try|try
block|{
name|map
operator|=
name|makePopulatedMap
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|e
parameter_list|)
block|{
return|return;
block|}
name|keyToRemove
operator|=
name|map
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
expr_stmt|;
name|V
name|oldValue
init|=
name|map
operator|.
name|get
argument_list|(
name|keyToRemove
argument_list|)
decl_stmt|;
if|if
condition|(
name|supportsRemove
condition|)
block|{
name|int
name|initialSize
init|=
name|map
operator|.
name|size
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|map
operator|.
name|remove
argument_list|(
name|keyToRemove
argument_list|,
name|oldValue
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|map
operator|.
name|containsKey
argument_list|(
name|keyToRemove
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|initialSize
operator|-
literal|1
argument_list|,
name|map
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
try|try
block|{
name|map
operator|.
name|remove
argument_list|(
name|keyToRemove
argument_list|,
name|oldValue
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected UnsupportedOperationException."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|e
parameter_list|)
block|{
comment|// Expected.
block|}
block|}
name|assertInvariants
argument_list|(
name|map
argument_list|)
expr_stmt|;
block|}
DECL|method|testRemoveKeyValueMissingKey ()
specifier|public
name|void
name|testRemoveKeyValueMissingKey
parameter_list|()
block|{
specifier|final
name|ConcurrentMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|map
decl_stmt|;
specifier|final
name|K
name|keyToRemove
decl_stmt|;
specifier|final
name|V
name|valueToRemove
decl_stmt|;
try|try
block|{
name|map
operator|=
name|makePopulatedMap
argument_list|()
expr_stmt|;
name|keyToRemove
operator|=
name|getKeyNotInPopulatedMap
argument_list|()
expr_stmt|;
name|valueToRemove
operator|=
name|getValueNotInPopulatedMap
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|e
parameter_list|)
block|{
return|return;
block|}
if|if
condition|(
name|supportsRemove
condition|)
block|{
name|int
name|initialSize
init|=
name|map
operator|.
name|size
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|map
operator|.
name|remove
argument_list|(
name|keyToRemove
argument_list|,
name|valueToRemove
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|initialSize
argument_list|,
name|map
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
try|try
block|{
name|map
operator|.
name|remove
argument_list|(
name|keyToRemove
argument_list|,
name|valueToRemove
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected UnsupportedOperationException."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|e
parameter_list|)
block|{
comment|// Expected.
block|}
block|}
name|assertInvariants
argument_list|(
name|map
argument_list|)
expr_stmt|;
block|}
DECL|method|testRemoveKeyValueDifferentValue ()
specifier|public
name|void
name|testRemoveKeyValueDifferentValue
parameter_list|()
block|{
specifier|final
name|ConcurrentMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|map
decl_stmt|;
specifier|final
name|K
name|keyToRemove
decl_stmt|;
specifier|final
name|V
name|valueToRemove
decl_stmt|;
try|try
block|{
name|map
operator|=
name|makePopulatedMap
argument_list|()
expr_stmt|;
name|valueToRemove
operator|=
name|getValueNotInPopulatedMap
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|e
parameter_list|)
block|{
return|return;
block|}
name|keyToRemove
operator|=
name|map
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
name|supportsRemove
condition|)
block|{
name|int
name|initialSize
init|=
name|map
operator|.
name|size
argument_list|()
decl_stmt|;
name|V
name|oldValue
init|=
name|map
operator|.
name|get
argument_list|(
name|keyToRemove
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|map
operator|.
name|remove
argument_list|(
name|keyToRemove
argument_list|,
name|valueToRemove
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|oldValue
argument_list|,
name|map
operator|.
name|get
argument_list|(
name|keyToRemove
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|map
operator|.
name|containsKey
argument_list|(
name|keyToRemove
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|initialSize
argument_list|,
name|map
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
try|try
block|{
name|map
operator|.
name|remove
argument_list|(
name|keyToRemove
argument_list|,
name|valueToRemove
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected UnsupportedOperationException."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|e
parameter_list|)
block|{
comment|// Expected.
block|}
block|}
name|assertInvariants
argument_list|(
name|map
argument_list|)
expr_stmt|;
block|}
DECL|method|testRemoveKeyValueNullKey ()
specifier|public
name|void
name|testRemoveKeyValueNullKey
parameter_list|()
block|{
if|if
condition|(
name|allowsNullKeys
condition|)
block|{
return|return;
comment|// Not yet implemented
block|}
specifier|final
name|ConcurrentMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|map
decl_stmt|;
specifier|final
name|V
name|valueToRemove
decl_stmt|;
try|try
block|{
name|map
operator|=
name|makeEitherMap
argument_list|()
expr_stmt|;
name|valueToRemove
operator|=
name|getValueNotInPopulatedMap
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|e
parameter_list|)
block|{
return|return;
block|}
name|int
name|initialSize
init|=
name|map
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|supportsRemove
condition|)
block|{
try|try
block|{
name|assertFalse
argument_list|(
name|map
operator|.
name|remove
argument_list|(
literal|null
argument_list|,
name|valueToRemove
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|e
parameter_list|)
block|{
comment|// Optional.
block|}
block|}
else|else
block|{
try|try
block|{
name|assertFalse
argument_list|(
name|map
operator|.
name|remove
argument_list|(
literal|null
argument_list|,
name|valueToRemove
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|e
parameter_list|)
block|{
comment|// Optional.
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|e
parameter_list|)
block|{
comment|// Optional.
block|}
block|}
name|assertEquals
argument_list|(
name|initialSize
argument_list|,
name|map
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertInvariants
argument_list|(
name|map
argument_list|)
expr_stmt|;
block|}
DECL|method|testRemoveKeyValueExistingKeyNullValue ()
specifier|public
name|void
name|testRemoveKeyValueExistingKeyNullValue
parameter_list|()
block|{
if|if
condition|(
name|allowsNullValues
condition|)
block|{
return|return;
comment|// Not yet implemented
block|}
specifier|final
name|ConcurrentMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|map
decl_stmt|;
specifier|final
name|K
name|keyToRemove
decl_stmt|;
try|try
block|{
name|map
operator|=
name|makePopulatedMap
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|e
parameter_list|)
block|{
return|return;
block|}
name|keyToRemove
operator|=
name|map
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
expr_stmt|;
name|int
name|initialSize
init|=
name|map
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|supportsRemove
condition|)
block|{
try|try
block|{
name|assertFalse
argument_list|(
name|map
operator|.
name|remove
argument_list|(
name|keyToRemove
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|e
parameter_list|)
block|{
comment|// Optional.
block|}
block|}
else|else
block|{
try|try
block|{
name|assertFalse
argument_list|(
name|map
operator|.
name|remove
argument_list|(
name|keyToRemove
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|e
parameter_list|)
block|{
comment|// Optional.
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|e
parameter_list|)
block|{
comment|// Optional.
block|}
block|}
name|assertEquals
argument_list|(
name|initialSize
argument_list|,
name|map
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertInvariants
argument_list|(
name|map
argument_list|)
expr_stmt|;
block|}
DECL|method|testRemoveKeyValueMissingKeyNullValue ()
specifier|public
name|void
name|testRemoveKeyValueMissingKeyNullValue
parameter_list|()
block|{
if|if
condition|(
name|allowsNullValues
condition|)
block|{
return|return;
comment|// Not yet implemented
block|}
specifier|final
name|ConcurrentMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|map
decl_stmt|;
specifier|final
name|K
name|keyToRemove
decl_stmt|;
try|try
block|{
name|map
operator|=
name|makeEitherMap
argument_list|()
expr_stmt|;
name|keyToRemove
operator|=
name|getKeyNotInPopulatedMap
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|e
parameter_list|)
block|{
return|return;
block|}
name|int
name|initialSize
init|=
name|map
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|supportsRemove
condition|)
block|{
try|try
block|{
name|assertFalse
argument_list|(
name|map
operator|.
name|remove
argument_list|(
name|keyToRemove
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|e
parameter_list|)
block|{
comment|// Optional.
block|}
block|}
else|else
block|{
try|try
block|{
name|assertFalse
argument_list|(
name|map
operator|.
name|remove
argument_list|(
name|keyToRemove
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|e
parameter_list|)
block|{
comment|// Optional.
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|e
parameter_list|)
block|{
comment|// Optional.
block|}
block|}
name|assertEquals
argument_list|(
name|initialSize
argument_list|,
name|map
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertInvariants
argument_list|(
name|map
argument_list|)
expr_stmt|;
block|}
comment|/* Replace2 tests call 2-parameter replace(key, value) */
DECL|method|testReplace2ExistingKey ()
specifier|public
name|void
name|testReplace2ExistingKey
parameter_list|()
block|{
specifier|final
name|ConcurrentMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|map
decl_stmt|;
specifier|final
name|K
name|keyToReplace
decl_stmt|;
specifier|final
name|V
name|newValue
decl_stmt|;
try|try
block|{
name|map
operator|=
name|makePopulatedMap
argument_list|()
expr_stmt|;
name|newValue
operator|=
name|getValueNotInPopulatedMap
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|e
parameter_list|)
block|{
return|return;
block|}
name|keyToReplace
operator|=
name|map
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
name|supportsPut
condition|)
block|{
name|V
name|oldValue
init|=
name|map
operator|.
name|get
argument_list|(
name|keyToReplace
argument_list|)
decl_stmt|;
name|int
name|initialSize
init|=
name|map
operator|.
name|size
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|oldValue
argument_list|,
name|map
operator|.
name|replace
argument_list|(
name|keyToReplace
argument_list|,
name|newValue
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|newValue
argument_list|,
name|map
operator|.
name|get
argument_list|(
name|keyToReplace
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|map
operator|.
name|containsKey
argument_list|(
name|keyToReplace
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|map
operator|.
name|containsValue
argument_list|(
name|newValue
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|initialSize
argument_list|,
name|map
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
try|try
block|{
name|map
operator|.
name|replace
argument_list|(
name|keyToReplace
argument_list|,
name|newValue
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected UnsupportedOperationException."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|e
parameter_list|)
block|{
comment|// Expected.
block|}
block|}
name|assertInvariants
argument_list|(
name|map
argument_list|)
expr_stmt|;
block|}
DECL|method|testReplace2MissingKey ()
specifier|public
name|void
name|testReplace2MissingKey
parameter_list|()
block|{
specifier|final
name|ConcurrentMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|map
decl_stmt|;
specifier|final
name|K
name|keyToReplace
decl_stmt|;
specifier|final
name|V
name|newValue
decl_stmt|;
try|try
block|{
name|map
operator|=
name|makeEitherMap
argument_list|()
expr_stmt|;
name|keyToReplace
operator|=
name|getKeyNotInPopulatedMap
argument_list|()
expr_stmt|;
name|newValue
operator|=
name|getValueNotInPopulatedMap
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|e
parameter_list|)
block|{
return|return;
block|}
if|if
condition|(
name|supportsPut
condition|)
block|{
name|int
name|initialSize
init|=
name|map
operator|.
name|size
argument_list|()
decl_stmt|;
name|assertNull
argument_list|(
name|map
operator|.
name|replace
argument_list|(
name|keyToReplace
argument_list|,
name|newValue
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|map
operator|.
name|get
argument_list|(
name|keyToReplace
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|map
operator|.
name|containsKey
argument_list|(
name|keyToReplace
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|map
operator|.
name|containsValue
argument_list|(
name|newValue
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|initialSize
argument_list|,
name|map
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
try|try
block|{
name|map
operator|.
name|replace
argument_list|(
name|keyToReplace
argument_list|,
name|newValue
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected UnsupportedOperationException."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|e
parameter_list|)
block|{
comment|// Expected.
block|}
block|}
name|assertInvariants
argument_list|(
name|map
argument_list|)
expr_stmt|;
block|}
DECL|method|testReplace2NullKey ()
specifier|public
name|void
name|testReplace2NullKey
parameter_list|()
block|{
if|if
condition|(
name|allowsNullKeys
condition|)
block|{
return|return;
comment|// Not yet implemented
block|}
specifier|final
name|ConcurrentMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|map
decl_stmt|;
specifier|final
name|V
name|valueToReplace
decl_stmt|;
try|try
block|{
name|map
operator|=
name|makeEitherMap
argument_list|()
expr_stmt|;
name|valueToReplace
operator|=
name|getValueNotInPopulatedMap
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|e
parameter_list|)
block|{
return|return;
block|}
name|int
name|initialSize
init|=
name|map
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|supportsPut
condition|)
block|{
try|try
block|{
name|assertNull
argument_list|(
name|map
operator|.
name|replace
argument_list|(
literal|null
argument_list|,
name|valueToReplace
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|e
parameter_list|)
block|{
comment|// Optional.
block|}
block|}
else|else
block|{
try|try
block|{
name|assertNull
argument_list|(
name|map
operator|.
name|replace
argument_list|(
literal|null
argument_list|,
name|valueToReplace
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|e
parameter_list|)
block|{
comment|// Optional.
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|e
parameter_list|)
block|{
comment|// Optional.
block|}
block|}
name|assertEquals
argument_list|(
name|initialSize
argument_list|,
name|map
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertInvariants
argument_list|(
name|map
argument_list|)
expr_stmt|;
block|}
DECL|method|testReplace2ExistingKeyNullValue ()
specifier|public
name|void
name|testReplace2ExistingKeyNullValue
parameter_list|()
block|{
if|if
condition|(
name|allowsNullValues
condition|)
block|{
return|return;
comment|// Not yet implemented
block|}
specifier|final
name|ConcurrentMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|map
decl_stmt|;
specifier|final
name|K
name|keyToReplace
decl_stmt|;
try|try
block|{
name|map
operator|=
name|makePopulatedMap
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|e
parameter_list|)
block|{
return|return;
block|}
name|keyToReplace
operator|=
name|map
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
expr_stmt|;
name|int
name|initialSize
init|=
name|map
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|supportsPut
condition|)
block|{
try|try
block|{
name|map
operator|.
name|replace
argument_list|(
name|keyToReplace
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected NullPointerException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|e
parameter_list|)
block|{
comment|// Expected.
block|}
block|}
else|else
block|{
try|try
block|{
name|map
operator|.
name|replace
argument_list|(
name|keyToReplace
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected UnsupportedOperationException or NullPointerException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|e
parameter_list|)
block|{
comment|// Expected.
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|e
parameter_list|)
block|{
comment|// Expected.
block|}
block|}
name|assertEquals
argument_list|(
name|initialSize
argument_list|,
name|map
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertInvariants
argument_list|(
name|map
argument_list|)
expr_stmt|;
block|}
DECL|method|testReplace2MissingKeyNullValue ()
specifier|public
name|void
name|testReplace2MissingKeyNullValue
parameter_list|()
block|{
if|if
condition|(
name|allowsNullValues
condition|)
block|{
return|return;
comment|// Not yet implemented
block|}
specifier|final
name|ConcurrentMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|map
decl_stmt|;
specifier|final
name|K
name|keyToReplace
decl_stmt|;
try|try
block|{
name|map
operator|=
name|makeEitherMap
argument_list|()
expr_stmt|;
name|keyToReplace
operator|=
name|getKeyNotInPopulatedMap
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|e
parameter_list|)
block|{
return|return;
block|}
name|int
name|initialSize
init|=
name|map
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|supportsPut
condition|)
block|{
try|try
block|{
name|assertNull
argument_list|(
name|map
operator|.
name|replace
argument_list|(
name|keyToReplace
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|e
parameter_list|)
block|{
comment|// Optional.
block|}
block|}
else|else
block|{
try|try
block|{
name|assertNull
argument_list|(
name|map
operator|.
name|replace
argument_list|(
name|keyToReplace
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|e
parameter_list|)
block|{
comment|// Optional.
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|e
parameter_list|)
block|{
comment|// Optional.
block|}
block|}
name|assertEquals
argument_list|(
name|initialSize
argument_list|,
name|map
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertInvariants
argument_list|(
name|map
argument_list|)
expr_stmt|;
block|}
comment|/*    * Replace3 tests call 3-parameter replace(key, oldValue, newValue)    */
DECL|method|testReplace3ExistingKeyValue ()
specifier|public
name|void
name|testReplace3ExistingKeyValue
parameter_list|()
block|{
specifier|final
name|ConcurrentMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|map
decl_stmt|;
specifier|final
name|K
name|keyToReplace
decl_stmt|;
specifier|final
name|V
name|oldValue
decl_stmt|;
specifier|final
name|V
name|newValue
decl_stmt|;
try|try
block|{
name|map
operator|=
name|makePopulatedMap
argument_list|()
expr_stmt|;
name|newValue
operator|=
name|getValueNotInPopulatedMap
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|e
parameter_list|)
block|{
return|return;
block|}
name|keyToReplace
operator|=
name|map
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
expr_stmt|;
name|oldValue
operator|=
name|map
operator|.
name|get
argument_list|(
name|keyToReplace
argument_list|)
expr_stmt|;
if|if
condition|(
name|supportsPut
condition|)
block|{
name|int
name|initialSize
init|=
name|map
operator|.
name|size
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|map
operator|.
name|replace
argument_list|(
name|keyToReplace
argument_list|,
name|oldValue
argument_list|,
name|newValue
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|newValue
argument_list|,
name|map
operator|.
name|get
argument_list|(
name|keyToReplace
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|map
operator|.
name|containsKey
argument_list|(
name|keyToReplace
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|map
operator|.
name|containsValue
argument_list|(
name|newValue
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|map
operator|.
name|containsValue
argument_list|(
name|oldValue
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|initialSize
argument_list|,
name|map
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
try|try
block|{
name|map
operator|.
name|replace
argument_list|(
name|keyToReplace
argument_list|,
name|oldValue
argument_list|,
name|newValue
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected UnsupportedOperationException."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|e
parameter_list|)
block|{
comment|// Expected.
block|}
block|}
name|assertInvariants
argument_list|(
name|map
argument_list|)
expr_stmt|;
block|}
DECL|method|testReplace3ExistingKeyDifferentValue ()
specifier|public
name|void
name|testReplace3ExistingKeyDifferentValue
parameter_list|()
block|{
specifier|final
name|ConcurrentMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|map
decl_stmt|;
specifier|final
name|K
name|keyToReplace
decl_stmt|;
specifier|final
name|V
name|oldValue
decl_stmt|;
specifier|final
name|V
name|newValue
decl_stmt|;
try|try
block|{
name|map
operator|=
name|makePopulatedMap
argument_list|()
expr_stmt|;
name|oldValue
operator|=
name|getValueNotInPopulatedMap
argument_list|()
expr_stmt|;
name|newValue
operator|=
name|getSecondValueNotInPopulatedMap
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|e
parameter_list|)
block|{
return|return;
block|}
name|keyToReplace
operator|=
name|map
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
expr_stmt|;
specifier|final
name|V
name|originalValue
init|=
name|map
operator|.
name|get
argument_list|(
name|keyToReplace
argument_list|)
decl_stmt|;
name|int
name|initialSize
init|=
name|map
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|supportsPut
condition|)
block|{
name|assertFalse
argument_list|(
name|map
operator|.
name|replace
argument_list|(
name|keyToReplace
argument_list|,
name|oldValue
argument_list|,
name|newValue
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
try|try
block|{
name|map
operator|.
name|replace
argument_list|(
name|keyToReplace
argument_list|,
name|oldValue
argument_list|,
name|newValue
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected UnsupportedOperationException."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|e
parameter_list|)
block|{
comment|// Expected.
block|}
block|}
name|assertTrue
argument_list|(
name|map
operator|.
name|containsKey
argument_list|(
name|keyToReplace
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|map
operator|.
name|containsValue
argument_list|(
name|newValue
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|map
operator|.
name|containsValue
argument_list|(
name|oldValue
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|originalValue
argument_list|,
name|map
operator|.
name|get
argument_list|(
name|keyToReplace
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|initialSize
argument_list|,
name|map
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertInvariants
argument_list|(
name|map
argument_list|)
expr_stmt|;
block|}
DECL|method|testReplace3MissingKey ()
specifier|public
name|void
name|testReplace3MissingKey
parameter_list|()
block|{
specifier|final
name|ConcurrentMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|map
decl_stmt|;
specifier|final
name|K
name|keyToReplace
decl_stmt|;
specifier|final
name|V
name|oldValue
decl_stmt|;
specifier|final
name|V
name|newValue
decl_stmt|;
try|try
block|{
name|map
operator|=
name|makeEitherMap
argument_list|()
expr_stmt|;
name|keyToReplace
operator|=
name|getKeyNotInPopulatedMap
argument_list|()
expr_stmt|;
name|oldValue
operator|=
name|getValueNotInPopulatedMap
argument_list|()
expr_stmt|;
name|newValue
operator|=
name|getSecondValueNotInPopulatedMap
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|e
parameter_list|)
block|{
return|return;
block|}
name|int
name|initialSize
init|=
name|map
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|supportsPut
condition|)
block|{
name|assertFalse
argument_list|(
name|map
operator|.
name|replace
argument_list|(
name|keyToReplace
argument_list|,
name|oldValue
argument_list|,
name|newValue
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
try|try
block|{
name|map
operator|.
name|replace
argument_list|(
name|keyToReplace
argument_list|,
name|oldValue
argument_list|,
name|newValue
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected UnsupportedOperationException."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|e
parameter_list|)
block|{
comment|// Expected.
block|}
block|}
name|assertFalse
argument_list|(
name|map
operator|.
name|containsKey
argument_list|(
name|keyToReplace
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|map
operator|.
name|containsValue
argument_list|(
name|newValue
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|map
operator|.
name|containsValue
argument_list|(
name|oldValue
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|initialSize
argument_list|,
name|map
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertInvariants
argument_list|(
name|map
argument_list|)
expr_stmt|;
block|}
DECL|method|testReplace3NullKey ()
specifier|public
name|void
name|testReplace3NullKey
parameter_list|()
block|{
if|if
condition|(
name|allowsNullKeys
condition|)
block|{
return|return;
comment|// Not yet implemented
block|}
specifier|final
name|ConcurrentMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|map
decl_stmt|;
specifier|final
name|V
name|oldValue
decl_stmt|;
specifier|final
name|V
name|newValue
decl_stmt|;
try|try
block|{
name|map
operator|=
name|makeEitherMap
argument_list|()
expr_stmt|;
name|oldValue
operator|=
name|getValueNotInPopulatedMap
argument_list|()
expr_stmt|;
name|newValue
operator|=
name|getSecondValueNotInPopulatedMap
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|e
parameter_list|)
block|{
return|return;
block|}
name|int
name|initialSize
init|=
name|map
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|supportsPut
condition|)
block|{
try|try
block|{
name|assertFalse
argument_list|(
name|map
operator|.
name|replace
argument_list|(
literal|null
argument_list|,
name|oldValue
argument_list|,
name|newValue
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|e
parameter_list|)
block|{
comment|// Optional.
block|}
block|}
else|else
block|{
try|try
block|{
name|assertFalse
argument_list|(
name|map
operator|.
name|replace
argument_list|(
literal|null
argument_list|,
name|oldValue
argument_list|,
name|newValue
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|e
parameter_list|)
block|{
comment|// Optional.
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|e
parameter_list|)
block|{
comment|// Optional.
block|}
block|}
name|assertEquals
argument_list|(
name|initialSize
argument_list|,
name|map
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertInvariants
argument_list|(
name|map
argument_list|)
expr_stmt|;
block|}
DECL|method|testReplace3ExistingKeyNullOldValue ()
specifier|public
name|void
name|testReplace3ExistingKeyNullOldValue
parameter_list|()
block|{
if|if
condition|(
name|allowsNullValues
condition|)
block|{
return|return;
comment|// Not yet implemented
block|}
specifier|final
name|ConcurrentMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|map
decl_stmt|;
specifier|final
name|K
name|keyToReplace
decl_stmt|;
specifier|final
name|V
name|newValue
decl_stmt|;
try|try
block|{
name|map
operator|=
name|makePopulatedMap
argument_list|()
expr_stmt|;
name|newValue
operator|=
name|getValueNotInPopulatedMap
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|e
parameter_list|)
block|{
return|return;
block|}
name|keyToReplace
operator|=
name|map
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
expr_stmt|;
specifier|final
name|V
name|originalValue
init|=
name|map
operator|.
name|get
argument_list|(
name|keyToReplace
argument_list|)
decl_stmt|;
name|int
name|initialSize
init|=
name|map
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|supportsPut
condition|)
block|{
try|try
block|{
name|assertFalse
argument_list|(
name|map
operator|.
name|replace
argument_list|(
name|keyToReplace
argument_list|,
literal|null
argument_list|,
name|newValue
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|e
parameter_list|)
block|{
comment|// Optional.
block|}
block|}
else|else
block|{
try|try
block|{
name|assertFalse
argument_list|(
name|map
operator|.
name|replace
argument_list|(
name|keyToReplace
argument_list|,
literal|null
argument_list|,
name|newValue
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|e
parameter_list|)
block|{
comment|// Optional.
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|e
parameter_list|)
block|{
comment|// Optional.
block|}
block|}
name|assertEquals
argument_list|(
name|initialSize
argument_list|,
name|map
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|originalValue
argument_list|,
name|map
operator|.
name|get
argument_list|(
name|keyToReplace
argument_list|)
argument_list|)
expr_stmt|;
name|assertInvariants
argument_list|(
name|map
argument_list|)
expr_stmt|;
block|}
DECL|method|testReplace3MissingKeyNullOldValue ()
specifier|public
name|void
name|testReplace3MissingKeyNullOldValue
parameter_list|()
block|{
if|if
condition|(
name|allowsNullValues
condition|)
block|{
return|return;
comment|// Not yet implemented
block|}
specifier|final
name|ConcurrentMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|map
decl_stmt|;
specifier|final
name|K
name|keyToReplace
decl_stmt|;
specifier|final
name|V
name|newValue
decl_stmt|;
try|try
block|{
name|map
operator|=
name|makeEitherMap
argument_list|()
expr_stmt|;
name|keyToReplace
operator|=
name|getKeyNotInPopulatedMap
argument_list|()
expr_stmt|;
name|newValue
operator|=
name|getValueNotInPopulatedMap
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|e
parameter_list|)
block|{
return|return;
block|}
name|int
name|initialSize
init|=
name|map
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|supportsPut
condition|)
block|{
try|try
block|{
name|assertFalse
argument_list|(
name|map
operator|.
name|replace
argument_list|(
name|keyToReplace
argument_list|,
literal|null
argument_list|,
name|newValue
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|e
parameter_list|)
block|{
comment|// Optional.
block|}
block|}
else|else
block|{
try|try
block|{
name|assertFalse
argument_list|(
name|map
operator|.
name|replace
argument_list|(
name|keyToReplace
argument_list|,
literal|null
argument_list|,
name|newValue
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|e
parameter_list|)
block|{
comment|// Optional.
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|e
parameter_list|)
block|{
comment|// Optional.
block|}
block|}
name|assertEquals
argument_list|(
name|initialSize
argument_list|,
name|map
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertInvariants
argument_list|(
name|map
argument_list|)
expr_stmt|;
block|}
DECL|method|testReplace3MissingKeyNullNewValue ()
specifier|public
name|void
name|testReplace3MissingKeyNullNewValue
parameter_list|()
block|{
if|if
condition|(
name|allowsNullValues
condition|)
block|{
return|return;
comment|// Not yet implemented
block|}
specifier|final
name|ConcurrentMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|map
decl_stmt|;
specifier|final
name|K
name|keyToReplace
decl_stmt|;
specifier|final
name|V
name|oldValue
decl_stmt|;
try|try
block|{
name|map
operator|=
name|makeEitherMap
argument_list|()
expr_stmt|;
name|keyToReplace
operator|=
name|getKeyNotInPopulatedMap
argument_list|()
expr_stmt|;
name|oldValue
operator|=
name|getValueNotInPopulatedMap
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|e
parameter_list|)
block|{
return|return;
block|}
name|int
name|initialSize
init|=
name|map
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|supportsPut
condition|)
block|{
try|try
block|{
name|map
operator|.
name|replace
argument_list|(
name|keyToReplace
argument_list|,
name|oldValue
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|e
parameter_list|)
block|{
comment|// Optional.
block|}
block|}
else|else
block|{
try|try
block|{
name|map
operator|.
name|replace
argument_list|(
name|keyToReplace
argument_list|,
name|oldValue
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|e
parameter_list|)
block|{
comment|// Optional.
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|e
parameter_list|)
block|{
comment|// Optional.
block|}
block|}
name|assertEquals
argument_list|(
name|initialSize
argument_list|,
name|map
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertInvariants
argument_list|(
name|map
argument_list|)
expr_stmt|;
block|}
DECL|method|testReplace3ExistingKeyValueNullNewValue ()
specifier|public
name|void
name|testReplace3ExistingKeyValueNullNewValue
parameter_list|()
block|{
if|if
condition|(
name|allowsNullValues
condition|)
block|{
return|return;
comment|// Not yet implemented
block|}
specifier|final
name|ConcurrentMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|map
decl_stmt|;
specifier|final
name|K
name|keyToReplace
decl_stmt|;
specifier|final
name|V
name|oldValue
decl_stmt|;
try|try
block|{
name|map
operator|=
name|makePopulatedMap
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|e
parameter_list|)
block|{
return|return;
block|}
name|keyToReplace
operator|=
name|map
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
expr_stmt|;
name|oldValue
operator|=
name|map
operator|.
name|get
argument_list|(
name|keyToReplace
argument_list|)
expr_stmt|;
name|int
name|initialSize
init|=
name|map
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|supportsPut
condition|)
block|{
try|try
block|{
name|map
operator|.
name|replace
argument_list|(
name|keyToReplace
argument_list|,
name|oldValue
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected NullPointerException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|e
parameter_list|)
block|{
comment|// Expected.
block|}
block|}
else|else
block|{
try|try
block|{
name|map
operator|.
name|replace
argument_list|(
name|keyToReplace
argument_list|,
name|oldValue
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected UnsupportedOperationException or NullPointerException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|e
parameter_list|)
block|{
comment|// Expected.
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|e
parameter_list|)
block|{
comment|// Expected.
block|}
block|}
name|assertEquals
argument_list|(
name|initialSize
argument_list|,
name|map
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|oldValue
argument_list|,
name|map
operator|.
name|get
argument_list|(
name|keyToReplace
argument_list|)
argument_list|)
expr_stmt|;
name|assertInvariants
argument_list|(
name|map
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

