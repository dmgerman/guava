begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2008 Google Inc.  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.collect.testing
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ObjectInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ObjectOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Reserializes the sets created by another test set generator.  *  * TODO: make CollectionTestSuiteBuilder test reserialized collections  *  * @author Jesse Wilson  */
end_comment

begin_class
DECL|class|ReserializingTestCollectionGenerator
specifier|public
class|class
name|ReserializingTestCollectionGenerator
parameter_list|<
name|E
parameter_list|>
implements|implements
name|TestCollectionGenerator
argument_list|<
name|E
argument_list|>
block|{
DECL|field|delegate
specifier|private
specifier|final
name|TestCollectionGenerator
argument_list|<
name|E
argument_list|>
name|delegate
decl_stmt|;
DECL|method|ReserializingTestCollectionGenerator (TestCollectionGenerator<E> delegate)
name|ReserializingTestCollectionGenerator
parameter_list|(
name|TestCollectionGenerator
argument_list|<
name|E
argument_list|>
name|delegate
parameter_list|)
block|{
name|this
operator|.
name|delegate
operator|=
name|delegate
expr_stmt|;
block|}
DECL|method|newInstance ( TestCollectionGenerator<E> delegate)
specifier|public
specifier|static
parameter_list|<
name|E
parameter_list|>
name|ReserializingTestCollectionGenerator
argument_list|<
name|E
argument_list|>
name|newInstance
parameter_list|(
name|TestCollectionGenerator
argument_list|<
name|E
argument_list|>
name|delegate
parameter_list|)
block|{
return|return
operator|new
name|ReserializingTestCollectionGenerator
argument_list|<
name|E
argument_list|>
argument_list|(
name|delegate
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|create (Object... elements)
specifier|public
name|Collection
argument_list|<
name|E
argument_list|>
name|create
parameter_list|(
name|Object
modifier|...
name|elements
parameter_list|)
block|{
return|return
name|reserialize
argument_list|(
name|delegate
operator|.
name|create
argument_list|(
name|elements
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|reserialize (T object)
specifier|static
parameter_list|<
name|T
parameter_list|>
name|T
name|reserialize
parameter_list|(
name|T
name|object
parameter_list|)
block|{
try|try
block|{
name|ByteArrayOutputStream
name|bytes
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|ObjectOutputStream
name|out
init|=
operator|new
name|ObjectOutputStream
argument_list|(
name|bytes
argument_list|)
decl_stmt|;
name|out
operator|.
name|writeObject
argument_list|(
name|object
argument_list|)
expr_stmt|;
name|ObjectInputStream
name|in
init|=
operator|new
name|ObjectInputStream
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|bytes
operator|.
name|toByteArray
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
return|return
operator|(
name|T
operator|)
name|in
operator|.
name|readObject
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|Helpers
operator|.
name|fail
argument_list|(
name|e
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
name|Helpers
operator|.
name|fail
argument_list|(
name|e
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"not reachable"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|samples ()
specifier|public
name|SampleElements
argument_list|<
name|E
argument_list|>
name|samples
parameter_list|()
block|{
return|return
name|delegate
operator|.
name|samples
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|createArray (int length)
specifier|public
name|E
index|[]
name|createArray
parameter_list|(
name|int
name|length
parameter_list|)
block|{
return|return
name|delegate
operator|.
name|createArray
argument_list|(
name|length
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|order (List<E> insertionOrder)
specifier|public
name|Iterable
argument_list|<
name|E
argument_list|>
name|order
parameter_list|(
name|List
argument_list|<
name|E
argument_list|>
name|insertionOrder
parameter_list|)
block|{
return|return
name|delegate
operator|.
name|order
argument_list|(
name|insertionOrder
argument_list|)
return|;
block|}
block|}
end_class

end_unit

