begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright 2012 Google Inc. All Rights Reserved.
end_comment

begin_package
DECL|package|com.google.common.testing
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|testing
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|Beta
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Defaults
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Predicates
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ClassToInstanceMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableClassToInstanceMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableCollection
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMultimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMultiset
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSortedMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSortedSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableTable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterators
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Multimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Multiset
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Ordering
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|primitives
operator|.
name|Primitives
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Array
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Constructor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationTargetException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Modifier
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ListIterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_comment
comment|/**  * Can provide an appropriate "null value" for a wide variety of types.  *  * @author kevinb@google.com (Kevin Bourrilllion)  * @author benyu@google.com (Jige Yu)  * @since 12.0  */
end_comment

begin_class
annotation|@
name|Beta
DECL|class|NullValues
specifier|public
specifier|final
class|class
name|NullValues
block|{
comment|// Compare by toString() to satisfy 2 properties:
comment|// 1. compareTo(null) should throw NullPointerException
comment|// 2. the order is deterministic and easy to understand, for debugging purpose.
DECL|field|BY_TO_STRING
specifier|private
specifier|static
specifier|final
name|Comparable
argument_list|<
name|Object
argument_list|>
name|BY_TO_STRING
init|=
operator|new
name|Comparable
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compareTo
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
return|return
name|toString
argument_list|()
operator|.
name|compareTo
argument_list|(
name|o
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"BY_TO_STRING"
return|;
block|}
block|}
decl_stmt|;
comment|// Always equal is a valid total ordering. And it works for any Object.
DECL|field|ALWAYS_EQUAL
specifier|private
specifier|static
specifier|final
name|Ordering
argument_list|<
name|Object
argument_list|>
name|ALWAYS_EQUAL
init|=
operator|new
name|Ordering
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|Object
name|o1
parameter_list|,
name|Object
name|o2
parameter_list|)
block|{
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"ALWAYS_EQUAL"
return|;
block|}
block|}
decl_stmt|;
DECL|field|DEFAULTS
specifier|private
specifier|static
specifier|final
name|ClassToInstanceMap
argument_list|<
name|Object
argument_list|>
name|DEFAULTS
init|=
name|ImmutableClassToInstanceMap
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|Object
operator|.
name|class
argument_list|,
operator|new
name|Object
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
name|CharSequence
operator|.
name|class
argument_list|,
literal|""
argument_list|)
operator|.
name|put
argument_list|(
name|String
operator|.
name|class
argument_list|,
literal|""
argument_list|)
operator|.
name|put
argument_list|(
name|Number
operator|.
name|class
argument_list|,
literal|0
argument_list|)
operator|.
name|put
argument_list|(
name|Pattern
operator|.
name|class
argument_list|,
name|Pattern
operator|.
name|compile
argument_list|(
literal|""
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
name|TimeUnit
operator|.
name|class
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
comment|// All collections are immutable empty. So safe for any type parameter.
operator|.
name|put
argument_list|(
name|Collection
operator|.
name|class
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
name|Iterable
operator|.
name|class
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
name|Iterator
operator|.
name|class
argument_list|,
name|Iterators
operator|.
name|emptyIterator
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
name|ListIterator
operator|.
name|class
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|()
operator|.
name|listIterator
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
name|List
operator|.
name|class
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
name|ImmutableList
operator|.
name|class
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
name|Set
operator|.
name|class
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
name|ImmutableSet
operator|.
name|class
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
name|SortedSet
operator|.
name|class
argument_list|,
name|ImmutableSortedSet
operator|.
name|of
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
name|ImmutableSortedSet
operator|.
name|class
argument_list|,
name|ImmutableSortedSet
operator|.
name|of
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
name|ImmutableCollection
operator|.
name|class
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
name|Map
operator|.
name|class
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
name|ImmutableMap
operator|.
name|class
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
name|SortedMap
operator|.
name|class
argument_list|,
name|ImmutableSortedMap
operator|.
name|of
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
name|ImmutableSortedMap
operator|.
name|class
argument_list|,
name|ImmutableSortedMap
operator|.
name|of
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
name|Multimap
operator|.
name|class
argument_list|,
name|ImmutableMultimap
operator|.
name|of
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
name|ImmutableMultimap
operator|.
name|class
argument_list|,
name|ImmutableMultimap
operator|.
name|of
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
name|Multiset
operator|.
name|class
argument_list|,
name|ImmutableMultiset
operator|.
name|of
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
name|ImmutableMultiset
operator|.
name|class
argument_list|,
name|ImmutableMultiset
operator|.
name|of
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
name|Table
operator|.
name|class
argument_list|,
name|ImmutableTable
operator|.
name|of
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
name|ImmutableTable
operator|.
name|class
argument_list|,
name|ImmutableTable
operator|.
name|of
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
name|Comparable
operator|.
name|class
argument_list|,
name|BY_TO_STRING
argument_list|)
operator|.
name|put
argument_list|(
name|Comparator
operator|.
name|class
argument_list|,
name|ALWAYS_EQUAL
argument_list|)
operator|.
name|put
argument_list|(
name|Ordering
operator|.
name|class
argument_list|,
name|ALWAYS_EQUAL
argument_list|)
operator|.
name|put
argument_list|(
name|Predicate
operator|.
name|class
argument_list|,
name|Predicates
operator|.
name|alwaysTrue
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
DECL|field|logger
specifier|private
specifier|static
specifier|final
name|Logger
name|logger
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|NullValues
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
comment|/**    * Returns an 'empty' value for {@code type} as the null value, or {@code null} if empty-ness is    * unknown for the type.    */
DECL|method|get (Class<T> type)
annotation|@
name|Nullable
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|T
name|get
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|)
block|{
name|T
name|defaultValue
init|=
name|DEFAULTS
operator|.
name|getInstance
argument_list|(
name|type
argument_list|)
decl_stmt|;
if|if
condition|(
name|defaultValue
operator|!=
literal|null
condition|)
block|{
return|return
name|defaultValue
return|;
block|}
if|if
condition|(
name|type
operator|.
name|isEnum
argument_list|()
condition|)
block|{
name|T
index|[]
name|enumConstants
init|=
name|type
operator|.
name|getEnumConstants
argument_list|()
decl_stmt|;
return|return
operator|(
name|enumConstants
operator|.
name|length
operator|==
literal|0
operator|)
condition|?
literal|null
else|:
name|enumConstants
index|[
literal|0
index|]
return|;
block|}
if|if
condition|(
name|type
operator|.
name|isArray
argument_list|()
condition|)
block|{
return|return
name|createEmptyArray
argument_list|(
name|type
argument_list|)
return|;
block|}
if|if
condition|(
name|type
operator|==
name|Appendable
operator|.
name|class
condition|)
block|{
return|return
name|type
operator|.
name|cast
argument_list|(
operator|new
name|StringBuilder
argument_list|()
argument_list|)
return|;
block|}
name|T
name|jvmDefault
init|=
name|Defaults
operator|.
name|defaultValue
argument_list|(
name|Primitives
operator|.
name|unwrap
argument_list|(
name|type
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|jvmDefault
operator|!=
literal|null
condition|)
block|{
return|return
name|jvmDefault
return|;
block|}
if|if
condition|(
name|Modifier
operator|.
name|isAbstract
argument_list|(
name|type
operator|.
name|getModifiers
argument_list|()
argument_list|)
operator|||
operator|!
name|Modifier
operator|.
name|isPublic
argument_list|(
name|type
operator|.
name|getModifiers
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
specifier|final
name|Constructor
argument_list|<
name|T
argument_list|>
name|constructor
decl_stmt|;
try|try
block|{
name|constructor
operator|=
name|type
operator|.
name|getConstructor
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
name|constructor
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// accessibility check is too slow
try|try
block|{
return|return
name|constructor
operator|.
name|newInstance
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|InstantiationException
name|impossible
parameter_list|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
name|impossible
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
name|impossible
parameter_list|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
name|impossible
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|InvocationTargetException
name|e
parameter_list|)
block|{
name|logger
operator|.
name|log
argument_list|(
name|Level
operator|.
name|WARNING
argument_list|,
literal|"Exception while invoking default constructor."
argument_list|,
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// same component type means same array type
DECL|method|createEmptyArray (Class<T> arrayType)
specifier|private
specifier|static
parameter_list|<
name|T
parameter_list|>
name|T
name|createEmptyArray
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|arrayType
parameter_list|)
block|{
return|return
operator|(
name|T
operator|)
name|Array
operator|.
name|newInstance
argument_list|(
name|arrayType
operator|.
name|getComponentType
argument_list|()
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|NullValues ()
specifier|private
name|NullValues
parameter_list|()
block|{}
block|}
end_class

end_unit

