begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2012 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.testing
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|testing
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkArgument
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|Beta
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|CharMatcher
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Charsets
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Defaults
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Equivalence
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Joiner
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Predicates
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Splitter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Stopwatch
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Ticker
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|BiMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ClassToInstanceMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableBiMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableClassToInstanceMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableCollection
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableListMultimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMultimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMultiset
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSetMultimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSortedMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSortedMultiset
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSortedSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableTable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterators
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ListMultimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|MapConstraint
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|MapConstraints
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|MapDifference
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Multimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Multimaps
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Multiset
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Ordering
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|PeekingIterator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Range
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|RowSortedTable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|SetMultimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|SortedMapDifference
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|SortedMultiset
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|SortedSetMultimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Tables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|TreeBasedTable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|TreeMultimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|primitives
operator|.
name|Primitives
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|primitives
operator|.
name|UnsignedInteger
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|primitives
operator|.
name|UnsignedLong
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Reader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Writer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|AnnotatedElement
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Array
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Constructor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|GenericDeclaration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationTargetException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Modifier
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigDecimal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|Buffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|CharBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|DoubleBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|FloatBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|IntBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|LongBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ShortBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayDeque
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Currency
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Deque
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ListIterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NavigableMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NavigableSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Queue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|BlockingDeque
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|BlockingQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentNavigableMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentSkipListMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|LinkedBlockingDeque
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledThreadPoolExecutor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadPoolExecutor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|MatchResult
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_comment
comment|/**  * Supplies an arbitrary "default" instance for a wide range of types, often useful in testing  * utilities.  *   *<p>Covers arrays, enums and common types defined in {@code java.lang}, {@code java.lang.reflect},  * {@code java.io}, {@code java.nio}, {@code java.math}, {@code java.util}, {@code  * java.util.concurrent}, {@code java.util.regex}, {@code com.google.common.base}, {@code  * com.google.common.collect} and {@code com.google.common.primitives}. In addition, if the type  * exposes at least one public static final constant of the same type, one of the constants will be  * used; or if the class exposes a public parameter-less constructor then it will be "new"d and  * returned.  *   *<p>All default instances returned by {@link #get} are generics-safe. Clients won't get type  * errors for using {@code get(Comparator.class)} as a {@code Comparator<Foo>}, for example.  * Immutable empty instances are returned for collection types; {@code ""} for string;  * {@code 0} for number types; reasonable default instance for other stateless types. For mutable  * types, a fresh instance is created each time {@code get()} is called.  *  * @author Kevin Bourrillion  * @author Ben Yu  * @since 12.0  */
end_comment

begin_class
annotation|@
name|Beta
DECL|class|ArbitraryInstances
specifier|public
specifier|final
class|class
name|ArbitraryInstances
block|{
DECL|field|BY_FIELD_NAME
specifier|private
specifier|static
specifier|final
name|Ordering
argument_list|<
name|Field
argument_list|>
name|BY_FIELD_NAME
init|=
operator|new
name|Ordering
argument_list|<
name|Field
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|Field
name|left
parameter_list|,
name|Field
name|right
parameter_list|)
block|{
return|return
name|left
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|right
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
block|}
decl_stmt|;
comment|/**    * Returns a new {@code MatchResult} that corresponds to a successful match. Apache Harmony (used    * in Android) requires a successful match in order to generate a {@code MatchResult}:    * http://goo.gl/5VQFmC    */
DECL|method|newMatchResult ()
specifier|private
specifier|static
name|MatchResult
name|newMatchResult
parameter_list|()
block|{
name|Matcher
name|matcher
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"."
argument_list|)
operator|.
name|matcher
argument_list|(
literal|"X"
argument_list|)
decl_stmt|;
name|matcher
operator|.
name|find
argument_list|()
expr_stmt|;
return|return
name|matcher
operator|.
name|toMatchResult
argument_list|()
return|;
block|}
DECL|field|DEFAULTS
specifier|private
specifier|static
specifier|final
name|ClassToInstanceMap
argument_list|<
name|Object
argument_list|>
name|DEFAULTS
init|=
name|ImmutableClassToInstanceMap
operator|.
name|builder
argument_list|()
comment|// primitives
operator|.
name|put
argument_list|(
name|Object
operator|.
name|class
argument_list|,
literal|""
argument_list|)
operator|.
name|put
argument_list|(
name|Number
operator|.
name|class
argument_list|,
literal|0
argument_list|)
operator|.
name|put
argument_list|(
name|UnsignedInteger
operator|.
name|class
argument_list|,
name|UnsignedInteger
operator|.
name|ZERO
argument_list|)
operator|.
name|put
argument_list|(
name|UnsignedLong
operator|.
name|class
argument_list|,
name|UnsignedLong
operator|.
name|ZERO
argument_list|)
operator|.
name|put
argument_list|(
name|BigInteger
operator|.
name|class
argument_list|,
name|BigInteger
operator|.
name|ZERO
argument_list|)
operator|.
name|put
argument_list|(
name|BigDecimal
operator|.
name|class
argument_list|,
name|BigDecimal
operator|.
name|ZERO
argument_list|)
operator|.
name|put
argument_list|(
name|CharSequence
operator|.
name|class
argument_list|,
literal|""
argument_list|)
operator|.
name|put
argument_list|(
name|String
operator|.
name|class
argument_list|,
literal|""
argument_list|)
operator|.
name|put
argument_list|(
name|Pattern
operator|.
name|class
argument_list|,
name|Pattern
operator|.
name|compile
argument_list|(
literal|""
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
name|MatchResult
operator|.
name|class
argument_list|,
name|newMatchResult
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
name|TimeUnit
operator|.
name|class
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
operator|.
name|put
argument_list|(
name|Charset
operator|.
name|class
argument_list|,
name|Charsets
operator|.
name|UTF_8
argument_list|)
operator|.
name|put
argument_list|(
name|Currency
operator|.
name|class
argument_list|,
name|Currency
operator|.
name|getInstance
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
name|Locale
operator|.
name|class
argument_list|,
name|Locale
operator|.
name|US
argument_list|)
comment|// common.base
operator|.
name|put
argument_list|(
name|CharMatcher
operator|.
name|class
argument_list|,
name|CharMatcher
operator|.
name|NONE
argument_list|)
operator|.
name|put
argument_list|(
name|Joiner
operator|.
name|class
argument_list|,
name|Joiner
operator|.
name|on
argument_list|(
literal|','
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
name|Splitter
operator|.
name|class
argument_list|,
name|Splitter
operator|.
name|on
argument_list|(
literal|','
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
name|Optional
operator|.
name|class
argument_list|,
name|Optional
operator|.
name|absent
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
name|Predicate
operator|.
name|class
argument_list|,
name|Predicates
operator|.
name|alwaysTrue
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
name|Equivalence
operator|.
name|class
argument_list|,
name|Equivalence
operator|.
name|equals
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
name|Ticker
operator|.
name|class
argument_list|,
name|Ticker
operator|.
name|systemTicker
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
name|Stopwatch
operator|.
name|class
argument_list|,
name|Stopwatch
operator|.
name|createUnstarted
argument_list|()
argument_list|)
comment|// io types
operator|.
name|put
argument_list|(
name|InputStream
operator|.
name|class
argument_list|,
operator|new
name|ByteArrayInputStream
argument_list|(
operator|new
name|byte
index|[
literal|0
index|]
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
name|ByteArrayInputStream
operator|.
name|class
argument_list|,
operator|new
name|ByteArrayInputStream
argument_list|(
operator|new
name|byte
index|[
literal|0
index|]
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
name|Readable
operator|.
name|class
argument_list|,
operator|new
name|StringReader
argument_list|(
literal|""
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
name|Reader
operator|.
name|class
argument_list|,
operator|new
name|StringReader
argument_list|(
literal|""
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
name|StringReader
operator|.
name|class
argument_list|,
operator|new
name|StringReader
argument_list|(
literal|""
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
name|Buffer
operator|.
name|class
argument_list|,
name|ByteBuffer
operator|.
name|allocate
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
name|CharBuffer
operator|.
name|class
argument_list|,
name|CharBuffer
operator|.
name|allocate
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
name|ByteBuffer
operator|.
name|class
argument_list|,
name|ByteBuffer
operator|.
name|allocate
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
name|ShortBuffer
operator|.
name|class
argument_list|,
name|ShortBuffer
operator|.
name|allocate
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
name|IntBuffer
operator|.
name|class
argument_list|,
name|IntBuffer
operator|.
name|allocate
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
name|LongBuffer
operator|.
name|class
argument_list|,
name|LongBuffer
operator|.
name|allocate
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
name|FloatBuffer
operator|.
name|class
argument_list|,
name|FloatBuffer
operator|.
name|allocate
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
name|DoubleBuffer
operator|.
name|class
argument_list|,
name|DoubleBuffer
operator|.
name|allocate
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
name|File
operator|.
name|class
argument_list|,
operator|new
name|File
argument_list|(
literal|""
argument_list|)
argument_list|)
comment|// All collections are immutable empty. So safe for any type parameter.
operator|.
name|put
argument_list|(
name|Iterator
operator|.
name|class
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|()
operator|.
name|iterator
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
name|PeekingIterator
operator|.
name|class
argument_list|,
name|Iterators
operator|.
name|peekingIterator
argument_list|(
name|Iterators
operator|.
name|emptyIterator
argument_list|()
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
name|ListIterator
operator|.
name|class
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|()
operator|.
name|listIterator
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
name|Iterable
operator|.
name|class
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
name|Collection
operator|.
name|class
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
name|ImmutableCollection
operator|.
name|class
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
name|List
operator|.
name|class
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
name|ImmutableList
operator|.
name|class
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
name|Set
operator|.
name|class
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
name|ImmutableSet
operator|.
name|class
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
name|SortedSet
operator|.
name|class
argument_list|,
name|ImmutableSortedSet
operator|.
name|of
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
name|ImmutableSortedSet
operator|.
name|class
argument_list|,
name|ImmutableSortedSet
operator|.
name|of
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
name|NavigableSet
operator|.
name|class
argument_list|,
name|Sets
operator|.
name|unmodifiableNavigableSet
argument_list|(
name|Sets
operator|.
name|newTreeSet
argument_list|()
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
name|Map
operator|.
name|class
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
name|ImmutableMap
operator|.
name|class
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
name|SortedMap
operator|.
name|class
argument_list|,
name|ImmutableSortedMap
operator|.
name|of
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
name|ImmutableSortedMap
operator|.
name|class
argument_list|,
name|ImmutableSortedMap
operator|.
name|of
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
name|NavigableMap
operator|.
name|class
argument_list|,
name|Maps
operator|.
name|unmodifiableNavigableMap
argument_list|(
name|Maps
operator|.
name|newTreeMap
argument_list|()
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
name|Multimap
operator|.
name|class
argument_list|,
name|ImmutableMultimap
operator|.
name|of
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
name|ImmutableMultimap
operator|.
name|class
argument_list|,
name|ImmutableMultimap
operator|.
name|of
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
name|ListMultimap
operator|.
name|class
argument_list|,
name|ImmutableListMultimap
operator|.
name|of
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
name|ImmutableListMultimap
operator|.
name|class
argument_list|,
name|ImmutableListMultimap
operator|.
name|of
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
name|SetMultimap
operator|.
name|class
argument_list|,
name|ImmutableSetMultimap
operator|.
name|of
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
name|ImmutableSetMultimap
operator|.
name|class
argument_list|,
name|ImmutableSetMultimap
operator|.
name|of
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
name|SortedSetMultimap
operator|.
name|class
argument_list|,
name|Multimaps
operator|.
name|unmodifiableSortedSetMultimap
argument_list|(
name|TreeMultimap
operator|.
name|create
argument_list|()
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
name|Multiset
operator|.
name|class
argument_list|,
name|ImmutableMultiset
operator|.
name|of
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
name|ImmutableMultiset
operator|.
name|class
argument_list|,
name|ImmutableMultiset
operator|.
name|of
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
name|SortedMultiset
operator|.
name|class
argument_list|,
name|ImmutableSortedMultiset
operator|.
name|of
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
name|ImmutableSortedMultiset
operator|.
name|class
argument_list|,
name|ImmutableSortedMultiset
operator|.
name|of
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
name|BiMap
operator|.
name|class
argument_list|,
name|ImmutableBiMap
operator|.
name|of
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
name|ImmutableBiMap
operator|.
name|class
argument_list|,
name|ImmutableBiMap
operator|.
name|of
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
name|Table
operator|.
name|class
argument_list|,
name|ImmutableTable
operator|.
name|of
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
name|ImmutableTable
operator|.
name|class
argument_list|,
name|ImmutableTable
operator|.
name|of
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
name|RowSortedTable
operator|.
name|class
argument_list|,
name|Tables
operator|.
name|unmodifiableRowSortedTable
argument_list|(
name|TreeBasedTable
operator|.
name|create
argument_list|()
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
name|ClassToInstanceMap
operator|.
name|class
argument_list|,
name|ImmutableClassToInstanceMap
operator|.
name|builder
argument_list|()
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
name|ImmutableClassToInstanceMap
operator|.
name|class
argument_list|,
name|ImmutableClassToInstanceMap
operator|.
name|builder
argument_list|()
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
name|Comparable
operator|.
name|class
argument_list|,
name|ByToString
operator|.
name|INSTANCE
argument_list|)
operator|.
name|put
argument_list|(
name|Comparator
operator|.
name|class
argument_list|,
name|AlwaysEqual
operator|.
name|INSTANCE
argument_list|)
operator|.
name|put
argument_list|(
name|Ordering
operator|.
name|class
argument_list|,
name|AlwaysEqual
operator|.
name|INSTANCE
argument_list|)
operator|.
name|put
argument_list|(
name|Range
operator|.
name|class
argument_list|,
name|Range
operator|.
name|all
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
name|MapConstraint
operator|.
name|class
argument_list|,
name|MapConstraints
operator|.
name|notNull
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
name|MapDifference
operator|.
name|class
argument_list|,
name|Maps
operator|.
name|difference
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|()
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|()
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
name|SortedMapDifference
operator|.
name|class
argument_list|,
name|Maps
operator|.
name|difference
argument_list|(
name|ImmutableSortedMap
operator|.
name|of
argument_list|()
argument_list|,
name|ImmutableSortedMap
operator|.
name|of
argument_list|()
argument_list|)
argument_list|)
comment|// reflect
operator|.
name|put
argument_list|(
name|AnnotatedElement
operator|.
name|class
argument_list|,
name|Object
operator|.
name|class
argument_list|)
operator|.
name|put
argument_list|(
name|GenericDeclaration
operator|.
name|class
argument_list|,
name|Object
operator|.
name|class
argument_list|)
operator|.
name|put
argument_list|(
name|Type
operator|.
name|class
argument_list|,
name|Object
operator|.
name|class
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
comment|/**    * type -> implementation. Inherently mutable interfaces and abstract classes are mapped to their    * default implementations and are "new"d upon get().    */
DECL|field|implementations
specifier|private
specifier|static
specifier|final
name|ConcurrentMap
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|,
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|implementations
init|=
name|Maps
operator|.
name|newConcurrentMap
argument_list|()
decl_stmt|;
DECL|method|setImplementation (Class<T> type, Class<? extends T> implementation)
specifier|private
specifier|static
parameter_list|<
name|T
parameter_list|>
name|void
name|setImplementation
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|implementation
parameter_list|)
block|{
name|checkArgument
argument_list|(
name|type
operator|!=
name|implementation
argument_list|,
literal|"Don't register %s to itself!"
argument_list|,
name|type
argument_list|)
expr_stmt|;
name|checkArgument
argument_list|(
operator|!
name|DEFAULTS
operator|.
name|containsKey
argument_list|(
name|type
argument_list|)
argument_list|,
literal|"A default value was already registered for %s"
argument_list|,
name|type
argument_list|)
expr_stmt|;
name|checkArgument
argument_list|(
name|implementations
operator|.
name|put
argument_list|(
name|type
argument_list|,
name|implementation
argument_list|)
operator|==
literal|null
argument_list|,
literal|"Implementation for %s was already registered"
argument_list|,
name|type
argument_list|)
expr_stmt|;
block|}
static|static
block|{
name|setImplementation
argument_list|(
name|Appendable
operator|.
name|class
argument_list|,
name|StringBuilder
operator|.
name|class
argument_list|)
expr_stmt|;
name|setImplementation
argument_list|(
name|BlockingQueue
operator|.
name|class
argument_list|,
name|LinkedBlockingDeque
operator|.
name|class
argument_list|)
expr_stmt|;
name|setImplementation
argument_list|(
name|BlockingDeque
operator|.
name|class
argument_list|,
name|LinkedBlockingDeque
operator|.
name|class
argument_list|)
expr_stmt|;
name|setImplementation
argument_list|(
name|ConcurrentMap
operator|.
name|class
argument_list|,
name|ConcurrentHashMap
operator|.
name|class
argument_list|)
expr_stmt|;
name|setImplementation
argument_list|(
name|ConcurrentNavigableMap
operator|.
name|class
argument_list|,
name|ConcurrentSkipListMap
operator|.
name|class
argument_list|)
expr_stmt|;
name|setImplementation
argument_list|(
name|CountDownLatch
operator|.
name|class
argument_list|,
name|Dummies
operator|.
name|DummyCountDownLatch
operator|.
name|class
argument_list|)
expr_stmt|;
name|setImplementation
argument_list|(
name|Deque
operator|.
name|class
argument_list|,
name|ArrayDeque
operator|.
name|class
argument_list|)
expr_stmt|;
name|setImplementation
argument_list|(
name|OutputStream
operator|.
name|class
argument_list|,
name|ByteArrayOutputStream
operator|.
name|class
argument_list|)
expr_stmt|;
name|setImplementation
argument_list|(
name|PrintStream
operator|.
name|class
argument_list|,
name|Dummies
operator|.
name|InMemoryPrintStream
operator|.
name|class
argument_list|)
expr_stmt|;
name|setImplementation
argument_list|(
name|PrintWriter
operator|.
name|class
argument_list|,
name|Dummies
operator|.
name|InMemoryPrintWriter
operator|.
name|class
argument_list|)
expr_stmt|;
name|setImplementation
argument_list|(
name|Queue
operator|.
name|class
argument_list|,
name|ArrayDeque
operator|.
name|class
argument_list|)
expr_stmt|;
name|setImplementation
argument_list|(
name|Random
operator|.
name|class
argument_list|,
name|Dummies
operator|.
name|DeterministicRandom
operator|.
name|class
argument_list|)
expr_stmt|;
name|setImplementation
argument_list|(
name|ScheduledThreadPoolExecutor
operator|.
name|class
argument_list|,
name|Dummies
operator|.
name|DummyScheduledThreadPoolExecutor
operator|.
name|class
argument_list|)
expr_stmt|;
name|setImplementation
argument_list|(
name|ThreadPoolExecutor
operator|.
name|class
argument_list|,
name|Dummies
operator|.
name|DummyScheduledThreadPoolExecutor
operator|.
name|class
argument_list|)
expr_stmt|;
name|setImplementation
argument_list|(
name|Writer
operator|.
name|class
argument_list|,
name|StringWriter
operator|.
name|class
argument_list|)
expr_stmt|;
name|setImplementation
argument_list|(
name|Runnable
operator|.
name|class
argument_list|,
name|Dummies
operator|.
name|DummyRunnable
operator|.
name|class
argument_list|)
expr_stmt|;
name|setImplementation
argument_list|(
name|ThreadFactory
operator|.
name|class
argument_list|,
name|Dummies
operator|.
name|DummyThreadFactory
operator|.
name|class
argument_list|)
expr_stmt|;
name|setImplementation
argument_list|(
name|Executor
operator|.
name|class
argument_list|,
name|Dummies
operator|.
name|DummyExecutor
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// it's a subtype map
annotation|@
name|Nullable
DECL|method|getImplementation (Class<T> type)
specifier|private
specifier|static
parameter_list|<
name|T
parameter_list|>
name|Class
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|getImplementation
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|)
block|{
return|return
operator|(
name|Class
argument_list|<
name|?
extends|extends
name|T
argument_list|>
operator|)
name|implementations
operator|.
name|get
argument_list|(
name|type
argument_list|)
return|;
block|}
DECL|field|logger
specifier|private
specifier|static
specifier|final
name|Logger
name|logger
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|ArbitraryInstances
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
comment|/**    * Returns an arbitrary instance for {@code type}, or {@code null} if no arbitrary instance can    * be determined.    */
DECL|method|get (Class<T> type)
annotation|@
name|Nullable
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|T
name|get
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|)
block|{
name|T
name|defaultValue
init|=
name|DEFAULTS
operator|.
name|getInstance
argument_list|(
name|type
argument_list|)
decl_stmt|;
if|if
condition|(
name|defaultValue
operator|!=
literal|null
condition|)
block|{
return|return
name|defaultValue
return|;
block|}
name|Class
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|implementation
init|=
name|getImplementation
argument_list|(
name|type
argument_list|)
decl_stmt|;
if|if
condition|(
name|implementation
operator|!=
literal|null
condition|)
block|{
return|return
name|get
argument_list|(
name|implementation
argument_list|)
return|;
block|}
if|if
condition|(
name|type
operator|.
name|isEnum
argument_list|()
condition|)
block|{
name|T
index|[]
name|enumConstants
init|=
name|type
operator|.
name|getEnumConstants
argument_list|()
decl_stmt|;
return|return
operator|(
name|enumConstants
operator|.
name|length
operator|==
literal|0
operator|)
condition|?
literal|null
else|:
name|enumConstants
index|[
literal|0
index|]
return|;
block|}
if|if
condition|(
name|type
operator|.
name|isArray
argument_list|()
condition|)
block|{
return|return
name|createEmptyArray
argument_list|(
name|type
argument_list|)
return|;
block|}
name|T
name|jvmDefault
init|=
name|Defaults
operator|.
name|defaultValue
argument_list|(
name|Primitives
operator|.
name|unwrap
argument_list|(
name|type
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|jvmDefault
operator|!=
literal|null
condition|)
block|{
return|return
name|jvmDefault
return|;
block|}
if|if
condition|(
name|Modifier
operator|.
name|isAbstract
argument_list|(
name|type
operator|.
name|getModifiers
argument_list|()
argument_list|)
operator|||
operator|!
name|Modifier
operator|.
name|isPublic
argument_list|(
name|type
operator|.
name|getModifiers
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|arbitraryConstantInstanceOrNull
argument_list|(
name|type
argument_list|)
return|;
block|}
specifier|final
name|Constructor
argument_list|<
name|T
argument_list|>
name|constructor
decl_stmt|;
try|try
block|{
name|constructor
operator|=
name|type
operator|.
name|getConstructor
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
name|e
parameter_list|)
block|{
return|return
name|arbitraryConstantInstanceOrNull
argument_list|(
name|type
argument_list|)
return|;
block|}
name|constructor
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// accessibility check is too slow
try|try
block|{
return|return
name|constructor
operator|.
name|newInstance
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|InstantiationException
name|impossible
parameter_list|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
name|impossible
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
name|impossible
parameter_list|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
name|impossible
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|InvocationTargetException
name|e
parameter_list|)
block|{
name|logger
operator|.
name|log
argument_list|(
name|Level
operator|.
name|WARNING
argument_list|,
literal|"Exception while invoking default constructor."
argument_list|,
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|arbitraryConstantInstanceOrNull
argument_list|(
name|type
argument_list|)
return|;
block|}
block|}
DECL|method|arbitraryConstantInstanceOrNull (Class<T> type)
annotation|@
name|Nullable
specifier|private
specifier|static
parameter_list|<
name|T
parameter_list|>
name|T
name|arbitraryConstantInstanceOrNull
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|)
block|{
name|Field
index|[]
name|fields
init|=
name|type
operator|.
name|getDeclaredFields
argument_list|()
decl_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|fields
argument_list|,
name|BY_FIELD_NAME
argument_list|)
expr_stmt|;
for|for
control|(
name|Field
name|field
range|:
name|fields
control|)
block|{
if|if
condition|(
name|Modifier
operator|.
name|isPublic
argument_list|(
name|field
operator|.
name|getModifiers
argument_list|()
argument_list|)
operator|&&
name|Modifier
operator|.
name|isStatic
argument_list|(
name|field
operator|.
name|getModifiers
argument_list|()
argument_list|)
operator|&&
name|Modifier
operator|.
name|isFinal
argument_list|(
name|field
operator|.
name|getModifiers
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|field
operator|.
name|getGenericType
argument_list|()
operator|==
name|field
operator|.
name|getType
argument_list|()
operator|&&
name|type
operator|.
name|isAssignableFrom
argument_list|(
name|field
operator|.
name|getType
argument_list|()
argument_list|)
condition|)
block|{
name|field
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
try|try
block|{
name|T
name|constant
init|=
name|type
operator|.
name|cast
argument_list|(
name|field
operator|.
name|get
argument_list|(
literal|null
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|constant
operator|!=
literal|null
condition|)
block|{
return|return
name|constant
return|;
block|}
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
name|impossible
parameter_list|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
name|impossible
argument_list|)
throw|;
block|}
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
DECL|method|createEmptyArray (Class<T> arrayType)
specifier|private
specifier|static
parameter_list|<
name|T
parameter_list|>
name|T
name|createEmptyArray
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|arrayType
parameter_list|)
block|{
return|return
name|arrayType
operator|.
name|cast
argument_list|(
name|Array
operator|.
name|newInstance
argument_list|(
name|arrayType
operator|.
name|getComponentType
argument_list|()
argument_list|,
literal|0
argument_list|)
argument_list|)
return|;
block|}
comment|// Internal implementations of some classes, with public default constructor that get() needs.
DECL|class|Dummies
specifier|private
specifier|static
specifier|final
class|class
name|Dummies
block|{
DECL|class|InMemoryPrintStream
specifier|public
specifier|static
specifier|final
class|class
name|InMemoryPrintStream
extends|extends
name|PrintStream
block|{
DECL|method|InMemoryPrintStream ()
specifier|public
name|InMemoryPrintStream
parameter_list|()
block|{
name|super
argument_list|(
operator|new
name|ByteArrayOutputStream
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|InMemoryPrintWriter
specifier|public
specifier|static
specifier|final
class|class
name|InMemoryPrintWriter
extends|extends
name|PrintWriter
block|{
DECL|method|InMemoryPrintWriter ()
specifier|public
name|InMemoryPrintWriter
parameter_list|()
block|{
name|super
argument_list|(
operator|new
name|StringWriter
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|DeterministicRandom
specifier|public
specifier|static
specifier|final
class|class
name|DeterministicRandom
extends|extends
name|Random
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
comment|// invoked by reflection
DECL|method|DeterministicRandom ()
specifier|public
name|DeterministicRandom
parameter_list|()
block|{
name|super
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|DummyScheduledThreadPoolExecutor
specifier|public
specifier|static
specifier|final
class|class
name|DummyScheduledThreadPoolExecutor
extends|extends
name|ScheduledThreadPoolExecutor
block|{
DECL|method|DummyScheduledThreadPoolExecutor ()
specifier|public
name|DummyScheduledThreadPoolExecutor
parameter_list|()
block|{
name|super
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|DummyCountDownLatch
specifier|public
specifier|static
specifier|final
class|class
name|DummyCountDownLatch
extends|extends
name|CountDownLatch
block|{
DECL|method|DummyCountDownLatch ()
specifier|public
name|DummyCountDownLatch
parameter_list|()
block|{
name|super
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|DummyRunnable
specifier|public
specifier|static
specifier|final
class|class
name|DummyRunnable
implements|implements
name|Runnable
implements|,
name|Serializable
block|{
DECL|method|run ()
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{}
block|}
DECL|class|DummyThreadFactory
specifier|public
specifier|static
specifier|final
class|class
name|DummyThreadFactory
implements|implements
name|ThreadFactory
implements|,
name|Serializable
block|{
DECL|method|newThread (Runnable r)
annotation|@
name|Override
specifier|public
name|Thread
name|newThread
parameter_list|(
name|Runnable
name|r
parameter_list|)
block|{
return|return
operator|new
name|Thread
argument_list|(
name|r
argument_list|)
return|;
block|}
block|}
DECL|class|DummyExecutor
specifier|public
specifier|static
specifier|final
class|class
name|DummyExecutor
implements|implements
name|Executor
implements|,
name|Serializable
block|{
DECL|method|execute (Runnable command)
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|(
name|Runnable
name|command
parameter_list|)
block|{}
block|}
block|}
comment|// Compare by toString() to satisfy 2 properties:
comment|// 1. compareTo(null) should throw NullPointerException
comment|// 2. the order is deterministic and easy to understand, for debugging purpose.
DECL|class|ByToString
specifier|private
specifier|static
specifier|final
class|class
name|ByToString
implements|implements
name|Comparable
argument_list|<
name|Object
argument_list|>
implements|,
name|Serializable
block|{
DECL|field|INSTANCE
specifier|private
specifier|static
specifier|final
name|ByToString
name|INSTANCE
init|=
operator|new
name|ByToString
argument_list|()
decl_stmt|;
DECL|method|compareTo (Object o)
annotation|@
name|Override
specifier|public
name|int
name|compareTo
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
return|return
name|toString
argument_list|()
operator|.
name|compareTo
argument_list|(
name|o
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
DECL|method|toString ()
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"BY_TO_STRING"
return|;
block|}
DECL|method|readResolve ()
specifier|private
name|Object
name|readResolve
parameter_list|()
block|{
return|return
name|INSTANCE
return|;
block|}
block|}
comment|// Always equal is a valid total ordering. And it works for any Object.
DECL|class|AlwaysEqual
specifier|private
specifier|static
specifier|final
class|class
name|AlwaysEqual
extends|extends
name|Ordering
argument_list|<
name|Object
argument_list|>
implements|implements
name|Serializable
block|{
DECL|field|INSTANCE
specifier|private
specifier|static
specifier|final
name|AlwaysEqual
name|INSTANCE
init|=
operator|new
name|AlwaysEqual
argument_list|()
decl_stmt|;
DECL|method|compare (Object o1, Object o2)
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|Object
name|o1
parameter_list|,
name|Object
name|o2
parameter_list|)
block|{
return|return
literal|0
return|;
block|}
DECL|method|toString ()
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"ALWAYS_EQUAL"
return|;
block|}
DECL|method|readResolve ()
specifier|private
name|Object
name|readResolve
parameter_list|()
block|{
return|return
name|INSTANCE
return|;
block|}
block|}
DECL|method|ArbitraryInstances ()
specifier|private
name|ArbitraryInstances
parameter_list|()
block|{}
block|}
end_class

end_unit

