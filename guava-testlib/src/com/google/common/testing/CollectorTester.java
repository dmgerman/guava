begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2015 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.testing
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|testing
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import static
name|junit
operator|.
name|framework
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|Beta
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtCompatible
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|BiPredicate
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collector
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_comment
comment|/**  * Tester for {@code Collector} implementations.  *  *<p>Example usage:  *<pre>  * CollectorTester.of(Collectors.summingInt(Integer::parseInt))  *     .expectCollects(3, "1", "2")  *     .expectCollects(10, "1", "4", "3", "2")  *     .expectCollects(5, "-3", "0", "8");  *</pre>  *  * @author Louis Wasserman  * @since 21.0  */
end_comment

begin_class
annotation|@
name|Beta
annotation|@
name|GwtCompatible
DECL|class|CollectorTester
specifier|public
specifier|final
class|class
name|CollectorTester
parameter_list|<
name|T
parameter_list|,
name|A
parameter_list|,
name|R
parameter_list|>
block|{
comment|/**    * Creates a {@code CollectorTester} for the specified {@code Collector}. The result of the {@code    * Collector} will be compared to the expected value using {@link Object.equals}.    */
DECL|method|of (Collector<T, A, R> collector)
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|,
name|A
parameter_list|,
name|R
parameter_list|>
name|CollectorTester
argument_list|<
name|T
argument_list|,
name|A
argument_list|,
name|R
argument_list|>
name|of
parameter_list|(
name|Collector
argument_list|<
name|T
argument_list|,
name|A
argument_list|,
name|R
argument_list|>
name|collector
parameter_list|)
block|{
return|return
name|of
argument_list|(
name|collector
argument_list|,
name|Objects
operator|::
name|equals
argument_list|)
return|;
block|}
comment|/**    * Creates a {@code CollectorTester} for the specified {@code Collector}. The result of the {@code    * Collector} will be compared to the expected value using the specified {@code equivalence}.    */
DECL|method|of (Collector<T, A, R> collector, BiPredicate<? super R, ? super R> equivalence)
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|,
name|A
parameter_list|,
name|R
parameter_list|>
name|CollectorTester
argument_list|<
name|T
argument_list|,
name|A
argument_list|,
name|R
argument_list|>
name|of
parameter_list|(
name|Collector
argument_list|<
name|T
argument_list|,
name|A
argument_list|,
name|R
argument_list|>
name|collector
parameter_list|,
name|BiPredicate
argument_list|<
name|?
super|super
name|R
argument_list|,
name|?
super|super
name|R
argument_list|>
name|equivalence
parameter_list|)
block|{
return|return
operator|new
name|CollectorTester
argument_list|<>
argument_list|(
name|collector
argument_list|,
name|equivalence
argument_list|)
return|;
block|}
DECL|field|collector
specifier|private
specifier|final
name|Collector
argument_list|<
name|T
argument_list|,
name|A
argument_list|,
name|R
argument_list|>
name|collector
decl_stmt|;
DECL|field|equivalence
specifier|private
specifier|final
name|BiPredicate
argument_list|<
name|?
super|super
name|R
argument_list|,
name|?
super|super
name|R
argument_list|>
name|equivalence
decl_stmt|;
DECL|method|CollectorTester ( Collector<T, A, R> collector, BiPredicate<? super R, ? super R> equivalence)
specifier|private
name|CollectorTester
parameter_list|(
name|Collector
argument_list|<
name|T
argument_list|,
name|A
argument_list|,
name|R
argument_list|>
name|collector
parameter_list|,
name|BiPredicate
argument_list|<
name|?
super|super
name|R
argument_list|,
name|?
super|super
name|R
argument_list|>
name|equivalence
parameter_list|)
block|{
name|this
operator|.
name|collector
operator|=
name|checkNotNull
argument_list|(
name|collector
argument_list|)
expr_stmt|;
name|this
operator|.
name|equivalence
operator|=
name|checkNotNull
argument_list|(
name|equivalence
argument_list|)
expr_stmt|;
block|}
comment|/**    * Different orderings for combining the elements of an input array, which must    * all produce the same result.    */
DECL|enum|CollectStrategy
enum|enum
name|CollectStrategy
block|{
comment|/**      * Get one accumulator and accumulate the elements into it sequentially.      */
DECL|enumConstant|SEQUENTIAL
name|SEQUENTIAL
block|{
annotation|@
name|Override
specifier|final
parameter_list|<
name|T
parameter_list|,
name|A
parameter_list|,
name|R
parameter_list|>
name|A
name|result
parameter_list|(
name|Collector
argument_list|<
name|T
argument_list|,
name|A
argument_list|,
name|R
argument_list|>
name|collector
parameter_list|,
name|Iterable
argument_list|<
name|T
argument_list|>
name|inputs
parameter_list|)
block|{
name|A
name|accum
init|=
name|collector
operator|.
name|supplier
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
for|for
control|(
name|T
name|input
range|:
name|inputs
control|)
block|{
name|collector
operator|.
name|accumulator
argument_list|()
operator|.
name|accept
argument_list|(
name|accum
argument_list|,
name|input
argument_list|)
expr_stmt|;
block|}
return|return
name|accum
return|;
block|}
block|}
block|,
comment|/**      * Get one accumulator for each element and merge the accumulators      * left-to-right.      */
DECL|enumConstant|MERGE_LEFT_ASSOCIATIVE
name|MERGE_LEFT_ASSOCIATIVE
block|{
annotation|@
name|Override
specifier|final
parameter_list|<
name|T
parameter_list|,
name|A
parameter_list|,
name|R
parameter_list|>
name|A
name|result
parameter_list|(
name|Collector
argument_list|<
name|T
argument_list|,
name|A
argument_list|,
name|R
argument_list|>
name|collector
parameter_list|,
name|Iterable
argument_list|<
name|T
argument_list|>
name|inputs
parameter_list|)
block|{
name|A
name|accum
init|=
name|collector
operator|.
name|supplier
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
for|for
control|(
name|T
name|input
range|:
name|inputs
control|)
block|{
name|A
name|newAccum
init|=
name|collector
operator|.
name|supplier
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
name|collector
operator|.
name|accumulator
argument_list|()
operator|.
name|accept
argument_list|(
name|newAccum
argument_list|,
name|input
argument_list|)
expr_stmt|;
name|accum
operator|=
name|collector
operator|.
name|combiner
argument_list|()
operator|.
name|apply
argument_list|(
name|accum
argument_list|,
name|newAccum
argument_list|)
expr_stmt|;
block|}
return|return
name|accum
return|;
block|}
block|}
block|,
comment|/**      * Get one accumulator for each element and merge the accumulators      * right-to-left.      */
DECL|enumConstant|MERGE_RIGHT_ASSOCIATIVE
name|MERGE_RIGHT_ASSOCIATIVE
block|{
annotation|@
name|Override
specifier|final
parameter_list|<
name|T
parameter_list|,
name|A
parameter_list|,
name|R
parameter_list|>
name|A
name|result
parameter_list|(
name|Collector
argument_list|<
name|T
argument_list|,
name|A
argument_list|,
name|R
argument_list|>
name|collector
parameter_list|,
name|Iterable
argument_list|<
name|T
argument_list|>
name|inputs
parameter_list|)
block|{
name|List
argument_list|<
name|A
argument_list|>
name|stack
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|T
name|input
range|:
name|inputs
control|)
block|{
name|A
name|newAccum
init|=
name|collector
operator|.
name|supplier
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
name|collector
operator|.
name|accumulator
argument_list|()
operator|.
name|accept
argument_list|(
name|newAccum
argument_list|,
name|input
argument_list|)
expr_stmt|;
name|push
argument_list|(
name|stack
argument_list|,
name|newAccum
argument_list|)
expr_stmt|;
block|}
name|push
argument_list|(
name|stack
argument_list|,
name|collector
operator|.
name|supplier
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
while|while
condition|(
name|stack
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
name|A
name|right
init|=
name|pop
argument_list|(
name|stack
argument_list|)
decl_stmt|;
name|A
name|left
init|=
name|pop
argument_list|(
name|stack
argument_list|)
decl_stmt|;
name|push
argument_list|(
name|stack
argument_list|,
name|collector
operator|.
name|combiner
argument_list|()
operator|.
name|apply
argument_list|(
name|left
argument_list|,
name|right
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|pop
argument_list|(
name|stack
argument_list|)
return|;
block|}
parameter_list|<
name|E
parameter_list|>
name|void
name|push
parameter_list|(
name|List
argument_list|<
name|E
argument_list|>
name|stack
parameter_list|,
name|E
name|value
parameter_list|)
block|{
name|stack
operator|.
name|add
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
parameter_list|<
name|E
parameter_list|>
name|E
name|pop
parameter_list|(
name|List
argument_list|<
name|E
argument_list|>
name|stack
parameter_list|)
block|{
return|return
name|stack
operator|.
name|remove
argument_list|(
name|stack
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
return|;
block|}
block|}
block|;
DECL|method|result (Collector<T, A, R> collector, Iterable<T> inputs)
specifier|abstract
parameter_list|<
name|T
parameter_list|,
name|A
parameter_list|,
name|R
parameter_list|>
name|A
name|result
parameter_list|(
name|Collector
argument_list|<
name|T
argument_list|,
name|A
argument_list|,
name|R
argument_list|>
name|collector
parameter_list|,
name|Iterable
argument_list|<
name|T
argument_list|>
name|inputs
parameter_list|)
function_decl|;
block|}
comment|/**    * Verifies that the specified expected result is always produced by collecting the    * specified inputs, regardless of how the elements are divided.    */
annotation|@
name|SafeVarargs
DECL|method|expectCollects (@ullable R expectedResult, T... inputs)
specifier|public
specifier|final
name|CollectorTester
argument_list|<
name|T
argument_list|,
name|A
argument_list|,
name|R
argument_list|>
name|expectCollects
parameter_list|(
annotation|@
name|Nullable
name|R
name|expectedResult
parameter_list|,
name|T
modifier|...
name|inputs
parameter_list|)
block|{
name|List
argument_list|<
name|T
argument_list|>
name|list
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|inputs
argument_list|)
decl_stmt|;
name|doExpectCollects
argument_list|(
name|expectedResult
argument_list|,
name|list
argument_list|)
expr_stmt|;
if|if
condition|(
name|collector
operator|.
name|characteristics
argument_list|()
operator|.
name|contains
argument_list|(
name|Collector
operator|.
name|Characteristics
operator|.
name|UNORDERED
argument_list|)
condition|)
block|{
name|Collections
operator|.
name|reverse
argument_list|(
name|list
argument_list|)
expr_stmt|;
name|doExpectCollects
argument_list|(
name|expectedResult
argument_list|,
name|list
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
DECL|method|doExpectCollects (@ullable R expectedResult, List<T> inputs)
specifier|private
name|void
name|doExpectCollects
parameter_list|(
annotation|@
name|Nullable
name|R
name|expectedResult
parameter_list|,
name|List
argument_list|<
name|T
argument_list|>
name|inputs
parameter_list|)
block|{
for|for
control|(
name|CollectStrategy
name|scheme
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|CollectStrategy
operator|.
name|class
argument_list|)
control|)
block|{
name|A
name|finalAccum
init|=
name|scheme
operator|.
name|result
argument_list|(
name|collector
argument_list|,
name|inputs
argument_list|)
decl_stmt|;
if|if
condition|(
name|collector
operator|.
name|characteristics
argument_list|()
operator|.
name|contains
argument_list|(
name|Collector
operator|.
name|Characteristics
operator|.
name|IDENTITY_FINISH
argument_list|)
condition|)
block|{
name|assertEquivalent
argument_list|(
name|expectedResult
argument_list|,
operator|(
name|R
operator|)
name|finalAccum
argument_list|)
expr_stmt|;
block|}
name|assertEquivalent
argument_list|(
name|expectedResult
argument_list|,
name|collector
operator|.
name|finisher
argument_list|()
operator|.
name|apply
argument_list|(
name|finalAccum
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|assertEquivalent (@ullable R expected, @Nullable R actual)
specifier|private
name|void
name|assertEquivalent
parameter_list|(
annotation|@
name|Nullable
name|R
name|expected
parameter_list|,
annotation|@
name|Nullable
name|R
name|actual
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|"Expected "
operator|+
name|expected
operator|+
literal|" got "
operator|+
name|actual
operator|+
literal|" modulo equivalence "
operator|+
name|equivalence
argument_list|,
name|equivalence
operator|.
name|test
argument_list|(
name|expected
argument_list|,
name|actual
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

