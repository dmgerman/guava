begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2012 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.testing
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|testing
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|CharMatcher
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Charsets
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Equivalence
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Joiner
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Splitter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Throwables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Ticker
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ArrayListMultimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ListMultimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Ordering
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|primitives
operator|.
name|Primitives
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|primitives
operator|.
name|UnsignedInteger
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|primitives
operator|.
name|UnsignedLong
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|reflect
operator|.
name|AbstractInvocationHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|reflect
operator|.
name|Reflection
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|reflect
operator|.
name|TypeToken
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|annotation
operator|.
name|ElementType
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|annotation
operator|.
name|Retention
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|annotation
operator|.
name|RetentionPolicy
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|annotation
operator|.
name|Target
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationTargetException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigDecimal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|CharBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|DoubleBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|FloatBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|IntBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|LongBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ShortBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Currency
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_comment
comment|/**  * Generates fresh instances of types that are different from each other (if possible).  *  * @author Ben Yu  */
end_comment

begin_class
DECL|class|FreshValueGenerator
class|class
name|FreshValueGenerator
block|{
DECL|field|differentiator
specifier|private
specifier|final
name|AtomicInteger
name|differentiator
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|1
argument_list|)
decl_stmt|;
DECL|field|sampleInstances
specifier|private
specifier|final
name|ListMultimap
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|,
name|Object
argument_list|>
name|sampleInstances
init|=
name|ArrayListMultimap
operator|.
name|create
argument_list|()
decl_stmt|;
DECL|method|addSampleInstances (Class<T> type, Iterable<? extends T> instances)
parameter_list|<
name|T
parameter_list|>
name|void
name|addSampleInstances
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|,
name|Iterable
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|instances
parameter_list|)
block|{
name|sampleInstances
operator|.
name|putAll
argument_list|(
name|checkNotNull
argument_list|(
name|type
argument_list|)
argument_list|,
name|checkNotNull
argument_list|(
name|instances
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|generate (Class<T> type)
specifier|final
parameter_list|<
name|T
parameter_list|>
name|T
name|generate
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|)
block|{
name|List
argument_list|<
name|Object
argument_list|>
name|samples
init|=
name|sampleInstances
operator|.
name|get
argument_list|(
name|type
argument_list|)
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// sampleInstances is always registered by type.
name|T
name|sample
init|=
operator|(
name|T
operator|)
name|nextInstance
argument_list|(
name|samples
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|sample
operator|!=
literal|null
condition|)
block|{
return|return
name|sample
return|;
block|}
for|for
control|(
name|Method
name|method
range|:
name|FreshValueGenerator
operator|.
name|class
operator|.
name|getDeclaredMethods
argument_list|()
control|)
block|{
if|if
condition|(
name|method
operator|.
name|isAnnotationPresent
argument_list|(
name|Generates
operator|.
name|class
argument_list|)
condition|)
block|{
if|if
condition|(
name|Primitives
operator|.
name|wrap
argument_list|(
name|type
argument_list|)
operator|.
name|isAssignableFrom
argument_list|(
name|Primitives
operator|.
name|wrap
argument_list|(
name|method
operator|.
name|getReturnType
argument_list|()
argument_list|)
argument_list|)
condition|)
block|{
try|try
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// protected by isAssignableFrom
name|T
name|result
init|=
operator|(
name|T
operator|)
name|method
operator|.
name|invoke
argument_list|(
name|this
argument_list|)
decl_stmt|;
return|return
name|result
return|;
block|}
catch|catch
parameter_list|(
name|InvocationTargetException
name|e
parameter_list|)
block|{
name|Throwables
operator|.
name|propagate
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
name|Throwables
operator|.
name|propagate
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
block|}
if|if
condition|(
name|type
operator|.
name|isInterface
argument_list|()
condition|)
block|{
comment|// always create a new proxy
return|return
name|newProxy
argument_list|(
name|type
argument_list|)
return|;
block|}
if|if
condition|(
name|type
operator|.
name|isEnum
argument_list|()
condition|)
block|{
return|return
name|nextInstance
argument_list|(
name|type
operator|.
name|getEnumConstants
argument_list|()
argument_list|,
literal|null
argument_list|)
return|;
block|}
return|return
name|ArbitraryInstances
operator|.
name|get
argument_list|(
name|type
argument_list|)
return|;
block|}
DECL|method|nextInstance (T[] instances, T defaultValue)
specifier|private
parameter_list|<
name|T
parameter_list|>
name|T
name|nextInstance
parameter_list|(
name|T
index|[]
name|instances
parameter_list|,
name|T
name|defaultValue
parameter_list|)
block|{
return|return
name|nextInstance
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|instances
argument_list|)
argument_list|,
name|defaultValue
argument_list|)
return|;
block|}
DECL|method|nextInstance (Collection<T> instances, T defaultValue)
specifier|private
parameter_list|<
name|T
parameter_list|>
name|T
name|nextInstance
parameter_list|(
name|Collection
argument_list|<
name|T
argument_list|>
name|instances
parameter_list|,
name|T
name|defaultValue
parameter_list|)
block|{
if|if
condition|(
name|instances
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|defaultValue
return|;
block|}
comment|// freshInt() is 1-based.
return|return
name|Iterables
operator|.
name|get
argument_list|(
name|instances
argument_list|,
operator|(
name|freshInt
argument_list|()
operator|-
literal|1
operator|)
operator|%
name|instances
operator|.
name|size
argument_list|()
argument_list|)
return|;
block|}
DECL|method|newProxy (final Class<T> interfaceType)
specifier|final
parameter_list|<
name|T
parameter_list|>
name|T
name|newProxy
parameter_list|(
specifier|final
name|Class
argument_list|<
name|T
argument_list|>
name|interfaceType
parameter_list|)
block|{
specifier|final
name|int
name|identity
init|=
name|freshInt
argument_list|()
decl_stmt|;
return|return
name|Reflection
operator|.
name|newProxy
argument_list|(
name|interfaceType
argument_list|,
operator|new
name|AbstractInvocationHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|Object
name|handleInvocation
parameter_list|(
name|Object
name|proxy
parameter_list|,
name|Method
name|method
parameter_list|,
name|Object
index|[]
name|args
parameter_list|)
block|{
return|return
name|interfaceMethodCalled
argument_list|(
name|interfaceType
argument_list|,
name|method
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|paramString
argument_list|(
name|interfaceType
argument_list|,
name|identity
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
comment|/** Subclasses can override to provide different return value for proxied interface methods. */
DECL|method|interfaceMethodCalled ( @uppressWarningsR) Class<?> interfaceType, @SuppressWarnings(R) Method method)
name|Object
name|interfaceMethodCalled
parameter_list|(
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
name|Class
argument_list|<
name|?
argument_list|>
name|interfaceType
parameter_list|,
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
name|Method
name|method
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
DECL|method|paramString (Class<?> type, int i)
specifier|private
specifier|static
name|String
name|paramString
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|type
parameter_list|,
name|int
name|i
parameter_list|)
block|{
return|return
name|type
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|'@'
operator|+
name|i
return|;
block|}
comment|/** Annotates a method to be the instance supplier of a certain type. */
annotation|@
name|Target
argument_list|(
name|ElementType
operator|.
name|METHOD
argument_list|)
annotation|@
name|Retention
argument_list|(
name|RetentionPolicy
operator|.
name|RUNTIME
argument_list|)
DECL|annotation|Generates
specifier|private
annotation_defn|@interface
name|Generates
block|{}
DECL|method|freshClass ()
annotation|@
name|Generates
specifier|private
name|Class
argument_list|<
name|?
argument_list|>
name|freshClass
parameter_list|()
block|{
return|return
name|nextInstance
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
name|int
operator|.
name|class
argument_list|,
name|long
operator|.
name|class
argument_list|,
name|void
operator|.
name|class
argument_list|,
name|Object
operator|.
name|class
argument_list|,
name|Object
index|[]
operator|.
expr|class
argument_list|,
name|Iterable
operator|.
name|class
argument_list|)
argument_list|,
name|Object
operator|.
name|class
argument_list|)
return|;
block|}
DECL|method|freshInt ()
annotation|@
name|Generates
specifier|private
name|int
name|freshInt
parameter_list|()
block|{
return|return
name|differentiator
operator|.
name|getAndIncrement
argument_list|()
return|;
block|}
DECL|method|freshLong ()
annotation|@
name|Generates
specifier|private
name|long
name|freshLong
parameter_list|()
block|{
return|return
name|freshInt
argument_list|()
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
DECL|method|freshFloat ()
annotation|@
name|Generates
specifier|private
name|float
name|freshFloat
parameter_list|()
block|{
return|return
name|freshInt
argument_list|()
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
DECL|method|freshDouble ()
annotation|@
name|Generates
specifier|private
name|double
name|freshDouble
parameter_list|()
block|{
return|return
name|freshInt
argument_list|()
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
DECL|method|freshShort ()
annotation|@
name|Generates
specifier|private
name|short
name|freshShort
parameter_list|()
block|{
return|return
operator|(
name|short
operator|)
name|freshInt
argument_list|()
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
DECL|method|freshByte ()
annotation|@
name|Generates
specifier|private
name|byte
name|freshByte
parameter_list|()
block|{
return|return
operator|(
name|byte
operator|)
name|freshInt
argument_list|()
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
DECL|method|freshChar ()
annotation|@
name|Generates
specifier|private
name|char
name|freshChar
parameter_list|()
block|{
return|return
name|freshString
argument_list|()
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
DECL|method|freshBoolean ()
annotation|@
name|Generates
specifier|private
name|boolean
name|freshBoolean
parameter_list|()
block|{
return|return
name|freshInt
argument_list|()
operator|%
literal|2
operator|==
literal|0
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
DECL|method|freshUnsignedInteger ()
annotation|@
name|Generates
specifier|private
name|UnsignedInteger
name|freshUnsignedInteger
parameter_list|()
block|{
return|return
name|UnsignedInteger
operator|.
name|asUnsigned
argument_list|(
name|freshInt
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
DECL|method|freshUnsignedLong ()
annotation|@
name|Generates
specifier|private
name|UnsignedLong
name|freshUnsignedLong
parameter_list|()
block|{
return|return
name|UnsignedLong
operator|.
name|asUnsigned
argument_list|(
name|freshLong
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
DECL|method|freshBigInteger ()
annotation|@
name|Generates
specifier|private
name|BigInteger
name|freshBigInteger
parameter_list|()
block|{
return|return
name|BigInteger
operator|.
name|valueOf
argument_list|(
name|freshInt
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
DECL|method|freshBigDecimal ()
annotation|@
name|Generates
specifier|private
name|BigDecimal
name|freshBigDecimal
parameter_list|()
block|{
return|return
name|BigDecimal
operator|.
name|valueOf
argument_list|(
name|freshInt
argument_list|()
argument_list|)
return|;
block|}
DECL|method|freshString ()
annotation|@
name|Generates
specifier|private
name|String
name|freshString
parameter_list|()
block|{
return|return
name|Integer
operator|.
name|toString
argument_list|(
name|freshInt
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
DECL|method|freshPattern ()
annotation|@
name|Generates
specifier|private
name|Pattern
name|freshPattern
parameter_list|()
block|{
return|return
name|Pattern
operator|.
name|compile
argument_list|(
name|freshString
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
DECL|method|freshCharset ()
annotation|@
name|Generates
specifier|private
name|Charset
name|freshCharset
parameter_list|()
block|{
return|return
name|nextInstance
argument_list|(
name|Charset
operator|.
name|availableCharsets
argument_list|()
operator|.
name|values
argument_list|()
argument_list|,
name|Charsets
operator|.
name|UTF_8
argument_list|)
return|;
block|}
DECL|method|freshLocale ()
annotation|@
name|Generates
specifier|private
name|Locale
name|freshLocale
parameter_list|()
block|{
return|return
name|nextInstance
argument_list|(
name|Locale
operator|.
name|getAvailableLocales
argument_list|()
argument_list|,
name|Locale
operator|.
name|US
argument_list|)
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
DECL|method|freshCurrency ()
annotation|@
name|Generates
specifier|private
name|Currency
name|freshCurrency
parameter_list|()
block|{
for|for
control|(
name|Set
argument_list|<
name|Locale
argument_list|>
name|uselessLocales
init|=
name|Sets
operator|.
name|newHashSet
argument_list|()
init|;
condition|;
control|)
block|{
name|Locale
name|locale
init|=
name|freshLocale
argument_list|()
decl_stmt|;
if|if
condition|(
name|uselessLocales
operator|.
name|contains
argument_list|(
name|locale
argument_list|)
condition|)
block|{
comment|// exhausted all locales
return|return
name|Currency
operator|.
name|getInstance
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
return|;
block|}
try|try
block|{
return|return
name|Currency
operator|.
name|getInstance
argument_list|(
name|locale
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|uselessLocales
operator|.
name|add
argument_list|(
name|locale
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// common.base
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
DECL|method|freshJoiner ()
annotation|@
name|Generates
specifier|private
name|Joiner
name|freshJoiner
parameter_list|()
block|{
return|return
name|Joiner
operator|.
name|on
argument_list|(
name|freshString
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
DECL|method|freshSplitter ()
annotation|@
name|Generates
specifier|private
name|Splitter
name|freshSplitter
parameter_list|()
block|{
return|return
name|Splitter
operator|.
name|on
argument_list|(
name|freshString
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
DECL|method|freshEquivalence ()
annotation|@
name|Generates
specifier|private
parameter_list|<
name|T
parameter_list|>
name|Equivalence
argument_list|<
name|T
argument_list|>
name|freshEquivalence
parameter_list|()
block|{
return|return
operator|new
name|Equivalence
argument_list|<
name|T
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|boolean
name|doEquivalent
parameter_list|(
name|T
name|a
parameter_list|,
name|T
name|b
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|protected
name|int
name|doHash
parameter_list|(
name|T
name|t
parameter_list|)
block|{
return|return
literal|0
return|;
block|}
specifier|final
name|String
name|string
init|=
name|paramString
argument_list|(
name|Equivalence
operator|.
name|class
argument_list|,
name|freshInt
argument_list|()
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|string
return|;
block|}
block|}
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
DECL|method|freshCharMatcher ()
annotation|@
name|Generates
specifier|private
name|CharMatcher
name|freshCharMatcher
parameter_list|()
block|{
return|return
operator|new
name|CharMatcher
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|matches
parameter_list|(
name|char
name|c
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
specifier|final
name|String
name|string
init|=
name|paramString
argument_list|(
name|CharMatcher
operator|.
name|class
argument_list|,
name|freshInt
argument_list|()
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|string
return|;
block|}
block|}
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
DECL|method|freshTicker ()
annotation|@
name|Generates
specifier|private
name|Ticker
name|freshTicker
parameter_list|()
block|{
return|return
operator|new
name|Ticker
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|long
name|read
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|final
name|String
name|string
init|=
name|paramString
argument_list|(
name|Ticker
operator|.
name|class
argument_list|,
name|freshInt
argument_list|()
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|string
return|;
block|}
block|}
return|;
block|}
comment|// common.collect
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
DECL|method|freshOrdering ()
annotation|@
name|Generates
specifier|private
parameter_list|<
name|T
parameter_list|>
name|Ordering
argument_list|<
name|T
argument_list|>
name|freshOrdering
parameter_list|()
block|{
return|return
operator|new
name|Ordering
argument_list|<
name|T
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|T
name|left
parameter_list|,
name|T
name|right
parameter_list|)
block|{
return|return
literal|0
return|;
block|}
specifier|final
name|String
name|string
init|=
name|paramString
argument_list|(
name|Ordering
operator|.
name|class
argument_list|,
name|freshInt
argument_list|()
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|string
return|;
block|}
block|}
return|;
block|}
comment|// common.reflect
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
DECL|method|freshTypeToken ()
annotation|@
name|Generates
specifier|private
name|TypeToken
argument_list|<
name|?
argument_list|>
name|freshTypeToken
parameter_list|()
block|{
return|return
name|TypeToken
operator|.
name|of
argument_list|(
name|freshClass
argument_list|()
argument_list|)
return|;
block|}
comment|// io types
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
DECL|method|freshFile ()
annotation|@
name|Generates
specifier|private
name|File
name|freshFile
parameter_list|()
block|{
return|return
operator|new
name|File
argument_list|(
name|freshString
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
DECL|method|freshInputStream ()
annotation|@
name|Generates
specifier|private
specifier|static
name|ByteArrayInputStream
name|freshInputStream
parameter_list|()
block|{
return|return
operator|new
name|ByteArrayInputStream
argument_list|(
operator|new
name|byte
index|[
literal|0
index|]
argument_list|)
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
DECL|method|freshStringReader ()
annotation|@
name|Generates
specifier|private
name|StringReader
name|freshStringReader
parameter_list|()
block|{
return|return
operator|new
name|StringReader
argument_list|(
name|freshString
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
DECL|method|freshCharBuffer ()
annotation|@
name|Generates
specifier|private
name|CharBuffer
name|freshCharBuffer
parameter_list|()
block|{
return|return
name|CharBuffer
operator|.
name|allocate
argument_list|(
name|freshInt
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
DECL|method|freshByteBuffer ()
annotation|@
name|Generates
specifier|private
name|ByteBuffer
name|freshByteBuffer
parameter_list|()
block|{
return|return
name|ByteBuffer
operator|.
name|allocate
argument_list|(
name|freshInt
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
DECL|method|freshShortBuffer ()
annotation|@
name|Generates
specifier|private
name|ShortBuffer
name|freshShortBuffer
parameter_list|()
block|{
return|return
name|ShortBuffer
operator|.
name|allocate
argument_list|(
name|freshInt
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
DECL|method|freshIntBuffer ()
annotation|@
name|Generates
specifier|private
name|IntBuffer
name|freshIntBuffer
parameter_list|()
block|{
return|return
name|IntBuffer
operator|.
name|allocate
argument_list|(
name|freshInt
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
DECL|method|freshLongBuffer ()
annotation|@
name|Generates
specifier|private
name|LongBuffer
name|freshLongBuffer
parameter_list|()
block|{
return|return
name|LongBuffer
operator|.
name|allocate
argument_list|(
name|freshInt
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
DECL|method|freshFloatBuffer ()
annotation|@
name|Generates
specifier|private
name|FloatBuffer
name|freshFloatBuffer
parameter_list|()
block|{
return|return
name|FloatBuffer
operator|.
name|allocate
argument_list|(
name|freshInt
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
DECL|method|freshDoubleBuffer ()
annotation|@
name|Generates
specifier|private
name|DoubleBuffer
name|freshDoubleBuffer
parameter_list|()
block|{
return|return
name|DoubleBuffer
operator|.
name|allocate
argument_list|(
name|freshInt
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

