begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2012 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.testing
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|testing
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|testing
operator|.
name|AbstractPackageSanityTests
operator|.
name|Chopper
operator|.
name|suffix
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|Beta
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ComparisonChain
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|HashMultimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Multimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|MutableClassToInstanceMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Ordering
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|reflect
operator|.
name|ClassPath
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|reflect
operator|.
name|Invokable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|reflect
operator|.
name|Parameter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|reflect
operator|.
name|TypeToken
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|AssertionFailedError
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Constructor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationTargetException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Modifier
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_comment
comment|/**  * Automatically runs sanity checks for the entire package of the subclass. Currently sanity checks  * include {@link NullPointerTester} and {@link SerializableTester}. For example:  *<pre>  * {@literal @MediumTest}(MediumTestAttributes.FILE)  * public class PackageSanityTests extends AbstractPackageSanityTests {}  *</pre>  *  *<p>If a certain type Foo's null check testing requires default value to be manually set, or that  * it needs custom code to instantiate an instance for testing instance methods, add a {@code  * public void testNulls()} method to FooTest and Foo will be ignored by the automated {@link  * #testNulls} test.  *  *<p>Since this class scans the classpath and reads classpath resources, the test is essentially  * a {@code MediumTest}.  *  * @author Ben Yu  * @since 14.0  */
end_comment

begin_class
annotation|@
name|Beta
comment|// TODO: Switch to JUnit 4 and use @Parameterized and @BeforeClass
DECL|class|AbstractPackageSanityTests
specifier|public
specifier|abstract
class|class
name|AbstractPackageSanityTests
extends|extends
name|TestCase
block|{
comment|/* The names of the expected method that tests null checks. */
DECL|field|NULL_TEST_METHOD_NAMES
specifier|private
specifier|static
specifier|final
name|ImmutableList
argument_list|<
name|String
argument_list|>
name|NULL_TEST_METHOD_NAMES
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"testNulls"
argument_list|,
literal|"testNull"
argument_list|,
literal|"testNullPointer"
argument_list|,
literal|"testNullPointerException"
argument_list|)
decl_stmt|;
comment|/* The names of the expected method that tests serializable. */
DECL|field|SERIALIZABLE_TEST_METHOD_NAMES
specifier|private
specifier|static
specifier|final
name|ImmutableList
argument_list|<
name|String
argument_list|>
name|SERIALIZABLE_TEST_METHOD_NAMES
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"testSerializable"
argument_list|,
literal|"testSerialization"
argument_list|)
decl_stmt|;
DECL|field|TEST_SUFFIX
specifier|private
specifier|static
specifier|final
name|Chopper
name|TEST_SUFFIX
init|=
name|suffix
argument_list|(
literal|"Test"
argument_list|)
operator|.
name|or
argument_list|(
name|suffix
argument_list|(
literal|"Tests"
argument_list|)
argument_list|)
operator|.
name|or
argument_list|(
name|suffix
argument_list|(
literal|"TestCase"
argument_list|)
argument_list|)
operator|.
name|or
argument_list|(
name|suffix
argument_list|(
literal|"TestSuite"
argument_list|)
argument_list|)
decl_stmt|;
comment|/**    * Sorts methods/constructors with least number of parameters first since it's likely easier to    * fill dummy parameter values for them. Ties are broken by name then by the string form of the    * parameter list.    */
DECL|field|LEAST_PARAMETERS_FIRST
specifier|private
specifier|static
specifier|final
name|Ordering
argument_list|<
name|Invokable
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
argument_list|>
name|LEAST_PARAMETERS_FIRST
init|=
operator|new
name|Ordering
argument_list|<
name|Invokable
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|Invokable
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|left
parameter_list|,
name|Invokable
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|right
parameter_list|)
block|{
name|List
argument_list|<
name|Parameter
argument_list|>
name|params1
init|=
name|left
operator|.
name|getParameters
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Parameter
argument_list|>
name|params2
init|=
name|right
operator|.
name|getParameters
argument_list|()
decl_stmt|;
return|return
name|ComparisonChain
operator|.
name|start
argument_list|()
operator|.
name|compare
argument_list|(
name|params1
operator|.
name|size
argument_list|()
argument_list|,
name|params2
operator|.
name|size
argument_list|()
argument_list|)
operator|.
name|compare
argument_list|(
name|left
operator|.
name|getName
argument_list|()
argument_list|,
name|right
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|compare
argument_list|(
name|params1
argument_list|,
name|params2
argument_list|,
name|Ordering
operator|.
name|usingToString
argument_list|()
argument_list|)
operator|.
name|result
argument_list|()
return|;
block|}
block|}
empty_stmt|;
DECL|field|logger
specifier|private
specifier|final
name|Logger
name|logger
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|defaultValues
specifier|private
specifier|final
name|MutableClassToInstanceMap
argument_list|<
name|Object
argument_list|>
name|defaultValues
init|=
name|MutableClassToInstanceMap
operator|.
name|create
argument_list|()
decl_stmt|;
DECL|field|nullPointerTester
specifier|private
specifier|final
name|NullPointerTester
name|nullPointerTester
init|=
operator|new
name|NullPointerTester
argument_list|()
decl_stmt|;
DECL|method|AbstractPackageSanityTests ()
specifier|public
name|AbstractPackageSanityTests
parameter_list|()
block|{
comment|// TODO(benyu): bake these into ArbitraryInstances.
name|setDefault
argument_list|(
name|byte
operator|.
name|class
argument_list|,
operator|(
name|byte
operator|)
literal|1
argument_list|)
expr_stmt|;
name|setDefault
argument_list|(
name|Byte
operator|.
name|class
argument_list|,
operator|(
name|byte
operator|)
literal|1
argument_list|)
expr_stmt|;
name|setDefault
argument_list|(
name|short
operator|.
name|class
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
expr_stmt|;
name|setDefault
argument_list|(
name|Short
operator|.
name|class
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
expr_stmt|;
name|setDefault
argument_list|(
name|int
operator|.
name|class
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|setDefault
argument_list|(
name|Integer
operator|.
name|class
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|setDefault
argument_list|(
name|long
operator|.
name|class
argument_list|,
literal|1L
argument_list|)
expr_stmt|;
name|setDefault
argument_list|(
name|Long
operator|.
name|class
argument_list|,
literal|1L
argument_list|)
expr_stmt|;
name|setDefault
argument_list|(
name|float
operator|.
name|class
argument_list|,
literal|1F
argument_list|)
expr_stmt|;
name|setDefault
argument_list|(
name|Float
operator|.
name|class
argument_list|,
literal|1F
argument_list|)
expr_stmt|;
name|setDefault
argument_list|(
name|double
operator|.
name|class
argument_list|,
literal|1D
argument_list|)
expr_stmt|;
name|setDefault
argument_list|(
name|Double
operator|.
name|class
argument_list|,
literal|1D
argument_list|)
expr_stmt|;
block|}
comment|/** Tests all {@link Serializable} classes in the package. */
annotation|@
name|Test
DECL|method|testSerializable ()
specifier|public
name|void
name|testSerializable
parameter_list|()
throws|throws
name|Exception
block|{
comment|// TODO: when we use @BeforeClass, we can pay the cost of class path scanning only once.
for|for
control|(
name|Class
argument_list|<
name|?
argument_list|>
name|classToTest
range|:
name|findClassesToTest
argument_list|(
name|loadPublicClassesInPackage
argument_list|()
argument_list|,
name|SERIALIZABLE_TEST_METHOD_NAMES
argument_list|)
control|)
block|{
if|if
condition|(
name|Serializable
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|classToTest
argument_list|)
condition|)
block|{
name|testSerializable
argument_list|(
name|classToTest
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/** Tests null checks through the entire package. */
annotation|@
name|Test
DECL|method|testNulls ()
specifier|public
name|void
name|testNulls
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|Class
argument_list|<
name|?
argument_list|>
name|classToTest
range|:
name|findClassesToTest
argument_list|(
name|loadPublicClassesInPackage
argument_list|()
argument_list|,
name|NULL_TEST_METHOD_NAMES
argument_list|)
control|)
block|{
name|testNulls
argument_list|(
name|classToTest
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Sets the default value for {@code type}, when dummy value for a parameter of the same type    * needs to be created in order to invoke a method or constructor.    */
DECL|method|setDefault (Class<T> type, T value)
specifier|protected
specifier|final
parameter_list|<
name|T
parameter_list|>
name|void
name|setDefault
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|,
name|T
name|value
parameter_list|)
block|{
name|nullPointerTester
operator|.
name|setDefault
argument_list|(
name|type
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|defaultValues
operator|.
name|putInstance
argument_list|(
name|type
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
DECL|method|testNulls (Class<?> cls)
specifier|private
name|void
name|testNulls
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|cls
parameter_list|)
throws|throws
name|Exception
block|{
name|nullPointerTester
operator|.
name|testAllPublicConstructors
argument_list|(
name|cls
argument_list|)
expr_stmt|;
name|nullPointerTester
operator|.
name|testAllPublicStaticMethods
argument_list|(
name|cls
argument_list|)
expr_stmt|;
name|Object
name|instance
init|=
name|instantiate
argument_list|(
name|cls
argument_list|,
name|TestErrorReporter
operator|.
name|FOR_NULLS_TEST
argument_list|)
decl_stmt|;
if|if
condition|(
name|instance
operator|!=
literal|null
condition|)
block|{
name|nullPointerTester
operator|.
name|testAllPublicInstanceMethods
argument_list|(
name|instance
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testSerializable (Class<?> cls)
specifier|private
name|void
name|testSerializable
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|cls
parameter_list|)
throws|throws
name|Exception
block|{
name|Object
name|instance
init|=
name|instantiate
argument_list|(
name|cls
argument_list|,
name|TestErrorReporter
operator|.
name|FOR_SERIALIZABLE_TEST
argument_list|)
decl_stmt|;
if|if
condition|(
name|instance
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|isEqualsDefined
argument_list|(
name|cls
argument_list|)
condition|)
block|{
name|SerializableTester
operator|.
name|reserializeAndAssert
argument_list|(
name|instance
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|SerializableTester
operator|.
name|reserialize
argument_list|(
name|instance
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Finds the classes not ending with a test suffix and not covered by an explicit test    * whose name is {@code explicitTestName}.    */
DECL|method|findClassesToTest ( Iterable<? extends Class<?>> classes, Iterable<String> explicitTestNames)
annotation|@
name|VisibleForTesting
specifier|static
name|List
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|findClassesToTest
parameter_list|(
name|Iterable
argument_list|<
name|?
extends|extends
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|classes
parameter_list|,
name|Iterable
argument_list|<
name|String
argument_list|>
name|explicitTestNames
parameter_list|)
block|{
comment|// "a.b.Foo" -> a.b.Foo.class
name|TreeMap
argument_list|<
name|String
argument_list|,
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|classMap
init|=
name|Maps
operator|.
name|newTreeMap
argument_list|()
decl_stmt|;
for|for
control|(
name|Class
argument_list|<
name|?
argument_list|>
name|cls
range|:
name|classes
control|)
block|{
name|classMap
operator|.
name|put
argument_list|(
name|cls
operator|.
name|getName
argument_list|()
argument_list|,
name|cls
argument_list|)
expr_stmt|;
block|}
comment|// Foo.class -> [FooTest.class, FooTests.class, FooTestSuite.class, ...]
name|Multimap
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|,
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|testClasses
init|=
name|HashMultimap
operator|.
name|create
argument_list|()
decl_stmt|;
name|LinkedHashSet
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|nonTestClasses
init|=
name|Sets
operator|.
name|newLinkedHashSet
argument_list|()
decl_stmt|;
for|for
control|(
name|Class
argument_list|<
name|?
argument_list|>
name|cls
range|:
name|classes
control|)
block|{
name|Optional
argument_list|<
name|String
argument_list|>
name|testedClassName
init|=
name|TEST_SUFFIX
operator|.
name|chop
argument_list|(
name|cls
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|testedClassName
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|testedClass
init|=
name|classMap
operator|.
name|get
argument_list|(
name|testedClassName
operator|.
name|get
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|testedClass
operator|!=
literal|null
condition|)
block|{
name|testClasses
operator|.
name|put
argument_list|(
name|testedClass
argument_list|,
name|cls
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|nonTestClasses
operator|.
name|add
argument_list|(
name|cls
argument_list|)
expr_stmt|;
block|}
block|}
name|List
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|classesToTest
init|=
name|Lists
operator|.
name|newArrayListWithExpectedSize
argument_list|(
name|nonTestClasses
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|NEXT_CANDIDATE
label|:
for|for
control|(
name|Class
argument_list|<
name|?
argument_list|>
name|cls
range|:
name|nonTestClasses
control|)
block|{
for|for
control|(
name|Class
argument_list|<
name|?
argument_list|>
name|testClass
range|:
name|testClasses
operator|.
name|get
argument_list|(
name|cls
argument_list|)
control|)
block|{
if|if
condition|(
name|hasTest
argument_list|(
name|testClass
argument_list|,
name|explicitTestNames
argument_list|)
condition|)
block|{
comment|// covered by explicit test
continue|continue
name|NEXT_CANDIDATE
continue|;
block|}
block|}
name|classesToTest
operator|.
name|add
argument_list|(
name|cls
argument_list|)
expr_stmt|;
block|}
return|return
name|classesToTest
return|;
block|}
comment|/** Returns null if no instance can be created. */
DECL|method|instantiate (Class<?> cls, TestErrorReporter errorReporter)
annotation|@
name|Nullable
specifier|private
name|Object
name|instantiate
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|cls
parameter_list|,
name|TestErrorReporter
name|errorReporter
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|cls
operator|.
name|isEnum
argument_list|()
condition|)
block|{
name|Object
index|[]
name|constants
init|=
name|cls
operator|.
name|getEnumConstants
argument_list|()
decl_stmt|;
if|if
condition|(
name|constants
operator|.
name|length
operator|>
literal|0
condition|)
block|{
return|return
name|constants
index|[
literal|0
index|]
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
name|TypeToken
argument_list|<
name|?
argument_list|>
name|type
init|=
name|TypeToken
operator|.
name|of
argument_list|(
name|cls
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|AssertionFailedError
argument_list|>
name|errors
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|InvocationTargetException
argument_list|>
name|instantiationExceptions
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|Invokable
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|factory
range|:
name|getFactories
argument_list|(
name|type
argument_list|)
control|)
block|{
name|List
argument_list|<
name|Object
argument_list|>
name|args
decl_stmt|;
try|try
block|{
name|args
operator|=
name|getDummyArguments
argument_list|(
name|factory
argument_list|,
name|errorReporter
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AssertionFailedError
name|e
parameter_list|)
block|{
name|errors
operator|.
name|add
argument_list|(
name|e
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|Object
name|instance
decl_stmt|;
try|try
block|{
name|instance
operator|=
name|factory
operator|.
name|invoke
argument_list|(
literal|null
argument_list|,
name|args
operator|.
name|toArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvocationTargetException
name|e
parameter_list|)
block|{
name|instantiationExceptions
operator|.
name|add
argument_list|(
name|e
argument_list|)
expr_stmt|;
continue|continue;
block|}
try|try
block|{
name|assertNotNull
argument_list|(
name|factory
operator|+
literal|" returns null and cannot be used to test instance methods."
argument_list|,
name|instance
argument_list|)
expr_stmt|;
return|return
name|instance
return|;
block|}
catch|catch
parameter_list|(
name|AssertionFailedError
name|e
parameter_list|)
block|{
name|errors
operator|.
name|add
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|errors
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
name|errors
operator|.
name|get
argument_list|(
literal|0
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|instantiationExceptions
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
name|instantiationExceptions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
throw|;
block|}
return|return
literal|null
return|;
block|}
DECL|method|getFactories (TypeToken<?> type)
specifier|private
specifier|static
name|List
argument_list|<
name|Invokable
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
argument_list|>
name|getFactories
parameter_list|(
name|TypeToken
argument_list|<
name|?
argument_list|>
name|type
parameter_list|)
block|{
name|List
argument_list|<
name|Invokable
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
argument_list|>
name|invokables
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|Method
name|method
range|:
name|type
operator|.
name|getRawType
argument_list|()
operator|.
name|getMethods
argument_list|()
control|)
block|{
name|Invokable
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|invokable
init|=
name|type
operator|.
name|method
argument_list|(
name|method
argument_list|)
decl_stmt|;
if|if
condition|(
name|invokable
operator|.
name|isStatic
argument_list|()
operator|&&
name|type
operator|.
name|isAssignableFrom
argument_list|(
name|invokable
operator|.
name|getReturnType
argument_list|()
argument_list|)
condition|)
block|{
name|invokables
operator|.
name|add
argument_list|(
name|invokable
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|Modifier
operator|.
name|isAbstract
argument_list|(
name|type
operator|.
name|getRawType
argument_list|()
operator|.
name|getModifiers
argument_list|()
argument_list|)
condition|)
block|{
for|for
control|(
name|Constructor
argument_list|<
name|?
argument_list|>
name|constructor
range|:
name|type
operator|.
name|getRawType
argument_list|()
operator|.
name|getConstructors
argument_list|()
control|)
block|{
name|invokables
operator|.
name|add
argument_list|(
name|type
operator|.
name|constructor
argument_list|(
name|constructor
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|Collections
operator|.
name|sort
argument_list|(
name|invokables
argument_list|,
name|LEAST_PARAMETERS_FIRST
argument_list|)
expr_stmt|;
return|return
name|invokables
return|;
block|}
DECL|method|getDummyArguments ( Invokable<?, ?> invokable, TestErrorReporter errorReporter)
specifier|private
name|List
argument_list|<
name|Object
argument_list|>
name|getDummyArguments
parameter_list|(
name|Invokable
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|invokable
parameter_list|,
name|TestErrorReporter
name|errorReporter
parameter_list|)
block|{
name|List
argument_list|<
name|Object
argument_list|>
name|args
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|Parameter
name|param
range|:
name|invokable
operator|.
name|getParameters
argument_list|()
control|)
block|{
name|Object
name|defaultValue
init|=
name|getDummyValue
argument_list|(
name|param
operator|.
name|getType
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|errorReporter
operator|.
name|cannotDetermineParameterValue
argument_list|(
name|invokable
argument_list|,
name|param
argument_list|)
argument_list|,
name|defaultValue
operator|!=
literal|null
operator|||
name|param
operator|.
name|isAnnotationPresent
argument_list|(
name|Nullable
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|args
operator|.
name|add
argument_list|(
name|defaultValue
argument_list|)
expr_stmt|;
block|}
return|return
name|args
return|;
block|}
DECL|method|getDummyValue (TypeToken<T> type)
specifier|private
parameter_list|<
name|T
parameter_list|>
name|T
name|getDummyValue
parameter_list|(
name|TypeToken
argument_list|<
name|T
argument_list|>
name|type
parameter_list|)
block|{
name|Class
argument_list|<
name|?
super|super
name|T
argument_list|>
name|rawType
init|=
name|type
operator|.
name|getRawType
argument_list|()
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// Assume all default values are generics safe.
name|T
name|defaultValue
init|=
operator|(
name|T
operator|)
name|defaultValues
operator|.
name|getInstance
argument_list|(
name|rawType
argument_list|)
decl_stmt|;
if|if
condition|(
name|defaultValue
operator|!=
literal|null
condition|)
block|{
return|return
name|defaultValue
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// ArbitraryInstances always returns generics-safe dummies.
name|T
name|value
init|=
operator|(
name|T
operator|)
name|ArbitraryInstances
operator|.
name|get
argument_list|(
name|rawType
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
return|return
name|value
return|;
block|}
if|if
condition|(
name|rawType
operator|.
name|isInterface
argument_list|()
condition|)
block|{
return|return
operator|new
name|DummyProxy
argument_list|()
block|{
annotation|@
name|Override
argument_list|<
name|R
argument_list|>
name|R
name|dummyReturnValue
parameter_list|(
name|TypeToken
argument_list|<
name|R
argument_list|>
name|returnType
parameter_list|)
block|{
return|return
name|getDummyValue
argument_list|(
name|returnType
argument_list|)
return|;
block|}
block|}
operator|.
name|newProxy
argument_list|(
name|type
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
DECL|method|loadPublicClassesInPackage ()
specifier|private
name|List
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|loadPublicClassesInPackage
parameter_list|()
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|classes
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|String
name|packageName
init|=
name|getClass
argument_list|()
operator|.
name|getPackage
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
for|for
control|(
name|ClassPath
operator|.
name|ClassInfo
name|classInfo
range|:
name|ClassPath
operator|.
name|from
argument_list|(
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
argument_list|)
operator|.
name|getTopLevelClasses
argument_list|(
name|packageName
argument_list|)
control|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|cls
decl_stmt|;
try|try
block|{
name|cls
operator|=
name|classInfo
operator|.
name|load
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoClassDefFoundError
name|e
parameter_list|)
block|{
comment|// In case there were linking problems, this is probably not a class we care to test anyway.
name|logger
operator|.
name|log
argument_list|(
name|Level
operator|.
name|SEVERE
argument_list|,
literal|"Cannot load class "
operator|+
name|classInfo
operator|+
literal|", skipping..."
argument_list|,
name|e
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
operator|!
name|cls
operator|.
name|isInterface
argument_list|()
operator|&&
name|Modifier
operator|.
name|isPublic
argument_list|(
name|cls
operator|.
name|getModifiers
argument_list|()
argument_list|)
condition|)
block|{
name|classes
operator|.
name|add
argument_list|(
name|cls
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|classes
return|;
block|}
DECL|method|hasTest (Class<?> testClass, Iterable<String> testNames)
specifier|private
specifier|static
name|boolean
name|hasTest
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|testClass
parameter_list|,
name|Iterable
argument_list|<
name|String
argument_list|>
name|testNames
parameter_list|)
block|{
for|for
control|(
name|String
name|testName
range|:
name|testNames
control|)
block|{
try|try
block|{
name|testClass
operator|.
name|getMethod
argument_list|(
name|testName
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
name|e
parameter_list|)
block|{
continue|continue;
block|}
block|}
return|return
literal|false
return|;
block|}
DECL|method|isEqualsDefined (Class<?> cls)
specifier|private
specifier|static
name|boolean
name|isEqualsDefined
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|cls
parameter_list|)
block|{
try|try
block|{
name|cls
operator|.
name|getDeclaredMethod
argument_list|(
literal|"equals"
argument_list|,
name|Object
operator|.
name|class
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
name|e
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
block|}
DECL|enum|TestErrorReporter
specifier|private
enum|enum
name|TestErrorReporter
block|{
DECL|enumConstant|FOR_NULLS_TEST
name|FOR_NULLS_TEST
block|{
annotation|@
name|Override
name|String
name|suggestExplicitTest
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|classToTest
parameter_list|)
block|{
return|return
literal|"Please explicitly test null checks in "
operator|+
name|classToTest
operator|.
name|getName
argument_list|()
operator|+
literal|"Test."
operator|+
name|NULL_TEST_METHOD_NAMES
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|+
literal|"()"
return|;
block|}
block|}
block|,
DECL|enumConstant|FOR_SERIALIZABLE_TEST
name|FOR_SERIALIZABLE_TEST
block|{
annotation|@
name|Override
name|String
name|suggestExplicitTest
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|classToTest
parameter_list|)
block|{
return|return
literal|"Please explicitly test serialization in "
operator|+
name|classToTest
operator|.
name|getName
argument_list|()
operator|+
literal|"Test."
operator|+
name|SERIALIZABLE_TEST_METHOD_NAMES
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|+
literal|"()"
return|;
block|}
block|}
block|,     ;
DECL|method|cannotDetermineParameterValue (Invokable<?, ?> factory, Parameter param)
specifier|final
name|String
name|cannotDetermineParameterValue
parameter_list|(
name|Invokable
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|factory
parameter_list|,
name|Parameter
name|param
parameter_list|)
block|{
return|return
literal|"Cannot use "
operator|+
name|factory
operator|+
literal|" to instantiate "
operator|+
name|factory
operator|.
name|getDeclaringClass
argument_list|()
operator|+
literal|" because default value of "
operator|+
name|param
operator|+
literal|" cannot be determined.\n"
operator|+
name|suggestExplicitTest
argument_list|(
name|factory
operator|.
name|getDeclaringClass
argument_list|()
argument_list|)
return|;
block|}
DECL|method|suggestExplicitTest (Class<?> classToTest)
specifier|abstract
name|String
name|suggestExplicitTest
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|classToTest
parameter_list|)
function_decl|;
block|}
DECL|class|Chopper
specifier|static
specifier|abstract
class|class
name|Chopper
block|{
DECL|method|or (final Chopper you)
specifier|final
name|Chopper
name|or
parameter_list|(
specifier|final
name|Chopper
name|you
parameter_list|)
block|{
specifier|final
name|Chopper
name|i
init|=
name|this
decl_stmt|;
return|return
operator|new
name|Chopper
argument_list|()
block|{
annotation|@
name|Override
name|Optional
argument_list|<
name|String
argument_list|>
name|chop
parameter_list|(
name|String
name|str
parameter_list|)
block|{
return|return
name|i
operator|.
name|chop
argument_list|(
name|str
argument_list|)
operator|.
name|or
argument_list|(
name|you
operator|.
name|chop
argument_list|(
name|str
argument_list|)
argument_list|)
return|;
block|}
block|}
return|;
block|}
DECL|method|chop (String str)
specifier|abstract
name|Optional
argument_list|<
name|String
argument_list|>
name|chop
parameter_list|(
name|String
name|str
parameter_list|)
function_decl|;
DECL|method|suffix (final String suffix)
specifier|static
name|Chopper
name|suffix
parameter_list|(
specifier|final
name|String
name|suffix
parameter_list|)
block|{
return|return
operator|new
name|Chopper
argument_list|()
block|{
annotation|@
name|Override
name|Optional
argument_list|<
name|String
argument_list|>
name|chop
parameter_list|(
name|String
name|str
parameter_list|)
block|{
if|if
condition|(
name|str
operator|.
name|endsWith
argument_list|(
name|suffix
argument_list|)
condition|)
block|{
return|return
name|Optional
operator|.
name|of
argument_list|(
name|str
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|str
operator|.
name|length
argument_list|()
operator|-
name|suffix
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|Optional
operator|.
name|absent
argument_list|()
return|;
block|}
block|}
block|}
return|;
block|}
block|}
block|}
end_class

end_unit

