begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2012 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.testing
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|testing
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|contrib
operator|.
name|truth
operator|.
name|Truth
operator|.
name|ASSERT
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Functions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|testing
operator|.
name|ClassSanityTester
operator|.
name|FactoryMethodReturnsNullException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|testing
operator|.
name|ClassSanityTester
operator|.
name|ParameterNotInstantiableException
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|AssertionFailedError
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationTargetException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|AbstractList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_comment
comment|/**  * Unit tests for {@link ClassSanityTester}.  *  * @author Ben Yu  */
end_comment

begin_class
DECL|class|ClassSanityTesterTest
specifier|public
class|class
name|ClassSanityTesterTest
extends|extends
name|TestCase
block|{
DECL|field|tester
specifier|private
specifier|final
name|ClassSanityTester
name|tester
init|=
operator|new
name|ClassSanityTester
argument_list|()
decl_stmt|;
DECL|method|testEqualsonReturnValues_good ()
specifier|public
name|void
name|testEqualsonReturnValues_good
parameter_list|()
throws|throws
name|Exception
block|{
name|tester
operator|.
name|forAllPublicStaticMethods
argument_list|(
name|GoodEqualsFactory
operator|.
name|class
argument_list|)
operator|.
name|testEquals
argument_list|()
expr_stmt|;
block|}
DECL|class|GoodEqualsFactory
specifier|public
specifier|static
class|class
name|GoodEqualsFactory
block|{
DECL|method|good (String a, int b, @SuppressWarnings(R) OneConstantEnum oneConstantOnly, @SuppressWarnings(R) @Nullable NoConstantEnum noConstant)
specifier|public
specifier|static
name|Object
name|good
parameter_list|(
name|String
name|a
parameter_list|,
name|int
name|b
parameter_list|,
comment|// oneConstantOnly doesn't matter since it's not nullable and can be only 1 value.
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
name|OneConstantEnum
name|oneConstantOnly
parameter_list|,
comment|// noConstant doesn't matter since it can only be null
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
annotation|@
name|Nullable
name|NoConstantEnum
name|noConstant
parameter_list|)
block|{
return|return
operator|new
name|GoodEquals
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
return|;
block|}
comment|// instance method ignored
DECL|method|badIgnored ()
specifier|public
name|Object
name|badIgnored
parameter_list|()
block|{
return|return
operator|new
name|BadEquals
argument_list|()
return|;
block|}
comment|// primitive ignored
DECL|method|returnsInt ()
specifier|public
name|int
name|returnsInt
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
comment|// void ignored
DECL|method|voidMethod ()
specifier|public
name|void
name|voidMethod
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
comment|// non-public method ignored
DECL|method|badButNotPublic ()
specifier|static
name|Object
name|badButNotPublic
parameter_list|()
block|{
return|return
operator|new
name|BadEquals
argument_list|()
return|;
block|}
block|}
DECL|method|testEqualsonReturnValues_bad ()
specifier|public
name|void
name|testEqualsonReturnValues_bad
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|tester
operator|.
name|forAllPublicStaticMethods
argument_list|(
name|BadEqualsFactory
operator|.
name|class
argument_list|)
operator|.
name|testEquals
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AssertionFailedError
name|expected
parameter_list|)
block|{
return|return;
block|}
name|fail
argument_list|()
expr_stmt|;
block|}
DECL|class|BadEqualsFactory
specifier|public
specifier|static
class|class
name|BadEqualsFactory
block|{
comment|/** oneConstantOnly matters now since it can be either null or the constant. */
DECL|method|bad (String a, int b, @SuppressWarnings(R) @Nullable OneConstantEnum oneConstantOnly)
specifier|public
specifier|static
name|Object
name|bad
parameter_list|(
name|String
name|a
parameter_list|,
name|int
name|b
parameter_list|,
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
annotation|@
name|Nullable
name|OneConstantEnum
name|oneConstantOnly
parameter_list|)
block|{
return|return
operator|new
name|GoodEquals
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
return|;
block|}
block|}
DECL|method|testNullsonReturnValues_good ()
specifier|public
name|void
name|testNullsonReturnValues_good
parameter_list|()
throws|throws
name|Exception
block|{
name|tester
operator|.
name|forAllPublicStaticMethods
argument_list|(
name|GoodNullsFactory
operator|.
name|class
argument_list|)
operator|.
name|testNulls
argument_list|()
expr_stmt|;
block|}
DECL|class|GoodNullsFactory
specifier|public
specifier|static
class|class
name|GoodNullsFactory
block|{
DECL|method|good (String s)
specifier|public
specifier|static
name|Object
name|good
parameter_list|(
name|String
name|s
parameter_list|)
block|{
return|return
operator|new
name|GoodNulls
argument_list|(
name|s
argument_list|)
return|;
block|}
block|}
DECL|method|testNullsonReturnValues_bad ()
specifier|public
name|void
name|testNullsonReturnValues_bad
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|tester
operator|.
name|forAllPublicStaticMethods
argument_list|(
name|BadNullsFactory
operator|.
name|class
argument_list|)
operator|.
name|testNulls
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AssertionFailedError
name|expected
parameter_list|)
block|{
return|return;
block|}
name|fail
argument_list|()
expr_stmt|;
block|}
DECL|class|BadNullsFactory
specifier|public
specifier|static
class|class
name|BadNullsFactory
block|{
DECL|method|bad (@uppressWarningsR) String a)
specifier|public
specifier|static
name|Object
name|bad
parameter_list|(
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
name|String
name|a
parameter_list|)
block|{
return|return
operator|new
name|BadNulls
argument_list|()
return|;
block|}
block|}
DECL|method|testSerializableOnReturnValues_good ()
specifier|public
name|void
name|testSerializableOnReturnValues_good
parameter_list|()
throws|throws
name|Exception
block|{
name|tester
operator|.
name|forAllPublicStaticMethods
argument_list|(
name|GoodSerializableFactory
operator|.
name|class
argument_list|)
operator|.
name|testSerializable
argument_list|()
expr_stmt|;
block|}
DECL|class|GoodSerializableFactory
specifier|public
specifier|static
class|class
name|GoodSerializableFactory
block|{
DECL|method|good (Runnable r)
specifier|public
specifier|static
name|Object
name|good
parameter_list|(
name|Runnable
name|r
parameter_list|)
block|{
return|return
name|r
return|;
block|}
DECL|method|good (AnInterface i)
specifier|public
specifier|static
name|Object
name|good
parameter_list|(
name|AnInterface
name|i
parameter_list|)
block|{
return|return
name|i
return|;
block|}
block|}
DECL|method|testSerializableOnReturnValues_bad ()
specifier|public
name|void
name|testSerializableOnReturnValues_bad
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|tester
operator|.
name|forAllPublicStaticMethods
argument_list|(
name|BadSerializableFactory
operator|.
name|class
argument_list|)
operator|.
name|testSerializable
argument_list|()
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|expected
parameter_list|)
block|{}
block|}
DECL|class|BadSerializableFactory
specifier|public
specifier|static
class|class
name|BadSerializableFactory
block|{
DECL|method|bad ()
specifier|public
specifier|static
name|Object
name|bad
parameter_list|()
block|{
return|return
operator|new
name|Serializable
argument_list|()
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
specifier|private
specifier|final
name|Object
name|notSerializable
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
block|}
return|;
block|}
block|}
DECL|method|testEqualsAndSerializableOnReturnValues_equalsIsGoodButNotSerializable ()
specifier|public
name|void
name|testEqualsAndSerializableOnReturnValues_equalsIsGoodButNotSerializable
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|tester
operator|.
name|forAllPublicStaticMethods
argument_list|(
name|GoodEqualsFactory
operator|.
name|class
argument_list|)
operator|.
name|testEqualsAndSerializable
argument_list|()
expr_stmt|;
return|return;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|expected
parameter_list|)
block|{}
block|}
DECL|method|testEqualsAndSerializableOnReturnValues_serializableButNotEquals ()
specifier|public
name|void
name|testEqualsAndSerializableOnReturnValues_serializableButNotEquals
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|tester
operator|.
name|forAllPublicStaticMethods
argument_list|(
name|GoodSerializableFactory
operator|.
name|class
argument_list|)
operator|.
name|testEqualsAndSerializable
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AssertionFailedError
name|expected
parameter_list|)
block|{
return|return;
block|}
name|fail
argument_list|(
literal|"should have failed"
argument_list|)
expr_stmt|;
block|}
DECL|method|testEqualsAndSerializableOnReturnValues_good ()
specifier|public
name|void
name|testEqualsAndSerializableOnReturnValues_good
parameter_list|()
throws|throws
name|Exception
block|{
name|tester
operator|.
name|forAllPublicStaticMethods
argument_list|(
name|GoodEqualsAndSerialiableFactory
operator|.
name|class
argument_list|)
operator|.
name|testEqualsAndSerializable
argument_list|()
expr_stmt|;
block|}
DECL|class|GoodEqualsAndSerialiableFactory
specifier|public
specifier|static
class|class
name|GoodEqualsAndSerialiableFactory
block|{
DECL|method|good (AnInterface s)
specifier|public
specifier|static
name|Object
name|good
parameter_list|(
name|AnInterface
name|s
parameter_list|)
block|{
return|return
name|Functions
operator|.
name|constant
argument_list|(
name|s
argument_list|)
return|;
block|}
block|}
DECL|method|testEqualsForReturnValues_factoryReturnsNullButNotAnnotated ()
specifier|public
name|void
name|testEqualsForReturnValues_factoryReturnsNullButNotAnnotated
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|tester
operator|.
name|forAllPublicStaticMethods
argument_list|(
name|FactoryThatReturnsNullButNotAnnotated
operator|.
name|class
argument_list|)
operator|.
name|testEquals
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AssertionFailedError
name|expected
parameter_list|)
block|{
return|return;
block|}
name|fail
argument_list|()
expr_stmt|;
block|}
DECL|method|testNullsForReturnValues_factoryReturnsNullButNotAnnotated ()
specifier|public
name|void
name|testNullsForReturnValues_factoryReturnsNullButNotAnnotated
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|tester
operator|.
name|forAllPublicStaticMethods
argument_list|(
name|FactoryThatReturnsNullButNotAnnotated
operator|.
name|class
argument_list|)
operator|.
name|testNulls
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AssertionFailedError
name|expected
parameter_list|)
block|{
return|return;
block|}
name|fail
argument_list|()
expr_stmt|;
block|}
DECL|method|testSerializableForReturnValues_factoryReturnsNullButNotAnnotated ()
specifier|public
name|void
name|testSerializableForReturnValues_factoryReturnsNullButNotAnnotated
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|tester
operator|.
name|forAllPublicStaticMethods
argument_list|(
name|FactoryThatReturnsNullButNotAnnotated
operator|.
name|class
argument_list|)
operator|.
name|testSerializable
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AssertionFailedError
name|expected
parameter_list|)
block|{
return|return;
block|}
name|fail
argument_list|()
expr_stmt|;
block|}
DECL|method|testEqualsAndSerializableForReturnValues_factoryReturnsNullButNotAnnotated ()
specifier|public
name|void
name|testEqualsAndSerializableForReturnValues_factoryReturnsNullButNotAnnotated
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|tester
operator|.
name|forAllPublicStaticMethods
argument_list|(
name|FactoryThatReturnsNullButNotAnnotated
operator|.
name|class
argument_list|)
operator|.
name|testEqualsAndSerializable
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AssertionFailedError
name|expected
parameter_list|)
block|{
return|return;
block|}
name|fail
argument_list|()
expr_stmt|;
block|}
DECL|class|FactoryThatReturnsNullButNotAnnotated
specifier|public
specifier|static
class|class
name|FactoryThatReturnsNullButNotAnnotated
block|{
DECL|method|bad ()
specifier|public
specifier|static
name|Object
name|bad
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
block|}
DECL|method|testEqualsForReturnValues_factoryReturnsNullAndAnnotated ()
specifier|public
name|void
name|testEqualsForReturnValues_factoryReturnsNullAndAnnotated
parameter_list|()
throws|throws
name|Exception
block|{
name|tester
operator|.
name|forAllPublicStaticMethods
argument_list|(
name|FactoryThatReturnsNullAndAnnotated
operator|.
name|class
argument_list|)
operator|.
name|testEquals
argument_list|()
expr_stmt|;
block|}
DECL|method|testNullsForReturnValues_factoryReturnsNullAndAnnotated ()
specifier|public
name|void
name|testNullsForReturnValues_factoryReturnsNullAndAnnotated
parameter_list|()
throws|throws
name|Exception
block|{
name|tester
operator|.
name|forAllPublicStaticMethods
argument_list|(
name|FactoryThatReturnsNullAndAnnotated
operator|.
name|class
argument_list|)
operator|.
name|testNulls
argument_list|()
expr_stmt|;
block|}
DECL|method|testSerializableForReturnValues_factoryReturnsNullAndAnnotated ()
specifier|public
name|void
name|testSerializableForReturnValues_factoryReturnsNullAndAnnotated
parameter_list|()
throws|throws
name|Exception
block|{
name|tester
operator|.
name|forAllPublicStaticMethods
argument_list|(
name|FactoryThatReturnsNullAndAnnotated
operator|.
name|class
argument_list|)
operator|.
name|testSerializable
argument_list|()
expr_stmt|;
block|}
DECL|method|testEqualsAndSerializableForReturnValues_factoryReturnsNullAndAnnotated ()
specifier|public
name|void
name|testEqualsAndSerializableForReturnValues_factoryReturnsNullAndAnnotated
parameter_list|()
throws|throws
name|Exception
block|{
name|tester
operator|.
name|forAllPublicStaticMethods
argument_list|(
name|FactoryThatReturnsNullAndAnnotated
operator|.
name|class
argument_list|)
operator|.
name|testEqualsAndSerializable
argument_list|()
expr_stmt|;
block|}
DECL|class|FactoryThatReturnsNullAndAnnotated
specifier|public
specifier|static
class|class
name|FactoryThatReturnsNullAndAnnotated
block|{
DECL|method|bad ()
annotation|@
name|Nullable
specifier|public
specifier|static
name|Object
name|bad
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
block|}
DECL|method|testGoodEquals ()
specifier|public
name|void
name|testGoodEquals
parameter_list|()
throws|throws
name|Exception
block|{
name|tester
operator|.
name|testEquals
argument_list|(
name|GoodEquals
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
DECL|method|testBadEquals ()
specifier|public
name|void
name|testBadEquals
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|tester
operator|.
name|testEquals
argument_list|(
name|BadEquals
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AssertionFailedError
name|expected
parameter_list|)
block|{
name|ASSERT
operator|.
name|that
argument_list|(
name|expected
operator|.
name|getMessage
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
literal|"create(null)"
argument_list|)
expr_stmt|;
return|return;
block|}
name|fail
argument_list|(
literal|"should have failed"
argument_list|)
expr_stmt|;
block|}
DECL|method|testParameterNotInstantiableForEqualsTest ()
specifier|public
name|void
name|testParameterNotInstantiableForEqualsTest
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|tester
operator|.
name|doTestEquals
argument_list|(
name|ConstructorParameterNotInstantiable
operator|.
name|class
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"should have failed"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParameterNotInstantiableException
name|expected
parameter_list|)
block|{}
block|}
DECL|method|testConstructorThrowsForEqualsTest ()
specifier|public
name|void
name|testConstructorThrowsForEqualsTest
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|tester
operator|.
name|doTestEquals
argument_list|(
name|ConstructorThrows
operator|.
name|class
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"should have failed"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvocationTargetException
name|expected
parameter_list|)
block|{}
block|}
DECL|method|testFactoryMethodReturnsNullForEqualsTest ()
specifier|public
name|void
name|testFactoryMethodReturnsNullForEqualsTest
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|tester
operator|.
name|doTestEquals
argument_list|(
name|FactoryMethodReturnsNullAndAnnotated
operator|.
name|class
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"should have failed"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FactoryMethodReturnsNullException
name|expected
parameter_list|)
block|{}
block|}
DECL|method|testFactoryMethodReturnsNullButNotAnnotatedInEqualsTest ()
specifier|public
name|void
name|testFactoryMethodReturnsNullButNotAnnotatedInEqualsTest
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|tester
operator|.
name|testEquals
argument_list|(
name|FactoryMethodReturnsNullButNotAnnotated
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AssertionFailedError
name|expected
parameter_list|)
block|{
return|return;
block|}
name|fail
argument_list|(
literal|"should have failed"
argument_list|)
expr_stmt|;
block|}
DECL|method|testNoEqualsChecksOnEnum ()
specifier|public
name|void
name|testNoEqualsChecksOnEnum
parameter_list|()
throws|throws
name|Exception
block|{
name|tester
operator|.
name|testEquals
argument_list|(
name|OneConstantEnum
operator|.
name|class
argument_list|)
expr_stmt|;
name|tester
operator|.
name|testEquals
argument_list|(
name|NoConstantEnum
operator|.
name|class
argument_list|)
expr_stmt|;
name|tester
operator|.
name|testEquals
argument_list|(
name|TimeUnit
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
DECL|method|testNoEqualsChecksOnInterface ()
specifier|public
name|void
name|testNoEqualsChecksOnInterface
parameter_list|()
throws|throws
name|Exception
block|{
name|tester
operator|.
name|testEquals
argument_list|(
name|Runnable
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
DECL|method|testNoEqualsChecksOnAnnotation ()
specifier|public
name|void
name|testNoEqualsChecksOnAnnotation
parameter_list|()
throws|throws
name|Exception
block|{
name|tester
operator|.
name|testEquals
argument_list|(
name|Nullable
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
DECL|method|testGoodNulls ()
specifier|public
name|void
name|testGoodNulls
parameter_list|()
throws|throws
name|Exception
block|{
name|tester
operator|.
name|testNulls
argument_list|(
name|GoodNulls
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
DECL|method|testNullChecksOnEnum ()
specifier|public
name|void
name|testNullChecksOnEnum
parameter_list|()
throws|throws
name|Exception
block|{
name|tester
operator|.
name|testNulls
argument_list|(
name|OneConstantEnum
operator|.
name|class
argument_list|)
expr_stmt|;
name|tester
operator|.
name|testNulls
argument_list|(
name|NoConstantEnum
operator|.
name|class
argument_list|)
expr_stmt|;
name|tester
operator|.
name|testNulls
argument_list|(
name|TimeUnit
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
DECL|method|testEnumFailsToCheckNull ()
specifier|public
name|void
name|testEnumFailsToCheckNull
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|tester
operator|.
name|testNulls
argument_list|(
name|EnumFailsToCheckNull
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AssertionFailedError
name|expected
parameter_list|)
block|{
return|return;
block|}
name|fail
argument_list|(
literal|"should have failed"
argument_list|)
expr_stmt|;
block|}
DECL|method|testNoNullChecksOnInterface ()
specifier|public
name|void
name|testNoNullChecksOnInterface
parameter_list|()
throws|throws
name|Exception
block|{
name|tester
operator|.
name|testNulls
argument_list|(
name|Runnable
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
DECL|method|testNoNullChecksOnAnnotation ()
specifier|public
name|void
name|testNoNullChecksOnAnnotation
parameter_list|()
throws|throws
name|Exception
block|{
name|tester
operator|.
name|testNulls
argument_list|(
name|Nullable
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
DECL|method|testBadNulls ()
specifier|public
name|void
name|testBadNulls
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|tester
operator|.
name|testNulls
argument_list|(
name|BadNulls
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AssertionFailedError
name|expected
parameter_list|)
block|{
return|return;
block|}
name|fail
argument_list|(
literal|"should have failed"
argument_list|)
expr_stmt|;
block|}
DECL|method|testInstantiate_factoryMethodReturnsNullButNotAnnotated ()
specifier|public
name|void
name|testInstantiate_factoryMethodReturnsNullButNotAnnotated
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|tester
operator|.
name|instantiate
argument_list|(
name|FactoryMethodReturnsNullButNotAnnotated
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AssertionFailedError
name|expected
parameter_list|)
block|{
name|ASSERT
operator|.
name|that
argument_list|(
name|expected
operator|.
name|getMessage
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
literal|"@Nullable"
argument_list|)
expr_stmt|;
return|return;
block|}
name|fail
argument_list|(
literal|"should have failed"
argument_list|)
expr_stmt|;
block|}
DECL|method|testInstantiate_factoryMethodReturnsNullAndAnnotated ()
specifier|public
name|void
name|testInstantiate_factoryMethodReturnsNullAndAnnotated
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|tester
operator|.
name|instantiate
argument_list|(
name|FactoryMethodReturnsNullAndAnnotated
operator|.
name|class
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"should have failed"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FactoryMethodReturnsNullException
name|expected
parameter_list|)
block|{}
block|}
DECL|method|testInstantiate_factoryMethodAcceptsNull ()
specifier|public
name|void
name|testInstantiate_factoryMethodAcceptsNull
parameter_list|()
throws|throws
name|Exception
block|{
name|assertNull
argument_list|(
name|tester
operator|.
name|instantiate
argument_list|(
name|FactoryMethodAcceptsNull
operator|.
name|class
argument_list|)
operator|.
name|name
argument_list|)
expr_stmt|;
block|}
DECL|method|testInstantiate_factoryMethodDoesNotAcceptNull ()
specifier|public
name|void
name|testInstantiate_factoryMethodDoesNotAcceptNull
parameter_list|()
throws|throws
name|Exception
block|{
name|assertNotNull
argument_list|(
name|tester
operator|.
name|instantiate
argument_list|(
name|FactoryMethodDoesNotAcceptNull
operator|.
name|class
argument_list|)
operator|.
name|name
argument_list|)
expr_stmt|;
block|}
DECL|method|testInstantiate_constructorAcceptsNull ()
specifier|public
name|void
name|testInstantiate_constructorAcceptsNull
parameter_list|()
throws|throws
name|Exception
block|{
name|assertNull
argument_list|(
name|tester
operator|.
name|instantiate
argument_list|(
name|ConstructorAcceptsNull
operator|.
name|class
argument_list|)
operator|.
name|name
argument_list|)
expr_stmt|;
block|}
DECL|method|testInstantiate_constructorDoesNotAcceptNull ()
specifier|public
name|void
name|testInstantiate_constructorDoesNotAcceptNull
parameter_list|()
throws|throws
name|Exception
block|{
name|assertNotNull
argument_list|(
name|tester
operator|.
name|instantiate
argument_list|(
name|ConstructorDoesNotAcceptNull
operator|.
name|class
argument_list|)
operator|.
name|name
argument_list|)
expr_stmt|;
block|}
DECL|method|testInstantiate_notInstantiable ()
specifier|public
name|void
name|testInstantiate_notInstantiable
parameter_list|()
throws|throws
name|Exception
block|{
name|assertNull
argument_list|(
name|tester
operator|.
name|instantiate
argument_list|(
name|NotInstantiable
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testInstantiate_noConstantEnum ()
specifier|public
name|void
name|testInstantiate_noConstantEnum
parameter_list|()
throws|throws
name|Exception
block|{
name|assertNull
argument_list|(
name|tester
operator|.
name|instantiate
argument_list|(
name|NoConstantEnum
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testInstantiate_oneConstantEnum ()
specifier|public
name|void
name|testInstantiate_oneConstantEnum
parameter_list|()
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
name|OneConstantEnum
operator|.
name|A
argument_list|,
name|tester
operator|.
name|instantiate
argument_list|(
name|OneConstantEnum
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testInstantiate_interface ()
specifier|public
name|void
name|testInstantiate_interface
parameter_list|()
throws|throws
name|Exception
block|{
name|assertNull
argument_list|(
name|tester
operator|.
name|instantiate
argument_list|(
name|Runnable
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testInstantiate_abstractClass ()
specifier|public
name|void
name|testInstantiate_abstractClass
parameter_list|()
throws|throws
name|Exception
block|{
name|assertNull
argument_list|(
name|tester
operator|.
name|instantiate
argument_list|(
name|AbstractList
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testInstantiate_annotation ()
specifier|public
name|void
name|testInstantiate_annotation
parameter_list|()
throws|throws
name|Exception
block|{
name|assertNull
argument_list|(
name|tester
operator|.
name|instantiate
argument_list|(
name|Nullable
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testInstantiate_setDefault ()
specifier|public
name|void
name|testInstantiate_setDefault
parameter_list|()
throws|throws
name|Exception
block|{
name|NotInstantiable
name|x
init|=
operator|new
name|NotInstantiable
argument_list|()
decl_stmt|;
name|tester
operator|.
name|setDefault
argument_list|(
name|NotInstantiable
operator|.
name|class
argument_list|,
name|x
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|tester
operator|.
name|instantiate
argument_list|(
name|ConstructorParameterNotInstantiable
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testInstantiate_setSampleInstances ()
specifier|public
name|void
name|testInstantiate_setSampleInstances
parameter_list|()
throws|throws
name|Exception
block|{
name|NotInstantiable
name|x
init|=
operator|new
name|NotInstantiable
argument_list|()
decl_stmt|;
name|tester
operator|.
name|setSampleInstances
argument_list|(
name|NotInstantiable
operator|.
name|class
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|x
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|tester
operator|.
name|instantiate
argument_list|(
name|ConstructorParameterNotInstantiable
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testInstantiate_setSampleInstances_empty ()
specifier|public
name|void
name|testInstantiate_setSampleInstances_empty
parameter_list|()
throws|throws
name|Exception
block|{
name|tester
operator|.
name|setSampleInstances
argument_list|(
name|NotInstantiable
operator|.
name|class
argument_list|,
name|ImmutableList
operator|.
expr|<
name|NotInstantiable
operator|>
name|of
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|tester
operator|.
name|instantiate
argument_list|(
name|ConstructorParameterNotInstantiable
operator|.
name|class
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParameterNotInstantiableException
name|expected
parameter_list|)
block|{}
block|}
DECL|method|testInstantiate_constructorThrows ()
specifier|public
name|void
name|testInstantiate_constructorThrows
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|tester
operator|.
name|instantiate
argument_list|(
name|ConstructorThrows
operator|.
name|class
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvocationTargetException
name|expected
parameter_list|)
block|{}
block|}
DECL|method|testInstantiate_factoryMethodThrows ()
specifier|public
name|void
name|testInstantiate_factoryMethodThrows
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|tester
operator|.
name|instantiate
argument_list|(
name|FactoryMethodThrows
operator|.
name|class
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvocationTargetException
name|expected
parameter_list|)
block|{}
block|}
DECL|method|testInstantiate_constructorParameterNotInstantiable ()
specifier|public
name|void
name|testInstantiate_constructorParameterNotInstantiable
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|tester
operator|.
name|instantiate
argument_list|(
name|ConstructorParameterNotInstantiable
operator|.
name|class
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParameterNotInstantiableException
name|expected
parameter_list|)
block|{}
block|}
DECL|method|testInstantiate_factoryMethodParameterNotInstantiable ()
specifier|public
name|void
name|testInstantiate_factoryMethodParameterNotInstantiable
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|tester
operator|.
name|instantiate
argument_list|(
name|FactoryMethodParameterNotInstantiable
operator|.
name|class
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParameterNotInstantiableException
name|expected
parameter_list|)
block|{}
block|}
DECL|method|testInstantiate_instantiableFactoryMethodChosen ()
specifier|public
name|void
name|testInstantiate_instantiableFactoryMethodChosen
parameter_list|()
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
literal|"good"
argument_list|,
name|tester
operator|.
name|instantiate
argument_list|(
name|InstantiableFactoryMethodChosen
operator|.
name|class
argument_list|)
operator|.
name|name
argument_list|)
expr_stmt|;
block|}
DECL|method|testInterfaceProxySerializable ()
specifier|public
name|void
name|testInterfaceProxySerializable
parameter_list|()
throws|throws
name|Exception
block|{
name|SerializableTester
operator|.
name|reserializeAndAssert
argument_list|(
name|tester
operator|.
name|instantiate
argument_list|(
name|HasAnInterface
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|class|HasAnInterface
specifier|static
class|class
name|HasAnInterface
implements|implements
name|Serializable
block|{
DECL|field|i
specifier|private
specifier|final
name|AnInterface
name|i
decl_stmt|;
DECL|method|HasAnInterface (AnInterface i)
specifier|public
name|HasAnInterface
parameter_list|(
name|AnInterface
name|i
parameter_list|)
block|{
name|this
operator|.
name|i
operator|=
name|i
expr_stmt|;
block|}
DECL|method|equals (@ullable Object obj)
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
annotation|@
name|Nullable
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|obj
operator|instanceof
name|HasAnInterface
condition|)
block|{
name|HasAnInterface
name|that
init|=
operator|(
name|HasAnInterface
operator|)
name|obj
decl_stmt|;
return|return
name|i
operator|.
name|equals
argument_list|(
name|that
operator|.
name|i
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
DECL|method|hashCode ()
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|i
operator|.
name|hashCode
argument_list|()
return|;
block|}
block|}
DECL|class|InstantiableFactoryMethodChosen
specifier|static
class|class
name|InstantiableFactoryMethodChosen
block|{
DECL|field|name
specifier|final
name|String
name|name
decl_stmt|;
DECL|method|InstantiableFactoryMethodChosen (String name)
specifier|private
name|InstantiableFactoryMethodChosen
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
DECL|method|InstantiableFactoryMethodChosen (NotInstantiable x)
specifier|public
name|InstantiableFactoryMethodChosen
parameter_list|(
name|NotInstantiable
name|x
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|x
argument_list|)
expr_stmt|;
name|this
operator|.
name|name
operator|=
literal|"x1"
expr_stmt|;
block|}
DECL|method|create (NotInstantiable x)
specifier|public
specifier|static
name|InstantiableFactoryMethodChosen
name|create
parameter_list|(
name|NotInstantiable
name|x
parameter_list|)
block|{
return|return
operator|new
name|InstantiableFactoryMethodChosen
argument_list|(
name|x
argument_list|)
return|;
block|}
DECL|method|create (String s)
specifier|public
specifier|static
name|InstantiableFactoryMethodChosen
name|create
parameter_list|(
name|String
name|s
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|s
argument_list|)
expr_stmt|;
return|return
operator|new
name|InstantiableFactoryMethodChosen
argument_list|(
literal|"good"
argument_list|)
return|;
block|}
block|}
DECL|method|testInstantiate_instantiableConstructorChosen ()
specifier|public
name|void
name|testInstantiate_instantiableConstructorChosen
parameter_list|()
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
literal|"good"
argument_list|,
name|tester
operator|.
name|instantiate
argument_list|(
name|InstantiableConstructorChosen
operator|.
name|class
argument_list|)
operator|.
name|name
argument_list|)
expr_stmt|;
block|}
DECL|class|InstantiableConstructorChosen
specifier|static
class|class
name|InstantiableConstructorChosen
block|{
DECL|field|name
specifier|final
name|String
name|name
decl_stmt|;
DECL|method|InstantiableConstructorChosen (String name)
specifier|public
name|InstantiableConstructorChosen
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|this
operator|.
name|name
operator|=
literal|"good"
expr_stmt|;
block|}
DECL|method|InstantiableConstructorChosen (NotInstantiable x)
specifier|public
name|InstantiableConstructorChosen
parameter_list|(
name|NotInstantiable
name|x
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|x
argument_list|)
expr_stmt|;
name|this
operator|.
name|name
operator|=
literal|"x1"
expr_stmt|;
block|}
DECL|method|create (NotInstantiable x)
specifier|public
specifier|static
name|InstantiableFactoryMethodChosen
name|create
parameter_list|(
name|NotInstantiable
name|x
parameter_list|)
block|{
return|return
operator|new
name|InstantiableFactoryMethodChosen
argument_list|(
name|x
argument_list|)
return|;
block|}
block|}
DECL|class|GoodEquals
specifier|static
class|class
name|GoodEquals
block|{
DECL|field|a
specifier|private
specifier|final
name|String
name|a
decl_stmt|;
DECL|field|b
specifier|private
specifier|final
name|int
name|b
decl_stmt|;
DECL|method|GoodEquals (String a, int b)
specifier|private
name|GoodEquals
parameter_list|(
name|String
name|a
parameter_list|,
name|int
name|b
parameter_list|)
block|{
name|this
operator|.
name|a
operator|=
name|checkNotNull
argument_list|(
name|a
argument_list|)
expr_stmt|;
name|this
operator|.
name|b
operator|=
name|b
expr_stmt|;
block|}
comment|// ignored by testEquals()
DECL|method|GoodEquals (@uppressWarningsR) NotInstantiable x)
name|GoodEquals
parameter_list|(
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
name|NotInstantiable
name|x
parameter_list|)
block|{
name|this
operator|.
name|a
operator|=
literal|"x"
expr_stmt|;
name|this
operator|.
name|b
operator|=
operator|-
literal|1
expr_stmt|;
block|}
comment|// will keep trying
DECL|method|GoodEquals (@uppressWarningsR) NotInstantiable x, int b)
specifier|public
name|GoodEquals
parameter_list|(
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
name|NotInstantiable
name|x
parameter_list|,
name|int
name|b
parameter_list|)
block|{
name|this
operator|.
name|a
operator|=
literal|"x"
expr_stmt|;
name|this
operator|.
name|b
operator|=
name|b
expr_stmt|;
block|}
comment|// keep trying
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
DECL|method|create (int a, int b)
specifier|static
name|GoodEquals
name|create
parameter_list|(
name|int
name|a
parameter_list|,
name|int
name|b
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|()
throw|;
block|}
comment|// keep trying
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
DECL|method|createMayReturnNull (int a, int b)
annotation|@
name|Nullable
specifier|public
specifier|static
name|GoodEquals
name|createMayReturnNull
parameter_list|(
name|int
name|a
parameter_list|,
name|int
name|b
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
comment|// Good!
DECL|method|create (String a, int b)
specifier|static
name|GoodEquals
name|create
parameter_list|(
name|String
name|a
parameter_list|,
name|int
name|b
parameter_list|)
block|{
return|return
operator|new
name|GoodEquals
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
return|;
block|}
DECL|method|equals (@ullable Object obj)
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
annotation|@
name|Nullable
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|obj
operator|instanceof
name|GoodEquals
condition|)
block|{
name|GoodEquals
name|that
init|=
operator|(
name|GoodEquals
operator|)
name|obj
decl_stmt|;
return|return
name|a
operator|.
name|equals
argument_list|(
name|that
operator|.
name|a
argument_list|)
operator|&&
name|b
operator|==
name|that
operator|.
name|b
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
DECL|method|hashCode ()
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
block|}
DECL|class|BadEquals
specifier|static
class|class
name|BadEquals
block|{
DECL|method|BadEquals ()
specifier|public
name|BadEquals
parameter_list|()
block|{}
comment|// ignored by testEquals() since it has less parameters.
DECL|method|create (@uppressWarningsR) @ullable String s)
specifier|public
specifier|static
name|BadEquals
name|create
parameter_list|(
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
annotation|@
name|Nullable
name|String
name|s
parameter_list|)
block|{
return|return
operator|new
name|BadEquals
argument_list|()
return|;
block|}
DECL|method|equals (@ullable Object obj)
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
annotation|@
name|Nullable
name|Object
name|obj
parameter_list|)
block|{
return|return
name|obj
operator|instanceof
name|BadEquals
return|;
block|}
DECL|method|hashCode ()
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
block|}
DECL|class|GoodNulls
specifier|static
class|class
name|GoodNulls
block|{
DECL|method|GoodNulls (String s)
specifier|public
name|GoodNulls
parameter_list|(
name|String
name|s
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
DECL|method|rejectNull (String s)
specifier|public
name|void
name|rejectNull
parameter_list|(
name|String
name|s
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|BadNulls
specifier|public
specifier|static
class|class
name|BadNulls
block|{
DECL|method|failsToRejectNull (@uppressWarningsR) String s)
specifier|public
name|void
name|failsToRejectNull
parameter_list|(
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
name|String
name|s
parameter_list|)
block|{}
block|}
DECL|class|FactoryMethodReturnsNullButNotAnnotated
specifier|static
class|class
name|FactoryMethodReturnsNullButNotAnnotated
block|{
DECL|method|FactoryMethodReturnsNullButNotAnnotated ()
specifier|private
name|FactoryMethodReturnsNullButNotAnnotated
parameter_list|()
block|{}
DECL|method|returnsNull ()
specifier|static
name|FactoryMethodReturnsNullButNotAnnotated
name|returnsNull
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
block|}
DECL|class|FactoryMethodReturnsNullAndAnnotated
specifier|static
class|class
name|FactoryMethodReturnsNullAndAnnotated
block|{
DECL|method|FactoryMethodReturnsNullAndAnnotated ()
specifier|private
name|FactoryMethodReturnsNullAndAnnotated
parameter_list|()
block|{}
DECL|method|returnsNull ()
annotation|@
name|Nullable
specifier|public
specifier|static
name|FactoryMethodReturnsNullAndAnnotated
name|returnsNull
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
block|}
DECL|class|FactoryMethodAcceptsNull
specifier|static
class|class
name|FactoryMethodAcceptsNull
block|{
DECL|field|name
specifier|final
name|String
name|name
decl_stmt|;
DECL|method|FactoryMethodAcceptsNull (String name)
specifier|private
name|FactoryMethodAcceptsNull
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
DECL|method|create (@ullable String name)
specifier|static
name|FactoryMethodAcceptsNull
name|create
parameter_list|(
annotation|@
name|Nullable
name|String
name|name
parameter_list|)
block|{
return|return
operator|new
name|FactoryMethodAcceptsNull
argument_list|(
name|name
argument_list|)
return|;
block|}
block|}
DECL|class|FactoryMethodDoesNotAcceptNull
specifier|static
class|class
name|FactoryMethodDoesNotAcceptNull
block|{
DECL|field|name
specifier|final
name|String
name|name
decl_stmt|;
DECL|method|FactoryMethodDoesNotAcceptNull (String name)
specifier|private
name|FactoryMethodDoesNotAcceptNull
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|checkNotNull
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
DECL|method|create (String name)
specifier|public
specifier|static
name|FactoryMethodDoesNotAcceptNull
name|create
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
operator|new
name|FactoryMethodDoesNotAcceptNull
argument_list|(
name|name
argument_list|)
return|;
block|}
block|}
DECL|class|ConstructorAcceptsNull
specifier|static
class|class
name|ConstructorAcceptsNull
block|{
DECL|field|name
specifier|final
name|String
name|name
decl_stmt|;
DECL|method|ConstructorAcceptsNull (@ullable String name)
specifier|public
name|ConstructorAcceptsNull
parameter_list|(
annotation|@
name|Nullable
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
block|}
DECL|class|ConstructorDoesNotAcceptNull
specifier|static
class|class
name|ConstructorDoesNotAcceptNull
block|{
DECL|field|name
specifier|final
name|String
name|name
decl_stmt|;
DECL|method|ConstructorDoesNotAcceptNull (String name)
name|ConstructorDoesNotAcceptNull
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|checkNotNull
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|ConstructorParameterNotInstantiable
specifier|static
class|class
name|ConstructorParameterNotInstantiable
block|{
DECL|method|ConstructorParameterNotInstantiable (@uppressWarningsR) NotInstantiable x)
specifier|public
name|ConstructorParameterNotInstantiable
parameter_list|(
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
name|NotInstantiable
name|x
parameter_list|)
block|{}
block|}
DECL|class|FactoryMethodParameterNotInstantiable
specifier|static
class|class
name|FactoryMethodParameterNotInstantiable
block|{
DECL|method|FactoryMethodParameterNotInstantiable ()
specifier|private
name|FactoryMethodParameterNotInstantiable
parameter_list|()
block|{}
DECL|method|create ( @uppressWarningsR) NotInstantiable x)
specifier|static
name|FactoryMethodParameterNotInstantiable
name|create
parameter_list|(
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
name|NotInstantiable
name|x
parameter_list|)
block|{
return|return
operator|new
name|FactoryMethodParameterNotInstantiable
argument_list|()
return|;
block|}
block|}
DECL|class|ConstructorThrows
specifier|static
class|class
name|ConstructorThrows
block|{
DECL|method|ConstructorThrows ()
specifier|public
name|ConstructorThrows
parameter_list|()
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|()
throw|;
block|}
block|}
DECL|class|FactoryMethodThrows
specifier|static
class|class
name|FactoryMethodThrows
block|{
DECL|method|FactoryMethodThrows ()
specifier|private
name|FactoryMethodThrows
parameter_list|()
block|{}
DECL|method|create ()
specifier|public
specifier|static
name|FactoryMethodThrows
name|create
parameter_list|()
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|()
throw|;
block|}
block|}
DECL|class|NotInstantiable
specifier|static
class|class
name|NotInstantiable
block|{
DECL|method|NotInstantiable ()
specifier|private
name|NotInstantiable
parameter_list|()
block|{}
block|}
DECL|enum|NoConstantEnum
specifier|private
enum|enum
name|NoConstantEnum
block|{}
DECL|enum|OneConstantEnum
specifier|private
enum|enum
name|OneConstantEnum
block|{
DECL|enumConstant|A
name|A
block|}
DECL|enum|EnumFailsToCheckNull
specifier|private
enum|enum
name|EnumFailsToCheckNull
block|{
DECL|enumConstant|A
name|A
block|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
DECL|method|failToCheckNull (String s)
specifier|public
name|void
name|failToCheckNull
parameter_list|(
name|String
name|s
parameter_list|)
block|{}
block|}
DECL|interface|AnInterface
specifier|private
interface|interface
name|AnInterface
block|{}
block|}
end_class

end_unit

