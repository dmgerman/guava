begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2012 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.testing
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|testing
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertThat
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Functions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|testing
operator|.
name|ClassSanityTester
operator|.
name|FactoryMethodReturnsNullException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|testing
operator|.
name|ClassSanityTester
operator|.
name|ParameterHasNoDistinctValueException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|testing
operator|.
name|ClassSanityTester
operator|.
name|ParameterNotInstantiableException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|testing
operator|.
name|NullPointerTester
operator|.
name|Visibility
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationTargetException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|AbstractList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Stream
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|AssertionFailedError
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|checkerframework
operator|.
name|checker
operator|.
name|nullness
operator|.
name|compatqual
operator|.
name|NullableDecl
import|;
end_import

begin_comment
comment|/**  * Unit tests for {@link ClassSanityTester}.  *  * @author Ben Yu  */
end_comment

begin_class
DECL|class|ClassSanityTesterTest
specifier|public
class|class
name|ClassSanityTesterTest
extends|extends
name|TestCase
block|{
DECL|field|tester
specifier|private
specifier|final
name|ClassSanityTester
name|tester
init|=
operator|new
name|ClassSanityTester
argument_list|()
decl_stmt|;
DECL|method|testEqualsOnReturnValues_good ()
specifier|public
name|void
name|testEqualsOnReturnValues_good
parameter_list|()
throws|throws
name|Exception
block|{
name|tester
operator|.
name|forAllPublicStaticMethods
argument_list|(
name|GoodEqualsFactory
operator|.
name|class
argument_list|)
operator|.
name|testEquals
argument_list|()
expr_stmt|;
block|}
DECL|class|GoodEqualsFactory
specifier|public
specifier|static
class|class
name|GoodEqualsFactory
block|{
DECL|method|good ( String a, int b, @SuppressWarnings(R) OneConstantEnum oneConstantOnly, @SuppressWarnings(R) @NullableDecl NoConstantEnum noConstant)
specifier|public
specifier|static
name|Object
name|good
parameter_list|(
name|String
name|a
parameter_list|,
name|int
name|b
parameter_list|,
comment|// oneConstantOnly doesn't matter since it's not nullable and can be only 1 value.
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
name|OneConstantEnum
name|oneConstantOnly
parameter_list|,
comment|// noConstant doesn't matter since it can only be null
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
annotation|@
name|NullableDecl
name|NoConstantEnum
name|noConstant
parameter_list|)
block|{
return|return
operator|new
name|GoodEquals
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
return|;
block|}
comment|// instance method ignored
DECL|method|badIgnored ()
specifier|public
name|Object
name|badIgnored
parameter_list|()
block|{
return|return
operator|new
name|BadEquals
argument_list|()
return|;
block|}
comment|// primitive ignored
DECL|method|returnsInt ()
specifier|public
name|int
name|returnsInt
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
comment|// void ignored
DECL|method|voidMethod ()
specifier|public
name|void
name|voidMethod
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
comment|// non-public method ignored
DECL|method|badButNotPublic ()
specifier|static
name|Object
name|badButNotPublic
parameter_list|()
block|{
return|return
operator|new
name|BadEquals
argument_list|()
return|;
block|}
block|}
DECL|method|testForAllPublicStaticMethods_noPublicStaticMethods ()
specifier|public
name|void
name|testForAllPublicStaticMethods_noPublicStaticMethods
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|tester
operator|.
name|forAllPublicStaticMethods
argument_list|(
name|NoPublicStaticMethods
operator|.
name|class
argument_list|)
operator|.
name|testEquals
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AssertionFailedError
name|expected
parameter_list|)
block|{
name|assertThat
argument_list|(
name|expected
argument_list|)
operator|.
name|hasMessage
argument_list|(
literal|"No public static methods that return java.lang.Object or subtype are found in "
operator|+
name|NoPublicStaticMethods
operator|.
name|class
operator|+
literal|"."
argument_list|)
expr_stmt|;
return|return;
block|}
name|fail
argument_list|()
expr_stmt|;
block|}
DECL|method|testEqualsOnReturnValues_bad ()
specifier|public
name|void
name|testEqualsOnReturnValues_bad
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|tester
operator|.
name|forAllPublicStaticMethods
argument_list|(
name|BadEqualsFactory
operator|.
name|class
argument_list|)
operator|.
name|testEquals
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AssertionFailedError
name|expected
parameter_list|)
block|{
return|return;
block|}
name|fail
argument_list|()
expr_stmt|;
block|}
DECL|class|BadEqualsFactory
specifier|private
specifier|static
class|class
name|BadEqualsFactory
block|{
comment|/** oneConstantOnly matters now since it can be either null or the constant. */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
comment|// Called by reflection
DECL|method|bad (String a, int b, @NullableDecl OneConstantEnum oneConstantOnly)
specifier|public
specifier|static
name|Object
name|bad
parameter_list|(
name|String
name|a
parameter_list|,
name|int
name|b
parameter_list|,
annotation|@
name|NullableDecl
name|OneConstantEnum
name|oneConstantOnly
parameter_list|)
block|{
return|return
operator|new
name|GoodEquals
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
return|;
block|}
block|}
DECL|method|testNullsOnReturnValues_good ()
specifier|public
name|void
name|testNullsOnReturnValues_good
parameter_list|()
throws|throws
name|Exception
block|{
name|tester
operator|.
name|forAllPublicStaticMethods
argument_list|(
name|GoodNullsFactory
operator|.
name|class
argument_list|)
operator|.
name|testNulls
argument_list|()
expr_stmt|;
block|}
DECL|class|GoodNullsFactory
specifier|private
specifier|static
class|class
name|GoodNullsFactory
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
comment|// Called by reflection
DECL|method|good (String s)
specifier|public
specifier|static
name|Object
name|good
parameter_list|(
name|String
name|s
parameter_list|)
block|{
return|return
operator|new
name|GoodNulls
argument_list|(
name|s
argument_list|)
return|;
block|}
block|}
DECL|method|testNullsOnReturnValues_bad ()
specifier|public
name|void
name|testNullsOnReturnValues_bad
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|tester
operator|.
name|forAllPublicStaticMethods
argument_list|(
name|BadNullsFactory
operator|.
name|class
argument_list|)
operator|.
name|thatReturn
argument_list|(
name|Object
operator|.
name|class
argument_list|)
operator|.
name|testNulls
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AssertionFailedError
name|expected
parameter_list|)
block|{
return|return;
block|}
name|fail
argument_list|()
expr_stmt|;
block|}
DECL|method|testNullsOnReturnValues_returnTypeFiltered ()
specifier|public
name|void
name|testNullsOnReturnValues_returnTypeFiltered
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|tester
operator|.
name|forAllPublicStaticMethods
argument_list|(
name|BadNullsFactory
operator|.
name|class
argument_list|)
operator|.
name|thatReturn
argument_list|(
name|Iterable
operator|.
name|class
argument_list|)
operator|.
name|testNulls
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AssertionFailedError
name|expected
parameter_list|)
block|{
name|assertThat
argument_list|(
name|expected
argument_list|)
operator|.
name|hasMessage
argument_list|(
literal|"No public static methods that return java.lang.Iterable or subtype are found in "
operator|+
name|BadNullsFactory
operator|.
name|class
operator|+
literal|"."
argument_list|)
expr_stmt|;
return|return;
block|}
name|fail
argument_list|()
expr_stmt|;
block|}
DECL|class|BadNullsFactory
specifier|public
specifier|static
class|class
name|BadNullsFactory
block|{
DECL|method|bad (@uppressWarningsR) String a)
specifier|public
specifier|static
name|Object
name|bad
parameter_list|(
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
name|String
name|a
parameter_list|)
block|{
return|return
operator|new
name|BadNulls
argument_list|()
return|;
block|}
block|}
annotation|@
name|AndroidIncompatible
comment|// TODO(cpovirk): ClassNotFoundException... ClassSanityTesterTest$AnInterface
DECL|method|testSerializableOnReturnValues_good ()
specifier|public
name|void
name|testSerializableOnReturnValues_good
parameter_list|()
throws|throws
name|Exception
block|{
name|tester
operator|.
name|forAllPublicStaticMethods
argument_list|(
name|GoodSerializableFactory
operator|.
name|class
argument_list|)
operator|.
name|testSerializable
argument_list|()
expr_stmt|;
block|}
DECL|class|GoodSerializableFactory
specifier|public
specifier|static
class|class
name|GoodSerializableFactory
block|{
DECL|method|good (Runnable r)
specifier|public
specifier|static
name|Object
name|good
parameter_list|(
name|Runnable
name|r
parameter_list|)
block|{
return|return
name|r
return|;
block|}
DECL|method|good (AnInterface i)
specifier|public
specifier|static
name|Object
name|good
parameter_list|(
name|AnInterface
name|i
parameter_list|)
block|{
return|return
name|i
return|;
block|}
block|}
DECL|method|testSerializableOnReturnValues_bad ()
specifier|public
name|void
name|testSerializableOnReturnValues_bad
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|tester
operator|.
name|forAllPublicStaticMethods
argument_list|(
name|BadSerializableFactory
operator|.
name|class
argument_list|)
operator|.
name|testSerializable
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AssertionFailedError
name|expected
parameter_list|)
block|{
return|return;
block|}
name|fail
argument_list|()
expr_stmt|;
block|}
DECL|class|BadSerializableFactory
specifier|public
specifier|static
class|class
name|BadSerializableFactory
block|{
DECL|method|bad ()
specifier|public
specifier|static
name|Object
name|bad
parameter_list|()
block|{
return|return
operator|new
name|Serializable
argument_list|()
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
specifier|private
specifier|final
name|Object
name|notSerializable
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
block|}
return|;
block|}
block|}
DECL|method|testEqualsAndSerializableOnReturnValues_equalsIsGoodButNotSerializable ()
specifier|public
name|void
name|testEqualsAndSerializableOnReturnValues_equalsIsGoodButNotSerializable
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|tester
operator|.
name|forAllPublicStaticMethods
argument_list|(
name|GoodEqualsFactory
operator|.
name|class
argument_list|)
operator|.
name|testEqualsAndSerializable
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AssertionFailedError
name|expected
parameter_list|)
block|{
return|return;
block|}
name|fail
argument_list|(
literal|"should have failed"
argument_list|)
expr_stmt|;
block|}
DECL|method|testEqualsAndSerializableOnReturnValues_serializableButNotEquals ()
specifier|public
name|void
name|testEqualsAndSerializableOnReturnValues_serializableButNotEquals
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|tester
operator|.
name|forAllPublicStaticMethods
argument_list|(
name|GoodSerializableFactory
operator|.
name|class
argument_list|)
operator|.
name|testEqualsAndSerializable
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AssertionFailedError
name|expected
parameter_list|)
block|{
return|return;
block|}
name|fail
argument_list|(
literal|"should have failed"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AndroidIncompatible
comment|// TODO(cpovirk): ClassNotFoundException... ClassSanityTesterTest$AnInterface
DECL|method|testEqualsAndSerializableOnReturnValues_good ()
specifier|public
name|void
name|testEqualsAndSerializableOnReturnValues_good
parameter_list|()
throws|throws
name|Exception
block|{
name|tester
operator|.
name|forAllPublicStaticMethods
argument_list|(
name|GoodEqualsAndSerialiableFactory
operator|.
name|class
argument_list|)
operator|.
name|testEqualsAndSerializable
argument_list|()
expr_stmt|;
block|}
DECL|class|GoodEqualsAndSerialiableFactory
specifier|public
specifier|static
class|class
name|GoodEqualsAndSerialiableFactory
block|{
DECL|method|good (AnInterface s)
specifier|public
specifier|static
name|Object
name|good
parameter_list|(
name|AnInterface
name|s
parameter_list|)
block|{
return|return
name|Functions
operator|.
name|constant
argument_list|(
name|s
argument_list|)
return|;
block|}
block|}
DECL|method|testEqualsForReturnValues_factoryReturnsNullButNotAnnotated ()
specifier|public
name|void
name|testEqualsForReturnValues_factoryReturnsNullButNotAnnotated
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|tester
operator|.
name|forAllPublicStaticMethods
argument_list|(
name|FactoryThatReturnsNullButNotAnnotated
operator|.
name|class
argument_list|)
operator|.
name|testEquals
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AssertionFailedError
name|expected
parameter_list|)
block|{
return|return;
block|}
name|fail
argument_list|()
expr_stmt|;
block|}
DECL|method|testNullsForReturnValues_factoryReturnsNullButNotAnnotated ()
specifier|public
name|void
name|testNullsForReturnValues_factoryReturnsNullButNotAnnotated
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|tester
operator|.
name|forAllPublicStaticMethods
argument_list|(
name|FactoryThatReturnsNullButNotAnnotated
operator|.
name|class
argument_list|)
operator|.
name|testNulls
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AssertionFailedError
name|expected
parameter_list|)
block|{
return|return;
block|}
name|fail
argument_list|()
expr_stmt|;
block|}
DECL|method|testSerializableForReturnValues_factoryReturnsNullButNotAnnotated ()
specifier|public
name|void
name|testSerializableForReturnValues_factoryReturnsNullButNotAnnotated
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|tester
operator|.
name|forAllPublicStaticMethods
argument_list|(
name|FactoryThatReturnsNullButNotAnnotated
operator|.
name|class
argument_list|)
operator|.
name|testSerializable
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AssertionFailedError
name|expected
parameter_list|)
block|{
return|return;
block|}
name|fail
argument_list|()
expr_stmt|;
block|}
DECL|method|testEqualsAndSerializableForReturnValues_factoryReturnsNullButNotAnnotated ()
specifier|public
name|void
name|testEqualsAndSerializableForReturnValues_factoryReturnsNullButNotAnnotated
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|tester
operator|.
name|forAllPublicStaticMethods
argument_list|(
name|FactoryThatReturnsNullButNotAnnotated
operator|.
name|class
argument_list|)
operator|.
name|testEqualsAndSerializable
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AssertionFailedError
name|expected
parameter_list|)
block|{
return|return;
block|}
name|fail
argument_list|()
expr_stmt|;
block|}
DECL|class|FactoryThatReturnsNullButNotAnnotated
specifier|public
specifier|static
class|class
name|FactoryThatReturnsNullButNotAnnotated
block|{
DECL|method|bad ()
specifier|public
specifier|static
name|Object
name|bad
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
block|}
DECL|method|testEqualsForReturnValues_factoryReturnsNullAndAnnotated ()
specifier|public
name|void
name|testEqualsForReturnValues_factoryReturnsNullAndAnnotated
parameter_list|()
throws|throws
name|Exception
block|{
name|tester
operator|.
name|forAllPublicStaticMethods
argument_list|(
name|FactoryThatReturnsNullAndAnnotated
operator|.
name|class
argument_list|)
operator|.
name|testEquals
argument_list|()
expr_stmt|;
block|}
DECL|method|testNullsForReturnValues_factoryReturnsNullAndAnnotated ()
specifier|public
name|void
name|testNullsForReturnValues_factoryReturnsNullAndAnnotated
parameter_list|()
throws|throws
name|Exception
block|{
name|tester
operator|.
name|forAllPublicStaticMethods
argument_list|(
name|FactoryThatReturnsNullAndAnnotated
operator|.
name|class
argument_list|)
operator|.
name|testNulls
argument_list|()
expr_stmt|;
block|}
DECL|method|testSerializableForReturnValues_factoryReturnsNullAndAnnotated ()
specifier|public
name|void
name|testSerializableForReturnValues_factoryReturnsNullAndAnnotated
parameter_list|()
throws|throws
name|Exception
block|{
name|tester
operator|.
name|forAllPublicStaticMethods
argument_list|(
name|FactoryThatReturnsNullAndAnnotated
operator|.
name|class
argument_list|)
operator|.
name|testSerializable
argument_list|()
expr_stmt|;
block|}
DECL|method|testEqualsAndSerializableForReturnValues_factoryReturnsNullAndAnnotated ()
specifier|public
name|void
name|testEqualsAndSerializableForReturnValues_factoryReturnsNullAndAnnotated
parameter_list|()
throws|throws
name|Exception
block|{
name|tester
operator|.
name|forAllPublicStaticMethods
argument_list|(
name|FactoryThatReturnsNullAndAnnotated
operator|.
name|class
argument_list|)
operator|.
name|testEqualsAndSerializable
argument_list|()
expr_stmt|;
block|}
DECL|class|FactoryThatReturnsNullAndAnnotated
specifier|public
specifier|static
class|class
name|FactoryThatReturnsNullAndAnnotated
block|{
annotation|@
name|NullableDecl
DECL|method|bad ()
specifier|public
specifier|static
name|Object
name|bad
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
block|}
DECL|method|testGoodEquals ()
specifier|public
name|void
name|testGoodEquals
parameter_list|()
throws|throws
name|Exception
block|{
name|tester
operator|.
name|testEquals
argument_list|(
name|GoodEquals
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
DECL|method|testEquals_interface ()
specifier|public
name|void
name|testEquals_interface
parameter_list|()
block|{
name|tester
operator|.
name|testEquals
argument_list|(
name|AnInterface
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
DECL|method|testEquals_abstractClass ()
specifier|public
name|void
name|testEquals_abstractClass
parameter_list|()
block|{
name|tester
operator|.
name|testEquals
argument_list|(
name|AnAbstractClass
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
DECL|method|testEquals_enum ()
specifier|public
name|void
name|testEquals_enum
parameter_list|()
block|{
name|tester
operator|.
name|testEquals
argument_list|(
name|OneConstantEnum
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
DECL|method|testBadEquals ()
specifier|public
name|void
name|testBadEquals
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|tester
operator|.
name|testEquals
argument_list|(
name|BadEquals
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AssertionFailedError
name|expected
parameter_list|)
block|{
name|assertThat
argument_list|(
name|expected
operator|.
name|getMessage
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
literal|"create(null)"
argument_list|)
expr_stmt|;
return|return;
block|}
name|fail
argument_list|(
literal|"should have failed"
argument_list|)
expr_stmt|;
block|}
DECL|method|testBadEquals_withParameterizedType ()
specifier|public
name|void
name|testBadEquals_withParameterizedType
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|tester
operator|.
name|testEquals
argument_list|(
name|BadEqualsWithParameterizedType
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AssertionFailedError
name|expected
parameter_list|)
block|{
name|assertThat
argument_list|(
name|expected
operator|.
name|getMessage
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
literal|"create([[1]])"
argument_list|)
expr_stmt|;
return|return;
block|}
name|fail
argument_list|(
literal|"should have failed"
argument_list|)
expr_stmt|;
block|}
DECL|method|testBadEquals_withSingleParameterValue ()
specifier|public
name|void
name|testBadEquals_withSingleParameterValue
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|tester
operator|.
name|doTestEquals
argument_list|(
name|ConstructorParameterWithOptionalNotInstantiable
operator|.
name|class
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParameterHasNoDistinctValueException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testGoodReferentialEqualityComparison ()
specifier|public
name|void
name|testGoodReferentialEqualityComparison
parameter_list|()
throws|throws
name|Exception
block|{
name|tester
operator|.
name|testEquals
argument_list|(
name|UsesEnum
operator|.
name|class
argument_list|)
expr_stmt|;
name|tester
operator|.
name|testEquals
argument_list|(
name|UsesReferentialEquality
operator|.
name|class
argument_list|)
expr_stmt|;
name|tester
operator|.
name|testEquals
argument_list|(
name|SameListInstance
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
DECL|method|testStreamParameterSkippedForNullTesting ()
specifier|public
name|void
name|testStreamParameterSkippedForNullTesting
parameter_list|()
throws|throws
name|Exception
block|{
name|tester
operator|.
name|testNulls
argument_list|(
name|WithStreamParameter
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AndroidIncompatible
comment|// problem with equality of Type objects?
DECL|method|testEqualsUsingReferentialEquality ()
specifier|public
name|void
name|testEqualsUsingReferentialEquality
parameter_list|()
throws|throws
name|Exception
block|{
name|assertBadUseOfReferentialEquality
argument_list|(
name|SameIntegerInstance
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertBadUseOfReferentialEquality
argument_list|(
name|SameLongInstance
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertBadUseOfReferentialEquality
argument_list|(
name|SameFloatInstance
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertBadUseOfReferentialEquality
argument_list|(
name|SameDoubleInstance
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertBadUseOfReferentialEquality
argument_list|(
name|SameShortInstance
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertBadUseOfReferentialEquality
argument_list|(
name|SameByteInstance
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertBadUseOfReferentialEquality
argument_list|(
name|SameCharacterInstance
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertBadUseOfReferentialEquality
argument_list|(
name|SameBooleanInstance
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertBadUseOfReferentialEquality
argument_list|(
name|SameObjectInstance
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertBadUseOfReferentialEquality
argument_list|(
name|SameStringInstance
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertBadUseOfReferentialEquality
argument_list|(
name|SameInterfaceInstance
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
DECL|method|assertBadUseOfReferentialEquality (Class<?> cls)
specifier|private
name|void
name|assertBadUseOfReferentialEquality
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|cls
parameter_list|)
throws|throws
name|Exception
block|{
try|try
block|{
name|tester
operator|.
name|testEquals
argument_list|(
name|cls
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AssertionFailedError
name|expected
parameter_list|)
block|{
name|assertThat
argument_list|(
name|expected
operator|.
name|getMessage
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
name|cls
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|"("
argument_list|)
expr_stmt|;
return|return;
block|}
name|fail
argument_list|(
literal|"should have failed for "
operator|+
name|cls
argument_list|)
expr_stmt|;
block|}
DECL|method|testParameterNotInstantiableForEqualsTest ()
specifier|public
name|void
name|testParameterNotInstantiableForEqualsTest
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|tester
operator|.
name|doTestEquals
argument_list|(
name|ConstructorParameterNotInstantiable
operator|.
name|class
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"should have failed"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParameterNotInstantiableException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testNoDistinctValueForEqualsTest ()
specifier|public
name|void
name|testNoDistinctValueForEqualsTest
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|tester
operator|.
name|doTestEquals
argument_list|(
name|ConstructorParameterSingleValue
operator|.
name|class
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"should have failed"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParameterHasNoDistinctValueException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testConstructorThrowsForEqualsTest ()
specifier|public
name|void
name|testConstructorThrowsForEqualsTest
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|tester
operator|.
name|doTestEquals
argument_list|(
name|ConstructorThrows
operator|.
name|class
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"should have failed"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvocationTargetException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testFactoryMethodReturnsNullForEqualsTest ()
specifier|public
name|void
name|testFactoryMethodReturnsNullForEqualsTest
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|tester
operator|.
name|doTestEquals
argument_list|(
name|FactoryMethodReturnsNullAndAnnotated
operator|.
name|class
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"should have failed"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FactoryMethodReturnsNullException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testFactoryMethodReturnsNullButNotAnnotatedInEqualsTest ()
specifier|public
name|void
name|testFactoryMethodReturnsNullButNotAnnotatedInEqualsTest
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|tester
operator|.
name|testEquals
argument_list|(
name|FactoryMethodReturnsNullButNotAnnotated
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AssertionFailedError
name|expected
parameter_list|)
block|{
return|return;
block|}
name|fail
argument_list|(
literal|"should have failed"
argument_list|)
expr_stmt|;
block|}
DECL|method|testNoEqualsChecksOnEnum ()
specifier|public
name|void
name|testNoEqualsChecksOnEnum
parameter_list|()
throws|throws
name|Exception
block|{
name|tester
operator|.
name|testEquals
argument_list|(
name|OneConstantEnum
operator|.
name|class
argument_list|)
expr_stmt|;
name|tester
operator|.
name|testEquals
argument_list|(
name|NoConstantEnum
operator|.
name|class
argument_list|)
expr_stmt|;
name|tester
operator|.
name|testEquals
argument_list|(
name|TimeUnit
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
DECL|method|testNoEqualsChecksOnInterface ()
specifier|public
name|void
name|testNoEqualsChecksOnInterface
parameter_list|()
throws|throws
name|Exception
block|{
name|tester
operator|.
name|testEquals
argument_list|(
name|Runnable
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
DECL|method|testNoEqualsChecksOnAnnotation ()
specifier|public
name|void
name|testNoEqualsChecksOnAnnotation
parameter_list|()
throws|throws
name|Exception
block|{
name|tester
operator|.
name|testEquals
argument_list|(
name|MyAnnotation
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
DECL|method|testGoodNulls ()
specifier|public
name|void
name|testGoodNulls
parameter_list|()
throws|throws
name|Exception
block|{
name|tester
operator|.
name|testNulls
argument_list|(
name|GoodNulls
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
DECL|method|testNoNullCheckNeededDespitNotInstantiable ()
specifier|public
name|void
name|testNoNullCheckNeededDespitNotInstantiable
parameter_list|()
throws|throws
name|Exception
block|{
name|tester
operator|.
name|doTestNulls
argument_list|(
name|NoNullCheckNeededDespitNotInstantiable
operator|.
name|class
argument_list|,
name|Visibility
operator|.
name|PACKAGE
argument_list|)
expr_stmt|;
block|}
DECL|method|testNulls_interface ()
specifier|public
name|void
name|testNulls_interface
parameter_list|()
block|{
name|tester
operator|.
name|testNulls
argument_list|(
name|AnInterface
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
DECL|method|testNulls_abstractClass ()
specifier|public
name|void
name|testNulls_abstractClass
parameter_list|()
block|{
name|tester
operator|.
name|testNulls
argument_list|(
name|AnAbstractClass
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
DECL|method|testNulls_enum ()
specifier|public
name|void
name|testNulls_enum
parameter_list|()
throws|throws
name|Exception
block|{
name|tester
operator|.
name|testNulls
argument_list|(
name|OneConstantEnum
operator|.
name|class
argument_list|)
expr_stmt|;
name|tester
operator|.
name|testNulls
argument_list|(
name|NoConstantEnum
operator|.
name|class
argument_list|)
expr_stmt|;
name|tester
operator|.
name|testNulls
argument_list|(
name|TimeUnit
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
DECL|method|testNulls_parameterOptionalNotInstantiable ()
specifier|public
name|void
name|testNulls_parameterOptionalNotInstantiable
parameter_list|()
throws|throws
name|Exception
block|{
name|tester
operator|.
name|testNulls
argument_list|(
name|ConstructorParameterWithOptionalNotInstantiable
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
DECL|method|testEnumFailsToCheckNull ()
specifier|public
name|void
name|testEnumFailsToCheckNull
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|tester
operator|.
name|testNulls
argument_list|(
name|EnumFailsToCheckNull
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AssertionFailedError
name|expected
parameter_list|)
block|{
return|return;
block|}
name|fail
argument_list|(
literal|"should have failed"
argument_list|)
expr_stmt|;
block|}
DECL|method|testNoNullChecksOnInterface ()
specifier|public
name|void
name|testNoNullChecksOnInterface
parameter_list|()
throws|throws
name|Exception
block|{
name|tester
operator|.
name|testNulls
argument_list|(
name|Runnable
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
DECL|method|testNoNullChecksOnAnnotation ()
specifier|public
name|void
name|testNoNullChecksOnAnnotation
parameter_list|()
throws|throws
name|Exception
block|{
name|tester
operator|.
name|testNulls
argument_list|(
name|MyAnnotation
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
DECL|method|testBadNulls ()
specifier|public
name|void
name|testBadNulls
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|tester
operator|.
name|testNulls
argument_list|(
name|BadNulls
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AssertionFailedError
name|expected
parameter_list|)
block|{
return|return;
block|}
name|fail
argument_list|(
literal|"should have failed"
argument_list|)
expr_stmt|;
block|}
DECL|method|testInstantiate_factoryMethodReturnsNullButNotAnnotated ()
specifier|public
name|void
name|testInstantiate_factoryMethodReturnsNullButNotAnnotated
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|tester
operator|.
name|instantiate
argument_list|(
name|FactoryMethodReturnsNullButNotAnnotated
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AssertionFailedError
name|expected
parameter_list|)
block|{
name|assertThat
argument_list|(
name|expected
operator|.
name|getMessage
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
literal|"@NullableDecl"
argument_list|)
expr_stmt|;
return|return;
block|}
name|fail
argument_list|(
literal|"should have failed"
argument_list|)
expr_stmt|;
block|}
DECL|method|testInstantiate_factoryMethodReturnsNullAndAnnotated ()
specifier|public
name|void
name|testInstantiate_factoryMethodReturnsNullAndAnnotated
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|tester
operator|.
name|instantiate
argument_list|(
name|FactoryMethodReturnsNullAndAnnotated
operator|.
name|class
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"should have failed"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FactoryMethodReturnsNullException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testInstantiate_factoryMethodAcceptsNull ()
specifier|public
name|void
name|testInstantiate_factoryMethodAcceptsNull
parameter_list|()
throws|throws
name|Exception
block|{
name|assertNull
argument_list|(
name|tester
operator|.
name|instantiate
argument_list|(
name|FactoryMethodAcceptsNull
operator|.
name|class
argument_list|)
operator|.
name|name
argument_list|)
expr_stmt|;
block|}
DECL|method|testInstantiate_factoryMethodDoesNotAcceptNull ()
specifier|public
name|void
name|testInstantiate_factoryMethodDoesNotAcceptNull
parameter_list|()
throws|throws
name|Exception
block|{
name|assertNotNull
argument_list|(
name|tester
operator|.
name|instantiate
argument_list|(
name|FactoryMethodDoesNotAcceptNull
operator|.
name|class
argument_list|)
operator|.
name|name
argument_list|)
expr_stmt|;
block|}
DECL|method|testInstantiate_constructorAcceptsNull ()
specifier|public
name|void
name|testInstantiate_constructorAcceptsNull
parameter_list|()
throws|throws
name|Exception
block|{
name|assertNull
argument_list|(
name|tester
operator|.
name|instantiate
argument_list|(
name|ConstructorAcceptsNull
operator|.
name|class
argument_list|)
operator|.
name|name
argument_list|)
expr_stmt|;
block|}
DECL|method|testInstantiate_constructorDoesNotAcceptNull ()
specifier|public
name|void
name|testInstantiate_constructorDoesNotAcceptNull
parameter_list|()
throws|throws
name|Exception
block|{
name|assertNotNull
argument_list|(
name|tester
operator|.
name|instantiate
argument_list|(
name|ConstructorDoesNotAcceptNull
operator|.
name|class
argument_list|)
operator|.
name|name
argument_list|)
expr_stmt|;
block|}
DECL|method|testInstantiate_notInstantiable ()
specifier|public
name|void
name|testInstantiate_notInstantiable
parameter_list|()
throws|throws
name|Exception
block|{
name|assertNull
argument_list|(
name|tester
operator|.
name|instantiate
argument_list|(
name|NotInstantiable
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testInstantiate_noConstantEnum ()
specifier|public
name|void
name|testInstantiate_noConstantEnum
parameter_list|()
throws|throws
name|Exception
block|{
name|assertNull
argument_list|(
name|tester
operator|.
name|instantiate
argument_list|(
name|NoConstantEnum
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testInstantiate_oneConstantEnum ()
specifier|public
name|void
name|testInstantiate_oneConstantEnum
parameter_list|()
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
name|OneConstantEnum
operator|.
name|A
argument_list|,
name|tester
operator|.
name|instantiate
argument_list|(
name|OneConstantEnum
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testInstantiate_interface ()
specifier|public
name|void
name|testInstantiate_interface
parameter_list|()
throws|throws
name|Exception
block|{
name|assertNull
argument_list|(
name|tester
operator|.
name|instantiate
argument_list|(
name|Runnable
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testInstantiate_abstractClass ()
specifier|public
name|void
name|testInstantiate_abstractClass
parameter_list|()
throws|throws
name|Exception
block|{
name|assertNull
argument_list|(
name|tester
operator|.
name|instantiate
argument_list|(
name|AbstractList
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testInstantiate_annotation ()
specifier|public
name|void
name|testInstantiate_annotation
parameter_list|()
throws|throws
name|Exception
block|{
name|assertNull
argument_list|(
name|tester
operator|.
name|instantiate
argument_list|(
name|MyAnnotation
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testInstantiate_setDefault ()
specifier|public
name|void
name|testInstantiate_setDefault
parameter_list|()
throws|throws
name|Exception
block|{
name|NotInstantiable
name|x
init|=
operator|new
name|NotInstantiable
argument_list|()
decl_stmt|;
name|tester
operator|.
name|setDefault
argument_list|(
name|NotInstantiable
operator|.
name|class
argument_list|,
name|x
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|tester
operator|.
name|instantiate
argument_list|(
name|ConstructorParameterNotInstantiable
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testSetDistinctValues_equalInstances ()
specifier|public
name|void
name|testSetDistinctValues_equalInstances
parameter_list|()
block|{
try|try
block|{
name|tester
operator|.
name|setDistinctValues
argument_list|(
name|String
operator|.
name|class
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testInstantiate_setDistinctValues ()
specifier|public
name|void
name|testInstantiate_setDistinctValues
parameter_list|()
throws|throws
name|Exception
block|{
name|NotInstantiable
name|x
init|=
operator|new
name|NotInstantiable
argument_list|()
decl_stmt|;
name|NotInstantiable
name|y
init|=
operator|new
name|NotInstantiable
argument_list|()
decl_stmt|;
name|tester
operator|.
name|setDistinctValues
argument_list|(
name|NotInstantiable
operator|.
name|class
argument_list|,
name|x
argument_list|,
name|y
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|tester
operator|.
name|instantiate
argument_list|(
name|ConstructorParameterNotInstantiable
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|tester
operator|.
name|testEquals
argument_list|(
name|ConstructorParameterMapOfNotInstantiable
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
DECL|method|testInstantiate_constructorThrows ()
specifier|public
name|void
name|testInstantiate_constructorThrows
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|tester
operator|.
name|instantiate
argument_list|(
name|ConstructorThrows
operator|.
name|class
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvocationTargetException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testInstantiate_factoryMethodThrows ()
specifier|public
name|void
name|testInstantiate_factoryMethodThrows
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|tester
operator|.
name|instantiate
argument_list|(
name|FactoryMethodThrows
operator|.
name|class
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvocationTargetException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testInstantiate_constructorParameterNotInstantiable ()
specifier|public
name|void
name|testInstantiate_constructorParameterNotInstantiable
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|tester
operator|.
name|instantiate
argument_list|(
name|ConstructorParameterNotInstantiable
operator|.
name|class
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParameterNotInstantiableException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testInstantiate_factoryMethodParameterNotInstantiable ()
specifier|public
name|void
name|testInstantiate_factoryMethodParameterNotInstantiable
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|tester
operator|.
name|instantiate
argument_list|(
name|FactoryMethodParameterNotInstantiable
operator|.
name|class
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParameterNotInstantiableException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testInstantiate_instantiableFactoryMethodChosen ()
specifier|public
name|void
name|testInstantiate_instantiableFactoryMethodChosen
parameter_list|()
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
literal|"good"
argument_list|,
name|tester
operator|.
name|instantiate
argument_list|(
name|InstantiableFactoryMethodChosen
operator|.
name|class
argument_list|)
operator|.
name|name
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AndroidIncompatible
comment|// TODO(cpovirk): ClassNotFoundException... ClassSanityTesterTest$AnInterface
DECL|method|testInterfaceProxySerializable ()
specifier|public
name|void
name|testInterfaceProxySerializable
parameter_list|()
throws|throws
name|Exception
block|{
name|SerializableTester
operator|.
name|reserializeAndAssert
argument_list|(
name|tester
operator|.
name|instantiate
argument_list|(
name|HasAnInterface
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testReturnValuesFromAnotherPackageIgnoredForNullTests ()
specifier|public
name|void
name|testReturnValuesFromAnotherPackageIgnoredForNullTests
parameter_list|()
throws|throws
name|Exception
block|{
operator|new
name|ClassSanityTester
argument_list|()
operator|.
name|forAllPublicStaticMethods
argument_list|(
name|JdkObjectFactory
operator|.
name|class
argument_list|)
operator|.
name|testNulls
argument_list|()
expr_stmt|;
block|}
comment|/** String doesn't check nulls as we expect. But the framework should ignore. */
DECL|class|JdkObjectFactory
specifier|private
specifier|static
class|class
name|JdkObjectFactory
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
comment|// Called by reflection
DECL|method|create ()
specifier|public
specifier|static
name|Object
name|create
parameter_list|()
block|{
return|return
operator|new
name|ArrayList
argument_list|<>
argument_list|()
return|;
block|}
block|}
DECL|class|HasAnInterface
specifier|static
class|class
name|HasAnInterface
implements|implements
name|Serializable
block|{
DECL|field|i
specifier|private
specifier|final
name|AnInterface
name|i
decl_stmt|;
DECL|method|HasAnInterface (AnInterface i)
specifier|public
name|HasAnInterface
parameter_list|(
name|AnInterface
name|i
parameter_list|)
block|{
name|this
operator|.
name|i
operator|=
name|i
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|equals (@ullableDecl Object obj)
specifier|public
name|boolean
name|equals
parameter_list|(
annotation|@
name|NullableDecl
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|obj
operator|instanceof
name|HasAnInterface
condition|)
block|{
name|HasAnInterface
name|that
init|=
operator|(
name|HasAnInterface
operator|)
name|obj
decl_stmt|;
return|return
name|i
operator|.
name|equals
argument_list|(
name|that
operator|.
name|i
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|i
operator|.
name|hashCode
argument_list|()
return|;
block|}
block|}
DECL|class|InstantiableFactoryMethodChosen
specifier|static
class|class
name|InstantiableFactoryMethodChosen
block|{
DECL|field|name
specifier|final
name|String
name|name
decl_stmt|;
DECL|method|InstantiableFactoryMethodChosen (String name)
specifier|private
name|InstantiableFactoryMethodChosen
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
DECL|method|InstantiableFactoryMethodChosen (NotInstantiable x)
specifier|public
name|InstantiableFactoryMethodChosen
parameter_list|(
name|NotInstantiable
name|x
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|x
argument_list|)
expr_stmt|;
name|this
operator|.
name|name
operator|=
literal|"x1"
expr_stmt|;
block|}
DECL|method|create (NotInstantiable x)
specifier|public
specifier|static
name|InstantiableFactoryMethodChosen
name|create
parameter_list|(
name|NotInstantiable
name|x
parameter_list|)
block|{
return|return
operator|new
name|InstantiableFactoryMethodChosen
argument_list|(
name|x
argument_list|)
return|;
block|}
DECL|method|create (String s)
specifier|public
specifier|static
name|InstantiableFactoryMethodChosen
name|create
parameter_list|(
name|String
name|s
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|s
argument_list|)
expr_stmt|;
return|return
operator|new
name|InstantiableFactoryMethodChosen
argument_list|(
literal|"good"
argument_list|)
return|;
block|}
block|}
DECL|method|testInstantiate_instantiableConstructorChosen ()
specifier|public
name|void
name|testInstantiate_instantiableConstructorChosen
parameter_list|()
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
literal|"good"
argument_list|,
name|tester
operator|.
name|instantiate
argument_list|(
name|InstantiableConstructorChosen
operator|.
name|class
argument_list|)
operator|.
name|name
argument_list|)
expr_stmt|;
block|}
DECL|method|testEquals_setOfNonInstantiable ()
specifier|public
name|void
name|testEquals_setOfNonInstantiable
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
operator|new
name|ClassSanityTester
argument_list|()
operator|.
name|doTestEquals
argument_list|(
name|SetWrapper
operator|.
name|class
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParameterNotInstantiableException
name|expected
parameter_list|)
block|{     }
block|}
DECL|class|Wrapper
specifier|private
specifier|abstract
specifier|static
class|class
name|Wrapper
block|{
DECL|field|wrapped
specifier|private
specifier|final
name|Object
name|wrapped
decl_stmt|;
DECL|method|Wrapper (Object wrapped)
name|Wrapper
parameter_list|(
name|Object
name|wrapped
parameter_list|)
block|{
name|this
operator|.
name|wrapped
operator|=
name|checkNotNull
argument_list|(
name|wrapped
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|equals (@ullableDecl Object obj)
specifier|public
name|boolean
name|equals
parameter_list|(
annotation|@
name|NullableDecl
name|Object
name|obj
parameter_list|)
block|{
comment|// In general getClass().isInstance() is bad for equals.
comment|// But here we fully control the subclasses to ensure symmetry.
if|if
condition|(
name|getClass
argument_list|()
operator|.
name|isInstance
argument_list|(
name|obj
argument_list|)
condition|)
block|{
name|Wrapper
name|that
init|=
operator|(
name|Wrapper
operator|)
name|obj
decl_stmt|;
return|return
name|wrapped
operator|.
name|equals
argument_list|(
name|that
operator|.
name|wrapped
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|wrapped
operator|.
name|hashCode
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|wrapped
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
DECL|class|SetWrapper
specifier|private
specifier|static
class|class
name|SetWrapper
extends|extends
name|Wrapper
block|{
DECL|method|SetWrapper (Set<NotInstantiable> wrapped)
specifier|public
name|SetWrapper
parameter_list|(
name|Set
argument_list|<
name|NotInstantiable
argument_list|>
name|wrapped
parameter_list|)
block|{
name|super
argument_list|(
name|wrapped
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|InstantiableConstructorChosen
specifier|static
class|class
name|InstantiableConstructorChosen
block|{
DECL|field|name
specifier|final
name|String
name|name
decl_stmt|;
DECL|method|InstantiableConstructorChosen (String name)
specifier|public
name|InstantiableConstructorChosen
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|this
operator|.
name|name
operator|=
literal|"good"
expr_stmt|;
block|}
DECL|method|InstantiableConstructorChosen (NotInstantiable x)
specifier|public
name|InstantiableConstructorChosen
parameter_list|(
name|NotInstantiable
name|x
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|x
argument_list|)
expr_stmt|;
name|this
operator|.
name|name
operator|=
literal|"x1"
expr_stmt|;
block|}
DECL|method|create (NotInstantiable x)
specifier|public
specifier|static
name|InstantiableFactoryMethodChosen
name|create
parameter_list|(
name|NotInstantiable
name|x
parameter_list|)
block|{
return|return
operator|new
name|InstantiableFactoryMethodChosen
argument_list|(
name|x
argument_list|)
return|;
block|}
block|}
DECL|class|GoodEquals
specifier|static
class|class
name|GoodEquals
block|{
DECL|field|a
specifier|private
specifier|final
name|String
name|a
decl_stmt|;
DECL|field|b
specifier|private
specifier|final
name|int
name|b
decl_stmt|;
DECL|method|GoodEquals (String a, int b)
specifier|private
name|GoodEquals
parameter_list|(
name|String
name|a
parameter_list|,
name|int
name|b
parameter_list|)
block|{
name|this
operator|.
name|a
operator|=
name|checkNotNull
argument_list|(
name|a
argument_list|)
expr_stmt|;
name|this
operator|.
name|b
operator|=
name|b
expr_stmt|;
block|}
comment|// ignored by testEquals()
DECL|method|GoodEquals (@uppressWarningsR) NotInstantiable x)
name|GoodEquals
parameter_list|(
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
name|NotInstantiable
name|x
parameter_list|)
block|{
name|this
operator|.
name|a
operator|=
literal|"x"
expr_stmt|;
name|this
operator|.
name|b
operator|=
operator|-
literal|1
expr_stmt|;
block|}
comment|// will keep trying
DECL|method|GoodEquals (@uppressWarningsR) NotInstantiable x, int b)
specifier|public
name|GoodEquals
parameter_list|(
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
name|NotInstantiable
name|x
parameter_list|,
name|int
name|b
parameter_list|)
block|{
name|this
operator|.
name|a
operator|=
literal|"x"
expr_stmt|;
name|this
operator|.
name|b
operator|=
name|b
expr_stmt|;
block|}
comment|// keep trying
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
DECL|method|create (int a, int b)
specifier|static
name|GoodEquals
name|create
parameter_list|(
name|int
name|a
parameter_list|,
name|int
name|b
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|()
throw|;
block|}
comment|// Good!
DECL|method|create (String a, int b)
specifier|static
name|GoodEquals
name|create
parameter_list|(
name|String
name|a
parameter_list|,
name|int
name|b
parameter_list|)
block|{
return|return
operator|new
name|GoodEquals
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
return|;
block|}
comment|// keep trying
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
annotation|@
name|NullableDecl
DECL|method|createMayReturnNull (int a, int b)
specifier|public
specifier|static
name|GoodEquals
name|createMayReturnNull
parameter_list|(
name|int
name|a
parameter_list|,
name|int
name|b
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|equals (@ullableDecl Object obj)
specifier|public
name|boolean
name|equals
parameter_list|(
annotation|@
name|NullableDecl
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|obj
operator|instanceof
name|GoodEquals
condition|)
block|{
name|GoodEquals
name|that
init|=
operator|(
name|GoodEquals
operator|)
name|obj
decl_stmt|;
return|return
name|a
operator|.
name|equals
argument_list|(
name|that
operator|.
name|a
argument_list|)
operator|&&
name|b
operator|==
name|that
operator|.
name|b
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
block|}
DECL|class|BadEquals
specifier|static
class|class
name|BadEquals
block|{
DECL|method|BadEquals ()
specifier|public
name|BadEquals
parameter_list|()
block|{}
comment|// ignored by testEquals() since it has less parameters.
DECL|method|create (@uppressWarningsR) @ullableDecl String s)
specifier|public
specifier|static
name|BadEquals
name|create
parameter_list|(
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
annotation|@
name|NullableDecl
name|String
name|s
parameter_list|)
block|{
return|return
operator|new
name|BadEquals
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|equals (@ullableDecl Object obj)
specifier|public
name|boolean
name|equals
parameter_list|(
annotation|@
name|NullableDecl
name|Object
name|obj
parameter_list|)
block|{
return|return
name|obj
operator|instanceof
name|BadEquals
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
block|}
DECL|class|SameIntegerInstance
specifier|static
class|class
name|SameIntegerInstance
block|{
DECL|field|i
specifier|private
specifier|final
name|Integer
name|i
decl_stmt|;
DECL|method|SameIntegerInstance (Integer i)
specifier|public
name|SameIntegerInstance
parameter_list|(
name|Integer
name|i
parameter_list|)
block|{
name|this
operator|.
name|i
operator|=
name|checkNotNull
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|i
operator|.
name|hashCode
argument_list|()
return|;
block|}
annotation|@
name|Override
annotation|@
name|SuppressWarnings
argument_list|(
literal|"NumericEquality"
argument_list|)
DECL|method|equals (Object obj)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|obj
operator|instanceof
name|SameIntegerInstance
condition|)
block|{
name|SameIntegerInstance
name|that
init|=
operator|(
name|SameIntegerInstance
operator|)
name|obj
decl_stmt|;
return|return
name|i
operator|==
name|that
operator|.
name|i
return|;
block|}
return|return
literal|false
return|;
block|}
block|}
DECL|class|SameLongInstance
specifier|static
class|class
name|SameLongInstance
block|{
DECL|field|i
specifier|private
specifier|final
name|Long
name|i
decl_stmt|;
DECL|method|SameLongInstance (Long i)
specifier|public
name|SameLongInstance
parameter_list|(
name|Long
name|i
parameter_list|)
block|{
name|this
operator|.
name|i
operator|=
name|checkNotNull
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|i
operator|.
name|hashCode
argument_list|()
return|;
block|}
annotation|@
name|Override
annotation|@
name|SuppressWarnings
argument_list|(
literal|"NumericEquality"
argument_list|)
DECL|method|equals (Object obj)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|obj
operator|instanceof
name|SameLongInstance
condition|)
block|{
name|SameLongInstance
name|that
init|=
operator|(
name|SameLongInstance
operator|)
name|obj
decl_stmt|;
return|return
name|i
operator|==
name|that
operator|.
name|i
return|;
block|}
return|return
literal|false
return|;
block|}
block|}
DECL|class|SameFloatInstance
specifier|static
class|class
name|SameFloatInstance
block|{
DECL|field|i
specifier|private
specifier|final
name|Float
name|i
decl_stmt|;
DECL|method|SameFloatInstance (Float i)
specifier|public
name|SameFloatInstance
parameter_list|(
name|Float
name|i
parameter_list|)
block|{
name|this
operator|.
name|i
operator|=
name|checkNotNull
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|i
operator|.
name|hashCode
argument_list|()
return|;
block|}
annotation|@
name|Override
annotation|@
name|SuppressWarnings
argument_list|(
literal|"NumericEquality"
argument_list|)
DECL|method|equals (Object obj)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|obj
operator|instanceof
name|SameFloatInstance
condition|)
block|{
name|SameFloatInstance
name|that
init|=
operator|(
name|SameFloatInstance
operator|)
name|obj
decl_stmt|;
return|return
name|i
operator|==
name|that
operator|.
name|i
return|;
block|}
return|return
literal|false
return|;
block|}
block|}
DECL|class|SameDoubleInstance
specifier|static
class|class
name|SameDoubleInstance
block|{
DECL|field|i
specifier|private
specifier|final
name|Double
name|i
decl_stmt|;
DECL|method|SameDoubleInstance (Double i)
specifier|public
name|SameDoubleInstance
parameter_list|(
name|Double
name|i
parameter_list|)
block|{
name|this
operator|.
name|i
operator|=
name|checkNotNull
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|i
operator|.
name|hashCode
argument_list|()
return|;
block|}
annotation|@
name|Override
annotation|@
name|SuppressWarnings
argument_list|(
literal|"NumericEquality"
argument_list|)
DECL|method|equals (Object obj)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|obj
operator|instanceof
name|SameDoubleInstance
condition|)
block|{
name|SameDoubleInstance
name|that
init|=
operator|(
name|SameDoubleInstance
operator|)
name|obj
decl_stmt|;
return|return
name|i
operator|==
name|that
operator|.
name|i
return|;
block|}
return|return
literal|false
return|;
block|}
block|}
DECL|class|SameShortInstance
specifier|static
class|class
name|SameShortInstance
block|{
DECL|field|i
specifier|private
specifier|final
name|Short
name|i
decl_stmt|;
DECL|method|SameShortInstance (Short i)
specifier|public
name|SameShortInstance
parameter_list|(
name|Short
name|i
parameter_list|)
block|{
name|this
operator|.
name|i
operator|=
name|checkNotNull
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|i
operator|.
name|hashCode
argument_list|()
return|;
block|}
annotation|@
name|Override
annotation|@
name|SuppressWarnings
argument_list|(
literal|"NumericEquality"
argument_list|)
DECL|method|equals (Object obj)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|obj
operator|instanceof
name|SameShortInstance
condition|)
block|{
name|SameShortInstance
name|that
init|=
operator|(
name|SameShortInstance
operator|)
name|obj
decl_stmt|;
return|return
name|i
operator|==
name|that
operator|.
name|i
return|;
block|}
return|return
literal|false
return|;
block|}
block|}
DECL|class|SameByteInstance
specifier|static
class|class
name|SameByteInstance
block|{
DECL|field|i
specifier|private
specifier|final
name|Byte
name|i
decl_stmt|;
DECL|method|SameByteInstance (Byte i)
specifier|public
name|SameByteInstance
parameter_list|(
name|Byte
name|i
parameter_list|)
block|{
name|this
operator|.
name|i
operator|=
name|checkNotNull
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|i
operator|.
name|hashCode
argument_list|()
return|;
block|}
annotation|@
name|Override
annotation|@
name|SuppressWarnings
argument_list|(
literal|"NumericEquality"
argument_list|)
DECL|method|equals (Object obj)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|obj
operator|instanceof
name|SameByteInstance
condition|)
block|{
name|SameByteInstance
name|that
init|=
operator|(
name|SameByteInstance
operator|)
name|obj
decl_stmt|;
return|return
name|i
operator|==
name|that
operator|.
name|i
return|;
block|}
return|return
literal|false
return|;
block|}
block|}
DECL|class|SameCharacterInstance
specifier|static
class|class
name|SameCharacterInstance
block|{
DECL|field|i
specifier|private
specifier|final
name|Character
name|i
decl_stmt|;
DECL|method|SameCharacterInstance (Character i)
specifier|public
name|SameCharacterInstance
parameter_list|(
name|Character
name|i
parameter_list|)
block|{
name|this
operator|.
name|i
operator|=
name|checkNotNull
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|i
operator|.
name|hashCode
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|equals (Object obj)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|obj
operator|instanceof
name|SameCharacterInstance
condition|)
block|{
name|SameCharacterInstance
name|that
init|=
operator|(
name|SameCharacterInstance
operator|)
name|obj
decl_stmt|;
return|return
name|i
operator|==
name|that
operator|.
name|i
return|;
block|}
return|return
literal|false
return|;
block|}
block|}
DECL|class|SameBooleanInstance
specifier|static
class|class
name|SameBooleanInstance
block|{
DECL|field|i
specifier|private
specifier|final
name|Boolean
name|i
decl_stmt|;
DECL|method|SameBooleanInstance (Boolean i)
specifier|public
name|SameBooleanInstance
parameter_list|(
name|Boolean
name|i
parameter_list|)
block|{
name|this
operator|.
name|i
operator|=
name|checkNotNull
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|i
operator|.
name|hashCode
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|equals (Object obj)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|obj
operator|instanceof
name|SameBooleanInstance
condition|)
block|{
name|SameBooleanInstance
name|that
init|=
operator|(
name|SameBooleanInstance
operator|)
name|obj
decl_stmt|;
return|return
name|i
operator|==
name|that
operator|.
name|i
return|;
block|}
return|return
literal|false
return|;
block|}
block|}
DECL|class|SameStringInstance
specifier|static
class|class
name|SameStringInstance
block|{
DECL|field|s
specifier|private
specifier|final
name|String
name|s
decl_stmt|;
DECL|method|SameStringInstance (String s)
specifier|public
name|SameStringInstance
parameter_list|(
name|String
name|s
parameter_list|)
block|{
name|this
operator|.
name|s
operator|=
name|checkNotNull
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|s
operator|.
name|hashCode
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|equals (Object obj)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|obj
operator|instanceof
name|SameStringInstance
condition|)
block|{
name|SameStringInstance
name|that
init|=
operator|(
name|SameStringInstance
operator|)
name|obj
decl_stmt|;
return|return
name|s
operator|==
name|that
operator|.
name|s
return|;
block|}
return|return
literal|false
return|;
block|}
block|}
DECL|class|SameObjectInstance
specifier|static
class|class
name|SameObjectInstance
block|{
DECL|field|s
specifier|private
specifier|final
name|Object
name|s
decl_stmt|;
DECL|method|SameObjectInstance (Object s)
specifier|public
name|SameObjectInstance
parameter_list|(
name|Object
name|s
parameter_list|)
block|{
name|this
operator|.
name|s
operator|=
name|checkNotNull
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|s
operator|.
name|hashCode
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|equals (Object obj)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|obj
operator|instanceof
name|SameObjectInstance
condition|)
block|{
name|SameObjectInstance
name|that
init|=
operator|(
name|SameObjectInstance
operator|)
name|obj
decl_stmt|;
return|return
name|s
operator|==
name|that
operator|.
name|s
return|;
block|}
return|return
literal|false
return|;
block|}
block|}
DECL|class|SameInterfaceInstance
specifier|static
class|class
name|SameInterfaceInstance
block|{
DECL|field|s
specifier|private
specifier|final
name|Runnable
name|s
decl_stmt|;
DECL|method|SameInterfaceInstance (Runnable s)
specifier|public
name|SameInterfaceInstance
parameter_list|(
name|Runnable
name|s
parameter_list|)
block|{
name|this
operator|.
name|s
operator|=
name|checkNotNull
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|s
operator|.
name|hashCode
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|equals (Object obj)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|obj
operator|instanceof
name|SameInterfaceInstance
condition|)
block|{
name|SameInterfaceInstance
name|that
init|=
operator|(
name|SameInterfaceInstance
operator|)
name|obj
decl_stmt|;
return|return
name|s
operator|==
name|that
operator|.
name|s
return|;
block|}
return|return
literal|false
return|;
block|}
block|}
DECL|class|SameListInstance
specifier|static
class|class
name|SameListInstance
block|{
DECL|field|s
specifier|private
specifier|final
name|List
argument_list|<
name|?
argument_list|>
name|s
decl_stmt|;
DECL|method|SameListInstance (List<?> s)
specifier|public
name|SameListInstance
parameter_list|(
name|List
argument_list|<
name|?
argument_list|>
name|s
parameter_list|)
block|{
name|this
operator|.
name|s
operator|=
name|checkNotNull
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|System
operator|.
name|identityHashCode
argument_list|(
name|s
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|equals (Object obj)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|obj
operator|instanceof
name|SameListInstance
condition|)
block|{
name|SameListInstance
name|that
init|=
operator|(
name|SameListInstance
operator|)
name|obj
decl_stmt|;
return|return
name|s
operator|==
name|that
operator|.
name|s
return|;
block|}
return|return
literal|false
return|;
block|}
block|}
DECL|class|WithStreamParameter
specifier|static
class|class
name|WithStreamParameter
block|{
DECL|field|list
specifier|private
specifier|final
name|List
argument_list|<
name|?
argument_list|>
name|list
decl_stmt|;
comment|// This should be ignored.
DECL|method|WithStreamParameter (Stream<?> s, String str)
specifier|public
name|WithStreamParameter
parameter_list|(
name|Stream
argument_list|<
name|?
argument_list|>
name|s
parameter_list|,
name|String
name|str
parameter_list|)
block|{
name|this
operator|.
name|list
operator|=
name|s
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
expr_stmt|;
name|checkNotNull
argument_list|(
name|str
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|UsesReferentialEquality
specifier|static
class|class
name|UsesReferentialEquality
block|{
DECL|field|s
specifier|private
specifier|final
name|ReferentialEquality
name|s
decl_stmt|;
DECL|method|UsesReferentialEquality (ReferentialEquality s)
specifier|public
name|UsesReferentialEquality
parameter_list|(
name|ReferentialEquality
name|s
parameter_list|)
block|{
name|this
operator|.
name|s
operator|=
name|checkNotNull
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|s
operator|.
name|hashCode
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|equals (Object obj)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|obj
operator|instanceof
name|UsesReferentialEquality
condition|)
block|{
name|UsesReferentialEquality
name|that
init|=
operator|(
name|UsesReferentialEquality
operator|)
name|obj
decl_stmt|;
return|return
name|s
operator|==
name|that
operator|.
name|s
return|;
block|}
return|return
literal|false
return|;
block|}
block|}
DECL|class|UsesEnum
specifier|static
class|class
name|UsesEnum
block|{
DECL|field|s
specifier|private
specifier|final
name|TimeUnit
name|s
decl_stmt|;
DECL|method|UsesEnum (TimeUnit s)
specifier|public
name|UsesEnum
parameter_list|(
name|TimeUnit
name|s
parameter_list|)
block|{
name|this
operator|.
name|s
operator|=
name|checkNotNull
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|s
operator|.
name|hashCode
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|equals (Object obj)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|obj
operator|instanceof
name|UsesEnum
condition|)
block|{
name|UsesEnum
name|that
init|=
operator|(
name|UsesEnum
operator|)
name|obj
decl_stmt|;
return|return
name|s
operator|==
name|that
operator|.
name|s
return|;
block|}
return|return
literal|false
return|;
block|}
block|}
DECL|class|ReferentialEquality
specifier|public
specifier|static
class|class
name|ReferentialEquality
block|{
DECL|method|ReferentialEquality ()
specifier|public
name|ReferentialEquality
parameter_list|()
block|{}
block|}
DECL|class|BadEqualsWithParameterizedType
specifier|static
class|class
name|BadEqualsWithParameterizedType
block|{
comment|// ignored by testEquals() since it has less parameters.
DECL|method|BadEqualsWithParameterizedType ()
specifier|public
name|BadEqualsWithParameterizedType
parameter_list|()
block|{}
DECL|method|create ( @uppressWarningsR) ImmutableList<Iterable<? extends String>> s)
specifier|public
specifier|static
name|BadEqualsWithParameterizedType
name|create
parameter_list|(
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
name|ImmutableList
argument_list|<
name|Iterable
argument_list|<
name|?
extends|extends
name|String
argument_list|>
argument_list|>
name|s
parameter_list|)
block|{
return|return
operator|new
name|BadEqualsWithParameterizedType
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|equals (@ullableDecl Object obj)
specifier|public
name|boolean
name|equals
parameter_list|(
annotation|@
name|NullableDecl
name|Object
name|obj
parameter_list|)
block|{
return|return
name|obj
operator|instanceof
name|BadEqualsWithParameterizedType
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
block|}
DECL|class|GoodNulls
specifier|static
class|class
name|GoodNulls
block|{
DECL|method|GoodNulls (String s)
specifier|public
name|GoodNulls
parameter_list|(
name|String
name|s
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
DECL|method|rejectNull (String s)
specifier|public
name|void
name|rejectNull
parameter_list|(
name|String
name|s
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|BadNulls
specifier|public
specifier|static
class|class
name|BadNulls
block|{
DECL|method|failsToRejectNull (@uppressWarningsR) String s)
specifier|public
name|void
name|failsToRejectNull
parameter_list|(
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
name|String
name|s
parameter_list|)
block|{}
block|}
DECL|class|NoNullCheckNeededDespitNotInstantiable
specifier|public
specifier|static
class|class
name|NoNullCheckNeededDespitNotInstantiable
block|{
DECL|method|NoNullCheckNeededDespitNotInstantiable (NotInstantiable x)
specifier|public
name|NoNullCheckNeededDespitNotInstantiable
parameter_list|(
name|NotInstantiable
name|x
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|x
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
comment|// reflected
DECL|method|primitiveOnly (int i)
name|void
name|primitiveOnly
parameter_list|(
name|int
name|i
parameter_list|)
block|{}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
comment|// reflected
DECL|method|nullableOnly (@ullableDecl String s)
name|void
name|nullableOnly
parameter_list|(
annotation|@
name|NullableDecl
name|String
name|s
parameter_list|)
block|{}
DECL|method|noParameter ()
specifier|public
name|void
name|noParameter
parameter_list|()
block|{}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
comment|// reflected
DECL|method|primitiveAndNullable (@ullableDecl String s, int i)
name|void
name|primitiveAndNullable
parameter_list|(
annotation|@
name|NullableDecl
name|String
name|s
parameter_list|,
name|int
name|i
parameter_list|)
block|{}
block|}
DECL|class|FactoryMethodReturnsNullButNotAnnotated
specifier|static
class|class
name|FactoryMethodReturnsNullButNotAnnotated
block|{
DECL|method|FactoryMethodReturnsNullButNotAnnotated ()
specifier|private
name|FactoryMethodReturnsNullButNotAnnotated
parameter_list|()
block|{}
DECL|method|returnsNull ()
specifier|static
name|FactoryMethodReturnsNullButNotAnnotated
name|returnsNull
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
block|}
DECL|class|FactoryMethodReturnsNullAndAnnotated
specifier|static
class|class
name|FactoryMethodReturnsNullAndAnnotated
block|{
DECL|method|FactoryMethodReturnsNullAndAnnotated ()
specifier|private
name|FactoryMethodReturnsNullAndAnnotated
parameter_list|()
block|{}
annotation|@
name|NullableDecl
DECL|method|returnsNull ()
specifier|public
specifier|static
name|FactoryMethodReturnsNullAndAnnotated
name|returnsNull
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
block|}
DECL|class|FactoryMethodAcceptsNull
specifier|static
class|class
name|FactoryMethodAcceptsNull
block|{
DECL|field|name
specifier|final
name|String
name|name
decl_stmt|;
DECL|method|FactoryMethodAcceptsNull (String name)
specifier|private
name|FactoryMethodAcceptsNull
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
DECL|method|create (@ullableDecl String name)
specifier|static
name|FactoryMethodAcceptsNull
name|create
parameter_list|(
annotation|@
name|NullableDecl
name|String
name|name
parameter_list|)
block|{
return|return
operator|new
name|FactoryMethodAcceptsNull
argument_list|(
name|name
argument_list|)
return|;
block|}
block|}
DECL|class|FactoryMethodDoesNotAcceptNull
specifier|static
class|class
name|FactoryMethodDoesNotAcceptNull
block|{
DECL|field|name
specifier|final
name|String
name|name
decl_stmt|;
DECL|method|FactoryMethodDoesNotAcceptNull (String name)
specifier|private
name|FactoryMethodDoesNotAcceptNull
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|checkNotNull
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
DECL|method|create (String name)
specifier|public
specifier|static
name|FactoryMethodDoesNotAcceptNull
name|create
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
operator|new
name|FactoryMethodDoesNotAcceptNull
argument_list|(
name|name
argument_list|)
return|;
block|}
block|}
DECL|class|ConstructorAcceptsNull
specifier|static
class|class
name|ConstructorAcceptsNull
block|{
DECL|field|name
specifier|final
name|String
name|name
decl_stmt|;
DECL|method|ConstructorAcceptsNull (@ullableDecl String name)
specifier|public
name|ConstructorAcceptsNull
parameter_list|(
annotation|@
name|NullableDecl
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
block|}
DECL|class|ConstructorDoesNotAcceptNull
specifier|static
class|class
name|ConstructorDoesNotAcceptNull
block|{
DECL|field|name
specifier|final
name|String
name|name
decl_stmt|;
DECL|method|ConstructorDoesNotAcceptNull (String name)
name|ConstructorDoesNotAcceptNull
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|checkNotNull
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|ConstructorParameterNotInstantiable
specifier|static
class|class
name|ConstructorParameterNotInstantiable
block|{
DECL|method|ConstructorParameterNotInstantiable (@uppressWarningsR) NotInstantiable x)
specifier|public
name|ConstructorParameterNotInstantiable
parameter_list|(
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
name|NotInstantiable
name|x
parameter_list|)
block|{}
block|}
DECL|class|ConstructorParameterMapOfNotInstantiable
specifier|static
class|class
name|ConstructorParameterMapOfNotInstantiable
block|{
DECL|field|m
specifier|private
specifier|final
name|Map
argument_list|<
name|NotInstantiable
argument_list|,
name|NotInstantiable
argument_list|>
name|m
decl_stmt|;
DECL|method|ConstructorParameterMapOfNotInstantiable (Map<NotInstantiable, NotInstantiable> m)
specifier|public
name|ConstructorParameterMapOfNotInstantiable
parameter_list|(
name|Map
argument_list|<
name|NotInstantiable
argument_list|,
name|NotInstantiable
argument_list|>
name|m
parameter_list|)
block|{
name|this
operator|.
name|m
operator|=
name|checkNotNull
argument_list|(
name|m
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|equals (@ullableDecl Object obj)
specifier|public
name|boolean
name|equals
parameter_list|(
annotation|@
name|NullableDecl
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|obj
operator|instanceof
name|ConstructorParameterMapOfNotInstantiable
condition|)
block|{
return|return
name|m
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|ConstructorParameterMapOfNotInstantiable
operator|)
name|obj
operator|)
operator|.
name|m
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|m
operator|.
name|hashCode
argument_list|()
return|;
block|}
block|}
comment|// Test that we should get a distinct parameter error when doing equals test.
DECL|class|ConstructorParameterWithOptionalNotInstantiable
specifier|static
class|class
name|ConstructorParameterWithOptionalNotInstantiable
block|{
DECL|method|ConstructorParameterWithOptionalNotInstantiable (Optional<NotInstantiable> x)
specifier|public
name|ConstructorParameterWithOptionalNotInstantiable
parameter_list|(
name|Optional
argument_list|<
name|NotInstantiable
argument_list|>
name|x
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|x
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|equals (@ullableDecl Object obj)
specifier|public
name|boolean
name|equals
parameter_list|(
annotation|@
name|NullableDecl
name|Object
name|obj
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
DECL|class|ConstructorParameterSingleValue
specifier|static
class|class
name|ConstructorParameterSingleValue
block|{
DECL|method|ConstructorParameterSingleValue (@uppressWarningsR) Singleton s)
specifier|public
name|ConstructorParameterSingleValue
parameter_list|(
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
name|Singleton
name|s
parameter_list|)
block|{}
annotation|@
name|Override
DECL|method|equals (Object obj)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
return|return
name|obj
operator|instanceof
name|ConstructorParameterSingleValue
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|1
return|;
block|}
DECL|class|Singleton
specifier|public
specifier|static
class|class
name|Singleton
block|{
DECL|field|INSTANCE
specifier|public
specifier|static
specifier|final
name|Singleton
name|INSTANCE
init|=
operator|new
name|Singleton
argument_list|()
decl_stmt|;
DECL|method|Singleton ()
specifier|private
name|Singleton
parameter_list|()
block|{}
block|}
block|}
DECL|class|FactoryMethodParameterNotInstantiable
specifier|static
class|class
name|FactoryMethodParameterNotInstantiable
block|{
DECL|method|FactoryMethodParameterNotInstantiable ()
specifier|private
name|FactoryMethodParameterNotInstantiable
parameter_list|()
block|{}
DECL|method|create ( @uppressWarningsR) NotInstantiable x)
specifier|static
name|FactoryMethodParameterNotInstantiable
name|create
parameter_list|(
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
name|NotInstantiable
name|x
parameter_list|)
block|{
return|return
operator|new
name|FactoryMethodParameterNotInstantiable
argument_list|()
return|;
block|}
block|}
DECL|class|ConstructorThrows
specifier|static
class|class
name|ConstructorThrows
block|{
DECL|method|ConstructorThrows ()
specifier|public
name|ConstructorThrows
parameter_list|()
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|()
throw|;
block|}
block|}
DECL|class|FactoryMethodThrows
specifier|static
class|class
name|FactoryMethodThrows
block|{
DECL|method|FactoryMethodThrows ()
specifier|private
name|FactoryMethodThrows
parameter_list|()
block|{}
DECL|method|create ()
specifier|public
specifier|static
name|FactoryMethodThrows
name|create
parameter_list|()
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|()
throw|;
block|}
block|}
DECL|class|NotInstantiable
specifier|static
class|class
name|NotInstantiable
block|{
DECL|method|NotInstantiable ()
specifier|private
name|NotInstantiable
parameter_list|()
block|{}
block|}
DECL|enum|NoConstantEnum
specifier|private
enum|enum
name|NoConstantEnum
block|{}
DECL|enum|OneConstantEnum
specifier|private
enum|enum
name|OneConstantEnum
block|{
DECL|enumConstant|A
name|A
block|}
DECL|enum|EnumFailsToCheckNull
specifier|private
enum|enum
name|EnumFailsToCheckNull
block|{
DECL|enumConstant|A
name|A
block|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
DECL|method|failToCheckNull (String s)
specifier|public
name|void
name|failToCheckNull
parameter_list|(
name|String
name|s
parameter_list|)
block|{}
block|}
DECL|interface|AnInterface
specifier|private
interface|interface
name|AnInterface
block|{}
DECL|class|AnAbstractClass
specifier|private
specifier|abstract
specifier|static
class|class
name|AnAbstractClass
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
DECL|method|AnAbstractClass (String s)
specifier|public
name|AnAbstractClass
parameter_list|(
name|String
name|s
parameter_list|)
block|{}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
DECL|method|failsToCheckNull (String s)
specifier|public
name|void
name|failsToCheckNull
parameter_list|(
name|String
name|s
parameter_list|)
block|{}
block|}
DECL|class|NoPublicStaticMethods
specifier|private
specifier|static
class|class
name|NoPublicStaticMethods
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
comment|// To test non-public factory isn't used.
DECL|method|notPublic ()
specifier|static
name|String
name|notPublic
parameter_list|()
block|{
return|return
literal|""
return|;
block|}
block|}
DECL|annotation|MyAnnotation
annotation_defn|@interface
name|MyAnnotation
block|{}
block|}
end_class

end_unit

