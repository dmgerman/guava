begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2005 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.testing
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|testing
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Supplier
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMultimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMultiset
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSortedSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableTable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Multimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Multiset
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|reflect
operator|.
name|TypeToken
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|testing
operator|.
name|NullPointerTester
operator|.
name|Visibility
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|testing
operator|.
name|anotherpackage
operator|.
name|SomeClassThatDoesNotUseNullable
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|AssertionFailedError
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Constructor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedSet
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_comment
comment|/**  * Unit test for {@link NullPointerTester}.  *  * @author Kevin Bourrillion  * @author Mick Killianey  */
end_comment

begin_class
DECL|class|NullPointerTesterTest
specifier|public
class|class
name|NullPointerTesterTest
extends|extends
name|TestCase
block|{
comment|/** Non-NPE RuntimeException. */
DECL|class|FooException
specifier|public
specifier|static
class|class
name|FooException
extends|extends
name|RuntimeException
block|{
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
block|}
comment|/**    * Class for testing all permutations of static/non-static one-argument    * methods using methodParameter().    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
comment|// used by reflection
DECL|class|OneArg
specifier|public
specifier|static
class|class
name|OneArg
block|{
DECL|method|staticOneArgCorrectlyThrowsNpe (String s)
specifier|public
specifier|static
name|void
name|staticOneArgCorrectlyThrowsNpe
parameter_list|(
name|String
name|s
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|s
argument_list|)
expr_stmt|;
comment|// expect NPE here on null
block|}
DECL|method|staticOneArgThrowsOtherThanNpe (String s)
specifier|public
specifier|static
name|void
name|staticOneArgThrowsOtherThanNpe
parameter_list|(
name|String
name|s
parameter_list|)
block|{
throw|throw
operator|new
name|FooException
argument_list|()
throw|;
comment|// should catch as failure
block|}
DECL|method|staticOneArgShouldThrowNpeButDoesnt (String s)
specifier|public
specifier|static
name|void
name|staticOneArgShouldThrowNpeButDoesnt
parameter_list|(
name|String
name|s
parameter_list|)
block|{
comment|// should catch as failure
block|}
specifier|public
specifier|static
name|void
DECL|method|staticOneArgNullableCorrectlyDoesNotThrowNPE (@ullable String s)
name|staticOneArgNullableCorrectlyDoesNotThrowNPE
parameter_list|(
annotation|@
name|Nullable
name|String
name|s
parameter_list|)
block|{
comment|// null?  no problem
block|}
specifier|public
specifier|static
name|void
DECL|method|staticOneArgNullableCorrectlyThrowsOtherThanNPE (@ullable String s)
name|staticOneArgNullableCorrectlyThrowsOtherThanNPE
parameter_list|(
annotation|@
name|Nullable
name|String
name|s
parameter_list|)
block|{
throw|throw
operator|new
name|FooException
argument_list|()
throw|;
comment|// ok, as long as it's not NullPointerException
block|}
specifier|public
specifier|static
name|void
DECL|method|staticOneArgNullableThrowsNPE (@ullable String s)
name|staticOneArgNullableThrowsNPE
parameter_list|(
annotation|@
name|Nullable
name|String
name|s
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|s
argument_list|)
expr_stmt|;
comment|// doesn't check if you said you'd accept null, but you don't
block|}
DECL|method|oneArgCorrectlyThrowsNpe (String s)
specifier|public
name|void
name|oneArgCorrectlyThrowsNpe
parameter_list|(
name|String
name|s
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|s
argument_list|)
expr_stmt|;
comment|// expect NPE here on null
block|}
DECL|method|oneArgThrowsOtherThanNpe (String s)
specifier|public
name|void
name|oneArgThrowsOtherThanNpe
parameter_list|(
name|String
name|s
parameter_list|)
block|{
throw|throw
operator|new
name|FooException
argument_list|()
throw|;
comment|// should catch as failure
block|}
DECL|method|oneArgShouldThrowNpeButDoesnt (String s)
specifier|public
name|void
name|oneArgShouldThrowNpeButDoesnt
parameter_list|(
name|String
name|s
parameter_list|)
block|{
comment|// should catch as failure
block|}
DECL|method|oneArgNullableCorrectlyDoesNotThrowNPE (@ullable String s)
specifier|public
name|void
name|oneArgNullableCorrectlyDoesNotThrowNPE
parameter_list|(
annotation|@
name|Nullable
name|String
name|s
parameter_list|)
block|{
comment|// null?  no problem
block|}
DECL|method|oneArgNullableCorrectlyThrowsOtherThanNPE (@ullable String s)
specifier|public
name|void
name|oneArgNullableCorrectlyThrowsOtherThanNPE
parameter_list|(
annotation|@
name|Nullable
name|String
name|s
parameter_list|)
block|{
throw|throw
operator|new
name|FooException
argument_list|()
throw|;
comment|// ok, as long as it's not NullPointerException
block|}
DECL|method|oneArgNullableThrowsNPE (@ullable String s)
specifier|public
name|void
name|oneArgNullableThrowsNPE
parameter_list|(
annotation|@
name|Nullable
name|String
name|s
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|s
argument_list|)
expr_stmt|;
comment|// doesn't check if you said you'd accept null, but you don't
block|}
block|}
DECL|field|STATIC_ONE_ARG_METHODS_SHOULD_PASS
specifier|private
specifier|static
specifier|final
name|String
index|[]
name|STATIC_ONE_ARG_METHODS_SHOULD_PASS
init|=
block|{
literal|"staticOneArgCorrectlyThrowsNpe"
block|,
literal|"staticOneArgNullableCorrectlyDoesNotThrowNPE"
block|,
literal|"staticOneArgNullableCorrectlyThrowsOtherThanNPE"
block|,
literal|"staticOneArgNullableThrowsNPE"
block|,   }
decl_stmt|;
DECL|field|STATIC_ONE_ARG_METHODS_SHOULD_FAIL
specifier|private
specifier|static
specifier|final
name|String
index|[]
name|STATIC_ONE_ARG_METHODS_SHOULD_FAIL
init|=
block|{
literal|"staticOneArgThrowsOtherThanNpe"
block|,
literal|"staticOneArgShouldThrowNpeButDoesnt"
block|,   }
decl_stmt|;
DECL|field|NONSTATIC_ONE_ARG_METHODS_SHOULD_PASS
specifier|private
specifier|static
specifier|final
name|String
index|[]
name|NONSTATIC_ONE_ARG_METHODS_SHOULD_PASS
init|=
block|{
literal|"oneArgCorrectlyThrowsNpe"
block|,
literal|"oneArgNullableCorrectlyDoesNotThrowNPE"
block|,
literal|"oneArgNullableCorrectlyThrowsOtherThanNPE"
block|,
literal|"oneArgNullableThrowsNPE"
block|,   }
decl_stmt|;
DECL|field|NONSTATIC_ONE_ARG_METHODS_SHOULD_FAIL
specifier|private
specifier|static
specifier|final
name|String
index|[]
name|NONSTATIC_ONE_ARG_METHODS_SHOULD_FAIL
init|=
block|{
literal|"oneArgThrowsOtherThanNpe"
block|,
literal|"oneArgShouldThrowNpeButDoesnt"
block|,   }
decl_stmt|;
DECL|method|testStaticOneArgMethodsThatShouldPass ()
specifier|public
name|void
name|testStaticOneArgMethodsThatShouldPass
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|String
name|methodName
range|:
name|STATIC_ONE_ARG_METHODS_SHOULD_PASS
control|)
block|{
name|Method
name|method
init|=
name|OneArg
operator|.
name|class
operator|.
name|getMethod
argument_list|(
name|methodName
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
try|try
block|{
operator|new
name|NullPointerTester
argument_list|()
operator|.
name|testMethodParameter
argument_list|(
operator|new
name|OneArg
argument_list|()
argument_list|,
name|method
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AssertionFailedError
name|unexpected
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Should not have flagged method "
operator|+
name|methodName
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|testStaticOneArgMethodsThatShouldFail ()
specifier|public
name|void
name|testStaticOneArgMethodsThatShouldFail
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|String
name|methodName
range|:
name|STATIC_ONE_ARG_METHODS_SHOULD_FAIL
control|)
block|{
name|Method
name|method
init|=
name|OneArg
operator|.
name|class
operator|.
name|getMethod
argument_list|(
name|methodName
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|boolean
name|foundProblem
init|=
literal|false
decl_stmt|;
try|try
block|{
operator|new
name|NullPointerTester
argument_list|()
operator|.
name|testMethodParameter
argument_list|(
operator|new
name|OneArg
argument_list|()
argument_list|,
name|method
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AssertionFailedError
name|expected
parameter_list|)
block|{
name|foundProblem
operator|=
literal|true
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"Should report error in method "
operator|+
name|methodName
argument_list|,
name|foundProblem
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testNonStaticOneArgMethodsThatShouldPass ()
specifier|public
name|void
name|testNonStaticOneArgMethodsThatShouldPass
parameter_list|()
throws|throws
name|Exception
block|{
name|OneArg
name|foo
init|=
operator|new
name|OneArg
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|methodName
range|:
name|NONSTATIC_ONE_ARG_METHODS_SHOULD_PASS
control|)
block|{
name|Method
name|method
init|=
name|OneArg
operator|.
name|class
operator|.
name|getMethod
argument_list|(
name|methodName
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
try|try
block|{
operator|new
name|NullPointerTester
argument_list|()
operator|.
name|testMethodParameter
argument_list|(
name|foo
argument_list|,
name|method
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AssertionFailedError
name|unexpected
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Should not have flagged method "
operator|+
name|methodName
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|testNonStaticOneArgMethodsThatShouldFail ()
specifier|public
name|void
name|testNonStaticOneArgMethodsThatShouldFail
parameter_list|()
throws|throws
name|Exception
block|{
name|OneArg
name|foo
init|=
operator|new
name|OneArg
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|methodName
range|:
name|NONSTATIC_ONE_ARG_METHODS_SHOULD_FAIL
control|)
block|{
name|Method
name|method
init|=
name|OneArg
operator|.
name|class
operator|.
name|getMethod
argument_list|(
name|methodName
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|boolean
name|foundProblem
init|=
literal|false
decl_stmt|;
try|try
block|{
operator|new
name|NullPointerTester
argument_list|()
operator|.
name|testMethodParameter
argument_list|(
name|foo
argument_list|,
name|method
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AssertionFailedError
name|expected
parameter_list|)
block|{
name|foundProblem
operator|=
literal|true
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"Should report error in method "
operator|+
name|methodName
argument_list|,
name|foundProblem
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Class for testing all permutations of nullable/non-nullable two-argument    * methods using testMethod().    *    *   normalNormal:  two params, neither is Nullable    *   nullableNormal:  only first param is Nullable    *   normalNullable:  only second param is Nullable    *   nullableNullable:  both params are Nullable    */
DECL|class|TwoArg
specifier|public
specifier|static
class|class
name|TwoArg
block|{
comment|/** Action to take on a null param. */
DECL|enum|Action
specifier|public
enum|enum
name|Action
block|{
DECL|enumConstant|THROW_A_NPE
name|THROW_A_NPE
block|{
annotation|@
name|Override
specifier|public
name|void
name|act
parameter_list|()
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|()
throw|;
block|}
block|}
block|,
DECL|enumConstant|THROW_OTHER
name|THROW_OTHER
block|{
annotation|@
name|Override
specifier|public
name|void
name|act
parameter_list|()
block|{
throw|throw
operator|new
name|FooException
argument_list|()
throw|;
block|}
block|}
block|,
DECL|enumConstant|JUST_RETURN
name|JUST_RETURN
block|{
annotation|@
name|Override
specifier|public
name|void
name|act
parameter_list|()
block|{}
block|}
block|;
DECL|method|act ()
specifier|public
specifier|abstract
name|void
name|act
parameter_list|()
function_decl|;
block|}
DECL|field|actionWhenFirstParamIsNull
name|Action
name|actionWhenFirstParamIsNull
decl_stmt|;
DECL|field|actionWhenSecondParamIsNull
name|Action
name|actionWhenSecondParamIsNull
decl_stmt|;
DECL|method|TwoArg ( Action actionWhenFirstParamIsNull, Action actionWhenSecondParamIsNull)
specifier|public
name|TwoArg
parameter_list|(
name|Action
name|actionWhenFirstParamIsNull
parameter_list|,
name|Action
name|actionWhenSecondParamIsNull
parameter_list|)
block|{
name|this
operator|.
name|actionWhenFirstParamIsNull
operator|=
name|actionWhenFirstParamIsNull
expr_stmt|;
name|this
operator|.
name|actionWhenSecondParamIsNull
operator|=
name|actionWhenSecondParamIsNull
expr_stmt|;
block|}
comment|/** Method that decides how to react to parameters. */
DECL|method|reactToNullParameters (Object first, Object second)
specifier|public
name|void
name|reactToNullParameters
parameter_list|(
name|Object
name|first
parameter_list|,
name|Object
name|second
parameter_list|)
block|{
if|if
condition|(
name|first
operator|==
literal|null
condition|)
block|{
name|actionWhenFirstParamIsNull
operator|.
name|act
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|second
operator|==
literal|null
condition|)
block|{
name|actionWhenSecondParamIsNull
operator|.
name|act
argument_list|()
expr_stmt|;
block|}
block|}
comment|/** Two-arg method with no Nullable params. */
DECL|method|normalNormal (String first, Integer second)
specifier|public
name|void
name|normalNormal
parameter_list|(
name|String
name|first
parameter_list|,
name|Integer
name|second
parameter_list|)
block|{
name|reactToNullParameters
argument_list|(
name|first
argument_list|,
name|second
argument_list|)
expr_stmt|;
block|}
comment|/** Two-arg method with the second param Nullable. */
DECL|method|normalNullable (String first, @Nullable Integer second)
specifier|public
name|void
name|normalNullable
parameter_list|(
name|String
name|first
parameter_list|,
annotation|@
name|Nullable
name|Integer
name|second
parameter_list|)
block|{
name|reactToNullParameters
argument_list|(
name|first
argument_list|,
name|second
argument_list|)
expr_stmt|;
block|}
comment|/** Two-arg method with the first param Nullable. */
DECL|method|nullableNormal (@ullable String first, Integer second)
specifier|public
name|void
name|nullableNormal
parameter_list|(
annotation|@
name|Nullable
name|String
name|first
parameter_list|,
name|Integer
name|second
parameter_list|)
block|{
name|reactToNullParameters
argument_list|(
name|first
argument_list|,
name|second
argument_list|)
expr_stmt|;
block|}
comment|/** Two-arg method with the both params Nullable. */
DECL|method|nullableNullable ( @ullable String first, @Nullable Integer second)
specifier|public
name|void
name|nullableNullable
parameter_list|(
annotation|@
name|Nullable
name|String
name|first
parameter_list|,
annotation|@
name|Nullable
name|Integer
name|second
parameter_list|)
block|{
name|reactToNullParameters
argument_list|(
name|first
argument_list|,
name|second
argument_list|)
expr_stmt|;
block|}
comment|/** To provide sanity during debugging. */
DECL|method|toString ()
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|String
operator|.
name|format
argument_list|(
literal|"Bar(%s, %s)"
argument_list|,
name|actionWhenFirstParamIsNull
argument_list|,
name|actionWhenSecondParamIsNull
argument_list|)
return|;
block|}
block|}
DECL|method|verifyBarPass (Method method, TwoArg bar)
specifier|public
name|void
name|verifyBarPass
parameter_list|(
name|Method
name|method
parameter_list|,
name|TwoArg
name|bar
parameter_list|)
block|{
try|try
block|{
operator|new
name|NullPointerTester
argument_list|()
operator|.
name|testMethod
argument_list|(
name|bar
argument_list|,
name|method
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AssertionFailedError
name|incorrectError
parameter_list|)
block|{
name|String
name|errorMessage
init|=
name|String
operator|.
name|format
argument_list|(
literal|"Should not have flagged method %s for %s"
argument_list|,
name|method
operator|.
name|getName
argument_list|()
argument_list|,
name|bar
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|errorMessage
argument_list|,
name|incorrectError
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|verifyBarFail (Method method, TwoArg bar)
specifier|public
name|void
name|verifyBarFail
parameter_list|(
name|Method
name|method
parameter_list|,
name|TwoArg
name|bar
parameter_list|)
block|{
try|try
block|{
operator|new
name|NullPointerTester
argument_list|()
operator|.
name|testMethod
argument_list|(
name|bar
argument_list|,
name|method
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AssertionFailedError
name|expected
parameter_list|)
block|{
return|return;
comment|// good...we wanted a failure
block|}
name|String
name|errorMessage
init|=
name|String
operator|.
name|format
argument_list|(
literal|"Should have flagged method %s for %s"
argument_list|,
name|method
operator|.
name|getName
argument_list|()
argument_list|,
name|bar
argument_list|)
decl_stmt|;
name|fail
argument_list|(
name|errorMessage
argument_list|)
expr_stmt|;
block|}
DECL|method|testTwoArgNormalNormal ()
specifier|public
name|void
name|testTwoArgNormalNormal
parameter_list|()
throws|throws
name|Exception
block|{
name|Method
name|method
init|=
name|TwoArg
operator|.
name|class
operator|.
name|getMethod
argument_list|(
literal|"normalNormal"
argument_list|,
name|String
operator|.
name|class
argument_list|,
name|Integer
operator|.
name|class
argument_list|)
decl_stmt|;
for|for
control|(
name|TwoArg
operator|.
name|Action
name|first
range|:
name|TwoArg
operator|.
name|Action
operator|.
name|values
argument_list|()
control|)
block|{
for|for
control|(
name|TwoArg
operator|.
name|Action
name|second
range|:
name|TwoArg
operator|.
name|Action
operator|.
name|values
argument_list|()
control|)
block|{
name|TwoArg
name|bar
init|=
operator|new
name|TwoArg
argument_list|(
name|first
argument_list|,
name|second
argument_list|)
decl_stmt|;
if|if
condition|(
name|first
operator|.
name|equals
argument_list|(
name|TwoArg
operator|.
name|Action
operator|.
name|THROW_A_NPE
argument_list|)
operator|&&
name|second
operator|.
name|equals
argument_list|(
name|TwoArg
operator|.
name|Action
operator|.
name|THROW_A_NPE
argument_list|)
condition|)
block|{
name|verifyBarPass
argument_list|(
name|method
argument_list|,
name|bar
argument_list|)
expr_stmt|;
comment|// require both params to throw NPE
block|}
else|else
block|{
name|verifyBarFail
argument_list|(
name|method
argument_list|,
name|bar
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|testTwoArgNormalNullable ()
specifier|public
name|void
name|testTwoArgNormalNullable
parameter_list|()
throws|throws
name|Exception
block|{
name|Method
name|method
init|=
name|TwoArg
operator|.
name|class
operator|.
name|getMethod
argument_list|(
literal|"normalNullable"
argument_list|,
name|String
operator|.
name|class
argument_list|,
name|Integer
operator|.
name|class
argument_list|)
decl_stmt|;
for|for
control|(
name|TwoArg
operator|.
name|Action
name|first
range|:
name|TwoArg
operator|.
name|Action
operator|.
name|values
argument_list|()
control|)
block|{
for|for
control|(
name|TwoArg
operator|.
name|Action
name|second
range|:
name|TwoArg
operator|.
name|Action
operator|.
name|values
argument_list|()
control|)
block|{
name|TwoArg
name|bar
init|=
operator|new
name|TwoArg
argument_list|(
name|first
argument_list|,
name|second
argument_list|)
decl_stmt|;
if|if
condition|(
name|first
operator|.
name|equals
argument_list|(
name|TwoArg
operator|.
name|Action
operator|.
name|THROW_A_NPE
argument_list|)
condition|)
block|{
name|verifyBarPass
argument_list|(
name|method
argument_list|,
name|bar
argument_list|)
expr_stmt|;
comment|// only pass if 1st param throws NPE
block|}
else|else
block|{
name|verifyBarFail
argument_list|(
name|method
argument_list|,
name|bar
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|testTwoArgNullableNormal ()
specifier|public
name|void
name|testTwoArgNullableNormal
parameter_list|()
throws|throws
name|Exception
block|{
name|Method
name|method
init|=
name|TwoArg
operator|.
name|class
operator|.
name|getMethod
argument_list|(
literal|"nullableNormal"
argument_list|,
name|String
operator|.
name|class
argument_list|,
name|Integer
operator|.
name|class
argument_list|)
decl_stmt|;
for|for
control|(
name|TwoArg
operator|.
name|Action
name|first
range|:
name|TwoArg
operator|.
name|Action
operator|.
name|values
argument_list|()
control|)
block|{
for|for
control|(
name|TwoArg
operator|.
name|Action
name|second
range|:
name|TwoArg
operator|.
name|Action
operator|.
name|values
argument_list|()
control|)
block|{
name|TwoArg
name|bar
init|=
operator|new
name|TwoArg
argument_list|(
name|first
argument_list|,
name|second
argument_list|)
decl_stmt|;
if|if
condition|(
name|second
operator|.
name|equals
argument_list|(
name|TwoArg
operator|.
name|Action
operator|.
name|THROW_A_NPE
argument_list|)
condition|)
block|{
name|verifyBarPass
argument_list|(
name|method
argument_list|,
name|bar
argument_list|)
expr_stmt|;
comment|// only pass if 2nd param throws NPE
block|}
else|else
block|{
name|verifyBarFail
argument_list|(
name|method
argument_list|,
name|bar
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|testTwoArgNullableNullable ()
specifier|public
name|void
name|testTwoArgNullableNullable
parameter_list|()
throws|throws
name|Exception
block|{
name|Method
name|method
init|=
name|TwoArg
operator|.
name|class
operator|.
name|getMethod
argument_list|(
literal|"nullableNullable"
argument_list|,
name|String
operator|.
name|class
argument_list|,
name|Integer
operator|.
name|class
argument_list|)
decl_stmt|;
for|for
control|(
name|TwoArg
operator|.
name|Action
name|first
range|:
name|TwoArg
operator|.
name|Action
operator|.
name|values
argument_list|()
control|)
block|{
for|for
control|(
name|TwoArg
operator|.
name|Action
name|second
range|:
name|TwoArg
operator|.
name|Action
operator|.
name|values
argument_list|()
control|)
block|{
name|TwoArg
name|bar
init|=
operator|new
name|TwoArg
argument_list|(
name|first
argument_list|,
name|second
argument_list|)
decl_stmt|;
name|verifyBarPass
argument_list|(
name|method
argument_list|,
name|bar
argument_list|)
expr_stmt|;
comment|// All args nullable:  anything goes!
block|}
block|}
block|}
comment|/*    * This next part consists of several sample classes that provide    * demonstrations of conditions that cause NullPointerTester    * to succeed/fail.    */
comment|/** Lots of well-behaved methods. */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
comment|// used by reflection
DECL|class|PassObject
specifier|private
specifier|static
class|class
name|PassObject
extends|extends
name|SomeClassThatDoesNotUseNullable
block|{
DECL|method|doThrow (Object arg)
specifier|public
specifier|static
name|void
name|doThrow
parameter_list|(
name|Object
name|arg
parameter_list|)
block|{
if|if
condition|(
name|arg
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|FooException
argument_list|()
throw|;
block|}
block|}
DECL|method|noArg ()
specifier|public
name|void
name|noArg
parameter_list|()
block|{}
DECL|method|oneArg (String s)
specifier|public
name|void
name|oneArg
parameter_list|(
name|String
name|s
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
DECL|method|packagePrivateOneArg (String s)
name|void
name|packagePrivateOneArg
parameter_list|(
name|String
name|s
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
DECL|method|protectedOneArg (String s)
specifier|protected
name|void
name|protectedOneArg
parameter_list|(
name|String
name|s
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
DECL|method|oneNullableArg (@ullable String s)
specifier|public
name|void
name|oneNullableArg
parameter_list|(
annotation|@
name|Nullable
name|String
name|s
parameter_list|)
block|{}
DECL|method|oneNullableArgThrows (@ullable String s)
specifier|public
name|void
name|oneNullableArgThrows
parameter_list|(
annotation|@
name|Nullable
name|String
name|s
parameter_list|)
block|{
name|doThrow
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
DECL|method|twoArg (String s, Integer i)
specifier|public
name|void
name|twoArg
parameter_list|(
name|String
name|s
parameter_list|,
name|Integer
name|i
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|i
operator|.
name|intValue
argument_list|()
expr_stmt|;
block|}
DECL|method|twoMixedArgs (String s, @Nullable Integer i)
specifier|public
name|void
name|twoMixedArgs
parameter_list|(
name|String
name|s
parameter_list|,
annotation|@
name|Nullable
name|Integer
name|i
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
DECL|method|twoMixedArgsThrows (String s, @Nullable Integer i)
specifier|public
name|void
name|twoMixedArgsThrows
parameter_list|(
name|String
name|s
parameter_list|,
annotation|@
name|Nullable
name|Integer
name|i
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|doThrow
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
DECL|method|twoMixedArgs (@ullable Integer i, String s)
specifier|public
name|void
name|twoMixedArgs
parameter_list|(
annotation|@
name|Nullable
name|Integer
name|i
parameter_list|,
name|String
name|s
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
DECL|method|twoMixedArgsThrows (@ullable Integer i, String s)
specifier|public
name|void
name|twoMixedArgsThrows
parameter_list|(
annotation|@
name|Nullable
name|Integer
name|i
parameter_list|,
name|String
name|s
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|doThrow
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
DECL|method|twoNullableArgs (@ullable String s, @javax.annotation.Nullable Integer i)
specifier|public
name|void
name|twoNullableArgs
parameter_list|(
annotation|@
name|Nullable
name|String
name|s
parameter_list|,
annotation|@
name|javax
operator|.
name|annotation
operator|.
name|Nullable
name|Integer
name|i
parameter_list|)
block|{}
DECL|method|twoNullableArgsThrowsFirstArg ( @ullable String s, @Nullable Integer i)
specifier|public
name|void
name|twoNullableArgsThrowsFirstArg
parameter_list|(
annotation|@
name|Nullable
name|String
name|s
parameter_list|,
annotation|@
name|Nullable
name|Integer
name|i
parameter_list|)
block|{
name|doThrow
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
DECL|method|twoNullableArgsThrowsSecondArg ( @ullable String s, @Nullable Integer i)
specifier|public
name|void
name|twoNullableArgsThrowsSecondArg
parameter_list|(
annotation|@
name|Nullable
name|String
name|s
parameter_list|,
annotation|@
name|Nullable
name|Integer
name|i
parameter_list|)
block|{
name|doThrow
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
DECL|method|staticOneArg (String s)
specifier|public
specifier|static
name|void
name|staticOneArg
parameter_list|(
name|String
name|s
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
DECL|method|staticOneNullableArg (@ullable String s)
specifier|public
specifier|static
name|void
name|staticOneNullableArg
parameter_list|(
annotation|@
name|Nullable
name|String
name|s
parameter_list|)
block|{}
DECL|method|staticOneNullableArgThrows (@ullable String s)
specifier|public
specifier|static
name|void
name|staticOneNullableArgThrows
parameter_list|(
annotation|@
name|Nullable
name|String
name|s
parameter_list|)
block|{
name|doThrow
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testGoodClass ()
specifier|public
name|void
name|testGoodClass
parameter_list|()
block|{
name|shouldPass
argument_list|(
operator|new
name|PassObject
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|class|FailOneArgDoesntThrowNPE
specifier|private
specifier|static
class|class
name|FailOneArgDoesntThrowNPE
extends|extends
name|PassObject
block|{
DECL|method|oneArg (String s)
annotation|@
name|Override
specifier|public
name|void
name|oneArg
parameter_list|(
name|String
name|s
parameter_list|)
block|{
comment|// Fail:  missing NPE for s
block|}
block|}
DECL|method|testFailOneArgDoesntThrowNpe ()
specifier|public
name|void
name|testFailOneArgDoesntThrowNpe
parameter_list|()
block|{
name|shouldFail
argument_list|(
operator|new
name|FailOneArgDoesntThrowNPE
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|class|FailOneArgThrowsWrongType
specifier|private
specifier|static
class|class
name|FailOneArgThrowsWrongType
extends|extends
name|PassObject
block|{
DECL|method|oneArg (String s)
annotation|@
name|Override
specifier|public
name|void
name|oneArg
parameter_list|(
name|String
name|s
parameter_list|)
block|{
name|doThrow
argument_list|(
name|s
argument_list|)
expr_stmt|;
comment|// Fail:  throwing non-NPE exception for null s
block|}
block|}
DECL|method|testFailOneArgThrowsWrongType ()
specifier|public
name|void
name|testFailOneArgThrowsWrongType
parameter_list|()
block|{
name|shouldFail
argument_list|(
operator|new
name|FailOneArgThrowsWrongType
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|class|PassOneNullableArgThrowsNPE
specifier|private
specifier|static
class|class
name|PassOneNullableArgThrowsNPE
extends|extends
name|PassObject
block|{
DECL|method|oneNullableArg (@ullable String s)
annotation|@
name|Override
specifier|public
name|void
name|oneNullableArg
parameter_list|(
annotation|@
name|Nullable
name|String
name|s
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|s
argument_list|)
expr_stmt|;
comment|// ok to throw NPE
block|}
block|}
DECL|method|testPassOneNullableArgThrowsNPE ()
specifier|public
name|void
name|testPassOneNullableArgThrowsNPE
parameter_list|()
block|{
name|shouldPass
argument_list|(
operator|new
name|PassOneNullableArgThrowsNPE
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|class|FailTwoArgsFirstArgDoesntThrowNPE
specifier|private
specifier|static
class|class
name|FailTwoArgsFirstArgDoesntThrowNPE
extends|extends
name|PassObject
block|{
DECL|method|twoArg (String s, Integer i)
annotation|@
name|Override
specifier|public
name|void
name|twoArg
parameter_list|(
name|String
name|s
parameter_list|,
name|Integer
name|i
parameter_list|)
block|{
comment|// Fail: missing NPE for s
name|i
operator|.
name|intValue
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|testFailTwoArgsFirstArgDoesntThrowNPE ()
specifier|public
name|void
name|testFailTwoArgsFirstArgDoesntThrowNPE
parameter_list|()
block|{
name|shouldFail
argument_list|(
operator|new
name|FailTwoArgsFirstArgDoesntThrowNPE
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|class|FailTwoArgsFirstArgThrowsWrongType
specifier|private
specifier|static
class|class
name|FailTwoArgsFirstArgThrowsWrongType
extends|extends
name|PassObject
block|{
DECL|method|twoArg (String s, Integer i)
annotation|@
name|Override
specifier|public
name|void
name|twoArg
parameter_list|(
name|String
name|s
parameter_list|,
name|Integer
name|i
parameter_list|)
block|{
name|doThrow
argument_list|(
name|s
argument_list|)
expr_stmt|;
comment|// Fail:  throwing non-NPE exception for null s
name|i
operator|.
name|intValue
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|testFailTwoArgsFirstArgThrowsWrongType ()
specifier|public
name|void
name|testFailTwoArgsFirstArgThrowsWrongType
parameter_list|()
block|{
name|shouldFail
argument_list|(
operator|new
name|FailTwoArgsFirstArgThrowsWrongType
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|class|FailTwoArgsSecondArgDoesntThrowNPE
specifier|private
specifier|static
class|class
name|FailTwoArgsSecondArgDoesntThrowNPE
extends|extends
name|PassObject
block|{
DECL|method|twoArg (String s, Integer i)
annotation|@
name|Override
specifier|public
name|void
name|twoArg
parameter_list|(
name|String
name|s
parameter_list|,
name|Integer
name|i
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|s
argument_list|)
expr_stmt|;
comment|// Fail: missing NPE for i
block|}
block|}
DECL|method|testFailTwoArgsSecondArgDoesntThrowNPE ()
specifier|public
name|void
name|testFailTwoArgsSecondArgDoesntThrowNPE
parameter_list|()
block|{
name|shouldFail
argument_list|(
operator|new
name|FailTwoArgsSecondArgDoesntThrowNPE
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|class|FailTwoArgsSecondArgThrowsWrongType
specifier|private
specifier|static
class|class
name|FailTwoArgsSecondArgThrowsWrongType
extends|extends
name|PassObject
block|{
DECL|method|twoArg (String s, Integer i)
annotation|@
name|Override
specifier|public
name|void
name|twoArg
parameter_list|(
name|String
name|s
parameter_list|,
name|Integer
name|i
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|doThrow
argument_list|(
name|i
argument_list|)
expr_stmt|;
comment|// Fail:  throwing non-NPE exception for null i
block|}
block|}
DECL|method|testFailTwoArgsSecondArgThrowsWrongType ()
specifier|public
name|void
name|testFailTwoArgsSecondArgThrowsWrongType
parameter_list|()
block|{
name|shouldFail
argument_list|(
operator|new
name|FailTwoArgsSecondArgThrowsWrongType
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|class|FailTwoMixedArgsFirstArgDoesntThrowNPE
specifier|private
specifier|static
class|class
name|FailTwoMixedArgsFirstArgDoesntThrowNPE
extends|extends
name|PassObject
block|{
DECL|method|twoMixedArgs (String s, @Nullable Integer i)
annotation|@
name|Override
specifier|public
name|void
name|twoMixedArgs
parameter_list|(
name|String
name|s
parameter_list|,
annotation|@
name|Nullable
name|Integer
name|i
parameter_list|)
block|{
comment|// Fail: missing NPE for s
block|}
block|}
DECL|method|testFailTwoMixedArgsFirstArgDoesntThrowNPE ()
specifier|public
name|void
name|testFailTwoMixedArgsFirstArgDoesntThrowNPE
parameter_list|()
block|{
name|shouldFail
argument_list|(
operator|new
name|FailTwoMixedArgsFirstArgDoesntThrowNPE
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|class|FailTwoMixedArgsFirstArgThrowsWrongType
specifier|private
specifier|static
class|class
name|FailTwoMixedArgsFirstArgThrowsWrongType
extends|extends
name|PassObject
block|{
DECL|method|twoMixedArgs (String s, @Nullable Integer i)
annotation|@
name|Override
specifier|public
name|void
name|twoMixedArgs
parameter_list|(
name|String
name|s
parameter_list|,
annotation|@
name|Nullable
name|Integer
name|i
parameter_list|)
block|{
name|doThrow
argument_list|(
name|s
argument_list|)
expr_stmt|;
comment|// Fail:  throwing non-NPE exception for null s
block|}
block|}
DECL|method|testFailTwoMixedArgsFirstArgThrowsWrongType ()
specifier|public
name|void
name|testFailTwoMixedArgsFirstArgThrowsWrongType
parameter_list|()
block|{
name|shouldFail
argument_list|(
operator|new
name|FailTwoMixedArgsFirstArgThrowsWrongType
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|class|PassTwoMixedArgsNullableArgThrowsNPE
specifier|private
specifier|static
class|class
name|PassTwoMixedArgsNullableArgThrowsNPE
extends|extends
name|PassObject
block|{
DECL|method|twoMixedArgs (String s, @Nullable Integer i)
annotation|@
name|Override
specifier|public
name|void
name|twoMixedArgs
parameter_list|(
name|String
name|s
parameter_list|,
annotation|@
name|Nullable
name|Integer
name|i
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|i
operator|.
name|intValue
argument_list|()
expr_stmt|;
comment|// ok to throw NPE?
block|}
block|}
DECL|method|testPassTwoMixedArgsNullableArgThrowsNPE ()
specifier|public
name|void
name|testPassTwoMixedArgsNullableArgThrowsNPE
parameter_list|()
block|{
name|shouldPass
argument_list|(
operator|new
name|PassTwoMixedArgsNullableArgThrowsNPE
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|class|PassTwoMixedArgSecondNullableArgThrowsOther
specifier|private
specifier|static
class|class
name|PassTwoMixedArgSecondNullableArgThrowsOther
extends|extends
name|PassObject
block|{
DECL|method|twoMixedArgs (String s, @Nullable Integer i)
annotation|@
name|Override
specifier|public
name|void
name|twoMixedArgs
parameter_list|(
name|String
name|s
parameter_list|,
annotation|@
name|Nullable
name|Integer
name|i
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|doThrow
argument_list|(
name|i
argument_list|)
expr_stmt|;
comment|// ok to throw non-NPE exception for null i
block|}
block|}
DECL|method|testPassTwoMixedArgSecondNullableArgThrowsOther ()
specifier|public
name|void
name|testPassTwoMixedArgSecondNullableArgThrowsOther
parameter_list|()
block|{
name|shouldPass
argument_list|(
operator|new
name|PassTwoMixedArgSecondNullableArgThrowsOther
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|class|FailTwoMixedArgsSecondArgDoesntThrowNPE
specifier|private
specifier|static
class|class
name|FailTwoMixedArgsSecondArgDoesntThrowNPE
extends|extends
name|PassObject
block|{
DECL|method|twoMixedArgs (@ullable Integer i, String s)
annotation|@
name|Override
specifier|public
name|void
name|twoMixedArgs
parameter_list|(
annotation|@
name|Nullable
name|Integer
name|i
parameter_list|,
name|String
name|s
parameter_list|)
block|{
comment|// Fail: missing NPE for null s
block|}
block|}
DECL|method|testFailTwoMixedArgsSecondArgDoesntThrowNPE ()
specifier|public
name|void
name|testFailTwoMixedArgsSecondArgDoesntThrowNPE
parameter_list|()
block|{
name|shouldFail
argument_list|(
operator|new
name|FailTwoMixedArgsSecondArgDoesntThrowNPE
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|class|FailTwoMixedArgsSecondArgThrowsWrongType
specifier|private
specifier|static
class|class
name|FailTwoMixedArgsSecondArgThrowsWrongType
extends|extends
name|PassObject
block|{
DECL|method|twoMixedArgs (@ullable Integer i, String s)
annotation|@
name|Override
specifier|public
name|void
name|twoMixedArgs
parameter_list|(
annotation|@
name|Nullable
name|Integer
name|i
parameter_list|,
name|String
name|s
parameter_list|)
block|{
name|doThrow
argument_list|(
name|s
argument_list|)
expr_stmt|;
comment|// Fail:  throwing non-NPE exception for null s
block|}
block|}
DECL|method|testFailTwoMixedArgsSecondArgThrowsWrongType ()
specifier|public
name|void
name|testFailTwoMixedArgsSecondArgThrowsWrongType
parameter_list|()
block|{
name|shouldFail
argument_list|(
operator|new
name|FailTwoMixedArgsSecondArgThrowsWrongType
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|class|PassTwoNullableArgsFirstThrowsNPE
specifier|private
specifier|static
class|class
name|PassTwoNullableArgsFirstThrowsNPE
extends|extends
name|PassObject
block|{
DECL|method|twoNullableArgs ( @ullable String s, @Nullable Integer i)
annotation|@
name|Override
specifier|public
name|void
name|twoNullableArgs
parameter_list|(
annotation|@
name|Nullable
name|String
name|s
parameter_list|,
annotation|@
name|Nullable
name|Integer
name|i
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|s
argument_list|)
expr_stmt|;
comment|// ok to throw NPE?
block|}
block|}
DECL|method|testPassTwoNullableArgsFirstThrowsNPE ()
specifier|public
name|void
name|testPassTwoNullableArgsFirstThrowsNPE
parameter_list|()
block|{
name|shouldPass
argument_list|(
operator|new
name|PassTwoNullableArgsFirstThrowsNPE
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|class|PassTwoNullableArgsFirstThrowsOther
specifier|private
specifier|static
class|class
name|PassTwoNullableArgsFirstThrowsOther
extends|extends
name|PassObject
block|{
DECL|method|twoNullableArgs ( @ullable String s, @Nullable Integer i)
annotation|@
name|Override
specifier|public
name|void
name|twoNullableArgs
parameter_list|(
annotation|@
name|Nullable
name|String
name|s
parameter_list|,
annotation|@
name|Nullable
name|Integer
name|i
parameter_list|)
block|{
name|doThrow
argument_list|(
name|s
argument_list|)
expr_stmt|;
comment|// ok to throw non-NPE exception for null s
block|}
block|}
DECL|method|testPassTwoNullableArgsFirstThrowsOther ()
specifier|public
name|void
name|testPassTwoNullableArgsFirstThrowsOther
parameter_list|()
block|{
name|shouldPass
argument_list|(
operator|new
name|PassTwoNullableArgsFirstThrowsOther
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|class|PassTwoNullableArgsSecondThrowsNPE
specifier|private
specifier|static
class|class
name|PassTwoNullableArgsSecondThrowsNPE
extends|extends
name|PassObject
block|{
DECL|method|twoNullableArgs ( @ullable String s, @Nullable Integer i)
annotation|@
name|Override
specifier|public
name|void
name|twoNullableArgs
parameter_list|(
annotation|@
name|Nullable
name|String
name|s
parameter_list|,
annotation|@
name|Nullable
name|Integer
name|i
parameter_list|)
block|{
name|i
operator|.
name|intValue
argument_list|()
expr_stmt|;
comment|// ok to throw NPE?
block|}
block|}
DECL|method|testPassTwoNullableArgsSecondThrowsNPE ()
specifier|public
name|void
name|testPassTwoNullableArgsSecondThrowsNPE
parameter_list|()
block|{
name|shouldPass
argument_list|(
operator|new
name|PassTwoNullableArgsSecondThrowsNPE
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|class|PassTwoNullableArgsSecondThrowsOther
specifier|private
specifier|static
class|class
name|PassTwoNullableArgsSecondThrowsOther
extends|extends
name|PassObject
block|{
DECL|method|twoNullableArgs ( @ullable String s, @Nullable Integer i)
annotation|@
name|Override
specifier|public
name|void
name|twoNullableArgs
parameter_list|(
annotation|@
name|Nullable
name|String
name|s
parameter_list|,
annotation|@
name|Nullable
name|Integer
name|i
parameter_list|)
block|{
name|doThrow
argument_list|(
name|i
argument_list|)
expr_stmt|;
comment|// ok to throw non-NPE exception for null i
block|}
block|}
DECL|method|testPassTwoNullableArgsSecondThrowsOther ()
specifier|public
name|void
name|testPassTwoNullableArgsSecondThrowsOther
parameter_list|()
block|{
name|shouldPass
argument_list|(
operator|new
name|PassTwoNullableArgsSecondThrowsOther
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|class|PassTwoNullableArgsNeitherThrowsAnything
specifier|private
specifier|static
class|class
name|PassTwoNullableArgsNeitherThrowsAnything
extends|extends
name|PassObject
block|{
DECL|method|twoNullableArgs ( @ullable String s, @Nullable Integer i)
annotation|@
name|Override
specifier|public
name|void
name|twoNullableArgs
parameter_list|(
annotation|@
name|Nullable
name|String
name|s
parameter_list|,
annotation|@
name|Nullable
name|Integer
name|i
parameter_list|)
block|{
comment|// ok to do nothing
block|}
block|}
DECL|method|testPassTwoNullableArgsNeitherThrowsAnything ()
specifier|public
name|void
name|testPassTwoNullableArgsNeitherThrowsAnything
parameter_list|()
block|{
name|shouldPass
argument_list|(
operator|new
name|PassTwoNullableArgsNeitherThrowsAnything
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
comment|// for NullPointerTester
DECL|class|BaseClassThatFailsToThrow
specifier|private
specifier|static
specifier|abstract
class|class
name|BaseClassThatFailsToThrow
block|{
DECL|method|oneArg (String s)
specifier|public
name|void
name|oneArg
parameter_list|(
name|String
name|s
parameter_list|)
block|{}
block|}
DECL|class|SubclassWithBadSuperclass
specifier|private
specifier|static
class|class
name|SubclassWithBadSuperclass
extends|extends
name|BaseClassThatFailsToThrow
block|{}
DECL|method|testSubclassWithBadSuperclass ()
specifier|public
name|void
name|testSubclassWithBadSuperclass
parameter_list|()
block|{
name|shouldFail
argument_list|(
operator|new
name|SubclassWithBadSuperclass
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
comment|// for NullPointerTester
DECL|class|BaseClassThatFailsToThrowForPackagePrivate
specifier|private
specifier|static
specifier|abstract
class|class
name|BaseClassThatFailsToThrowForPackagePrivate
block|{
DECL|method|packagePrivateOneArg (String s)
name|void
name|packagePrivateOneArg
parameter_list|(
name|String
name|s
parameter_list|)
block|{}
block|}
DECL|class|SubclassWithBadSuperclassForPackagePrivate
specifier|private
specifier|static
class|class
name|SubclassWithBadSuperclassForPackagePrivate
extends|extends
name|BaseClassThatFailsToThrowForPackagePrivate
block|{}
DECL|method|testSubclassWithBadSuperclassForPackagePrivateMethod ()
specifier|public
name|void
name|testSubclassWithBadSuperclassForPackagePrivateMethod
parameter_list|()
block|{
name|shouldFail
argument_list|(
operator|new
name|SubclassWithBadSuperclassForPackagePrivate
argument_list|()
argument_list|,
name|Visibility
operator|.
name|PACKAGE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
comment|// for NullPointerTester
DECL|class|BaseClassThatFailsToThrowForProtected
specifier|private
specifier|static
specifier|abstract
class|class
name|BaseClassThatFailsToThrowForProtected
block|{
DECL|method|protectedOneArg (String s)
specifier|protected
name|void
name|protectedOneArg
parameter_list|(
name|String
name|s
parameter_list|)
block|{}
block|}
DECL|class|SubclassWithBadSuperclassForProtected
specifier|private
specifier|static
class|class
name|SubclassWithBadSuperclassForProtected
extends|extends
name|BaseClassThatFailsToThrowForProtected
block|{}
DECL|method|testSubclassWithBadSuperclassForPackageProtectedMethod ()
specifier|public
name|void
name|testSubclassWithBadSuperclassForPackageProtectedMethod
parameter_list|()
block|{
name|shouldFail
argument_list|(
operator|new
name|SubclassWithBadSuperclassForProtected
argument_list|()
argument_list|,
name|Visibility
operator|.
name|PROTECTED
argument_list|)
expr_stmt|;
block|}
DECL|class|SubclassThatOverridesBadSuperclassMethod
specifier|private
specifier|static
class|class
name|SubclassThatOverridesBadSuperclassMethod
extends|extends
name|BaseClassThatFailsToThrow
block|{
DECL|method|oneArg (@ullable String s)
annotation|@
name|Override
specifier|public
name|void
name|oneArg
parameter_list|(
annotation|@
name|Nullable
name|String
name|s
parameter_list|)
block|{}
block|}
DECL|method|testSubclassThatOverridesBadSuperclassMethod ()
specifier|public
name|void
name|testSubclassThatOverridesBadSuperclassMethod
parameter_list|()
block|{
name|shouldPass
argument_list|(
operator|new
name|SubclassThatOverridesBadSuperclassMethod
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
comment|// for NullPointerTester
DECL|class|SubclassOverridesTheWrongMethod
specifier|private
specifier|static
class|class
name|SubclassOverridesTheWrongMethod
extends|extends
name|BaseClassThatFailsToThrow
block|{
DECL|method|oneArg (@ullable CharSequence s)
specifier|public
name|void
name|oneArg
parameter_list|(
annotation|@
name|Nullable
name|CharSequence
name|s
parameter_list|)
block|{}
block|}
DECL|method|testSubclassOverridesTheWrongMethod ()
specifier|public
name|void
name|testSubclassOverridesTheWrongMethod
parameter_list|()
block|{
name|shouldFail
argument_list|(
operator|new
name|SubclassOverridesTheWrongMethod
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
comment|// for NullPointerTester
DECL|class|ClassThatFailsToThrowForStatic
specifier|private
specifier|static
class|class
name|ClassThatFailsToThrowForStatic
block|{
DECL|method|staticOneArg (String s)
specifier|static
name|void
name|staticOneArg
parameter_list|(
name|String
name|s
parameter_list|)
block|{}
block|}
DECL|method|testClassThatFailsToThrowForStatic ()
specifier|public
name|void
name|testClassThatFailsToThrowForStatic
parameter_list|()
block|{
name|shouldFail
argument_list|(
name|ClassThatFailsToThrowForStatic
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
DECL|class|SubclassThatFailsToThrowForStatic
specifier|private
specifier|static
class|class
name|SubclassThatFailsToThrowForStatic
extends|extends
name|ClassThatFailsToThrowForStatic
block|{}
DECL|method|testSubclassThatFailsToThrowForStatic ()
specifier|public
name|void
name|testSubclassThatFailsToThrowForStatic
parameter_list|()
block|{
name|shouldFail
argument_list|(
name|SubclassThatFailsToThrowForStatic
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
DECL|class|SubclassThatTriesToOverrideBadStaticMethod
specifier|private
specifier|static
class|class
name|SubclassThatTriesToOverrideBadStaticMethod
extends|extends
name|ClassThatFailsToThrowForStatic
block|{
DECL|method|staticOneArg (@ullable String s)
specifier|static
name|void
name|staticOneArg
parameter_list|(
annotation|@
name|Nullable
name|String
name|s
parameter_list|)
block|{}
block|}
DECL|method|testSubclassThatTriesToOverrideBadStaticMethod ()
specifier|public
name|void
name|testSubclassThatTriesToOverrideBadStaticMethod
parameter_list|()
block|{
name|shouldFail
argument_list|(
name|SubclassThatTriesToOverrideBadStaticMethod
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
DECL|class|HardToCreate
specifier|private
specifier|static
specifier|final
class|class
name|HardToCreate
block|{
DECL|method|HardToCreate (HardToCreate x)
specifier|private
name|HardToCreate
parameter_list|(
name|HardToCreate
name|x
parameter_list|)
block|{}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
comment|// used by reflection
DECL|class|CanCreateDefault
specifier|private
specifier|static
class|class
name|CanCreateDefault
block|{
DECL|method|foo (@ullable HardToCreate ignored, String required)
specifier|public
name|void
name|foo
parameter_list|(
annotation|@
name|Nullable
name|HardToCreate
name|ignored
parameter_list|,
name|String
name|required
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|required
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testCanCreateDefault ()
specifier|public
name|void
name|testCanCreateDefault
parameter_list|()
block|{
name|shouldPass
argument_list|(
operator|new
name|CanCreateDefault
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
comment|// used by reflection
DECL|class|CannotCreateDefault
specifier|private
specifier|static
class|class
name|CannotCreateDefault
block|{
DECL|method|foo (HardToCreate ignored, String required)
specifier|public
name|void
name|foo
parameter_list|(
name|HardToCreate
name|ignored
parameter_list|,
name|String
name|required
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|ignored
argument_list|)
expr_stmt|;
name|checkNotNull
argument_list|(
name|required
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testCannotCreateDefault ()
specifier|public
name|void
name|testCannotCreateDefault
parameter_list|()
block|{
name|shouldFail
argument_list|(
operator|new
name|CannotCreateDefault
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|shouldPass (Object instance, Visibility visibility)
specifier|private
specifier|static
name|void
name|shouldPass
parameter_list|(
name|Object
name|instance
parameter_list|,
name|Visibility
name|visibility
parameter_list|)
block|{
operator|new
name|NullPointerTester
argument_list|()
operator|.
name|testInstanceMethods
argument_list|(
name|instance
argument_list|,
name|visibility
argument_list|)
expr_stmt|;
block|}
DECL|method|shouldPass (Object instance)
specifier|private
specifier|static
name|void
name|shouldPass
parameter_list|(
name|Object
name|instance
parameter_list|)
block|{
name|shouldPass
argument_list|(
name|instance
argument_list|,
name|Visibility
operator|.
name|PACKAGE
argument_list|)
expr_stmt|;
name|shouldPass
argument_list|(
name|instance
argument_list|,
name|Visibility
operator|.
name|PROTECTED
argument_list|)
expr_stmt|;
name|shouldPass
argument_list|(
name|instance
argument_list|,
name|Visibility
operator|.
name|PUBLIC
argument_list|)
expr_stmt|;
block|}
comment|// TODO(cpovirk): eliminate surprising Object/Class overloading of shouldFail
DECL|method|shouldFail (Object instance, Visibility visibility)
specifier|private
specifier|static
name|void
name|shouldFail
parameter_list|(
name|Object
name|instance
parameter_list|,
name|Visibility
name|visibility
parameter_list|)
block|{
try|try
block|{
operator|new
name|NullPointerTester
argument_list|()
operator|.
name|testInstanceMethods
argument_list|(
name|instance
argument_list|,
name|visibility
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AssertionFailedError
name|expected
parameter_list|)
block|{
return|return;
block|}
name|fail
argument_list|(
literal|"Should detect problem in "
operator|+
name|instance
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|shouldFail (Object instance)
specifier|private
specifier|static
name|void
name|shouldFail
parameter_list|(
name|Object
name|instance
parameter_list|)
block|{
name|shouldFail
argument_list|(
name|instance
argument_list|,
name|Visibility
operator|.
name|PACKAGE
argument_list|)
expr_stmt|;
name|shouldFail
argument_list|(
name|instance
argument_list|,
name|Visibility
operator|.
name|PROTECTED
argument_list|)
expr_stmt|;
name|shouldFail
argument_list|(
name|instance
argument_list|,
name|Visibility
operator|.
name|PUBLIC
argument_list|)
expr_stmt|;
block|}
DECL|method|shouldFail (Class<?> cls, Visibility visibility)
specifier|private
specifier|static
name|void
name|shouldFail
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|cls
parameter_list|,
name|Visibility
name|visibility
parameter_list|)
block|{
try|try
block|{
operator|new
name|NullPointerTester
argument_list|()
operator|.
name|testStaticMethods
argument_list|(
name|cls
argument_list|,
name|visibility
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AssertionFailedError
name|expected
parameter_list|)
block|{
return|return;
block|}
name|fail
argument_list|(
literal|"Should detect problem in "
operator|+
name|cls
operator|.
name|getSimpleName
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|shouldFail (Class<?> cls)
specifier|private
specifier|static
name|void
name|shouldFail
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|cls
parameter_list|)
block|{
name|shouldFail
argument_list|(
name|cls
argument_list|,
name|Visibility
operator|.
name|PACKAGE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
comment|// used by reflection
DECL|class|PrivateClassWithPrivateConstructor
specifier|private
specifier|static
class|class
name|PrivateClassWithPrivateConstructor
block|{
DECL|method|PrivateClassWithPrivateConstructor (@ullable Integer argument)
specifier|private
name|PrivateClassWithPrivateConstructor
parameter_list|(
annotation|@
name|Nullable
name|Integer
name|argument
parameter_list|)
block|{}
block|}
DECL|method|testPrivateClass ()
specifier|public
name|void
name|testPrivateClass
parameter_list|()
block|{
name|NullPointerTester
name|tester
init|=
operator|new
name|NullPointerTester
argument_list|()
decl_stmt|;
for|for
control|(
name|Constructor
argument_list|<
name|?
argument_list|>
name|constructor
range|:
name|PrivateClassWithPrivateConstructor
operator|.
name|class
operator|.
name|getDeclaredConstructors
argument_list|()
control|)
block|{
name|tester
operator|.
name|testConstructor
argument_list|(
name|constructor
argument_list|)
expr_stmt|;
block|}
block|}
DECL|interface|Foo
specifier|private
interface|interface
name|Foo
parameter_list|<
name|T
parameter_list|>
block|{
DECL|method|doSomething (T bar, Integer baz)
name|void
name|doSomething
parameter_list|(
name|T
name|bar
parameter_list|,
name|Integer
name|baz
parameter_list|)
function_decl|;
block|}
DECL|class|StringFoo
specifier|private
specifier|static
class|class
name|StringFoo
implements|implements
name|Foo
argument_list|<
name|String
argument_list|>
block|{
DECL|method|doSomething (String bar, Integer baz)
annotation|@
name|Override
specifier|public
name|void
name|doSomething
parameter_list|(
name|String
name|bar
parameter_list|,
name|Integer
name|baz
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|bar
argument_list|)
expr_stmt|;
name|checkNotNull
argument_list|(
name|baz
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testBridgeMethodIgnored ()
specifier|public
name|void
name|testBridgeMethodIgnored
parameter_list|()
block|{
operator|new
name|NullPointerTester
argument_list|()
operator|.
name|testAllPublicInstanceMethods
argument_list|(
operator|new
name|StringFoo
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|class|DefaultValueChecker
specifier|private
specifier|static
specifier|abstract
class|class
name|DefaultValueChecker
block|{
DECL|field|arguments
specifier|private
specifier|final
name|Map
argument_list|<
name|Integer
argument_list|,
name|Object
argument_list|>
name|arguments
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
DECL|method|runTester ()
specifier|final
name|DefaultValueChecker
name|runTester
parameter_list|()
block|{
operator|new
name|NullPointerTester
argument_list|()
operator|.
name|testInstanceMethods
argument_list|(
name|this
argument_list|,
name|Visibility
operator|.
name|PACKAGE
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|assertNonNullValues (Object... expectedValues)
specifier|final
name|void
name|assertNonNullValues
parameter_list|(
name|Object
modifier|...
name|expectedValues
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|expectedValues
operator|.
name|length
argument_list|,
name|arguments
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|expectedValues
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
literal|"Default value for parameter #"
operator|+
name|i
argument_list|,
name|expectedValues
index|[
name|i
index|]
argument_list|,
name|arguments
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getDefaultParameterValue (int position)
specifier|final
name|Object
name|getDefaultParameterValue
parameter_list|(
name|int
name|position
parameter_list|)
block|{
return|return
name|arguments
operator|.
name|get
argument_list|(
name|position
argument_list|)
return|;
block|}
DECL|method|calledWith (Object... args)
specifier|final
name|void
name|calledWith
parameter_list|(
name|Object
modifier|...
name|args
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|args
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|args
index|[
name|i
index|]
operator|!=
literal|null
condition|)
block|{
name|arguments
operator|.
name|put
argument_list|(
name|i
argument_list|,
name|args
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|Object
name|arg
range|:
name|args
control|)
block|{
name|checkNotNull
argument_list|(
name|arg
argument_list|)
expr_stmt|;
comment|// to fulfill null check
block|}
block|}
block|}
DECL|enum|Gender
specifier|private
enum|enum
name|Gender
block|{
DECL|enumConstant|MALE
DECL|enumConstant|FEMALE
name|MALE
block|,
name|FEMALE
block|}
DECL|class|AllDefaultValuesChecker
specifier|private
specifier|static
class|class
name|AllDefaultValuesChecker
extends|extends
name|DefaultValueChecker
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
comment|// called by NullPointerTester
DECL|method|checkDefaultValuesForTheseTypes ( Gender gender, Integer integer, int i, String string, CharSequence charSequence, List<String> list, ImmutableList<Integer> immutableList, Map<String, Integer> map, ImmutableMap<String, String> immutableMap, Set<String> set, ImmutableSet<Integer> immutableSet, SortedSet<Number> sortedSet, ImmutableSortedSet<Number> immutableSortedSet, Multiset<String> multiset, ImmutableMultiset<Integer> immutableMultiset, Multimap<String, Integer> multimap, ImmutableMultimap<String, Integer> immutableMultimap, Table<String, Integer, Exception> table, ImmutableTable<Integer, String, Exception> immutableTable)
specifier|public
name|void
name|checkDefaultValuesForTheseTypes
parameter_list|(
name|Gender
name|gender
parameter_list|,
name|Integer
name|integer
parameter_list|,
name|int
name|i
parameter_list|,
name|String
name|string
parameter_list|,
name|CharSequence
name|charSequence
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|list
parameter_list|,
name|ImmutableList
argument_list|<
name|Integer
argument_list|>
name|immutableList
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|map
parameter_list|,
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|immutableMap
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|set
parameter_list|,
name|ImmutableSet
argument_list|<
name|Integer
argument_list|>
name|immutableSet
parameter_list|,
name|SortedSet
argument_list|<
name|Number
argument_list|>
name|sortedSet
parameter_list|,
name|ImmutableSortedSet
argument_list|<
name|Number
argument_list|>
name|immutableSortedSet
parameter_list|,
name|Multiset
argument_list|<
name|String
argument_list|>
name|multiset
parameter_list|,
name|ImmutableMultiset
argument_list|<
name|Integer
argument_list|>
name|immutableMultiset
parameter_list|,
name|Multimap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|multimap
parameter_list|,
name|ImmutableMultimap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|immutableMultimap
parameter_list|,
name|Table
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|,
name|Exception
argument_list|>
name|table
parameter_list|,
name|ImmutableTable
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|,
name|Exception
argument_list|>
name|immutableTable
parameter_list|)
block|{
name|calledWith
argument_list|(
name|gender
argument_list|,
name|integer
argument_list|,
name|i
argument_list|,
name|string
argument_list|,
name|charSequence
argument_list|,
name|list
argument_list|,
name|immutableList
argument_list|,
name|map
argument_list|,
name|immutableMap
argument_list|,
name|set
argument_list|,
name|immutableSet
argument_list|,
name|sortedSet
argument_list|,
name|immutableSortedSet
argument_list|,
name|multiset
argument_list|,
name|immutableMultiset
argument_list|,
name|multimap
argument_list|,
name|immutableMultimap
argument_list|,
name|table
argument_list|,
name|immutableTable
argument_list|)
expr_stmt|;
block|}
DECL|method|check ()
specifier|final
name|void
name|check
parameter_list|()
block|{
name|runTester
argument_list|()
operator|.
name|assertNonNullValues
argument_list|(
name|Gender
operator|.
name|MALE
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|0
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|()
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|()
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|()
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|()
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|()
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|()
argument_list|,
name|ImmutableSortedSet
operator|.
name|of
argument_list|()
argument_list|,
name|ImmutableSortedSet
operator|.
name|of
argument_list|()
argument_list|,
name|ImmutableMultiset
operator|.
name|of
argument_list|()
argument_list|,
name|ImmutableMultiset
operator|.
name|of
argument_list|()
argument_list|,
name|ImmutableMultimap
operator|.
name|of
argument_list|()
argument_list|,
name|ImmutableMultimap
operator|.
name|of
argument_list|()
argument_list|,
name|ImmutableTable
operator|.
name|of
argument_list|()
argument_list|,
name|ImmutableTable
operator|.
name|of
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testDefaultValues ()
specifier|public
name|void
name|testDefaultValues
parameter_list|()
block|{
operator|new
name|AllDefaultValuesChecker
argument_list|()
operator|.
name|check
argument_list|()
expr_stmt|;
block|}
DECL|class|ObjectArrayDefaultValueChecker
specifier|private
specifier|static
class|class
name|ObjectArrayDefaultValueChecker
extends|extends
name|DefaultValueChecker
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
comment|// called by NullPointerTester
DECL|method|checkArray (Object[] array, String s)
specifier|public
name|void
name|checkArray
parameter_list|(
name|Object
index|[]
name|array
parameter_list|,
name|String
name|s
parameter_list|)
block|{
name|calledWith
argument_list|(
name|array
argument_list|,
name|s
argument_list|)
expr_stmt|;
block|}
DECL|method|check ()
name|void
name|check
parameter_list|()
block|{
name|runTester
argument_list|()
expr_stmt|;
name|Object
index|[]
name|defaultArray
init|=
operator|(
name|Object
index|[]
operator|)
name|getDefaultParameterValue
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|defaultArray
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testObjectArrayDefaultValue ()
specifier|public
name|void
name|testObjectArrayDefaultValue
parameter_list|()
block|{
operator|new
name|ObjectArrayDefaultValueChecker
argument_list|()
operator|.
name|check
argument_list|()
expr_stmt|;
block|}
DECL|class|StringArrayDefaultValueChecker
specifier|private
specifier|static
class|class
name|StringArrayDefaultValueChecker
extends|extends
name|DefaultValueChecker
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
comment|// called by NullPointerTester
DECL|method|checkArray (String[] array, String s)
specifier|public
name|void
name|checkArray
parameter_list|(
name|String
index|[]
name|array
parameter_list|,
name|String
name|s
parameter_list|)
block|{
name|calledWith
argument_list|(
name|array
argument_list|,
name|s
argument_list|)
expr_stmt|;
block|}
DECL|method|check ()
name|void
name|check
parameter_list|()
block|{
name|runTester
argument_list|()
expr_stmt|;
name|String
index|[]
name|defaultArray
init|=
operator|(
name|String
index|[]
operator|)
name|getDefaultParameterValue
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|defaultArray
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testStringArrayDefaultValue ()
specifier|public
name|void
name|testStringArrayDefaultValue
parameter_list|()
block|{
operator|new
name|StringArrayDefaultValueChecker
argument_list|()
operator|.
name|check
argument_list|()
expr_stmt|;
block|}
DECL|class|IntArrayDefaultValueChecker
specifier|private
specifier|static
class|class
name|IntArrayDefaultValueChecker
extends|extends
name|DefaultValueChecker
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
comment|// called by NullPointerTester
DECL|method|checkArray (int[] array, String s)
specifier|public
name|void
name|checkArray
parameter_list|(
name|int
index|[]
name|array
parameter_list|,
name|String
name|s
parameter_list|)
block|{
name|calledWith
argument_list|(
name|array
argument_list|,
name|s
argument_list|)
expr_stmt|;
block|}
DECL|method|check ()
name|void
name|check
parameter_list|()
block|{
name|runTester
argument_list|()
expr_stmt|;
name|int
index|[]
name|defaultArray
init|=
operator|(
name|int
index|[]
operator|)
name|getDefaultParameterValue
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|defaultArray
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testIntArrayDefaultValue ()
specifier|public
name|void
name|testIntArrayDefaultValue
parameter_list|()
block|{
operator|new
name|IntArrayDefaultValueChecker
argument_list|()
operator|.
name|check
argument_list|()
expr_stmt|;
block|}
DECL|enum|EmptyEnum
specifier|private
enum|enum
name|EmptyEnum
block|{}
DECL|class|EmptyEnumDefaultValueChecker
specifier|private
specifier|static
class|class
name|EmptyEnumDefaultValueChecker
extends|extends
name|DefaultValueChecker
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
comment|// called by NullPointerTester
DECL|method|checkArray (EmptyEnum object, String s)
specifier|public
name|void
name|checkArray
parameter_list|(
name|EmptyEnum
name|object
parameter_list|,
name|String
name|s
parameter_list|)
block|{
name|calledWith
argument_list|(
name|object
argument_list|,
name|s
argument_list|)
expr_stmt|;
block|}
DECL|method|check ()
name|void
name|check
parameter_list|()
block|{
try|try
block|{
name|runTester
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AssertionError
name|expected
parameter_list|)
block|{
return|return;
block|}
name|fail
argument_list|(
literal|"Should have failed because enum has no constant"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testEmptyEnumDefaultValue ()
specifier|public
name|void
name|testEmptyEnumDefaultValue
parameter_list|()
block|{
operator|new
name|EmptyEnumDefaultValueChecker
argument_list|()
operator|.
name|check
argument_list|()
expr_stmt|;
block|}
DECL|class|GenericClassTypeDefaultValueChecker
specifier|private
specifier|static
class|class
name|GenericClassTypeDefaultValueChecker
extends|extends
name|DefaultValueChecker
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
comment|// called by NullPointerTester
DECL|method|checkArray (Class<? extends List<?>> cls, String s)
specifier|public
name|void
name|checkArray
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|List
argument_list|<
name|?
argument_list|>
argument_list|>
name|cls
parameter_list|,
name|String
name|s
parameter_list|)
block|{
name|calledWith
argument_list|(
name|cls
argument_list|,
name|s
argument_list|)
expr_stmt|;
block|}
DECL|method|check ()
name|void
name|check
parameter_list|()
block|{
name|runTester
argument_list|()
expr_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|defaultClass
init|=
operator|(
name|Class
argument_list|<
name|?
argument_list|>
operator|)
name|getDefaultParameterValue
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|List
operator|.
name|class
argument_list|,
name|defaultClass
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testGenericClassDefaultValue ()
specifier|public
name|void
name|testGenericClassDefaultValue
parameter_list|()
block|{
operator|new
name|GenericClassTypeDefaultValueChecker
argument_list|()
operator|.
name|check
argument_list|()
expr_stmt|;
block|}
DECL|class|NonGenericClassTypeDefaultValueChecker
specifier|private
specifier|static
class|class
name|NonGenericClassTypeDefaultValueChecker
extends|extends
name|DefaultValueChecker
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
comment|// called by NullPointerTester
DECL|method|checkArray (@uppressWarningsR) Class cls, String s)
specifier|public
name|void
name|checkArray
parameter_list|(
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
name|Class
name|cls
parameter_list|,
name|String
name|s
parameter_list|)
block|{
name|calledWith
argument_list|(
name|cls
argument_list|,
name|s
argument_list|)
expr_stmt|;
block|}
DECL|method|check ()
name|void
name|check
parameter_list|()
block|{
name|runTester
argument_list|()
expr_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|defaultClass
init|=
operator|(
name|Class
argument_list|<
name|?
argument_list|>
operator|)
name|getDefaultParameterValue
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Object
operator|.
name|class
argument_list|,
name|defaultClass
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testNonGenericClassDefaultValue ()
specifier|public
name|void
name|testNonGenericClassDefaultValue
parameter_list|()
block|{
operator|new
name|NonGenericClassTypeDefaultValueChecker
argument_list|()
operator|.
name|check
argument_list|()
expr_stmt|;
block|}
DECL|class|GenericTypeTokenDefaultValueChecker
specifier|private
specifier|static
class|class
name|GenericTypeTokenDefaultValueChecker
extends|extends
name|DefaultValueChecker
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
comment|// called by NullPointerTester
DECL|method|checkArray ( TypeToken<? extends List<? super Number>> type, String s)
specifier|public
name|void
name|checkArray
parameter_list|(
name|TypeToken
argument_list|<
name|?
extends|extends
name|List
argument_list|<
name|?
super|super
name|Number
argument_list|>
argument_list|>
name|type
parameter_list|,
name|String
name|s
parameter_list|)
block|{
name|calledWith
argument_list|(
name|type
argument_list|,
name|s
argument_list|)
expr_stmt|;
block|}
DECL|method|check ()
name|void
name|check
parameter_list|()
block|{
name|runTester
argument_list|()
expr_stmt|;
name|TypeToken
argument_list|<
name|?
argument_list|>
name|defaultType
init|=
operator|(
name|TypeToken
argument_list|<
name|?
argument_list|>
operator|)
name|getDefaultParameterValue
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|List
argument_list|<
name|?
super|super
name|Number
argument_list|>
argument_list|>
argument_list|()
block|{}
operator|.
name|isAssignableFrom
argument_list|(
name|defaultType
argument_list|)
block|)
function|;
block|}
block|}
end_class

begin_function
DECL|method|testGenericTypeTokenDefaultValue ()
specifier|public
name|void
name|testGenericTypeTokenDefaultValue
parameter_list|()
block|{
operator|new
name|GenericTypeTokenDefaultValueChecker
argument_list|()
operator|.
name|check
argument_list|()
expr_stmt|;
block|}
end_function

begin_class
DECL|class|NonGenericTypeTokenDefaultValueChecker
specifier|private
specifier|static
class|class
name|NonGenericTypeTokenDefaultValueChecker
extends|extends
name|DefaultValueChecker
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
comment|// called by NullPointerTester
DECL|method|checkArray ( @uppressWarningsR) TypeToken type, String s)
specifier|public
name|void
name|checkArray
parameter_list|(
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
name|TypeToken
name|type
parameter_list|,
name|String
name|s
parameter_list|)
block|{
name|calledWith
argument_list|(
name|type
argument_list|,
name|s
argument_list|)
expr_stmt|;
block|}
DECL|method|check ()
name|void
name|check
parameter_list|()
block|{
name|runTester
argument_list|()
expr_stmt|;
name|TypeToken
argument_list|<
name|?
argument_list|>
name|defaultType
init|=
operator|(
name|TypeToken
argument_list|<
name|?
argument_list|>
operator|)
name|getDefaultParameterValue
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{}
argument_list|,
name|defaultType
argument_list|)
expr_stmt|;
block|}
block|}
end_class

begin_function
DECL|method|testNonGenericTypeTokenDefaultValue ()
specifier|public
name|void
name|testNonGenericTypeTokenDefaultValue
parameter_list|()
block|{
operator|new
name|NonGenericTypeTokenDefaultValueChecker
argument_list|()
operator|.
name|check
argument_list|()
expr_stmt|;
block|}
end_function

begin_interface
DECL|interface|FromTo
specifier|private
interface|interface
name|FromTo
parameter_list|<
name|F
parameter_list|,
name|T
parameter_list|>
extends|extends
name|Function
argument_list|<
name|F
argument_list|,
name|T
argument_list|>
block|{}
end_interface

begin_class
DECL|class|GenericInterfaceDefaultValueChecker
specifier|private
specifier|static
class|class
name|GenericInterfaceDefaultValueChecker
extends|extends
name|DefaultValueChecker
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
comment|// called by NullPointerTester
DECL|method|checkArray (FromTo<String, Integer> f, String s)
specifier|public
name|void
name|checkArray
parameter_list|(
name|FromTo
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|f
parameter_list|,
name|String
name|s
parameter_list|)
block|{
name|calledWith
argument_list|(
name|f
argument_list|,
name|s
argument_list|)
expr_stmt|;
block|}
DECL|method|check ()
name|void
name|check
parameter_list|()
block|{
name|runTester
argument_list|()
expr_stmt|;
name|FromTo
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|defaultFunction
init|=
operator|(
name|FromTo
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|getDefaultParameterValue
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|defaultFunction
operator|.
name|apply
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

begin_function
DECL|method|testGenericInterfaceDefaultValue ()
specifier|public
name|void
name|testGenericInterfaceDefaultValue
parameter_list|()
block|{
operator|new
name|GenericInterfaceDefaultValueChecker
argument_list|()
operator|.
name|check
argument_list|()
expr_stmt|;
block|}
end_function

begin_interface
DECL|interface|NullRejectingFromTo
specifier|private
interface|interface
name|NullRejectingFromTo
parameter_list|<
name|F
parameter_list|,
name|T
parameter_list|>
extends|extends
name|Function
argument_list|<
name|F
argument_list|,
name|T
argument_list|>
block|{
DECL|method|apply (F from)
annotation|@
name|Override
specifier|public
specifier|abstract
name|T
name|apply
parameter_list|(
name|F
name|from
parameter_list|)
function_decl|;
block|}
end_interface

begin_class
DECL|class|NullRejectingInterfaceDefaultValueChecker
specifier|private
specifier|static
class|class
name|NullRejectingInterfaceDefaultValueChecker
extends|extends
name|DefaultValueChecker
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
comment|// called by NullPointerTester
DECL|method|checkArray (NullRejectingFromTo<String, Integer> f, String s)
specifier|public
name|void
name|checkArray
parameter_list|(
name|NullRejectingFromTo
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|f
parameter_list|,
name|String
name|s
parameter_list|)
block|{
name|calledWith
argument_list|(
name|f
argument_list|,
name|s
argument_list|)
expr_stmt|;
block|}
DECL|method|check ()
name|void
name|check
parameter_list|()
block|{
name|runTester
argument_list|()
expr_stmt|;
name|NullRejectingFromTo
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|defaultFunction
init|=
operator|(
name|NullRejectingFromTo
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|getDefaultParameterValue
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|defaultFunction
argument_list|)
expr_stmt|;
try|try
block|{
name|defaultFunction
operator|.
name|apply
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Proxy Should have rejected null"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|expected
parameter_list|)
block|{}
block|}
block|}
end_class

begin_function
DECL|method|testNullRejectingInterfaceDefaultValue ()
specifier|public
name|void
name|testNullRejectingInterfaceDefaultValue
parameter_list|()
block|{
operator|new
name|NullRejectingInterfaceDefaultValueChecker
argument_list|()
operator|.
name|check
argument_list|()
expr_stmt|;
block|}
end_function

begin_class
DECL|class|MultipleInterfacesDefaultValueChecker
specifier|private
specifier|static
class|class
name|MultipleInterfacesDefaultValueChecker
extends|extends
name|DefaultValueChecker
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
comment|// called by NullPointerTester
DECL|method|checkArray ( T f, String s)
specifier|public
parameter_list|<
name|T
extends|extends
name|FromTo
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
operator|&
name|Supplier
argument_list|<
name|Long
argument_list|>
parameter_list|>
name|void
name|checkArray
parameter_list|(
name|T
name|f
parameter_list|,
name|String
name|s
parameter_list|)
block|{
name|calledWith
argument_list|(
name|f
argument_list|,
name|s
argument_list|)
expr_stmt|;
block|}
DECL|method|check ()
name|void
name|check
parameter_list|()
block|{
name|runTester
argument_list|()
expr_stmt|;
name|FromTo
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|defaultFunction
init|=
operator|(
name|FromTo
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|getDefaultParameterValue
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|defaultFunction
operator|.
name|apply
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|Supplier
argument_list|<
name|?
argument_list|>
name|defaultSupplier
init|=
operator|(
name|Supplier
argument_list|<
name|?
argument_list|>
operator|)
name|defaultFunction
decl_stmt|;
name|assertEquals
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
literal|0
argument_list|)
argument_list|,
name|defaultSupplier
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

begin_function
DECL|method|testMultipleInterfacesDefaultValue ()
specifier|public
name|void
name|testMultipleInterfacesDefaultValue
parameter_list|()
block|{
operator|new
name|MultipleInterfacesDefaultValueChecker
argument_list|()
operator|.
name|check
argument_list|()
expr_stmt|;
block|}
end_function

begin_class
DECL|class|GenericInterface2DefaultValueChecker
specifier|private
specifier|static
class|class
name|GenericInterface2DefaultValueChecker
extends|extends
name|DefaultValueChecker
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
comment|// called by NullPointerTester
DECL|method|checkArray (FromTo<String, FromTo<Integer, String>> f, String s)
specifier|public
name|void
name|checkArray
parameter_list|(
name|FromTo
argument_list|<
name|String
argument_list|,
name|FromTo
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
argument_list|>
name|f
parameter_list|,
name|String
name|s
parameter_list|)
block|{
name|calledWith
argument_list|(
name|f
argument_list|,
name|s
argument_list|)
expr_stmt|;
block|}
DECL|method|check ()
name|void
name|check
parameter_list|()
block|{
name|runTester
argument_list|()
expr_stmt|;
name|FromTo
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|defaultFunction
init|=
operator|(
name|FromTo
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|getDefaultParameterValue
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|FromTo
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|returnValue
init|=
operator|(
name|FromTo
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|defaultFunction
operator|.
name|apply
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|returnValue
operator|.
name|apply
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

begin_function
DECL|method|tesGenericInterfaceReturnedByGenericMethod ()
specifier|public
name|void
name|tesGenericInterfaceReturnedByGenericMethod
parameter_list|()
block|{
operator|new
name|GenericInterface2DefaultValueChecker
argument_list|()
operator|.
name|check
argument_list|()
expr_stmt|;
block|}
end_function

begin_class
DECL|class|AbstractGenericDefaultValueChecker
specifier|private
specifier|static
specifier|abstract
class|class
name|AbstractGenericDefaultValueChecker
parameter_list|<
name|T
parameter_list|>
extends|extends
name|DefaultValueChecker
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
comment|// called by NullPointerTester
DECL|method|checkGeneric (T value, String s)
specifier|public
name|void
name|checkGeneric
parameter_list|(
name|T
name|value
parameter_list|,
name|String
name|s
parameter_list|)
block|{
name|calledWith
argument_list|(
name|value
argument_list|,
name|s
argument_list|)
expr_stmt|;
block|}
block|}
end_class

begin_class
DECL|class|GenericDefaultValueResolvedToStringChecker
specifier|private
specifier|static
class|class
name|GenericDefaultValueResolvedToStringChecker
extends|extends
name|AbstractGenericDefaultValueChecker
argument_list|<
name|String
argument_list|>
block|{
DECL|method|check ()
name|void
name|check
parameter_list|()
block|{
name|runTester
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|getDefaultParameterValue
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

begin_function
DECL|method|testGenericTypeResolvedForDefaultValue ()
specifier|public
name|void
name|testGenericTypeResolvedForDefaultValue
parameter_list|()
block|{
operator|new
name|GenericDefaultValueResolvedToStringChecker
argument_list|()
operator|.
name|check
argument_list|()
expr_stmt|;
block|}
end_function

begin_class
specifier|private
specifier|static
specifier|abstract
DECL|class|AbstractGenericDefaultValueForPackagePrivateMethodChecker
class|class
name|AbstractGenericDefaultValueForPackagePrivateMethodChecker
parameter_list|<
name|T
parameter_list|>
extends|extends
name|DefaultValueChecker
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
comment|// called by NullPointerTester
DECL|method|checkGeneric (T value, String s)
name|void
name|checkGeneric
parameter_list|(
name|T
name|value
parameter_list|,
name|String
name|s
parameter_list|)
block|{
name|calledWith
argument_list|(
name|value
argument_list|,
name|s
argument_list|)
expr_stmt|;
block|}
block|}
end_class

begin_class
specifier|private
specifier|static
DECL|class|DefaultValueForPackagePrivateMethodResolvedToStringChecker
class|class
name|DefaultValueForPackagePrivateMethodResolvedToStringChecker
extends|extends
name|AbstractGenericDefaultValueForPackagePrivateMethodChecker
argument_list|<
name|String
argument_list|>
block|{
DECL|method|check ()
name|void
name|check
parameter_list|()
block|{
name|runTester
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|getDefaultParameterValue
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

begin_function
DECL|method|testDefaultValueResolvedForPackagePrivateMethod ()
specifier|public
name|void
name|testDefaultValueResolvedForPackagePrivateMethod
parameter_list|()
block|{
operator|new
name|DefaultValueForPackagePrivateMethodResolvedToStringChecker
argument_list|()
operator|.
name|check
argument_list|()
expr_stmt|;
block|}
end_function

begin_class
DECL|class|VisibilityMethods
specifier|private
specifier|static
class|class
name|VisibilityMethods
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
comment|// Called by reflection
DECL|method|privateMethod ()
specifier|private
name|void
name|privateMethod
parameter_list|()
block|{}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
comment|// Called by reflection
DECL|method|packagePrivateMethod ()
name|void
name|packagePrivateMethod
parameter_list|()
block|{}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
comment|// Called by reflection
DECL|method|protectedMethod ()
specifier|protected
name|void
name|protectedMethod
parameter_list|()
block|{}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
comment|// Called by reflection
DECL|method|publicMethod ()
specifier|public
name|void
name|publicMethod
parameter_list|()
block|{}
block|}
end_class

begin_function
DECL|method|testVisibility_public ()
specifier|public
name|void
name|testVisibility_public
parameter_list|()
throws|throws
name|Exception
block|{
name|assertFalse
argument_list|(
name|Visibility
operator|.
name|PUBLIC
operator|.
name|isVisible
argument_list|(
name|VisibilityMethods
operator|.
name|class
operator|.
name|getDeclaredMethod
argument_list|(
literal|"privateMethod"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|Visibility
operator|.
name|PUBLIC
operator|.
name|isVisible
argument_list|(
name|VisibilityMethods
operator|.
name|class
operator|.
name|getDeclaredMethod
argument_list|(
literal|"packagePrivateMethod"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|Visibility
operator|.
name|PUBLIC
operator|.
name|isVisible
argument_list|(
name|VisibilityMethods
operator|.
name|class
operator|.
name|getDeclaredMethod
argument_list|(
literal|"protectedMethod"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Visibility
operator|.
name|PUBLIC
operator|.
name|isVisible
argument_list|(
name|VisibilityMethods
operator|.
name|class
operator|.
name|getDeclaredMethod
argument_list|(
literal|"publicMethod"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|testVisibility_protected ()
specifier|public
name|void
name|testVisibility_protected
parameter_list|()
throws|throws
name|Exception
block|{
name|assertFalse
argument_list|(
name|Visibility
operator|.
name|PROTECTED
operator|.
name|isVisible
argument_list|(
name|VisibilityMethods
operator|.
name|class
operator|.
name|getDeclaredMethod
argument_list|(
literal|"privateMethod"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|Visibility
operator|.
name|PROTECTED
operator|.
name|isVisible
argument_list|(
name|VisibilityMethods
operator|.
name|class
operator|.
name|getDeclaredMethod
argument_list|(
literal|"packagePrivateMethod"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Visibility
operator|.
name|PROTECTED
operator|.
name|isVisible
argument_list|(
name|VisibilityMethods
operator|.
name|class
operator|.
name|getDeclaredMethod
argument_list|(
literal|"protectedMethod"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Visibility
operator|.
name|PROTECTED
operator|.
name|isVisible
argument_list|(
name|VisibilityMethods
operator|.
name|class
operator|.
name|getDeclaredMethod
argument_list|(
literal|"publicMethod"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|testVisibility_package ()
specifier|public
name|void
name|testVisibility_package
parameter_list|()
throws|throws
name|Exception
block|{
name|assertFalse
argument_list|(
name|Visibility
operator|.
name|PACKAGE
operator|.
name|isVisible
argument_list|(
name|VisibilityMethods
operator|.
name|class
operator|.
name|getDeclaredMethod
argument_list|(
literal|"privateMethod"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Visibility
operator|.
name|PACKAGE
operator|.
name|isVisible
argument_list|(
name|VisibilityMethods
operator|.
name|class
operator|.
name|getDeclaredMethod
argument_list|(
literal|"packagePrivateMethod"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Visibility
operator|.
name|PACKAGE
operator|.
name|isVisible
argument_list|(
name|VisibilityMethods
operator|.
name|class
operator|.
name|getDeclaredMethod
argument_list|(
literal|"protectedMethod"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Visibility
operator|.
name|PACKAGE
operator|.
name|isVisible
argument_list|(
name|VisibilityMethods
operator|.
name|class
operator|.
name|getDeclaredMethod
argument_list|(
literal|"publicMethod"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/*    *    * TODO(kevinb): This is only a very small start.    * Must come back and finish.    *    */
end_comment

unit|}
end_unit

