begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2011 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.testing
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|testing
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertThat
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|testing
operator|.
name|GcFinalization
operator|.
name|FinalizationPredicate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|SettableFuture
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|ref
operator|.
name|WeakReference
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|WeakHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_comment
comment|/**  * Tests for {@link GcFinalization}.  *  * @author Martin Buchholz  * @author mike nonemacher  */
end_comment

begin_class
DECL|class|GcFinalizationTest
specifier|public
class|class
name|GcFinalizationTest
extends|extends
name|TestCase
block|{
comment|// ----------------------------------------------------------------
comment|// Ordinary tests of successful method execution
comment|// ----------------------------------------------------------------
DECL|method|testAwait_CountDownLatch ()
specifier|public
name|void
name|testAwait_CountDownLatch
parameter_list|()
block|{
specifier|final
name|CountDownLatch
name|latch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|Object
name|x
init|=
operator|new
name|Object
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|void
name|finalize
parameter_list|()
block|{
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
decl_stmt|;
name|x
operator|=
literal|null
expr_stmt|;
comment|// Hint to the JIT that x is unreachable
name|GcFinalization
operator|.
name|await
argument_list|(
name|latch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|latch
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testAwaitDone_Future ()
specifier|public
name|void
name|testAwaitDone_Future
parameter_list|()
block|{
specifier|final
name|SettableFuture
argument_list|<
name|Void
argument_list|>
name|future
init|=
name|SettableFuture
operator|.
name|create
argument_list|()
decl_stmt|;
name|Object
name|x
init|=
operator|new
name|Object
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|void
name|finalize
parameter_list|()
block|{
name|future
operator|.
name|set
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|x
operator|=
literal|null
expr_stmt|;
comment|// Hint to the JIT that x is unreachable
name|GcFinalization
operator|.
name|awaitDone
argument_list|(
name|future
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|future
operator|.
name|isDone
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|future
operator|.
name|isCancelled
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testAwaitDone_Future_Cancel ()
specifier|public
name|void
name|testAwaitDone_Future_Cancel
parameter_list|()
block|{
specifier|final
name|SettableFuture
argument_list|<
name|Void
argument_list|>
name|future
init|=
name|SettableFuture
operator|.
name|create
argument_list|()
decl_stmt|;
name|Object
name|x
init|=
operator|new
name|Object
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|void
name|finalize
parameter_list|()
block|{
name|future
operator|.
name|cancel
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|x
operator|=
literal|null
expr_stmt|;
comment|// Hint to the JIT that x is unreachable
name|GcFinalization
operator|.
name|awaitDone
argument_list|(
name|future
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|future
operator|.
name|isDone
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|future
operator|.
name|isCancelled
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testAwaitClear ()
specifier|public
name|void
name|testAwaitClear
parameter_list|()
block|{
specifier|final
name|WeakReference
argument_list|<
name|Object
argument_list|>
name|ref
init|=
operator|new
name|WeakReference
argument_list|<>
argument_list|(
operator|new
name|Object
argument_list|()
argument_list|)
decl_stmt|;
name|GcFinalization
operator|.
name|awaitClear
argument_list|(
name|ref
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|ref
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testAwaitDone_FinalizationPredicate ()
specifier|public
name|void
name|testAwaitDone_FinalizationPredicate
parameter_list|()
block|{
specifier|final
name|WeakHashMap
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|map
init|=
operator|new
name|WeakHashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
operator|new
name|Object
argument_list|()
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|GcFinalization
operator|.
name|awaitDone
argument_list|(
operator|new
name|FinalizationPredicate
argument_list|()
block|{
specifier|public
name|boolean
name|isDone
parameter_list|()
block|{
return|return
name|map
operator|.
name|isEmpty
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|map
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// ----------------------------------------------------------------
comment|// Test that interrupts result in RuntimeException, not InterruptedException.
comment|// Trickier than it looks, because runFinalization swallows interrupts.
comment|// ----------------------------------------------------------------
DECL|class|Interruptenator
class|class
name|Interruptenator
extends|extends
name|Thread
block|{
DECL|field|shutdown
specifier|final
name|AtomicBoolean
name|shutdown
decl_stmt|;
DECL|method|Interruptenator (final Thread interruptee)
name|Interruptenator
parameter_list|(
specifier|final
name|Thread
name|interruptee
parameter_list|)
block|{
name|this
argument_list|(
name|interruptee
argument_list|,
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|Interruptenator (final Thread interruptee, final AtomicBoolean shutdown)
name|Interruptenator
parameter_list|(
specifier|final
name|Thread
name|interruptee
parameter_list|,
specifier|final
name|AtomicBoolean
name|shutdown
parameter_list|)
block|{
name|super
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
while|while
condition|(
operator|!
name|shutdown
operator|.
name|get
argument_list|()
condition|)
block|{
name|interruptee
operator|.
name|interrupt
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|yield
argument_list|()
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|this
operator|.
name|shutdown
operator|=
name|shutdown
expr_stmt|;
name|start
argument_list|()
expr_stmt|;
block|}
DECL|method|shutdown ()
name|void
name|shutdown
parameter_list|()
block|{
name|shutdown
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
while|while
condition|(
name|this
operator|.
name|isAlive
argument_list|()
condition|)
block|{
name|Thread
operator|.
name|yield
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|assertWrapsInterruptedException (RuntimeException e)
name|void
name|assertWrapsInterruptedException
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
literal|"Unexpected interrupt"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
operator|.
name|isInstanceOf
argument_list|(
name|InterruptedException
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
DECL|method|testAwait_CountDownLatch_Interrupted ()
specifier|public
name|void
name|testAwait_CountDownLatch_Interrupted
parameter_list|()
block|{
name|Interruptenator
name|interruptenator
init|=
operator|new
name|Interruptenator
argument_list|(
name|Thread
operator|.
name|currentThread
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
specifier|final
name|CountDownLatch
name|latch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
try|try
block|{
name|GcFinalization
operator|.
name|await
argument_list|(
name|latch
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"should throw"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|expected
parameter_list|)
block|{
name|assertWrapsInterruptedException
argument_list|(
name|expected
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|interruptenator
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|interrupted
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|testAwaitDone_Future_Interrupted_Interrupted ()
specifier|public
name|void
name|testAwaitDone_Future_Interrupted_Interrupted
parameter_list|()
block|{
name|Interruptenator
name|interruptenator
init|=
operator|new
name|Interruptenator
argument_list|(
name|Thread
operator|.
name|currentThread
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
specifier|final
name|SettableFuture
argument_list|<
name|Void
argument_list|>
name|future
init|=
name|SettableFuture
operator|.
name|create
argument_list|()
decl_stmt|;
try|try
block|{
name|GcFinalization
operator|.
name|awaitDone
argument_list|(
name|future
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"should throw"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|expected
parameter_list|)
block|{
name|assertWrapsInterruptedException
argument_list|(
name|expected
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|interruptenator
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|interrupted
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|testAwaitClear_Interrupted ()
specifier|public
name|void
name|testAwaitClear_Interrupted
parameter_list|()
block|{
name|Interruptenator
name|interruptenator
init|=
operator|new
name|Interruptenator
argument_list|(
name|Thread
operator|.
name|currentThread
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
specifier|final
name|WeakReference
argument_list|<
name|Object
argument_list|>
name|ref
init|=
operator|new
name|WeakReference
argument_list|<
name|Object
argument_list|>
argument_list|(
name|Boolean
operator|.
name|TRUE
argument_list|)
decl_stmt|;
try|try
block|{
name|GcFinalization
operator|.
name|awaitClear
argument_list|(
name|ref
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"should throw"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|expected
parameter_list|)
block|{
name|assertWrapsInterruptedException
argument_list|(
name|expected
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|interruptenator
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|interrupted
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|testAwaitDone_FinalizationPredicate_Interrupted ()
specifier|public
name|void
name|testAwaitDone_FinalizationPredicate_Interrupted
parameter_list|()
block|{
name|Interruptenator
name|interruptenator
init|=
operator|new
name|Interruptenator
argument_list|(
name|Thread
operator|.
name|currentThread
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
try|try
block|{
name|GcFinalization
operator|.
name|awaitDone
argument_list|(
operator|new
name|FinalizationPredicate
argument_list|()
block|{
specifier|public
name|boolean
name|isDone
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"should throw"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|expected
parameter_list|)
block|{
name|assertWrapsInterruptedException
argument_list|(
name|expected
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|interruptenator
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|interrupted
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * awaitFullGc() is not quite as reliable a way to ensure calling of a specific finalize method as    * the more direct await* methods, but should be reliable enough in practice to avoid flakiness of    * this test. (And if it isn't, we'd like to know about it first!)    */
DECL|method|testAwaitFullGc ()
specifier|public
name|void
name|testAwaitFullGc
parameter_list|()
block|{
specifier|final
name|CountDownLatch
name|finalizerRan
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|WeakReference
argument_list|<
name|Object
argument_list|>
name|ref
init|=
operator|new
name|WeakReference
argument_list|<
name|Object
argument_list|>
argument_list|(
operator|new
name|Object
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|void
name|finalize
parameter_list|()
block|{
name|finalizerRan
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
comment|// Don't copy this into your own test!
comment|// Use e.g. awaitClear or await(CountDownLatch) instead.
name|GcFinalization
operator|.
name|awaitFullGc
argument_list|()
expr_stmt|;
comment|// If this test turns out to be flaky, add a second call to awaitFullGc()
comment|// GcFinalization.awaitFullGc();
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|finalizerRan
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|ref
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

