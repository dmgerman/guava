begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2012 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.testing
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|testing
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|CharMatcher
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Equivalence
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Joiner
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Splitter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Ticker
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Ordering
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|primitives
operator|.
name|UnsignedInteger
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|primitives
operator|.
name|UnsignedLong
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|reflect
operator|.
name|TypeToken
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|testing
operator|.
name|ForwardingWrapperTester
operator|.
name|FreshValueGenerator
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Reader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Writer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigDecimal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|Buffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|CharBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|DoubleBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|FloatBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|IntBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|LongBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ShortBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Currency
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|MatchResult
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_comment
comment|/**  * Tests for {@link ForwardingWrapperTester.FreshValueGenerator}.  *  * @author Ben Yu  */
end_comment

begin_class
DECL|class|FreshValueGeneratorTest
specifier|public
class|class
name|FreshValueGeneratorTest
extends|extends
name|TestCase
block|{
DECL|method|testFreshInstance ()
specifier|public
name|void
name|testFreshInstance
parameter_list|()
block|{
name|assertFreshInstances
argument_list|(
name|String
operator|.
name|class
argument_list|,
name|CharSequence
operator|.
name|class
argument_list|,
name|Appendable
operator|.
name|class
argument_list|,
name|StringBuffer
operator|.
name|class
argument_list|,
name|StringBuilder
operator|.
name|class
argument_list|,
name|Pattern
operator|.
name|class
argument_list|,
name|MatchResult
operator|.
name|class
argument_list|,
name|Number
operator|.
name|class
argument_list|,
name|int
operator|.
name|class
argument_list|,
name|Integer
operator|.
name|class
argument_list|,
name|long
operator|.
name|class
argument_list|,
name|Long
operator|.
name|class
argument_list|,
name|short
operator|.
name|class
argument_list|,
name|Short
operator|.
name|class
argument_list|,
name|byte
operator|.
name|class
argument_list|,
name|Byte
operator|.
name|class
argument_list|,
name|boolean
operator|.
name|class
argument_list|,
name|Boolean
operator|.
name|class
argument_list|,
name|char
operator|.
name|class
argument_list|,
name|Character
operator|.
name|class
argument_list|,
name|int
index|[]
operator|.
expr|class
argument_list|,
name|Object
index|[]
operator|.
expr|class
argument_list|,
name|UnsignedInteger
operator|.
name|class
argument_list|,
name|UnsignedLong
operator|.
name|class
argument_list|,
name|BigInteger
operator|.
name|class
argument_list|,
name|BigDecimal
operator|.
name|class
argument_list|,
name|Throwable
operator|.
name|class
argument_list|,
name|Error
operator|.
name|class
argument_list|,
name|Exception
operator|.
name|class
argument_list|,
name|RuntimeException
operator|.
name|class
argument_list|,
name|Charset
operator|.
name|class
argument_list|,
name|Locale
operator|.
name|class
argument_list|,
name|Currency
operator|.
name|class
argument_list|,
name|List
operator|.
name|class
argument_list|,
name|Map
operator|.
name|Entry
operator|.
name|class
argument_list|,
name|Object
operator|.
name|class
argument_list|,
name|Equivalence
operator|.
name|class
argument_list|,
name|Predicate
operator|.
name|class
argument_list|,
name|Function
operator|.
name|class
argument_list|,
name|Comparable
operator|.
name|class
argument_list|,
name|Comparator
operator|.
name|class
argument_list|,
name|Ordering
operator|.
name|class
argument_list|,
name|Class
operator|.
name|class
argument_list|,
name|Type
operator|.
name|class
argument_list|,
name|TypeToken
operator|.
name|class
argument_list|,
name|TimeUnit
operator|.
name|class
argument_list|,
name|Ticker
operator|.
name|class
argument_list|,
name|Joiner
operator|.
name|class
argument_list|,
name|Splitter
operator|.
name|class
argument_list|,
name|CharMatcher
operator|.
name|class
argument_list|,
name|InputStream
operator|.
name|class
argument_list|,
name|ByteArrayInputStream
operator|.
name|class
argument_list|,
name|Reader
operator|.
name|class
argument_list|,
name|Readable
operator|.
name|class
argument_list|,
name|StringReader
operator|.
name|class
argument_list|,
name|OutputStream
operator|.
name|class
argument_list|,
name|ByteArrayOutputStream
operator|.
name|class
argument_list|,
name|Writer
operator|.
name|class
argument_list|,
name|StringWriter
operator|.
name|class
argument_list|,
name|File
operator|.
name|class
argument_list|,
name|Buffer
operator|.
name|class
argument_list|,
name|ByteBuffer
operator|.
name|class
argument_list|,
name|CharBuffer
operator|.
name|class
argument_list|,
name|ShortBuffer
operator|.
name|class
argument_list|,
name|IntBuffer
operator|.
name|class
argument_list|,
name|LongBuffer
operator|.
name|class
argument_list|,
name|FloatBuffer
operator|.
name|class
argument_list|,
name|DoubleBuffer
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
DECL|method|testEnums ()
specifier|public
name|void
name|testEnums
parameter_list|()
block|{
name|assertEqualInstance
argument_list|(
name|EmptyEnum
operator|.
name|class
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertEqualInstance
argument_list|(
name|OneConstantEnum
operator|.
name|class
argument_list|,
name|OneConstantEnum
operator|.
name|CONSTANT1
argument_list|)
expr_stmt|;
name|assertFreshInstance
argument_list|(
name|TwoConstantEnum
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
DECL|method|assertFreshInstances (Class<?>.... types)
specifier|private
specifier|static
name|void
name|assertFreshInstances
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
modifier|...
name|types
parameter_list|)
block|{
for|for
control|(
name|Class
argument_list|<
name|?
argument_list|>
name|type
range|:
name|types
control|)
block|{
name|assertFreshInstance
argument_list|(
name|type
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|assertFreshInstance (Class<T> type)
specifier|private
specifier|static
parameter_list|<
name|T
parameter_list|>
name|void
name|assertFreshInstance
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|)
block|{
name|FreshValueGenerator
name|generator
init|=
operator|new
name|FreshValueGenerator
argument_list|()
decl_stmt|;
name|T
name|value1
init|=
name|generator
operator|.
name|generate
argument_list|(
name|type
argument_list|)
decl_stmt|;
name|T
name|value2
init|=
name|generator
operator|.
name|generate
argument_list|(
name|type
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Null returned for "
operator|+
name|type
argument_list|,
name|value1
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Equal instance "
operator|+
name|value1
operator|+
literal|" returned for "
operator|+
name|type
argument_list|,
name|value1
operator|.
name|equals
argument_list|(
name|value2
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|assertEqualInstance (Class<T> type, T value)
specifier|private
specifier|static
parameter_list|<
name|T
parameter_list|>
name|void
name|assertEqualInstance
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|,
name|T
name|value
parameter_list|)
block|{
name|FreshValueGenerator
name|generator
init|=
operator|new
name|FreshValueGenerator
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|value
argument_list|,
name|generator
operator|.
name|generate
argument_list|(
name|type
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|value
argument_list|,
name|generator
operator|.
name|generate
argument_list|(
name|type
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|enum|EmptyEnum
specifier|private
enum|enum
name|EmptyEnum
block|{}
DECL|enum|OneConstantEnum
specifier|private
enum|enum
name|OneConstantEnum
block|{
DECL|enumConstant|CONSTANT1
name|CONSTANT1
block|}
DECL|enum|TwoConstantEnum
specifier|private
enum|enum
name|TwoConstantEnum
block|{
DECL|enumConstant|CONSTANT1
DECL|enumConstant|CONSTANT2
name|CONSTANT1
block|,
name|CONSTANT2
block|}
block|}
end_class

end_unit

