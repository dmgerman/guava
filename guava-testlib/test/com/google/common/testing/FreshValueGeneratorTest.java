begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2012 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.testing
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|testing
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|CharMatcher
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Equivalence
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Joiner
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Splitter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Ticker
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ArrayListMultimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|BiMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|HashBasedTable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|HashBiMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|HashMultimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|HashMultiset
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableBiMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableCollection
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableListMultimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMultimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMultiset
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSetMultimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSortedMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSortedMultiset
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSortedSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableTable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|LinkedHashMultimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|LinkedHashMultiset
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ListMultimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Multimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Multiset
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Ordering
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|RowSortedTable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|SetMultimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|SortedMultiset
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|TreeBasedTable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|TreeMultiset
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|primitives
operator|.
name|UnsignedInteger
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|primitives
operator|.
name|UnsignedLong
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|reflect
operator|.
name|TypeToken
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Reader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Writer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigDecimal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|Buffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|CharBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|DoubleBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|FloatBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|IntBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|LongBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ShortBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Currency
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NavigableMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NavigableSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|MatchResult
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_comment
comment|/**  * Tests for {@link FreshValueGenerator}.  *  * @author Ben Yu  */
end_comment

begin_class
DECL|class|FreshValueGeneratorTest
specifier|public
class|class
name|FreshValueGeneratorTest
extends|extends
name|TestCase
block|{
DECL|method|testFreshInstance ()
specifier|public
name|void
name|testFreshInstance
parameter_list|()
block|{
name|assertFreshInstances
argument_list|(
name|String
operator|.
name|class
argument_list|,
name|CharSequence
operator|.
name|class
argument_list|,
name|Appendable
operator|.
name|class
argument_list|,
name|StringBuffer
operator|.
name|class
argument_list|,
name|StringBuilder
operator|.
name|class
argument_list|,
name|Pattern
operator|.
name|class
argument_list|,
name|MatchResult
operator|.
name|class
argument_list|,
name|Number
operator|.
name|class
argument_list|,
name|int
operator|.
name|class
argument_list|,
name|Integer
operator|.
name|class
argument_list|,
name|long
operator|.
name|class
argument_list|,
name|Long
operator|.
name|class
argument_list|,
name|short
operator|.
name|class
argument_list|,
name|Short
operator|.
name|class
argument_list|,
name|byte
operator|.
name|class
argument_list|,
name|Byte
operator|.
name|class
argument_list|,
name|boolean
operator|.
name|class
argument_list|,
name|Boolean
operator|.
name|class
argument_list|,
name|char
operator|.
name|class
argument_list|,
name|Character
operator|.
name|class
argument_list|,
name|int
index|[]
operator|.
expr|class
argument_list|,
name|Object
index|[]
operator|.
expr|class
argument_list|,
name|UnsignedInteger
operator|.
name|class
argument_list|,
name|UnsignedLong
operator|.
name|class
argument_list|,
name|BigInteger
operator|.
name|class
argument_list|,
name|BigDecimal
operator|.
name|class
argument_list|,
name|Throwable
operator|.
name|class
argument_list|,
name|Error
operator|.
name|class
argument_list|,
name|Exception
operator|.
name|class
argument_list|,
name|RuntimeException
operator|.
name|class
argument_list|,
name|Charset
operator|.
name|class
argument_list|,
name|Locale
operator|.
name|class
argument_list|,
name|Currency
operator|.
name|class
argument_list|,
name|List
operator|.
name|class
argument_list|,
name|Map
operator|.
name|Entry
operator|.
name|class
argument_list|,
name|Object
operator|.
name|class
argument_list|,
name|Equivalence
operator|.
name|class
argument_list|,
name|Predicate
operator|.
name|class
argument_list|,
name|Function
operator|.
name|class
argument_list|,
name|Comparable
operator|.
name|class
argument_list|,
name|Comparator
operator|.
name|class
argument_list|,
name|Ordering
operator|.
name|class
argument_list|,
name|Class
operator|.
name|class
argument_list|,
name|Type
operator|.
name|class
argument_list|,
name|TypeToken
operator|.
name|class
argument_list|,
name|TimeUnit
operator|.
name|class
argument_list|,
name|Ticker
operator|.
name|class
argument_list|,
name|Joiner
operator|.
name|class
argument_list|,
name|Splitter
operator|.
name|class
argument_list|,
name|CharMatcher
operator|.
name|class
argument_list|,
name|InputStream
operator|.
name|class
argument_list|,
name|ByteArrayInputStream
operator|.
name|class
argument_list|,
name|Reader
operator|.
name|class
argument_list|,
name|Readable
operator|.
name|class
argument_list|,
name|StringReader
operator|.
name|class
argument_list|,
name|OutputStream
operator|.
name|class
argument_list|,
name|ByteArrayOutputStream
operator|.
name|class
argument_list|,
name|Writer
operator|.
name|class
argument_list|,
name|StringWriter
operator|.
name|class
argument_list|,
name|File
operator|.
name|class
argument_list|,
name|Buffer
operator|.
name|class
argument_list|,
name|ByteBuffer
operator|.
name|class
argument_list|,
name|CharBuffer
operator|.
name|class
argument_list|,
name|ShortBuffer
operator|.
name|class
argument_list|,
name|IntBuffer
operator|.
name|class
argument_list|,
name|LongBuffer
operator|.
name|class
argument_list|,
name|FloatBuffer
operator|.
name|class
argument_list|,
name|DoubleBuffer
operator|.
name|class
argument_list|,
name|String
index|[]
operator|.
expr|class
argument_list|,
name|Object
index|[]
operator|.
expr|class
argument_list|,
name|int
index|[]
operator|.
expr|class
argument_list|)
expr_stmt|;
block|}
DECL|method|testStringArray ()
specifier|public
name|void
name|testStringArray
parameter_list|()
block|{
name|FreshValueGenerator
name|generator
init|=
operator|new
name|FreshValueGenerator
argument_list|()
decl_stmt|;
name|String
index|[]
name|a1
init|=
name|generator
operator|.
name|generate
argument_list|(
name|String
index|[]
operator|.
expr|class
argument_list|)
decl_stmt|;
name|String
index|[]
name|a2
init|=
name|generator
operator|.
name|generate
argument_list|(
name|String
index|[]
operator|.
expr|class
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|a1
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
name|a2
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testPrimitiveArray ()
specifier|public
name|void
name|testPrimitiveArray
parameter_list|()
block|{
name|FreshValueGenerator
name|generator
init|=
operator|new
name|FreshValueGenerator
argument_list|()
decl_stmt|;
name|int
index|[]
name|a1
init|=
name|generator
operator|.
name|generate
argument_list|(
name|int
index|[]
operator|.
expr|class
argument_list|)
decl_stmt|;
name|int
index|[]
name|a2
init|=
name|generator
operator|.
name|generate
argument_list|(
name|int
index|[]
operator|.
expr|class
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|a1
index|[
literal|0
index|]
operator|!=
name|a2
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
DECL|method|testImmutableList ()
specifier|public
name|void
name|testImmutableList
parameter_list|()
block|{
name|assertFreshInstance
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|ImmutableList
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|)
expr_stmt|;
name|assertValueAndTypeEquals
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
operator|new
name|FreshValueGenerator
argument_list|()
operator|.
name|generate
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|)
argument_list|,
operator|new
name|FreshValueGenerator
argument_list|()
operator|.
name|generate
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|ImmutableList
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|)
argument_list|)
expr_stmt|;
name|assertValueAndTypeEquals
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
operator|new
name|FreshValueGenerator
argument_list|()
operator|.
name|generate
argument_list|(
name|int
operator|.
name|class
argument_list|)
argument_list|)
argument_list|,
operator|new
name|FreshValueGenerator
argument_list|()
operator|.
name|generate
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|ImmutableList
argument_list|<
name|Integer
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|)
argument_list|)
expr_stmt|;
name|assertValueAndTypeEquals
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
operator|new
name|FreshValueGenerator
argument_list|()
operator|.
name|generate
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|)
argument_list|,
operator|new
name|FreshValueGenerator
argument_list|()
operator|.
name|generate
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|ImmutableList
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|()
block|{}
block|)
block|)
class|;
end_class

begin_expr_stmt
name|assertValueAndTypeEquals
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|()
argument_list|,
operator|new
name|FreshValueGenerator
argument_list|()
operator|.
name|generate
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|ImmutableList
argument_list|<
name|EmptyEnum
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|)
argument_list|)
expr_stmt|;
end_expr_stmt

begin_function
unit|}    public
DECL|method|testImmutableSet ()
name|void
name|testImmutableSet
parameter_list|()
block|{
name|assertFreshInstance
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|ImmutableSet
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|)
expr_stmt|;
name|assertValueAndTypeEquals
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
operator|new
name|FreshValueGenerator
argument_list|()
operator|.
name|generate
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|)
argument_list|,
operator|new
name|FreshValueGenerator
argument_list|()
operator|.
name|generate
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|ImmutableSet
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|)
argument_list|)
expr_stmt|;
name|assertValueAndTypeEquals
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
operator|new
name|FreshValueGenerator
argument_list|()
operator|.
name|generate
argument_list|(
name|Number
operator|.
name|class
argument_list|)
argument_list|)
argument_list|,
operator|new
name|FreshValueGenerator
argument_list|()
operator|.
name|generate
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|ImmutableSet
argument_list|<
name|Number
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|)
argument_list|)
expr_stmt|;
name|assertValueAndTypeEquals
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
operator|new
name|FreshValueGenerator
argument_list|()
operator|.
name|generate
argument_list|(
name|Number
operator|.
name|class
argument_list|)
argument_list|)
argument_list|,
operator|new
name|FreshValueGenerator
argument_list|()
operator|.
name|generate
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|ImmutableSet
argument_list|<
name|?
extends|extends
name|Number
argument_list|>
argument_list|>
argument_list|()
block|{}
block|)
end_function

begin_empty_stmt
unit|)
empty_stmt|;
end_empty_stmt

begin_expr_stmt
name|assertValueAndTypeEquals
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|()
argument_list|,
operator|new
name|FreshValueGenerator
argument_list|()
operator|.
name|generate
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|ImmutableSet
argument_list|<
name|EmptyEnum
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|)
argument_list|)
expr_stmt|;
end_expr_stmt

begin_function
unit|}    public
DECL|method|testImmutableSortedSet ()
name|void
name|testImmutableSortedSet
parameter_list|()
block|{
name|assertFreshInstance
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|ImmutableSortedSet
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|)
expr_stmt|;
name|assertValueAndTypeEquals
argument_list|(
name|ImmutableSortedSet
operator|.
name|of
argument_list|(
operator|new
name|FreshValueGenerator
argument_list|()
operator|.
name|generate
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|)
argument_list|,
operator|new
name|FreshValueGenerator
argument_list|()
operator|.
name|generate
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|ImmutableSortedSet
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|)
argument_list|)
expr_stmt|;
name|assertValueAndTypeEquals
argument_list|(
name|ImmutableSortedSet
operator|.
name|of
argument_list|()
argument_list|,
operator|new
name|FreshValueGenerator
argument_list|()
operator|.
name|generate
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|ImmutableSortedSet
argument_list|<
name|EmptyEnum
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|testImmutableMultiset ()
specifier|public
name|void
name|testImmutableMultiset
parameter_list|()
block|{
name|assertFreshInstance
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|ImmutableSortedSet
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|)
expr_stmt|;
name|assertValueAndTypeEquals
argument_list|(
name|ImmutableMultiset
operator|.
name|of
argument_list|(
operator|new
name|FreshValueGenerator
argument_list|()
operator|.
name|generate
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|)
argument_list|,
operator|new
name|FreshValueGenerator
argument_list|()
operator|.
name|generate
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|ImmutableMultiset
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|)
argument_list|)
expr_stmt|;
name|assertValueAndTypeEquals
argument_list|(
name|ImmutableMultiset
operator|.
name|of
argument_list|(
operator|new
name|FreshValueGenerator
argument_list|()
operator|.
name|generate
argument_list|(
name|Number
operator|.
name|class
argument_list|)
argument_list|)
argument_list|,
operator|new
name|FreshValueGenerator
argument_list|()
operator|.
name|generate
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|ImmutableMultiset
argument_list|<
name|Number
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|)
argument_list|)
expr_stmt|;
name|assertValueAndTypeEquals
argument_list|(
name|ImmutableMultiset
operator|.
name|of
argument_list|()
argument_list|,
operator|new
name|FreshValueGenerator
argument_list|()
operator|.
name|generate
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|ImmutableMultiset
argument_list|<
name|EmptyEnum
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|testImmutableCollection ()
specifier|public
name|void
name|testImmutableCollection
parameter_list|()
block|{
name|assertFreshInstance
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|ImmutableCollection
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|)
expr_stmt|;
name|assertValueAndTypeEquals
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
operator|new
name|FreshValueGenerator
argument_list|()
operator|.
name|generate
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|)
argument_list|,
operator|new
name|FreshValueGenerator
argument_list|()
operator|.
name|generate
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|ImmutableCollection
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|)
argument_list|)
expr_stmt|;
name|assertValueAndTypeEquals
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|()
argument_list|,
operator|new
name|FreshValueGenerator
argument_list|()
operator|.
name|generate
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|ImmutableCollection
argument_list|<
name|EmptyEnum
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|testImmutableMap ()
specifier|public
name|void
name|testImmutableMap
parameter_list|()
block|{
name|assertFreshInstance
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|)
expr_stmt|;
name|FreshValueGenerator
name|generator
init|=
operator|new
name|FreshValueGenerator
argument_list|()
decl_stmt|;
name|assertValueAndTypeEquals
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
name|generator
operator|.
name|generate
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|,
name|generator
operator|.
name|generate
argument_list|(
name|int
operator|.
name|class
argument_list|)
argument_list|)
argument_list|,
operator|new
name|FreshValueGenerator
argument_list|()
operator|.
name|generate
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|)
argument_list|)
expr_stmt|;
name|assertValueAndTypeEquals
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|()
argument_list|,
operator|new
name|FreshValueGenerator
argument_list|()
operator|.
name|generate
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|ImmutableMap
argument_list|<
name|EmptyEnum
argument_list|,
name|String
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|testImmutableSortedMap ()
specifier|public
name|void
name|testImmutableSortedMap
parameter_list|()
block|{
name|assertFreshInstance
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|ImmutableSortedMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|)
expr_stmt|;
name|FreshValueGenerator
name|generator
init|=
operator|new
name|FreshValueGenerator
argument_list|()
decl_stmt|;
name|assertValueAndTypeEquals
argument_list|(
name|ImmutableSortedMap
operator|.
name|of
argument_list|(
name|generator
operator|.
name|generate
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|,
name|generator
operator|.
name|generate
argument_list|(
name|int
operator|.
name|class
argument_list|)
argument_list|)
argument_list|,
operator|new
name|FreshValueGenerator
argument_list|()
operator|.
name|generate
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|ImmutableSortedMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|)
argument_list|)
expr_stmt|;
name|assertValueAndTypeEquals
argument_list|(
name|ImmutableSortedMap
operator|.
name|of
argument_list|()
argument_list|,
operator|new
name|FreshValueGenerator
argument_list|()
operator|.
name|generate
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|ImmutableSortedMap
argument_list|<
name|EmptyEnum
argument_list|,
name|String
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|testImmutableMultimap ()
specifier|public
name|void
name|testImmutableMultimap
parameter_list|()
block|{
name|assertFreshInstance
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|ImmutableMultimap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|)
expr_stmt|;
name|FreshValueGenerator
name|generator
init|=
operator|new
name|FreshValueGenerator
argument_list|()
decl_stmt|;
name|assertValueAndTypeEquals
argument_list|(
name|ImmutableMultimap
operator|.
name|of
argument_list|(
name|generator
operator|.
name|generate
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|,
name|generator
operator|.
name|generate
argument_list|(
name|int
operator|.
name|class
argument_list|)
argument_list|)
argument_list|,
operator|new
name|FreshValueGenerator
argument_list|()
operator|.
name|generate
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|ImmutableMultimap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|)
argument_list|)
expr_stmt|;
name|assertValueAndTypeEquals
argument_list|(
name|ImmutableMultimap
operator|.
name|of
argument_list|()
argument_list|,
operator|new
name|FreshValueGenerator
argument_list|()
operator|.
name|generate
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|ImmutableMultimap
argument_list|<
name|EmptyEnum
argument_list|,
name|String
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|testImmutableListMultimap ()
specifier|public
name|void
name|testImmutableListMultimap
parameter_list|()
block|{
name|assertFreshInstance
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|ImmutableListMultimap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|)
expr_stmt|;
name|FreshValueGenerator
name|generator
init|=
operator|new
name|FreshValueGenerator
argument_list|()
decl_stmt|;
name|assertValueAndTypeEquals
argument_list|(
name|ImmutableListMultimap
operator|.
name|of
argument_list|(
name|generator
operator|.
name|generate
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|,
name|generator
operator|.
name|generate
argument_list|(
name|int
operator|.
name|class
argument_list|)
argument_list|)
argument_list|,
operator|new
name|FreshValueGenerator
argument_list|()
operator|.
name|generate
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|ImmutableListMultimap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|)
argument_list|)
expr_stmt|;
name|assertValueAndTypeEquals
argument_list|(
name|ImmutableListMultimap
operator|.
name|of
argument_list|()
argument_list|,
operator|new
name|FreshValueGenerator
argument_list|()
operator|.
name|generate
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|ImmutableListMultimap
argument_list|<
name|EmptyEnum
argument_list|,
name|String
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|testImmutableSetMultimap ()
specifier|public
name|void
name|testImmutableSetMultimap
parameter_list|()
block|{
name|assertFreshInstance
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|ImmutableSetMultimap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|)
expr_stmt|;
name|FreshValueGenerator
name|generator
init|=
operator|new
name|FreshValueGenerator
argument_list|()
decl_stmt|;
name|assertValueAndTypeEquals
argument_list|(
name|ImmutableSetMultimap
operator|.
name|of
argument_list|(
name|generator
operator|.
name|generate
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|,
name|generator
operator|.
name|generate
argument_list|(
name|int
operator|.
name|class
argument_list|)
argument_list|)
argument_list|,
operator|new
name|FreshValueGenerator
argument_list|()
operator|.
name|generate
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|ImmutableSetMultimap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|)
argument_list|)
expr_stmt|;
name|assertValueAndTypeEquals
argument_list|(
name|ImmutableSetMultimap
operator|.
name|of
argument_list|()
argument_list|,
operator|new
name|FreshValueGenerator
argument_list|()
operator|.
name|generate
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|ImmutableSetMultimap
argument_list|<
name|EmptyEnum
argument_list|,
name|String
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|testImmutableBiMap ()
specifier|public
name|void
name|testImmutableBiMap
parameter_list|()
block|{
name|assertFreshInstance
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|ImmutableBiMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|)
expr_stmt|;
name|FreshValueGenerator
name|generator
init|=
operator|new
name|FreshValueGenerator
argument_list|()
decl_stmt|;
name|assertValueAndTypeEquals
argument_list|(
name|ImmutableBiMap
operator|.
name|of
argument_list|(
name|generator
operator|.
name|generate
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|,
name|generator
operator|.
name|generate
argument_list|(
name|int
operator|.
name|class
argument_list|)
argument_list|)
argument_list|,
operator|new
name|FreshValueGenerator
argument_list|()
operator|.
name|generate
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|ImmutableBiMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|)
argument_list|)
expr_stmt|;
name|assertValueAndTypeEquals
argument_list|(
name|ImmutableBiMap
operator|.
name|of
argument_list|()
argument_list|,
operator|new
name|FreshValueGenerator
argument_list|()
operator|.
name|generate
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|ImmutableBiMap
argument_list|<
name|EmptyEnum
argument_list|,
name|String
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|testImmutableTable ()
specifier|public
name|void
name|testImmutableTable
parameter_list|()
block|{
name|assertFreshInstance
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|ImmutableTable
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|,
name|ImmutableList
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|)
expr_stmt|;
name|FreshValueGenerator
name|generator
init|=
operator|new
name|FreshValueGenerator
argument_list|()
decl_stmt|;
name|assertValueAndTypeEquals
argument_list|(
name|ImmutableTable
operator|.
name|of
argument_list|(
name|generator
operator|.
name|generate
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|,
name|generator
operator|.
name|generate
argument_list|(
name|int
operator|.
name|class
argument_list|)
argument_list|,
name|generator
operator|.
name|generate
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|ImmutableList
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|)
argument_list|)
argument_list|,
operator|new
name|FreshValueGenerator
argument_list|()
operator|.
name|generate
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|ImmutableTable
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|,
name|ImmutableList
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|)
argument_list|)
expr_stmt|;
name|assertValueAndTypeEquals
argument_list|(
name|ImmutableTable
operator|.
name|of
argument_list|()
argument_list|,
operator|new
name|FreshValueGenerator
argument_list|()
operator|.
name|generate
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|ImmutableTable
argument_list|<
name|EmptyEnum
argument_list|,
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|testList ()
specifier|public
name|void
name|testList
parameter_list|()
block|{
name|assertFreshInstance
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|)
expr_stmt|;
name|assertValueAndTypeEquals
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
operator|new
name|FreshValueGenerator
argument_list|()
operator|.
name|generate
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|)
argument_list|,
operator|new
name|FreshValueGenerator
argument_list|()
operator|.
name|generate
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|)
argument_list|)
expr_stmt|;
name|assertValueAndTypeEquals
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
operator|new
name|FreshValueGenerator
argument_list|()
operator|.
name|generate
argument_list|(
name|int
operator|.
name|class
argument_list|)
argument_list|)
argument_list|,
operator|new
name|FreshValueGenerator
argument_list|()
operator|.
name|generate
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|List
argument_list|<
name|Integer
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|)
argument_list|)
expr_stmt|;
name|assertValueAndTypeEquals
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
operator|new
name|FreshValueGenerator
argument_list|()
operator|.
name|generate
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|)
argument_list|,
operator|new
name|FreshValueGenerator
argument_list|()
operator|.
name|generate
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|List
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|()
block|{}
block|)
end_function

begin_empty_stmt
unit|)
empty_stmt|;
end_empty_stmt

begin_expr_stmt
name|assertFreshInstance
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|List
argument_list|<
name|EmptyEnum
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|)
expr_stmt|;
end_expr_stmt

begin_function
unit|}    public
DECL|method|testArrayList ()
name|void
name|testArrayList
parameter_list|()
block|{
name|assertFreshInstance
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|)
expr_stmt|;
name|assertValueAndTypeEquals
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
operator|new
name|FreshValueGenerator
argument_list|()
operator|.
name|generate
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|)
argument_list|,
operator|new
name|FreshValueGenerator
argument_list|()
operator|.
name|generate
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|)
argument_list|)
expr_stmt|;
name|assertValueAndTypeEquals
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
operator|new
name|FreshValueGenerator
argument_list|()
operator|.
name|generate
argument_list|(
name|int
operator|.
name|class
argument_list|)
argument_list|)
argument_list|,
operator|new
name|FreshValueGenerator
argument_list|()
operator|.
name|generate
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|ArrayList
argument_list|<
name|Integer
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|)
argument_list|)
expr_stmt|;
name|assertValueAndTypeEquals
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
operator|new
name|FreshValueGenerator
argument_list|()
operator|.
name|generate
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|)
argument_list|,
operator|new
name|FreshValueGenerator
argument_list|()
operator|.
name|generate
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|ArrayList
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|()
block|{}
block|)
end_function

begin_empty_stmt
unit|)
empty_stmt|;
end_empty_stmt

begin_expr_stmt
name|assertNotNull
argument_list|(
operator|new
name|FreshValueGenerator
argument_list|()
operator|.
name|generate
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|ArrayList
argument_list|<
name|EmptyEnum
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|)
argument_list|)
expr_stmt|;
end_expr_stmt

begin_function
unit|}    public
DECL|method|testLinkedList ()
name|void
name|testLinkedList
parameter_list|()
block|{
name|assertFreshInstance
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|LinkedList
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|)
expr_stmt|;
name|assertValueAndTypeEquals
argument_list|(
name|newLinkedList
argument_list|(
operator|new
name|FreshValueGenerator
argument_list|()
operator|.
name|generate
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|)
argument_list|,
operator|new
name|FreshValueGenerator
argument_list|()
operator|.
name|generate
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|LinkedList
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
operator|new
name|FreshValueGenerator
argument_list|()
operator|.
name|generate
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|LinkedList
argument_list|<
name|EmptyEnum
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|testSet ()
specifier|public
name|void
name|testSet
parameter_list|()
block|{
name|assertFreshInstance
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|)
expr_stmt|;
name|assertValueAndTypeEquals
argument_list|(
name|newLinkedHashSet
argument_list|(
operator|new
name|FreshValueGenerator
argument_list|()
operator|.
name|generate
argument_list|(
name|Number
operator|.
name|class
argument_list|)
argument_list|)
argument_list|,
operator|new
name|FreshValueGenerator
argument_list|()
operator|.
name|generate
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|Set
argument_list|<
name|?
extends|extends
name|Number
argument_list|>
argument_list|>
argument_list|()
block|{}
block|)
end_function

begin_empty_stmt
unit|)
empty_stmt|;
end_empty_stmt

begin_expr_stmt
name|assertFreshInstance
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|Set
argument_list|<
name|EmptyEnum
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|)
expr_stmt|;
end_expr_stmt

begin_function
unit|}    public
DECL|method|testHashSet ()
name|void
name|testHashSet
parameter_list|()
block|{
name|assertFreshInstance
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|)
expr_stmt|;
name|assertValueAndTypeEquals
argument_list|(
name|newLinkedHashSet
argument_list|(
operator|new
name|FreshValueGenerator
argument_list|()
operator|.
name|generate
argument_list|(
name|Number
operator|.
name|class
argument_list|)
argument_list|)
argument_list|,
operator|new
name|FreshValueGenerator
argument_list|()
operator|.
name|generate
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|HashSet
argument_list|<
name|?
extends|extends
name|Number
argument_list|>
argument_list|>
argument_list|()
block|{}
block|)
end_function

begin_empty_stmt
unit|)
empty_stmt|;
end_empty_stmt

begin_function
unit|}    public
DECL|method|testLinkedHashSet ()
name|void
name|testLinkedHashSet
parameter_list|()
block|{
name|assertFreshInstance
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|LinkedHashSet
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|)
expr_stmt|;
name|assertValueAndTypeEquals
argument_list|(
name|newLinkedHashSet
argument_list|(
operator|new
name|FreshValueGenerator
argument_list|()
operator|.
name|generate
argument_list|(
name|Number
operator|.
name|class
argument_list|)
argument_list|)
argument_list|,
operator|new
name|FreshValueGenerator
argument_list|()
operator|.
name|generate
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|LinkedHashSet
argument_list|<
name|?
extends|extends
name|Number
argument_list|>
argument_list|>
argument_list|()
block|{}
block|)
end_function

begin_empty_stmt
unit|)
empty_stmt|;
end_empty_stmt

begin_expr_stmt
name|assertNotNull
argument_list|(
operator|new
name|FreshValueGenerator
argument_list|()
operator|.
name|generate
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|LinkedHashSet
argument_list|<
name|EmptyEnum
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|)
argument_list|)
expr_stmt|;
end_expr_stmt

begin_function
unit|}    public
DECL|method|testTreeSet ()
name|void
name|testTreeSet
parameter_list|()
block|{
name|assertFreshInstance
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|TreeSet
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|)
expr_stmt|;
name|TreeSet
argument_list|<
name|String
argument_list|>
name|expected
init|=
name|Sets
operator|.
name|newTreeSet
argument_list|()
decl_stmt|;
name|expected
operator|.
name|add
argument_list|(
operator|new
name|FreshValueGenerator
argument_list|()
operator|.
name|generate
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertValueAndTypeEquals
argument_list|(
name|expected
argument_list|,
operator|new
name|FreshValueGenerator
argument_list|()
operator|.
name|generate
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|TreeSet
argument_list|<
name|?
extends|extends
name|CharSequence
argument_list|>
argument_list|>
argument_list|()
block|{}
block|)
end_function

begin_empty_stmt
unit|)
empty_stmt|;
end_empty_stmt

begin_expr_stmt
name|assertNotNull
argument_list|(
operator|new
name|FreshValueGenerator
argument_list|()
operator|.
name|generate
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|TreeSet
argument_list|<
name|EmptyEnum
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|)
argument_list|)
expr_stmt|;
end_expr_stmt

begin_function
unit|}    public
DECL|method|testSortedSet ()
name|void
name|testSortedSet
parameter_list|()
block|{
name|assertFreshInstance
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|SortedSet
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|)
expr_stmt|;
name|TreeSet
argument_list|<
name|String
argument_list|>
name|expected
init|=
name|Sets
operator|.
name|newTreeSet
argument_list|()
decl_stmt|;
name|expected
operator|.
name|add
argument_list|(
operator|new
name|FreshValueGenerator
argument_list|()
operator|.
name|generate
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertValueAndTypeEquals
argument_list|(
name|expected
argument_list|,
operator|new
name|FreshValueGenerator
argument_list|()
operator|.
name|generate
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|SortedSet
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|)
argument_list|)
expr_stmt|;
name|assertFreshInstance
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|SortedSet
argument_list|<
name|EmptyEnum
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|testNavigableSet ()
specifier|public
name|void
name|testNavigableSet
parameter_list|()
block|{
name|assertFreshInstance
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|NavigableSet
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|)
expr_stmt|;
name|TreeSet
argument_list|<
name|String
argument_list|>
name|expected
init|=
name|Sets
operator|.
name|newTreeSet
argument_list|()
decl_stmt|;
name|expected
operator|.
name|add
argument_list|(
operator|new
name|FreshValueGenerator
argument_list|()
operator|.
name|generate
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertValueAndTypeEquals
argument_list|(
name|expected
argument_list|,
operator|new
name|FreshValueGenerator
argument_list|()
operator|.
name|generate
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|NavigableSet
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|)
argument_list|)
expr_stmt|;
name|assertFreshInstance
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|NavigableSet
argument_list|<
name|EmptyEnum
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|testMultiset ()
specifier|public
name|void
name|testMultiset
parameter_list|()
block|{
name|assertFreshInstance
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|Multiset
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|)
expr_stmt|;
name|Multiset
argument_list|<
name|String
argument_list|>
name|expected
init|=
name|HashMultiset
operator|.
name|create
argument_list|()
decl_stmt|;
name|expected
operator|.
name|add
argument_list|(
operator|new
name|FreshValueGenerator
argument_list|()
operator|.
name|generate
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertValueAndTypeEquals
argument_list|(
name|expected
argument_list|,
operator|new
name|FreshValueGenerator
argument_list|()
operator|.
name|generate
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|Multiset
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|)
argument_list|)
expr_stmt|;
name|assertFreshInstance
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|Multiset
argument_list|<
name|EmptyEnum
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|testSortedMultiset ()
specifier|public
name|void
name|testSortedMultiset
parameter_list|()
block|{
name|assertFreshInstance
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|SortedMultiset
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|)
expr_stmt|;
name|SortedMultiset
argument_list|<
name|String
argument_list|>
name|expected
init|=
name|TreeMultiset
operator|.
name|create
argument_list|()
decl_stmt|;
name|expected
operator|.
name|add
argument_list|(
operator|new
name|FreshValueGenerator
argument_list|()
operator|.
name|generate
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertValueAndTypeEquals
argument_list|(
name|expected
argument_list|,
operator|new
name|FreshValueGenerator
argument_list|()
operator|.
name|generate
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|SortedMultiset
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|)
argument_list|)
expr_stmt|;
name|assertFreshInstance
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|Multiset
argument_list|<
name|EmptyEnum
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|testHashMultiset ()
specifier|public
name|void
name|testHashMultiset
parameter_list|()
block|{
name|assertFreshInstance
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|HashMultiset
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|)
expr_stmt|;
name|HashMultiset
argument_list|<
name|String
argument_list|>
name|expected
init|=
name|HashMultiset
operator|.
name|create
argument_list|()
decl_stmt|;
name|expected
operator|.
name|add
argument_list|(
operator|new
name|FreshValueGenerator
argument_list|()
operator|.
name|generate
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertValueAndTypeEquals
argument_list|(
name|expected
argument_list|,
operator|new
name|FreshValueGenerator
argument_list|()
operator|.
name|generate
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|HashMultiset
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|testLinkedHashMultiset ()
specifier|public
name|void
name|testLinkedHashMultiset
parameter_list|()
block|{
name|assertFreshInstance
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|LinkedHashMultiset
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|)
expr_stmt|;
name|LinkedHashMultiset
argument_list|<
name|String
argument_list|>
name|expected
init|=
name|LinkedHashMultiset
operator|.
name|create
argument_list|()
decl_stmt|;
name|expected
operator|.
name|add
argument_list|(
operator|new
name|FreshValueGenerator
argument_list|()
operator|.
name|generate
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertValueAndTypeEquals
argument_list|(
name|expected
argument_list|,
operator|new
name|FreshValueGenerator
argument_list|()
operator|.
name|generate
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|LinkedHashMultiset
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|testTreeMultiset ()
specifier|public
name|void
name|testTreeMultiset
parameter_list|()
block|{
name|assertFreshInstance
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|TreeMultiset
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|)
expr_stmt|;
name|TreeMultiset
argument_list|<
name|String
argument_list|>
name|expected
init|=
name|TreeMultiset
operator|.
name|create
argument_list|()
decl_stmt|;
name|expected
operator|.
name|add
argument_list|(
operator|new
name|FreshValueGenerator
argument_list|()
operator|.
name|generate
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertValueAndTypeEquals
argument_list|(
name|expected
argument_list|,
operator|new
name|FreshValueGenerator
argument_list|()
operator|.
name|generate
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|TreeMultiset
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|testImmutableSortedMultiset ()
specifier|public
name|void
name|testImmutableSortedMultiset
parameter_list|()
block|{
name|assertFreshInstance
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|ImmutableSortedMultiset
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|)
expr_stmt|;
name|assertValueAndTypeEquals
argument_list|(
name|ImmutableSortedMultiset
operator|.
name|of
argument_list|(
operator|new
name|FreshValueGenerator
argument_list|()
operator|.
name|generate
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|)
argument_list|,
operator|new
name|FreshValueGenerator
argument_list|()
operator|.
name|generate
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|ImmutableSortedMultiset
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|)
argument_list|)
expr_stmt|;
name|assertFreshInstance
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|Multiset
argument_list|<
name|EmptyEnum
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|testCollection ()
specifier|public
name|void
name|testCollection
parameter_list|()
block|{
name|assertFreshInstance
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|Collection
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|)
expr_stmt|;
name|assertValueAndTypeEquals
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
operator|new
name|FreshValueGenerator
argument_list|()
operator|.
name|generate
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|)
argument_list|,
operator|new
name|FreshValueGenerator
argument_list|()
operator|.
name|generate
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|Collection
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|)
argument_list|)
expr_stmt|;
name|assertFreshInstance
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|Collection
argument_list|<
name|EmptyEnum
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|testIterable ()
specifier|public
name|void
name|testIterable
parameter_list|()
block|{
name|assertFreshInstance
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|Iterable
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|)
expr_stmt|;
name|assertValueAndTypeEquals
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
operator|new
name|FreshValueGenerator
argument_list|()
operator|.
name|generate
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|)
argument_list|,
operator|new
name|FreshValueGenerator
argument_list|()
operator|.
name|generate
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|Iterable
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|)
argument_list|)
expr_stmt|;
name|assertFreshInstance
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|Iterable
argument_list|<
name|EmptyEnum
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|testMap ()
specifier|public
name|void
name|testMap
parameter_list|()
block|{
name|assertFreshInstance
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|?
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|)
expr_stmt|;
name|FreshValueGenerator
name|generator
init|=
operator|new
name|FreshValueGenerator
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|expected
init|=
name|Maps
operator|.
name|newLinkedHashMap
argument_list|()
decl_stmt|;
name|expected
operator|.
name|put
argument_list|(
name|generator
operator|.
name|generate
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|,
name|generator
operator|.
name|generate
argument_list|(
name|int
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertValueAndTypeEquals
argument_list|(
name|expected
argument_list|,
operator|new
name|FreshValueGenerator
argument_list|()
operator|.
name|generate
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|)
argument_list|)
expr_stmt|;
name|assertFreshInstance
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|Map
argument_list|<
name|EmptyEnum
argument_list|,
name|String
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|testHashMap ()
specifier|public
name|void
name|testHashMap
parameter_list|()
block|{
name|assertFreshInstance
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|HashMap
argument_list|<
name|String
argument_list|,
name|?
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|)
expr_stmt|;
name|FreshValueGenerator
name|generator
init|=
operator|new
name|FreshValueGenerator
argument_list|()
decl_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|expected
init|=
name|Maps
operator|.
name|newLinkedHashMap
argument_list|()
decl_stmt|;
name|expected
operator|.
name|put
argument_list|(
name|generator
operator|.
name|generate
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|,
name|generator
operator|.
name|generate
argument_list|(
name|int
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertValueAndTypeEquals
argument_list|(
name|expected
argument_list|,
operator|new
name|FreshValueGenerator
argument_list|()
operator|.
name|generate
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|HashMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
operator|new
name|FreshValueGenerator
argument_list|()
operator|.
name|generate
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|HashMap
argument_list|<
name|EmptyEnum
argument_list|,
name|Integer
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|testLinkedHashMap ()
specifier|public
name|void
name|testLinkedHashMap
parameter_list|()
block|{
name|assertFreshInstance
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|?
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|)
expr_stmt|;
name|FreshValueGenerator
name|generator
init|=
operator|new
name|FreshValueGenerator
argument_list|()
decl_stmt|;
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|expected
init|=
name|Maps
operator|.
name|newLinkedHashMap
argument_list|()
decl_stmt|;
name|expected
operator|.
name|put
argument_list|(
name|generator
operator|.
name|generate
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|,
name|generator
operator|.
name|generate
argument_list|(
name|int
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertValueAndTypeEquals
argument_list|(
name|expected
argument_list|,
operator|new
name|FreshValueGenerator
argument_list|()
operator|.
name|generate
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
operator|new
name|FreshValueGenerator
argument_list|()
operator|.
name|generate
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|LinkedHashMap
argument_list|<
name|EmptyEnum
argument_list|,
name|String
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|testTreeMap ()
specifier|public
name|void
name|testTreeMap
parameter_list|()
block|{
name|assertFreshInstance
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|TreeMap
argument_list|<
name|String
argument_list|,
name|?
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|)
expr_stmt|;
name|FreshValueGenerator
name|generator
init|=
operator|new
name|FreshValueGenerator
argument_list|()
decl_stmt|;
name|TreeMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|expected
init|=
name|Maps
operator|.
name|newTreeMap
argument_list|()
decl_stmt|;
name|expected
operator|.
name|put
argument_list|(
name|generator
operator|.
name|generate
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|,
name|generator
operator|.
name|generate
argument_list|(
name|int
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertValueAndTypeEquals
argument_list|(
name|expected
argument_list|,
operator|new
name|FreshValueGenerator
argument_list|()
operator|.
name|generate
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|TreeMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
operator|new
name|FreshValueGenerator
argument_list|()
operator|.
name|generate
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|LinkedHashSet
argument_list|<
name|EmptyEnum
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|testSortedMap ()
specifier|public
name|void
name|testSortedMap
parameter_list|()
block|{
name|assertFreshInstance
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|SortedMap
argument_list|<
name|?
argument_list|,
name|String
argument_list|>
argument_list|>
argument_list|()
block|{}
block|)
function|;
end_function

begin_decl_stmt
name|FreshValueGenerator
name|generator
init|=
operator|new
name|FreshValueGenerator
argument_list|()
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|TreeMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|expected
init|=
name|Maps
operator|.
name|newTreeMap
argument_list|()
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|expected
operator|.
name|put
argument_list|(
name|generator
operator|.
name|generate
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|,
name|generator
operator|.
name|generate
argument_list|(
name|int
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|assertValueAndTypeEquals
argument_list|(
name|expected
argument_list|,
operator|new
name|FreshValueGenerator
argument_list|()
operator|.
name|generate
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|SortedMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|)
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|assertFreshInstance
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|SortedMap
argument_list|<
name|EmptyEnum
argument_list|,
name|String
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|)
expr_stmt|;
end_expr_stmt

begin_function
unit|}    public
DECL|method|testNavigableMap ()
name|void
name|testNavigableMap
parameter_list|()
block|{
name|assertFreshInstance
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|NavigableMap
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
argument_list|>
argument_list|()
block|{}
block|)
function|;
end_function

begin_decl_stmt
name|FreshValueGenerator
name|generator
init|=
operator|new
name|FreshValueGenerator
argument_list|()
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|TreeMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|expected
init|=
name|Maps
operator|.
name|newTreeMap
argument_list|()
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|expected
operator|.
name|put
argument_list|(
name|generator
operator|.
name|generate
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|,
name|generator
operator|.
name|generate
argument_list|(
name|int
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|assertValueAndTypeEquals
argument_list|(
name|expected
argument_list|,
operator|new
name|FreshValueGenerator
argument_list|()
operator|.
name|generate
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|NavigableMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|)
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|assertFreshInstance
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|NavigableMap
argument_list|<
name|EmptyEnum
argument_list|,
name|String
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|)
expr_stmt|;
end_expr_stmt

begin_function
unit|}    public
DECL|method|testConcurrentMap ()
name|void
name|testConcurrentMap
parameter_list|()
block|{
name|assertFreshInstance
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|ConcurrentMap
argument_list|<
name|String
argument_list|,
name|?
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|)
expr_stmt|;
name|FreshValueGenerator
name|generator
init|=
operator|new
name|FreshValueGenerator
argument_list|()
decl_stmt|;
name|ConcurrentMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|expected
init|=
name|Maps
operator|.
name|newConcurrentMap
argument_list|()
decl_stmt|;
name|expected
operator|.
name|put
argument_list|(
name|generator
operator|.
name|generate
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|,
name|generator
operator|.
name|generate
argument_list|(
name|int
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertValueAndTypeEquals
argument_list|(
name|expected
argument_list|,
operator|new
name|FreshValueGenerator
argument_list|()
operator|.
name|generate
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|ConcurrentMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|)
argument_list|)
expr_stmt|;
name|assertFreshInstance
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|ConcurrentMap
argument_list|<
name|EmptyEnum
argument_list|,
name|String
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|testMultimap ()
specifier|public
name|void
name|testMultimap
parameter_list|()
block|{
name|assertFreshInstance
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|Multimap
argument_list|<
name|String
argument_list|,
name|?
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|)
expr_stmt|;
name|FreshValueGenerator
name|generator
init|=
operator|new
name|FreshValueGenerator
argument_list|()
decl_stmt|;
name|Multimap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|expected
init|=
name|ArrayListMultimap
operator|.
name|create
argument_list|()
decl_stmt|;
name|expected
operator|.
name|put
argument_list|(
name|generator
operator|.
name|generate
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|,
name|generator
operator|.
name|generate
argument_list|(
name|int
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertValueAndTypeEquals
argument_list|(
name|expected
argument_list|,
operator|new
name|FreshValueGenerator
argument_list|()
operator|.
name|generate
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|Multimap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|)
argument_list|)
expr_stmt|;
name|assertFreshInstance
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|Multimap
argument_list|<
name|EmptyEnum
argument_list|,
name|String
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|testHashMultimap ()
specifier|public
name|void
name|testHashMultimap
parameter_list|()
block|{
name|assertFreshInstance
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|HashMultimap
argument_list|<
name|String
argument_list|,
name|?
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|)
expr_stmt|;
name|FreshValueGenerator
name|generator
init|=
operator|new
name|FreshValueGenerator
argument_list|()
decl_stmt|;
name|HashMultimap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|expected
init|=
name|HashMultimap
operator|.
name|create
argument_list|()
decl_stmt|;
name|expected
operator|.
name|put
argument_list|(
name|generator
operator|.
name|generate
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|,
name|generator
operator|.
name|generate
argument_list|(
name|int
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertValueAndTypeEquals
argument_list|(
name|expected
argument_list|,
operator|new
name|FreshValueGenerator
argument_list|()
operator|.
name|generate
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|HashMultimap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|testLinkedHashMultimap ()
specifier|public
name|void
name|testLinkedHashMultimap
parameter_list|()
block|{
name|assertFreshInstance
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|LinkedHashMultimap
argument_list|<
name|String
argument_list|,
name|?
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|)
expr_stmt|;
name|FreshValueGenerator
name|generator
init|=
operator|new
name|FreshValueGenerator
argument_list|()
decl_stmt|;
name|LinkedHashMultimap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|expected
init|=
name|LinkedHashMultimap
operator|.
name|create
argument_list|()
decl_stmt|;
name|expected
operator|.
name|put
argument_list|(
name|generator
operator|.
name|generate
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|,
name|generator
operator|.
name|generate
argument_list|(
name|int
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertValueAndTypeEquals
argument_list|(
name|expected
argument_list|,
operator|new
name|FreshValueGenerator
argument_list|()
operator|.
name|generate
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|LinkedHashMultimap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|testListMultimap ()
specifier|public
name|void
name|testListMultimap
parameter_list|()
block|{
name|assertFreshInstance
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|ListMultimap
argument_list|<
name|String
argument_list|,
name|?
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|)
expr_stmt|;
name|FreshValueGenerator
name|generator
init|=
operator|new
name|FreshValueGenerator
argument_list|()
decl_stmt|;
name|ListMultimap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|expected
init|=
name|ArrayListMultimap
operator|.
name|create
argument_list|()
decl_stmt|;
name|expected
operator|.
name|put
argument_list|(
name|generator
operator|.
name|generate
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|,
name|generator
operator|.
name|generate
argument_list|(
name|int
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertValueAndTypeEquals
argument_list|(
name|expected
argument_list|,
operator|new
name|FreshValueGenerator
argument_list|()
operator|.
name|generate
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|ListMultimap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|)
argument_list|)
expr_stmt|;
name|assertFreshInstance
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|ListMultimap
argument_list|<
name|EmptyEnum
argument_list|,
name|String
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|testArrayListMultimap ()
specifier|public
name|void
name|testArrayListMultimap
parameter_list|()
block|{
name|assertFreshInstance
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|ArrayListMultimap
argument_list|<
name|String
argument_list|,
name|?
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|)
expr_stmt|;
name|FreshValueGenerator
name|generator
init|=
operator|new
name|FreshValueGenerator
argument_list|()
decl_stmt|;
name|ArrayListMultimap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|expected
init|=
name|ArrayListMultimap
operator|.
name|create
argument_list|()
decl_stmt|;
name|expected
operator|.
name|put
argument_list|(
name|generator
operator|.
name|generate
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|,
name|generator
operator|.
name|generate
argument_list|(
name|int
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertValueAndTypeEquals
argument_list|(
name|expected
argument_list|,
operator|new
name|FreshValueGenerator
argument_list|()
operator|.
name|generate
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|ArrayListMultimap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|testSetMultimap ()
specifier|public
name|void
name|testSetMultimap
parameter_list|()
block|{
name|assertFreshInstance
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|SetMultimap
argument_list|<
name|String
argument_list|,
name|?
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|)
expr_stmt|;
name|FreshValueGenerator
name|generator
init|=
operator|new
name|FreshValueGenerator
argument_list|()
decl_stmt|;
name|SetMultimap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|expected
init|=
name|LinkedHashMultimap
operator|.
name|create
argument_list|()
decl_stmt|;
name|expected
operator|.
name|put
argument_list|(
name|generator
operator|.
name|generate
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|,
name|generator
operator|.
name|generate
argument_list|(
name|int
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertValueAndTypeEquals
argument_list|(
name|expected
argument_list|,
operator|new
name|FreshValueGenerator
argument_list|()
operator|.
name|generate
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|SetMultimap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|)
argument_list|)
expr_stmt|;
name|assertFreshInstance
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|SetMultimap
argument_list|<
name|EmptyEnum
argument_list|,
name|String
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|testBiMap ()
specifier|public
name|void
name|testBiMap
parameter_list|()
block|{
name|assertFreshInstance
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|BiMap
argument_list|<
name|String
argument_list|,
name|?
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|)
expr_stmt|;
name|FreshValueGenerator
name|generator
init|=
operator|new
name|FreshValueGenerator
argument_list|()
decl_stmt|;
name|BiMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|expected
init|=
name|HashBiMap
operator|.
name|create
argument_list|()
decl_stmt|;
name|expected
operator|.
name|put
argument_list|(
name|generator
operator|.
name|generate
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|,
name|generator
operator|.
name|generate
argument_list|(
name|int
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertValueAndTypeEquals
argument_list|(
name|expected
argument_list|,
operator|new
name|FreshValueGenerator
argument_list|()
operator|.
name|generate
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|BiMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|)
argument_list|)
expr_stmt|;
name|assertFreshInstance
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|BiMap
argument_list|<
name|EmptyEnum
argument_list|,
name|String
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|testHashBiMap ()
specifier|public
name|void
name|testHashBiMap
parameter_list|()
block|{
name|assertFreshInstance
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|HashBiMap
argument_list|<
name|String
argument_list|,
name|?
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|)
expr_stmt|;
name|FreshValueGenerator
name|generator
init|=
operator|new
name|FreshValueGenerator
argument_list|()
decl_stmt|;
name|HashBiMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|expected
init|=
name|HashBiMap
operator|.
name|create
argument_list|()
decl_stmt|;
name|expected
operator|.
name|put
argument_list|(
name|generator
operator|.
name|generate
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|,
name|generator
operator|.
name|generate
argument_list|(
name|int
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertValueAndTypeEquals
argument_list|(
name|expected
argument_list|,
operator|new
name|FreshValueGenerator
argument_list|()
operator|.
name|generate
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|HashBiMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|testTable ()
specifier|public
name|void
name|testTable
parameter_list|()
block|{
name|assertFreshInstance
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|Table
argument_list|<
name|String
argument_list|,
name|?
argument_list|,
name|?
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|)
expr_stmt|;
name|FreshValueGenerator
name|generator
init|=
operator|new
name|FreshValueGenerator
argument_list|()
decl_stmt|;
name|Table
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|expected
init|=
name|HashBasedTable
operator|.
name|create
argument_list|()
decl_stmt|;
name|expected
operator|.
name|put
argument_list|(
name|generator
operator|.
name|generate
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|,
name|generator
operator|.
name|generate
argument_list|(
name|int
operator|.
name|class
argument_list|)
argument_list|,
name|generator
operator|.
name|generate
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|)
argument_list|)
expr_stmt|;
name|assertValueAndTypeEquals
argument_list|(
name|expected
argument_list|,
operator|new
name|FreshValueGenerator
argument_list|()
operator|.
name|generate
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|Table
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|)
argument_list|)
expr_stmt|;
name|assertFreshInstance
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|Table
argument_list|<
name|EmptyEnum
argument_list|,
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|testHashBasedTable ()
specifier|public
name|void
name|testHashBasedTable
parameter_list|()
block|{
name|assertFreshInstance
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|HashBasedTable
argument_list|<
name|String
argument_list|,
name|?
argument_list|,
name|?
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|)
expr_stmt|;
name|FreshValueGenerator
name|generator
init|=
operator|new
name|FreshValueGenerator
argument_list|()
decl_stmt|;
name|HashBasedTable
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|expected
init|=
name|HashBasedTable
operator|.
name|create
argument_list|()
decl_stmt|;
name|expected
operator|.
name|put
argument_list|(
name|generator
operator|.
name|generate
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|,
name|generator
operator|.
name|generate
argument_list|(
name|int
operator|.
name|class
argument_list|)
argument_list|,
name|generator
operator|.
name|generate
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|)
argument_list|)
expr_stmt|;
name|assertValueAndTypeEquals
argument_list|(
name|expected
argument_list|,
operator|new
name|FreshValueGenerator
argument_list|()
operator|.
name|generate
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|HashBasedTable
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|testRowSortedTable ()
specifier|public
name|void
name|testRowSortedTable
parameter_list|()
block|{
name|assertFreshInstance
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|RowSortedTable
argument_list|<
name|String
argument_list|,
name|?
argument_list|,
name|?
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|)
expr_stmt|;
name|FreshValueGenerator
name|generator
init|=
operator|new
name|FreshValueGenerator
argument_list|()
decl_stmt|;
name|RowSortedTable
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|expected
init|=
name|TreeBasedTable
operator|.
name|create
argument_list|()
decl_stmt|;
name|expected
operator|.
name|put
argument_list|(
name|generator
operator|.
name|generate
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|,
name|generator
operator|.
name|generate
argument_list|(
name|int
operator|.
name|class
argument_list|)
argument_list|,
name|generator
operator|.
name|generate
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|)
argument_list|)
expr_stmt|;
name|assertValueAndTypeEquals
argument_list|(
name|expected
argument_list|,
operator|new
name|FreshValueGenerator
argument_list|()
operator|.
name|generate
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|RowSortedTable
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|)
argument_list|)
expr_stmt|;
name|assertFreshInstance
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|RowSortedTable
argument_list|<
name|EmptyEnum
argument_list|,
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|testTreeBasedTable ()
specifier|public
name|void
name|testTreeBasedTable
parameter_list|()
block|{
name|assertFreshInstance
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|TreeBasedTable
argument_list|<
name|String
argument_list|,
name|?
argument_list|,
name|?
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|)
expr_stmt|;
name|FreshValueGenerator
name|generator
init|=
operator|new
name|FreshValueGenerator
argument_list|()
decl_stmt|;
name|TreeBasedTable
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|expected
init|=
name|TreeBasedTable
operator|.
name|create
argument_list|()
decl_stmt|;
name|expected
operator|.
name|put
argument_list|(
name|generator
operator|.
name|generate
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|,
name|generator
operator|.
name|generate
argument_list|(
name|int
operator|.
name|class
argument_list|)
argument_list|,
name|generator
operator|.
name|generate
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|)
argument_list|)
expr_stmt|;
name|assertValueAndTypeEquals
argument_list|(
name|expected
argument_list|,
operator|new
name|FreshValueGenerator
argument_list|()
operator|.
name|generate
argument_list|(
operator|new
name|TypeToken
argument_list|<
name|TreeBasedTable
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|testObject ()
specifier|public
name|void
name|testObject
parameter_list|()
block|{
name|assertEquals
argument_list|(
operator|new
name|FreshValueGenerator
argument_list|()
operator|.
name|generate
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|,
operator|new
name|FreshValueGenerator
argument_list|()
operator|.
name|generate
argument_list|(
name|Object
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|testEnums ()
specifier|public
name|void
name|testEnums
parameter_list|()
block|{
name|assertEqualInstance
argument_list|(
name|EmptyEnum
operator|.
name|class
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertEqualInstance
argument_list|(
name|OneConstantEnum
operator|.
name|class
argument_list|,
name|OneConstantEnum
operator|.
name|CONSTANT1
argument_list|)
expr_stmt|;
name|assertFreshInstance
argument_list|(
name|TwoConstantEnum
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|testAddSampleInstances_twoInstances ()
specifier|public
name|void
name|testAddSampleInstances_twoInstances
parameter_list|()
block|{
name|FreshValueGenerator
name|generator
init|=
operator|new
name|FreshValueGenerator
argument_list|()
decl_stmt|;
name|generator
operator|.
name|addSampleInstances
argument_list|(
name|String
operator|.
name|class
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a"
argument_list|,
name|generator
operator|.
name|generate
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"b"
argument_list|,
name|generator
operator|.
name|generate
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a"
argument_list|,
name|generator
operator|.
name|generate
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|testAddSampleInstances_oneInstance ()
specifier|public
name|void
name|testAddSampleInstances_oneInstance
parameter_list|()
block|{
name|FreshValueGenerator
name|generator
init|=
operator|new
name|FreshValueGenerator
argument_list|()
decl_stmt|;
name|generator
operator|.
name|addSampleInstances
argument_list|(
name|String
operator|.
name|class
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a"
argument_list|,
name|generator
operator|.
name|generate
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a"
argument_list|,
name|generator
operator|.
name|generate
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|testAddSampleInstances_noInstance ()
specifier|public
name|void
name|testAddSampleInstances_noInstance
parameter_list|()
block|{
name|FreshValueGenerator
name|generator
init|=
operator|new
name|FreshValueGenerator
argument_list|()
decl_stmt|;
name|generator
operator|.
name|addSampleInstances
argument_list|(
name|String
operator|.
name|class
argument_list|,
name|ImmutableList
operator|.
expr|<
name|String
operator|>
name|of
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|FreshValueGenerator
argument_list|()
operator|.
name|generate
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|,
name|generator
operator|.
name|generate
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|testFreshCurrency ()
specifier|public
name|void
name|testFreshCurrency
parameter_list|()
block|{
name|FreshValueGenerator
name|generator
init|=
operator|new
name|FreshValueGenerator
argument_list|()
decl_stmt|;
comment|// repeat a few times to make sure we don't stumble upon a bad Locale
name|assertNotNull
argument_list|(
name|generator
operator|.
name|generate
argument_list|(
name|Currency
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|generator
operator|.
name|generate
argument_list|(
name|Currency
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|generator
operator|.
name|generate
argument_list|(
name|Currency
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|testNulls ()
specifier|public
name|void
name|testNulls
parameter_list|()
throws|throws
name|Exception
block|{
operator|new
name|ClassSanityTester
argument_list|()
operator|.
name|setDefault
argument_list|(
name|Method
operator|.
name|class
argument_list|,
name|FreshValueGeneratorTest
operator|.
name|class
operator|.
name|getDeclaredMethod
argument_list|(
literal|"testNulls"
argument_list|)
argument_list|)
operator|.
name|testNulls
argument_list|(
name|FreshValueGenerator
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|assertFreshInstances (Class<?>.... types)
specifier|private
specifier|static
name|void
name|assertFreshInstances
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
modifier|...
name|types
parameter_list|)
block|{
for|for
control|(
name|Class
argument_list|<
name|?
argument_list|>
name|type
range|:
name|types
control|)
block|{
name|assertFreshInstance
argument_list|(
name|type
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
DECL|method|assertFreshInstance (TypeToken<T> type)
specifier|private
specifier|static
parameter_list|<
name|T
parameter_list|>
name|void
name|assertFreshInstance
parameter_list|(
name|TypeToken
argument_list|<
name|T
argument_list|>
name|type
parameter_list|)
block|{
name|FreshValueGenerator
name|generator
init|=
operator|new
name|FreshValueGenerator
argument_list|()
decl_stmt|;
name|T
name|value1
init|=
name|generator
operator|.
name|generate
argument_list|(
name|type
argument_list|)
decl_stmt|;
name|T
name|value2
init|=
name|generator
operator|.
name|generate
argument_list|(
name|type
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Null returned for "
operator|+
name|type
argument_list|,
name|value1
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Equal instance "
operator|+
name|value1
operator|+
literal|" returned for "
operator|+
name|type
argument_list|,
name|value1
operator|.
name|equals
argument_list|(
name|value2
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|assertFreshInstance (Class<T> type)
specifier|private
specifier|static
parameter_list|<
name|T
parameter_list|>
name|void
name|assertFreshInstance
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|)
block|{
name|assertFreshInstance
argument_list|(
name|TypeToken
operator|.
name|of
argument_list|(
name|type
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|assertEqualInstance (Class<T> type, T value)
specifier|private
specifier|static
parameter_list|<
name|T
parameter_list|>
name|void
name|assertEqualInstance
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|,
name|T
name|value
parameter_list|)
block|{
name|FreshValueGenerator
name|generator
init|=
operator|new
name|FreshValueGenerator
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|value
argument_list|,
name|generator
operator|.
name|generate
argument_list|(
name|type
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|value
argument_list|,
name|generator
operator|.
name|generate
argument_list|(
name|type
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_enum
DECL|enum|EmptyEnum
specifier|private
enum|enum
name|EmptyEnum
block|{}
end_enum

begin_enum
DECL|enum|OneConstantEnum
specifier|private
enum|enum
name|OneConstantEnum
block|{
DECL|enumConstant|CONSTANT1
name|CONSTANT1
block|}
end_enum

begin_enum
DECL|enum|TwoConstantEnum
specifier|private
enum|enum
name|TwoConstantEnum
block|{
DECL|enumConstant|CONSTANT1
DECL|enumConstant|CONSTANT2
name|CONSTANT1
block|,
name|CONSTANT2
block|}
end_enum

begin_function
DECL|method|assertValueAndTypeEquals (Object expected, Object actual)
specifier|private
specifier|static
name|void
name|assertValueAndTypeEquals
parameter_list|(
name|Object
name|expected
parameter_list|,
name|Object
name|actual
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|getClass
argument_list|()
argument_list|,
name|actual
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|newLinkedHashSet (E element)
specifier|private
specifier|static
parameter_list|<
name|E
parameter_list|>
name|LinkedHashSet
argument_list|<
name|E
argument_list|>
name|newLinkedHashSet
parameter_list|(
name|E
name|element
parameter_list|)
block|{
name|LinkedHashSet
argument_list|<
name|E
argument_list|>
name|set
init|=
name|Sets
operator|.
name|newLinkedHashSet
argument_list|()
decl_stmt|;
name|set
operator|.
name|add
argument_list|(
name|element
argument_list|)
expr_stmt|;
return|return
name|set
return|;
block|}
end_function

begin_function
DECL|method|newLinkedList (E element)
specifier|private
specifier|static
parameter_list|<
name|E
parameter_list|>
name|LinkedList
argument_list|<
name|E
argument_list|>
name|newLinkedList
parameter_list|(
name|E
name|element
parameter_list|)
block|{
name|LinkedList
argument_list|<
name|E
argument_list|>
name|list
init|=
name|Lists
operator|.
name|newLinkedList
argument_list|()
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|element
argument_list|)
expr_stmt|;
return|return
name|list
return|;
block|}
end_function

unit|}
end_unit

