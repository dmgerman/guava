begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2009 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.testing
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|testing
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|AssertionFailedError
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_comment
comment|/**  * Tests for {@link SerializableTester}.  *  * @author Nick Kralevich  */
end_comment

begin_class
DECL|class|SerializableTesterTest
specifier|public
class|class
name|SerializableTesterTest
extends|extends
name|TestCase
block|{
DECL|method|testStringAssertions ()
specifier|public
name|void
name|testStringAssertions
parameter_list|()
block|{
name|String
name|original
init|=
literal|"hello world"
decl_stmt|;
name|String
name|copy
init|=
name|SerializableTester
operator|.
name|reserializeAndAssert
argument_list|(
name|original
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|original
argument_list|,
name|copy
argument_list|)
expr_stmt|;
name|assertNotSame
argument_list|(
name|original
argument_list|,
name|copy
argument_list|)
expr_stmt|;
block|}
DECL|method|testClassWhichDoesNotImplementEquals ()
specifier|public
name|void
name|testClassWhichDoesNotImplementEquals
parameter_list|()
block|{
name|ClassWhichDoesNotImplementEquals
name|orig
init|=
operator|new
name|ClassWhichDoesNotImplementEquals
argument_list|()
decl_stmt|;
name|boolean
name|errorNotThrown
init|=
literal|false
decl_stmt|;
try|try
block|{
name|SerializableTester
operator|.
name|reserializeAndAssert
argument_list|(
name|orig
argument_list|)
expr_stmt|;
name|errorNotThrown
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AssertionFailedError
name|error
parameter_list|)
block|{
comment|// expected
name|assertContains
argument_list|(
literal|"must be Object#equals to"
argument_list|,
name|error
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertFalse
argument_list|(
name|errorNotThrown
argument_list|)
expr_stmt|;
block|}
DECL|method|testClassWhichIsAlwaysEqualButHasDifferentHashcodes ()
specifier|public
name|void
name|testClassWhichIsAlwaysEqualButHasDifferentHashcodes
parameter_list|()
block|{
name|ClassWhichIsAlwaysEqualButHasDifferentHashcodes
name|orig
init|=
operator|new
name|ClassWhichIsAlwaysEqualButHasDifferentHashcodes
argument_list|()
decl_stmt|;
name|boolean
name|errorNotThrown
init|=
literal|false
decl_stmt|;
try|try
block|{
name|SerializableTester
operator|.
name|reserializeAndAssert
argument_list|(
name|orig
argument_list|)
expr_stmt|;
name|errorNotThrown
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AssertionFailedError
name|error
parameter_list|)
block|{
comment|// expected
name|assertContains
argument_list|(
literal|"must be equal to the Object#hashCode"
argument_list|,
name|error
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertFalse
argument_list|(
name|errorNotThrown
argument_list|)
expr_stmt|;
block|}
DECL|method|testObjectWhichIsEqualButChangesClass ()
specifier|public
name|void
name|testObjectWhichIsEqualButChangesClass
parameter_list|()
block|{
name|ObjectWhichIsEqualButChangesClass
name|orig
init|=
operator|new
name|ObjectWhichIsEqualButChangesClass
argument_list|()
decl_stmt|;
name|boolean
name|errorNotThrown
init|=
literal|false
decl_stmt|;
try|try
block|{
name|SerializableTester
operator|.
name|reserializeAndAssert
argument_list|(
name|orig
argument_list|)
expr_stmt|;
name|errorNotThrown
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AssertionFailedError
name|error
parameter_list|)
block|{
comment|// expected
name|assertContains
argument_list|(
literal|"expected:<class "
argument_list|,
name|error
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertFalse
argument_list|(
name|errorNotThrown
argument_list|)
expr_stmt|;
block|}
DECL|class|ClassWhichDoesNotImplementEquals
specifier|private
specifier|static
class|class
name|ClassWhichDoesNotImplementEquals
implements|implements
name|Serializable
block|{
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
block|}
DECL|class|ClassWhichIsAlwaysEqualButHasDifferentHashcodes
specifier|private
specifier|static
class|class
name|ClassWhichIsAlwaysEqualButHasDifferentHashcodes
implements|implements
name|Serializable
block|{
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|2L
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"EqualsHashCode"
argument_list|)
annotation|@
name|Override
DECL|method|equals (Object other)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|other
parameter_list|)
block|{
return|return
operator|(
name|other
operator|instanceof
name|ClassWhichIsAlwaysEqualButHasDifferentHashcodes
operator|)
return|;
block|}
block|}
DECL|class|ObjectWhichIsEqualButChangesClass
specifier|private
specifier|static
class|class
name|ObjectWhichIsEqualButChangesClass
implements|implements
name|Serializable
block|{
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
annotation|@
name|Override
DECL|method|equals (Object other)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|other
parameter_list|)
block|{
return|return
operator|(
name|other
operator|instanceof
name|ObjectWhichIsEqualButChangesClass
operator|||
name|other
operator|instanceof
name|OtherForm
operator|)
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|1
return|;
block|}
DECL|method|writeReplace ()
specifier|private
name|Object
name|writeReplace
parameter_list|()
block|{
return|return
operator|new
name|OtherForm
argument_list|()
return|;
block|}
DECL|class|OtherForm
specifier|private
specifier|static
class|class
name|OtherForm
implements|implements
name|Serializable
block|{
annotation|@
name|Override
DECL|method|equals (Object other)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|other
parameter_list|)
block|{
return|return
operator|(
name|other
operator|instanceof
name|ObjectWhichIsEqualButChangesClass
operator|||
name|other
operator|instanceof
name|OtherForm
operator|)
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|1
return|;
block|}
block|}
block|}
DECL|method|assertContains (String expectedSubstring, String actual)
specifier|private
specifier|static
name|void
name|assertContains
parameter_list|(
name|String
name|expectedSubstring
parameter_list|,
name|String
name|actual
parameter_list|)
block|{
comment|// TODO(kevinb): use a Truth assertion here
if|if
condition|(
operator|!
name|actual
operator|.
name|contains
argument_list|(
name|expectedSubstring
argument_list|)
condition|)
block|{
name|fail
argument_list|(
literal|"expected<"
operator|+
name|actual
operator|+
literal|"> to contain<"
operator|+
name|expectedSubstring
operator|+
literal|">"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

