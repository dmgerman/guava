begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2012 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.testing
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|testing
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertThat
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|CharMatcher
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Charsets
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Equivalence
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Joiner
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Splitter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Stopwatch
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Ticker
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|BiMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ClassToInstanceMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableBiMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableClassToInstanceMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableCollection
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableListMultimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMultimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMultiset
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSetMultimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSortedMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSortedSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableTable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ListMultimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|MapConstraint
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|MapDifference
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Multimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Multiset
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|PeekingIterator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Range
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|RowSortedTable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|SetMultimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|SortedMapDifference
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|SortedMultiset
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|SortedSetMultimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|io
operator|.
name|ByteSink
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|io
operator|.
name|ByteSource
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|io
operator|.
name|CharSink
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|io
operator|.
name|CharSource
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|primitives
operator|.
name|UnsignedInteger
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|primitives
operator|.
name|UnsignedLong
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|AtomicDouble
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Reader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Writer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|AnnotatedElement
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|GenericDeclaration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigDecimal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|Buffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|CharBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|DoubleBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|FloatBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|IntBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|LongBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ShortBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|BitSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Currency
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Deque
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ListIterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NavigableMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NavigableSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|PriorityQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Queue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|BlockingDeque
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|BlockingQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentNavigableMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|DelayQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|PriorityBlockingQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|SynchronousQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicReference
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|MatchResult
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_comment
comment|/**  * Unit test for {@link ArbitraryInstances}.  *  * @author Ben Yu  */
end_comment

begin_class
DECL|class|ArbitraryInstancesTest
specifier|public
class|class
name|ArbitraryInstancesTest
extends|extends
name|TestCase
block|{
DECL|method|testGet_primitives ()
specifier|public
name|void
name|testGet_primitives
parameter_list|()
block|{
name|assertNull
argument_list|(
name|ArbitraryInstances
operator|.
name|get
argument_list|(
name|void
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|ArbitraryInstances
operator|.
name|get
argument_list|(
name|Void
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Boolean
operator|.
name|FALSE
argument_list|,
name|ArbitraryInstances
operator|.
name|get
argument_list|(
name|boolean
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Boolean
operator|.
name|FALSE
argument_list|,
name|ArbitraryInstances
operator|.
name|get
argument_list|(
name|Boolean
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Character
operator|.
name|valueOf
argument_list|(
literal|'\0'
argument_list|)
argument_list|,
name|ArbitraryInstances
operator|.
name|get
argument_list|(
name|char
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Character
operator|.
name|valueOf
argument_list|(
literal|'\0'
argument_list|)
argument_list|,
name|ArbitraryInstances
operator|.
name|get
argument_list|(
name|Character
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Byte
operator|.
name|valueOf
argument_list|(
operator|(
name|byte
operator|)
literal|0
argument_list|)
argument_list|,
name|ArbitraryInstances
operator|.
name|get
argument_list|(
name|byte
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Byte
operator|.
name|valueOf
argument_list|(
operator|(
name|byte
operator|)
literal|0
argument_list|)
argument_list|,
name|ArbitraryInstances
operator|.
name|get
argument_list|(
name|Byte
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Short
operator|.
name|valueOf
argument_list|(
operator|(
name|short
operator|)
literal|0
argument_list|)
argument_list|,
name|ArbitraryInstances
operator|.
name|get
argument_list|(
name|short
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Short
operator|.
name|valueOf
argument_list|(
operator|(
name|short
operator|)
literal|0
argument_list|)
argument_list|,
name|ArbitraryInstances
operator|.
name|get
argument_list|(
name|Short
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|0
argument_list|)
argument_list|,
name|ArbitraryInstances
operator|.
name|get
argument_list|(
name|int
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|0
argument_list|)
argument_list|,
name|ArbitraryInstances
operator|.
name|get
argument_list|(
name|Integer
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
literal|0
argument_list|)
argument_list|,
name|ArbitraryInstances
operator|.
name|get
argument_list|(
name|long
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
literal|0
argument_list|)
argument_list|,
name|ArbitraryInstances
operator|.
name|get
argument_list|(
name|Long
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Float
operator|.
name|valueOf
argument_list|(
literal|0
argument_list|)
argument_list|,
name|ArbitraryInstances
operator|.
name|get
argument_list|(
name|float
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Float
operator|.
name|valueOf
argument_list|(
literal|0
argument_list|)
argument_list|,
name|ArbitraryInstances
operator|.
name|get
argument_list|(
name|Float
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Double
operator|.
name|valueOf
argument_list|(
literal|0
argument_list|)
argument_list|,
name|ArbitraryInstances
operator|.
name|get
argument_list|(
name|double
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Double
operator|.
name|valueOf
argument_list|(
literal|0
argument_list|)
argument_list|,
name|ArbitraryInstances
operator|.
name|get
argument_list|(
name|Double
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|UnsignedInteger
operator|.
name|ZERO
argument_list|,
name|ArbitraryInstances
operator|.
name|get
argument_list|(
name|UnsignedInteger
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|UnsignedLong
operator|.
name|ZERO
argument_list|,
name|ArbitraryInstances
operator|.
name|get
argument_list|(
name|UnsignedLong
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ArbitraryInstances
operator|.
name|get
argument_list|(
name|BigDecimal
operator|.
name|class
argument_list|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ArbitraryInstances
operator|.
name|get
argument_list|(
name|BigInteger
operator|.
name|class
argument_list|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|ArbitraryInstances
operator|.
name|get
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|ArbitraryInstances
operator|.
name|get
argument_list|(
name|CharSequence
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|TimeUnit
operator|.
name|SECONDS
argument_list|,
name|ArbitraryInstances
operator|.
name|get
argument_list|(
name|TimeUnit
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|ArbitraryInstances
operator|.
name|get
argument_list|(
name|Object
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ArbitraryInstances
operator|.
name|get
argument_list|(
name|Number
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Charsets
operator|.
name|UTF_8
argument_list|,
name|ArbitraryInstances
operator|.
name|get
argument_list|(
name|Charset
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testGet_collections ()
specifier|public
name|void
name|testGet_collections
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|()
operator|.
name|iterator
argument_list|()
argument_list|,
name|ArbitraryInstances
operator|.
name|get
argument_list|(
name|Iterator
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ArbitraryInstances
operator|.
name|get
argument_list|(
name|PeekingIterator
operator|.
name|class
argument_list|)
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ArbitraryInstances
operator|.
name|get
argument_list|(
name|ListIterator
operator|.
name|class
argument_list|)
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|()
argument_list|,
name|ArbitraryInstances
operator|.
name|get
argument_list|(
name|Iterable
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|()
argument_list|,
name|ArbitraryInstances
operator|.
name|get
argument_list|(
name|Set
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|()
argument_list|,
name|ArbitraryInstances
operator|.
name|get
argument_list|(
name|ImmutableSet
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableSortedSet
operator|.
name|of
argument_list|()
argument_list|,
name|ArbitraryInstances
operator|.
name|get
argument_list|(
name|SortedSet
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableSortedSet
operator|.
name|of
argument_list|()
argument_list|,
name|ArbitraryInstances
operator|.
name|get
argument_list|(
name|ImmutableSortedSet
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|()
argument_list|,
name|ArbitraryInstances
operator|.
name|get
argument_list|(
name|Collection
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|()
argument_list|,
name|ArbitraryInstances
operator|.
name|get
argument_list|(
name|ImmutableCollection
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|()
argument_list|,
name|ArbitraryInstances
operator|.
name|get
argument_list|(
name|List
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|()
argument_list|,
name|ArbitraryInstances
operator|.
name|get
argument_list|(
name|ImmutableList
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|()
argument_list|,
name|ArbitraryInstances
operator|.
name|get
argument_list|(
name|Map
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|()
argument_list|,
name|ArbitraryInstances
operator|.
name|get
argument_list|(
name|ImmutableMap
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableSortedMap
operator|.
name|of
argument_list|()
argument_list|,
name|ArbitraryInstances
operator|.
name|get
argument_list|(
name|SortedMap
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableSortedMap
operator|.
name|of
argument_list|()
argument_list|,
name|ArbitraryInstances
operator|.
name|get
argument_list|(
name|ImmutableSortedMap
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableMultiset
operator|.
name|of
argument_list|()
argument_list|,
name|ArbitraryInstances
operator|.
name|get
argument_list|(
name|Multiset
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableMultiset
operator|.
name|of
argument_list|()
argument_list|,
name|ArbitraryInstances
operator|.
name|get
argument_list|(
name|ImmutableMultiset
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ArbitraryInstances
operator|.
name|get
argument_list|(
name|SortedMultiset
operator|.
name|class
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableMultimap
operator|.
name|of
argument_list|()
argument_list|,
name|ArbitraryInstances
operator|.
name|get
argument_list|(
name|Multimap
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableMultimap
operator|.
name|of
argument_list|()
argument_list|,
name|ArbitraryInstances
operator|.
name|get
argument_list|(
name|ImmutableMultimap
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ArbitraryInstances
operator|.
name|get
argument_list|(
name|SortedSetMultimap
operator|.
name|class
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableTable
operator|.
name|of
argument_list|()
argument_list|,
name|ArbitraryInstances
operator|.
name|get
argument_list|(
name|Table
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableTable
operator|.
name|of
argument_list|()
argument_list|,
name|ArbitraryInstances
operator|.
name|get
argument_list|(
name|ImmutableTable
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ArbitraryInstances
operator|.
name|get
argument_list|(
name|RowSortedTable
operator|.
name|class
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableBiMap
operator|.
name|of
argument_list|()
argument_list|,
name|ArbitraryInstances
operator|.
name|get
argument_list|(
name|BiMap
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableBiMap
operator|.
name|of
argument_list|()
argument_list|,
name|ArbitraryInstances
operator|.
name|get
argument_list|(
name|ImmutableBiMap
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ArbitraryInstances
operator|.
name|get
argument_list|(
name|ImmutableClassToInstanceMap
operator|.
name|class
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ArbitraryInstances
operator|.
name|get
argument_list|(
name|ClassToInstanceMap
operator|.
name|class
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ArbitraryInstances
operator|.
name|get
argument_list|(
name|ListMultimap
operator|.
name|class
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ArbitraryInstances
operator|.
name|get
argument_list|(
name|ImmutableListMultimap
operator|.
name|class
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ArbitraryInstances
operator|.
name|get
argument_list|(
name|SetMultimap
operator|.
name|class
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ArbitraryInstances
operator|.
name|get
argument_list|(
name|ImmutableSetMultimap
operator|.
name|class
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ArbitraryInstances
operator|.
name|get
argument_list|(
name|MapDifference
operator|.
name|class
argument_list|)
operator|.
name|areEqual
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ArbitraryInstances
operator|.
name|get
argument_list|(
name|SortedMapDifference
operator|.
name|class
argument_list|)
operator|.
name|areEqual
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Range
operator|.
name|all
argument_list|()
argument_list|,
name|ArbitraryInstances
operator|.
name|get
argument_list|(
name|Range
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ArbitraryInstances
operator|.
name|get
argument_list|(
name|NavigableSet
operator|.
name|class
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ArbitraryInstances
operator|.
name|get
argument_list|(
name|NavigableMap
operator|.
name|class
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ArbitraryInstances
operator|.
name|get
argument_list|(
name|LinkedList
operator|.
name|class
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ArbitraryInstances
operator|.
name|get
argument_list|(
name|Deque
operator|.
name|class
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ArbitraryInstances
operator|.
name|get
argument_list|(
name|Queue
operator|.
name|class
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ArbitraryInstances
operator|.
name|get
argument_list|(
name|PriorityQueue
operator|.
name|class
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ArbitraryInstances
operator|.
name|get
argument_list|(
name|BitSet
operator|.
name|class
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ArbitraryInstances
operator|.
name|get
argument_list|(
name|TreeSet
operator|.
name|class
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ArbitraryInstances
operator|.
name|get
argument_list|(
name|TreeMap
operator|.
name|class
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertFreshInstanceReturned
argument_list|(
name|LinkedList
operator|.
name|class
argument_list|,
name|Deque
operator|.
name|class
argument_list|,
name|Queue
operator|.
name|class
argument_list|,
name|PriorityQueue
operator|.
name|class
argument_list|,
name|BitSet
operator|.
name|class
argument_list|,
name|TreeSet
operator|.
name|class
argument_list|,
name|TreeMap
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
DECL|method|testGet_misc ()
specifier|public
name|void
name|testGet_misc
parameter_list|()
block|{
name|assertNotNull
argument_list|(
name|ArbitraryInstances
operator|.
name|get
argument_list|(
name|CharMatcher
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|ArbitraryInstances
operator|.
name|get
argument_list|(
name|Currency
operator|.
name|class
argument_list|)
operator|.
name|getCurrencyCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|ArbitraryInstances
operator|.
name|get
argument_list|(
name|Locale
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|ArbitraryInstances
operator|.
name|get
argument_list|(
name|Joiner
operator|.
name|class
argument_list|)
operator|.
name|join
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"a"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|ArbitraryInstances
operator|.
name|get
argument_list|(
name|Splitter
operator|.
name|class
argument_list|)
operator|.
name|split
argument_list|(
literal|"a,b"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ArbitraryInstances
operator|.
name|get
argument_list|(
name|Optional
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|isAbsent
argument_list|()
expr_stmt|;
name|ArbitraryInstances
operator|.
name|get
argument_list|(
name|Stopwatch
operator|.
name|class
argument_list|)
operator|.
name|start
argument_list|()
expr_stmt|;
name|assertNotNull
argument_list|(
name|ArbitraryInstances
operator|.
name|get
argument_list|(
name|Ticker
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|ArbitraryInstances
operator|.
name|get
argument_list|(
name|MapConstraint
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertFreshInstanceReturned
argument_list|(
name|Random
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ArbitraryInstances
operator|.
name|get
argument_list|(
name|Random
operator|.
name|class
argument_list|)
operator|.
name|nextInt
argument_list|()
argument_list|,
name|ArbitraryInstances
operator|.
name|get
argument_list|(
name|Random
operator|.
name|class
argument_list|)
operator|.
name|nextInt
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testGet_concurrent ()
specifier|public
name|void
name|testGet_concurrent
parameter_list|()
block|{
name|assertTrue
argument_list|(
name|ArbitraryInstances
operator|.
name|get
argument_list|(
name|BlockingDeque
operator|.
name|class
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ArbitraryInstances
operator|.
name|get
argument_list|(
name|BlockingQueue
operator|.
name|class
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ArbitraryInstances
operator|.
name|get
argument_list|(
name|DelayQueue
operator|.
name|class
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ArbitraryInstances
operator|.
name|get
argument_list|(
name|SynchronousQueue
operator|.
name|class
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ArbitraryInstances
operator|.
name|get
argument_list|(
name|PriorityBlockingQueue
operator|.
name|class
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ArbitraryInstances
operator|.
name|get
argument_list|(
name|ConcurrentMap
operator|.
name|class
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ArbitraryInstances
operator|.
name|get
argument_list|(
name|ConcurrentNavigableMap
operator|.
name|class
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|ArbitraryInstances
operator|.
name|get
argument_list|(
name|Executor
operator|.
name|class
argument_list|)
operator|.
name|execute
argument_list|(
name|ArbitraryInstances
operator|.
name|get
argument_list|(
name|Runnable
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|ArbitraryInstances
operator|.
name|get
argument_list|(
name|ThreadFactory
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertFreshInstanceReturned
argument_list|(
name|BlockingQueue
operator|.
name|class
argument_list|,
name|BlockingDeque
operator|.
name|class
argument_list|,
name|PriorityBlockingQueue
operator|.
name|class
argument_list|,
name|DelayQueue
operator|.
name|class
argument_list|,
name|SynchronousQueue
operator|.
name|class
argument_list|,
name|ConcurrentMap
operator|.
name|class
argument_list|,
name|ConcurrentNavigableMap
operator|.
name|class
argument_list|,
name|AtomicReference
operator|.
name|class
argument_list|,
name|AtomicBoolean
operator|.
name|class
argument_list|,
name|AtomicInteger
operator|.
name|class
argument_list|,
name|AtomicLong
operator|.
name|class
argument_list|,
name|AtomicDouble
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// functor classes have no type parameters
DECL|method|testGet_functors ()
specifier|public
name|void
name|testGet_functors
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ArbitraryInstances
operator|.
name|get
argument_list|(
name|Comparator
operator|.
name|class
argument_list|)
operator|.
name|compare
argument_list|(
literal|"abc"
argument_list|,
literal|123
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ArbitraryInstances
operator|.
name|get
argument_list|(
name|Predicate
operator|.
name|class
argument_list|)
operator|.
name|apply
argument_list|(
literal|"abc"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ArbitraryInstances
operator|.
name|get
argument_list|(
name|Equivalence
operator|.
name|class
argument_list|)
operator|.
name|equivalent
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ArbitraryInstances
operator|.
name|get
argument_list|(
name|Equivalence
operator|.
name|class
argument_list|)
operator|.
name|equivalent
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"SelfComparison"
argument_list|)
DECL|method|testGet_comparable ()
specifier|public
name|void
name|testGet_comparable
parameter_list|()
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// The null value can compare with any Object
name|Comparable
argument_list|<
name|Object
argument_list|>
name|comparable
init|=
name|ArbitraryInstances
operator|.
name|get
argument_list|(
name|Comparable
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|comparable
operator|.
name|compareTo
argument_list|(
name|comparable
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|comparable
operator|.
name|compareTo
argument_list|(
literal|""
argument_list|)
operator|>
literal|0
argument_list|)
expr_stmt|;
try|try
block|{
name|comparable
operator|.
name|compareTo
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|expected
parameter_list|)
block|{}
block|}
DECL|method|testGet_array ()
specifier|public
name|void
name|testGet_array
parameter_list|()
block|{
name|assertThat
argument_list|(
name|ArbitraryInstances
operator|.
name|get
argument_list|(
name|int
index|[]
operator|.
expr|class
argument_list|)
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|ArbitraryInstances
operator|.
name|get
argument_list|(
name|Object
index|[]
operator|.
expr|class
argument_list|)
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|ArbitraryInstances
operator|.
name|get
argument_list|(
name|String
index|[]
operator|.
expr|class
argument_list|)
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
DECL|method|testGet_enum ()
specifier|public
name|void
name|testGet_enum
parameter_list|()
block|{
name|assertNull
argument_list|(
name|ArbitraryInstances
operator|.
name|get
argument_list|(
name|EmptyEnum
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Direction
operator|.
name|UP
argument_list|,
name|ArbitraryInstances
operator|.
name|get
argument_list|(
name|Direction
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testGet_interface ()
specifier|public
name|void
name|testGet_interface
parameter_list|()
block|{
name|assertNull
argument_list|(
name|ArbitraryInstances
operator|.
name|get
argument_list|(
name|SomeInterface
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testGet_runnable ()
specifier|public
name|void
name|testGet_runnable
parameter_list|()
block|{
name|ArbitraryInstances
operator|.
name|get
argument_list|(
name|Runnable
operator|.
name|class
argument_list|)
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
DECL|method|testGet_class ()
specifier|public
name|void
name|testGet_class
parameter_list|()
block|{
name|assertSame
argument_list|(
name|SomeAbstractClass
operator|.
name|INSTANCE
argument_list|,
name|ArbitraryInstances
operator|.
name|get
argument_list|(
name|SomeAbstractClass
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|WithPrivateConstructor
operator|.
name|INSTANCE
argument_list|,
name|ArbitraryInstances
operator|.
name|get
argument_list|(
name|WithPrivateConstructor
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|ArbitraryInstances
operator|.
name|get
argument_list|(
name|NoDefaultConstructor
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|WithExceptionalConstructor
operator|.
name|INSTANCE
argument_list|,
name|ArbitraryInstances
operator|.
name|get
argument_list|(
name|WithExceptionalConstructor
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|ArbitraryInstances
operator|.
name|get
argument_list|(
name|NonPublicClass
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testGet_mutable ()
specifier|public
name|void
name|testGet_mutable
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ArbitraryInstances
operator|.
name|get
argument_list|(
name|ArrayList
operator|.
name|class
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ArbitraryInstances
operator|.
name|get
argument_list|(
name|HashMap
operator|.
name|class
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ArbitraryInstances
operator|.
name|get
argument_list|(
name|Appendable
operator|.
name|class
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|ArbitraryInstances
operator|.
name|get
argument_list|(
name|StringBuilder
operator|.
name|class
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|ArbitraryInstances
operator|.
name|get
argument_list|(
name|StringBuffer
operator|.
name|class
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
name|assertFreshInstanceReturned
argument_list|(
name|ArrayList
operator|.
name|class
argument_list|,
name|HashMap
operator|.
name|class
argument_list|,
name|Appendable
operator|.
name|class
argument_list|,
name|StringBuilder
operator|.
name|class
argument_list|,
name|StringBuffer
operator|.
name|class
argument_list|,
name|Throwable
operator|.
name|class
argument_list|,
name|Exception
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
DECL|method|testGet_io ()
specifier|public
name|void
name|testGet_io
parameter_list|()
throws|throws
name|IOException
block|{
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|ArbitraryInstances
operator|.
name|get
argument_list|(
name|InputStream
operator|.
name|class
argument_list|)
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|ArbitraryInstances
operator|.
name|get
argument_list|(
name|ByteArrayInputStream
operator|.
name|class
argument_list|)
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|ArbitraryInstances
operator|.
name|get
argument_list|(
name|Readable
operator|.
name|class
argument_list|)
operator|.
name|read
argument_list|(
name|CharBuffer
operator|.
name|allocate
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|ArbitraryInstances
operator|.
name|get
argument_list|(
name|Reader
operator|.
name|class
argument_list|)
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|ArbitraryInstances
operator|.
name|get
argument_list|(
name|StringReader
operator|.
name|class
argument_list|)
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ArbitraryInstances
operator|.
name|get
argument_list|(
name|Buffer
operator|.
name|class
argument_list|)
operator|.
name|capacity
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ArbitraryInstances
operator|.
name|get
argument_list|(
name|CharBuffer
operator|.
name|class
argument_list|)
operator|.
name|capacity
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ArbitraryInstances
operator|.
name|get
argument_list|(
name|ByteBuffer
operator|.
name|class
argument_list|)
operator|.
name|capacity
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ArbitraryInstances
operator|.
name|get
argument_list|(
name|ShortBuffer
operator|.
name|class
argument_list|)
operator|.
name|capacity
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ArbitraryInstances
operator|.
name|get
argument_list|(
name|IntBuffer
operator|.
name|class
argument_list|)
operator|.
name|capacity
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ArbitraryInstances
operator|.
name|get
argument_list|(
name|LongBuffer
operator|.
name|class
argument_list|)
operator|.
name|capacity
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ArbitraryInstances
operator|.
name|get
argument_list|(
name|FloatBuffer
operator|.
name|class
argument_list|)
operator|.
name|capacity
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ArbitraryInstances
operator|.
name|get
argument_list|(
name|DoubleBuffer
operator|.
name|class
argument_list|)
operator|.
name|capacity
argument_list|()
argument_list|)
expr_stmt|;
name|ArbitraryInstances
operator|.
name|get
argument_list|(
name|PrintStream
operator|.
name|class
argument_list|)
operator|.
name|println
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|ArbitraryInstances
operator|.
name|get
argument_list|(
name|PrintWriter
operator|.
name|class
argument_list|)
operator|.
name|println
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|ArbitraryInstances
operator|.
name|get
argument_list|(
name|File
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertFreshInstanceReturned
argument_list|(
name|ByteArrayOutputStream
operator|.
name|class
argument_list|,
name|OutputStream
operator|.
name|class
argument_list|,
name|Writer
operator|.
name|class
argument_list|,
name|StringWriter
operator|.
name|class
argument_list|,
name|PrintStream
operator|.
name|class
argument_list|,
name|PrintWriter
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ByteSource
operator|.
name|empty
argument_list|()
argument_list|,
name|ArbitraryInstances
operator|.
name|get
argument_list|(
name|ByteSource
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|CharSource
operator|.
name|empty
argument_list|()
argument_list|,
name|ArbitraryInstances
operator|.
name|get
argument_list|(
name|CharSource
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|ArbitraryInstances
operator|.
name|get
argument_list|(
name|ByteSink
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|ArbitraryInstances
operator|.
name|get
argument_list|(
name|CharSink
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testGet_reflect ()
specifier|public
name|void
name|testGet_reflect
parameter_list|()
block|{
name|assertNotNull
argument_list|(
name|ArbitraryInstances
operator|.
name|get
argument_list|(
name|Type
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|ArbitraryInstances
operator|.
name|get
argument_list|(
name|AnnotatedElement
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|ArbitraryInstances
operator|.
name|get
argument_list|(
name|GenericDeclaration
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testGet_regex ()
specifier|public
name|void
name|testGet_regex
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|Pattern
operator|.
name|compile
argument_list|(
literal|""
argument_list|)
operator|.
name|pattern
argument_list|()
argument_list|,
name|ArbitraryInstances
operator|.
name|get
argument_list|(
name|Pattern
operator|.
name|class
argument_list|)
operator|.
name|pattern
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ArbitraryInstances
operator|.
name|get
argument_list|(
name|MatchResult
operator|.
name|class
argument_list|)
operator|.
name|groupCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testGet_usePublicConstant ()
specifier|public
name|void
name|testGet_usePublicConstant
parameter_list|()
block|{
name|assertSame
argument_list|(
name|WithPublicConstant
operator|.
name|INSTANCE
argument_list|,
name|ArbitraryInstances
operator|.
name|get
argument_list|(
name|WithPublicConstant
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testGet_useFirstPublicConstant ()
specifier|public
name|void
name|testGet_useFirstPublicConstant
parameter_list|()
block|{
name|assertSame
argument_list|(
name|WithPublicConstants
operator|.
name|FIRST
argument_list|,
name|ArbitraryInstances
operator|.
name|get
argument_list|(
name|WithPublicConstants
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testGet_nullConstantIgnored ()
specifier|public
name|void
name|testGet_nullConstantIgnored
parameter_list|()
block|{
name|assertSame
argument_list|(
name|FirstConstantIsNull
operator|.
name|SECOND
argument_list|,
name|ArbitraryInstances
operator|.
name|get
argument_list|(
name|FirstConstantIsNull
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testGet_constantWithGenericsNotUsed ()
specifier|public
name|void
name|testGet_constantWithGenericsNotUsed
parameter_list|()
block|{
name|assertNull
argument_list|(
name|ArbitraryInstances
operator|.
name|get
argument_list|(
name|WithGenericConstant
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testGet_nullConstant ()
specifier|public
name|void
name|testGet_nullConstant
parameter_list|()
block|{
name|assertNull
argument_list|(
name|ArbitraryInstances
operator|.
name|get
argument_list|(
name|WithNullConstant
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testGet_constantTypeDoesNotMatch ()
specifier|public
name|void
name|testGet_constantTypeDoesNotMatch
parameter_list|()
block|{
name|assertNull
argument_list|(
name|ArbitraryInstances
operator|.
name|get
argument_list|(
name|ParentClassHasConstant
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testGet_nonPublicConstantNotUsed ()
specifier|public
name|void
name|testGet_nonPublicConstantNotUsed
parameter_list|()
block|{
name|assertNull
argument_list|(
name|ArbitraryInstances
operator|.
name|get
argument_list|(
name|NonPublicConstantIgnored
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testGet_nonStaticFieldNotUsed ()
specifier|public
name|void
name|testGet_nonStaticFieldNotUsed
parameter_list|()
block|{
name|assertNull
argument_list|(
name|ArbitraryInstances
operator|.
name|get
argument_list|(
name|NonStaticFieldIgnored
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testGet_constructorPreferredOverConstants ()
specifier|public
name|void
name|testGet_constructorPreferredOverConstants
parameter_list|()
block|{
name|assertNotNull
argument_list|(
name|ArbitraryInstances
operator|.
name|get
argument_list|(
name|WithPublicConstructorAndConstant
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ArbitraryInstances
operator|.
name|get
argument_list|(
name|WithPublicConstructorAndConstant
operator|.
name|class
argument_list|)
operator|!=
name|ArbitraryInstances
operator|.
name|get
argument_list|(
name|WithPublicConstructorAndConstant
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testGet_nonFinalFieldNotUsed ()
specifier|public
name|void
name|testGet_nonFinalFieldNotUsed
parameter_list|()
block|{
name|assertNull
argument_list|(
name|ArbitraryInstances
operator|.
name|get
argument_list|(
name|NonFinalFieldIgnored
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|assertFreshInstanceReturned (Class<?>.... mutableClasses)
specifier|private
specifier|static
name|void
name|assertFreshInstanceReturned
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
modifier|...
name|mutableClasses
parameter_list|)
block|{
for|for
control|(
name|Class
argument_list|<
name|?
argument_list|>
name|mutableClass
range|:
name|mutableClasses
control|)
block|{
name|Object
name|instance
init|=
name|ArbitraryInstances
operator|.
name|get
argument_list|(
name|mutableClass
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Expected to return non-null for: "
operator|+
name|mutableClass
argument_list|,
name|instance
argument_list|)
expr_stmt|;
name|assertNotSame
argument_list|(
literal|"Expected to return fresh instance for: "
operator|+
name|mutableClass
argument_list|,
name|instance
argument_list|,
name|ArbitraryInstances
operator|.
name|get
argument_list|(
name|mutableClass
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|enum|EmptyEnum
specifier|private
enum|enum
name|EmptyEnum
block|{}
DECL|enum|Direction
specifier|private
enum|enum
name|Direction
block|{
DECL|enumConstant|UP
DECL|enumConstant|DOWN
name|UP
block|,
name|DOWN
block|}
DECL|interface|SomeInterface
specifier|public
interface|interface
name|SomeInterface
block|{}
DECL|class|SomeAbstractClass
specifier|public
specifier|static
specifier|abstract
class|class
name|SomeAbstractClass
block|{
DECL|field|INSTANCE
specifier|public
specifier|static
specifier|final
name|SomeAbstractClass
name|INSTANCE
init|=
operator|new
name|SomeAbstractClass
argument_list|()
block|{}
decl_stmt|;
DECL|method|SomeAbstractClass ()
specifier|public
name|SomeAbstractClass
parameter_list|()
block|{}
block|}
DECL|class|NonPublicClass
specifier|static
class|class
name|NonPublicClass
block|{
DECL|method|NonPublicClass ()
specifier|public
name|NonPublicClass
parameter_list|()
block|{}
block|}
DECL|class|WithPrivateConstructor
specifier|private
specifier|static
class|class
name|WithPrivateConstructor
block|{
DECL|field|INSTANCE
specifier|public
specifier|static
specifier|final
name|WithPrivateConstructor
name|INSTANCE
init|=
operator|new
name|WithPrivateConstructor
argument_list|()
decl_stmt|;
block|}
DECL|class|NoDefaultConstructor
specifier|public
specifier|static
class|class
name|NoDefaultConstructor
block|{
DECL|method|NoDefaultConstructor (@uppressWarningsR) int i)
specifier|public
name|NoDefaultConstructor
parameter_list|(
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
name|int
name|i
parameter_list|)
block|{}
block|}
DECL|class|WithExceptionalConstructor
specifier|public
specifier|static
class|class
name|WithExceptionalConstructor
block|{
DECL|field|INSTANCE
specifier|public
specifier|static
specifier|final
name|WithExceptionalConstructor
name|INSTANCE
init|=
operator|new
name|WithExceptionalConstructor
argument_list|(
literal|"whatever"
argument_list|)
decl_stmt|;
DECL|method|WithExceptionalConstructor ()
specifier|public
name|WithExceptionalConstructor
parameter_list|()
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|()
throw|;
block|}
DECL|method|WithExceptionalConstructor (String unused)
specifier|private
name|WithExceptionalConstructor
parameter_list|(
name|String
name|unused
parameter_list|)
block|{}
block|}
DECL|class|WithPublicConstant
specifier|private
specifier|static
class|class
name|WithPublicConstant
block|{
DECL|field|INSTANCE
specifier|public
specifier|static
specifier|final
name|WithPublicConstant
name|INSTANCE
init|=
operator|new
name|WithPublicConstant
argument_list|()
decl_stmt|;
block|}
DECL|class|ParentClassHasConstant
specifier|private
specifier|static
class|class
name|ParentClassHasConstant
extends|extends
name|WithPublicConstant
block|{}
DECL|class|WithGenericConstant
specifier|public
specifier|static
class|class
name|WithGenericConstant
parameter_list|<
name|T
parameter_list|>
block|{
DECL|field|STRING_CONSTANT
specifier|public
specifier|static
specifier|final
name|WithGenericConstant
argument_list|<
name|String
argument_list|>
name|STRING_CONSTANT
init|=
operator|new
name|WithGenericConstant
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
DECL|method|WithGenericConstant ()
specifier|private
name|WithGenericConstant
parameter_list|()
block|{}
block|}
DECL|class|WithNullConstant
specifier|public
specifier|static
class|class
name|WithNullConstant
block|{
DECL|field|NULL
specifier|public
specifier|static
specifier|final
name|WithNullConstant
name|NULL
init|=
literal|null
decl_stmt|;
DECL|method|WithNullConstant ()
specifier|private
name|WithNullConstant
parameter_list|()
block|{}
block|}
DECL|class|WithPublicConstructorAndConstant
specifier|public
specifier|static
class|class
name|WithPublicConstructorAndConstant
block|{
DECL|field|INSTANCE
specifier|public
specifier|static
specifier|final
name|WithPublicConstructorAndConstant
name|INSTANCE
init|=
operator|new
name|WithPublicConstructorAndConstant
argument_list|()
decl_stmt|;
DECL|method|WithPublicConstructorAndConstant ()
specifier|public
name|WithPublicConstructorAndConstant
parameter_list|()
block|{}
block|}
DECL|class|WithPublicConstants
specifier|private
specifier|static
class|class
name|WithPublicConstants
block|{
DECL|field|FIRST
specifier|public
specifier|static
specifier|final
name|WithPublicConstants
name|FIRST
init|=
operator|new
name|WithPublicConstants
argument_list|()
decl_stmt|;
comment|// To test that we pick the first constant alphabetically
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
DECL|field|SECOND
specifier|public
specifier|static
specifier|final
name|WithPublicConstants
name|SECOND
init|=
operator|new
name|WithPublicConstants
argument_list|()
decl_stmt|;
block|}
DECL|class|FirstConstantIsNull
specifier|private
specifier|static
class|class
name|FirstConstantIsNull
block|{
comment|// To test that null constant is ignored
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
DECL|field|FIRST
specifier|public
specifier|static
specifier|final
name|FirstConstantIsNull
name|FIRST
init|=
literal|null
decl_stmt|;
DECL|field|SECOND
specifier|public
specifier|static
specifier|final
name|FirstConstantIsNull
name|SECOND
init|=
operator|new
name|FirstConstantIsNull
argument_list|()
decl_stmt|;
block|}
DECL|class|NonFinalFieldIgnored
specifier|public
specifier|static
class|class
name|NonFinalFieldIgnored
block|{
DECL|field|instance
specifier|public
specifier|static
name|NonFinalFieldIgnored
name|instance
init|=
operator|new
name|NonFinalFieldIgnored
argument_list|()
decl_stmt|;
DECL|method|NonFinalFieldIgnored ()
specifier|private
name|NonFinalFieldIgnored
parameter_list|()
block|{}
block|}
DECL|class|NonPublicConstantIgnored
specifier|public
specifier|static
class|class
name|NonPublicConstantIgnored
block|{
DECL|field|INSTANCE
specifier|static
specifier|final
name|NonPublicConstantIgnored
name|INSTANCE
init|=
operator|new
name|NonPublicConstantIgnored
argument_list|()
decl_stmt|;
DECL|method|NonPublicConstantIgnored ()
specifier|private
name|NonPublicConstantIgnored
parameter_list|()
block|{}
block|}
DECL|class|NonStaticFieldIgnored
specifier|public
specifier|static
class|class
name|NonStaticFieldIgnored
block|{
comment|// This should cause infinite recursion. But it shouldn't be used anyway.
DECL|field|instance
specifier|public
specifier|final
name|NonStaticFieldIgnored
name|instance
init|=
operator|new
name|NonStaticFieldIgnored
argument_list|()
decl_stmt|;
DECL|method|NonStaticFieldIgnored ()
specifier|private
name|NonStaticFieldIgnored
parameter_list|()
block|{}
block|}
block|}
end_class

end_unit

