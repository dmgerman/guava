begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2008 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.collect.testing
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|features
operator|.
name|MapFeature
operator|.
name|ALLOWS_NULL_KEYS
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|features
operator|.
name|MapFeature
operator|.
name|ALLOWS_NULL_VALUES
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|features
operator|.
name|CollectionFeature
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|features
operator|.
name|CollectionSize
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|features
operator|.
name|Feature
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|features
operator|.
name|MapFeature
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|reflect
operator|.
name|Reflection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationHandler
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationTargetException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|AbstractMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|AbstractSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestSuite
import|;
end_import

begin_comment
comment|/**  * Tests {@link MapTestSuiteBuilder} by using it against maps that have various negative behaviors.  *  * @author George van den Driessche  */
end_comment

begin_class
DECL|class|MapTestSuiteBuilderTests
specifier|public
specifier|final
class|class
name|MapTestSuiteBuilderTests
extends|extends
name|TestCase
block|{
DECL|method|MapTestSuiteBuilderTests ()
specifier|private
name|MapTestSuiteBuilderTests
parameter_list|()
block|{}
DECL|method|suite ()
specifier|public
specifier|static
name|Test
name|suite
parameter_list|()
block|{
name|TestSuite
name|suite
init|=
operator|new
name|TestSuite
argument_list|(
name|MapTestSuiteBuilderTests
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
argument_list|)
decl_stmt|;
name|suite
operator|.
name|addTest
argument_list|(
name|testsForHashMapNullKeysForbidden
argument_list|()
argument_list|)
expr_stmt|;
name|suite
operator|.
name|addTest
argument_list|(
name|testsForHashMapNullValuesForbidden
argument_list|()
argument_list|)
expr_stmt|;
name|suite
operator|.
name|addTest
argument_list|(
name|testsForSetUpTearDown
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|suite
return|;
block|}
DECL|class|WrappedHashMapGenerator
specifier|private
specifier|abstract
specifier|static
class|class
name|WrappedHashMapGenerator
extends|extends
name|TestStringMapGenerator
block|{
annotation|@
name|Override
DECL|method|create (Entry<String, String>[] entries)
specifier|protected
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|create
parameter_list|(
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
index|[]
name|entries
parameter_list|)
block|{
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|entries
control|)
block|{
name|map
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|wrap
argument_list|(
name|map
argument_list|)
return|;
block|}
DECL|method|wrap (HashMap<String, String> map)
specifier|abstract
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|wrap
parameter_list|(
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
parameter_list|)
function_decl|;
block|}
DECL|method|wrappedHashMapTests ( WrappedHashMapGenerator generator, String name, Feature<?>... features)
specifier|private
specifier|static
name|TestSuite
name|wrappedHashMapTests
parameter_list|(
name|WrappedHashMapGenerator
name|generator
parameter_list|,
name|String
name|name
parameter_list|,
name|Feature
argument_list|<
name|?
argument_list|>
modifier|...
name|features
parameter_list|)
block|{
name|List
argument_list|<
name|Feature
argument_list|<
name|?
argument_list|>
argument_list|>
name|featuresList
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|features
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|addAll
argument_list|(
name|featuresList
argument_list|,
name|MapFeature
operator|.
name|GENERAL_PURPOSE
argument_list|,
name|CollectionFeature
operator|.
name|SUPPORTS_ITERATOR_REMOVE
argument_list|,
name|CollectionSize
operator|.
name|ANY
argument_list|)
expr_stmt|;
return|return
name|MapTestSuiteBuilder
operator|.
name|using
argument_list|(
name|generator
argument_list|)
operator|.
name|named
argument_list|(
name|name
argument_list|)
operator|.
name|withFeatures
argument_list|(
name|featuresList
argument_list|)
operator|.
name|createTestSuite
argument_list|()
return|;
block|}
comment|// TODO: consider being null-hostile in these tests
DECL|method|testsForHashMapNullKeysForbidden ()
specifier|private
specifier|static
name|Test
name|testsForHashMapNullKeysForbidden
parameter_list|()
block|{
return|return
name|wrappedHashMapTests
argument_list|(
operator|new
name|WrappedHashMapGenerator
argument_list|()
block|{
annotation|@
name|Override
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|wrap
parameter_list|(
specifier|final
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
parameter_list|)
block|{
if|if
condition|(
name|map
operator|.
name|containsKey
argument_list|(
literal|null
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|()
throw|;
block|}
return|return
operator|new
name|AbstractMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|entrySet
parameter_list|()
block|{
return|return
name|map
operator|.
name|entrySet
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|put
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|value
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|key
argument_list|)
expr_stmt|;
return|return
name|map
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
return|;
block|}
block|}
return|;
block|}
block|}
argument_list|,
literal|"HashMap w/out null keys"
argument_list|,
name|ALLOWS_NULL_VALUES
argument_list|)
return|;
block|}
DECL|method|testsForHashMapNullValuesForbidden ()
specifier|private
specifier|static
name|Test
name|testsForHashMapNullValuesForbidden
parameter_list|()
block|{
return|return
name|wrappedHashMapTests
argument_list|(
operator|new
name|WrappedHashMapGenerator
argument_list|()
block|{
annotation|@
name|Override
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|wrap
parameter_list|(
specifier|final
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
parameter_list|)
block|{
if|if
condition|(
name|map
operator|.
name|containsValue
argument_list|(
literal|null
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|()
throw|;
block|}
return|return
operator|new
name|AbstractMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|entrySet
parameter_list|()
block|{
return|return
operator|new
name|EntrySet
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|map
operator|.
name|hashCode
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
return|return
name|map
operator|.
name|equals
argument_list|(
name|o
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|map
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|remove
parameter_list|(
name|Object
name|key
parameter_list|)
block|{
return|return
name|map
operator|.
name|remove
argument_list|(
name|key
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|remove
parameter_list|(
name|Object
name|key
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
return|return
name|map
operator|.
name|remove
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
return|;
block|}
class|class
name|EntrySet
extends|extends
name|AbstractSet
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
operator|new
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
argument_list|()
block|{
specifier|final
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|iterator
init|=
name|map
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|remove
parameter_list|()
block|{
name|iterator
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|iterator
operator|.
name|hasNext
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|next
parameter_list|()
block|{
return|return
name|transform
argument_list|(
name|iterator
operator|.
name|next
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|transform
parameter_list|(
specifier|final
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|next
parameter_list|)
block|{
return|return
operator|new
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|setValue
parameter_list|(
name|String
name|value
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|value
argument_list|)
expr_stmt|;
return|return
name|next
operator|.
name|setValue
argument_list|(
name|value
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getValue
parameter_list|()
block|{
return|return
name|next
operator|.
name|getValue
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getKey
parameter_list|()
block|{
return|return
name|next
operator|.
name|getKey
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
return|return
name|next
operator|.
name|equals
argument_list|(
name|obj
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|next
operator|.
name|hashCode
argument_list|()
return|;
block|}
block|}
return|;
block|}
block|}
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|map
operator|.
name|size
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|remove
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
return|return
name|map
operator|.
name|entrySet
argument_list|()
operator|.
name|remove
argument_list|(
name|o
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|removeIf
parameter_list|(
name|Predicate
argument_list|<
name|?
super|super
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|filter
parameter_list|)
block|{
return|return
name|map
operator|.
name|entrySet
argument_list|()
operator|.
name|removeIf
argument_list|(
name|filter
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|containsAll
parameter_list|(
name|Collection
argument_list|<
name|?
argument_list|>
name|c
parameter_list|)
block|{
return|return
name|map
operator|.
name|entrySet
argument_list|()
operator|.
name|containsAll
argument_list|(
name|c
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|removeAll
parameter_list|(
name|Collection
argument_list|<
name|?
argument_list|>
name|c
parameter_list|)
block|{
return|return
name|map
operator|.
name|entrySet
argument_list|()
operator|.
name|removeAll
argument_list|(
name|c
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|retainAll
parameter_list|(
name|Collection
argument_list|<
name|?
argument_list|>
name|c
parameter_list|)
block|{
return|return
name|map
operator|.
name|entrySet
argument_list|()
operator|.
name|retainAll
argument_list|(
name|c
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|map
operator|.
name|entrySet
argument_list|()
operator|.
name|hashCode
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
return|return
name|map
operator|.
name|entrySet
argument_list|()
operator|.
name|equals
argument_list|(
name|o
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|map
operator|.
name|entrySet
argument_list|()
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|put
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|value
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|value
argument_list|)
expr_stmt|;
return|return
name|map
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
return|;
block|}
block|}
return|;
block|}
block|}
argument_list|,
literal|"HashMap w/out null values"
argument_list|,
name|ALLOWS_NULL_KEYS
argument_list|)
return|;
block|}
comment|/**    * Map generator that verifies that {@code setUp()} methods are called in all the test cases. The    * {@code setUpRan} parameter is set true by the {@code setUp} that every test case is supposed to    * have registered, and set false by the {@code tearDown}. We use a dynamic proxy to intercept all    * of the {@code Map} method calls and check that {@code setUpRan} is true.    */
DECL|class|CheckSetUpHashMapGenerator
specifier|private
specifier|static
class|class
name|CheckSetUpHashMapGenerator
extends|extends
name|WrappedHashMapGenerator
block|{
DECL|field|setUpRan
specifier|private
specifier|final
name|AtomicBoolean
name|setUpRan
decl_stmt|;
DECL|method|CheckSetUpHashMapGenerator (AtomicBoolean setUpRan)
name|CheckSetUpHashMapGenerator
parameter_list|(
name|AtomicBoolean
name|setUpRan
parameter_list|)
block|{
name|this
operator|.
name|setUpRan
operator|=
name|setUpRan
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|wrap (HashMap<String, String> map)
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|wrap
parameter_list|(
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
parameter_list|)
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|proxy
init|=
name|Reflection
operator|.
name|newProxy
argument_list|(
name|Map
operator|.
name|class
argument_list|,
operator|new
name|CheckSetUpInvocationHandler
argument_list|(
name|map
argument_list|,
name|setUpRan
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|proxy
return|;
block|}
block|}
comment|/**    * Intercepts calls to a {@code Map} to check that {@code setUpRan} is true when they happen. Then    * forwards the calls to the underlying {@code Map}.    */
DECL|class|CheckSetUpInvocationHandler
specifier|private
specifier|static
class|class
name|CheckSetUpInvocationHandler
implements|implements
name|InvocationHandler
implements|,
name|Serializable
block|{
DECL|field|map
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
decl_stmt|;
DECL|field|setUpRan
specifier|private
specifier|final
name|AtomicBoolean
name|setUpRan
decl_stmt|;
DECL|method|CheckSetUpInvocationHandler (Map<String, String> map, AtomicBoolean setUpRan)
name|CheckSetUpInvocationHandler
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
parameter_list|,
name|AtomicBoolean
name|setUpRan
parameter_list|)
block|{
name|this
operator|.
name|map
operator|=
name|map
expr_stmt|;
name|this
operator|.
name|setUpRan
operator|=
name|setUpRan
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|invoke (Object target, Method method, Object[] args)
specifier|public
name|Object
name|invoke
parameter_list|(
name|Object
name|target
parameter_list|,
name|Method
name|method
parameter_list|,
name|Object
index|[]
name|args
parameter_list|)
throws|throws
name|Throwable
block|{
name|assertTrue
argument_list|(
literal|"setUp should have run"
argument_list|,
name|setUpRan
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
return|return
name|method
operator|.
name|invoke
argument_list|(
name|map
argument_list|,
name|args
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|InvocationTargetException
name|e
parameter_list|)
block|{
throw|throw
name|e
operator|.
name|getCause
argument_list|()
throw|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
name|e
parameter_list|)
block|{
throw|throw
name|newLinkageError
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
comment|/** Verifies that {@code setUp} and {@code tearDown} are called in all map test cases. */
DECL|method|testsForSetUpTearDown ()
specifier|private
specifier|static
name|Test
name|testsForSetUpTearDown
parameter_list|()
block|{
specifier|final
name|AtomicBoolean
name|setUpRan
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
name|Runnable
name|setUp
init|=
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|assertFalse
argument_list|(
literal|"previous tearDown should have run before setUp"
argument_list|,
name|setUpRan
operator|.
name|getAndSet
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|Runnable
name|tearDown
init|=
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|assertTrue
argument_list|(
literal|"setUp should have run"
argument_list|,
name|setUpRan
operator|.
name|getAndSet
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
return|return
name|MapTestSuiteBuilder
operator|.
name|using
argument_list|(
operator|new
name|CheckSetUpHashMapGenerator
argument_list|(
name|setUpRan
argument_list|)
argument_list|)
operator|.
name|named
argument_list|(
literal|"setUpTearDown"
argument_list|)
operator|.
name|withFeatures
argument_list|(
name|MapFeature
operator|.
name|GENERAL_PURPOSE
argument_list|,
name|MapFeature
operator|.
name|ALLOWS_NULL_KEYS
argument_list|,
name|MapFeature
operator|.
name|ALLOWS_NULL_VALUES
argument_list|,
name|CollectionFeature
operator|.
name|SERIALIZABLE
argument_list|,
name|CollectionFeature
operator|.
name|SUPPORTS_ITERATOR_REMOVE
argument_list|,
name|CollectionSize
operator|.
name|ANY
argument_list|)
operator|.
name|withSetUp
argument_list|(
name|setUp
argument_list|)
operator|.
name|withTearDown
argument_list|(
name|tearDown
argument_list|)
operator|.
name|createTestSuite
argument_list|()
return|;
block|}
DECL|method|newLinkageError (Throwable cause)
specifier|private
specifier|static
name|LinkageError
name|newLinkageError
parameter_list|(
name|Throwable
name|cause
parameter_list|)
block|{
name|LinkageError
name|error
init|=
operator|new
name|LinkageError
argument_list|(
name|cause
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|error
operator|.
name|initCause
argument_list|(
name|cause
argument_list|)
expr_stmt|;
return|return
name|error
return|;
block|}
block|}
end_class

end_unit

