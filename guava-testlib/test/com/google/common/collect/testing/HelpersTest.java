begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2008 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.collect.testing
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|Helpers
operator|.
name|NullsBeforeB
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|Helpers
operator|.
name|testComparator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtCompatible
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|AssertionFailedError
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * Unit test for {@link Helpers}.  *  * @author Chris Povirk  */
end_comment

begin_class
annotation|@
name|GwtCompatible
DECL|class|HelpersTest
specifier|public
class|class
name|HelpersTest
extends|extends
name|TestCase
block|{
DECL|method|testNullsBeforeB ()
specifier|public
name|void
name|testNullsBeforeB
parameter_list|()
block|{
name|testComparator
argument_list|(
name|NullsBeforeB
operator|.
name|INSTANCE
argument_list|,
literal|"a"
argument_list|,
literal|"azzzzzz"
argument_list|,
literal|null
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|)
expr_stmt|;
block|}
DECL|method|testIsEmpty_iterable ()
specifier|public
name|void
name|testIsEmpty_iterable
parameter_list|()
block|{
name|List
argument_list|<
name|Object
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|Helpers
operator|.
name|assertEmpty
argument_list|(
name|list
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
literal|"a"
argument_list|)
expr_stmt|;
try|try
block|{
name|Helpers
operator|.
name|assertEmpty
argument_list|(
name|list
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|Error
argument_list|()
throw|;
block|}
catch|catch
parameter_list|(
name|AssertionFailedError
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testIsEmpty_map ()
specifier|public
name|void
name|testIsEmpty_map
parameter_list|()
block|{
name|Map
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|Helpers
operator|.
name|assertEmpty
argument_list|(
name|map
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
expr_stmt|;
try|try
block|{
name|Helpers
operator|.
name|assertEmpty
argument_list|(
name|map
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|Error
argument_list|()
throw|;
block|}
catch|catch
parameter_list|(
name|AssertionFailedError
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testAssertEqualInOrder ()
specifier|public
name|void
name|testAssertEqualInOrder
parameter_list|()
block|{
name|List
argument_list|<
name|?
argument_list|>
name|list
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|)
decl_stmt|;
name|Helpers
operator|.
name|assertEqualInOrder
argument_list|(
name|list
argument_list|,
name|list
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|?
argument_list|>
name|fewer
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
decl_stmt|;
try|try
block|{
name|Helpers
operator|.
name|assertEqualInOrder
argument_list|(
name|list
argument_list|,
name|fewer
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|Error
argument_list|()
throw|;
block|}
catch|catch
parameter_list|(
name|AssertionFailedError
name|expected
parameter_list|)
block|{     }
try|try
block|{
name|Helpers
operator|.
name|assertEqualInOrder
argument_list|(
name|fewer
argument_list|,
name|list
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|Error
argument_list|()
throw|;
block|}
catch|catch
parameter_list|(
name|AssertionFailedError
name|expected
parameter_list|)
block|{     }
name|List
argument_list|<
name|?
argument_list|>
name|differentOrder
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"a"
argument_list|,
literal|"c"
argument_list|,
literal|"b"
argument_list|)
decl_stmt|;
try|try
block|{
name|Helpers
operator|.
name|assertEqualInOrder
argument_list|(
name|list
argument_list|,
name|differentOrder
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|Error
argument_list|()
throw|;
block|}
catch|catch
parameter_list|(
name|AssertionFailedError
name|expected
parameter_list|)
block|{     }
name|List
argument_list|<
name|?
argument_list|>
name|differentContents
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"C"
argument_list|)
decl_stmt|;
try|try
block|{
name|Helpers
operator|.
name|assertEqualInOrder
argument_list|(
name|list
argument_list|,
name|differentContents
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|Error
argument_list|()
throw|;
block|}
catch|catch
parameter_list|(
name|AssertionFailedError
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testAssertContentsInOrder ()
specifier|public
name|void
name|testAssertContentsInOrder
parameter_list|()
block|{
name|List
argument_list|<
name|?
argument_list|>
name|list
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|)
decl_stmt|;
name|Helpers
operator|.
name|assertContentsInOrder
argument_list|(
name|list
argument_list|,
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|)
expr_stmt|;
try|try
block|{
name|Helpers
operator|.
name|assertContentsInOrder
argument_list|(
name|list
argument_list|,
literal|"a"
argument_list|,
literal|"b"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|Error
argument_list|()
throw|;
block|}
catch|catch
parameter_list|(
name|AssertionFailedError
name|expected
parameter_list|)
block|{     }
try|try
block|{
name|Helpers
operator|.
name|assertContentsInOrder
argument_list|(
name|list
argument_list|,
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|,
literal|"d"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|Error
argument_list|()
throw|;
block|}
catch|catch
parameter_list|(
name|AssertionFailedError
name|expected
parameter_list|)
block|{     }
try|try
block|{
name|Helpers
operator|.
name|assertContentsInOrder
argument_list|(
name|list
argument_list|,
literal|"a"
argument_list|,
literal|"c"
argument_list|,
literal|"b"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|Error
argument_list|()
throw|;
block|}
catch|catch
parameter_list|(
name|AssertionFailedError
name|expected
parameter_list|)
block|{     }
try|try
block|{
name|Helpers
operator|.
name|assertContentsInOrder
argument_list|(
name|list
argument_list|,
literal|"a"
argument_list|,
literal|"B"
argument_list|,
literal|"c"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|Error
argument_list|()
throw|;
block|}
catch|catch
parameter_list|(
name|AssertionFailedError
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testAssertContains ()
specifier|public
name|void
name|testAssertContains
parameter_list|()
block|{
name|List
argument_list|<
name|?
argument_list|>
name|list
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
decl_stmt|;
name|Helpers
operator|.
name|assertContains
argument_list|(
name|list
argument_list|,
literal|"a"
argument_list|)
expr_stmt|;
name|Helpers
operator|.
name|assertContains
argument_list|(
name|list
argument_list|,
literal|"b"
argument_list|)
expr_stmt|;
try|try
block|{
name|Helpers
operator|.
name|assertContains
argument_list|(
name|list
argument_list|,
literal|"c"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|Error
argument_list|()
throw|;
block|}
catch|catch
parameter_list|(
name|AssertionFailedError
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testAssertContainsAllOf ()
specifier|public
name|void
name|testAssertContainsAllOf
parameter_list|()
block|{
name|List
argument_list|<
name|?
argument_list|>
name|list
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"a"
argument_list|,
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|)
decl_stmt|;
name|Helpers
operator|.
name|assertContainsAllOf
argument_list|(
name|list
argument_list|,
literal|"a"
argument_list|)
expr_stmt|;
name|Helpers
operator|.
name|assertContainsAllOf
argument_list|(
name|list
argument_list|,
literal|"a"
argument_list|,
literal|"a"
argument_list|)
expr_stmt|;
name|Helpers
operator|.
name|assertContainsAllOf
argument_list|(
name|list
argument_list|,
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|)
expr_stmt|;
name|Helpers
operator|.
name|assertContainsAllOf
argument_list|(
name|list
argument_list|,
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|,
literal|"a"
argument_list|)
expr_stmt|;
try|try
block|{
name|Helpers
operator|.
name|assertContainsAllOf
argument_list|(
name|list
argument_list|,
literal|"d"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|Error
argument_list|()
throw|;
block|}
catch|catch
parameter_list|(
name|AssertionFailedError
name|expected
parameter_list|)
block|{     }
try|try
block|{
name|Helpers
operator|.
name|assertContainsAllOf
argument_list|(
name|list
argument_list|,
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|,
literal|"d"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|Error
argument_list|()
throw|;
block|}
catch|catch
parameter_list|(
name|AssertionFailedError
name|expected
parameter_list|)
block|{     }
try|try
block|{
name|Helpers
operator|.
name|assertContainsAllOf
argument_list|(
name|list
argument_list|,
literal|"a"
argument_list|,
literal|"a"
argument_list|,
literal|"a"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|Error
argument_list|()
throw|;
block|}
catch|catch
parameter_list|(
name|AssertionFailedError
name|expected
parameter_list|)
block|{     }
block|}
block|}
end_class

end_unit

