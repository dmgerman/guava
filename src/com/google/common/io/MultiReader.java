begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2008 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.io
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|io
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Reader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_comment
comment|/**  * A {@link Reader} that will concatenates multiple readers  *  * @author Bin Zhu  * @since 1  */
end_comment

begin_class
DECL|class|MultiReader
class|class
name|MultiReader
extends|extends
name|Reader
block|{
DECL|field|it
specifier|private
specifier|final
name|Iterator
argument_list|<
name|?
extends|extends
name|InputSupplier
argument_list|<
name|?
extends|extends
name|Reader
argument_list|>
argument_list|>
name|it
decl_stmt|;
DECL|field|current
specifier|private
name|Reader
name|current
decl_stmt|;
DECL|method|MultiReader (Iterator<? extends InputSupplier<? extends Reader>> readers)
name|MultiReader
parameter_list|(
name|Iterator
argument_list|<
name|?
extends|extends
name|InputSupplier
argument_list|<
name|?
extends|extends
name|Reader
argument_list|>
argument_list|>
name|readers
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|it
operator|=
name|readers
expr_stmt|;
name|advance
argument_list|()
expr_stmt|;
block|}
comment|/**    * Closes the current reader and opens the next one, if any.    */
DECL|method|advance ()
specifier|private
name|void
name|advance
parameter_list|()
throws|throws
name|IOException
block|{
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|current
operator|=
name|it
operator|.
name|next
argument_list|()
operator|.
name|getInput
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|read (char cbuf[], int off, int len)
annotation|@
name|Override
specifier|public
name|int
name|read
parameter_list|(
name|char
name|cbuf
index|[]
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|current
operator|==
literal|null
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
name|int
name|result
init|=
name|current
operator|.
name|read
argument_list|(
name|cbuf
argument_list|,
name|off
argument_list|,
name|len
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|==
operator|-
literal|1
condition|)
block|{
name|advance
argument_list|()
expr_stmt|;
return|return
name|read
argument_list|(
name|cbuf
argument_list|,
name|off
argument_list|,
name|len
argument_list|)
return|;
block|}
return|return
name|result
return|;
block|}
DECL|method|skip (long n)
annotation|@
name|Override
specifier|public
name|long
name|skip
parameter_list|(
name|long
name|n
parameter_list|)
throws|throws
name|IOException
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|n
operator|>=
literal|0
argument_list|,
literal|"n is negative"
argument_list|)
expr_stmt|;
if|if
condition|(
name|n
operator|>
literal|0
condition|)
block|{
while|while
condition|(
name|current
operator|!=
literal|null
condition|)
block|{
name|long
name|result
init|=
name|current
operator|.
name|skip
argument_list|(
name|n
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|>
literal|0
condition|)
block|{
return|return
name|result
return|;
block|}
name|advance
argument_list|()
expr_stmt|;
block|}
block|}
return|return
literal|0
return|;
block|}
DECL|method|ready ()
annotation|@
name|Override
specifier|public
name|boolean
name|ready
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|(
name|current
operator|!=
literal|null
operator|)
operator|&&
name|current
operator|.
name|ready
argument_list|()
return|;
block|}
DECL|method|close ()
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|current
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|current
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|current
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

