begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2007 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.io
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|io
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|Beta
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|primitives
operator|.
name|Ints
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|primitives
operator|.
name|Longs
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|EOFException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FilterInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_comment
comment|/**  * An implementation of {@link DataInput} that uses little-endian byte ordering  * for reading {@code short}, {@code int}, {@code float}, {@code double}, and  * {@code long} values.  *<p>  *<b>Note:</b> This class intentionally violates the specification of its  * supertype {@code DataInput}, which explicitly requires big-endian byte order.  *  * @author chrisn@google.com (Chris Nokleberg)  * @author kbottner@google.com (Keith Bottner)  * @since Guava release 08  */
end_comment

begin_class
annotation|@
name|Beta
DECL|class|LittleEndianDataInputStream
specifier|public
specifier|final
class|class
name|LittleEndianDataInputStream
extends|extends
name|FilterInputStream
implements|implements
name|DataInput
block|{
comment|/**    * Creates a {@code LittleEndianDataInputStream} that wraps the given stream.    *    * @param in the stream to delegate to    */
DECL|method|LittleEndianDataInputStream (InputStream in)
specifier|public
name|LittleEndianDataInputStream
parameter_list|(
name|InputStream
name|in
parameter_list|)
block|{
name|super
argument_list|(
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|in
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * This method will throw a {@link UnsupportedOperationException}.    */
annotation|@
name|Override
DECL|method|readLine ()
specifier|public
name|String
name|readLine
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"readLine is not supported"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|readFully (byte[] b)
specifier|public
name|void
name|readFully
parameter_list|(
name|byte
index|[]
name|b
parameter_list|)
throws|throws
name|IOException
block|{
name|ByteStreams
operator|.
name|readFully
argument_list|(
name|this
argument_list|,
name|b
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|readFully (byte[] b, int off, int len)
specifier|public
name|void
name|readFully
parameter_list|(
name|byte
index|[]
name|b
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
name|ByteStreams
operator|.
name|readFully
argument_list|(
name|this
argument_list|,
name|b
argument_list|,
name|off
argument_list|,
name|len
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|skipBytes (int n)
specifier|public
name|int
name|skipBytes
parameter_list|(
name|int
name|n
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|(
name|int
operator|)
name|in
operator|.
name|skip
argument_list|(
name|n
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|readUnsignedByte ()
specifier|public
name|int
name|readUnsignedByte
parameter_list|()
throws|throws
name|IOException
block|{
name|int
name|b1
init|=
name|in
operator|.
name|read
argument_list|()
decl_stmt|;
if|if
condition|(
literal|0
operator|>
name|b1
condition|)
block|{
throw|throw
operator|new
name|EOFException
argument_list|()
throw|;
block|}
return|return
name|b1
return|;
block|}
comment|/**    * Reads an unsigned {@code short} as specified by    * {@link DataInputStream#readUnsignedShort()}, except using little-endian    * byte order.    *    * @return the next two bytes of the input stream, interpreted as an {@code    *         int} in little-endian byte order    * @throws IOException if an I/O error occurs    */
annotation|@
name|Override
DECL|method|readUnsignedShort ()
specifier|public
name|int
name|readUnsignedShort
parameter_list|()
throws|throws
name|IOException
block|{
name|byte
name|b1
init|=
name|readAndCheckByte
argument_list|()
decl_stmt|;
name|byte
name|b2
init|=
name|readAndCheckByte
argument_list|()
decl_stmt|;
return|return
name|Ints
operator|.
name|fromBytes
argument_list|(
operator|(
name|byte
operator|)
literal|0
argument_list|,
operator|(
name|byte
operator|)
literal|0
argument_list|,
name|b2
argument_list|,
name|b1
argument_list|)
return|;
block|}
comment|/**    * Reads an integer as specified by {@link DataInputStream#readInt()}, except    * using little-endian byte order.    *    * @return the next four bytes of the input stream, interpreted as an {@code    *         int} in little-endian byte order    * @throws IOException if an I/O error occurs    */
annotation|@
name|Override
DECL|method|readInt ()
specifier|public
name|int
name|readInt
parameter_list|()
throws|throws
name|IOException
block|{
name|byte
name|b1
init|=
name|readAndCheckByte
argument_list|()
decl_stmt|;
name|byte
name|b2
init|=
name|readAndCheckByte
argument_list|()
decl_stmt|;
name|byte
name|b3
init|=
name|readAndCheckByte
argument_list|()
decl_stmt|;
name|byte
name|b4
init|=
name|readAndCheckByte
argument_list|()
decl_stmt|;
return|return
name|Ints
operator|.
name|fromBytes
argument_list|(
name|b4
argument_list|,
name|b3
argument_list|,
name|b2
argument_list|,
name|b1
argument_list|)
return|;
block|}
comment|/**    * Reads a {@code long} as specified by {@link DataInputStream#readLong()},    * except using little-endian byte order.    *    * @return the next eight bytes of the input stream, interpreted as a {@code    *         long} in little-endian byte order    * @throws IOException if an I/O error occurs    */
annotation|@
name|Override
DECL|method|readLong ()
specifier|public
name|long
name|readLong
parameter_list|()
throws|throws
name|IOException
block|{
name|byte
name|b1
init|=
name|readAndCheckByte
argument_list|()
decl_stmt|;
name|byte
name|b2
init|=
name|readAndCheckByte
argument_list|()
decl_stmt|;
name|byte
name|b3
init|=
name|readAndCheckByte
argument_list|()
decl_stmt|;
name|byte
name|b4
init|=
name|readAndCheckByte
argument_list|()
decl_stmt|;
name|byte
name|b5
init|=
name|readAndCheckByte
argument_list|()
decl_stmt|;
name|byte
name|b6
init|=
name|readAndCheckByte
argument_list|()
decl_stmt|;
name|byte
name|b7
init|=
name|readAndCheckByte
argument_list|()
decl_stmt|;
name|byte
name|b8
init|=
name|readAndCheckByte
argument_list|()
decl_stmt|;
return|return
name|Longs
operator|.
name|fromBytes
argument_list|(
name|b8
argument_list|,
name|b7
argument_list|,
name|b6
argument_list|,
name|b5
argument_list|,
name|b4
argument_list|,
name|b3
argument_list|,
name|b2
argument_list|,
name|b1
argument_list|)
return|;
block|}
comment|/**    * Reads a {@code float} as specified by {@link DataInputStream#readFloat()},    * except using little-endian byte order.    *    * @return the next four bytes of the input stream, interpreted as an {@code    *         float} in little-endian byte order    * @throws IOException if an I/O error occurs    */
annotation|@
name|Override
DECL|method|readFloat ()
specifier|public
name|float
name|readFloat
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|Float
operator|.
name|intBitsToFloat
argument_list|(
name|readInt
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Reads a {@code double} as specified by    * {@link DataInputStream#readDouble()}, except using little-endian byte    * order.    *    * @return the next eight bytes of the input stream, interpreted as an {@code    *         int} in little-endian byte order    * @throws IOException if an I/O error occurs    */
annotation|@
name|Override
DECL|method|readDouble ()
specifier|public
name|double
name|readDouble
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|Double
operator|.
name|longBitsToDouble
argument_list|(
name|readLong
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|readUTF ()
specifier|public
name|String
name|readUTF
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|new
name|DataInputStream
argument_list|(
name|in
argument_list|)
operator|.
name|readUTF
argument_list|()
return|;
block|}
comment|/**    * Reads a {@code short} as specified by {@link DataInputStream#readShort()},    * except using little-endian byte order.    *    * @return the next two bytes of the input stream, interpreted as an {@code    *         short} in little-endian byte order.    * @throws IOException if an I/O error occurs.    */
annotation|@
name|Override
DECL|method|readShort ()
specifier|public
name|short
name|readShort
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|(
name|short
operator|)
name|readUnsignedShort
argument_list|()
return|;
block|}
comment|/**    * Reads a char as specified by {@link DataInputStream#readChar()}, except    * using little-endian byte order.    *    * @return the next two bytes of the input stream, interpreted as an {@code    *         char} in little-endian byte order    * @throws IOException if an I/O error occurs    */
annotation|@
name|Override
DECL|method|readChar ()
specifier|public
name|char
name|readChar
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|(
name|char
operator|)
name|readUnsignedShort
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|readByte ()
specifier|public
name|byte
name|readByte
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|(
name|byte
operator|)
name|readUnsignedByte
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|readBoolean ()
specifier|public
name|boolean
name|readBoolean
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|readUnsignedByte
argument_list|()
operator|!=
literal|0
return|;
block|}
comment|/**    * Reads a byte from the input stream checking that the end of file (EOF)    * has not been encountered.    *      * @return byte read from input    * @throws IOException if an error is encountered while reading    * @throws EOFException if the end of file (EOF) is encountered.    */
DECL|method|readAndCheckByte ()
specifier|private
name|byte
name|readAndCheckByte
parameter_list|()
throws|throws
name|IOException
throws|,
name|EOFException
block|{
name|int
name|b1
init|=
name|in
operator|.
name|read
argument_list|()
decl_stmt|;
if|if
condition|(
operator|-
literal|1
operator|==
name|b1
condition|)
block|{
throw|throw
operator|new
name|EOFException
argument_list|()
throw|;
block|}
return|return
operator|(
name|byte
operator|)
name|b1
return|;
block|}
block|}
end_class

end_unit

