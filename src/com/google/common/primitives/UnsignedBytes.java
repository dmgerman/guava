begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2009 Google Inc.  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.primitives
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|primitives
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkArgument
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_comment
comment|/**  * Static utility methods pertaining to {@code byte} primitives that interpret  * values as<i>unsigned</i> (that is, any negative value {@code b} is treated  * as the positive value {@code 256 + b}). The corresponding methods that treat  * the values as signed are found in {@link SignedBytes}, and the methods for  * which signedness is not an issue are in {@link Bytes}.  *  * @author Kevin Bourrillion  * @since 1  */
end_comment

begin_class
DECL|class|UnsignedBytes
specifier|public
specifier|final
class|class
name|UnsignedBytes
block|{
DECL|method|UnsignedBytes ()
specifier|private
name|UnsignedBytes
parameter_list|()
block|{}
comment|/**    * Returns the {@code byte} value that, when treated as unsigned, is equal to    * {@code value}, if possible.    *    * @param value a value between 0 and 255 inclusive    * @return the {@code byte} value that, when treated as unsigned, equals    *     {@code value}    * @throws IllegalArgumentException if {@code value} is negative or greater    *     than 255    */
DECL|method|checkedCast (long value)
specifier|public
specifier|static
name|byte
name|checkedCast
parameter_list|(
name|long
name|value
parameter_list|)
block|{
name|checkArgument
argument_list|(
name|value
operator|>>
literal|8
operator|==
literal|0
argument_list|,
literal|"out of range: %s"
argument_list|,
name|value
argument_list|)
expr_stmt|;
return|return
operator|(
name|byte
operator|)
name|value
return|;
block|}
comment|/**    * Returns the {@code byte} value that, when treated as unsigned, is nearest    * in value to {@code value}.    *    * @param value any {@code long} value    * @return {@code (byte) 255} if {@code value>= 255}, {@code (byte) 0} if    *     {@code value<= 0}, and {@code value} cast to {@code byte} otherwise    */
DECL|method|saturatedCast (long value)
specifier|public
specifier|static
name|byte
name|saturatedCast
parameter_list|(
name|long
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|>
literal|255
condition|)
block|{
return|return
operator|(
name|byte
operator|)
literal|255
return|;
comment|// -1
block|}
if|if
condition|(
name|value
operator|<
literal|0
condition|)
block|{
return|return
operator|(
name|byte
operator|)
literal|0
return|;
block|}
return|return
operator|(
name|byte
operator|)
name|value
return|;
block|}
comment|/**    * Compares the two specified {@code byte} values, treating them as unsigned    * values between 0 and 255 inclusive. For example, {@code (byte) -127} is    * considered greater than {@code (byte) 127} because it is seen as having    * the value of positive {@code 129}.    *    * @param a the first {@code byte} to compare    * @param b the second {@code byte} to compare    * @return a negative value if {@code a} is less than {@code b}; a positive    *     value if {@code a} is greater than {@code b}; or zero if they are equal    */
DECL|method|compare (byte a, byte b)
specifier|public
specifier|static
name|int
name|compare
parameter_list|(
name|byte
name|a
parameter_list|,
name|byte
name|b
parameter_list|)
block|{
return|return
operator|(
name|a
operator|&
literal|0xFF
operator|)
operator|-
operator|(
name|b
operator|&
literal|0xFF
operator|)
return|;
block|}
comment|/**    * Returns the least value present in {@code array}.    *    * @param array a<i>nonempty</i> array of {@code byte} values    * @return the value present in {@code array} that is less than or equal to    *     every other value in the array    * @throws IllegalArgumentException if {@code array} is empty    */
DECL|method|min (byte... array)
specifier|public
specifier|static
name|byte
name|min
parameter_list|(
name|byte
modifier|...
name|array
parameter_list|)
block|{
name|checkArgument
argument_list|(
name|array
operator|.
name|length
operator|>
literal|0
argument_list|)
expr_stmt|;
name|int
name|min
init|=
name|array
index|[
literal|0
index|]
operator|&
literal|0xFF
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|array
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|int
name|next
init|=
name|array
index|[
name|i
index|]
operator|&
literal|0xFF
decl_stmt|;
if|if
condition|(
name|next
operator|<
name|min
condition|)
block|{
name|min
operator|=
name|next
expr_stmt|;
block|}
block|}
return|return
operator|(
name|byte
operator|)
name|min
return|;
block|}
comment|/**    * Returns the greatest value present in {@code array}.    *    * @param array a<i>nonempty</i> array of {@code byte} values    * @return the value present in {@code array} that is greater than or equal    *     to every other value in the array    * @throws IllegalArgumentException if {@code array} is empty    */
DECL|method|max (byte... array)
specifier|public
specifier|static
name|byte
name|max
parameter_list|(
name|byte
modifier|...
name|array
parameter_list|)
block|{
name|checkArgument
argument_list|(
name|array
operator|.
name|length
operator|>
literal|0
argument_list|)
expr_stmt|;
name|int
name|max
init|=
name|array
index|[
literal|0
index|]
operator|&
literal|0xFF
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|array
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|int
name|next
init|=
name|array
index|[
name|i
index|]
operator|&
literal|0xFF
decl_stmt|;
if|if
condition|(
name|next
operator|>
name|max
condition|)
block|{
name|max
operator|=
name|next
expr_stmt|;
block|}
block|}
return|return
operator|(
name|byte
operator|)
name|max
return|;
block|}
comment|/**    * Returns a string containing the supplied {@code byte} values separated by    * {@code separator}. For example, {@code join(":", (byte) 1, (byte) 2,    * (byte) 255)} returns the string {@code "1:2:255"}.    *    * @param separator the text that should appear between consecutive values in    *     the resulting string (but not at the start or end)    * @param array an array of {@code byte} values, possibly empty    */
DECL|method|join (String separator, byte... array)
specifier|public
specifier|static
name|String
name|join
parameter_list|(
name|String
name|separator
parameter_list|,
name|byte
modifier|...
name|array
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|separator
argument_list|)
expr_stmt|;
if|if
condition|(
name|array
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return
literal|""
return|;
block|}
comment|// For pre-sizing a builder, just get the right order of magnitude
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|(
name|array
operator|.
name|length
operator|*
literal|5
argument_list|)
decl_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|array
index|[
literal|0
index|]
operator|&
literal|0xFF
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|array
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|builder
operator|.
name|append
argument_list|(
name|separator
argument_list|)
operator|.
name|append
argument_list|(
name|array
index|[
name|i
index|]
operator|&
literal|0xFF
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * Returns a comparator that compares two {@code byte} arrays    * lexicographically. That is, it compares, using {@link    * #compare(byte, byte)}), the first pair of values that follow any common    * prefix, or when one array is a prefix of the other, treats the shorter    * array as the lesser. For example, {@code []< [0x01]< [0x01, 0x7F]<    * [0x01, 0x80]< [0x02]}. Values are treated as unsigned.    *    *<p>The returned comparator is inconsistent with {@link    * Object#equals(Object)} (since arrays support only identity equality), but    * it is consistent with {@link java.util.Arrays#equals(byte[], byte[])}.    *    * @see<a href="http://en.wikipedia.org/wiki/Lexicographical_order">    *     Lexicographical order</a> article at Wikipedia    * @since 2    */
DECL|method|lexicographicalComparator ()
specifier|public
specifier|static
name|Comparator
argument_list|<
name|byte
index|[]
argument_list|>
name|lexicographicalComparator
parameter_list|()
block|{
return|return
name|LexicographicalComparator
operator|.
name|INSTANCE
return|;
block|}
DECL|enum|LexicographicalComparator
specifier|private
enum|enum
name|LexicographicalComparator
implements|implements
name|Comparator
argument_list|<
name|byte
index|[]
argument_list|>
block|{
DECL|enumConstant|INSTANCE
name|INSTANCE
block|;
DECL|method|compare (byte[] left, byte[] right)
specifier|public
name|int
name|compare
parameter_list|(
name|byte
index|[]
name|left
parameter_list|,
name|byte
index|[]
name|right
parameter_list|)
block|{
name|int
name|minLength
init|=
name|Math
operator|.
name|min
argument_list|(
name|left
operator|.
name|length
argument_list|,
name|right
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|minLength
condition|;
name|i
operator|++
control|)
block|{
name|int
name|result
init|=
name|UnsignedBytes
operator|.
name|compare
argument_list|(
name|left
index|[
name|i
index|]
argument_list|,
name|right
index|[
name|i
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|!=
literal|0
condition|)
block|{
return|return
name|result
return|;
block|}
block|}
return|return
name|left
operator|.
name|length
operator|-
name|right
operator|.
name|length
return|;
block|}
block|}
block|}
end_class

end_unit

