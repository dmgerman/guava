begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2010 Google Inc.  *  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except  * in compliance with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software distributed under the License  * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express  * or implied. See the License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|com.google.common.base
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|Beta
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtCompatible
import|;
end_import

begin_comment
comment|/**  * Static methods pertaining ASCII characters (those in the range of values {@code 0x00} through  * {@code 0x7F}), and to strings containing such characters.  *  * @author Craig Berry  * @author Gregory Kick  * @since 7  */
end_comment

begin_class
annotation|@
name|Beta
annotation|@
name|GwtCompatible
DECL|class|Ascii
specifier|public
specifier|final
class|class
name|Ascii
block|{
DECL|method|Ascii ()
specifier|private
name|Ascii
parameter_list|()
block|{}
comment|/**    * Returns a copy of the input string in which all {@linkplain #isUpperCase(char) uppercase ASCII    * characters} have been converted to lowercase. All other characters are copied without    * modification.    */
DECL|method|toLowerCase (String string)
specifier|public
specifier|static
name|String
name|toLowerCase
parameter_list|(
name|String
name|string
parameter_list|)
block|{
name|int
name|length
init|=
name|string
operator|.
name|length
argument_list|()
decl_stmt|;
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|(
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
name|i
operator|++
control|)
block|{
name|builder
operator|.
name|append
argument_list|(
name|toLowerCase
argument_list|(
name|string
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * If the argument is an {@linkplain #isUpperCase(char) uppercase ASCII character} returns the    * lowercase equivalent. Otherwise returns the argument.    */
DECL|method|toLowerCase (char c)
specifier|public
specifier|static
name|char
name|toLowerCase
parameter_list|(
name|char
name|c
parameter_list|)
block|{
return|return
name|isUpperCase
argument_list|(
name|c
argument_list|)
condition|?
call|(
name|char
call|)
argument_list|(
name|c
operator|^
literal|0x20
argument_list|)
else|:
name|c
return|;
block|}
comment|/**    * Returns a copy of the input string in which all {@linkplain #isLowerCase(char) lowercase ASCII    * characters} have been converted to uppercase. All other characters are copied without    * modification.    */
DECL|method|toUpperCase (String string)
specifier|public
specifier|static
name|String
name|toUpperCase
parameter_list|(
name|String
name|string
parameter_list|)
block|{
name|int
name|length
init|=
name|string
operator|.
name|length
argument_list|()
decl_stmt|;
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|(
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
name|i
operator|++
control|)
block|{
name|builder
operator|.
name|append
argument_list|(
name|toUpperCase
argument_list|(
name|string
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * If the argument is a {@linkplain #isLowerCase(char) lowercase ASCII character} returns the    * uppercase equivalent. Otherwise returns the argument.    */
DECL|method|toUpperCase (char c)
specifier|public
specifier|static
name|char
name|toUpperCase
parameter_list|(
name|char
name|c
parameter_list|)
block|{
return|return
name|isLowerCase
argument_list|(
name|c
argument_list|)
condition|?
call|(
name|char
call|)
argument_list|(
name|c
operator|&
literal|0x5f
argument_list|)
else|:
name|c
return|;
block|}
comment|/**    * Indicates whether {@code c} is one of the twenty-six lowercase ASCII alphabetic characters    * between {@code 'a'} and {@code 'z'} inclusive. All others (including non-ASCII characters)    * return {@code false}.    */
DECL|method|isLowerCase (char c)
specifier|public
specifier|static
name|boolean
name|isLowerCase
parameter_list|(
name|char
name|c
parameter_list|)
block|{
return|return
operator|(
name|c
operator|>=
literal|'a'
operator|)
operator|&&
operator|(
name|c
operator|<=
literal|'z'
operator|)
return|;
block|}
comment|/**    * Indicates whether {@code c} is one of the twenty-six uppercase ASCII alphabetic characters    * between {@code 'A'} and {@code 'Z'} inclusive. All others (including non-ASCII characters)    * return {@code false}.    */
DECL|method|isUpperCase (char c)
specifier|public
specifier|static
name|boolean
name|isUpperCase
parameter_list|(
name|char
name|c
parameter_list|)
block|{
return|return
operator|(
name|c
operator|>=
literal|'A'
operator|)
operator|&&
operator|(
name|c
operator|<=
literal|'Z'
operator|)
return|;
block|}
block|}
end_class

end_unit

