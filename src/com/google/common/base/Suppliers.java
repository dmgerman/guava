begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2007 Google Inc.  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.base
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_comment
comment|/**  * Useful suppliers.  *  *<p>All methods return serializable suppliers as long as they're given  * serializable parameters.  *  * @author Laurence Gonsalves  * @author Harry Heymann  */
end_comment

begin_class
DECL|class|Suppliers
specifier|public
specifier|final
class|class
name|Suppliers
block|{
DECL|method|Suppliers ()
specifier|private
name|Suppliers
parameter_list|()
block|{}
comment|/**    * Returns a new supplier which is the composition of the provided function    * and supplier. In other words, the new supplier's value will be computed by    * retrieving the value from {@code first}, and then applying    * {@code function} to that value. Note that the resulting supplier will not    * call {@code first} or invoke {@code function} until it is called.    */
DECL|method|compose ( Function<? super F, T> function, Supplier<F> first)
specifier|public
specifier|static
parameter_list|<
name|F
parameter_list|,
name|T
parameter_list|>
name|Supplier
argument_list|<
name|T
argument_list|>
name|compose
parameter_list|(
name|Function
argument_list|<
name|?
super|super
name|F
argument_list|,
name|T
argument_list|>
name|function
parameter_list|,
name|Supplier
argument_list|<
name|F
argument_list|>
name|first
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|function
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|first
argument_list|)
expr_stmt|;
return|return
operator|new
name|SupplierComposition
argument_list|<
name|F
argument_list|,
name|T
argument_list|>
argument_list|(
name|function
argument_list|,
name|first
argument_list|)
return|;
block|}
DECL|class|SupplierComposition
specifier|private
specifier|static
class|class
name|SupplierComposition
parameter_list|<
name|F
parameter_list|,
name|T
parameter_list|>
implements|implements
name|Supplier
argument_list|<
name|T
argument_list|>
implements|,
name|Serializable
block|{
DECL|field|function
specifier|final
name|Function
argument_list|<
name|?
super|super
name|F
argument_list|,
name|?
extends|extends
name|T
argument_list|>
name|function
decl_stmt|;
DECL|field|first
specifier|final
name|Supplier
argument_list|<
name|?
extends|extends
name|F
argument_list|>
name|first
decl_stmt|;
DECL|method|SupplierComposition (Function<? super F, ? extends T> function, Supplier<? extends F> first)
name|SupplierComposition
parameter_list|(
name|Function
argument_list|<
name|?
super|super
name|F
argument_list|,
name|?
extends|extends
name|T
argument_list|>
name|function
parameter_list|,
name|Supplier
argument_list|<
name|?
extends|extends
name|F
argument_list|>
name|first
parameter_list|)
block|{
name|this
operator|.
name|function
operator|=
name|function
expr_stmt|;
name|this
operator|.
name|first
operator|=
name|first
expr_stmt|;
block|}
DECL|method|get ()
specifier|public
name|T
name|get
parameter_list|()
block|{
return|return
name|function
operator|.
name|apply
argument_list|(
name|first
operator|.
name|get
argument_list|()
argument_list|)
return|;
block|}
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|0
decl_stmt|;
block|}
comment|/**    * Returns a supplier which caches the instance retrieved during the first    * call to {@code get()} and returns that value on subsequent calls to    * {@code get()}. See:    *<a href="http://en.wikipedia.org/wiki/Memoization">memoization</a>    *    *<p>The returned supplier is thread-safe. The supplier's serialized form    * does not contain the cached value, which will be recalculated when {@code    * get()} is called on the reserialized instance.    */
DECL|method|memoize (Supplier<T> delegate)
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|Supplier
argument_list|<
name|T
argument_list|>
name|memoize
parameter_list|(
name|Supplier
argument_list|<
name|T
argument_list|>
name|delegate
parameter_list|)
block|{
return|return
operator|new
name|MemoizingSupplier
argument_list|<
name|T
argument_list|>
argument_list|(
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|delegate
argument_list|)
argument_list|)
return|;
block|}
DECL|class|MemoizingSupplier
annotation|@
name|VisibleForTesting
specifier|static
class|class
name|MemoizingSupplier
parameter_list|<
name|T
parameter_list|>
implements|implements
name|Supplier
argument_list|<
name|T
argument_list|>
implements|,
name|Serializable
block|{
DECL|field|delegate
specifier|final
name|Supplier
argument_list|<
name|T
argument_list|>
name|delegate
decl_stmt|;
DECL|field|initialized
specifier|transient
name|boolean
name|initialized
decl_stmt|;
DECL|field|value
specifier|transient
name|T
name|value
decl_stmt|;
DECL|method|MemoizingSupplier (Supplier<T> delegate)
name|MemoizingSupplier
parameter_list|(
name|Supplier
argument_list|<
name|T
argument_list|>
name|delegate
parameter_list|)
block|{
name|this
operator|.
name|delegate
operator|=
name|delegate
expr_stmt|;
block|}
DECL|method|get ()
specifier|public
specifier|synchronized
name|T
name|get
parameter_list|()
block|{
if|if
condition|(
operator|!
name|initialized
condition|)
block|{
name|value
operator|=
name|delegate
operator|.
name|get
argument_list|()
expr_stmt|;
name|initialized
operator|=
literal|true
expr_stmt|;
block|}
return|return
name|value
return|;
block|}
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|0
decl_stmt|;
block|}
comment|/**    * Returns a supplier that always supplies {@code instance}.    */
DECL|method|ofInstance (@ullable T instance)
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|Supplier
argument_list|<
name|T
argument_list|>
name|ofInstance
parameter_list|(
annotation|@
name|Nullable
name|T
name|instance
parameter_list|)
block|{
return|return
operator|new
name|SupplierOfInstance
argument_list|<
name|T
argument_list|>
argument_list|(
name|instance
argument_list|)
return|;
block|}
DECL|class|SupplierOfInstance
specifier|private
specifier|static
class|class
name|SupplierOfInstance
parameter_list|<
name|T
parameter_list|>
implements|implements
name|Supplier
argument_list|<
name|T
argument_list|>
implements|,
name|Serializable
block|{
DECL|field|instance
specifier|final
name|T
name|instance
decl_stmt|;
DECL|method|SupplierOfInstance (T instance)
name|SupplierOfInstance
parameter_list|(
name|T
name|instance
parameter_list|)
block|{
name|this
operator|.
name|instance
operator|=
name|instance
expr_stmt|;
block|}
DECL|method|get ()
specifier|public
name|T
name|get
parameter_list|()
block|{
return|return
name|instance
return|;
block|}
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|0
decl_stmt|;
block|}
comment|/**    * Returns a supplier whose {@code get()} method synchronizes on    * {@code delegate} before calling it, making it thread-safe.    */
DECL|method|synchronizedSupplier (Supplier<T> delegate)
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|Supplier
argument_list|<
name|T
argument_list|>
name|synchronizedSupplier
parameter_list|(
name|Supplier
argument_list|<
name|T
argument_list|>
name|delegate
parameter_list|)
block|{
return|return
operator|new
name|ThreadSafeSupplier
argument_list|<
name|T
argument_list|>
argument_list|(
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|delegate
argument_list|)
argument_list|)
return|;
block|}
DECL|class|ThreadSafeSupplier
specifier|private
specifier|static
class|class
name|ThreadSafeSupplier
parameter_list|<
name|T
parameter_list|>
implements|implements
name|Supplier
argument_list|<
name|T
argument_list|>
implements|,
name|Serializable
block|{
DECL|field|delegate
specifier|final
name|Supplier
argument_list|<
name|T
argument_list|>
name|delegate
decl_stmt|;
DECL|method|ThreadSafeSupplier (Supplier<T> delegate)
name|ThreadSafeSupplier
parameter_list|(
name|Supplier
argument_list|<
name|T
argument_list|>
name|delegate
parameter_list|)
block|{
name|this
operator|.
name|delegate
operator|=
name|delegate
expr_stmt|;
block|}
DECL|method|get ()
specifier|public
name|T
name|get
parameter_list|()
block|{
synchronized|synchronized
init|(
name|delegate
init|)
block|{
return|return
name|delegate
operator|.
name|get
argument_list|()
return|;
block|}
block|}
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|0
decl_stmt|;
block|}
block|}
end_class

end_unit

