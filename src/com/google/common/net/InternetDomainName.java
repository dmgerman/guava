begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2009 Google Inc.  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.net
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|net
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkArgument
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkState
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|Beta
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtCompatible
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Joiner
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Splitter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_comment
comment|/**  * An immutable well-formed internet domain name, as defined by  *<a href="http://www.ietf.org/rfc/rfc1035.txt">RFC 1035</a>, with the  * exception that names ending in {@code "."} are not supported (as they are not  * generally used in browsers, email, and other end-user applications. Examples  * include {@code com} and {@code foo.co.uk}. Only syntactic analysis is  * performed; no DNS lookups or other network interactions take place. Thus  * there is no guarantee that the domain actually exists on the internet.  * Invalid domain names throw {@link IllegalArgumentException} on construction.  *  *<p>It is often the case that domains of interest are those under a  * {@linkplain #isPublicSuffix() public suffix} but not themselves a public  * suffix; {@link #hasPublicSuffix()} and {@link #isTopPrivateDomain()} test for  * this. Similarly, one often needs to obtain the domain consisting of the  * public suffix plus one subdomain level, typically to obtain the highest-level  * domain for which cookies may be set. Use {@link #topPrivateDomain()} for this  * purpose.  *  *<p>{@linkplain #equals(Object) Equality} of domain names is case-insensitive,  * so for convenience, the {@link #name()} and {@link #parts()} methods return  * the lowercase form of the name.  *  *<p><a href="http://en.wikipedia.org/wiki/Internationalized_domain_name">  * internationalized domain names (IDN)</a> such as {@code ??.cn} are  * supported.  *  * @author Craig Berry  * @since 5  */
end_comment

begin_class
annotation|@
name|Beta
annotation|@
name|GwtCompatible
DECL|class|InternetDomainName
specifier|public
specifier|final
class|class
name|InternetDomainName
block|{
DECL|field|DOT_SPLITTER
specifier|private
specifier|static
specifier|final
name|Splitter
name|DOT_SPLITTER
init|=
name|Splitter
operator|.
name|on
argument_list|(
literal|'.'
argument_list|)
decl_stmt|;
DECL|field|DOT_JOINER
specifier|private
specifier|static
specifier|final
name|Joiner
name|DOT_JOINER
init|=
name|Joiner
operator|.
name|on
argument_list|(
literal|'.'
argument_list|)
decl_stmt|;
comment|/**    * Value of {@link #publicSuffixIndex} which indicates that no public suffix    * was found.    */
DECL|field|NO_PUBLIC_SUFFIX_FOUND
specifier|private
specifier|static
specifier|final
name|int
name|NO_PUBLIC_SUFFIX_FOUND
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|DOT_REGEX
specifier|private
specifier|static
specifier|final
name|String
name|DOT_REGEX
init|=
literal|"\\."
decl_stmt|;
comment|/**    * The full domain name, converted to lower case.    */
DECL|field|name
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
comment|/**    * The parts of the domain name, converted to lower case.    */
DECL|field|parts
specifier|private
specifier|final
name|ImmutableList
argument_list|<
name|String
argument_list|>
name|parts
decl_stmt|;
comment|/**    * The index in the {@link #parts()} list at which the public suffix begins.    * For example, for the domain name {@code www.google.co.uk}, the value would    * be 2 (the index of the {@code co} part). The value is negative    * (specifically, {@link #NO_PUBLIC_SUFFIX_FOUND}) if no public suffix was    * found.    */
DECL|field|publicSuffixIndex
specifier|private
specifier|final
name|int
name|publicSuffixIndex
decl_stmt|;
comment|/**    * Private constructor used to implement {@link #from(String)}.    */
DECL|method|InternetDomainName (String name)
specifier|private
name|InternetDomainName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|parts
operator|=
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|DOT_SPLITTER
operator|.
name|split
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
name|checkArgument
argument_list|(
name|validateSyntax
argument_list|(
name|parts
argument_list|)
argument_list|,
literal|"Not a valid domain name: '%s'"
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|this
operator|.
name|publicSuffixIndex
operator|=
name|findPublicSuffix
argument_list|()
expr_stmt|;
block|}
comment|/**    * Private constructor used to implement {@link #ancestor(int)}. Argument    * parts are assumed to be valid, as they always come from an existing domain.    */
DECL|method|InternetDomainName (List<String> parts)
specifier|private
name|InternetDomainName
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|parts
parameter_list|)
block|{
name|checkArgument
argument_list|(
operator|!
name|parts
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|parts
operator|=
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|parts
argument_list|)
expr_stmt|;
name|this
operator|.
name|name
operator|=
name|DOT_JOINER
operator|.
name|join
argument_list|(
name|parts
argument_list|)
expr_stmt|;
name|this
operator|.
name|publicSuffixIndex
operator|=
name|findPublicSuffix
argument_list|()
expr_stmt|;
block|}
comment|/**    * Returns the index of the leftmost part of the public suffix, or -1 if not    * found.    */
DECL|method|findPublicSuffix ()
specifier|private
name|int
name|findPublicSuffix
parameter_list|()
block|{
specifier|final
name|int
name|partsSize
init|=
name|parts
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|partsSize
condition|;
name|i
operator|++
control|)
block|{
name|String
name|ancestorName
init|=
name|DOT_JOINER
operator|.
name|join
argument_list|(
name|parts
operator|.
name|subList
argument_list|(
name|i
argument_list|,
name|partsSize
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|isPublicSuffixInternal
argument_list|(
name|ancestorName
argument_list|)
condition|)
block|{
return|return
name|i
return|;
block|}
block|}
return|return
name|NO_PUBLIC_SUFFIX_FOUND
return|;
block|}
comment|/**    * A factory method for creating {@code InternetDomainName} objects.    *    * @param domain A domain name (not IP address)    * @throws IllegalArgumentException If name is not syntactically valid    */
DECL|method|from (String domain)
specifier|public
specifier|static
name|InternetDomainName
name|from
parameter_list|(
name|String
name|domain
parameter_list|)
block|{
comment|// RFC 1035 defines domain names to be case-insensitive; normalizing
comment|// to lower case allows us to simplify matching.
return|return
operator|new
name|InternetDomainName
argument_list|(
name|domain
operator|.
name|toLowerCase
argument_list|()
argument_list|)
return|;
block|}
comment|/*    * Patterns used for validation of domain name components. We use strings    * instead of compiled patterns to maintain GWT compatibility. Only the    * intersection of Java regex and Javascript regex is supported. Javascript    * regexes do not support Unicode character category matchers, so instead we    * transform them into giant ugly character range matchers.    *    * TODO: These should be generated as a separate java source file as part of    * the build process rather than being hard-coded here.    */
DECL|field|LETTER_RANGES
specifier|private
specifier|static
specifier|final
name|String
name|LETTER_RANGES
init|=
comment|// \\p{L}
literal|"\\u0041-\\u005a\\u0061-\\u007a\\u00aa\\u00b5\\u00ba\\u00c0-\\u00d6"
operator|+
literal|"\\u00d8-\\u00f6\\u00f8-\\u0236\\u0250-\\u02c1\\u02c6-\\u02d1"
operator|+
literal|"\\u02e0-\\u02e4\\u02ee\\u037a\\u0386\\u0388-\\u038a\\u038c"
operator|+
literal|"\\u038e-\\u03a1\\u03a3-\\u03ce\\u03d0-\\u03f5\\u03f7-\\u03fb"
operator|+
literal|"\\u0400-\\u0481\\u048a-\\u04ce\\u04d0-\\u04f5\\u04f8-\\u04f9"
operator|+
literal|"\\u0500-\\u050f\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05d0-\\u05ea"
operator|+
literal|"\\u05f0-\\u05f2\\u0621-\\u063a\\u0640-\\u064a\\u066e-\\u066f"
operator|+
literal|"\\u0671-\\u06d3\\u06d5\\u06e5-\\u06e6\\u06ee-\\u06ef\\u06fa-\\u06fc"
operator|+
literal|"\\u06ff\\u0710\\u0712-\\u072f\\u074d-\\u074f\\u0780-\\u07a5\\u07b1"
operator|+
literal|"\\u0904-\\u0939\\u093d\\u0950\\u0958-\\u0961\\u0985-\\u098c"
operator|+
literal|"\\u098f-\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9"
operator|+
literal|"\\u09bd\\u09dc-\\u09dd\\u09df-\\u09e1\\u09f0-\\u09f1\\u0a05-\\u0a0a"
operator|+
literal|"\\u0a0f-\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32-\\u0a33"
operator|+
literal|"\\u0a35-\\u0a36\\u0a38-\\u0a39\\u0a59-\\u0a5c\\u0a5e\\u0a72-\\u0a74"
operator|+
literal|"\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0"
operator|+
literal|"\\u0ab2-\\u0ab3\\u0ab5-\\u0ab9\\u0abd\\u0ad0\\u0ae0-\\u0ae1"
operator|+
literal|"\\u0b05-\\u0b0c\\u0b0f-\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30"
operator|+
literal|"\\u0b32-\\u0b33\\u0b35-\\u0b39\\u0b3d\\u0b5c-\\u0b5d\\u0b5f-\\u0b61"
operator|+
literal|"\\u0b71\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95"
operator|+
literal|"\\u0b99-\\u0b9a\\u0b9c\\u0b9e-\\u0b9f\\u0ba3-\\u0ba4\\u0ba8-\\u0baa"
operator|+
literal|"\\u0bae-\\u0bb5\\u0bb7-\\u0bb9\\u0c05-\\u0c0c\\u0c0e-\\u0c10"
operator|+
literal|"\\u0c12-\\u0c28\\u0c2a-\\u0c33\\u0c35-\\u0c39\\u0c60-\\u0c61"
operator|+
literal|"\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3"
operator|+
literal|"\\u0cb5-\\u0cb9\\u0cbd\\u0cde\\u0ce0-\\u0ce1\\u0d05-\\u0d0c"
operator|+
literal|"\\u0d0e-\\u0d10\\u0d12-\\u0d28\\u0d2a-\\u0d39\\u0d60-\\u0d61"
operator|+
literal|"\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6"
operator|+
literal|"\\u0e01-\\u0e30\\u0e32-\\u0e33\\u0e40-\\u0e46\\u0e81-\\u0e82\\u0e84"
operator|+
literal|"\\u0e87-\\u0e88\\u0e8a\\u0e8d\\u0e94-\\u0e97\\u0e99-\\u0e9f"
operator|+
literal|"\\u0ea1-\\u0ea3\\u0ea5\\u0ea7\\u0eaa-\\u0eab\\u0ead-\\u0eb0"
operator|+
literal|"\\u0eb2-\\u0eb3\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0edc-\\u0edd\\u0f00"
operator|+
literal|"\\u0f40-\\u0f47\\u0f49-\\u0f6a\\u0f88-\\u0f8b\\u1000-\\u1021"
operator|+
literal|"\\u1023-\\u1027\\u1029-\\u102a\\u1050-\\u1055\\u10a0-\\u10c5"
operator|+
literal|"\\u10d0-\\u10f8\\u1100-\\u1159\\u115f-\\u11a2\\u11a8-\\u11f9"
operator|+
literal|"\\u1200-\\u1206\\u1208-\\u1246\\u1248\\u124a-\\u124d\\u1250-\\u1256"
operator|+
literal|"\\u1258\\u125a-\\u125d\\u1260-\\u1286\\u1288\\u128a-\\u128d"
operator|+
literal|"\\u1290-\\u12ae\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0"
operator|+
literal|"\\u12c2-\\u12c5\\u12c8-\\u12ce\\u12d0-\\u12d6\\u12d8-\\u12ee"
operator|+
literal|"\\u12f0-\\u130e\\u1310\\u1312-\\u1315\\u1318-\\u131e\\u1320-\\u1346"
operator|+
literal|"\\u1348-\\u135a\\u13a0-\\u13f4\\u1401-\\u166c\\u166f-\\u1676"
operator|+
literal|"\\u1681-\\u169a\\u16a0-\\u16ea\\u1700-\\u170c\\u170e-\\u1711"
operator|+
literal|"\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176c\\u176e-\\u1770"
operator|+
literal|"\\u1780-\\u17b3\\u17d7\\u17dc\\u1820-\\u1877\\u1880-\\u18a8"
operator|+
literal|"\\u1900-\\u191c\\u1950-\\u196d\\u1970-\\u1974\\u1d00-\\u1d6b"
operator|+
literal|"\\u1e00-\\u1e9b\\u1ea0-\\u1ef9\\u1f00-\\u1f15\\u1f18-\\u1f1d"
operator|+
literal|"\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d"
operator|+
literal|"\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4"
operator|+
literal|"\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec"
operator|+
literal|"\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u2071\\u207f\\u2102\\u2107"
operator|+
literal|"\\u210a-\\u2113\\u2115\\u2119-\\u211d\\u2124\\u2126\\u2128"
operator|+
literal|"\\u212a-\\u212d\\u212f-\\u2131\\u2133-\\u2139\\u213d-\\u213f"
operator|+
literal|"\\u2145-\\u2149\\u3005-\\u3006\\u3031-\\u3035\\u303b-\\u303c"
operator|+
literal|"\\u3041-\\u3096\\u309d-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff"
operator|+
literal|"\\u3105-\\u312c\\u3131-\\u318e\\u31a0-\\u31b7\\u31f0-\\u31ff"
operator|+
literal|"\\u3400-\\u4db5\\u4e00-\\u9fa5\\ua000-\\ua48c\\uac00-\\ud7a3"
operator|+
literal|"\\uf900-\\ufa2d\\ufa30-\\ufa6a\\ufb00-\\ufb06\\ufb13-\\ufb17"
operator|+
literal|"\\ufb1d\\ufb1f-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e"
operator|+
literal|"\\ufb40-\\ufb41\\ufb43-\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d"
operator|+
literal|"\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb\\ufe70-\\ufe74"
operator|+
literal|"\\ufe76-\\ufefc\\uff21-\\uff3a\\uff41-\\uff5a\\uff66-\\uffbe"
operator|+
literal|"\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc"
decl_stmt|;
DECL|field|NUMBER_RANGES
specifier|private
specifier|static
specifier|final
name|String
name|NUMBER_RANGES
init|=
comment|// \\p{N}
literal|"\\u0030-\\u0039\\u00b2-\\u00b3\\u00b9\\u00bc-\\u00be\\u0660-\\u0669"
operator|+
literal|"\\u06f0-\\u06f9\\u0966-\\u096f\\u09e6-\\u09ef\\u09f4-\\u09f9"
operator|+
literal|"\\u0a66-\\u0a6f\\u0ae6-\\u0aef\\u0b66-\\u0b6f\\u0be7-\\u0bf2"
operator|+
literal|"\\u0c66-\\u0c6f\\u0ce6-\\u0cef\\u0d66-\\u0d6f\\u0e50-\\u0e59"
operator|+
literal|"\\u0ed0-\\u0ed9\\u0f20-\\u0f33\\u1040-\\u1049\\u1369-\\u137c"
operator|+
literal|"\\u16ee-\\u16f0\\u17e0-\\u17e9\\u17f0-\\u17f9\\u1810-\\u1819"
operator|+
literal|"\\u1946-\\u194f\\u2070\\u2074-\\u2079\\u2080-\\u2089\\u2153-\\u2183"
operator|+
literal|"\\u2460-\\u249b\\u24ea-\\u24ff\\u2776-\\u2793\\u3007\\u3021-\\u3029"
operator|+
literal|"\\u3038-\\u303a\\u3192-\\u3195\\u3220-\\u3229\\u3251-\\u325f"
operator|+
literal|"\\u3280-\\u3289\\u32b1-\\u32bf\\uff10-\\uff19"
decl_stmt|;
DECL|field|LETTER_OR_NUMBER_RANGES
specifier|private
specifier|static
specifier|final
name|String
name|LETTER_OR_NUMBER_RANGES
init|=
name|LETTER_RANGES
operator|+
name|NUMBER_RANGES
decl_stmt|;
DECL|field|LETTER_NUMBER_OR_DASH_RANGES
specifier|private
specifier|static
specifier|final
name|String
name|LETTER_NUMBER_OR_DASH_RANGES
init|=
name|LETTER_OR_NUMBER_RANGES
operator|+
literal|"_-"
decl_stmt|;
DECL|field|NORMAL_PART
specifier|private
specifier|static
specifier|final
name|String
name|NORMAL_PART
init|=
literal|"["
operator|+
name|LETTER_OR_NUMBER_RANGES
operator|+
literal|"](["
operator|+
name|LETTER_NUMBER_OR_DASH_RANGES
operator|+
literal|"]*["
operator|+
name|LETTER_OR_NUMBER_RANGES
operator|+
literal|"])?"
decl_stmt|;
DECL|field|FINAL_PART
specifier|private
specifier|static
specifier|final
name|String
name|FINAL_PART
init|=
literal|"["
operator|+
name|LETTER_RANGES
operator|+
literal|"](["
operator|+
name|LETTER_NUMBER_OR_DASH_RANGES
operator|+
literal|"]*["
operator|+
name|LETTER_OR_NUMBER_RANGES
operator|+
literal|"])?"
decl_stmt|;
comment|/**    * Validation method used by {@from} to ensure that the domain name is    * syntactically valid according to RFC 1035.    *    * @return Is the domain name syntactically valid?    */
DECL|method|validateSyntax (List<String> parts)
specifier|private
specifier|static
name|boolean
name|validateSyntax
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|parts
parameter_list|)
block|{
specifier|final
name|int
name|lastIndex
init|=
name|parts
operator|.
name|size
argument_list|()
operator|-
literal|1
decl_stmt|;
comment|// Validate the last part specially, as it has different syntax rules.
if|if
condition|(
operator|!
name|validatePart
argument_list|(
name|parts
operator|.
name|get
argument_list|(
name|lastIndex
argument_list|)
argument_list|,
name|FINAL_PART
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|lastIndex
condition|;
name|i
operator|++
control|)
block|{
name|String
name|part
init|=
name|parts
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|validatePart
argument_list|(
name|part
argument_list|,
name|NORMAL_PART
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
comment|/**    * The maximum size of a single part of a domain name.    */
DECL|field|MAX_DOMAIN_PART_LENGTH
specifier|private
specifier|static
specifier|final
name|int
name|MAX_DOMAIN_PART_LENGTH
init|=
literal|63
decl_stmt|;
comment|/**    * Helper method for {@link #validateSyntax(List)}. Validates that one part of    * a domain name is valid.    *    * @param part The domain name part to be validated    * @param pattern The regex pattern against which to validate    * @return Whether the part is valid    */
DECL|method|validatePart (String part, String pattern)
specifier|private
specifier|static
name|boolean
name|validatePart
parameter_list|(
name|String
name|part
parameter_list|,
name|String
name|pattern
parameter_list|)
block|{
return|return
name|part
operator|.
name|length
argument_list|()
operator|<=
name|MAX_DOMAIN_PART_LENGTH
operator|&&
name|part
operator|.
name|matches
argument_list|(
name|pattern
argument_list|)
return|;
block|}
comment|/**    * Returns the domain name, normalized to all lower case.    */
DECL|method|name ()
specifier|public
name|String
name|name
parameter_list|()
block|{
return|return
name|name
return|;
block|}
comment|/**    * Returns the individual components of this domain name, normalized to all    * lower case. For example, for the domain name {@code mail.google.com}, this    * method returns the list {@code ["mail", "google", "com"]}.    */
DECL|method|parts ()
specifier|public
name|ImmutableList
argument_list|<
name|String
argument_list|>
name|parts
parameter_list|()
block|{
return|return
name|parts
return|;
block|}
comment|/**    * Old location of {@link #isPublicSuffix()}.    *    * @deprecated use {@link #isPublicSuffix()}    */
DECL|method|isRecognizedTld ()
annotation|@
name|Deprecated
specifier|public
name|boolean
name|isRecognizedTld
parameter_list|()
block|{
return|return
name|isPublicSuffix
argument_list|()
return|;
block|}
comment|/**    * Old location of {@link #isUnderPublicSuffix()}.    *    * @deprecated use {@link #isUnderPublicSuffix()}    */
DECL|method|isUnderRecognizedTld ()
annotation|@
name|Deprecated
specifier|public
name|boolean
name|isUnderRecognizedTld
parameter_list|()
block|{
return|return
name|isUnderPublicSuffix
argument_list|()
return|;
block|}
comment|/**    * Old location of {@link #hasPublicSuffix()}.    *    * @deprecated use {@link #hasPublicSuffix()}    */
DECL|method|hasRecognizedTld ()
annotation|@
name|Deprecated
specifier|public
name|boolean
name|hasRecognizedTld
parameter_list|()
block|{
return|return
name|hasPublicSuffix
argument_list|()
return|;
block|}
comment|/**    * Old location of {@link #publicSuffix()}.    *    * @deprecated use {@link #publicSuffix()}    */
DECL|method|recognizedTld ()
annotation|@
name|Deprecated
specifier|public
name|InternetDomainName
name|recognizedTld
parameter_list|()
block|{
return|return
name|publicSuffix
argument_list|()
return|;
block|}
comment|/**    * Old location of {@link #isTopPrivateDomain()}.    *    * @deprecated use {@link #isTopPrivateDomain()}    */
DECL|method|isImmediatelyUnderTld ()
annotation|@
name|Deprecated
specifier|public
name|boolean
name|isImmediatelyUnderTld
parameter_list|()
block|{
return|return
name|isTopPrivateDomain
argument_list|()
return|;
block|}
comment|/**    * Old location of {@link #topPrivateDomain()}.    *    * @deprecated use {@link #topPrivateDomain()}    */
DECL|method|topCookieDomain ()
annotation|@
name|Deprecated
specifier|public
name|InternetDomainName
name|topCookieDomain
parameter_list|()
block|{
return|return
name|topPrivateDomain
argument_list|()
return|;
block|}
comment|/**    * Returns the rightmost non-{@linkplain #isRecognizedTld() TLD} domain name    * part.  For example    * {@code new InternetDomainName("www.google.com").rightmostNonTldPart()}    * returns {@code "google"}.  Returns null if either no    * {@linkplain #isRecognizedTld() TLD} is found, or the whole domain name is    * itself a {@linkplain #isRecognizedTld() TLD}.    *    * @deprecated use the first {@linkplain #parts part} of the {@link    *     #topPrivateDomain()}    */
DECL|method|rightmostNonTldPart ()
annotation|@
name|Deprecated
specifier|public
name|String
name|rightmostNonTldPart
parameter_list|()
block|{
return|return
name|publicSuffixIndex
operator|>=
literal|1
condition|?
name|parts
operator|.
name|get
argument_list|(
name|publicSuffixIndex
operator|-
literal|1
argument_list|)
else|:
literal|null
return|;
block|}
comment|/**    * Indicates whether this domain name represents a<i>public suffix</i>, as    * defined by the Mozilla Foundation's    *<a href="http://publicsuffix.org/">Public Suffix List</a> (PSL). A public    * suffix is one under which Internet users can directly register names, such    * as {@code com}, {@code co.uk} or {@code pvt.k12.wy.us}. Examples of domain    * names that are<i>not</i> public suffixes include {@code google}, {@code    * google.com} and {@code foo.co.uk}.    *    * @return {@code true} if this domain name appears exactly on the public    *     suffix list    * @since 6    */
DECL|method|isPublicSuffix ()
specifier|public
name|boolean
name|isPublicSuffix
parameter_list|()
block|{
return|return
name|publicSuffixIndex
operator|==
literal|0
return|;
block|}
comment|/**    * Indicates whether this domain name ends in a {@linkplain #isPublicSuffix()    * public suffix}, including if it is a public suffix itself. For example,    * returns {@code true} for {@code www.google.com}, {@code foo.co.uk} and    * {@code com}, but not for {@code google} or {@code google.foo}.    *    * @since 6    */
DECL|method|hasPublicSuffix ()
specifier|public
name|boolean
name|hasPublicSuffix
parameter_list|()
block|{
return|return
name|publicSuffixIndex
operator|!=
name|NO_PUBLIC_SUFFIX_FOUND
return|;
block|}
comment|/**    * Returns the {@linkplain #isPublicSuffix() public suffix} portion of the    * domain name, or {@code null} if no public suffix is present.    *    * @since 6    */
DECL|method|publicSuffix ()
specifier|public
name|InternetDomainName
name|publicSuffix
parameter_list|()
block|{
return|return
name|hasPublicSuffix
argument_list|()
condition|?
name|ancestor
argument_list|(
name|publicSuffixIndex
argument_list|)
else|:
literal|null
return|;
block|}
comment|/**    * Indicates whether this domain name ends in a {@linkplain #isPublicSuffix()    * public suffix}, while not being a public suffix itself. For example,    * returns {@code true} for {@code www.google.com}, {@code foo.co.uk} and    * {@code bar.ca.us}, but not for {@code google}, {@code com}, or {@code    * google.foo}.    *    * @since 6    */
DECL|method|isUnderPublicSuffix ()
specifier|public
name|boolean
name|isUnderPublicSuffix
parameter_list|()
block|{
return|return
name|publicSuffixIndex
operator|>
literal|0
return|;
block|}
comment|/**    * Indicates whether this domain name is composed of exactly one subdomain    * component followed by a {@linkplain #isPublicSuffix() public suffix}. For    * example, returns {@code true} for {@code google.com} and {@code foo.co.uk},    * but not for {@code www.google.com} or {@code co.uk}.    *    * @since 6    */
DECL|method|isTopPrivateDomain ()
specifier|public
name|boolean
name|isTopPrivateDomain
parameter_list|()
block|{
return|return
name|publicSuffixIndex
operator|==
literal|1
return|;
block|}
comment|/**    * Returns the portion of this domain name that is one level beneath the    * public suffix. For example, for {@code x.adwords.google.co.uk} it returns    * {@code google.co.uk}, since {@code co.uk} is a public suffix. This is the    * highest-level parent of this domain for which cookies may be set, as    * cookies cannot be set on a public suffix itself.    *    *<p>If {@link #isTopPrivateDomain()} is true, the current domain name    * instance is returned.    *    * @throws IllegalStateException if this domain does not end with a    *     public suffix    * @since 6    */
DECL|method|topPrivateDomain ()
specifier|public
name|InternetDomainName
name|topPrivateDomain
parameter_list|()
block|{
if|if
condition|(
name|isTopPrivateDomain
argument_list|()
condition|)
block|{
return|return
name|this
return|;
block|}
name|checkState
argument_list|(
name|isUnderPublicSuffix
argument_list|()
argument_list|,
literal|"Not under a public suffix: %s"
argument_list|,
name|name
argument_list|)
expr_stmt|;
return|return
name|ancestor
argument_list|(
name|publicSuffixIndex
operator|-
literal|1
argument_list|)
return|;
block|}
comment|/**    * Indicates whether this domain is composed of two or more parts.    */
DECL|method|hasParent ()
specifier|public
name|boolean
name|hasParent
parameter_list|()
block|{
return|return
name|parts
operator|.
name|size
argument_list|()
operator|>
literal|1
return|;
block|}
comment|/**    * Returns an {@code InternetDomainName} that is the immediate ancestor of    * this one; that is, the current domain with the leftmost part removed. For    * example, the parent of {@code www.google.com} is {@code google.com}.    *    * @throws IllegalStateException if the domain has no parent, as determined    *     by {@link #hasParent}    */
DECL|method|parent ()
specifier|public
name|InternetDomainName
name|parent
parameter_list|()
block|{
name|checkState
argument_list|(
name|hasParent
argument_list|()
argument_list|,
literal|"Domain '%s' has no parent"
argument_list|,
name|name
argument_list|)
expr_stmt|;
return|return
name|ancestor
argument_list|(
literal|1
argument_list|)
return|;
block|}
comment|/**    * Returns the ancestor of the current domain at the given number of levels    * "higher" (rightward) in the subdomain list. The number of levels must be    * non-negative, and less than {@code N-1}, where {@code N} is the number of    * parts in the domain.    *    *<p>TODO: Reasonable candidate for addition to public API.    */
DECL|method|ancestor (int levels)
specifier|private
name|InternetDomainName
name|ancestor
parameter_list|(
name|int
name|levels
parameter_list|)
block|{
return|return
operator|new
name|InternetDomainName
argument_list|(
name|parts
operator|.
name|subList
argument_list|(
name|levels
argument_list|,
name|parts
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Creates and returns a new {@code InternetDomainName} by prepending the    * argument and a dot to the current name. For example, {@code    * InternetDomainName.from("foo.com").child("www.bar")} returns a new {@code    * InternetDomainName} with the value {@code www.bar.foo.com}.    *    * @throws NullPointerException if leftParts is null    * @throws IllegalArgumentException if the resulting name is not valid    */
DECL|method|child (String leftParts)
specifier|public
name|InternetDomainName
name|child
parameter_list|(
name|String
name|leftParts
parameter_list|)
block|{
return|return
name|InternetDomainName
operator|.
name|from
argument_list|(
name|checkNotNull
argument_list|(
name|leftParts
argument_list|)
operator|+
literal|"."
operator|+
name|name
argument_list|)
return|;
block|}
comment|/**    * Indicates whether the argument is a syntactically valid domain name.  This    * method is intended for the case where a {@link String} must be validated as    * a valid domain name, but no further work with that {@link String} as an    * {@link InternetDomainName} will be required. Code like the following will    * unnecessarily repeat the work of validation:<pre>   {@code    *    *   if (InternetDomainName.isValid(name)) {    *     domainName = InternetDomainName.from(name);    *   } else {    *     domainName = DEFAULT_DOMAIN;    *   }}</pre>    *    * Such code could instead be written as follows:<pre>   {@code    *    *   try {    *     domainName = InternetDomainName.from(name);    *   } catch (IllegalArgumentException e) {    *     domainName = DEFAULT_DOMAIN;    *   }}</pre>    */
DECL|method|isValid (String name)
specifier|public
specifier|static
name|boolean
name|isValid
parameter_list|(
name|String
name|name
parameter_list|)
block|{
try|try
block|{
name|from
argument_list|(
name|name
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
block|}
comment|/**    * Does the domain name satisfy the Mozilla criteria for a {@linkplain    * #isPublicSuffix() public suffix}?    */
DECL|method|isPublicSuffixInternal (String domain)
specifier|private
specifier|static
name|boolean
name|isPublicSuffixInternal
parameter_list|(
name|String
name|domain
parameter_list|)
block|{
return|return
name|TldPatterns
operator|.
name|EXACT
operator|.
name|contains
argument_list|(
name|domain
argument_list|)
operator|||
operator|(
operator|!
name|TldPatterns
operator|.
name|EXCLUDED
operator|.
name|contains
argument_list|(
name|domain
argument_list|)
operator|&&
name|matchesWildcardPublicSuffix
argument_list|(
name|domain
argument_list|)
operator|)
return|;
block|}
comment|/**    * Does the domain name match one of the "wildcard" patterns (e.g. "*.ar")?    */
DECL|method|matchesWildcardPublicSuffix (String domain)
specifier|private
specifier|static
name|boolean
name|matchesWildcardPublicSuffix
parameter_list|(
name|String
name|domain
parameter_list|)
block|{
specifier|final
name|String
index|[]
name|pieces
init|=
name|domain
operator|.
name|split
argument_list|(
name|DOT_REGEX
argument_list|,
literal|2
argument_list|)
decl_stmt|;
return|return
name|pieces
operator|.
name|length
operator|==
literal|2
operator|&&
name|TldPatterns
operator|.
name|UNDER
operator|.
name|contains
argument_list|(
name|pieces
index|[
literal|1
index|]
argument_list|)
return|;
block|}
comment|// TODO: specify this to return the same as name(); remove name()
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|Objects
operator|.
name|toStringHelper
argument_list|(
name|this
argument_list|)
operator|.
name|add
argument_list|(
literal|"name"
argument_list|,
name|name
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|equals (@ullable Object object)
specifier|public
name|boolean
name|equals
parameter_list|(
annotation|@
name|Nullable
name|Object
name|object
parameter_list|)
block|{
if|if
condition|(
name|object
operator|==
name|this
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|object
operator|instanceof
name|InternetDomainName
condition|)
block|{
name|InternetDomainName
name|that
init|=
operator|(
name|InternetDomainName
operator|)
name|object
decl_stmt|;
return|return
name|this
operator|.
name|name
operator|.
name|equals
argument_list|(
name|that
operator|.
name|name
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|name
operator|.
name|hashCode
argument_list|()
return|;
block|}
block|}
end_class

end_unit

