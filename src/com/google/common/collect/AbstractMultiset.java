begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2007 Google Inc.  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.collect
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkState
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Multisets
operator|.
name|setCountImpl
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtCompatible
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|primitives
operator|.
name|Ints
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|AbstractCollection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|AbstractSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NoSuchElementException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_comment
comment|/**  * This class provides a skeletal implementation of the {@link Multiset}  * interface. A new multiset implementation can be created easily by extending  * this class and implementing the {@link Multiset#entrySet()} method, plus  * optionally overriding {@link #add(Object, int)} and  * {@link #remove(Object, int)} to enable modifications to the multiset.  *  *<p>The {@link #contains}, {@link #containsAll}, {@link #count}, and  * {@link #size} implementations all iterate across the set returned by  * {@link Multiset#entrySet()}, as do many methods acting on the set returned by  * {@link #elementSet()}. Override those methods for better performance.  *  * @author Kevin Bourrillion  */
end_comment

begin_class
annotation|@
name|GwtCompatible
DECL|class|AbstractMultiset
specifier|abstract
class|class
name|AbstractMultiset
parameter_list|<
name|E
parameter_list|>
extends|extends
name|AbstractCollection
argument_list|<
name|E
argument_list|>
implements|implements
name|Multiset
argument_list|<
name|E
argument_list|>
block|{
DECL|method|entrySet ()
specifier|public
specifier|abstract
name|Set
argument_list|<
name|Entry
argument_list|<
name|E
argument_list|>
argument_list|>
name|entrySet
parameter_list|()
function_decl|;
comment|// Query Operations
DECL|method|size ()
annotation|@
name|Override
specifier|public
name|int
name|size
parameter_list|()
block|{
name|long
name|sum
init|=
literal|0L
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|E
argument_list|>
name|entry
range|:
name|entrySet
argument_list|()
control|)
block|{
name|sum
operator|+=
name|entry
operator|.
name|getCount
argument_list|()
expr_stmt|;
block|}
return|return
name|Ints
operator|.
name|saturatedCast
argument_list|(
name|sum
argument_list|)
return|;
block|}
DECL|method|isEmpty ()
annotation|@
name|Override
specifier|public
name|boolean
name|isEmpty
parameter_list|()
block|{
return|return
name|entrySet
argument_list|()
operator|.
name|isEmpty
argument_list|()
return|;
block|}
DECL|method|contains (@ullable Object element)
annotation|@
name|Override
specifier|public
name|boolean
name|contains
parameter_list|(
annotation|@
name|Nullable
name|Object
name|element
parameter_list|)
block|{
return|return
name|elementSet
argument_list|()
operator|.
name|contains
argument_list|(
name|element
argument_list|)
return|;
block|}
DECL|method|iterator ()
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|E
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
operator|new
name|MultisetIterator
argument_list|()
return|;
block|}
DECL|class|MultisetIterator
specifier|private
class|class
name|MultisetIterator
implements|implements
name|Iterator
argument_list|<
name|E
argument_list|>
block|{
DECL|field|entryIterator
specifier|private
specifier|final
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|E
argument_list|>
argument_list|>
name|entryIterator
decl_stmt|;
DECL|field|currentEntry
specifier|private
name|Entry
argument_list|<
name|E
argument_list|>
name|currentEntry
decl_stmt|;
comment|/** Count of subsequent elements equal to current element */
DECL|field|laterCount
specifier|private
name|int
name|laterCount
decl_stmt|;
comment|/** Count of all elements equal to current element */
DECL|field|totalCount
specifier|private
name|int
name|totalCount
decl_stmt|;
DECL|field|canRemove
specifier|private
name|boolean
name|canRemove
decl_stmt|;
DECL|method|MultisetIterator ()
name|MultisetIterator
parameter_list|()
block|{
name|this
operator|.
name|entryIterator
operator|=
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
expr_stmt|;
block|}
DECL|method|hasNext ()
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|laterCount
operator|>
literal|0
operator|||
name|entryIterator
operator|.
name|hasNext
argument_list|()
return|;
block|}
DECL|method|next ()
specifier|public
name|E
name|next
parameter_list|()
block|{
if|if
condition|(
operator|!
name|hasNext
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|NoSuchElementException
argument_list|()
throw|;
block|}
if|if
condition|(
name|laterCount
operator|==
literal|0
condition|)
block|{
name|currentEntry
operator|=
name|entryIterator
operator|.
name|next
argument_list|()
expr_stmt|;
name|totalCount
operator|=
name|laterCount
operator|=
name|currentEntry
operator|.
name|getCount
argument_list|()
expr_stmt|;
block|}
name|laterCount
operator|--
expr_stmt|;
name|canRemove
operator|=
literal|true
expr_stmt|;
return|return
name|currentEntry
operator|.
name|getElement
argument_list|()
return|;
block|}
DECL|method|remove ()
specifier|public
name|void
name|remove
parameter_list|()
block|{
name|checkState
argument_list|(
name|canRemove
argument_list|,
literal|"no calls to next() since the last call to remove()"
argument_list|)
expr_stmt|;
if|if
condition|(
name|totalCount
operator|==
literal|1
condition|)
block|{
name|entryIterator
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|AbstractMultiset
operator|.
name|this
operator|.
name|remove
argument_list|(
name|currentEntry
operator|.
name|getElement
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|totalCount
operator|--
expr_stmt|;
name|canRemove
operator|=
literal|false
expr_stmt|;
block|}
block|}
DECL|method|count (Object element)
specifier|public
name|int
name|count
parameter_list|(
name|Object
name|element
parameter_list|)
block|{
for|for
control|(
name|Entry
argument_list|<
name|E
argument_list|>
name|entry
range|:
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|Objects
operator|.
name|equal
argument_list|(
name|entry
operator|.
name|getElement
argument_list|()
argument_list|,
name|element
argument_list|)
condition|)
block|{
return|return
name|entry
operator|.
name|getCount
argument_list|()
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
comment|// Modification Operations
DECL|method|add (@ullable E element)
annotation|@
name|Override
specifier|public
name|boolean
name|add
parameter_list|(
annotation|@
name|Nullable
name|E
name|element
parameter_list|)
block|{
name|add
argument_list|(
name|element
argument_list|,
literal|1
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
DECL|method|add (E element, int occurrences)
specifier|public
name|int
name|add
parameter_list|(
name|E
name|element
parameter_list|,
name|int
name|occurrences
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
DECL|method|remove (Object element)
annotation|@
name|Override
specifier|public
name|boolean
name|remove
parameter_list|(
name|Object
name|element
parameter_list|)
block|{
return|return
name|remove
argument_list|(
name|element
argument_list|,
literal|1
argument_list|)
operator|>
literal|0
return|;
block|}
DECL|method|remove (Object element, int occurrences)
specifier|public
name|int
name|remove
parameter_list|(
name|Object
name|element
parameter_list|,
name|int
name|occurrences
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
DECL|method|setCount (E element, int count)
specifier|public
name|int
name|setCount
parameter_list|(
name|E
name|element
parameter_list|,
name|int
name|count
parameter_list|)
block|{
return|return
name|setCountImpl
argument_list|(
name|this
argument_list|,
name|element
argument_list|,
name|count
argument_list|)
return|;
block|}
DECL|method|setCount (E element, int oldCount, int newCount)
specifier|public
name|boolean
name|setCount
parameter_list|(
name|E
name|element
parameter_list|,
name|int
name|oldCount
parameter_list|,
name|int
name|newCount
parameter_list|)
block|{
return|return
name|setCountImpl
argument_list|(
name|this
argument_list|,
name|element
argument_list|,
name|oldCount
argument_list|,
name|newCount
argument_list|)
return|;
block|}
comment|// Bulk Operations
DECL|method|containsAll (Collection<?> elements)
annotation|@
name|Override
specifier|public
name|boolean
name|containsAll
parameter_list|(
name|Collection
argument_list|<
name|?
argument_list|>
name|elements
parameter_list|)
block|{
return|return
name|elementSet
argument_list|()
operator|.
name|containsAll
argument_list|(
name|elements
argument_list|)
return|;
block|}
DECL|method|addAll (Collection<? extends E> elementsToAdd)
annotation|@
name|Override
specifier|public
name|boolean
name|addAll
parameter_list|(
name|Collection
argument_list|<
name|?
extends|extends
name|E
argument_list|>
name|elementsToAdd
parameter_list|)
block|{
if|if
condition|(
name|elementsToAdd
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|elementsToAdd
operator|instanceof
name|Multiset
condition|)
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Multiset
argument_list|<
name|?
extends|extends
name|E
argument_list|>
name|that
init|=
operator|(
name|Multiset
argument_list|<
name|?
extends|extends
name|E
argument_list|>
operator|)
name|elementsToAdd
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|?
extends|extends
name|E
argument_list|>
name|entry
range|:
name|that
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|add
argument_list|(
name|entry
operator|.
name|getElement
argument_list|()
argument_list|,
name|entry
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|super
operator|.
name|addAll
argument_list|(
name|elementsToAdd
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
DECL|method|removeAll (Collection<?> elementsToRemove)
annotation|@
name|Override
specifier|public
name|boolean
name|removeAll
parameter_list|(
name|Collection
argument_list|<
name|?
argument_list|>
name|elementsToRemove
parameter_list|)
block|{
name|Collection
argument_list|<
name|?
argument_list|>
name|collection
init|=
operator|(
name|elementsToRemove
operator|instanceof
name|Multiset
operator|)
condition|?
operator|(
operator|(
name|Multiset
argument_list|<
name|?
argument_list|>
operator|)
name|elementsToRemove
operator|)
operator|.
name|elementSet
argument_list|()
else|:
name|elementsToRemove
decl_stmt|;
return|return
name|elementSet
argument_list|()
operator|.
name|removeAll
argument_list|(
name|collection
argument_list|)
return|;
block|}
DECL|method|retainAll (Collection<?> elementsToRetain)
annotation|@
name|Override
specifier|public
name|boolean
name|retainAll
parameter_list|(
name|Collection
argument_list|<
name|?
argument_list|>
name|elementsToRetain
parameter_list|)
block|{
comment|// TODO(kevinb): implement similarly to removeAll?
name|checkNotNull
argument_list|(
name|elementsToRetain
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|E
argument_list|>
argument_list|>
name|entries
init|=
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|boolean
name|modified
init|=
literal|false
decl_stmt|;
while|while
condition|(
name|entries
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Entry
argument_list|<
name|E
argument_list|>
name|entry
init|=
name|entries
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|elementsToRetain
operator|.
name|contains
argument_list|(
name|entry
operator|.
name|getElement
argument_list|()
argument_list|)
condition|)
block|{
name|entries
operator|.
name|remove
argument_list|()
expr_stmt|;
name|modified
operator|=
literal|true
expr_stmt|;
block|}
block|}
return|return
name|modified
return|;
block|}
DECL|method|clear ()
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|entrySet
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
comment|// Views
DECL|field|elementSet
specifier|private
specifier|transient
name|Set
argument_list|<
name|E
argument_list|>
name|elementSet
decl_stmt|;
DECL|method|elementSet ()
specifier|public
name|Set
argument_list|<
name|E
argument_list|>
name|elementSet
parameter_list|()
block|{
name|Set
argument_list|<
name|E
argument_list|>
name|result
init|=
name|elementSet
decl_stmt|;
if|if
condition|(
name|result
operator|==
literal|null
condition|)
block|{
name|elementSet
operator|=
name|result
operator|=
name|createElementSet
argument_list|()
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
comment|/**    * Creates a new instance of this multiset's element set, which will be    * returned by {@link #elementSet()}.    */
DECL|method|createElementSet ()
name|Set
argument_list|<
name|E
argument_list|>
name|createElementSet
parameter_list|()
block|{
return|return
operator|new
name|ElementSet
argument_list|()
return|;
block|}
DECL|class|ElementSet
specifier|private
class|class
name|ElementSet
extends|extends
name|AbstractSet
argument_list|<
name|E
argument_list|>
block|{
DECL|method|iterator ()
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|E
argument_list|>
name|iterator
parameter_list|()
block|{
specifier|final
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|E
argument_list|>
argument_list|>
name|entryIterator
init|=
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
return|return
operator|new
name|Iterator
argument_list|<
name|E
argument_list|>
argument_list|()
block|{
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|entryIterator
operator|.
name|hasNext
argument_list|()
return|;
block|}
specifier|public
name|E
name|next
parameter_list|()
block|{
return|return
name|entryIterator
operator|.
name|next
argument_list|()
operator|.
name|getElement
argument_list|()
return|;
block|}
specifier|public
name|void
name|remove
parameter_list|()
block|{
name|entryIterator
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
return|;
block|}
DECL|method|size ()
annotation|@
name|Override
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|entrySet
argument_list|()
operator|.
name|size
argument_list|()
return|;
block|}
block|}
comment|// Object methods
comment|/**    * {@inheritDoc}    *    *<p>This implementation returns {@code true} if {@code other} is a multiset    * of the same size and if, for each element, the two multisets have the same    * count.    */
DECL|method|equals (@ullable Object object)
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
annotation|@
name|Nullable
name|Object
name|object
parameter_list|)
block|{
if|if
condition|(
name|object
operator|==
name|this
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|object
operator|instanceof
name|Multiset
condition|)
block|{
name|Multiset
argument_list|<
name|?
argument_list|>
name|that
init|=
operator|(
name|Multiset
argument_list|<
name|?
argument_list|>
operator|)
name|object
decl_stmt|;
comment|/*        * We can't simply check whether the entry sets are equal, since that        * approach fails when a TreeMultiset has a comparator that returns 0        * when passed unequal elements.        */
if|if
condition|(
name|this
operator|.
name|size
argument_list|()
operator|!=
name|that
operator|.
name|size
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
for|for
control|(
name|Entry
argument_list|<
name|?
argument_list|>
name|entry
range|:
name|that
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|count
argument_list|(
name|entry
operator|.
name|getElement
argument_list|()
argument_list|)
operator|!=
name|entry
operator|.
name|getCount
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
comment|/**    * {@inheritDoc}    *    *<p>This implementation returns the hash code of {@link    * Multiset#entrySet()}.    */
DECL|method|hashCode ()
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|entrySet
argument_list|()
operator|.
name|hashCode
argument_list|()
return|;
block|}
comment|/**    * {@inheritDoc}    *    *<p>This implementation returns the result of invoking {@code toString} on    * {@link Multiset#entrySet()}.    */
DECL|method|toString ()
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|entrySet
argument_list|()
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

