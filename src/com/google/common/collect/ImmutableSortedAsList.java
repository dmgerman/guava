begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2009 Google Inc.  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.collect
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_comment
comment|/**  * List returned by {@code ImmutableSortedSet.asList()} when the set isn't  * empty.  *  * @author Jared Levy  */
end_comment

begin_class
annotation|@
name|SuppressWarnings
argument_list|(
literal|"serial"
argument_list|)
DECL|class|ImmutableSortedAsList
specifier|final
class|class
name|ImmutableSortedAsList
parameter_list|<
name|E
parameter_list|>
extends|extends
name|RegularImmutableList
argument_list|<
name|E
argument_list|>
block|{
DECL|field|set
specifier|private
specifier|final
specifier|transient
name|ImmutableSortedSet
argument_list|<
name|E
argument_list|>
name|set
decl_stmt|;
DECL|method|ImmutableSortedAsList (Object[] array, int offset, int size, ImmutableSortedSet<E> set)
name|ImmutableSortedAsList
parameter_list|(
name|Object
index|[]
name|array
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|size
parameter_list|,
name|ImmutableSortedSet
argument_list|<
name|E
argument_list|>
name|set
parameter_list|)
block|{
name|super
argument_list|(
name|array
argument_list|,
name|offset
argument_list|,
name|size
argument_list|)
expr_stmt|;
name|this
operator|.
name|set
operator|=
name|set
expr_stmt|;
block|}
comment|// Override contains(), indexOf(), and lastIndexOf() to be O(log N) instead of
comment|// O(N).
DECL|method|contains (Object target)
annotation|@
name|Override
specifier|public
name|boolean
name|contains
parameter_list|(
name|Object
name|target
parameter_list|)
block|{
return|return
name|set
operator|.
name|indexOf
argument_list|(
name|target
argument_list|)
operator|>=
literal|0
return|;
block|}
DECL|method|indexOf (Object target)
annotation|@
name|Override
specifier|public
name|int
name|indexOf
parameter_list|(
name|Object
name|target
parameter_list|)
block|{
return|return
name|set
operator|.
name|indexOf
argument_list|(
name|target
argument_list|)
return|;
block|}
DECL|method|lastIndexOf (Object target)
annotation|@
name|Override
specifier|public
name|int
name|lastIndexOf
parameter_list|(
name|Object
name|target
parameter_list|)
block|{
return|return
name|set
operator|.
name|indexOf
argument_list|(
name|target
argument_list|)
return|;
block|}
comment|// The returned ImmutableSortedAsList maintains the contains(), indexOf(), and
comment|// lastIndexOf() performance benefits.
DECL|method|subList (int fromIndex, int toIndex)
annotation|@
name|Override
specifier|public
name|ImmutableList
argument_list|<
name|E
argument_list|>
name|subList
parameter_list|(
name|int
name|fromIndex
parameter_list|,
name|int
name|toIndex
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkPositionIndexes
argument_list|(
name|fromIndex
argument_list|,
name|toIndex
argument_list|,
name|size
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|(
name|fromIndex
operator|==
name|toIndex
operator|)
condition|?
name|ImmutableList
operator|.
expr|<
name|E
operator|>
name|of
argument_list|()
else|:
operator|new
name|RegularImmutableSortedSet
argument_list|<
name|E
argument_list|>
argument_list|(
name|array
argument_list|()
argument_list|,
name|set
operator|.
name|comparator
argument_list|()
argument_list|,
name|offset
argument_list|()
operator|+
name|fromIndex
argument_list|,
name|offset
argument_list|()
operator|+
name|toIndex
argument_list|)
operator|.
name|asList
argument_list|()
return|;
block|}
comment|// The ImmutableAsList serialized form has the correct behavior.
DECL|method|writeReplace ()
annotation|@
name|Override
name|Object
name|writeReplace
parameter_list|()
block|{
return|return
operator|new
name|ImmutableAsList
operator|.
name|SerializedForm
argument_list|(
name|set
argument_list|)
return|;
block|}
block|}
end_class

end_unit

