begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2008 Google Inc.  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.collect
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
operator|.
name|safeContainsKey
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
operator|.
name|safeGet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtCompatible
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Predicates
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Supplier
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|AbstractCollection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|AbstractSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_comment
comment|/**  * {@link Table} implementation backed by a map that associates row keys with  * column key / value secondary maps. This class provides rapid access to  * records by the row key alone or by both keys, but not by just the column key.  *  *<p>The views returned by {@link #column}, {@link #columnKeySet()}, and {@link  * #columnMap()} have iterators that don't support {@code remove()}. Otherwise,  * all optional operations are supported. Null row keys, columns keys, and  * values are not supported.  *  *<p>Lookups by row key are often faster than lookups by column key, because  * the data is stored in a {@code Map<R, Map<C, V>>}. A method call like {@code  * column(columnKey).get(rowKey)} still runs quickly, since the row key is  * provided. However, {@code column(columnKey).size()} takes longer, since an  * iteration across all row keys occurs.  *  *<p>Note that this implementation is not synchronized. If multiple threads  * access this table concurrently and one of the threads modifies the table, it  * must be synchronized externally.  *  * @author Jared Levy  */
end_comment

begin_class
annotation|@
name|GwtCompatible
DECL|class|StandardTable
class|class
name|StandardTable
parameter_list|<
name|R
parameter_list|,
name|C
parameter_list|,
name|V
parameter_list|>
implements|implements
name|Table
argument_list|<
name|R
argument_list|,
name|C
argument_list|,
name|V
argument_list|>
implements|,
name|Serializable
block|{
DECL|field|backingMap
specifier|final
name|Map
argument_list|<
name|R
argument_list|,
name|Map
argument_list|<
name|C
argument_list|,
name|V
argument_list|>
argument_list|>
name|backingMap
decl_stmt|;
DECL|field|factory
specifier|final
name|Supplier
argument_list|<
name|?
extends|extends
name|Map
argument_list|<
name|C
argument_list|,
name|V
argument_list|>
argument_list|>
name|factory
decl_stmt|;
DECL|method|StandardTable (Map<R, Map<C, V>> backingMap, Supplier<? extends Map<C, V>> factory)
name|StandardTable
parameter_list|(
name|Map
argument_list|<
name|R
argument_list|,
name|Map
argument_list|<
name|C
argument_list|,
name|V
argument_list|>
argument_list|>
name|backingMap
parameter_list|,
name|Supplier
argument_list|<
name|?
extends|extends
name|Map
argument_list|<
name|C
argument_list|,
name|V
argument_list|>
argument_list|>
name|factory
parameter_list|)
block|{
name|this
operator|.
name|backingMap
operator|=
name|backingMap
expr_stmt|;
name|this
operator|.
name|factory
operator|=
name|factory
expr_stmt|;
block|}
comment|// Accessors
DECL|method|contains (@ullable Object rowKey, @Nullable Object columnKey)
specifier|public
name|boolean
name|contains
parameter_list|(
annotation|@
name|Nullable
name|Object
name|rowKey
parameter_list|,
annotation|@
name|Nullable
name|Object
name|columnKey
parameter_list|)
block|{
if|if
condition|(
operator|(
name|rowKey
operator|==
literal|null
operator|)
operator|||
operator|(
name|columnKey
operator|==
literal|null
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|Map
argument_list|<
name|C
argument_list|,
name|V
argument_list|>
name|map
init|=
name|safeGet
argument_list|(
name|backingMap
argument_list|,
name|rowKey
argument_list|)
decl_stmt|;
return|return
name|map
operator|!=
literal|null
operator|&&
name|safeContainsKey
argument_list|(
name|map
argument_list|,
name|columnKey
argument_list|)
return|;
block|}
DECL|method|containsColumn (@ullable Object columnKey)
specifier|public
name|boolean
name|containsColumn
parameter_list|(
annotation|@
name|Nullable
name|Object
name|columnKey
parameter_list|)
block|{
if|if
condition|(
name|columnKey
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
for|for
control|(
name|Map
argument_list|<
name|C
argument_list|,
name|V
argument_list|>
name|map
range|:
name|backingMap
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|safeContainsKey
argument_list|(
name|map
argument_list|,
name|columnKey
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
DECL|method|containsRow (@ullable Object rowKey)
specifier|public
name|boolean
name|containsRow
parameter_list|(
annotation|@
name|Nullable
name|Object
name|rowKey
parameter_list|)
block|{
return|return
name|rowKey
operator|!=
literal|null
operator|&&
name|safeContainsKey
argument_list|(
name|backingMap
argument_list|,
name|rowKey
argument_list|)
return|;
block|}
DECL|method|containsValue (@ullable Object value)
specifier|public
name|boolean
name|containsValue
parameter_list|(
annotation|@
name|Nullable
name|Object
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
for|for
control|(
name|Map
argument_list|<
name|C
argument_list|,
name|V
argument_list|>
name|map
range|:
name|backingMap
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|map
operator|.
name|containsValue
argument_list|(
name|value
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
DECL|method|get (@ullable Object rowKey, @Nullable Object columnKey)
specifier|public
name|V
name|get
parameter_list|(
annotation|@
name|Nullable
name|Object
name|rowKey
parameter_list|,
annotation|@
name|Nullable
name|Object
name|columnKey
parameter_list|)
block|{
if|if
condition|(
operator|(
name|rowKey
operator|==
literal|null
operator|)
operator|||
operator|(
name|columnKey
operator|==
literal|null
operator|)
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Map
argument_list|<
name|C
argument_list|,
name|V
argument_list|>
name|map
init|=
name|safeGet
argument_list|(
name|backingMap
argument_list|,
name|rowKey
argument_list|)
decl_stmt|;
return|return
name|map
operator|==
literal|null
condition|?
literal|null
else|:
name|safeGet
argument_list|(
name|map
argument_list|,
name|columnKey
argument_list|)
return|;
block|}
DECL|method|isEmpty ()
specifier|public
name|boolean
name|isEmpty
parameter_list|()
block|{
return|return
name|backingMap
operator|.
name|isEmpty
argument_list|()
return|;
block|}
DECL|method|size ()
specifier|public
name|int
name|size
parameter_list|()
block|{
name|int
name|size
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Map
argument_list|<
name|C
argument_list|,
name|V
argument_list|>
name|map
range|:
name|backingMap
operator|.
name|values
argument_list|()
control|)
block|{
name|size
operator|+=
name|map
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
return|return
name|size
return|;
block|}
DECL|method|equals (@ullable Object obj)
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
annotation|@
name|Nullable
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|obj
operator|==
name|this
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|obj
operator|instanceof
name|Table
condition|)
block|{
name|Table
argument_list|<
name|?
argument_list|,
name|?
argument_list|,
name|?
argument_list|>
name|other
init|=
operator|(
name|Table
argument_list|<
name|?
argument_list|,
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|obj
decl_stmt|;
return|return
name|cellSet
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|cellSet
argument_list|()
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
DECL|method|hashCode ()
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|cellSet
argument_list|()
operator|.
name|hashCode
argument_list|()
return|;
block|}
comment|/**    * Returns the string representation {@code rowMap().toString()}.    */
DECL|method|toString ()
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|rowMap
argument_list|()
operator|.
name|toString
argument_list|()
return|;
block|}
comment|// Mutators
DECL|method|clear ()
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|backingMap
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
DECL|method|getOrCreate (R rowKey)
specifier|private
name|Map
argument_list|<
name|C
argument_list|,
name|V
argument_list|>
name|getOrCreate
parameter_list|(
name|R
name|rowKey
parameter_list|)
block|{
name|Map
argument_list|<
name|C
argument_list|,
name|V
argument_list|>
name|map
init|=
name|backingMap
operator|.
name|get
argument_list|(
name|rowKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|map
operator|==
literal|null
condition|)
block|{
name|map
operator|=
name|factory
operator|.
name|get
argument_list|()
expr_stmt|;
name|backingMap
operator|.
name|put
argument_list|(
name|rowKey
argument_list|,
name|map
argument_list|)
expr_stmt|;
block|}
return|return
name|map
return|;
block|}
DECL|method|put (R rowKey, C columnKey, V value)
specifier|public
name|V
name|put
parameter_list|(
name|R
name|rowKey
parameter_list|,
name|C
name|columnKey
parameter_list|,
name|V
name|value
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|rowKey
argument_list|)
expr_stmt|;
name|checkNotNull
argument_list|(
name|columnKey
argument_list|)
expr_stmt|;
name|checkNotNull
argument_list|(
name|value
argument_list|)
expr_stmt|;
return|return
name|getOrCreate
argument_list|(
name|rowKey
argument_list|)
operator|.
name|put
argument_list|(
name|columnKey
argument_list|,
name|value
argument_list|)
return|;
block|}
DECL|method|putAll (Table<? extends R, ? extends C, ? extends V> table)
specifier|public
name|void
name|putAll
parameter_list|(
name|Table
argument_list|<
name|?
extends|extends
name|R
argument_list|,
name|?
extends|extends
name|C
argument_list|,
name|?
extends|extends
name|V
argument_list|>
name|table
parameter_list|)
block|{
for|for
control|(
name|Cell
argument_list|<
name|?
extends|extends
name|R
argument_list|,
name|?
extends|extends
name|C
argument_list|,
name|?
extends|extends
name|V
argument_list|>
name|cell
range|:
name|table
operator|.
name|cellSet
argument_list|()
control|)
block|{
name|put
argument_list|(
name|cell
operator|.
name|getRowKey
argument_list|()
argument_list|,
name|cell
operator|.
name|getColumnKey
argument_list|()
argument_list|,
name|cell
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|remove (@ullable Object rowKey, @Nullable Object columnKey)
specifier|public
name|V
name|remove
parameter_list|(
annotation|@
name|Nullable
name|Object
name|rowKey
parameter_list|,
annotation|@
name|Nullable
name|Object
name|columnKey
parameter_list|)
block|{
if|if
condition|(
operator|(
name|rowKey
operator|==
literal|null
operator|)
operator|||
operator|(
name|columnKey
operator|==
literal|null
operator|)
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Map
argument_list|<
name|C
argument_list|,
name|V
argument_list|>
name|map
init|=
name|safeGet
argument_list|(
name|backingMap
argument_list|,
name|rowKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|map
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|V
name|value
init|=
name|map
operator|.
name|remove
argument_list|(
name|columnKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|map
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|backingMap
operator|.
name|remove
argument_list|(
name|rowKey
argument_list|)
expr_stmt|;
block|}
return|return
name|value
return|;
block|}
DECL|method|removeColumn (Object column)
specifier|private
name|Map
argument_list|<
name|R
argument_list|,
name|V
argument_list|>
name|removeColumn
parameter_list|(
name|Object
name|column
parameter_list|)
block|{
name|Map
argument_list|<
name|R
argument_list|,
name|V
argument_list|>
name|output
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|R
argument_list|,
name|V
argument_list|>
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|R
argument_list|,
name|Map
argument_list|<
name|C
argument_list|,
name|V
argument_list|>
argument_list|>
argument_list|>
name|iterator
init|=
name|backingMap
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Entry
argument_list|<
name|R
argument_list|,
name|Map
argument_list|<
name|C
argument_list|,
name|V
argument_list|>
argument_list|>
name|entry
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|V
name|value
init|=
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|remove
argument_list|(
name|column
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|output
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|value
argument_list|)
expr_stmt|;
if|if
condition|(
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|iterator
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
block|}
return|return
name|output
return|;
block|}
DECL|method|containsMapping ( Object rowKey, Object columnKey, Object value)
specifier|private
name|boolean
name|containsMapping
parameter_list|(
name|Object
name|rowKey
parameter_list|,
name|Object
name|columnKey
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
return|return
name|value
operator|!=
literal|null
operator|&&
name|value
operator|.
name|equals
argument_list|(
name|get
argument_list|(
name|rowKey
argument_list|,
name|columnKey
argument_list|)
argument_list|)
return|;
block|}
comment|/** Remove a row key / column key / value mapping, if present. */
DECL|method|removeMapping (Object rowKey, Object columnKey, Object value)
specifier|private
name|boolean
name|removeMapping
parameter_list|(
name|Object
name|rowKey
parameter_list|,
name|Object
name|columnKey
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
if|if
condition|(
name|containsMapping
argument_list|(
name|rowKey
argument_list|,
name|columnKey
argument_list|,
name|value
argument_list|)
condition|)
block|{
name|remove
argument_list|(
name|rowKey
argument_list|,
name|columnKey
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
comment|// Views
comment|/**    * Abstract collection whose {@code isEmpty()} returns whether the table is    * empty and whose {@code clear()} clears all table mappings.    */
DECL|class|TableCollection
specifier|private
specifier|abstract
class|class
name|TableCollection
parameter_list|<
name|T
parameter_list|>
extends|extends
name|AbstractCollection
argument_list|<
name|T
argument_list|>
block|{
DECL|method|isEmpty ()
annotation|@
name|Override
specifier|public
name|boolean
name|isEmpty
parameter_list|()
block|{
return|return
name|backingMap
operator|.
name|isEmpty
argument_list|()
return|;
block|}
DECL|method|clear ()
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|backingMap
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Abstract set whose {@code isEmpty()} returns whether the table is empty and    * whose {@code clear()} clears all table mappings.    */
DECL|class|TableSet
specifier|private
specifier|abstract
class|class
name|TableSet
parameter_list|<
name|T
parameter_list|>
extends|extends
name|AbstractSet
argument_list|<
name|T
argument_list|>
block|{
DECL|method|isEmpty ()
annotation|@
name|Override
specifier|public
name|boolean
name|isEmpty
parameter_list|()
block|{
return|return
name|backingMap
operator|.
name|isEmpty
argument_list|()
return|;
block|}
DECL|method|clear ()
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|backingMap
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
DECL|field|cellSet
specifier|private
specifier|transient
name|CellSet
name|cellSet
decl_stmt|;
comment|/**    * {@inheritDoc}    *    *<p>The set's iterator traverses the mappings for the first row, the    * mappings for the second row, and so on.    *    *<p>Each cell is an immutable snapshot of a row key / column key / value    * mapping, taken at the time the cell is returned by a method call to the    * set or its iterator.    */
DECL|method|cellSet ()
specifier|public
name|Set
argument_list|<
name|Cell
argument_list|<
name|R
argument_list|,
name|C
argument_list|,
name|V
argument_list|>
argument_list|>
name|cellSet
parameter_list|()
block|{
name|CellSet
name|result
init|=
name|cellSet
decl_stmt|;
return|return
operator|(
name|result
operator|==
literal|null
operator|)
condition|?
name|cellSet
operator|=
operator|new
name|CellSet
argument_list|()
else|:
name|result
return|;
block|}
DECL|class|CellSet
specifier|private
class|class
name|CellSet
extends|extends
name|TableSet
argument_list|<
name|Cell
argument_list|<
name|R
argument_list|,
name|C
argument_list|,
name|V
argument_list|>
argument_list|>
block|{
DECL|method|iterator ()
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|Cell
argument_list|<
name|R
argument_list|,
name|C
argument_list|,
name|V
argument_list|>
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
operator|new
name|CellIterator
argument_list|()
return|;
block|}
DECL|method|size ()
annotation|@
name|Override
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|StandardTable
operator|.
name|this
operator|.
name|size
argument_list|()
return|;
block|}
DECL|method|contains (Object obj)
annotation|@
name|Override
specifier|public
name|boolean
name|contains
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|obj
operator|instanceof
name|Cell
condition|)
block|{
name|Cell
argument_list|<
name|?
argument_list|,
name|?
argument_list|,
name|?
argument_list|>
name|cell
init|=
operator|(
name|Cell
argument_list|<
name|?
argument_list|,
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|obj
decl_stmt|;
return|return
name|containsMapping
argument_list|(
name|cell
operator|.
name|getRowKey
argument_list|()
argument_list|,
name|cell
operator|.
name|getColumnKey
argument_list|()
argument_list|,
name|cell
operator|.
name|getValue
argument_list|()
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
DECL|method|remove (Object obj)
annotation|@
name|Override
specifier|public
name|boolean
name|remove
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|obj
operator|instanceof
name|Cell
condition|)
block|{
name|Cell
argument_list|<
name|?
argument_list|,
name|?
argument_list|,
name|?
argument_list|>
name|cell
init|=
operator|(
name|Cell
argument_list|<
name|?
argument_list|,
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|obj
decl_stmt|;
return|return
name|removeMapping
argument_list|(
name|cell
operator|.
name|getRowKey
argument_list|()
argument_list|,
name|cell
operator|.
name|getColumnKey
argument_list|()
argument_list|,
name|cell
operator|.
name|getValue
argument_list|()
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
block|}
DECL|class|CellIterator
specifier|private
class|class
name|CellIterator
implements|implements
name|Iterator
argument_list|<
name|Cell
argument_list|<
name|R
argument_list|,
name|C
argument_list|,
name|V
argument_list|>
argument_list|>
block|{
DECL|field|rowIterator
specifier|final
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|R
argument_list|,
name|Map
argument_list|<
name|C
argument_list|,
name|V
argument_list|>
argument_list|>
argument_list|>
name|rowIterator
init|=
name|backingMap
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
DECL|field|rowEntry
name|Entry
argument_list|<
name|R
argument_list|,
name|Map
argument_list|<
name|C
argument_list|,
name|V
argument_list|>
argument_list|>
name|rowEntry
decl_stmt|;
DECL|field|columnIterator
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|C
argument_list|,
name|V
argument_list|>
argument_list|>
name|columnIterator
init|=
name|Iterators
operator|.
name|emptyModifiableIterator
argument_list|()
decl_stmt|;
DECL|method|hasNext ()
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|rowIterator
operator|.
name|hasNext
argument_list|()
operator|||
name|columnIterator
operator|.
name|hasNext
argument_list|()
return|;
block|}
DECL|method|next ()
specifier|public
name|Cell
argument_list|<
name|R
argument_list|,
name|C
argument_list|,
name|V
argument_list|>
name|next
parameter_list|()
block|{
if|if
condition|(
operator|!
name|columnIterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|rowEntry
operator|=
name|rowIterator
operator|.
name|next
argument_list|()
expr_stmt|;
name|columnIterator
operator|=
name|rowEntry
operator|.
name|getValue
argument_list|()
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
expr_stmt|;
block|}
name|Entry
argument_list|<
name|C
argument_list|,
name|V
argument_list|>
name|columnEntry
init|=
name|columnIterator
operator|.
name|next
argument_list|()
decl_stmt|;
return|return
name|Tables
operator|.
name|immutableCell
argument_list|(
name|rowEntry
operator|.
name|getKey
argument_list|()
argument_list|,
name|columnEntry
operator|.
name|getKey
argument_list|()
argument_list|,
name|columnEntry
operator|.
name|getValue
argument_list|()
argument_list|)
return|;
block|}
DECL|method|remove ()
specifier|public
name|void
name|remove
parameter_list|()
block|{
name|columnIterator
operator|.
name|remove
argument_list|()
expr_stmt|;
if|if
condition|(
name|rowEntry
operator|.
name|getValue
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|rowIterator
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|row (R rowKey)
specifier|public
name|Map
argument_list|<
name|C
argument_list|,
name|V
argument_list|>
name|row
parameter_list|(
name|R
name|rowKey
parameter_list|)
block|{
return|return
operator|new
name|Row
argument_list|(
name|rowKey
argument_list|)
return|;
block|}
DECL|class|Row
specifier|private
class|class
name|Row
extends|extends
name|Maps
operator|.
name|ImprovedAbstractMap
argument_list|<
name|C
argument_list|,
name|V
argument_list|>
block|{
comment|/*      * TODO(jlevy): To avoid making repeated calls to backingMap.get(), this      * class could store a delegate the way AbstractMultimap.WrappedCollection      * does. For that to work, all calls to backingMap.remove() and      * backing.clear() must call clear() on each non-empty removed map.      */
DECL|field|rowKey
specifier|final
name|R
name|rowKey
decl_stmt|;
DECL|method|Row (R rowKey)
name|Row
parameter_list|(
name|R
name|rowKey
parameter_list|)
block|{
name|this
operator|.
name|rowKey
operator|=
name|checkNotNull
argument_list|(
name|rowKey
argument_list|)
expr_stmt|;
block|}
DECL|method|createEntrySet ()
annotation|@
name|Override
specifier|protected
name|Set
argument_list|<
name|Entry
argument_list|<
name|C
argument_list|,
name|V
argument_list|>
argument_list|>
name|createEntrySet
parameter_list|()
block|{
return|return
operator|new
name|RowEntrySet
argument_list|()
return|;
block|}
DECL|method|containsKey (Object key)
annotation|@
name|Override
specifier|public
name|boolean
name|containsKey
parameter_list|(
name|Object
name|key
parameter_list|)
block|{
return|return
name|contains
argument_list|(
name|rowKey
argument_list|,
name|key
argument_list|)
return|;
block|}
DECL|method|get (Object key)
annotation|@
name|Override
specifier|public
name|V
name|get
parameter_list|(
name|Object
name|key
parameter_list|)
block|{
return|return
name|StandardTable
operator|.
name|this
operator|.
name|get
argument_list|(
name|rowKey
argument_list|,
name|key
argument_list|)
return|;
block|}
DECL|method|put (C key, V value)
annotation|@
name|Override
specifier|public
name|V
name|put
parameter_list|(
name|C
name|key
parameter_list|,
name|V
name|value
parameter_list|)
block|{
return|return
name|StandardTable
operator|.
name|this
operator|.
name|put
argument_list|(
name|rowKey
argument_list|,
name|key
argument_list|,
name|value
argument_list|)
return|;
block|}
DECL|method|remove (Object key)
annotation|@
name|Override
specifier|public
name|V
name|remove
parameter_list|(
name|Object
name|key
parameter_list|)
block|{
return|return
name|StandardTable
operator|.
name|this
operator|.
name|remove
argument_list|(
name|rowKey
argument_list|,
name|key
argument_list|)
return|;
block|}
DECL|class|RowEntrySet
specifier|private
class|class
name|RowEntrySet
extends|extends
name|AbstractSet
argument_list|<
name|Entry
argument_list|<
name|C
argument_list|,
name|V
argument_list|>
argument_list|>
block|{
DECL|method|clear ()
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|backingMap
operator|.
name|remove
argument_list|(
name|rowKey
argument_list|)
expr_stmt|;
block|}
DECL|method|contains (Object o)
annotation|@
name|Override
specifier|public
name|boolean
name|contains
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|instanceof
name|Entry
condition|)
block|{
name|Entry
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|entry
init|=
operator|(
name|Entry
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|o
decl_stmt|;
return|return
name|containsMapping
argument_list|(
name|rowKey
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
DECL|method|remove (Object o)
annotation|@
name|Override
specifier|public
name|boolean
name|remove
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|instanceof
name|Entry
condition|)
block|{
name|Entry
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|entry
init|=
operator|(
name|Entry
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|o
decl_stmt|;
return|return
name|removeMapping
argument_list|(
name|rowKey
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
DECL|method|size ()
annotation|@
name|Override
specifier|public
name|int
name|size
parameter_list|()
block|{
name|Map
argument_list|<
name|C
argument_list|,
name|V
argument_list|>
name|map
init|=
name|backingMap
operator|.
name|get
argument_list|(
name|rowKey
argument_list|)
decl_stmt|;
return|return
operator|(
name|map
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|map
operator|.
name|size
argument_list|()
return|;
block|}
DECL|method|iterator ()
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|C
argument_list|,
name|V
argument_list|>
argument_list|>
name|iterator
parameter_list|()
block|{
specifier|final
name|Map
argument_list|<
name|C
argument_list|,
name|V
argument_list|>
name|map
init|=
name|backingMap
operator|.
name|get
argument_list|(
name|rowKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|map
operator|==
literal|null
condition|)
block|{
return|return
name|Iterators
operator|.
name|emptyModifiableIterator
argument_list|()
return|;
block|}
specifier|final
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|C
argument_list|,
name|V
argument_list|>
argument_list|>
name|iterator
init|=
name|map
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
return|return
operator|new
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|C
argument_list|,
name|V
argument_list|>
argument_list|>
argument_list|()
block|{
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|iterator
operator|.
name|hasNext
argument_list|()
return|;
block|}
specifier|public
name|Entry
argument_list|<
name|C
argument_list|,
name|V
argument_list|>
name|next
parameter_list|()
block|{
specifier|final
name|Entry
argument_list|<
name|C
argument_list|,
name|V
argument_list|>
name|entry
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
return|return
operator|new
name|ForwardingMapEntry
argument_list|<
name|C
argument_list|,
name|V
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|Entry
argument_list|<
name|C
argument_list|,
name|V
argument_list|>
name|delegate
parameter_list|()
block|{
return|return
name|entry
return|;
block|}
annotation|@
name|Override
specifier|public
name|V
name|setValue
parameter_list|(
name|V
name|value
parameter_list|)
block|{
return|return
name|super
operator|.
name|setValue
argument_list|(
name|checkNotNull
argument_list|(
name|value
argument_list|)
argument_list|)
return|;
block|}
block|}
return|;
block|}
specifier|public
name|void
name|remove
parameter_list|()
block|{
name|iterator
operator|.
name|remove
argument_list|()
expr_stmt|;
if|if
condition|(
name|map
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|backingMap
operator|.
name|remove
argument_list|(
name|rowKey
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|;
block|}
block|}
block|}
comment|/**    * {@inheritDoc}    *    *<p>The returned map's views have iterators that don't support    * {@code remove()}.    */
DECL|method|column (C columnKey)
specifier|public
name|Map
argument_list|<
name|R
argument_list|,
name|V
argument_list|>
name|column
parameter_list|(
name|C
name|columnKey
parameter_list|)
block|{
return|return
operator|new
name|Column
argument_list|(
name|columnKey
argument_list|)
return|;
block|}
DECL|class|Column
specifier|private
class|class
name|Column
extends|extends
name|Maps
operator|.
name|ImprovedAbstractMap
argument_list|<
name|R
argument_list|,
name|V
argument_list|>
block|{
DECL|field|columnKey
specifier|final
name|C
name|columnKey
decl_stmt|;
DECL|method|Column (C columnKey)
name|Column
parameter_list|(
name|C
name|columnKey
parameter_list|)
block|{
name|this
operator|.
name|columnKey
operator|=
name|checkNotNull
argument_list|(
name|columnKey
argument_list|)
expr_stmt|;
block|}
DECL|method|put (R key, V value)
annotation|@
name|Override
specifier|public
name|V
name|put
parameter_list|(
name|R
name|key
parameter_list|,
name|V
name|value
parameter_list|)
block|{
return|return
name|StandardTable
operator|.
name|this
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|columnKey
argument_list|,
name|value
argument_list|)
return|;
block|}
DECL|method|get (Object key)
annotation|@
name|Override
specifier|public
name|V
name|get
parameter_list|(
name|Object
name|key
parameter_list|)
block|{
return|return
name|StandardTable
operator|.
name|this
operator|.
name|get
argument_list|(
name|key
argument_list|,
name|columnKey
argument_list|)
return|;
block|}
DECL|method|containsKey (Object key)
annotation|@
name|Override
specifier|public
name|boolean
name|containsKey
parameter_list|(
name|Object
name|key
parameter_list|)
block|{
return|return
name|StandardTable
operator|.
name|this
operator|.
name|contains
argument_list|(
name|key
argument_list|,
name|columnKey
argument_list|)
return|;
block|}
DECL|method|remove (Object key)
annotation|@
name|Override
specifier|public
name|V
name|remove
parameter_list|(
name|Object
name|key
parameter_list|)
block|{
return|return
name|StandardTable
operator|.
name|this
operator|.
name|remove
argument_list|(
name|key
argument_list|,
name|columnKey
argument_list|)
return|;
block|}
DECL|method|createEntrySet ()
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|Entry
argument_list|<
name|R
argument_list|,
name|V
argument_list|>
argument_list|>
name|createEntrySet
parameter_list|()
block|{
return|return
operator|new
name|EntrySet
argument_list|()
return|;
block|}
DECL|field|columnValues
name|Values
name|columnValues
decl_stmt|;
DECL|method|values ()
annotation|@
name|Override
specifier|public
name|Collection
argument_list|<
name|V
argument_list|>
name|values
parameter_list|()
block|{
name|Values
name|result
init|=
name|columnValues
decl_stmt|;
return|return
operator|(
name|result
operator|==
literal|null
operator|)
condition|?
name|columnValues
operator|=
operator|new
name|Values
argument_list|()
else|:
name|result
return|;
block|}
comment|/**      * Removes all {@code Column} mappings whose row key and value satisfy the      * given predicate.      */
DECL|method|removePredicate (Predicate<? super Entry<R, V>> predicate)
name|boolean
name|removePredicate
parameter_list|(
name|Predicate
argument_list|<
name|?
super|super
name|Entry
argument_list|<
name|R
argument_list|,
name|V
argument_list|>
argument_list|>
name|predicate
parameter_list|)
block|{
name|boolean
name|changed
init|=
literal|false
decl_stmt|;
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|R
argument_list|,
name|Map
argument_list|<
name|C
argument_list|,
name|V
argument_list|>
argument_list|>
argument_list|>
name|iterator
init|=
name|backingMap
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Entry
argument_list|<
name|R
argument_list|,
name|Map
argument_list|<
name|C
argument_list|,
name|V
argument_list|>
argument_list|>
name|entry
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|C
argument_list|,
name|V
argument_list|>
name|map
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|V
name|value
init|=
name|map
operator|.
name|get
argument_list|(
name|columnKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
operator|&&
name|predicate
operator|.
name|apply
argument_list|(
operator|new
name|ImmutableEntry
argument_list|<
name|R
argument_list|,
name|V
argument_list|>
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|value
argument_list|)
argument_list|)
condition|)
block|{
name|map
operator|.
name|remove
argument_list|(
name|columnKey
argument_list|)
expr_stmt|;
name|changed
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|map
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|iterator
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
block|}
return|return
name|changed
return|;
block|}
DECL|class|EntrySet
class|class
name|EntrySet
extends|extends
name|AbstractSet
argument_list|<
name|Entry
argument_list|<
name|R
argument_list|,
name|V
argument_list|>
argument_list|>
block|{
DECL|method|iterator ()
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|R
argument_list|,
name|V
argument_list|>
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
operator|new
name|EntrySetIterator
argument_list|()
return|;
block|}
DECL|method|size ()
annotation|@
name|Override
specifier|public
name|int
name|size
parameter_list|()
block|{
name|int
name|size
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Map
argument_list|<
name|C
argument_list|,
name|V
argument_list|>
name|map
range|:
name|backingMap
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|map
operator|.
name|containsKey
argument_list|(
name|columnKey
argument_list|)
condition|)
block|{
name|size
operator|++
expr_stmt|;
block|}
block|}
return|return
name|size
return|;
block|}
DECL|method|isEmpty ()
annotation|@
name|Override
specifier|public
name|boolean
name|isEmpty
parameter_list|()
block|{
return|return
operator|!
name|containsColumn
argument_list|(
name|columnKey
argument_list|)
return|;
block|}
DECL|method|clear ()
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|Predicate
argument_list|<
name|Entry
argument_list|<
name|R
argument_list|,
name|V
argument_list|>
argument_list|>
name|predicate
init|=
name|Predicates
operator|.
name|alwaysTrue
argument_list|()
decl_stmt|;
name|removePredicate
argument_list|(
name|predicate
argument_list|)
expr_stmt|;
block|}
DECL|method|contains (Object o)
annotation|@
name|Override
specifier|public
name|boolean
name|contains
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|instanceof
name|Entry
condition|)
block|{
name|Entry
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|entry
init|=
operator|(
name|Entry
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|o
decl_stmt|;
return|return
name|containsMapping
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|columnKey
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
DECL|method|remove (Object obj)
annotation|@
name|Override
specifier|public
name|boolean
name|remove
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|obj
operator|instanceof
name|Entry
condition|)
block|{
name|Entry
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|entry
init|=
operator|(
name|Entry
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|obj
decl_stmt|;
return|return
name|removeMapping
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|columnKey
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
DECL|method|removeAll (Collection<?> c)
annotation|@
name|Override
specifier|public
name|boolean
name|removeAll
parameter_list|(
name|Collection
argument_list|<
name|?
argument_list|>
name|c
parameter_list|)
block|{
name|boolean
name|changed
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Object
name|obj
range|:
name|c
control|)
block|{
name|changed
operator||=
name|remove
argument_list|(
name|obj
argument_list|)
expr_stmt|;
block|}
return|return
name|changed
return|;
block|}
DECL|method|retainAll (Collection<?> c)
annotation|@
name|Override
specifier|public
name|boolean
name|retainAll
parameter_list|(
name|Collection
argument_list|<
name|?
argument_list|>
name|c
parameter_list|)
block|{
return|return
name|removePredicate
argument_list|(
name|Predicates
operator|.
name|not
argument_list|(
name|Predicates
operator|.
name|in
argument_list|(
name|c
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
block|}
DECL|class|EntrySetIterator
class|class
name|EntrySetIterator
extends|extends
name|AbstractIterator
argument_list|<
name|Entry
argument_list|<
name|R
argument_list|,
name|V
argument_list|>
argument_list|>
block|{
DECL|field|iterator
specifier|final
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|R
argument_list|,
name|Map
argument_list|<
name|C
argument_list|,
name|V
argument_list|>
argument_list|>
argument_list|>
name|iterator
init|=
name|backingMap
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
DECL|method|computeNext ()
annotation|@
name|Override
specifier|protected
name|Entry
argument_list|<
name|R
argument_list|,
name|V
argument_list|>
name|computeNext
parameter_list|()
block|{
while|while
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
specifier|final
name|Entry
argument_list|<
name|R
argument_list|,
name|Map
argument_list|<
name|C
argument_list|,
name|V
argument_list|>
argument_list|>
name|entry
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|containsKey
argument_list|(
name|columnKey
argument_list|)
condition|)
block|{
return|return
operator|new
name|AbstractMapEntry
argument_list|<
name|R
argument_list|,
name|V
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|R
name|getKey
parameter_list|()
block|{
return|return
name|entry
operator|.
name|getKey
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|V
name|getValue
parameter_list|()
block|{
return|return
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|get
argument_list|(
name|columnKey
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|V
name|setValue
parameter_list|(
name|V
name|value
parameter_list|)
block|{
return|return
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|put
argument_list|(
name|columnKey
argument_list|,
name|checkNotNull
argument_list|(
name|value
argument_list|)
argument_list|)
return|;
block|}
block|}
return|;
block|}
block|}
return|return
name|endOfData
argument_list|()
return|;
block|}
block|}
DECL|field|keySet
name|KeySet
name|keySet
decl_stmt|;
DECL|method|keySet ()
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|R
argument_list|>
name|keySet
parameter_list|()
block|{
name|KeySet
name|result
init|=
name|keySet
decl_stmt|;
return|return
name|result
operator|==
literal|null
condition|?
name|keySet
operator|=
operator|new
name|KeySet
argument_list|()
else|:
name|result
return|;
block|}
DECL|class|KeySet
class|class
name|KeySet
extends|extends
name|AbstractSet
argument_list|<
name|R
argument_list|>
block|{
DECL|method|iterator ()
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|R
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
name|keyIteratorImpl
argument_list|(
name|Column
operator|.
name|this
argument_list|)
return|;
block|}
DECL|method|size ()
annotation|@
name|Override
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|entrySet
argument_list|()
operator|.
name|size
argument_list|()
return|;
block|}
DECL|method|isEmpty ()
annotation|@
name|Override
specifier|public
name|boolean
name|isEmpty
parameter_list|()
block|{
return|return
operator|!
name|containsColumn
argument_list|(
name|columnKey
argument_list|)
return|;
block|}
DECL|method|contains (Object obj)
annotation|@
name|Override
specifier|public
name|boolean
name|contains
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
return|return
name|StandardTable
operator|.
name|this
operator|.
name|contains
argument_list|(
name|obj
argument_list|,
name|columnKey
argument_list|)
return|;
block|}
DECL|method|remove (Object obj)
annotation|@
name|Override
specifier|public
name|boolean
name|remove
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
return|return
name|StandardTable
operator|.
name|this
operator|.
name|remove
argument_list|(
name|obj
argument_list|,
name|columnKey
argument_list|)
operator|!=
literal|null
return|;
block|}
DECL|method|clear ()
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|entrySet
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
DECL|method|removeAll (final Collection<?> c)
annotation|@
name|Override
specifier|public
name|boolean
name|removeAll
parameter_list|(
specifier|final
name|Collection
argument_list|<
name|?
argument_list|>
name|c
parameter_list|)
block|{
name|boolean
name|changed
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Object
name|obj
range|:
name|c
control|)
block|{
name|changed
operator||=
name|remove
argument_list|(
name|obj
argument_list|)
expr_stmt|;
block|}
return|return
name|changed
return|;
block|}
DECL|method|retainAll (final Collection<?> c)
annotation|@
name|Override
specifier|public
name|boolean
name|retainAll
parameter_list|(
specifier|final
name|Collection
argument_list|<
name|?
argument_list|>
name|c
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|Predicate
argument_list|<
name|Entry
argument_list|<
name|R
argument_list|,
name|V
argument_list|>
argument_list|>
name|predicate
init|=
operator|new
name|Predicate
argument_list|<
name|Entry
argument_list|<
name|R
argument_list|,
name|V
argument_list|>
argument_list|>
argument_list|()
block|{
specifier|public
name|boolean
name|apply
parameter_list|(
name|Entry
argument_list|<
name|R
argument_list|,
name|V
argument_list|>
name|entry
parameter_list|)
block|{
return|return
operator|!
name|c
operator|.
name|contains
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
return|;
block|}
block|}
decl_stmt|;
return|return
name|removePredicate
argument_list|(
name|predicate
argument_list|)
return|;
block|}
block|}
DECL|class|Values
class|class
name|Values
extends|extends
name|AbstractCollection
argument_list|<
name|V
argument_list|>
block|{
DECL|method|iterator ()
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|V
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
name|valueIteratorImpl
argument_list|(
name|Column
operator|.
name|this
argument_list|)
return|;
block|}
DECL|method|size ()
annotation|@
name|Override
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|entrySet
argument_list|()
operator|.
name|size
argument_list|()
return|;
block|}
DECL|method|isEmpty ()
annotation|@
name|Override
specifier|public
name|boolean
name|isEmpty
parameter_list|()
block|{
return|return
operator|!
name|containsColumn
argument_list|(
name|columnKey
argument_list|)
return|;
block|}
DECL|method|clear ()
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|entrySet
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
DECL|method|remove (Object obj)
annotation|@
name|Override
specifier|public
name|boolean
name|remove
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|obj
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
name|Iterator
argument_list|<
name|Map
argument_list|<
name|C
argument_list|,
name|V
argument_list|>
argument_list|>
name|iterator
init|=
name|backingMap
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Map
argument_list|<
name|C
argument_list|,
name|V
argument_list|>
name|map
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|map
operator|.
name|entrySet
argument_list|()
operator|.
name|remove
argument_list|(
operator|new
name|ImmutableEntry
argument_list|<
name|C
argument_list|,
name|Object
argument_list|>
argument_list|(
name|columnKey
argument_list|,
name|obj
argument_list|)
argument_list|)
condition|)
block|{
if|if
condition|(
name|map
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|iterator
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
DECL|method|removeAll (final Collection<?> c)
annotation|@
name|Override
specifier|public
name|boolean
name|removeAll
parameter_list|(
specifier|final
name|Collection
argument_list|<
name|?
argument_list|>
name|c
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|Predicate
argument_list|<
name|Entry
argument_list|<
name|R
argument_list|,
name|V
argument_list|>
argument_list|>
name|predicate
init|=
operator|new
name|Predicate
argument_list|<
name|Entry
argument_list|<
name|R
argument_list|,
name|V
argument_list|>
argument_list|>
argument_list|()
block|{
specifier|public
name|boolean
name|apply
parameter_list|(
name|Entry
argument_list|<
name|R
argument_list|,
name|V
argument_list|>
name|entry
parameter_list|)
block|{
return|return
name|c
operator|.
name|contains
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
return|;
block|}
block|}
decl_stmt|;
return|return
name|removePredicate
argument_list|(
name|predicate
argument_list|)
return|;
block|}
DECL|method|retainAll (final Collection<?> c)
annotation|@
name|Override
specifier|public
name|boolean
name|retainAll
parameter_list|(
specifier|final
name|Collection
argument_list|<
name|?
argument_list|>
name|c
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|Predicate
argument_list|<
name|Entry
argument_list|<
name|R
argument_list|,
name|V
argument_list|>
argument_list|>
name|predicate
init|=
operator|new
name|Predicate
argument_list|<
name|Entry
argument_list|<
name|R
argument_list|,
name|V
argument_list|>
argument_list|>
argument_list|()
block|{
specifier|public
name|boolean
name|apply
parameter_list|(
name|Entry
argument_list|<
name|R
argument_list|,
name|V
argument_list|>
name|entry
parameter_list|)
block|{
return|return
operator|!
name|c
operator|.
name|contains
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
return|;
block|}
block|}
decl_stmt|;
return|return
name|removePredicate
argument_list|(
name|predicate
argument_list|)
return|;
block|}
block|}
block|}
DECL|field|rowKeySet
specifier|private
specifier|transient
name|RowKeySet
name|rowKeySet
decl_stmt|;
DECL|method|rowKeySet ()
specifier|public
name|Set
argument_list|<
name|R
argument_list|>
name|rowKeySet
parameter_list|()
block|{
name|Set
argument_list|<
name|R
argument_list|>
name|result
init|=
name|rowKeySet
decl_stmt|;
return|return
operator|(
name|result
operator|==
literal|null
operator|)
condition|?
name|rowKeySet
operator|=
operator|new
name|RowKeySet
argument_list|()
else|:
name|result
return|;
block|}
DECL|class|RowKeySet
class|class
name|RowKeySet
extends|extends
name|TableSet
argument_list|<
name|R
argument_list|>
block|{
DECL|method|iterator ()
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|R
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
name|keyIteratorImpl
argument_list|(
name|rowMap
argument_list|()
argument_list|)
return|;
block|}
DECL|method|size ()
annotation|@
name|Override
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|backingMap
operator|.
name|size
argument_list|()
return|;
block|}
DECL|method|contains (Object obj)
annotation|@
name|Override
specifier|public
name|boolean
name|contains
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
return|return
name|containsRow
argument_list|(
name|obj
argument_list|)
return|;
block|}
DECL|method|remove (Object obj)
annotation|@
name|Override
specifier|public
name|boolean
name|remove
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
return|return
operator|(
name|obj
operator|!=
literal|null
operator|)
operator|&&
name|backingMap
operator|.
name|remove
argument_list|(
name|obj
argument_list|)
operator|!=
literal|null
return|;
block|}
block|}
DECL|field|columnKeySet
specifier|private
specifier|transient
name|Set
argument_list|<
name|C
argument_list|>
name|columnKeySet
decl_stmt|;
comment|/**    * {@inheritDoc}    *    *<p>The returned set has an iterator that does not support {@code remove()}.    *    *<p>The set's iterator traverses the columns of the first row, the    * columns of the second row, etc., skipping any columns that have    * appeared previously.    */
DECL|method|columnKeySet ()
specifier|public
name|Set
argument_list|<
name|C
argument_list|>
name|columnKeySet
parameter_list|()
block|{
name|Set
argument_list|<
name|C
argument_list|>
name|result
init|=
name|columnKeySet
decl_stmt|;
return|return
operator|(
name|result
operator|==
literal|null
operator|)
condition|?
name|columnKeySet
operator|=
operator|new
name|ColumnKeySet
argument_list|()
else|:
name|result
return|;
block|}
DECL|class|ColumnKeySet
specifier|private
class|class
name|ColumnKeySet
extends|extends
name|TableSet
argument_list|<
name|C
argument_list|>
block|{
DECL|method|iterator ()
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|C
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
operator|new
name|ColumnKeyIterator
argument_list|()
return|;
block|}
DECL|method|size ()
annotation|@
name|Override
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|Iterators
operator|.
name|size
argument_list|(
name|iterator
argument_list|()
argument_list|)
return|;
block|}
DECL|method|remove (Object obj)
annotation|@
name|Override
specifier|public
name|boolean
name|remove
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|obj
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
name|boolean
name|changed
init|=
literal|false
decl_stmt|;
name|Iterator
argument_list|<
name|Map
argument_list|<
name|C
argument_list|,
name|V
argument_list|>
argument_list|>
name|iterator
init|=
name|backingMap
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Map
argument_list|<
name|C
argument_list|,
name|V
argument_list|>
name|map
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|map
operator|.
name|keySet
argument_list|()
operator|.
name|remove
argument_list|(
name|obj
argument_list|)
condition|)
block|{
name|changed
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|map
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|iterator
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
block|}
return|return
name|changed
return|;
block|}
DECL|method|removeAll (Collection<?> c)
annotation|@
name|Override
specifier|public
name|boolean
name|removeAll
parameter_list|(
name|Collection
argument_list|<
name|?
argument_list|>
name|c
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|boolean
name|changed
init|=
literal|false
decl_stmt|;
name|Iterator
argument_list|<
name|Map
argument_list|<
name|C
argument_list|,
name|V
argument_list|>
argument_list|>
name|iterator
init|=
name|backingMap
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Map
argument_list|<
name|C
argument_list|,
name|V
argument_list|>
name|map
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
comment|// map.keySet().removeAll(c) can throw a NPE when map is a TreeMap with
comment|// natural ordering and c contains a null.
if|if
condition|(
name|Iterators
operator|.
name|removeAll
argument_list|(
name|map
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
argument_list|,
name|c
argument_list|)
condition|)
block|{
name|changed
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|map
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|iterator
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
block|}
return|return
name|changed
return|;
block|}
DECL|method|retainAll (Collection<?> c)
annotation|@
name|Override
specifier|public
name|boolean
name|retainAll
parameter_list|(
name|Collection
argument_list|<
name|?
argument_list|>
name|c
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|boolean
name|changed
init|=
literal|false
decl_stmt|;
name|Iterator
argument_list|<
name|Map
argument_list|<
name|C
argument_list|,
name|V
argument_list|>
argument_list|>
name|iterator
init|=
name|backingMap
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Map
argument_list|<
name|C
argument_list|,
name|V
argument_list|>
name|map
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|map
operator|.
name|keySet
argument_list|()
operator|.
name|retainAll
argument_list|(
name|c
argument_list|)
condition|)
block|{
name|changed
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|map
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|iterator
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
block|}
return|return
name|changed
return|;
block|}
DECL|method|contains (Object obj)
annotation|@
name|Override
specifier|public
name|boolean
name|contains
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|obj
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
for|for
control|(
name|Map
argument_list|<
name|C
argument_list|,
name|V
argument_list|>
name|map
range|:
name|backingMap
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|map
operator|.
name|containsKey
argument_list|(
name|obj
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
block|}
DECL|class|ColumnKeyIterator
specifier|private
class|class
name|ColumnKeyIterator
extends|extends
name|AbstractIterator
argument_list|<
name|C
argument_list|>
block|{
comment|// Use the same map type to support TreeMaps with comparators that aren't
comment|// consistent with equals().
DECL|field|seen
specifier|final
name|Map
argument_list|<
name|C
argument_list|,
name|V
argument_list|>
name|seen
init|=
name|factory
operator|.
name|get
argument_list|()
decl_stmt|;
DECL|field|mapIterator
specifier|final
name|Iterator
argument_list|<
name|Map
argument_list|<
name|C
argument_list|,
name|V
argument_list|>
argument_list|>
name|mapIterator
init|=
name|backingMap
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
DECL|field|entryIterator
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|C
argument_list|,
name|V
argument_list|>
argument_list|>
name|entryIterator
init|=
name|Iterators
operator|.
name|emptyIterator
argument_list|()
decl_stmt|;
DECL|method|computeNext ()
annotation|@
name|Override
specifier|protected
name|C
name|computeNext
parameter_list|()
block|{
while|while
condition|(
literal|true
condition|)
block|{
if|if
condition|(
name|entryIterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Entry
argument_list|<
name|C
argument_list|,
name|V
argument_list|>
name|entry
init|=
name|entryIterator
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|seen
operator|.
name|containsKey
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
block|{
name|seen
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|entry
operator|.
name|getKey
argument_list|()
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|mapIterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|entryIterator
operator|=
name|mapIterator
operator|.
name|next
argument_list|()
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
expr_stmt|;
block|}
else|else
block|{
return|return
name|endOfData
argument_list|()
return|;
block|}
block|}
block|}
block|}
DECL|field|values
specifier|private
specifier|transient
name|Values
name|values
decl_stmt|;
comment|/**    * {@inheritDoc}    *    *<p>The collection's iterator traverses the values for the first row,    * the values for the second row, and so on.    */
DECL|method|values ()
specifier|public
name|Collection
argument_list|<
name|V
argument_list|>
name|values
parameter_list|()
block|{
name|Values
name|result
init|=
name|values
decl_stmt|;
return|return
operator|(
name|result
operator|==
literal|null
operator|)
condition|?
name|values
operator|=
operator|new
name|Values
argument_list|()
else|:
name|result
return|;
block|}
DECL|class|Values
specifier|private
class|class
name|Values
extends|extends
name|TableCollection
argument_list|<
name|V
argument_list|>
block|{
DECL|method|iterator ()
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|V
argument_list|>
name|iterator
parameter_list|()
block|{
specifier|final
name|Iterator
argument_list|<
name|Cell
argument_list|<
name|R
argument_list|,
name|C
argument_list|,
name|V
argument_list|>
argument_list|>
name|cellIterator
init|=
name|cellSet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
return|return
operator|new
name|Iterator
argument_list|<
name|V
argument_list|>
argument_list|()
block|{
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|cellIterator
operator|.
name|hasNext
argument_list|()
return|;
block|}
specifier|public
name|V
name|next
parameter_list|()
block|{
return|return
name|cellIterator
operator|.
name|next
argument_list|()
operator|.
name|getValue
argument_list|()
return|;
block|}
specifier|public
name|void
name|remove
parameter_list|()
block|{
name|cellIterator
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
return|;
block|}
DECL|method|size ()
annotation|@
name|Override
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|StandardTable
operator|.
name|this
operator|.
name|size
argument_list|()
return|;
block|}
block|}
DECL|field|rowMap
specifier|private
specifier|transient
name|RowMap
name|rowMap
decl_stmt|;
DECL|method|rowMap ()
specifier|public
name|Map
argument_list|<
name|R
argument_list|,
name|Map
argument_list|<
name|C
argument_list|,
name|V
argument_list|>
argument_list|>
name|rowMap
parameter_list|()
block|{
name|RowMap
name|result
init|=
name|rowMap
decl_stmt|;
return|return
operator|(
name|result
operator|==
literal|null
operator|)
condition|?
name|rowMap
operator|=
operator|new
name|RowMap
argument_list|()
else|:
name|result
return|;
block|}
DECL|class|RowMap
class|class
name|RowMap
extends|extends
name|Maps
operator|.
name|ImprovedAbstractMap
argument_list|<
name|R
argument_list|,
name|Map
argument_list|<
name|C
argument_list|,
name|V
argument_list|>
argument_list|>
block|{
DECL|method|containsKey (Object key)
annotation|@
name|Override
specifier|public
name|boolean
name|containsKey
parameter_list|(
name|Object
name|key
parameter_list|)
block|{
return|return
name|containsRow
argument_list|(
name|key
argument_list|)
return|;
block|}
comment|// performing cast only when key is in backing map and has the correct type
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|get (Object key)
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|C
argument_list|,
name|V
argument_list|>
name|get
parameter_list|(
name|Object
name|key
parameter_list|)
block|{
return|return
name|containsRow
argument_list|(
name|key
argument_list|)
condition|?
name|row
argument_list|(
operator|(
name|R
operator|)
name|key
argument_list|)
else|:
literal|null
return|;
block|}
DECL|method|keySet ()
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|R
argument_list|>
name|keySet
parameter_list|()
block|{
return|return
name|rowKeySet
argument_list|()
return|;
block|}
DECL|method|remove (Object key)
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|C
argument_list|,
name|V
argument_list|>
name|remove
parameter_list|(
name|Object
name|key
parameter_list|)
block|{
return|return
operator|(
name|key
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|backingMap
operator|.
name|remove
argument_list|(
name|key
argument_list|)
return|;
block|}
DECL|method|createEntrySet ()
annotation|@
name|Override
specifier|protected
name|Set
argument_list|<
name|Entry
argument_list|<
name|R
argument_list|,
name|Map
argument_list|<
name|C
argument_list|,
name|V
argument_list|>
argument_list|>
argument_list|>
name|createEntrySet
parameter_list|()
block|{
return|return
operator|new
name|EntrySet
argument_list|()
return|;
block|}
DECL|class|EntrySet
class|class
name|EntrySet
extends|extends
name|TableSet
argument_list|<
name|Entry
argument_list|<
name|R
argument_list|,
name|Map
argument_list|<
name|C
argument_list|,
name|V
argument_list|>
argument_list|>
argument_list|>
block|{
DECL|method|iterator ()
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|R
argument_list|,
name|Map
argument_list|<
name|C
argument_list|,
name|V
argument_list|>
argument_list|>
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
operator|new
name|EntryIterator
argument_list|()
return|;
block|}
DECL|method|size ()
annotation|@
name|Override
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|backingMap
operator|.
name|size
argument_list|()
return|;
block|}
DECL|method|contains (Object obj)
annotation|@
name|Override
specifier|public
name|boolean
name|contains
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|obj
operator|instanceof
name|Entry
condition|)
block|{
name|Entry
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|entry
init|=
operator|(
name|Entry
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|obj
decl_stmt|;
return|return
name|entry
operator|.
name|getKey
argument_list|()
operator|!=
literal|null
operator|&&
name|entry
operator|.
name|getValue
argument_list|()
operator|instanceof
name|Map
operator|&&
name|Collections2
operator|.
name|safeContains
argument_list|(
name|backingMap
operator|.
name|entrySet
argument_list|()
argument_list|,
name|entry
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
DECL|method|remove (Object obj)
annotation|@
name|Override
specifier|public
name|boolean
name|remove
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|obj
operator|instanceof
name|Entry
condition|)
block|{
name|Entry
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|entry
init|=
operator|(
name|Entry
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|obj
decl_stmt|;
return|return
name|entry
operator|.
name|getKey
argument_list|()
operator|!=
literal|null
operator|&&
name|entry
operator|.
name|getValue
argument_list|()
operator|instanceof
name|Map
operator|&&
name|backingMap
operator|.
name|entrySet
argument_list|()
operator|.
name|remove
argument_list|(
name|entry
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
block|}
DECL|class|EntryIterator
class|class
name|EntryIterator
implements|implements
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|R
argument_list|,
name|Map
argument_list|<
name|C
argument_list|,
name|V
argument_list|>
argument_list|>
argument_list|>
block|{
DECL|field|delegate
specifier|final
name|Iterator
argument_list|<
name|R
argument_list|>
name|delegate
init|=
name|backingMap
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
DECL|method|hasNext ()
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|delegate
operator|.
name|hasNext
argument_list|()
return|;
block|}
DECL|method|next ()
specifier|public
name|Entry
argument_list|<
name|R
argument_list|,
name|Map
argument_list|<
name|C
argument_list|,
name|V
argument_list|>
argument_list|>
name|next
parameter_list|()
block|{
name|R
name|rowKey
init|=
name|delegate
operator|.
name|next
argument_list|()
decl_stmt|;
return|return
operator|new
name|ImmutableEntry
argument_list|<
name|R
argument_list|,
name|Map
argument_list|<
name|C
argument_list|,
name|V
argument_list|>
argument_list|>
argument_list|(
name|rowKey
argument_list|,
name|row
argument_list|(
name|rowKey
argument_list|)
argument_list|)
return|;
block|}
DECL|method|remove ()
specifier|public
name|void
name|remove
parameter_list|()
block|{
name|delegate
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|field|columnMap
specifier|private
specifier|transient
name|ColumnMap
name|columnMap
decl_stmt|;
DECL|method|columnMap ()
specifier|public
name|Map
argument_list|<
name|C
argument_list|,
name|Map
argument_list|<
name|R
argument_list|,
name|V
argument_list|>
argument_list|>
name|columnMap
parameter_list|()
block|{
name|ColumnMap
name|result
init|=
name|columnMap
decl_stmt|;
return|return
operator|(
name|result
operator|==
literal|null
operator|)
condition|?
name|columnMap
operator|=
operator|new
name|ColumnMap
argument_list|()
else|:
name|result
return|;
block|}
DECL|class|ColumnMap
specifier|private
class|class
name|ColumnMap
extends|extends
name|Maps
operator|.
name|ImprovedAbstractMap
argument_list|<
name|C
argument_list|,
name|Map
argument_list|<
name|R
argument_list|,
name|V
argument_list|>
argument_list|>
block|{
comment|// The cast to C occurs only when the key is in the map, implying that it
comment|// has the correct type.
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|get (Object key)
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|R
argument_list|,
name|V
argument_list|>
name|get
parameter_list|(
name|Object
name|key
parameter_list|)
block|{
return|return
name|containsColumn
argument_list|(
name|key
argument_list|)
condition|?
name|column
argument_list|(
operator|(
name|C
operator|)
name|key
argument_list|)
else|:
literal|null
return|;
block|}
DECL|method|containsKey (Object key)
annotation|@
name|Override
specifier|public
name|boolean
name|containsKey
parameter_list|(
name|Object
name|key
parameter_list|)
block|{
return|return
name|containsColumn
argument_list|(
name|key
argument_list|)
return|;
block|}
DECL|method|remove (Object key)
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|R
argument_list|,
name|V
argument_list|>
name|remove
parameter_list|(
name|Object
name|key
parameter_list|)
block|{
return|return
name|containsColumn
argument_list|(
name|key
argument_list|)
condition|?
name|removeColumn
argument_list|(
name|key
argument_list|)
else|:
literal|null
return|;
block|}
DECL|method|createEntrySet ()
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|Entry
argument_list|<
name|C
argument_list|,
name|Map
argument_list|<
name|R
argument_list|,
name|V
argument_list|>
argument_list|>
argument_list|>
name|createEntrySet
parameter_list|()
block|{
return|return
operator|new
name|ColumnMapEntrySet
argument_list|()
return|;
block|}
DECL|method|keySet ()
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|C
argument_list|>
name|keySet
parameter_list|()
block|{
return|return
name|columnKeySet
argument_list|()
return|;
block|}
DECL|field|columnMapValues
name|ColumnMapValues
name|columnMapValues
decl_stmt|;
DECL|method|values ()
annotation|@
name|Override
specifier|public
name|Collection
argument_list|<
name|Map
argument_list|<
name|R
argument_list|,
name|V
argument_list|>
argument_list|>
name|values
parameter_list|()
block|{
name|ColumnMapValues
name|result
init|=
name|columnMapValues
decl_stmt|;
return|return
operator|(
name|result
operator|==
literal|null
operator|)
condition|?
name|columnMapValues
operator|=
operator|new
name|ColumnMapValues
argument_list|()
else|:
name|result
return|;
block|}
DECL|class|ColumnMapEntrySet
class|class
name|ColumnMapEntrySet
extends|extends
name|TableSet
argument_list|<
name|Entry
argument_list|<
name|C
argument_list|,
name|Map
argument_list|<
name|R
argument_list|,
name|V
argument_list|>
argument_list|>
argument_list|>
block|{
DECL|method|iterator ()
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|C
argument_list|,
name|Map
argument_list|<
name|R
argument_list|,
name|V
argument_list|>
argument_list|>
argument_list|>
name|iterator
parameter_list|()
block|{
specifier|final
name|Iterator
argument_list|<
name|C
argument_list|>
name|columnIterator
init|=
name|columnKeySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
return|return
operator|new
name|UnmodifiableIterator
argument_list|<
name|Entry
argument_list|<
name|C
argument_list|,
name|Map
argument_list|<
name|R
argument_list|,
name|V
argument_list|>
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|columnIterator
operator|.
name|hasNext
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Entry
argument_list|<
name|C
argument_list|,
name|Map
argument_list|<
name|R
argument_list|,
name|V
argument_list|>
argument_list|>
name|next
parameter_list|()
block|{
name|C
name|columnKey
init|=
name|columnIterator
operator|.
name|next
argument_list|()
decl_stmt|;
return|return
operator|new
name|ImmutableEntry
argument_list|<
name|C
argument_list|,
name|Map
argument_list|<
name|R
argument_list|,
name|V
argument_list|>
argument_list|>
argument_list|(
name|columnKey
argument_list|,
name|column
argument_list|(
name|columnKey
argument_list|)
argument_list|)
return|;
block|}
block|}
return|;
block|}
DECL|method|size ()
annotation|@
name|Override
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|columnKeySet
argument_list|()
operator|.
name|size
argument_list|()
return|;
block|}
DECL|method|contains (Object obj)
annotation|@
name|Override
specifier|public
name|boolean
name|contains
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|obj
operator|instanceof
name|Entry
condition|)
block|{
name|Entry
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|entry
init|=
operator|(
name|Entry
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|obj
decl_stmt|;
if|if
condition|(
name|containsColumn
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
block|{
comment|// The cast to C occurs only when the key is in the map, implying
comment|// that it has the correct type.
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|C
name|columnKey
init|=
operator|(
name|C
operator|)
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
return|return
name|get
argument_list|(
name|columnKey
argument_list|)
operator|.
name|equals
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
DECL|method|remove (Object obj)
annotation|@
name|Override
specifier|public
name|boolean
name|remove
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|contains
argument_list|(
name|obj
argument_list|)
condition|)
block|{
name|Entry
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|entry
init|=
operator|(
name|Entry
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|obj
decl_stmt|;
name|removeColumn
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
DECL|method|removeAll (Collection<?> c)
annotation|@
name|Override
specifier|public
name|boolean
name|removeAll
parameter_list|(
name|Collection
argument_list|<
name|?
argument_list|>
name|c
parameter_list|)
block|{
name|boolean
name|changed
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Object
name|obj
range|:
name|c
control|)
block|{
name|changed
operator||=
name|remove
argument_list|(
name|obj
argument_list|)
expr_stmt|;
block|}
return|return
name|changed
return|;
block|}
DECL|method|retainAll (Collection<?> c)
annotation|@
name|Override
specifier|public
name|boolean
name|retainAll
parameter_list|(
name|Collection
argument_list|<
name|?
argument_list|>
name|c
parameter_list|)
block|{
name|boolean
name|changed
init|=
literal|false
decl_stmt|;
for|for
control|(
name|C
name|columnKey
range|:
name|Lists
operator|.
name|newArrayList
argument_list|(
name|columnKeySet
argument_list|()
operator|.
name|iterator
argument_list|()
argument_list|)
control|)
block|{
if|if
condition|(
operator|!
name|c
operator|.
name|contains
argument_list|(
operator|new
name|ImmutableEntry
argument_list|<
name|C
argument_list|,
name|Map
argument_list|<
name|R
argument_list|,
name|V
argument_list|>
argument_list|>
argument_list|(
name|columnKey
argument_list|,
name|column
argument_list|(
name|columnKey
argument_list|)
argument_list|)
argument_list|)
condition|)
block|{
name|removeColumn
argument_list|(
name|columnKey
argument_list|)
expr_stmt|;
name|changed
operator|=
literal|true
expr_stmt|;
block|}
block|}
return|return
name|changed
return|;
block|}
block|}
DECL|class|ColumnMapValues
specifier|private
class|class
name|ColumnMapValues
extends|extends
name|TableCollection
argument_list|<
name|Map
argument_list|<
name|R
argument_list|,
name|V
argument_list|>
argument_list|>
block|{
DECL|method|iterator ()
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|Map
argument_list|<
name|R
argument_list|,
name|V
argument_list|>
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
name|valueIteratorImpl
argument_list|(
name|ColumnMap
operator|.
name|this
argument_list|)
return|;
block|}
DECL|method|remove (Object obj)
annotation|@
name|Override
specifier|public
name|boolean
name|remove
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
for|for
control|(
name|Entry
argument_list|<
name|C
argument_list|,
name|Map
argument_list|<
name|R
argument_list|,
name|V
argument_list|>
argument_list|>
name|entry
range|:
name|ColumnMap
operator|.
name|this
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|equals
argument_list|(
name|obj
argument_list|)
condition|)
block|{
name|removeColumn
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
DECL|method|removeAll (Collection<?> c)
annotation|@
name|Override
specifier|public
name|boolean
name|removeAll
parameter_list|(
name|Collection
argument_list|<
name|?
argument_list|>
name|c
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|boolean
name|changed
init|=
literal|false
decl_stmt|;
for|for
control|(
name|C
name|columnKey
range|:
name|Lists
operator|.
name|newArrayList
argument_list|(
name|columnKeySet
argument_list|()
operator|.
name|iterator
argument_list|()
argument_list|)
control|)
block|{
if|if
condition|(
name|c
operator|.
name|contains
argument_list|(
name|column
argument_list|(
name|columnKey
argument_list|)
argument_list|)
condition|)
block|{
name|removeColumn
argument_list|(
name|columnKey
argument_list|)
expr_stmt|;
name|changed
operator|=
literal|true
expr_stmt|;
block|}
block|}
return|return
name|changed
return|;
block|}
DECL|method|retainAll (Collection<?> c)
annotation|@
name|Override
specifier|public
name|boolean
name|retainAll
parameter_list|(
name|Collection
argument_list|<
name|?
argument_list|>
name|c
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|boolean
name|changed
init|=
literal|false
decl_stmt|;
for|for
control|(
name|C
name|columnKey
range|:
name|Lists
operator|.
name|newArrayList
argument_list|(
name|columnKeySet
argument_list|()
operator|.
name|iterator
argument_list|()
argument_list|)
control|)
block|{
if|if
condition|(
operator|!
name|c
operator|.
name|contains
argument_list|(
name|column
argument_list|(
name|columnKey
argument_list|)
argument_list|)
condition|)
block|{
name|removeColumn
argument_list|(
name|columnKey
argument_list|)
expr_stmt|;
name|changed
operator|=
literal|true
expr_stmt|;
block|}
block|}
return|return
name|changed
return|;
block|}
DECL|method|size ()
annotation|@
name|Override
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|columnKeySet
argument_list|()
operator|.
name|size
argument_list|()
return|;
block|}
block|}
block|}
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|0
decl_stmt|;
comment|// TODO(kevinb): Move keyIteratorImpl and valueIteratorImpl to Maps, reuse
comment|/**    * Generates the iterator of a map's key set from the map's entry set    * iterator.    */
DECL|method|keyIteratorImpl (Map<K, V> map)
specifier|static
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
name|Iterator
argument_list|<
name|K
argument_list|>
name|keyIteratorImpl
parameter_list|(
name|Map
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|map
parameter_list|)
block|{
specifier|final
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|entryIterator
init|=
name|map
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
return|return
operator|new
name|Iterator
argument_list|<
name|K
argument_list|>
argument_list|()
block|{
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|entryIterator
operator|.
name|hasNext
argument_list|()
return|;
block|}
specifier|public
name|K
name|next
parameter_list|()
block|{
return|return
name|entryIterator
operator|.
name|next
argument_list|()
operator|.
name|getKey
argument_list|()
return|;
block|}
specifier|public
name|void
name|remove
parameter_list|()
block|{
name|entryIterator
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
return|;
block|}
comment|/**    * Generates the iterator of a map's value collection from the map's entry set    * iterator.    */
DECL|method|valueIteratorImpl (Map<K, V> map)
specifier|static
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
name|Iterator
argument_list|<
name|V
argument_list|>
name|valueIteratorImpl
parameter_list|(
name|Map
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|map
parameter_list|)
block|{
specifier|final
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|entryIterator
init|=
name|map
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
return|return
operator|new
name|Iterator
argument_list|<
name|V
argument_list|>
argument_list|()
block|{
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|entryIterator
operator|.
name|hasNext
argument_list|()
return|;
block|}
specifier|public
name|V
name|next
parameter_list|()
block|{
return|return
name|entryIterator
operator|.
name|next
argument_list|()
operator|.
name|getValue
argument_list|()
return|;
block|}
specifier|public
name|void
name|remove
parameter_list|()
block|{
name|entryIterator
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

