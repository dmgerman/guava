begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2009 Google Inc.  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.collect
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkArgument
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtCompatible
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NoSuchElementException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_comment
comment|/**  * An immutable {@link SortedMap}. Does not permit null keys or values.  *  *<p>Unlike {@link Collections#unmodifiableSortedMap}, which is a<i>view</i>  * of a separate map which can still change, an instance of {@code  * ImmutableSortedMap} contains its own data and will<i>never</i> change.  * {@code ImmutableSortedMap} is convenient for {@code public static final} maps  * ("constant maps") and also lets you easily make a "defensive copy" of a map  * provided to your class by a caller.  *  *<p><b>Note</b>: Although this class is not final, it cannot be subclassed as  * it has no public or protected constructors. Thus, instances of this class are  * guaranteed to be immutable.  *  * @author Jared Levy  * @since 2 (imported from Google Collections Library)  */
end_comment

begin_class
annotation|@
name|GwtCompatible
argument_list|(
name|serializable
operator|=
literal|true
argument_list|,
name|emulated
operator|=
literal|true
argument_list|)
DECL|class|ImmutableSortedMap
specifier|public
class|class
name|ImmutableSortedMap
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
extends|extends
name|ImmutableSortedMapFauxverideShim
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
implements|implements
name|SortedMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
block|{
comment|/*    * TODO(kevinb): Confirm that ImmutableSortedMap is faster to construct and    * uses less memory than TreeMap; then say so in the class Javadoc.    *    * TODO(kevinb): Create separate subclasses for empty, single-entry, and    * multiple-entry instances, if it's deemed beneficial.    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|field|NATURAL_ORDER
specifier|private
specifier|static
specifier|final
name|Comparator
name|NATURAL_ORDER
init|=
name|Ordering
operator|.
name|natural
argument_list|()
decl_stmt|;
DECL|field|EMPTY_ARRAY
specifier|private
specifier|static
specifier|final
name|Entry
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
index|[]
name|EMPTY_ARRAY
init|=
operator|new
name|Entry
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
index|[
literal|0
index|]
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|field|NATURAL_EMPTY_MAP
specifier|private
specifier|static
specifier|final
name|ImmutableMap
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|NATURAL_EMPTY_MAP
init|=
operator|new
name|ImmutableSortedMap
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
argument_list|(
name|EMPTY_ARRAY
argument_list|,
name|NATURAL_ORDER
argument_list|)
decl_stmt|;
comment|/**    * Returns the empty sorted map.    */
comment|// Casting to any type is safe because the set will never hold any elements.
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|of ()
specifier|public
specifier|static
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
name|ImmutableSortedMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|of
parameter_list|()
block|{
return|return
operator|(
name|ImmutableSortedMap
operator|)
name|NATURAL_EMPTY_MAP
return|;
block|}
DECL|method|emptyMap ( Comparator<? super K> comparator)
specifier|private
specifier|static
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
name|ImmutableSortedMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|emptyMap
parameter_list|(
name|Comparator
argument_list|<
name|?
super|super
name|K
argument_list|>
name|comparator
parameter_list|)
block|{
if|if
condition|(
name|NATURAL_ORDER
operator|.
name|equals
argument_list|(
name|comparator
argument_list|)
condition|)
block|{
return|return
name|ImmutableSortedMap
operator|.
name|of
argument_list|()
return|;
block|}
else|else
block|{
return|return
operator|new
name|ImmutableSortedMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|(
name|EMPTY_ARRAY
argument_list|,
name|comparator
argument_list|)
return|;
block|}
block|}
comment|/**    * Returns an immutable map containing a single entry.    */
specifier|public
specifier|static
parameter_list|<
name|K
extends|extends
name|Comparable
argument_list|<
name|?
super|super
name|K
argument_list|>
parameter_list|,
name|V
parameter_list|>
name|ImmutableSortedMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
DECL|method|of (K k1, V v1)
name|of
parameter_list|(
name|K
name|k1
parameter_list|,
name|V
name|v1
parameter_list|)
block|{
name|Entry
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
index|[]
name|entries
init|=
block|{
name|entryOf
argument_list|(
name|k1
argument_list|,
name|v1
argument_list|)
block|}
decl_stmt|;
return|return
operator|new
name|ImmutableSortedMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|(
name|entries
argument_list|,
name|Ordering
operator|.
name|natural
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Returns an immutable sorted map containing the given entries, sorted by the    * natural ordering of their keys.    *    * @throws IllegalArgumentException if the two keys are equal according to    *     their natural ordering    */
specifier|public
specifier|static
parameter_list|<
name|K
extends|extends
name|Comparable
argument_list|<
name|?
super|super
name|K
argument_list|>
parameter_list|,
name|V
parameter_list|>
name|ImmutableSortedMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
DECL|method|of (K k1, V v1, K k2, V v2)
name|of
parameter_list|(
name|K
name|k1
parameter_list|,
name|V
name|v1
parameter_list|,
name|K
name|k2
parameter_list|,
name|V
name|v2
parameter_list|)
block|{
return|return
operator|new
name|Builder
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|(
name|Ordering
operator|.
name|natural
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
name|k1
argument_list|,
name|v1
argument_list|)
operator|.
name|put
argument_list|(
name|k2
argument_list|,
name|v2
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * Returns an immutable sorted map containing the given entries, sorted by the    * natural ordering of their keys.    *    * @throws IllegalArgumentException if any two keys are equal according to    *     their natural ordering    */
specifier|public
specifier|static
parameter_list|<
name|K
extends|extends
name|Comparable
argument_list|<
name|?
super|super
name|K
argument_list|>
parameter_list|,
name|V
parameter_list|>
name|ImmutableSortedMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
DECL|method|of (K k1, V v1, K k2, V v2, K k3, V v3)
name|of
parameter_list|(
name|K
name|k1
parameter_list|,
name|V
name|v1
parameter_list|,
name|K
name|k2
parameter_list|,
name|V
name|v2
parameter_list|,
name|K
name|k3
parameter_list|,
name|V
name|v3
parameter_list|)
block|{
return|return
operator|new
name|Builder
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|(
name|Ordering
operator|.
name|natural
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
name|k1
argument_list|,
name|v1
argument_list|)
operator|.
name|put
argument_list|(
name|k2
argument_list|,
name|v2
argument_list|)
operator|.
name|put
argument_list|(
name|k3
argument_list|,
name|v3
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * Returns an immutable sorted map containing the given entries, sorted by the    * natural ordering of their keys.    *    * @throws IllegalArgumentException if any two keys are equal according to    *     their natural ordering    */
specifier|public
specifier|static
parameter_list|<
name|K
extends|extends
name|Comparable
argument_list|<
name|?
super|super
name|K
argument_list|>
parameter_list|,
name|V
parameter_list|>
name|ImmutableSortedMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
DECL|method|of (K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4)
name|of
parameter_list|(
name|K
name|k1
parameter_list|,
name|V
name|v1
parameter_list|,
name|K
name|k2
parameter_list|,
name|V
name|v2
parameter_list|,
name|K
name|k3
parameter_list|,
name|V
name|v3
parameter_list|,
name|K
name|k4
parameter_list|,
name|V
name|v4
parameter_list|)
block|{
return|return
operator|new
name|Builder
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|(
name|Ordering
operator|.
name|natural
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
name|k1
argument_list|,
name|v1
argument_list|)
operator|.
name|put
argument_list|(
name|k2
argument_list|,
name|v2
argument_list|)
operator|.
name|put
argument_list|(
name|k3
argument_list|,
name|v3
argument_list|)
operator|.
name|put
argument_list|(
name|k4
argument_list|,
name|v4
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * Returns an immutable sorted map containing the given entries, sorted by the    * natural ordering of their keys.    *    * @throws IllegalArgumentException if any two keys are equal according to    *     their natural ordering    */
specifier|public
specifier|static
parameter_list|<
name|K
extends|extends
name|Comparable
argument_list|<
name|?
super|super
name|K
argument_list|>
parameter_list|,
name|V
parameter_list|>
name|ImmutableSortedMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
DECL|method|of (K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)
name|of
parameter_list|(
name|K
name|k1
parameter_list|,
name|V
name|v1
parameter_list|,
name|K
name|k2
parameter_list|,
name|V
name|v2
parameter_list|,
name|K
name|k3
parameter_list|,
name|V
name|v3
parameter_list|,
name|K
name|k4
parameter_list|,
name|V
name|v4
parameter_list|,
name|K
name|k5
parameter_list|,
name|V
name|v5
parameter_list|)
block|{
return|return
operator|new
name|Builder
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|(
name|Ordering
operator|.
name|natural
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
name|k1
argument_list|,
name|v1
argument_list|)
operator|.
name|put
argument_list|(
name|k2
argument_list|,
name|v2
argument_list|)
operator|.
name|put
argument_list|(
name|k3
argument_list|,
name|v3
argument_list|)
operator|.
name|put
argument_list|(
name|k4
argument_list|,
name|v4
argument_list|)
operator|.
name|put
argument_list|(
name|k5
argument_list|,
name|v5
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * Returns an immutable map containing the same entries as {@code map}, sorted    * by the natural ordering of the keys.    *    *<p><b>Note:</b> Despite what the method name suggests, if {@code map} is an    * {@code ImmutableSortedMap}, it may be returned instead of a copy.    *    *<p>This method is not type-safe, as it may be called on a map with keys    * that are not mutually comparable.    *    * @throws ClassCastException if the keys in {@code map} are not mutually    *     comparable    * @throws NullPointerException if any key or value in {@code map} is null    * @throws IllegalArgumentException if any two keys are equal according to    *     their natural ordering    */
DECL|method|copyOf ( Map<? extends K, ? extends V> map)
specifier|public
specifier|static
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
name|ImmutableSortedMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|copyOf
parameter_list|(
name|Map
argument_list|<
name|?
extends|extends
name|K
argument_list|,
name|?
extends|extends
name|V
argument_list|>
name|map
parameter_list|)
block|{
comment|// Hack around K not being a subtype of Comparable.
comment|// Unsafe, see ImmutableSortedSetFauxverideShim.
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Ordering
argument_list|<
name|K
argument_list|>
name|naturalOrder
init|=
operator|(
name|Ordering
operator|)
name|Ordering
operator|.
expr|<
name|Comparable
operator|>
name|natural
argument_list|()
decl_stmt|;
return|return
name|copyOfInternal
argument_list|(
name|map
argument_list|,
name|naturalOrder
argument_list|)
return|;
block|}
comment|/**    * Returns an immutable map containing the same entries as {@code map}, with    * keys sorted by the provided comparator.    *    *<p><b>Note:</b> Despite what the method name suggests, if {@code map} is an    * {@code ImmutableSortedMap}, it may be returned instead of a copy.    *    * @throws NullPointerException if any key or value in {@code map} is null    * @throws IllegalArgumentException if any two keys are equal according to    *     the comparator    */
DECL|method|copyOf ( Map<? extends K, ? extends V> map, Comparator<? super K> comparator)
specifier|public
specifier|static
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
name|ImmutableSortedMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|copyOf
parameter_list|(
name|Map
argument_list|<
name|?
extends|extends
name|K
argument_list|,
name|?
extends|extends
name|V
argument_list|>
name|map
parameter_list|,
name|Comparator
argument_list|<
name|?
super|super
name|K
argument_list|>
name|comparator
parameter_list|)
block|{
return|return
name|copyOfInternal
argument_list|(
name|map
argument_list|,
name|checkNotNull
argument_list|(
name|comparator
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Returns an immutable map containing the same entries as the provided sorted    * map, with the same ordering.    *    *<p><b>Note:</b> Despite what the method name suggests, if {@code map} is an    * {@code ImmutableSortedMap}, it may be returned instead of a copy.    *    * @throws NullPointerException if any key or value in {@code map} is null    */
DECL|method|copyOfSorted ( SortedMap<K, ? extends V> map)
specifier|public
specifier|static
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
name|ImmutableSortedMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|copyOfSorted
parameter_list|(
name|SortedMap
argument_list|<
name|K
argument_list|,
name|?
extends|extends
name|V
argument_list|>
name|map
parameter_list|)
block|{
comment|// If map has a null comparator, the keys should have a natural ordering,
comment|// even though K doesn't explicitly implement Comparable.
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Comparator
argument_list|<
name|?
super|super
name|K
argument_list|>
name|comparator
init|=
operator|(
name|map
operator|.
name|comparator
argument_list|()
operator|==
literal|null
operator|)
condition|?
name|NATURAL_ORDER
else|:
name|map
operator|.
name|comparator
argument_list|()
decl_stmt|;
return|return
name|copyOfInternal
argument_list|(
name|map
argument_list|,
name|comparator
argument_list|)
return|;
block|}
DECL|method|copyOfInternal ( Map<? extends K, ? extends V> map, Comparator<? super K> comparator)
specifier|private
specifier|static
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
name|ImmutableSortedMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|copyOfInternal
parameter_list|(
name|Map
argument_list|<
name|?
extends|extends
name|K
argument_list|,
name|?
extends|extends
name|V
argument_list|>
name|map
parameter_list|,
name|Comparator
argument_list|<
name|?
super|super
name|K
argument_list|>
name|comparator
parameter_list|)
block|{
name|boolean
name|sameComparator
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|map
operator|instanceof
name|SortedMap
condition|)
block|{
name|SortedMap
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|sortedMap
init|=
operator|(
name|SortedMap
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|map
decl_stmt|;
name|Comparator
argument_list|<
name|?
argument_list|>
name|comparator2
init|=
name|sortedMap
operator|.
name|comparator
argument_list|()
decl_stmt|;
name|sameComparator
operator|=
operator|(
name|comparator2
operator|==
literal|null
operator|)
condition|?
name|comparator
operator|==
name|NATURAL_ORDER
else|:
name|comparator
operator|.
name|equals
argument_list|(
name|comparator2
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|sameComparator
operator|&&
operator|(
name|map
operator|instanceof
name|ImmutableSortedMap
operator|)
condition|)
block|{
comment|// TODO(kevinb): Prove that this cast is safe, even though
comment|// Collections.unmodifiableSortedMap requires the same key type.
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|ImmutableSortedMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|kvMap
init|=
operator|(
name|ImmutableSortedMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
operator|)
name|map
decl_stmt|;
return|return
name|kvMap
return|;
block|}
comment|// Using List to support concurrent map whose size changes
name|List
argument_list|<
name|Entry
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
argument_list|>
name|list
init|=
name|Lists
operator|.
name|newArrayListWithCapacity
argument_list|(
name|map
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|?
extends|extends
name|K
argument_list|,
name|?
extends|extends
name|V
argument_list|>
name|entry
range|:
name|map
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|list
operator|.
name|add
argument_list|(
name|entryOf
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Entry
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
index|[]
name|entryArray
init|=
name|list
operator|.
name|toArray
argument_list|(
operator|new
name|Entry
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
index|[
name|list
operator|.
name|size
argument_list|()
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|sameComparator
condition|)
block|{
name|sortEntries
argument_list|(
name|entryArray
argument_list|,
name|comparator
argument_list|)
expr_stmt|;
name|validateEntries
argument_list|(
name|entryArray
argument_list|,
name|comparator
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|ImmutableSortedMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|(
name|entryArray
argument_list|,
name|comparator
argument_list|)
return|;
block|}
DECL|method|sortEntries (Entry<?, ?>[] entryArray, final Comparator<?> comparator)
specifier|private
specifier|static
name|void
name|sortEntries
parameter_list|(
name|Entry
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
index|[]
name|entryArray
parameter_list|,
specifier|final
name|Comparator
argument_list|<
name|?
argument_list|>
name|comparator
parameter_list|)
block|{
name|Comparator
argument_list|<
name|Entry
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
argument_list|>
name|entryComparator
init|=
operator|new
name|Comparator
argument_list|<
name|Entry
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
argument_list|>
argument_list|()
block|{
specifier|public
name|int
name|compare
parameter_list|(
name|Entry
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|entry1
parameter_list|,
name|Entry
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|entry2
parameter_list|)
block|{
return|return
name|ImmutableSortedSet
operator|.
name|unsafeCompare
argument_list|(
name|comparator
argument_list|,
name|entry1
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry2
operator|.
name|getKey
argument_list|()
argument_list|)
return|;
block|}
block|}
empty_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|entryArray
argument_list|,
name|entryComparator
argument_list|)
expr_stmt|;
block|}
DECL|method|validateEntries (Entry<?, ?>[] entryArray, Comparator<?> comparator)
specifier|private
specifier|static
name|void
name|validateEntries
parameter_list|(
name|Entry
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
index|[]
name|entryArray
parameter_list|,
name|Comparator
argument_list|<
name|?
argument_list|>
name|comparator
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|entryArray
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|ImmutableSortedSet
operator|.
name|unsafeCompare
argument_list|(
name|comparator
argument_list|,
name|entryArray
index|[
name|i
operator|-
literal|1
index|]
operator|.
name|getKey
argument_list|()
argument_list|,
name|entryArray
index|[
name|i
index|]
operator|.
name|getKey
argument_list|()
argument_list|)
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Duplicate keys in mappings "
operator|+
name|entryArray
index|[
name|i
operator|-
literal|1
index|]
operator|+
literal|" and "
operator|+
name|entryArray
index|[
name|i
index|]
argument_list|)
throw|;
block|}
block|}
block|}
comment|/**    * Returns a builder that creates immutable sorted maps whose keys are    * ordered by their natural ordering. The sorted maps use {@link    * Ordering#natural()} as the comparator.    *    *<p>Note: the type parameter {@code K} extends {@code Comparable<K>} rather    * than {@code Comparable<? super K>} as a workaround for javac<a    * href="http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6468354">bug    * 6468354</a>.    */
DECL|method|naturalOrder ()
specifier|public
specifier|static
parameter_list|<
name|K
extends|extends
name|Comparable
argument_list|<
name|K
argument_list|>
parameter_list|,
name|V
parameter_list|>
name|Builder
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|naturalOrder
parameter_list|()
block|{
return|return
operator|new
name|Builder
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|(
name|Ordering
operator|.
name|natural
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Returns a builder that creates immutable sorted maps with an explicit    * comparator. If the comparator has a more general type than the map's keys,    * such as creating a {@code SortedMap<Integer, String>} with a {@code    * Comparator<Number>}, use the {@link Builder} constructor instead.    *    * @throws NullPointerException if {@code comparator} is null    */
DECL|method|orderedBy (Comparator<K> comparator)
specifier|public
specifier|static
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
name|Builder
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|orderedBy
parameter_list|(
name|Comparator
argument_list|<
name|K
argument_list|>
name|comparator
parameter_list|)
block|{
return|return
operator|new
name|Builder
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|(
name|comparator
argument_list|)
return|;
block|}
comment|/**    * Returns a builder that creates immutable sorted maps whose keys are    * ordered by the reverse of their natural ordering.    *    *<p>Note: the type parameter {@code K} extends {@code Comparable<K>} rather    * than {@code Comparable<? super K>} as a workaround for javac<a    * href="http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6468354">bug    * 6468354</a>.    */
DECL|method|reverseOrder ()
specifier|public
specifier|static
parameter_list|<
name|K
extends|extends
name|Comparable
argument_list|<
name|K
argument_list|>
parameter_list|,
name|V
parameter_list|>
name|Builder
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|reverseOrder
parameter_list|()
block|{
return|return
operator|new
name|Builder
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|(
name|Ordering
operator|.
name|natural
argument_list|()
operator|.
name|reverse
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * A builder for creating immutable sorted map instances, especially {@code    * public static final} maps ("constant maps"). Example:<pre>   {@code    *    *   static final ImmutableSortedMap<Integer, String> INT_TO_WORD =    *       new ImmutableSortedMap.Builder<Integer, String>(Ordering.natural())    *           .put(1, "one")    *           .put(2, "two")    *           .put(3, "three")    *           .build();}</pre>    *    * For<i>small</i> immutable sorted maps, the {@code ImmutableSortedMap.of()}    * methods are even more convenient.    *    *<p>Builder instances can be reused - it is safe to call {@link #build}    * multiple times to build multiple maps in series. Each map is a superset of    * the maps created before it.    *    * @since 2 (imported from Google Collections Library)    */
DECL|class|Builder
specifier|public
specifier|static
specifier|final
class|class
name|Builder
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
extends|extends
name|ImmutableMap
operator|.
name|Builder
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
block|{
DECL|field|comparator
specifier|private
specifier|final
name|Comparator
argument_list|<
name|?
super|super
name|K
argument_list|>
name|comparator
decl_stmt|;
comment|/**      * Creates a new builder. The returned builder is equivalent to the builder      * generated by {@link ImmutableSortedMap#orderedBy}.      */
DECL|method|Builder (Comparator<? super K> comparator)
specifier|public
name|Builder
parameter_list|(
name|Comparator
argument_list|<
name|?
super|super
name|K
argument_list|>
name|comparator
parameter_list|)
block|{
name|this
operator|.
name|comparator
operator|=
name|checkNotNull
argument_list|(
name|comparator
argument_list|)
expr_stmt|;
block|}
comment|/**      * Associates {@code key} with {@code value} in the built map. Duplicate      * keys, according to the comparator (which might be the keys' natural      * order), are not allowed, and will cause {@link #build} to fail.      */
DECL|method|put (K key, V value)
annotation|@
name|Override
specifier|public
name|Builder
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|put
parameter_list|(
name|K
name|key
parameter_list|,
name|V
name|value
parameter_list|)
block|{
name|entries
operator|.
name|add
argument_list|(
name|entryOf
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Associates all of the given map's keys and values in the built map.      * Duplicate keys, according to the comparator (which might be the keys'      * natural order), are not allowed, and will cause {@link #build} to fail.      *      * @throws NullPointerException if any key or value in {@code map} is null      */
DECL|method|putAll (Map<? extends K, ? extends V> map)
annotation|@
name|Override
specifier|public
name|Builder
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|putAll
parameter_list|(
name|Map
argument_list|<
name|?
extends|extends
name|K
argument_list|,
name|?
extends|extends
name|V
argument_list|>
name|map
parameter_list|)
block|{
for|for
control|(
name|Entry
argument_list|<
name|?
extends|extends
name|K
argument_list|,
name|?
extends|extends
name|V
argument_list|>
name|entry
range|:
name|map
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
comment|/**      * Returns a newly-created immutable sorted map.      *      * @throws IllegalArgumentException if any two keys are equal according to      *     the comparator (which might be the keys' natural order)      */
DECL|method|build ()
annotation|@
name|Override
specifier|public
name|ImmutableSortedMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|build
parameter_list|()
block|{
name|Entry
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
index|[]
name|entryArray
init|=
name|entries
operator|.
name|toArray
argument_list|(
operator|new
name|Entry
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
index|[
name|entries
operator|.
name|size
argument_list|()
index|]
argument_list|)
decl_stmt|;
name|sortEntries
argument_list|(
name|entryArray
argument_list|,
name|comparator
argument_list|)
expr_stmt|;
name|validateEntries
argument_list|(
name|entryArray
argument_list|,
name|comparator
argument_list|)
expr_stmt|;
return|return
operator|new
name|ImmutableSortedMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|(
name|entryArray
argument_list|,
name|comparator
argument_list|)
return|;
block|}
block|}
DECL|field|entries
specifier|private
specifier|final
specifier|transient
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
index|[]
name|entries
decl_stmt|;
DECL|field|comparator
specifier|private
specifier|final
specifier|transient
name|Comparator
argument_list|<
name|?
super|super
name|K
argument_list|>
name|comparator
decl_stmt|;
DECL|field|fromIndex
specifier|private
specifier|final
specifier|transient
name|int
name|fromIndex
decl_stmt|;
DECL|field|toIndex
specifier|private
specifier|final
specifier|transient
name|int
name|toIndex
decl_stmt|;
DECL|method|ImmutableSortedMap (Entry<?, ?>[] entries, Comparator<? super K> comparator, int fromIndex, int toIndex)
specifier|private
name|ImmutableSortedMap
parameter_list|(
name|Entry
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
index|[]
name|entries
parameter_list|,
name|Comparator
argument_list|<
name|?
super|super
name|K
argument_list|>
name|comparator
parameter_list|,
name|int
name|fromIndex
parameter_list|,
name|int
name|toIndex
parameter_list|)
block|{
comment|// each of the callers carefully put only Entry<K, V>s into the array!
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
index|[]
name|tmp
init|=
operator|(
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
index|[]
operator|)
name|entries
decl_stmt|;
name|this
operator|.
name|entries
operator|=
name|tmp
expr_stmt|;
name|this
operator|.
name|comparator
operator|=
name|comparator
expr_stmt|;
name|this
operator|.
name|fromIndex
operator|=
name|fromIndex
expr_stmt|;
name|this
operator|.
name|toIndex
operator|=
name|toIndex
expr_stmt|;
block|}
DECL|method|ImmutableSortedMap (Entry<?, ?>[] entries, Comparator<? super K> comparator)
name|ImmutableSortedMap
parameter_list|(
name|Entry
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
index|[]
name|entries
parameter_list|,
name|Comparator
argument_list|<
name|?
super|super
name|K
argument_list|>
name|comparator
parameter_list|)
block|{
name|this
argument_list|(
name|entries
argument_list|,
name|comparator
argument_list|,
literal|0
argument_list|,
name|entries
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
DECL|method|size ()
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|toIndex
operator|-
name|fromIndex
return|;
block|}
DECL|method|get (@ullable Object key)
annotation|@
name|Override
specifier|public
name|V
name|get
parameter_list|(
annotation|@
name|Nullable
name|Object
name|key
parameter_list|)
block|{
if|if
condition|(
name|key
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|int
name|i
decl_stmt|;
try|try
block|{
name|i
operator|=
name|binarySearch
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassCastException
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
return|return
operator|(
name|i
operator|>=
literal|0
operator|)
condition|?
name|entries
index|[
name|i
index|]
operator|.
name|getValue
argument_list|()
else|:
literal|null
return|;
block|}
DECL|method|binarySearch (Object key)
specifier|private
name|int
name|binarySearch
parameter_list|(
name|Object
name|key
parameter_list|)
block|{
name|int
name|lower
init|=
name|fromIndex
decl_stmt|;
name|int
name|upper
init|=
name|toIndex
operator|-
literal|1
decl_stmt|;
while|while
condition|(
name|lower
operator|<=
name|upper
condition|)
block|{
name|int
name|middle
init|=
name|lower
operator|+
operator|(
name|upper
operator|-
name|lower
operator|)
operator|/
literal|2
decl_stmt|;
name|int
name|c
init|=
name|ImmutableSortedSet
operator|.
name|unsafeCompare
argument_list|(
name|comparator
argument_list|,
name|key
argument_list|,
name|entries
index|[
name|middle
index|]
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|<
literal|0
condition|)
block|{
name|upper
operator|=
name|middle
operator|-
literal|1
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|c
operator|>
literal|0
condition|)
block|{
name|lower
operator|=
name|middle
operator|+
literal|1
expr_stmt|;
block|}
else|else
block|{
return|return
name|middle
return|;
block|}
block|}
return|return
operator|-
name|lower
operator|-
literal|1
return|;
block|}
DECL|method|containsValue (@ullable Object value)
annotation|@
name|Override
specifier|public
name|boolean
name|containsValue
parameter_list|(
annotation|@
name|Nullable
name|Object
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
for|for
control|(
name|int
name|i
init|=
name|fromIndex
init|;
name|i
operator|<
name|toIndex
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|entries
index|[
name|i
index|]
operator|.
name|getValue
argument_list|()
operator|.
name|equals
argument_list|(
name|value
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
DECL|field|entrySet
specifier|private
specifier|transient
name|ImmutableSet
argument_list|<
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|entrySet
decl_stmt|;
comment|/**    * Returns an immutable set of the mappings in this map, sorted by the key    * ordering.    */
DECL|method|entrySet ()
annotation|@
name|Override
specifier|public
name|ImmutableSet
argument_list|<
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|entrySet
parameter_list|()
block|{
name|ImmutableSet
argument_list|<
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|es
init|=
name|entrySet
decl_stmt|;
return|return
operator|(
name|es
operator|==
literal|null
operator|)
condition|?
operator|(
name|entrySet
operator|=
name|createEntrySet
argument_list|()
operator|)
else|:
name|es
return|;
block|}
DECL|method|createEntrySet ()
specifier|private
name|ImmutableSet
argument_list|<
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|createEntrySet
parameter_list|()
block|{
return|return
name|isEmpty
argument_list|()
condition|?
name|ImmutableSet
operator|.
expr|<
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
operator|>
name|of
argument_list|()
else|:
operator|new
name|EntrySet
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"serial"
argument_list|)
comment|// uses writeReplace(), not default serialization
DECL|class|EntrySet
specifier|private
specifier|static
class|class
name|EntrySet
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
extends|extends
name|ImmutableSet
argument_list|<
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
block|{
DECL|field|map
specifier|final
specifier|transient
name|ImmutableSortedMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|map
decl_stmt|;
DECL|method|EntrySet (ImmutableSortedMap<K, V> map)
name|EntrySet
parameter_list|(
name|ImmutableSortedMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|map
parameter_list|)
block|{
name|this
operator|.
name|map
operator|=
name|map
expr_stmt|;
block|}
DECL|method|size ()
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|map
operator|.
name|size
argument_list|()
return|;
block|}
DECL|method|iterator ()
annotation|@
name|Override
specifier|public
name|UnmodifiableIterator
argument_list|<
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
name|Iterators
operator|.
name|forArray
argument_list|(
name|map
operator|.
name|entries
argument_list|,
name|map
operator|.
name|fromIndex
argument_list|,
name|size
argument_list|()
argument_list|)
return|;
block|}
DECL|method|contains (Object target)
annotation|@
name|Override
specifier|public
name|boolean
name|contains
parameter_list|(
name|Object
name|target
parameter_list|)
block|{
if|if
condition|(
name|target
operator|instanceof
name|Entry
condition|)
block|{
name|Entry
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|entry
init|=
operator|(
name|Entry
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|target
decl_stmt|;
name|V
name|mappedValue
init|=
name|map
operator|.
name|get
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|mappedValue
operator|!=
literal|null
operator|&&
name|mappedValue
operator|.
name|equals
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
DECL|method|writeReplace ()
annotation|@
name|Override
name|Object
name|writeReplace
parameter_list|()
block|{
return|return
operator|new
name|EntrySetSerializedForm
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|(
name|map
argument_list|)
return|;
block|}
block|}
DECL|class|EntrySetSerializedForm
specifier|private
specifier|static
class|class
name|EntrySetSerializedForm
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
implements|implements
name|Serializable
block|{
DECL|field|map
specifier|final
name|ImmutableSortedMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|map
decl_stmt|;
DECL|method|EntrySetSerializedForm (ImmutableSortedMap<K, V> map)
name|EntrySetSerializedForm
parameter_list|(
name|ImmutableSortedMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|map
parameter_list|)
block|{
name|this
operator|.
name|map
operator|=
name|map
expr_stmt|;
block|}
DECL|method|readResolve ()
name|Object
name|readResolve
parameter_list|()
block|{
return|return
name|map
operator|.
name|entrySet
argument_list|()
return|;
block|}
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|0
decl_stmt|;
block|}
DECL|field|keySet
specifier|private
specifier|transient
name|ImmutableSortedSet
argument_list|<
name|K
argument_list|>
name|keySet
decl_stmt|;
comment|/**    * Returns an immutable sorted set of the keys in this map.    */
DECL|method|keySet ()
annotation|@
name|Override
specifier|public
name|ImmutableSortedSet
argument_list|<
name|K
argument_list|>
name|keySet
parameter_list|()
block|{
name|ImmutableSortedSet
argument_list|<
name|K
argument_list|>
name|ks
init|=
name|keySet
decl_stmt|;
return|return
operator|(
name|ks
operator|==
literal|null
operator|)
condition|?
operator|(
name|keySet
operator|=
name|createKeySet
argument_list|()
operator|)
else|:
name|ks
return|;
block|}
DECL|method|createKeySet ()
specifier|private
name|ImmutableSortedSet
argument_list|<
name|K
argument_list|>
name|createKeySet
parameter_list|()
block|{
if|if
condition|(
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|ImmutableSortedSet
operator|.
name|emptySet
argument_list|(
name|comparator
argument_list|)
return|;
block|}
comment|// TODO(jlevy): For better performance, don't create a separate array.
name|Object
index|[]
name|array
init|=
operator|new
name|Object
index|[
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|fromIndex
init|;
name|i
operator|<
name|toIndex
condition|;
name|i
operator|++
control|)
block|{
name|array
index|[
name|i
operator|-
name|fromIndex
index|]
operator|=
name|entries
index|[
name|i
index|]
operator|.
name|getKey
argument_list|()
expr_stmt|;
block|}
return|return
operator|new
name|RegularImmutableSortedSet
argument_list|<
name|K
argument_list|>
argument_list|(
name|array
argument_list|,
name|comparator
argument_list|)
return|;
block|}
DECL|field|values
specifier|private
specifier|transient
name|ImmutableCollection
argument_list|<
name|V
argument_list|>
name|values
decl_stmt|;
comment|/**    * Returns an immutable collection of the values in this map, sorted by the    * ordering of the corresponding keys.    */
DECL|method|values ()
annotation|@
name|Override
specifier|public
name|ImmutableCollection
argument_list|<
name|V
argument_list|>
name|values
parameter_list|()
block|{
name|ImmutableCollection
argument_list|<
name|V
argument_list|>
name|v
init|=
name|values
decl_stmt|;
return|return
operator|(
name|v
operator|==
literal|null
operator|)
condition|?
operator|(
name|values
operator|=
operator|new
name|Values
argument_list|<
name|V
argument_list|>
argument_list|(
name|this
argument_list|)
operator|)
else|:
name|v
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"serial"
argument_list|)
comment|// uses writeReplace(), not default serialization
DECL|class|Values
specifier|private
specifier|static
class|class
name|Values
parameter_list|<
name|V
parameter_list|>
extends|extends
name|ImmutableCollection
argument_list|<
name|V
argument_list|>
block|{
DECL|field|map
specifier|private
specifier|final
name|ImmutableSortedMap
argument_list|<
name|?
argument_list|,
name|V
argument_list|>
name|map
decl_stmt|;
DECL|method|Values (ImmutableSortedMap<?, V> map)
name|Values
parameter_list|(
name|ImmutableSortedMap
argument_list|<
name|?
argument_list|,
name|V
argument_list|>
name|map
parameter_list|)
block|{
name|this
operator|.
name|map
operator|=
name|map
expr_stmt|;
block|}
DECL|method|size ()
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|map
operator|.
name|size
argument_list|()
return|;
block|}
DECL|method|iterator ()
annotation|@
name|Override
specifier|public
name|UnmodifiableIterator
argument_list|<
name|V
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
operator|new
name|AbstractIterator
argument_list|<
name|V
argument_list|>
argument_list|()
block|{
name|int
name|index
init|=
name|map
operator|.
name|fromIndex
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|V
name|computeNext
parameter_list|()
block|{
return|return
operator|(
name|index
operator|<
name|map
operator|.
name|toIndex
operator|)
condition|?
name|map
operator|.
name|entries
index|[
name|index
operator|++
index|]
operator|.
name|getValue
argument_list|()
else|:
name|endOfData
argument_list|()
return|;
block|}
block|}
return|;
block|}
DECL|method|contains (Object target)
annotation|@
name|Override
specifier|public
name|boolean
name|contains
parameter_list|(
name|Object
name|target
parameter_list|)
block|{
return|return
name|map
operator|.
name|containsValue
argument_list|(
name|target
argument_list|)
return|;
block|}
DECL|method|writeReplace ()
annotation|@
name|Override
name|Object
name|writeReplace
parameter_list|()
block|{
return|return
operator|new
name|ValuesSerializedForm
argument_list|<
name|V
argument_list|>
argument_list|(
name|map
argument_list|)
return|;
block|}
block|}
DECL|class|ValuesSerializedForm
specifier|private
specifier|static
class|class
name|ValuesSerializedForm
parameter_list|<
name|V
parameter_list|>
implements|implements
name|Serializable
block|{
DECL|field|map
specifier|final
name|ImmutableSortedMap
argument_list|<
name|?
argument_list|,
name|V
argument_list|>
name|map
decl_stmt|;
DECL|method|ValuesSerializedForm (ImmutableSortedMap<?, V> map)
name|ValuesSerializedForm
parameter_list|(
name|ImmutableSortedMap
argument_list|<
name|?
argument_list|,
name|V
argument_list|>
name|map
parameter_list|)
block|{
name|this
operator|.
name|map
operator|=
name|map
expr_stmt|;
block|}
DECL|method|readResolve ()
name|Object
name|readResolve
parameter_list|()
block|{
return|return
name|map
operator|.
name|values
argument_list|()
return|;
block|}
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|0
decl_stmt|;
block|}
comment|/**    * Returns the comparator that orders the keys, which is    * {@link Ordering#natural()} when the natural ordering of the keys is used.    * Note that its behavior is not consistent with {@link TreeMap#comparator()},    * which returns {@code null} to indicate natural ordering.    */
DECL|method|comparator ()
specifier|public
name|Comparator
argument_list|<
name|?
super|super
name|K
argument_list|>
name|comparator
parameter_list|()
block|{
return|return
name|comparator
return|;
block|}
DECL|method|firstKey ()
specifier|public
name|K
name|firstKey
parameter_list|()
block|{
if|if
condition|(
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|NoSuchElementException
argument_list|()
throw|;
block|}
return|return
name|entries
index|[
name|fromIndex
index|]
operator|.
name|getKey
argument_list|()
return|;
block|}
DECL|method|lastKey ()
specifier|public
name|K
name|lastKey
parameter_list|()
block|{
if|if
condition|(
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|NoSuchElementException
argument_list|()
throw|;
block|}
return|return
name|entries
index|[
name|toIndex
operator|-
literal|1
index|]
operator|.
name|getKey
argument_list|()
return|;
block|}
comment|/**    * This method returns a {@code ImmutableSortedMap}, consisting of the entries    * whose keys are less than {@code toKey}.    *    *<p>The {@link SortedMap#headMap} documentation states that a submap of a    * submap throws an {@link IllegalArgumentException} if passed a {@code toKey}    * greater than an earlier {@code toKey}. However, this method doesn't throw    * an exception in that situation, but instead keeps the original {@code    * toKey}.    */
DECL|method|headMap (K toKey)
specifier|public
name|ImmutableSortedMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|headMap
parameter_list|(
name|K
name|toKey
parameter_list|)
block|{
name|int
name|newToIndex
init|=
name|findSubmapIndex
argument_list|(
name|checkNotNull
argument_list|(
name|toKey
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|createSubmap
argument_list|(
name|fromIndex
argument_list|,
name|newToIndex
argument_list|)
return|;
block|}
comment|/**    * This method returns a {@code ImmutableSortedMap}, consisting of the entries    * whose keys ranges from {@code fromKey}, inclusive, to {@code toKey},    * exclusive.    *    *<p>The {@link SortedMap#subMap} documentation states that a submap of a    * submap throws an {@link IllegalArgumentException} if passed a {@code    * fromKey} less than an earlier {@code fromKey}. However, this method doesn't    * throw an exception in that situation, but instead keeps the original {@code    * fromKey}. Similarly, this method keeps the original {@code toKey}, instead    * of throwing an exception, if passed a {@code toKey} greater than an earlier    * {@code toKey}.    */
DECL|method|subMap (K fromKey, K toKey)
specifier|public
name|ImmutableSortedMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|subMap
parameter_list|(
name|K
name|fromKey
parameter_list|,
name|K
name|toKey
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|fromKey
argument_list|)
expr_stmt|;
name|checkNotNull
argument_list|(
name|toKey
argument_list|)
expr_stmt|;
name|checkArgument
argument_list|(
name|comparator
operator|.
name|compare
argument_list|(
name|fromKey
argument_list|,
name|toKey
argument_list|)
operator|<=
literal|0
argument_list|)
expr_stmt|;
name|int
name|newFromIndex
init|=
name|findSubmapIndex
argument_list|(
name|fromKey
argument_list|)
decl_stmt|;
name|int
name|newToIndex
init|=
name|findSubmapIndex
argument_list|(
name|toKey
argument_list|)
decl_stmt|;
return|return
name|createSubmap
argument_list|(
name|newFromIndex
argument_list|,
name|newToIndex
argument_list|)
return|;
block|}
comment|/**    * This method returns a {@code ImmutableSortedMap}, consisting of the entries    * whose keys are greater than or equals to {@code fromKey}.    *    *<p>The {@link SortedMap#tailMap} documentation states that a submap of a    * submap throws an {@link IllegalArgumentException} if passed a {@code    * fromKey} less than an earlier {@code fromKey}. However, this method doesn't    * throw an exception in that situation, but instead keeps the original {@code    * fromKey}.    */
DECL|method|tailMap (K fromKey)
specifier|public
name|ImmutableSortedMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|tailMap
parameter_list|(
name|K
name|fromKey
parameter_list|)
block|{
name|int
name|newFromIndex
init|=
name|findSubmapIndex
argument_list|(
name|checkNotNull
argument_list|(
name|fromKey
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|createSubmap
argument_list|(
name|newFromIndex
argument_list|,
name|toIndex
argument_list|)
return|;
block|}
DECL|method|findSubmapIndex (K key)
specifier|private
name|int
name|findSubmapIndex
parameter_list|(
name|K
name|key
parameter_list|)
block|{
name|int
name|index
init|=
name|binarySearch
argument_list|(
name|key
argument_list|)
decl_stmt|;
return|return
operator|(
name|index
operator|>=
literal|0
operator|)
condition|?
name|index
else|:
operator|(
operator|-
name|index
operator|-
literal|1
operator|)
return|;
block|}
DECL|method|createSubmap ( int newFromIndex, int newToIndex)
specifier|private
name|ImmutableSortedMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|createSubmap
parameter_list|(
name|int
name|newFromIndex
parameter_list|,
name|int
name|newToIndex
parameter_list|)
block|{
if|if
condition|(
name|newFromIndex
operator|<
name|newToIndex
condition|)
block|{
return|return
operator|new
name|ImmutableSortedMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|(
name|entries
argument_list|,
name|comparator
argument_list|,
name|newFromIndex
argument_list|,
name|newToIndex
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|emptyMap
argument_list|(
name|comparator
argument_list|)
return|;
block|}
block|}
comment|/**    * Serialized type for all ImmutableSortedMap instances. It captures the    * logical contents and they are reconstructed using public factory methods.    * This ensures that the implementation types remain as implementation    * details.    */
DECL|class|SerializedForm
specifier|private
specifier|static
class|class
name|SerializedForm
extends|extends
name|ImmutableMap
operator|.
name|SerializedForm
block|{
DECL|field|comparator
specifier|private
specifier|final
name|Comparator
argument_list|<
name|Object
argument_list|>
name|comparator
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|SerializedForm (ImmutableSortedMap<?, ?> sortedMap)
name|SerializedForm
parameter_list|(
name|ImmutableSortedMap
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|sortedMap
parameter_list|)
block|{
name|super
argument_list|(
name|sortedMap
argument_list|)
expr_stmt|;
name|comparator
operator|=
operator|(
name|Comparator
argument_list|<
name|Object
argument_list|>
operator|)
name|sortedMap
operator|.
name|comparator
argument_list|()
expr_stmt|;
block|}
DECL|method|readResolve ()
annotation|@
name|Override
name|Object
name|readResolve
parameter_list|()
block|{
name|Builder
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|builder
init|=
operator|new
name|Builder
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
argument_list|(
name|comparator
argument_list|)
decl_stmt|;
return|return
name|createMap
argument_list|(
name|builder
argument_list|)
return|;
block|}
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|0
decl_stmt|;
block|}
DECL|method|writeReplace ()
annotation|@
name|Override
name|Object
name|writeReplace
parameter_list|()
block|{
return|return
operator|new
name|SerializedForm
argument_list|(
name|this
argument_list|)
return|;
block|}
comment|// This class is never actually serialized directly, but we have to make the
comment|// warning go away (and suppressing would suppress for all nested classes too)
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|0
decl_stmt|;
block|}
end_class

end_unit

