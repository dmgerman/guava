begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2009 Google Inc.  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.testing
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|testing
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|Beta
import|;
end_import

begin_comment
comment|/**  * Simple utility for when you want to create a {@link TearDown} that may throw  * an exception but should not fail a test when it does. Use it just like a  * {@link TearDown}, except override {@link #sloppyTearDown()} instead.  *  * @author Luiz-Otavio Zorzella  * @since 8  */
end_comment

begin_class
annotation|@
name|Beta
DECL|class|SloppyTearDown
specifier|public
specifier|abstract
class|class
name|SloppyTearDown
implements|implements
name|TearDown
block|{
DECL|field|logger
specifier|public
specifier|static
specifier|final
name|Logger
name|logger
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|SloppyTearDown
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
DECL|method|tearDown ()
specifier|public
specifier|final
name|void
name|tearDown
parameter_list|()
block|{
try|try
block|{
name|sloppyTearDown
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|logger
operator|.
name|log
argument_list|(
name|Level
operator|.
name|INFO
argument_list|,
literal|"exception thrown during tearDown: "
operator|+
name|t
operator|.
name|getMessage
argument_list|()
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|sloppyTearDown ()
specifier|public
specifier|abstract
name|void
name|sloppyTearDown
parameter_list|()
throws|throws
name|Exception
function_decl|;
block|}
end_class

end_unit

