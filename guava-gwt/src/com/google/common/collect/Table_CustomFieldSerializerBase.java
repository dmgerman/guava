begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2009 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except  * in compliance with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software distributed under the License  * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express  * or implied. See the License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|com.google.common.collect
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|rpc
operator|.
name|SerializationException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|rpc
operator|.
name|SerializationStreamReader
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|rpc
operator|.
name|SerializationStreamWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_comment
comment|/**  * This class contains static utility methods for writing {@link Table} GWT field serializers.  * Serializers should delegate to {@link #serialize} and {@link #populate}.  *  *<p>For {@link ImmutableTable}, see {@link ImmutableTable_CustomFieldSerializerBase}.  *  * @author Chris Povirk  */
end_comment

begin_class
DECL|class|Table_CustomFieldSerializerBase
specifier|final
class|class
name|Table_CustomFieldSerializerBase
block|{
DECL|method|populate ( SerializationStreamReader reader, T table)
specifier|static
parameter_list|<
name|T
extends|extends
name|StandardTable
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|,
name|Object
argument_list|>
parameter_list|>
name|T
name|populate
parameter_list|(
name|SerializationStreamReader
name|reader
parameter_list|,
name|T
name|table
parameter_list|)
throws|throws
name|SerializationException
block|{
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|hashMap
init|=
operator|(
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|reader
operator|.
name|readObject
argument_list|()
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|row
range|:
name|hashMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|table
operator|.
name|row
argument_list|(
name|row
operator|.
name|getKey
argument_list|()
argument_list|)
operator|.
name|putAll
argument_list|(
operator|(
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|row
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|table
return|;
block|}
DECL|method|serialize (SerializationStreamWriter writer, StandardTable<?, ?, ?> table)
specifier|static
name|void
name|serialize
parameter_list|(
name|SerializationStreamWriter
name|writer
parameter_list|,
name|StandardTable
argument_list|<
name|?
argument_list|,
name|?
argument_list|,
name|?
argument_list|>
name|table
parameter_list|)
throws|throws
name|SerializationException
block|{
comment|/*      * The backing map of a {Hash,Tree}BasedTable is a {Hash,Tree}Map of {Hash,Tree}Maps. Therefore,      * the backing map is serializable (assuming that the row, column and values, along with any      * comparators, are all serializable).      */
name|writer
operator|.
name|writeObject
argument_list|(
name|table
operator|.
name|backingMap
argument_list|)
expr_stmt|;
block|}
DECL|method|Table_CustomFieldSerializerBase ()
specifier|private
name|Table_CustomFieldSerializerBase
parameter_list|()
block|{}
block|}
end_class

end_unit

