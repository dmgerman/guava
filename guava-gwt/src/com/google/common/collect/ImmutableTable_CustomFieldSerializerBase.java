begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2012 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except  * in compliance with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software distributed under the License  * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express  * or implied. See the License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|com.google.common.collect
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|rpc
operator|.
name|SerializationException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|rpc
operator|.
name|SerializationStreamReader
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|rpc
operator|.
name|SerializationStreamWriter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|rpc
operator|.
name|core
operator|.
name|java
operator|.
name|util
operator|.
name|Map_CustomFieldSerializerBase
import|;
end_import

begin_comment
comment|/**  * This class contains static utility methods for writing {@link ImmutableTable} GWT field  * serializers. Serializers should delegate to {@link #serialize} and {@link #instantiate}.  *  * @author Chris Povirk  */
end_comment

begin_class
DECL|class|ImmutableTable_CustomFieldSerializerBase
specifier|final
class|class
name|ImmutableTable_CustomFieldSerializerBase
block|{
DECL|method|instantiate (SerializationStreamReader reader)
specifier|public
specifier|static
name|ImmutableTable
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|,
name|Object
argument_list|>
name|instantiate
parameter_list|(
name|SerializationStreamReader
name|reader
parameter_list|)
throws|throws
name|SerializationException
block|{
name|ImmutableTable
operator|.
name|Builder
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|,
name|Object
argument_list|>
name|builder
init|=
name|ImmutableTable
operator|.
name|builder
argument_list|()
decl_stmt|;
name|int
name|rowCount
init|=
name|reader
operator|.
name|readInt
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|rowCount
condition|;
name|i
operator|++
control|)
block|{
name|Object
name|rowKey
init|=
name|reader
operator|.
name|readObject
argument_list|()
decl_stmt|;
name|int
name|colCount
init|=
name|reader
operator|.
name|readInt
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|colCount
condition|;
name|j
operator|++
control|)
block|{
name|builder
operator|.
name|put
argument_list|(
name|rowKey
argument_list|,
name|reader
operator|.
name|readObject
argument_list|()
argument_list|,
name|reader
operator|.
name|readObject
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|serialize ( SerializationStreamWriter writer, ImmutableTable<Object, Object, Object> table)
specifier|public
specifier|static
name|void
name|serialize
parameter_list|(
name|SerializationStreamWriter
name|writer
parameter_list|,
name|ImmutableTable
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|,
name|Object
argument_list|>
name|table
parameter_list|)
throws|throws
name|SerializationException
block|{
name|writer
operator|.
name|writeInt
argument_list|(
name|table
operator|.
name|rowKeySet
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Object
name|rowKey
range|:
name|table
operator|.
name|rowKeySet
argument_list|()
control|)
block|{
name|writer
operator|.
name|writeObject
argument_list|(
name|rowKey
argument_list|)
expr_stmt|;
name|Map_CustomFieldSerializerBase
operator|.
name|serialize
argument_list|(
name|writer
argument_list|,
name|table
operator|.
name|row
argument_list|(
name|rowKey
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|ImmutableTable_CustomFieldSerializerBase ()
specifier|private
name|ImmutableTable_CustomFieldSerializerBase
parameter_list|()
block|{}
block|}
end_class

end_unit

