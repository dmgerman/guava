begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2007 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.base
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtCompatible
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|testing
operator|.
name|EqualsTester
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Tests com.google.common.base.Suppliers.  *  * @author Laurence Gonsalves  * @author Harry Heymann  */
end_comment

begin_class
annotation|@
name|GwtCompatible
argument_list|(
name|emulated
operator|=
literal|true
argument_list|)
DECL|class|SuppliersTest
specifier|public
class|class
name|SuppliersTest
extends|extends
name|TestCase
block|{
DECL|method|testCompose ()
specifier|public
name|void
name|testCompose
parameter_list|()
block|{
name|Supplier
argument_list|<
name|Integer
argument_list|>
name|fiveSupplier
init|=
operator|new
name|Supplier
argument_list|<
name|Integer
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Integer
name|get
parameter_list|()
block|{
return|return
literal|5
return|;
block|}
block|}
decl_stmt|;
name|Function
argument_list|<
name|Number
argument_list|,
name|Integer
argument_list|>
name|intValueFunction
init|=
operator|new
name|Function
argument_list|<
name|Number
argument_list|,
name|Integer
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Integer
name|apply
parameter_list|(
name|Number
name|x
parameter_list|)
block|{
return|return
name|x
operator|.
name|intValue
argument_list|()
return|;
block|}
block|}
decl_stmt|;
name|Supplier
argument_list|<
name|Integer
argument_list|>
name|squareSupplier
init|=
name|Suppliers
operator|.
name|compose
argument_list|(
name|intValueFunction
argument_list|,
name|fiveSupplier
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|5
argument_list|)
argument_list|,
name|squareSupplier
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testComposeWithLists ()
specifier|public
name|void
name|testComposeWithLists
parameter_list|()
block|{
name|Supplier
argument_list|<
name|ArrayList
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|listSupplier
init|=
operator|new
name|Supplier
argument_list|<
name|ArrayList
argument_list|<
name|Integer
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ArrayList
argument_list|<
name|Integer
argument_list|>
name|get
parameter_list|()
block|{
return|return
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|0
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|Function
argument_list|<
name|List
argument_list|<
name|Integer
argument_list|>
argument_list|,
name|List
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|addElementFunction
init|=
operator|new
name|Function
argument_list|<
name|List
argument_list|<
name|Integer
argument_list|>
argument_list|,
name|List
argument_list|<
name|Integer
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|Integer
argument_list|>
name|apply
parameter_list|(
name|List
argument_list|<
name|Integer
argument_list|>
name|list
parameter_list|)
block|{
name|ArrayList
argument_list|<
name|Integer
argument_list|>
name|result
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|list
argument_list|)
decl_stmt|;
name|result
operator|.
name|add
argument_list|(
literal|1
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
block|}
decl_stmt|;
name|Supplier
argument_list|<
name|List
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|addSupplier
init|=
name|Suppliers
operator|.
name|compose
argument_list|(
name|addElementFunction
argument_list|,
name|listSupplier
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|result
init|=
name|addSupplier
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|0
argument_list|)
argument_list|,
name|result
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|1
argument_list|)
argument_list|,
name|result
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|class|CountingSupplier
specifier|static
class|class
name|CountingSupplier
implements|implements
name|Supplier
argument_list|<
name|Integer
argument_list|>
implements|,
name|Serializable
block|{
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|0L
decl_stmt|;
DECL|field|calls
specifier|transient
name|int
name|calls
init|=
literal|0
decl_stmt|;
annotation|@
name|Override
DECL|method|get ()
specifier|public
name|Integer
name|get
parameter_list|()
block|{
name|calls
operator|++
expr_stmt|;
return|return
name|calls
operator|*
literal|10
return|;
block|}
block|}
DECL|method|testMemoize ()
specifier|public
name|void
name|testMemoize
parameter_list|()
block|{
name|CountingSupplier
name|countingSupplier
init|=
operator|new
name|CountingSupplier
argument_list|()
decl_stmt|;
name|Supplier
argument_list|<
name|Integer
argument_list|>
name|memoizedSupplier
init|=
name|Suppliers
operator|.
name|memoize
argument_list|(
name|countingSupplier
argument_list|)
decl_stmt|;
name|checkMemoize
argument_list|(
name|countingSupplier
argument_list|,
name|memoizedSupplier
argument_list|)
expr_stmt|;
block|}
DECL|method|testMemoize_redudantly ()
specifier|public
name|void
name|testMemoize_redudantly
parameter_list|()
block|{
name|CountingSupplier
name|countingSupplier
init|=
operator|new
name|CountingSupplier
argument_list|()
decl_stmt|;
name|Supplier
argument_list|<
name|Integer
argument_list|>
name|memoizedSupplier
init|=
name|Suppliers
operator|.
name|memoize
argument_list|(
name|countingSupplier
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
name|memoizedSupplier
argument_list|,
name|Suppliers
operator|.
name|memoize
argument_list|(
name|memoizedSupplier
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|checkMemoize ( CountingSupplier countingSupplier, Supplier<Integer> memoizedSupplier)
specifier|private
name|void
name|checkMemoize
parameter_list|(
name|CountingSupplier
name|countingSupplier
parameter_list|,
name|Supplier
argument_list|<
name|Integer
argument_list|>
name|memoizedSupplier
parameter_list|)
block|{
comment|// the underlying supplier hasn't executed yet
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|countingSupplier
operator|.
name|calls
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
operator|(
name|int
operator|)
name|memoizedSupplier
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
comment|// now it has
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|countingSupplier
operator|.
name|calls
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
operator|(
name|int
operator|)
name|memoizedSupplier
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
comment|// it still should only have executed once due to memoization
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|countingSupplier
operator|.
name|calls
argument_list|)
expr_stmt|;
block|}
DECL|method|testMemoizeExceptionThrown ()
specifier|public
name|void
name|testMemoizeExceptionThrown
parameter_list|()
block|{
name|Supplier
argument_list|<
name|Integer
argument_list|>
name|exceptingSupplier
init|=
operator|new
name|Supplier
argument_list|<
name|Integer
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Integer
name|get
parameter_list|()
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|()
throw|;
block|}
block|}
decl_stmt|;
name|Supplier
argument_list|<
name|Integer
argument_list|>
name|memoizedSupplier
init|=
name|Suppliers
operator|.
name|memoize
argument_list|(
name|exceptingSupplier
argument_list|)
decl_stmt|;
comment|// call get() twice to make sure that memoization doesn't interfere
comment|// with throwing the exception
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|2
condition|;
name|i
operator|++
control|)
block|{
try|try
block|{
name|memoizedSupplier
operator|.
name|get
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"failed to throw NullPointerException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|e
parameter_list|)
block|{
comment|// this is what should happen
block|}
block|}
block|}
DECL|method|testOfInstanceSuppliesSameInstance ()
specifier|public
name|void
name|testOfInstanceSuppliesSameInstance
parameter_list|()
block|{
name|Object
name|toBeSupplied
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|Supplier
argument_list|<
name|Object
argument_list|>
name|objectSupplier
init|=
name|Suppliers
operator|.
name|ofInstance
argument_list|(
name|toBeSupplied
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
name|toBeSupplied
argument_list|,
name|objectSupplier
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|toBeSupplied
argument_list|,
name|objectSupplier
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
comment|// idempotent
block|}
DECL|method|testOfInstanceSuppliesNull ()
specifier|public
name|void
name|testOfInstanceSuppliesNull
parameter_list|()
block|{
name|Supplier
argument_list|<
name|Integer
argument_list|>
name|nullSupplier
init|=
name|Suppliers
operator|.
name|ofInstance
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|nullSupplier
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testSupplierFunction ()
specifier|public
name|void
name|testSupplierFunction
parameter_list|()
block|{
name|Supplier
argument_list|<
name|Integer
argument_list|>
name|supplier
init|=
name|Suppliers
operator|.
name|ofInstance
argument_list|(
literal|14
argument_list|)
decl_stmt|;
name|Function
argument_list|<
name|Supplier
argument_list|<
name|Integer
argument_list|>
argument_list|,
name|Integer
argument_list|>
name|supplierFunction
init|=
name|Suppliers
operator|.
name|supplierFunction
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|14
argument_list|,
operator|(
name|int
operator|)
name|supplierFunction
operator|.
name|apply
argument_list|(
name|supplier
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testOfInstance_equals ()
specifier|public
name|void
name|testOfInstance_equals
parameter_list|()
block|{
operator|new
name|EqualsTester
argument_list|()
operator|.
name|addEqualityGroup
argument_list|(
name|Suppliers
operator|.
name|ofInstance
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
name|Suppliers
operator|.
name|ofInstance
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
operator|.
name|addEqualityGroup
argument_list|(
name|Suppliers
operator|.
name|ofInstance
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
operator|.
name|testEquals
argument_list|()
expr_stmt|;
block|}
DECL|method|testCompose_equals ()
specifier|public
name|void
name|testCompose_equals
parameter_list|()
block|{
operator|new
name|EqualsTester
argument_list|()
operator|.
name|addEqualityGroup
argument_list|(
name|Suppliers
operator|.
name|compose
argument_list|(
name|Functions
operator|.
name|constant
argument_list|(
literal|1
argument_list|)
argument_list|,
name|Suppliers
operator|.
name|ofInstance
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
argument_list|,
name|Suppliers
operator|.
name|compose
argument_list|(
name|Functions
operator|.
name|constant
argument_list|(
literal|1
argument_list|)
argument_list|,
name|Suppliers
operator|.
name|ofInstance
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|addEqualityGroup
argument_list|(
name|Suppliers
operator|.
name|compose
argument_list|(
name|Functions
operator|.
name|constant
argument_list|(
literal|2
argument_list|)
argument_list|,
name|Suppliers
operator|.
name|ofInstance
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|addEqualityGroup
argument_list|(
name|Suppliers
operator|.
name|compose
argument_list|(
name|Functions
operator|.
name|constant
argument_list|(
literal|1
argument_list|)
argument_list|,
name|Suppliers
operator|.
name|ofInstance
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|testEquals
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

