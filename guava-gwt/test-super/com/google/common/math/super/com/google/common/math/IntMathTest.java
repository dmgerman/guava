begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2011 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.math
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|MathTesting
operator|.
name|ALL_INTEGER_CANDIDATES
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|MathTesting
operator|.
name|ALL_ROUNDING_MODES
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|MathTesting
operator|.
name|ALL_SAFE_ROUNDING_MODES
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|MathTesting
operator|.
name|EXPONENTS
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|MathTesting
operator|.
name|NEGATIVE_INTEGER_CANDIDATES
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|MathTesting
operator|.
name|NONZERO_INTEGER_CANDIDATES
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|MathTesting
operator|.
name|POSITIVE_INTEGER_CANDIDATES
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|TestPlatform
operator|.
name|intsCanGoOutOfRange
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|math
operator|.
name|BigInteger
operator|.
name|valueOf
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|math
operator|.
name|RoundingMode
operator|.
name|UNNECESSARY
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtCompatible
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigDecimal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|RoundingMode
import|;
end_import

begin_comment
comment|/**  * Tests for {@link IntMath}.  *  * @author Louis Wasserman  */
end_comment

begin_class
annotation|@
name|GwtCompatible
argument_list|(
name|emulated
operator|=
literal|true
argument_list|)
DECL|class|IntMathTest
specifier|public
class|class
name|IntMathTest
extends|extends
name|TestCase
block|{
DECL|method|testLessThanBranchFree ()
specifier|public
name|void
name|testLessThanBranchFree
parameter_list|()
block|{
for|for
control|(
name|int
name|x
range|:
name|ALL_INTEGER_CANDIDATES
control|)
block|{
for|for
control|(
name|int
name|y
range|:
name|ALL_INTEGER_CANDIDATES
control|)
block|{
if|if
condition|(
name|LongMath
operator|.
name|fitsInInt
argument_list|(
operator|(
name|long
operator|)
name|x
operator|-
name|y
argument_list|)
condition|)
block|{
name|int
name|expected
init|=
operator|(
name|x
operator|<
name|y
operator|)
condition|?
literal|1
else|:
literal|0
decl_stmt|;
name|int
name|actual
init|=
name|IntMath
operator|.
name|lessThanBranchFree
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|testLog2ZeroAlwaysThrows ()
specifier|public
name|void
name|testLog2ZeroAlwaysThrows
parameter_list|()
block|{
for|for
control|(
name|RoundingMode
name|mode
range|:
name|ALL_ROUNDING_MODES
control|)
block|{
try|try
block|{
name|IntMath
operator|.
name|log2
argument_list|(
literal|0
argument_list|,
name|mode
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected IllegalArgumentException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{}
block|}
block|}
DECL|method|testLog2NegativeAlwaysThrows ()
specifier|public
name|void
name|testLog2NegativeAlwaysThrows
parameter_list|()
block|{
for|for
control|(
name|int
name|x
range|:
name|NEGATIVE_INTEGER_CANDIDATES
control|)
block|{
for|for
control|(
name|RoundingMode
name|mode
range|:
name|ALL_ROUNDING_MODES
control|)
block|{
try|try
block|{
name|IntMath
operator|.
name|log2
argument_list|(
name|x
argument_list|,
name|mode
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected IllegalArgumentException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{}
block|}
block|}
block|}
comment|// Relies on the correctness of BigIntegrerMath.log2 for all modes except UNNECESSARY.
DECL|method|testLog2MatchesBigInteger ()
specifier|public
name|void
name|testLog2MatchesBigInteger
parameter_list|()
block|{
for|for
control|(
name|int
name|x
range|:
name|POSITIVE_INTEGER_CANDIDATES
control|)
block|{
for|for
control|(
name|RoundingMode
name|mode
range|:
name|ALL_SAFE_ROUNDING_MODES
control|)
block|{
name|assertEquals
argument_list|(
name|BigIntegerMath
operator|.
name|log2
argument_list|(
name|valueOf
argument_list|(
name|x
argument_list|)
argument_list|,
name|mode
argument_list|)
argument_list|,
name|IntMath
operator|.
name|log2
argument_list|(
name|x
argument_list|,
name|mode
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// Relies on the correctness of isPowerOfTwo(int).
DECL|method|testLog2Exact ()
specifier|public
name|void
name|testLog2Exact
parameter_list|()
block|{
for|for
control|(
name|int
name|x
range|:
name|POSITIVE_INTEGER_CANDIDATES
control|)
block|{
comment|// We only expect an exception if x was not a power of 2.
name|boolean
name|isPowerOf2
init|=
name|IntMath
operator|.
name|isPowerOfTwo
argument_list|(
name|x
argument_list|)
decl_stmt|;
try|try
block|{
name|assertEquals
argument_list|(
name|x
argument_list|,
literal|1
operator|<<
name|IntMath
operator|.
name|log2
argument_list|(
name|x
argument_list|,
name|UNNECESSARY
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|isPowerOf2
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ArithmeticException
name|e
parameter_list|)
block|{
name|assertFalse
argument_list|(
name|isPowerOf2
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// Relies on the correctness of BigIntegerMath.log10 for all modes except UNNECESSARY.
comment|// Relies on the correctness of log10(int, FLOOR) and of pow(int, int).
comment|// Simple test to cover sqrt(0) for all types and all modes.
comment|/* Relies on the correctness of BigIntegerMath.sqrt for all modes except UNNECESSARY. */
comment|/* Relies on the correctness of sqrt(int, FLOOR). */
DECL|method|testDivNonZero ()
specifier|public
name|void
name|testDivNonZero
parameter_list|()
block|{
for|for
control|(
name|int
name|p
range|:
name|NONZERO_INTEGER_CANDIDATES
control|)
block|{
for|for
control|(
name|int
name|q
range|:
name|NONZERO_INTEGER_CANDIDATES
control|)
block|{
for|for
control|(
name|RoundingMode
name|mode
range|:
name|ALL_SAFE_ROUNDING_MODES
control|)
block|{
comment|// Skip some tests that fail due to GWT's non-compliant int implementation.
comment|// TODO(cpovirk): does this test fail for only some rounding modes or for all?
if|if
condition|(
name|p
operator|==
operator|-
literal|2147483648
operator|&&
name|q
operator|==
operator|-
literal|1
operator|&&
name|intsCanGoOutOfRange
argument_list|()
condition|)
block|{
continue|continue;
block|}
name|int
name|expected
init|=
operator|new
name|BigDecimal
argument_list|(
name|valueOf
argument_list|(
name|p
argument_list|)
argument_list|)
operator|.
name|divide
argument_list|(
operator|new
name|BigDecimal
argument_list|(
name|valueOf
argument_list|(
name|q
argument_list|)
argument_list|)
argument_list|,
literal|0
argument_list|,
name|mode
argument_list|)
operator|.
name|intValue
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|p
operator|+
literal|"/"
operator|+
name|q
argument_list|,
name|force32
argument_list|(
name|expected
argument_list|)
argument_list|,
name|IntMath
operator|.
name|divide
argument_list|(
name|p
argument_list|,
name|q
argument_list|,
name|mode
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|testDivNonZeroExact ()
specifier|public
name|void
name|testDivNonZeroExact
parameter_list|()
block|{
for|for
control|(
name|int
name|p
range|:
name|NONZERO_INTEGER_CANDIDATES
control|)
block|{
for|for
control|(
name|int
name|q
range|:
name|NONZERO_INTEGER_CANDIDATES
control|)
block|{
comment|// Skip some tests that fail due to GWT's non-compliant int implementation.
if|if
condition|(
name|p
operator|==
operator|-
literal|2147483648
operator|&&
name|q
operator|==
operator|-
literal|1
operator|&&
name|intsCanGoOutOfRange
argument_list|()
condition|)
block|{
continue|continue;
block|}
name|boolean
name|dividesEvenly
init|=
operator|(
name|p
operator|%
name|q
operator|)
operator|==
literal|0
decl_stmt|;
try|try
block|{
name|assertEquals
argument_list|(
name|p
operator|+
literal|"/"
operator|+
name|q
argument_list|,
name|p
argument_list|,
name|IntMath
operator|.
name|divide
argument_list|(
name|p
argument_list|,
name|q
argument_list|,
name|UNNECESSARY
argument_list|)
operator|*
name|q
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|p
operator|+
literal|"/"
operator|+
name|q
operator|+
literal|" not expected to divide evenly"
argument_list|,
name|dividesEvenly
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ArithmeticException
name|e
parameter_list|)
block|{
name|assertFalse
argument_list|(
name|p
operator|+
literal|"/"
operator|+
name|q
operator|+
literal|" expected to divide evenly"
argument_list|,
name|dividesEvenly
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|testZeroDivIsAlwaysZero ()
specifier|public
name|void
name|testZeroDivIsAlwaysZero
parameter_list|()
block|{
for|for
control|(
name|int
name|q
range|:
name|NONZERO_INTEGER_CANDIDATES
control|)
block|{
for|for
control|(
name|RoundingMode
name|mode
range|:
name|ALL_ROUNDING_MODES
control|)
block|{
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|IntMath
operator|.
name|divide
argument_list|(
literal|0
argument_list|,
name|q
argument_list|,
name|mode
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|testDivByZeroAlwaysFails ()
specifier|public
name|void
name|testDivByZeroAlwaysFails
parameter_list|()
block|{
for|for
control|(
name|int
name|p
range|:
name|ALL_INTEGER_CANDIDATES
control|)
block|{
for|for
control|(
name|RoundingMode
name|mode
range|:
name|ALL_ROUNDING_MODES
control|)
block|{
try|try
block|{
name|IntMath
operator|.
name|divide
argument_list|(
name|p
argument_list|,
literal|0
argument_list|,
name|mode
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected ArithmeticException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ArithmeticException
name|expected
parameter_list|)
block|{}
block|}
block|}
block|}
DECL|method|testMod ()
specifier|public
name|void
name|testMod
parameter_list|()
block|{
for|for
control|(
name|int
name|x
range|:
name|ALL_INTEGER_CANDIDATES
control|)
block|{
for|for
control|(
name|int
name|m
range|:
name|POSITIVE_INTEGER_CANDIDATES
control|)
block|{
name|assertEquals
argument_list|(
name|valueOf
argument_list|(
name|x
argument_list|)
operator|.
name|mod
argument_list|(
name|valueOf
argument_list|(
name|m
argument_list|)
argument_list|)
operator|.
name|intValue
argument_list|()
argument_list|,
name|IntMath
operator|.
name|mod
argument_list|(
name|x
argument_list|,
name|m
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|testModNegativeModulusFails ()
specifier|public
name|void
name|testModNegativeModulusFails
parameter_list|()
block|{
for|for
control|(
name|int
name|x
range|:
name|POSITIVE_INTEGER_CANDIDATES
control|)
block|{
for|for
control|(
name|int
name|m
range|:
name|NEGATIVE_INTEGER_CANDIDATES
control|)
block|{
try|try
block|{
name|IntMath
operator|.
name|mod
argument_list|(
name|x
argument_list|,
name|m
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected ArithmeticException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ArithmeticException
name|expected
parameter_list|)
block|{}
block|}
block|}
block|}
DECL|method|testModZeroModulusFails ()
specifier|public
name|void
name|testModZeroModulusFails
parameter_list|()
block|{
for|for
control|(
name|int
name|x
range|:
name|ALL_INTEGER_CANDIDATES
control|)
block|{
try|try
block|{
name|IntMath
operator|.
name|mod
argument_list|(
name|x
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected ArithmeticException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ArithmeticException
name|expected
parameter_list|)
block|{}
block|}
block|}
DECL|method|testGCD ()
specifier|public
name|void
name|testGCD
parameter_list|()
block|{
for|for
control|(
name|int
name|a
range|:
name|POSITIVE_INTEGER_CANDIDATES
control|)
block|{
for|for
control|(
name|int
name|b
range|:
name|POSITIVE_INTEGER_CANDIDATES
control|)
block|{
name|assertEquals
argument_list|(
name|valueOf
argument_list|(
name|a
argument_list|)
operator|.
name|gcd
argument_list|(
name|valueOf
argument_list|(
name|b
argument_list|)
argument_list|)
argument_list|,
name|valueOf
argument_list|(
name|IntMath
operator|.
name|gcd
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|testGCDZero ()
specifier|public
name|void
name|testGCDZero
parameter_list|()
block|{
for|for
control|(
name|int
name|a
range|:
name|POSITIVE_INTEGER_CANDIDATES
control|)
block|{
name|assertEquals
argument_list|(
name|a
argument_list|,
name|IntMath
operator|.
name|gcd
argument_list|(
name|a
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|a
argument_list|,
name|IntMath
operator|.
name|gcd
argument_list|(
literal|0
argument_list|,
name|a
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|IntMath
operator|.
name|gcd
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testGCDNegativePositiveThrows ()
specifier|public
name|void
name|testGCDNegativePositiveThrows
parameter_list|()
block|{
for|for
control|(
name|int
name|a
range|:
name|NEGATIVE_INTEGER_CANDIDATES
control|)
block|{
try|try
block|{
name|IntMath
operator|.
name|gcd
argument_list|(
name|a
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected IllegalArgumentException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{}
try|try
block|{
name|IntMath
operator|.
name|gcd
argument_list|(
literal|3
argument_list|,
name|a
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected IllegalArgumentException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{}
block|}
block|}
DECL|method|testGCDNegativeZeroThrows ()
specifier|public
name|void
name|testGCDNegativeZeroThrows
parameter_list|()
block|{
for|for
control|(
name|int
name|a
range|:
name|NEGATIVE_INTEGER_CANDIDATES
control|)
block|{
try|try
block|{
name|IntMath
operator|.
name|gcd
argument_list|(
name|a
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected IllegalArgumentException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{}
try|try
block|{
name|IntMath
operator|.
name|gcd
argument_list|(
literal|0
argument_list|,
name|a
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected IllegalArgumentException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{}
block|}
block|}
DECL|method|testCheckedAdd ()
specifier|public
name|void
name|testCheckedAdd
parameter_list|()
block|{
for|for
control|(
name|int
name|a
range|:
name|ALL_INTEGER_CANDIDATES
control|)
block|{
for|for
control|(
name|int
name|b
range|:
name|ALL_INTEGER_CANDIDATES
control|)
block|{
name|BigInteger
name|expectedResult
init|=
name|valueOf
argument_list|(
name|a
argument_list|)
operator|.
name|add
argument_list|(
name|valueOf
argument_list|(
name|b
argument_list|)
argument_list|)
decl_stmt|;
name|boolean
name|expectedSuccess
init|=
name|fitsInInt
argument_list|(
name|expectedResult
argument_list|)
decl_stmt|;
try|try
block|{
name|assertEquals
argument_list|(
name|a
operator|+
name|b
argument_list|,
name|IntMath
operator|.
name|checkedAdd
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|expectedSuccess
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ArithmeticException
name|e
parameter_list|)
block|{
name|assertFalse
argument_list|(
name|expectedSuccess
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|testCheckedSubtract ()
specifier|public
name|void
name|testCheckedSubtract
parameter_list|()
block|{
for|for
control|(
name|int
name|a
range|:
name|ALL_INTEGER_CANDIDATES
control|)
block|{
for|for
control|(
name|int
name|b
range|:
name|ALL_INTEGER_CANDIDATES
control|)
block|{
name|BigInteger
name|expectedResult
init|=
name|valueOf
argument_list|(
name|a
argument_list|)
operator|.
name|subtract
argument_list|(
name|valueOf
argument_list|(
name|b
argument_list|)
argument_list|)
decl_stmt|;
name|boolean
name|expectedSuccess
init|=
name|fitsInInt
argument_list|(
name|expectedResult
argument_list|)
decl_stmt|;
try|try
block|{
name|assertEquals
argument_list|(
name|a
operator|-
name|b
argument_list|,
name|IntMath
operator|.
name|checkedSubtract
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|expectedSuccess
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ArithmeticException
name|e
parameter_list|)
block|{
name|assertFalse
argument_list|(
name|expectedSuccess
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|testCheckedMultiply ()
specifier|public
name|void
name|testCheckedMultiply
parameter_list|()
block|{
for|for
control|(
name|int
name|a
range|:
name|ALL_INTEGER_CANDIDATES
control|)
block|{
for|for
control|(
name|int
name|b
range|:
name|ALL_INTEGER_CANDIDATES
control|)
block|{
name|BigInteger
name|expectedResult
init|=
name|valueOf
argument_list|(
name|a
argument_list|)
operator|.
name|multiply
argument_list|(
name|valueOf
argument_list|(
name|b
argument_list|)
argument_list|)
decl_stmt|;
name|boolean
name|expectedSuccess
init|=
name|fitsInInt
argument_list|(
name|expectedResult
argument_list|)
decl_stmt|;
try|try
block|{
name|assertEquals
argument_list|(
name|a
operator|*
name|b
argument_list|,
name|IntMath
operator|.
name|checkedMultiply
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|expectedSuccess
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ArithmeticException
name|e
parameter_list|)
block|{
name|assertFalse
argument_list|(
name|expectedSuccess
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|testCheckedPow ()
specifier|public
name|void
name|testCheckedPow
parameter_list|()
block|{
for|for
control|(
name|int
name|b
range|:
name|ALL_INTEGER_CANDIDATES
control|)
block|{
for|for
control|(
name|int
name|k
range|:
name|EXPONENTS
control|)
block|{
name|BigInteger
name|expectedResult
init|=
name|valueOf
argument_list|(
name|b
argument_list|)
operator|.
name|pow
argument_list|(
name|k
argument_list|)
decl_stmt|;
name|boolean
name|expectedSuccess
init|=
name|fitsInInt
argument_list|(
name|expectedResult
argument_list|)
decl_stmt|;
try|try
block|{
name|assertEquals
argument_list|(
name|b
operator|+
literal|"^"
operator|+
name|k
argument_list|,
name|force32
argument_list|(
name|expectedResult
operator|.
name|intValue
argument_list|()
argument_list|)
argument_list|,
name|IntMath
operator|.
name|checkedPow
argument_list|(
name|b
argument_list|,
name|k
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|b
operator|+
literal|"^"
operator|+
name|k
operator|+
literal|" should have succeeded"
argument_list|,
name|expectedSuccess
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ArithmeticException
name|e
parameter_list|)
block|{
name|assertFalse
argument_list|(
name|b
operator|+
literal|"^"
operator|+
name|k
operator|+
literal|" should have failed"
argument_list|,
name|expectedSuccess
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|// Depends on the correctness of BigIntegerMath.factorial.
DECL|method|testFactorial ()
specifier|public
name|void
name|testFactorial
parameter_list|()
block|{
for|for
control|(
name|int
name|n
init|=
literal|0
init|;
name|n
operator|<=
literal|50
condition|;
name|n
operator|++
control|)
block|{
name|BigInteger
name|expectedBig
init|=
name|BigIntegerMath
operator|.
name|factorial
argument_list|(
name|n
argument_list|)
decl_stmt|;
name|int
name|expectedInt
init|=
name|fitsInInt
argument_list|(
name|expectedBig
argument_list|)
condition|?
name|expectedBig
operator|.
name|intValue
argument_list|()
else|:
name|Integer
operator|.
name|MAX_VALUE
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedInt
argument_list|,
name|IntMath
operator|.
name|factorial
argument_list|(
name|n
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testFactorialNegative ()
specifier|public
name|void
name|testFactorialNegative
parameter_list|()
block|{
for|for
control|(
name|int
name|n
range|:
name|NEGATIVE_INTEGER_CANDIDATES
control|)
block|{
try|try
block|{
name|IntMath
operator|.
name|factorial
argument_list|(
name|n
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected IllegalArgumentException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{}
block|}
block|}
comment|// Depends on the correctness of BigIntegerMath.binomial.
comment|/**    * Helper method that asserts the arithmetic mean of x and y is equal    * to the expectedMean.    */
DECL|method|assertMean (int expectedMean, int x, int y)
specifier|private
specifier|static
name|void
name|assertMean
parameter_list|(
name|int
name|expectedMean
parameter_list|,
name|int
name|x
parameter_list|,
name|int
name|y
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"The expectedMean should be the same as computeMeanSafely"
argument_list|,
name|expectedMean
argument_list|,
name|computeMeanSafely
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
argument_list|)
expr_stmt|;
name|assertMean
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
expr_stmt|;
block|}
comment|/**    * Helper method that asserts the arithmetic mean of x and y is equal    * to the result of computeMeanSafely.    */
DECL|method|assertMean (int x, int y)
specifier|private
specifier|static
name|void
name|assertMean
parameter_list|(
name|int
name|x
parameter_list|,
name|int
name|y
parameter_list|)
block|{
name|int
name|expectedMean
init|=
name|computeMeanSafely
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedMean
argument_list|,
name|IntMath
operator|.
name|mean
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"The mean of x and y should equal the mean of y and x"
argument_list|,
name|expectedMean
argument_list|,
name|IntMath
operator|.
name|mean
argument_list|(
name|y
argument_list|,
name|x
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Computes the mean in a way that is obvious and resilient to    * overflow by using BigInteger arithmetic.    */
DECL|method|computeMeanSafely (int x, int y)
specifier|private
specifier|static
name|int
name|computeMeanSafely
parameter_list|(
name|int
name|x
parameter_list|,
name|int
name|y
parameter_list|)
block|{
name|BigInteger
name|bigX
init|=
name|BigInteger
operator|.
name|valueOf
argument_list|(
name|x
argument_list|)
decl_stmt|;
name|BigInteger
name|bigY
init|=
name|BigInteger
operator|.
name|valueOf
argument_list|(
name|y
argument_list|)
decl_stmt|;
name|BigDecimal
name|bigMean
init|=
operator|new
name|BigDecimal
argument_list|(
name|bigX
operator|.
name|add
argument_list|(
name|bigY
argument_list|)
argument_list|)
operator|.
name|divide
argument_list|(
name|BigDecimal
operator|.
name|valueOf
argument_list|(
literal|2
argument_list|)
argument_list|,
name|BigDecimal
operator|.
name|ROUND_FLOOR
argument_list|)
decl_stmt|;
comment|// parseInt blows up on overflow as opposed to intValue() which does not.
return|return
name|Integer
operator|.
name|parseInt
argument_list|(
name|bigMean
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
DECL|method|fitsInInt (BigInteger big)
specifier|private
specifier|static
name|boolean
name|fitsInInt
parameter_list|(
name|BigInteger
name|big
parameter_list|)
block|{
return|return
name|big
operator|.
name|bitLength
argument_list|()
operator|<=
literal|31
return|;
block|}
DECL|method|force32 (int value)
specifier|private
specifier|static
name|int
name|force32
parameter_list|(
name|int
name|value
parameter_list|)
block|{
comment|// GWT doesn't consistently overflow values to make them 32-bit, so we need to force it.
return|return
name|value
operator|&
literal|0xffffffff
return|;
block|}
block|}
end_class

end_unit

