begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2011 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.math
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|MathTesting
operator|.
name|ALL_LONG_CANDIDATES
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|MathTesting
operator|.
name|ALL_ROUNDING_MODES
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|MathTesting
operator|.
name|ALL_SAFE_ROUNDING_MODES
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|MathTesting
operator|.
name|NEGATIVE_INTEGER_CANDIDATES
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|MathTesting
operator|.
name|NEGATIVE_LONG_CANDIDATES
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|MathTesting
operator|.
name|POSITIVE_LONG_CANDIDATES
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|math
operator|.
name|BigInteger
operator|.
name|valueOf
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|math
operator|.
name|RoundingMode
operator|.
name|UNNECESSARY
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtCompatible
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigDecimal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|RoundingMode
import|;
end_import

begin_comment
comment|/**  * Tests for LongMath.  *  * @author Louis Wasserman  */
end_comment

begin_class
annotation|@
name|GwtCompatible
argument_list|(
name|emulated
operator|=
literal|true
argument_list|)
DECL|class|LongMathTest
specifier|public
class|class
name|LongMathTest
extends|extends
name|TestCase
block|{
DECL|method|testLessThanBranchFree ()
specifier|public
name|void
name|testLessThanBranchFree
parameter_list|()
block|{
for|for
control|(
name|long
name|x
range|:
name|ALL_LONG_CANDIDATES
control|)
block|{
for|for
control|(
name|long
name|y
range|:
name|ALL_LONG_CANDIDATES
control|)
block|{
name|BigInteger
name|difference
init|=
name|BigInteger
operator|.
name|valueOf
argument_list|(
name|x
argument_list|)
operator|.
name|subtract
argument_list|(
name|BigInteger
operator|.
name|valueOf
argument_list|(
name|y
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|fitsInLong
argument_list|(
name|difference
argument_list|)
condition|)
block|{
name|int
name|expected
init|=
operator|(
name|x
operator|<
name|y
operator|)
condition|?
literal|1
else|:
literal|0
decl_stmt|;
name|int
name|actual
init|=
name|LongMath
operator|.
name|lessThanBranchFree
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|// Throws an ArithmeticException if "the simple implementation" of binomial coefficients overflows
DECL|method|testLog2ZeroAlwaysThrows ()
specifier|public
name|void
name|testLog2ZeroAlwaysThrows
parameter_list|()
block|{
for|for
control|(
name|RoundingMode
name|mode
range|:
name|ALL_ROUNDING_MODES
control|)
block|{
try|try
block|{
name|LongMath
operator|.
name|log2
argument_list|(
literal|0L
argument_list|,
name|mode
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected IllegalArgumentException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{}
block|}
block|}
DECL|method|testLog2NegativeAlwaysThrows ()
specifier|public
name|void
name|testLog2NegativeAlwaysThrows
parameter_list|()
block|{
for|for
control|(
name|long
name|x
range|:
name|NEGATIVE_LONG_CANDIDATES
control|)
block|{
for|for
control|(
name|RoundingMode
name|mode
range|:
name|ALL_ROUNDING_MODES
control|)
block|{
try|try
block|{
name|LongMath
operator|.
name|log2
argument_list|(
name|x
argument_list|,
name|mode
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected IllegalArgumentException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{}
block|}
block|}
block|}
comment|/* Relies on the correctness of BigIntegerMath.log2 for all modes except UNNECESSARY. */
DECL|method|testLog2MatchesBigInteger ()
specifier|public
name|void
name|testLog2MatchesBigInteger
parameter_list|()
block|{
for|for
control|(
name|long
name|x
range|:
name|POSITIVE_LONG_CANDIDATES
control|)
block|{
for|for
control|(
name|RoundingMode
name|mode
range|:
name|ALL_SAFE_ROUNDING_MODES
control|)
block|{
comment|// The BigInteger implementation is tested separately, use it as the reference.
name|assertEquals
argument_list|(
name|BigIntegerMath
operator|.
name|log2
argument_list|(
name|valueOf
argument_list|(
name|x
argument_list|)
argument_list|,
name|mode
argument_list|)
argument_list|,
name|LongMath
operator|.
name|log2
argument_list|(
name|x
argument_list|,
name|mode
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/* Relies on the correctness of isPowerOfTwo(long). */
DECL|method|testLog2Exact ()
specifier|public
name|void
name|testLog2Exact
parameter_list|()
block|{
for|for
control|(
name|long
name|x
range|:
name|POSITIVE_LONG_CANDIDATES
control|)
block|{
comment|// We only expect an exception if x was not a power of 2.
name|boolean
name|isPowerOf2
init|=
name|LongMath
operator|.
name|isPowerOfTwo
argument_list|(
name|x
argument_list|)
decl_stmt|;
try|try
block|{
name|assertEquals
argument_list|(
name|x
argument_list|,
literal|1L
operator|<<
name|LongMath
operator|.
name|log2
argument_list|(
name|x
argument_list|,
name|UNNECESSARY
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|isPowerOf2
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ArithmeticException
name|e
parameter_list|)
block|{
name|assertFalse
argument_list|(
name|isPowerOf2
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// Relies on the correctness of BigIntegerMath.log10 for all modes except UNNECESSARY.
comment|// Relies on the correctness of log10(long, FLOOR) and of pow(long, int).
comment|// Relies on the correctness of BigIntegerMath.sqrt for all modes except UNNECESSARY.
comment|/* Relies on the correctness of sqrt(long, FLOOR). */
DECL|method|testGCDExhaustive ()
specifier|public
name|void
name|testGCDExhaustive
parameter_list|()
block|{
for|for
control|(
name|long
name|a
range|:
name|POSITIVE_LONG_CANDIDATES
control|)
block|{
for|for
control|(
name|long
name|b
range|:
name|POSITIVE_LONG_CANDIDATES
control|)
block|{
name|assertEquals
argument_list|(
name|valueOf
argument_list|(
name|a
argument_list|)
operator|.
name|gcd
argument_list|(
name|valueOf
argument_list|(
name|b
argument_list|)
argument_list|)
argument_list|,
name|valueOf
argument_list|(
name|LongMath
operator|.
name|gcd
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// Depends on the correctness of BigIntegerMath.factorial.
comment|// Depends on the correctness of BigIntegerMath.binomial.
DECL|method|testBinomial ()
specifier|public
name|void
name|testBinomial
parameter_list|()
block|{
for|for
control|(
name|int
name|n
init|=
literal|0
init|;
name|n
operator|<=
literal|70
condition|;
name|n
operator|++
control|)
block|{
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<=
name|n
condition|;
name|k
operator|++
control|)
block|{
name|BigInteger
name|expectedBig
init|=
name|BigIntegerMath
operator|.
name|binomial
argument_list|(
name|n
argument_list|,
name|k
argument_list|)
decl_stmt|;
name|long
name|expectedLong
init|=
name|fitsInLong
argument_list|(
name|expectedBig
argument_list|)
condition|?
name|expectedBig
operator|.
name|longValue
argument_list|()
else|:
name|Long
operator|.
name|MAX_VALUE
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedLong
argument_list|,
name|LongMath
operator|.
name|binomial
argument_list|(
name|n
argument_list|,
name|k
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|testBinomialOutside ()
specifier|public
name|void
name|testBinomialOutside
parameter_list|()
block|{
for|for
control|(
name|int
name|n
init|=
literal|0
init|;
name|n
operator|<=
literal|50
condition|;
name|n
operator|++
control|)
block|{
try|try
block|{
name|LongMath
operator|.
name|binomial
argument_list|(
name|n
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected IllegalArgumentException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{}
try|try
block|{
name|LongMath
operator|.
name|binomial
argument_list|(
name|n
argument_list|,
name|n
operator|+
literal|1
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected IllegalArgumentException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{}
block|}
block|}
DECL|method|testBinomialNegative ()
specifier|public
name|void
name|testBinomialNegative
parameter_list|()
block|{
for|for
control|(
name|int
name|n
range|:
name|NEGATIVE_INTEGER_CANDIDATES
control|)
block|{
try|try
block|{
name|LongMath
operator|.
name|binomial
argument_list|(
name|n
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected IllegalArgumentException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{}
block|}
block|}
DECL|method|testSqrtOfLongIsAtMostFloorSqrtMaxLong ()
specifier|public
name|void
name|testSqrtOfLongIsAtMostFloorSqrtMaxLong
parameter_list|()
block|{
name|long
name|sqrtMaxLong
init|=
operator|(
name|long
operator|)
name|Math
operator|.
name|sqrt
argument_list|(
name|Long
operator|.
name|MAX_VALUE
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|sqrtMaxLong
operator|<=
name|LongMath
operator|.
name|FLOOR_SQRT_MAX_LONG
argument_list|)
expr_stmt|;
block|}
comment|/**    * Helper method that asserts the arithmetic mean of x and y is equal    * to the expectedMean.    */
DECL|method|assertMean (long expectedMean, long x, long y)
specifier|private
specifier|static
name|void
name|assertMean
parameter_list|(
name|long
name|expectedMean
parameter_list|,
name|long
name|x
parameter_list|,
name|long
name|y
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"The expectedMean should be the same as computeMeanSafely"
argument_list|,
name|expectedMean
argument_list|,
name|computeMeanSafely
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
argument_list|)
expr_stmt|;
name|assertMean
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
expr_stmt|;
block|}
comment|/**    * Helper method that asserts the arithmetic mean of x and y is equal    *to the result of computeMeanSafely.    */
DECL|method|assertMean (long x, long y)
specifier|private
specifier|static
name|void
name|assertMean
parameter_list|(
name|long
name|x
parameter_list|,
name|long
name|y
parameter_list|)
block|{
name|long
name|expectedMean
init|=
name|computeMeanSafely
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedMean
argument_list|,
name|LongMath
operator|.
name|mean
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"The mean of x and y should equal the mean of y and x"
argument_list|,
name|expectedMean
argument_list|,
name|LongMath
operator|.
name|mean
argument_list|(
name|y
argument_list|,
name|x
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Computes the mean in a way that is obvious and resilient to    * overflow by using BigInteger arithmetic.    */
DECL|method|computeMeanSafely (long x, long y)
specifier|private
specifier|static
name|long
name|computeMeanSafely
parameter_list|(
name|long
name|x
parameter_list|,
name|long
name|y
parameter_list|)
block|{
name|BigInteger
name|bigX
init|=
name|BigInteger
operator|.
name|valueOf
argument_list|(
name|x
argument_list|)
decl_stmt|;
name|BigInteger
name|bigY
init|=
name|BigInteger
operator|.
name|valueOf
argument_list|(
name|y
argument_list|)
decl_stmt|;
name|BigDecimal
name|bigMean
init|=
operator|new
name|BigDecimal
argument_list|(
name|bigX
operator|.
name|add
argument_list|(
name|bigY
argument_list|)
argument_list|)
operator|.
name|divide
argument_list|(
name|BigDecimal
operator|.
name|valueOf
argument_list|(
literal|2
argument_list|)
argument_list|,
name|BigDecimal
operator|.
name|ROUND_FLOOR
argument_list|)
decl_stmt|;
comment|// parseInt blows up on overflow as opposed to intValue() which does not.
return|return
name|Long
operator|.
name|parseLong
argument_list|(
name|bigMean
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
DECL|method|fitsInLong (BigInteger big)
specifier|private
specifier|static
name|boolean
name|fitsInLong
parameter_list|(
name|BigInteger
name|big
parameter_list|)
block|{
return|return
name|big
operator|.
name|bitLength
argument_list|()
operator|<=
literal|63
return|;
block|}
block|}
end_class

end_unit

