begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2008 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.collect.testing.testers
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|testers
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|features
operator|.
name|CollectionFeature
operator|.
name|SERIALIZABLE_INCLUDING_VIEWS
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|features
operator|.
name|CollectionSize
operator|.
name|ONE
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|features
operator|.
name|CollectionSize
operator|.
name|ZERO
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|features
operator|.
name|ListFeature
operator|.
name|SUPPORTS_ADD_WITH_INDEX
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|features
operator|.
name|ListFeature
operator|.
name|SUPPORTS_REMOVE_WITH_INDEX
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|features
operator|.
name|ListFeature
operator|.
name|SUPPORTS_SET
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|emptyList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtCompatible
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|Helpers
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|features
operator|.
name|CollectionFeature
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|features
operator|.
name|CollectionSize
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|features
operator|.
name|ListFeature
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|testing
operator|.
name|SerializableTester
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * A generic JUnit test which tests {@code subList()} operations on a list.  * Can't be invoked directly; please see  * {@link com.google.common.collect.testing.ListTestSuiteBuilder}.  *  * @author Chris Povirk  */
end_comment

begin_class
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// too many "unchecked generic array creations"
annotation|@
name|GwtCompatible
argument_list|(
name|emulated
operator|=
literal|true
argument_list|)
annotation|@
name|SuppressUnderAndroid
DECL|class|ListSubListTester
specifier|public
class|class
name|ListSubListTester
parameter_list|<
name|E
parameter_list|>
extends|extends
name|AbstractListTester
argument_list|<
name|E
argument_list|>
block|{
DECL|method|testSubList_startNegative ()
specifier|public
name|void
name|testSubList_startNegative
parameter_list|()
block|{
try|try
block|{
name|getList
argument_list|()
operator|.
name|subList
argument_list|(
operator|-
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"subList(-1, 0) should throw"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IndexOutOfBoundsException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testSubList_endTooLarge ()
specifier|public
name|void
name|testSubList_endTooLarge
parameter_list|()
block|{
try|try
block|{
name|getList
argument_list|()
operator|.
name|subList
argument_list|(
literal|0
argument_list|,
name|getNumElements
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"subList(0, size + 1) should throw"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IndexOutOfBoundsException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testSubList_startGreaterThanEnd ()
specifier|public
name|void
name|testSubList_startGreaterThanEnd
parameter_list|()
block|{
try|try
block|{
name|getList
argument_list|()
operator|.
name|subList
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"subList(1, 0) should throw"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IndexOutOfBoundsException
name|expected
parameter_list|)
block|{     }
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{
comment|/*        * The subList() docs claim that this should be an        * IndexOutOfBoundsException, but many JDK implementations throw        * IllegalArgumentException:        * http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4506427        */
block|}
block|}
DECL|method|testSubList_empty ()
specifier|public
name|void
name|testSubList_empty
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"subList(0, 0) should be empty"
argument_list|,
name|emptyList
argument_list|()
argument_list|,
name|getList
argument_list|()
operator|.
name|subList
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testSubList_entireList ()
specifier|public
name|void
name|testSubList_entireList
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"subList(0, size) should be equal to the original list"
argument_list|,
name|getList
argument_list|()
argument_list|,
name|getList
argument_list|()
operator|.
name|subList
argument_list|(
literal|0
argument_list|,
name|getNumElements
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|ListFeature
operator|.
name|Require
argument_list|(
name|SUPPORTS_REMOVE_WITH_INDEX
argument_list|)
annotation|@
name|CollectionSize
operator|.
name|Require
argument_list|(
name|absent
operator|=
name|ZERO
argument_list|)
DECL|method|testSubList_subListRemoveAffectsOriginal ()
specifier|public
name|void
name|testSubList_subListRemoveAffectsOriginal
parameter_list|()
block|{
name|List
argument_list|<
name|E
argument_list|>
name|subList
init|=
name|getList
argument_list|()
operator|.
name|subList
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|subList
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|E
argument_list|>
name|expected
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|createSamplesArray
argument_list|()
argument_list|)
operator|.
name|subList
argument_list|(
literal|1
argument_list|,
name|getNumElements
argument_list|()
argument_list|)
decl_stmt|;
name|expectContents
argument_list|(
name|expected
argument_list|)
expr_stmt|;
block|}
annotation|@
name|ListFeature
operator|.
name|Require
argument_list|(
name|SUPPORTS_REMOVE_WITH_INDEX
argument_list|)
annotation|@
name|CollectionSize
operator|.
name|Require
argument_list|(
name|absent
operator|=
name|ZERO
argument_list|)
DECL|method|testSubList_subListClearAffectsOriginal ()
specifier|public
name|void
name|testSubList_subListClearAffectsOriginal
parameter_list|()
block|{
name|List
argument_list|<
name|E
argument_list|>
name|subList
init|=
name|getList
argument_list|()
operator|.
name|subList
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|subList
operator|.
name|clear
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|E
argument_list|>
name|expected
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|createSamplesArray
argument_list|()
argument_list|)
operator|.
name|subList
argument_list|(
literal|1
argument_list|,
name|getNumElements
argument_list|()
argument_list|)
decl_stmt|;
name|expectContents
argument_list|(
name|expected
argument_list|)
expr_stmt|;
block|}
annotation|@
name|ListFeature
operator|.
name|Require
argument_list|(
name|SUPPORTS_ADD_WITH_INDEX
argument_list|)
DECL|method|testSubList_subListAddAffectsOriginal ()
specifier|public
name|void
name|testSubList_subListAddAffectsOriginal
parameter_list|()
block|{
name|List
argument_list|<
name|E
argument_list|>
name|subList
init|=
name|getList
argument_list|()
operator|.
name|subList
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|subList
operator|.
name|add
argument_list|(
name|e3
argument_list|()
argument_list|)
expr_stmt|;
name|expectAdded
argument_list|(
literal|0
argument_list|,
name|e3
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|ListFeature
operator|.
name|Require
argument_list|(
name|SUPPORTS_SET
argument_list|)
annotation|@
name|CollectionSize
operator|.
name|Require
argument_list|(
name|absent
operator|=
name|ZERO
argument_list|)
DECL|method|testSubList_subListSetAffectsOriginal ()
specifier|public
name|void
name|testSubList_subListSetAffectsOriginal
parameter_list|()
block|{
name|List
argument_list|<
name|E
argument_list|>
name|subList
init|=
name|getList
argument_list|()
operator|.
name|subList
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|subList
operator|.
name|set
argument_list|(
literal|0
argument_list|,
name|e3
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|E
argument_list|>
name|expected
init|=
name|Helpers
operator|.
name|copyToList
argument_list|(
name|createSamplesArray
argument_list|()
argument_list|)
decl_stmt|;
name|expected
operator|.
name|set
argument_list|(
literal|0
argument_list|,
name|e3
argument_list|()
argument_list|)
expr_stmt|;
name|expectContents
argument_list|(
name|expected
argument_list|)
expr_stmt|;
block|}
annotation|@
name|ListFeature
operator|.
name|Require
argument_list|(
name|SUPPORTS_SET
argument_list|)
annotation|@
name|CollectionSize
operator|.
name|Require
argument_list|(
name|absent
operator|=
name|ZERO
argument_list|)
DECL|method|testSubList_originalListSetAffectsSubList ()
specifier|public
name|void
name|testSubList_originalListSetAffectsSubList
parameter_list|()
block|{
name|List
argument_list|<
name|E
argument_list|>
name|subList
init|=
name|getList
argument_list|()
operator|.
name|subList
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|getList
argument_list|()
operator|.
name|set
argument_list|(
literal|0
argument_list|,
name|e3
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"A set() call to a list after a sublist has been created "
operator|+
literal|"should be reflected in the sublist"
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|e3
argument_list|()
argument_list|)
argument_list|,
name|subList
argument_list|)
expr_stmt|;
block|}
annotation|@
name|ListFeature
operator|.
name|Require
argument_list|(
name|SUPPORTS_REMOVE_WITH_INDEX
argument_list|)
annotation|@
name|CollectionSize
operator|.
name|Require
argument_list|(
name|absent
operator|=
block|{
name|ZERO
block|,
name|ONE
block|}
argument_list|)
DECL|method|testSubList_subListRemoveAffectsOriginalLargeList ()
specifier|public
name|void
name|testSubList_subListRemoveAffectsOriginalLargeList
parameter_list|()
block|{
name|List
argument_list|<
name|E
argument_list|>
name|subList
init|=
name|getList
argument_list|()
operator|.
name|subList
argument_list|(
literal|1
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|subList
operator|.
name|remove
argument_list|(
name|e2
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|E
argument_list|>
name|expected
init|=
name|Helpers
operator|.
name|copyToList
argument_list|(
name|createSamplesArray
argument_list|()
argument_list|)
decl_stmt|;
name|expected
operator|.
name|remove
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|expectContents
argument_list|(
name|expected
argument_list|)
expr_stmt|;
block|}
annotation|@
name|ListFeature
operator|.
name|Require
argument_list|(
name|SUPPORTS_ADD_WITH_INDEX
argument_list|)
annotation|@
name|CollectionSize
operator|.
name|Require
argument_list|(
name|absent
operator|=
block|{
name|ZERO
block|,
name|ONE
block|}
argument_list|)
DECL|method|testSubList_subListAddAtIndexAffectsOriginalLargeList ()
specifier|public
name|void
name|testSubList_subListAddAtIndexAffectsOriginalLargeList
parameter_list|()
block|{
name|List
argument_list|<
name|E
argument_list|>
name|subList
init|=
name|getList
argument_list|()
operator|.
name|subList
argument_list|(
literal|2
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|subList
operator|.
name|add
argument_list|(
literal|0
argument_list|,
name|e3
argument_list|()
argument_list|)
expr_stmt|;
name|expectAdded
argument_list|(
literal|2
argument_list|,
name|e3
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|ListFeature
operator|.
name|Require
argument_list|(
name|SUPPORTS_SET
argument_list|)
annotation|@
name|CollectionSize
operator|.
name|Require
argument_list|(
name|absent
operator|=
block|{
name|ZERO
block|,
name|ONE
block|}
argument_list|)
DECL|method|testSubList_subListSetAffectsOriginalLargeList ()
specifier|public
name|void
name|testSubList_subListSetAffectsOriginalLargeList
parameter_list|()
block|{
name|List
argument_list|<
name|E
argument_list|>
name|subList
init|=
name|getList
argument_list|()
operator|.
name|subList
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|subList
operator|.
name|set
argument_list|(
literal|0
argument_list|,
name|e3
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|E
argument_list|>
name|expected
init|=
name|Helpers
operator|.
name|copyToList
argument_list|(
name|createSamplesArray
argument_list|()
argument_list|)
decl_stmt|;
name|expected
operator|.
name|set
argument_list|(
literal|1
argument_list|,
name|e3
argument_list|()
argument_list|)
expr_stmt|;
name|expectContents
argument_list|(
name|expected
argument_list|)
expr_stmt|;
block|}
annotation|@
name|ListFeature
operator|.
name|Require
argument_list|(
name|SUPPORTS_SET
argument_list|)
annotation|@
name|CollectionSize
operator|.
name|Require
argument_list|(
name|absent
operator|=
block|{
name|ZERO
block|,
name|ONE
block|}
argument_list|)
DECL|method|testSubList_originalListSetAffectsSubListLargeList ()
specifier|public
name|void
name|testSubList_originalListSetAffectsSubListLargeList
parameter_list|()
block|{
name|List
argument_list|<
name|E
argument_list|>
name|subList
init|=
name|getList
argument_list|()
operator|.
name|subList
argument_list|(
literal|1
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|getList
argument_list|()
operator|.
name|set
argument_list|(
literal|1
argument_list|,
name|e3
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"A set() call to a list after a sublist has been created "
operator|+
literal|"should be reflected in the sublist"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|e3
argument_list|()
argument_list|,
name|e2
argument_list|()
argument_list|)
argument_list|,
name|subList
argument_list|)
expr_stmt|;
block|}
DECL|method|testSubList_ofSubListEmpty ()
specifier|public
name|void
name|testSubList_ofSubListEmpty
parameter_list|()
block|{
name|List
argument_list|<
name|E
argument_list|>
name|subList
init|=
name|getList
argument_list|()
operator|.
name|subList
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
operator|.
name|subList
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"subList(0, 0).subList(0, 0) should be an empty list"
argument_list|,
name|emptyList
argument_list|()
argument_list|,
name|subList
argument_list|)
expr_stmt|;
block|}
annotation|@
name|CollectionSize
operator|.
name|Require
argument_list|(
name|absent
operator|=
block|{
name|ZERO
block|,
name|ONE
block|}
argument_list|)
DECL|method|testSubList_ofSubListNonEmpty ()
specifier|public
name|void
name|testSubList_ofSubListNonEmpty
parameter_list|()
block|{
name|List
argument_list|<
name|E
argument_list|>
name|subList
init|=
name|getList
argument_list|()
operator|.
name|subList
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|)
operator|.
name|subList
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"subList(0, 2).subList(1, 2) "
operator|+
literal|"should be a single-element list of the element at index 1"
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|getOrderedElements
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|,
name|subList
argument_list|)
expr_stmt|;
block|}
annotation|@
name|CollectionSize
operator|.
name|Require
argument_list|(
name|absent
operator|=
block|{
name|ZERO
block|}
argument_list|)
DECL|method|testSubList_size ()
specifier|public
name|void
name|testSubList_size
parameter_list|()
block|{
name|List
argument_list|<
name|E
argument_list|>
name|list
init|=
name|getList
argument_list|()
decl_stmt|;
name|int
name|size
init|=
name|getNumElements
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|list
operator|.
name|subList
argument_list|(
literal|0
argument_list|,
name|size
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|size
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|list
operator|.
name|subList
argument_list|(
literal|0
argument_list|,
name|size
operator|-
literal|1
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|size
operator|-
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|list
operator|.
name|subList
argument_list|(
literal|1
argument_list|,
name|size
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|size
operator|-
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|list
operator|.
name|subList
argument_list|(
name|size
argument_list|,
name|size
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|list
operator|.
name|subList
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|CollectionSize
operator|.
name|Require
argument_list|(
name|absent
operator|=
block|{
name|ZERO
block|}
argument_list|)
DECL|method|testSubList_isEmpty ()
specifier|public
name|void
name|testSubList_isEmpty
parameter_list|()
block|{
name|List
argument_list|<
name|E
argument_list|>
name|list
init|=
name|getList
argument_list|()
decl_stmt|;
name|int
name|size
init|=
name|getNumElements
argument_list|()
decl_stmt|;
for|for
control|(
name|List
argument_list|<
name|E
argument_list|>
name|subList
range|:
name|Arrays
operator|.
name|asList
argument_list|(
name|list
operator|.
name|subList
argument_list|(
literal|0
argument_list|,
name|size
argument_list|)
argument_list|,
name|list
operator|.
name|subList
argument_list|(
literal|0
argument_list|,
name|size
operator|-
literal|1
argument_list|)
argument_list|,
name|list
operator|.
name|subList
argument_list|(
literal|1
argument_list|,
name|size
argument_list|)
argument_list|,
name|list
operator|.
name|subList
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|list
operator|.
name|subList
argument_list|(
name|size
argument_list|,
name|size
argument_list|)
argument_list|)
control|)
block|{
name|assertEquals
argument_list|(
name|subList
operator|.
name|isEmpty
argument_list|()
argument_list|,
name|subList
operator|.
name|size
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|CollectionSize
operator|.
name|Require
argument_list|(
name|absent
operator|=
block|{
name|ZERO
block|,
name|ONE
block|}
argument_list|)
DECL|method|testSubList_get ()
specifier|public
name|void
name|testSubList_get
parameter_list|()
block|{
name|List
argument_list|<
name|E
argument_list|>
name|list
init|=
name|getList
argument_list|()
decl_stmt|;
name|int
name|size
init|=
name|getNumElements
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|E
argument_list|>
name|copy
init|=
name|list
operator|.
name|subList
argument_list|(
literal|0
argument_list|,
name|size
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|E
argument_list|>
name|head
init|=
name|list
operator|.
name|subList
argument_list|(
literal|0
argument_list|,
name|size
operator|-
literal|1
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|E
argument_list|>
name|tail
init|=
name|list
operator|.
name|subList
argument_list|(
literal|1
argument_list|,
name|size
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|list
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|copy
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|list
operator|.
name|get
argument_list|(
name|size
operator|-
literal|1
argument_list|)
argument_list|,
name|copy
operator|.
name|get
argument_list|(
name|size
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|list
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
name|tail
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|list
operator|.
name|get
argument_list|(
name|size
operator|-
literal|1
argument_list|)
argument_list|,
name|tail
operator|.
name|get
argument_list|(
name|size
operator|-
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|list
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|head
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|list
operator|.
name|get
argument_list|(
name|size
operator|-
literal|2
argument_list|)
argument_list|,
name|head
operator|.
name|get
argument_list|(
name|size
operator|-
literal|2
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|List
argument_list|<
name|E
argument_list|>
name|subList
range|:
name|Arrays
operator|.
name|asList
argument_list|(
name|copy
argument_list|,
name|head
argument_list|,
name|tail
argument_list|)
control|)
block|{
for|for
control|(
name|int
name|index
range|:
name|Arrays
operator|.
name|asList
argument_list|(
operator|-
literal|1
argument_list|,
name|subList
operator|.
name|size
argument_list|()
argument_list|)
control|)
block|{
try|try
block|{
name|subList
operator|.
name|get
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected IndexOutOfBoundsException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IndexOutOfBoundsException
name|expected
parameter_list|)
block|{         }
block|}
block|}
block|}
annotation|@
name|CollectionSize
operator|.
name|Require
argument_list|(
name|absent
operator|=
block|{
name|ZERO
block|,
name|ONE
block|}
argument_list|)
DECL|method|testSubList_contains ()
specifier|public
name|void
name|testSubList_contains
parameter_list|()
block|{
name|List
argument_list|<
name|E
argument_list|>
name|list
init|=
name|getList
argument_list|()
decl_stmt|;
name|int
name|size
init|=
name|getNumElements
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|E
argument_list|>
name|copy
init|=
name|list
operator|.
name|subList
argument_list|(
literal|0
argument_list|,
name|size
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|E
argument_list|>
name|head
init|=
name|list
operator|.
name|subList
argument_list|(
literal|0
argument_list|,
name|size
operator|-
literal|1
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|E
argument_list|>
name|tail
init|=
name|list
operator|.
name|subList
argument_list|(
literal|1
argument_list|,
name|size
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|copy
operator|.
name|contains
argument_list|(
name|list
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|head
operator|.
name|contains
argument_list|(
name|list
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|tail
operator|.
name|contains
argument_list|(
name|list
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// The following assumes all elements are distinct.
name|assertTrue
argument_list|(
name|copy
operator|.
name|contains
argument_list|(
name|list
operator|.
name|get
argument_list|(
name|size
operator|-
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|head
operator|.
name|contains
argument_list|(
name|list
operator|.
name|get
argument_list|(
name|size
operator|-
literal|2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|tail
operator|.
name|contains
argument_list|(
name|list
operator|.
name|get
argument_list|(
name|size
operator|-
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|head
operator|.
name|contains
argument_list|(
name|list
operator|.
name|get
argument_list|(
name|size
operator|-
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|tail
operator|.
name|contains
argument_list|(
name|list
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|CollectionSize
operator|.
name|Require
argument_list|(
name|absent
operator|=
block|{
name|ZERO
block|,
name|ONE
block|}
argument_list|)
DECL|method|testSubList_indexOf ()
specifier|public
name|void
name|testSubList_indexOf
parameter_list|()
block|{
name|List
argument_list|<
name|E
argument_list|>
name|list
init|=
name|getList
argument_list|()
decl_stmt|;
name|int
name|size
init|=
name|getNumElements
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|E
argument_list|>
name|copy
init|=
name|list
operator|.
name|subList
argument_list|(
literal|0
argument_list|,
name|size
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|E
argument_list|>
name|head
init|=
name|list
operator|.
name|subList
argument_list|(
literal|0
argument_list|,
name|size
operator|-
literal|1
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|E
argument_list|>
name|tail
init|=
name|list
operator|.
name|subList
argument_list|(
literal|1
argument_list|,
name|size
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|copy
operator|.
name|indexOf
argument_list|(
name|list
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|head
operator|.
name|indexOf
argument_list|(
name|list
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|tail
operator|.
name|indexOf
argument_list|(
name|list
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// The following assumes all elements are distinct.
name|assertEquals
argument_list|(
name|copy
operator|.
name|indexOf
argument_list|(
name|list
operator|.
name|get
argument_list|(
name|size
operator|-
literal|1
argument_list|)
argument_list|)
argument_list|,
name|size
operator|-
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|head
operator|.
name|indexOf
argument_list|(
name|list
operator|.
name|get
argument_list|(
name|size
operator|-
literal|2
argument_list|)
argument_list|)
argument_list|,
name|size
operator|-
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|tail
operator|.
name|indexOf
argument_list|(
name|list
operator|.
name|get
argument_list|(
name|size
operator|-
literal|1
argument_list|)
argument_list|)
argument_list|,
name|size
operator|-
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|head
operator|.
name|indexOf
argument_list|(
name|list
operator|.
name|get
argument_list|(
name|size
operator|-
literal|1
argument_list|)
argument_list|)
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|tail
operator|.
name|indexOf
argument_list|(
name|list
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|CollectionSize
operator|.
name|Require
argument_list|(
name|absent
operator|=
block|{
name|ZERO
block|,
name|ONE
block|}
argument_list|)
DECL|method|testSubList_lastIndexOf ()
specifier|public
name|void
name|testSubList_lastIndexOf
parameter_list|()
block|{
name|List
argument_list|<
name|E
argument_list|>
name|list
init|=
name|getList
argument_list|()
decl_stmt|;
name|int
name|size
init|=
name|list
operator|.
name|size
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|E
argument_list|>
name|copy
init|=
name|list
operator|.
name|subList
argument_list|(
literal|0
argument_list|,
name|size
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|E
argument_list|>
name|head
init|=
name|list
operator|.
name|subList
argument_list|(
literal|0
argument_list|,
name|size
operator|-
literal|1
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|E
argument_list|>
name|tail
init|=
name|list
operator|.
name|subList
argument_list|(
literal|1
argument_list|,
name|size
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|copy
operator|.
name|lastIndexOf
argument_list|(
name|list
operator|.
name|get
argument_list|(
name|size
operator|-
literal|1
argument_list|)
argument_list|)
argument_list|,
name|size
operator|-
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|head
operator|.
name|lastIndexOf
argument_list|(
name|list
operator|.
name|get
argument_list|(
name|size
operator|-
literal|2
argument_list|)
argument_list|)
argument_list|,
name|size
operator|-
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|tail
operator|.
name|lastIndexOf
argument_list|(
name|list
operator|.
name|get
argument_list|(
name|size
operator|-
literal|1
argument_list|)
argument_list|)
argument_list|,
name|size
operator|-
literal|2
argument_list|)
expr_stmt|;
comment|// The following assumes all elements are distinct.
name|assertEquals
argument_list|(
name|copy
operator|.
name|lastIndexOf
argument_list|(
name|list
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|head
operator|.
name|lastIndexOf
argument_list|(
name|list
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|tail
operator|.
name|lastIndexOf
argument_list|(
name|list
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|head
operator|.
name|lastIndexOf
argument_list|(
name|list
operator|.
name|get
argument_list|(
name|size
operator|-
literal|1
argument_list|)
argument_list|)
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|tail
operator|.
name|lastIndexOf
argument_list|(
name|list
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|CollectionFeature
operator|.
name|Require
argument_list|(
name|SERIALIZABLE_INCLUDING_VIEWS
argument_list|)
DECL|method|testReserializeWholeSubList ()
specifier|public
name|void
name|testReserializeWholeSubList
parameter_list|()
block|{
name|SerializableTester
operator|.
name|reserializeAndAssert
argument_list|(
name|getList
argument_list|()
operator|.
name|subList
argument_list|(
literal|0
argument_list|,
name|getNumElements
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|CollectionFeature
operator|.
name|Require
argument_list|(
name|SERIALIZABLE_INCLUDING_VIEWS
argument_list|)
DECL|method|testReserializeEmptySubList ()
specifier|public
name|void
name|testReserializeEmptySubList
parameter_list|()
block|{
name|SerializableTester
operator|.
name|reserializeAndAssert
argument_list|(
name|getList
argument_list|()
operator|.
name|subList
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|CollectionFeature
operator|.
name|Require
argument_list|(
name|SERIALIZABLE_INCLUDING_VIEWS
argument_list|)
annotation|@
name|CollectionSize
operator|.
name|Require
argument_list|(
name|absent
operator|=
block|{
name|ZERO
block|,
name|ONE
block|}
argument_list|)
DECL|method|testReserializeSubList ()
specifier|public
name|void
name|testReserializeSubList
parameter_list|()
block|{
name|SerializableTester
operator|.
name|reserializeAndAssert
argument_list|(
name|getList
argument_list|()
operator|.
name|subList
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/*    * TODO: perform all List tests on subList(), but beware infinite recursion    */
block|}
end_class

end_unit

