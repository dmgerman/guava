begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2008 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.collect
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
package|;
end_package

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Arrays
operator|.
name|asList
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|truth0
operator|.
name|Truth
operator|.
name|ASSERT
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtCompatible
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|MinimalCollection
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|google
operator|.
name|UnmodifiableCollectionTests
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|testing
operator|.
name|EqualsTester
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Tests for {@link ImmutableMultiset}.  *  * @author Jared Levy  */
end_comment

begin_class
annotation|@
name|GwtCompatible
argument_list|(
name|emulated
operator|=
literal|true
argument_list|)
DECL|class|ImmutableMultisetTest
specifier|public
class|class
name|ImmutableMultisetTest
extends|extends
name|TestCase
block|{
DECL|method|testCreation_noArgs ()
specifier|public
name|void
name|testCreation_noArgs
parameter_list|()
block|{
name|Multiset
argument_list|<
name|String
argument_list|>
name|multiset
init|=
name|ImmutableMultiset
operator|.
name|of
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|multiset
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testCreation_oneElement ()
specifier|public
name|void
name|testCreation_oneElement
parameter_list|()
block|{
name|Multiset
argument_list|<
name|String
argument_list|>
name|multiset
init|=
name|ImmutableMultiset
operator|.
name|of
argument_list|(
literal|"a"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|HashMultiset
operator|.
name|create
argument_list|(
name|asList
argument_list|(
literal|"a"
argument_list|)
argument_list|)
argument_list|,
name|multiset
argument_list|)
expr_stmt|;
block|}
DECL|method|testCreation_twoElements ()
specifier|public
name|void
name|testCreation_twoElements
parameter_list|()
block|{
name|Multiset
argument_list|<
name|String
argument_list|>
name|multiset
init|=
name|ImmutableMultiset
operator|.
name|of
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|HashMultiset
operator|.
name|create
argument_list|(
name|asList
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
argument_list|)
argument_list|,
name|multiset
argument_list|)
expr_stmt|;
block|}
DECL|method|testCreation_threeElements ()
specifier|public
name|void
name|testCreation_threeElements
parameter_list|()
block|{
name|Multiset
argument_list|<
name|String
argument_list|>
name|multiset
init|=
name|ImmutableMultiset
operator|.
name|of
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|HashMultiset
operator|.
name|create
argument_list|(
name|asList
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|)
argument_list|)
argument_list|,
name|multiset
argument_list|)
expr_stmt|;
block|}
DECL|method|testCreation_fourElements ()
specifier|public
name|void
name|testCreation_fourElements
parameter_list|()
block|{
name|Multiset
argument_list|<
name|String
argument_list|>
name|multiset
init|=
name|ImmutableMultiset
operator|.
name|of
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|,
literal|"d"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|HashMultiset
operator|.
name|create
argument_list|(
name|asList
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|,
literal|"d"
argument_list|)
argument_list|)
argument_list|,
name|multiset
argument_list|)
expr_stmt|;
block|}
DECL|method|testCreation_fiveElements ()
specifier|public
name|void
name|testCreation_fiveElements
parameter_list|()
block|{
name|Multiset
argument_list|<
name|String
argument_list|>
name|multiset
init|=
name|ImmutableMultiset
operator|.
name|of
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|,
literal|"d"
argument_list|,
literal|"e"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|HashMultiset
operator|.
name|create
argument_list|(
name|asList
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|,
literal|"d"
argument_list|,
literal|"e"
argument_list|)
argument_list|)
argument_list|,
name|multiset
argument_list|)
expr_stmt|;
block|}
DECL|method|testCreation_sixElements ()
specifier|public
name|void
name|testCreation_sixElements
parameter_list|()
block|{
name|Multiset
argument_list|<
name|String
argument_list|>
name|multiset
init|=
name|ImmutableMultiset
operator|.
name|of
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|,
literal|"d"
argument_list|,
literal|"e"
argument_list|,
literal|"f"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|HashMultiset
operator|.
name|create
argument_list|(
name|asList
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|,
literal|"d"
argument_list|,
literal|"e"
argument_list|,
literal|"f"
argument_list|)
argument_list|)
argument_list|,
name|multiset
argument_list|)
expr_stmt|;
block|}
DECL|method|testCreation_sevenElements ()
specifier|public
name|void
name|testCreation_sevenElements
parameter_list|()
block|{
name|Multiset
argument_list|<
name|String
argument_list|>
name|multiset
init|=
name|ImmutableMultiset
operator|.
name|of
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|,
literal|"d"
argument_list|,
literal|"e"
argument_list|,
literal|"f"
argument_list|,
literal|"g"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|HashMultiset
operator|.
name|create
argument_list|(
name|asList
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|,
literal|"d"
argument_list|,
literal|"e"
argument_list|,
literal|"f"
argument_list|,
literal|"g"
argument_list|)
argument_list|)
argument_list|,
name|multiset
argument_list|)
expr_stmt|;
block|}
DECL|method|testCreation_emptyArray ()
specifier|public
name|void
name|testCreation_emptyArray
parameter_list|()
block|{
name|String
index|[]
name|array
init|=
operator|new
name|String
index|[
literal|0
index|]
decl_stmt|;
name|Multiset
argument_list|<
name|String
argument_list|>
name|multiset
init|=
name|ImmutableMultiset
operator|.
name|copyOf
argument_list|(
name|array
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|multiset
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testCreation_arrayOfOneElement ()
specifier|public
name|void
name|testCreation_arrayOfOneElement
parameter_list|()
block|{
name|String
index|[]
name|array
init|=
operator|new
name|String
index|[]
block|{
literal|"a"
block|}
decl_stmt|;
name|Multiset
argument_list|<
name|String
argument_list|>
name|multiset
init|=
name|ImmutableMultiset
operator|.
name|copyOf
argument_list|(
name|array
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|HashMultiset
operator|.
name|create
argument_list|(
name|asList
argument_list|(
literal|"a"
argument_list|)
argument_list|)
argument_list|,
name|multiset
argument_list|)
expr_stmt|;
block|}
DECL|method|testCreation_arrayOfArray ()
specifier|public
name|void
name|testCreation_arrayOfArray
parameter_list|()
block|{
name|String
index|[]
name|array
init|=
operator|new
name|String
index|[]
block|{
literal|"a"
block|}
decl_stmt|;
name|Multiset
argument_list|<
name|String
index|[]
argument_list|>
name|multiset
init|=
name|ImmutableMultiset
operator|.
expr|<
name|String
index|[]
operator|>
name|of
argument_list|(
name|array
argument_list|)
decl_stmt|;
name|Multiset
argument_list|<
name|String
index|[]
argument_list|>
name|expected
init|=
name|HashMultiset
operator|.
name|create
argument_list|()
decl_stmt|;
name|expected
operator|.
name|add
argument_list|(
name|array
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|multiset
argument_list|)
expr_stmt|;
block|}
DECL|method|testCreation_arrayContainingOnlyNull ()
specifier|public
name|void
name|testCreation_arrayContainingOnlyNull
parameter_list|()
block|{
name|String
index|[]
name|array
init|=
operator|new
name|String
index|[]
block|{
literal|null
block|}
decl_stmt|;
try|try
block|{
name|ImmutableMultiset
operator|.
name|copyOf
argument_list|(
name|array
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|expected
parameter_list|)
block|{}
block|}
DECL|method|testCopyOf_collection_empty ()
specifier|public
name|void
name|testCopyOf_collection_empty
parameter_list|()
block|{
comment|// "<String>" is required to work around a javac 1.5 bug.
name|Collection
argument_list|<
name|String
argument_list|>
name|c
init|=
name|MinimalCollection
operator|.
expr|<
name|String
operator|>
name|of
argument_list|()
decl_stmt|;
name|Multiset
argument_list|<
name|String
argument_list|>
name|multiset
init|=
name|ImmutableMultiset
operator|.
name|copyOf
argument_list|(
name|c
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|multiset
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testCopyOf_collection_oneElement ()
specifier|public
name|void
name|testCopyOf_collection_oneElement
parameter_list|()
block|{
name|Collection
argument_list|<
name|String
argument_list|>
name|c
init|=
name|MinimalCollection
operator|.
name|of
argument_list|(
literal|"a"
argument_list|)
decl_stmt|;
name|Multiset
argument_list|<
name|String
argument_list|>
name|multiset
init|=
name|ImmutableMultiset
operator|.
name|copyOf
argument_list|(
name|c
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|HashMultiset
operator|.
name|create
argument_list|(
name|asList
argument_list|(
literal|"a"
argument_list|)
argument_list|)
argument_list|,
name|multiset
argument_list|)
expr_stmt|;
block|}
DECL|method|testCopyOf_collection_general ()
specifier|public
name|void
name|testCopyOf_collection_general
parameter_list|()
block|{
name|Collection
argument_list|<
name|String
argument_list|>
name|c
init|=
name|MinimalCollection
operator|.
name|of
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"a"
argument_list|)
decl_stmt|;
name|Multiset
argument_list|<
name|String
argument_list|>
name|multiset
init|=
name|ImmutableMultiset
operator|.
name|copyOf
argument_list|(
name|c
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|HashMultiset
operator|.
name|create
argument_list|(
name|asList
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"a"
argument_list|)
argument_list|)
argument_list|,
name|multiset
argument_list|)
expr_stmt|;
block|}
DECL|method|testCopyOf_collectionContainingNull ()
specifier|public
name|void
name|testCopyOf_collectionContainingNull
parameter_list|()
block|{
name|Collection
argument_list|<
name|String
argument_list|>
name|c
init|=
name|MinimalCollection
operator|.
name|of
argument_list|(
literal|"a"
argument_list|,
literal|null
argument_list|,
literal|"b"
argument_list|)
decl_stmt|;
try|try
block|{
name|ImmutableMultiset
operator|.
name|copyOf
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|expected
parameter_list|)
block|{}
block|}
DECL|method|testCopyOf_multiset_empty ()
specifier|public
name|void
name|testCopyOf_multiset_empty
parameter_list|()
block|{
name|Multiset
argument_list|<
name|String
argument_list|>
name|c
init|=
name|HashMultiset
operator|.
name|create
argument_list|()
decl_stmt|;
name|Multiset
argument_list|<
name|String
argument_list|>
name|multiset
init|=
name|ImmutableMultiset
operator|.
name|copyOf
argument_list|(
name|c
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|multiset
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testCopyOf_multiset_oneElement ()
specifier|public
name|void
name|testCopyOf_multiset_oneElement
parameter_list|()
block|{
name|Multiset
argument_list|<
name|String
argument_list|>
name|c
init|=
name|HashMultiset
operator|.
name|create
argument_list|(
name|asList
argument_list|(
literal|"a"
argument_list|)
argument_list|)
decl_stmt|;
name|Multiset
argument_list|<
name|String
argument_list|>
name|multiset
init|=
name|ImmutableMultiset
operator|.
name|copyOf
argument_list|(
name|c
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|HashMultiset
operator|.
name|create
argument_list|(
name|asList
argument_list|(
literal|"a"
argument_list|)
argument_list|)
argument_list|,
name|multiset
argument_list|)
expr_stmt|;
block|}
DECL|method|testCopyOf_multiset_general ()
specifier|public
name|void
name|testCopyOf_multiset_general
parameter_list|()
block|{
name|Multiset
argument_list|<
name|String
argument_list|>
name|c
init|=
name|HashMultiset
operator|.
name|create
argument_list|(
name|asList
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"a"
argument_list|)
argument_list|)
decl_stmt|;
name|Multiset
argument_list|<
name|String
argument_list|>
name|multiset
init|=
name|ImmutableMultiset
operator|.
name|copyOf
argument_list|(
name|c
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|HashMultiset
operator|.
name|create
argument_list|(
name|asList
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"a"
argument_list|)
argument_list|)
argument_list|,
name|multiset
argument_list|)
expr_stmt|;
block|}
DECL|method|testCopyOf_multisetContainingNull ()
specifier|public
name|void
name|testCopyOf_multisetContainingNull
parameter_list|()
block|{
name|Multiset
argument_list|<
name|String
argument_list|>
name|c
init|=
name|HashMultiset
operator|.
name|create
argument_list|(
name|asList
argument_list|(
literal|"a"
argument_list|,
literal|null
argument_list|,
literal|"b"
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|ImmutableMultiset
operator|.
name|copyOf
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|expected
parameter_list|)
block|{}
block|}
DECL|method|testCopyOf_iterator_empty ()
specifier|public
name|void
name|testCopyOf_iterator_empty
parameter_list|()
block|{
name|Iterator
argument_list|<
name|String
argument_list|>
name|iterator
init|=
name|Iterators
operator|.
name|emptyIterator
argument_list|()
decl_stmt|;
name|Multiset
argument_list|<
name|String
argument_list|>
name|multiset
init|=
name|ImmutableMultiset
operator|.
name|copyOf
argument_list|(
name|iterator
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|multiset
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testCopyOf_iterator_oneElement ()
specifier|public
name|void
name|testCopyOf_iterator_oneElement
parameter_list|()
block|{
name|Iterator
argument_list|<
name|String
argument_list|>
name|iterator
init|=
name|Iterators
operator|.
name|singletonIterator
argument_list|(
literal|"a"
argument_list|)
decl_stmt|;
name|Multiset
argument_list|<
name|String
argument_list|>
name|multiset
init|=
name|ImmutableMultiset
operator|.
name|copyOf
argument_list|(
name|iterator
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|HashMultiset
operator|.
name|create
argument_list|(
name|asList
argument_list|(
literal|"a"
argument_list|)
argument_list|)
argument_list|,
name|multiset
argument_list|)
expr_stmt|;
block|}
DECL|method|testCopyOf_iterator_general ()
specifier|public
name|void
name|testCopyOf_iterator_general
parameter_list|()
block|{
name|Iterator
argument_list|<
name|String
argument_list|>
name|iterator
init|=
name|asList
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"a"
argument_list|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|Multiset
argument_list|<
name|String
argument_list|>
name|multiset
init|=
name|ImmutableMultiset
operator|.
name|copyOf
argument_list|(
name|iterator
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|HashMultiset
operator|.
name|create
argument_list|(
name|asList
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"a"
argument_list|)
argument_list|)
argument_list|,
name|multiset
argument_list|)
expr_stmt|;
block|}
DECL|method|testCopyOf_iteratorContainingNull ()
specifier|public
name|void
name|testCopyOf_iteratorContainingNull
parameter_list|()
block|{
name|Iterator
argument_list|<
name|String
argument_list|>
name|iterator
init|=
name|asList
argument_list|(
literal|"a"
argument_list|,
literal|null
argument_list|,
literal|"b"
argument_list|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
try|try
block|{
name|ImmutableMultiset
operator|.
name|copyOf
argument_list|(
name|iterator
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|expected
parameter_list|)
block|{}
block|}
DECL|class|CountingIterable
specifier|private
specifier|static
class|class
name|CountingIterable
implements|implements
name|Iterable
argument_list|<
name|String
argument_list|>
block|{
DECL|field|count
name|int
name|count
init|=
literal|0
decl_stmt|;
annotation|@
name|Override
DECL|method|iterator ()
specifier|public
name|Iterator
argument_list|<
name|String
argument_list|>
name|iterator
parameter_list|()
block|{
name|count
operator|++
expr_stmt|;
return|return
name|asList
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"a"
argument_list|)
operator|.
name|iterator
argument_list|()
return|;
block|}
block|}
DECL|method|testCopyOf_plainIterable ()
specifier|public
name|void
name|testCopyOf_plainIterable
parameter_list|()
block|{
name|CountingIterable
name|iterable
init|=
operator|new
name|CountingIterable
argument_list|()
decl_stmt|;
name|Multiset
argument_list|<
name|String
argument_list|>
name|multiset
init|=
name|ImmutableMultiset
operator|.
name|copyOf
argument_list|(
name|iterable
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|HashMultiset
operator|.
name|create
argument_list|(
name|asList
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"a"
argument_list|)
argument_list|)
argument_list|,
name|multiset
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|iterable
operator|.
name|count
argument_list|)
expr_stmt|;
block|}
DECL|method|testCopyOf_shortcut_empty ()
specifier|public
name|void
name|testCopyOf_shortcut_empty
parameter_list|()
block|{
name|Collection
argument_list|<
name|String
argument_list|>
name|c
init|=
name|ImmutableMultiset
operator|.
name|of
argument_list|()
decl_stmt|;
name|assertSame
argument_list|(
name|c
argument_list|,
name|ImmutableMultiset
operator|.
name|copyOf
argument_list|(
name|c
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testCopyOf_shortcut_singleton ()
specifier|public
name|void
name|testCopyOf_shortcut_singleton
parameter_list|()
block|{
name|Collection
argument_list|<
name|String
argument_list|>
name|c
init|=
name|ImmutableMultiset
operator|.
name|of
argument_list|(
literal|"a"
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
name|c
argument_list|,
name|ImmutableMultiset
operator|.
name|copyOf
argument_list|(
name|c
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testCopyOf_shortcut_immutableMultiset ()
specifier|public
name|void
name|testCopyOf_shortcut_immutableMultiset
parameter_list|()
block|{
name|Collection
argument_list|<
name|String
argument_list|>
name|c
init|=
name|ImmutableMultiset
operator|.
name|of
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
name|c
argument_list|,
name|ImmutableMultiset
operator|.
name|copyOf
argument_list|(
name|c
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testBuilderAdd ()
specifier|public
name|void
name|testBuilderAdd
parameter_list|()
block|{
name|ImmutableMultiset
argument_list|<
name|String
argument_list|>
name|multiset
init|=
operator|new
name|ImmutableMultiset
operator|.
name|Builder
argument_list|<
name|String
argument_list|>
argument_list|()
operator|.
name|add
argument_list|(
literal|"a"
argument_list|)
operator|.
name|add
argument_list|(
literal|"b"
argument_list|)
operator|.
name|add
argument_list|(
literal|"a"
argument_list|)
operator|.
name|add
argument_list|(
literal|"c"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|HashMultiset
operator|.
name|create
argument_list|(
name|asList
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"a"
argument_list|,
literal|"c"
argument_list|)
argument_list|)
argument_list|,
name|multiset
argument_list|)
expr_stmt|;
block|}
DECL|method|testBuilderAddAll ()
specifier|public
name|void
name|testBuilderAddAll
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|a
init|=
name|asList
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|b
init|=
name|asList
argument_list|(
literal|"c"
argument_list|,
literal|"d"
argument_list|)
decl_stmt|;
name|ImmutableMultiset
argument_list|<
name|String
argument_list|>
name|multiset
init|=
operator|new
name|ImmutableMultiset
operator|.
name|Builder
argument_list|<
name|String
argument_list|>
argument_list|()
operator|.
name|addAll
argument_list|(
name|a
argument_list|)
operator|.
name|addAll
argument_list|(
name|b
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|HashMultiset
operator|.
name|create
argument_list|(
name|asList
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|,
literal|"d"
argument_list|)
argument_list|)
argument_list|,
name|multiset
argument_list|)
expr_stmt|;
block|}
DECL|method|testBuilderAddAllMultiset ()
specifier|public
name|void
name|testBuilderAddAllMultiset
parameter_list|()
block|{
name|Multiset
argument_list|<
name|String
argument_list|>
name|a
init|=
name|HashMultiset
operator|.
name|create
argument_list|(
name|asList
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"b"
argument_list|)
argument_list|)
decl_stmt|;
name|Multiset
argument_list|<
name|String
argument_list|>
name|b
init|=
name|HashMultiset
operator|.
name|create
argument_list|(
name|asList
argument_list|(
literal|"c"
argument_list|,
literal|"b"
argument_list|)
argument_list|)
decl_stmt|;
name|ImmutableMultiset
argument_list|<
name|String
argument_list|>
name|multiset
init|=
operator|new
name|ImmutableMultiset
operator|.
name|Builder
argument_list|<
name|String
argument_list|>
argument_list|()
operator|.
name|addAll
argument_list|(
name|a
argument_list|)
operator|.
name|addAll
argument_list|(
name|b
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|HashMultiset
operator|.
name|create
argument_list|(
name|asList
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"b"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|)
argument_list|)
argument_list|,
name|multiset
argument_list|)
expr_stmt|;
block|}
DECL|method|testBuilderAddAllIterator ()
specifier|public
name|void
name|testBuilderAddAllIterator
parameter_list|()
block|{
name|Iterator
argument_list|<
name|String
argument_list|>
name|iterator
init|=
name|asList
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"a"
argument_list|,
literal|"c"
argument_list|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|ImmutableMultiset
argument_list|<
name|String
argument_list|>
name|multiset
init|=
operator|new
name|ImmutableMultiset
operator|.
name|Builder
argument_list|<
name|String
argument_list|>
argument_list|()
operator|.
name|addAll
argument_list|(
name|iterator
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|HashMultiset
operator|.
name|create
argument_list|(
name|asList
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"a"
argument_list|,
literal|"c"
argument_list|)
argument_list|)
argument_list|,
name|multiset
argument_list|)
expr_stmt|;
block|}
DECL|method|testBuilderAddCopies ()
specifier|public
name|void
name|testBuilderAddCopies
parameter_list|()
block|{
name|ImmutableMultiset
argument_list|<
name|String
argument_list|>
name|multiset
init|=
operator|new
name|ImmutableMultiset
operator|.
name|Builder
argument_list|<
name|String
argument_list|>
argument_list|()
operator|.
name|addCopies
argument_list|(
literal|"a"
argument_list|,
literal|2
argument_list|)
operator|.
name|addCopies
argument_list|(
literal|"b"
argument_list|,
literal|3
argument_list|)
operator|.
name|addCopies
argument_list|(
literal|"c"
argument_list|,
literal|0
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|HashMultiset
operator|.
name|create
argument_list|(
name|asList
argument_list|(
literal|"a"
argument_list|,
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"b"
argument_list|,
literal|"b"
argument_list|)
argument_list|)
argument_list|,
name|multiset
argument_list|)
expr_stmt|;
block|}
DECL|method|testBuilderSetCount ()
specifier|public
name|void
name|testBuilderSetCount
parameter_list|()
block|{
name|ImmutableMultiset
argument_list|<
name|String
argument_list|>
name|multiset
init|=
operator|new
name|ImmutableMultiset
operator|.
name|Builder
argument_list|<
name|String
argument_list|>
argument_list|()
operator|.
name|add
argument_list|(
literal|"a"
argument_list|)
operator|.
name|setCount
argument_list|(
literal|"a"
argument_list|,
literal|2
argument_list|)
operator|.
name|setCount
argument_list|(
literal|"b"
argument_list|,
literal|3
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|HashMultiset
operator|.
name|create
argument_list|(
name|asList
argument_list|(
literal|"a"
argument_list|,
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"b"
argument_list|,
literal|"b"
argument_list|)
argument_list|)
argument_list|,
name|multiset
argument_list|)
expr_stmt|;
block|}
DECL|method|testBuilderAddHandlesNullsCorrectly ()
specifier|public
name|void
name|testBuilderAddHandlesNullsCorrectly
parameter_list|()
block|{
name|ImmutableMultiset
operator|.
name|Builder
argument_list|<
name|String
argument_list|>
name|builder
init|=
name|ImmutableMultiset
operator|.
name|builder
argument_list|()
decl_stmt|;
try|try
block|{
name|builder
operator|.
name|add
argument_list|(
operator|(
name|String
operator|)
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected NullPointerException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|expected
parameter_list|)
block|{}
block|}
DECL|method|testBuilderAddAllHandlesNullsCorrectly ()
specifier|public
name|void
name|testBuilderAddAllHandlesNullsCorrectly
parameter_list|()
block|{
name|ImmutableMultiset
operator|.
name|Builder
argument_list|<
name|String
argument_list|>
name|builder
init|=
name|ImmutableMultiset
operator|.
name|builder
argument_list|()
decl_stmt|;
try|try
block|{
name|builder
operator|.
name|addAll
argument_list|(
operator|(
name|Collection
argument_list|<
name|String
argument_list|>
operator|)
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected NullPointerException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|expected
parameter_list|)
block|{}
name|builder
operator|=
name|ImmutableMultiset
operator|.
name|builder
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|listWithNulls
init|=
name|asList
argument_list|(
literal|"a"
argument_list|,
literal|null
argument_list|,
literal|"b"
argument_list|)
decl_stmt|;
try|try
block|{
name|builder
operator|.
name|addAll
argument_list|(
name|listWithNulls
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected NullPointerException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|expected
parameter_list|)
block|{}
name|builder
operator|=
name|ImmutableMultiset
operator|.
name|builder
argument_list|()
expr_stmt|;
name|Multiset
argument_list|<
name|String
argument_list|>
name|multisetWithNull
init|=
name|LinkedHashMultiset
operator|.
name|create
argument_list|(
name|asList
argument_list|(
literal|"a"
argument_list|,
literal|null
argument_list|,
literal|"b"
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|builder
operator|.
name|addAll
argument_list|(
name|multisetWithNull
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected NullPointerException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|expected
parameter_list|)
block|{}
block|}
DECL|method|testBuilderAddCopiesHandlesNullsCorrectly ()
specifier|public
name|void
name|testBuilderAddCopiesHandlesNullsCorrectly
parameter_list|()
block|{
name|ImmutableMultiset
operator|.
name|Builder
argument_list|<
name|String
argument_list|>
name|builder
init|=
name|ImmutableMultiset
operator|.
name|builder
argument_list|()
decl_stmt|;
try|try
block|{
name|builder
operator|.
name|addCopies
argument_list|(
literal|null
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected NullPointerException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|expected
parameter_list|)
block|{}
block|}
DECL|method|testBuilderAddCopiesIllegal ()
specifier|public
name|void
name|testBuilderAddCopiesIllegal
parameter_list|()
block|{
name|ImmutableMultiset
operator|.
name|Builder
argument_list|<
name|String
argument_list|>
name|builder
init|=
name|ImmutableMultiset
operator|.
name|builder
argument_list|()
decl_stmt|;
try|try
block|{
name|builder
operator|.
name|addCopies
argument_list|(
literal|"a"
argument_list|,
operator|-
literal|2
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected IllegalArgumentException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{}
block|}
DECL|method|testBuilderSetCountHandlesNullsCorrectly ()
specifier|public
name|void
name|testBuilderSetCountHandlesNullsCorrectly
parameter_list|()
block|{
name|ImmutableMultiset
operator|.
name|Builder
argument_list|<
name|String
argument_list|>
name|builder
init|=
name|ImmutableMultiset
operator|.
name|builder
argument_list|()
decl_stmt|;
try|try
block|{
name|builder
operator|.
name|setCount
argument_list|(
literal|null
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected NullPointerException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|expected
parameter_list|)
block|{}
block|}
DECL|method|testBuilderSetCountIllegal ()
specifier|public
name|void
name|testBuilderSetCountIllegal
parameter_list|()
block|{
name|ImmutableMultiset
operator|.
name|Builder
argument_list|<
name|String
argument_list|>
name|builder
init|=
name|ImmutableMultiset
operator|.
name|builder
argument_list|()
decl_stmt|;
try|try
block|{
name|builder
operator|.
name|setCount
argument_list|(
literal|"a"
argument_list|,
operator|-
literal|2
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected IllegalArgumentException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{}
block|}
DECL|method|testEquals_immutableMultiset ()
specifier|public
name|void
name|testEquals_immutableMultiset
parameter_list|()
block|{
name|Collection
argument_list|<
name|String
argument_list|>
name|c
init|=
name|ImmutableMultiset
operator|.
name|of
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"a"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|c
argument_list|,
name|ImmutableMultiset
operator|.
name|of
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|c
argument_list|,
name|ImmutableMultiset
operator|.
name|of
argument_list|(
literal|"a"
argument_list|,
literal|"a"
argument_list|,
literal|"b"
argument_list|)
argument_list|)
expr_stmt|;
name|ASSERT
operator|.
name|that
argument_list|(
name|c
argument_list|)
operator|.
name|isNotEqualTo
argument_list|(
name|ImmutableMultiset
operator|.
name|of
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
argument_list|)
expr_stmt|;
name|ASSERT
operator|.
name|that
argument_list|(
name|c
argument_list|)
operator|.
name|isNotEqualTo
argument_list|(
name|ImmutableMultiset
operator|.
name|of
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|,
literal|"d"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testIterationOrder ()
specifier|public
name|void
name|testIterationOrder
parameter_list|()
block|{
name|Collection
argument_list|<
name|String
argument_list|>
name|c
init|=
name|ImmutableMultiset
operator|.
name|of
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"a"
argument_list|)
decl_stmt|;
name|ASSERT
operator|.
name|that
argument_list|(
name|c
argument_list|)
operator|.
name|has
argument_list|()
operator|.
name|allOf
argument_list|(
literal|"a"
argument_list|,
literal|"a"
argument_list|,
literal|"b"
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
block|}
DECL|method|testMultisetWrites ()
specifier|public
name|void
name|testMultisetWrites
parameter_list|()
block|{
name|Multiset
argument_list|<
name|String
argument_list|>
name|multiset
init|=
name|ImmutableMultiset
operator|.
name|of
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"a"
argument_list|)
decl_stmt|;
name|UnmodifiableCollectionTests
operator|.
name|assertMultisetIsUnmodifiable
argument_list|(
name|multiset
argument_list|,
literal|"test"
argument_list|)
expr_stmt|;
block|}
DECL|method|testAsList ()
specifier|public
name|void
name|testAsList
parameter_list|()
block|{
name|ImmutableMultiset
argument_list|<
name|String
argument_list|>
name|multiset
init|=
name|ImmutableMultiset
operator|.
name|of
argument_list|(
literal|"a"
argument_list|,
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"b"
argument_list|,
literal|"b"
argument_list|)
decl_stmt|;
name|ImmutableList
argument_list|<
name|String
argument_list|>
name|list
init|=
name|multiset
operator|.
name|asList
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"a"
argument_list|,
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"b"
argument_list|,
literal|"b"
argument_list|)
argument_list|,
name|list
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|list
operator|.
name|indexOf
argument_list|(
literal|"b"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|list
operator|.
name|lastIndexOf
argument_list|(
literal|"b"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testEquals ()
specifier|public
name|void
name|testEquals
parameter_list|()
block|{
operator|new
name|EqualsTester
argument_list|()
operator|.
name|addEqualityGroup
argument_list|(
name|ImmutableMultiset
operator|.
name|of
argument_list|()
argument_list|,
name|ImmutableMultiset
operator|.
name|of
argument_list|()
argument_list|)
operator|.
name|addEqualityGroup
argument_list|(
name|ImmutableMultiset
operator|.
name|of
argument_list|(
literal|1
argument_list|)
argument_list|,
name|ImmutableMultiset
operator|.
name|of
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|addEqualityGroup
argument_list|(
name|ImmutableMultiset
operator|.
name|of
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|,
name|ImmutableMultiset
operator|.
name|of
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|)
operator|.
name|addEqualityGroup
argument_list|(
name|ImmutableMultiset
operator|.
name|of
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
argument_list|,
name|ImmutableMultiset
operator|.
name|of
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|)
operator|.
name|testEquals
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

