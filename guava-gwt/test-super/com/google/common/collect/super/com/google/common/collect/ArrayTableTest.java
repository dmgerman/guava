begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2009 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.collect
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Arrays
operator|.
name|asList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtCompatible
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Table
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|testing
operator|.
name|EqualsTester
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|testing
operator|.
name|SerializableTester
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * Test cases for {@link ArrayTable}.  *  * @author Jared Levy  */
end_comment

begin_class
annotation|@
name|GwtCompatible
argument_list|(
name|emulated
operator|=
literal|true
argument_list|)
DECL|class|ArrayTableTest
specifier|public
class|class
name|ArrayTableTest
extends|extends
name|AbstractTableTest
block|{
DECL|method|create ( Object... data)
annotation|@
name|Override
specifier|protected
name|ArrayTable
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|,
name|Character
argument_list|>
name|create
parameter_list|(
name|Object
modifier|...
name|data
parameter_list|)
block|{
comment|// TODO: Specify different numbers of rows and columns, to detect problems
comment|// that arise when the wrong size is used.
name|ArrayTable
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|,
name|Character
argument_list|>
name|table
init|=
name|ArrayTable
operator|.
name|create
argument_list|(
name|asList
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|,
literal|"cat"
argument_list|)
argument_list|,
name|asList
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
argument_list|)
decl_stmt|;
name|populate
argument_list|(
name|table
argument_list|,
name|data
argument_list|)
expr_stmt|;
return|return
name|table
return|;
block|}
DECL|method|assertSize (int expectedSize)
annotation|@
name|Override
specifier|protected
name|void
name|assertSize
parameter_list|(
name|int
name|expectedSize
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|9
argument_list|,
name|table
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|supportsRemove ()
annotation|@
name|Override
specifier|protected
name|boolean
name|supportsRemove
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
DECL|method|supportsNullValues ()
annotation|@
name|Override
specifier|protected
name|boolean
name|supportsNullValues
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
comment|// Overriding tests of behavior that differs for ArrayTable.
DECL|method|testContains ()
annotation|@
name|Override
specifier|public
name|void
name|testContains
parameter_list|()
block|{
name|table
operator|=
name|create
argument_list|(
literal|"foo"
argument_list|,
literal|1
argument_list|,
literal|'a'
argument_list|,
literal|"bar"
argument_list|,
literal|1
argument_list|,
literal|'b'
argument_list|,
literal|"foo"
argument_list|,
literal|3
argument_list|,
literal|'c'
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|table
operator|.
name|contains
argument_list|(
literal|"foo"
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|table
operator|.
name|contains
argument_list|(
literal|"bar"
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|table
operator|.
name|contains
argument_list|(
literal|"foo"
argument_list|,
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|table
operator|.
name|contains
argument_list|(
literal|"foo"
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|table
operator|.
name|contains
argument_list|(
literal|"bar"
argument_list|,
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|table
operator|.
name|contains
argument_list|(
literal|"cat"
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|table
operator|.
name|contains
argument_list|(
literal|"foo"
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|table
operator|.
name|contains
argument_list|(
literal|"bad"
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|table
operator|.
name|contains
argument_list|(
literal|"bad"
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|table
operator|.
name|contains
argument_list|(
literal|"foo"
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|table
operator|.
name|contains
argument_list|(
literal|null
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|table
operator|.
name|contains
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testContainsRow ()
annotation|@
name|Override
specifier|public
name|void
name|testContainsRow
parameter_list|()
block|{
name|table
operator|=
name|create
argument_list|(
literal|"foo"
argument_list|,
literal|1
argument_list|,
literal|'a'
argument_list|,
literal|"bar"
argument_list|,
literal|1
argument_list|,
literal|'b'
argument_list|,
literal|"foo"
argument_list|,
literal|3
argument_list|,
literal|'c'
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|table
operator|.
name|containsRow
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|table
operator|.
name|containsRow
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|table
operator|.
name|containsRow
argument_list|(
literal|"cat"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|table
operator|.
name|containsRow
argument_list|(
literal|"bad"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|table
operator|.
name|containsRow
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testContainsColumn ()
annotation|@
name|Override
specifier|public
name|void
name|testContainsColumn
parameter_list|()
block|{
name|table
operator|=
name|create
argument_list|(
literal|"foo"
argument_list|,
literal|1
argument_list|,
literal|'a'
argument_list|,
literal|"bar"
argument_list|,
literal|1
argument_list|,
literal|'b'
argument_list|,
literal|"foo"
argument_list|,
literal|3
argument_list|,
literal|'c'
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|table
operator|.
name|containsColumn
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|table
operator|.
name|containsColumn
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|table
operator|.
name|containsColumn
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|table
operator|.
name|containsColumn
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|table
operator|.
name|containsColumn
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testContainsValue ()
annotation|@
name|Override
specifier|public
name|void
name|testContainsValue
parameter_list|()
block|{
name|table
operator|=
name|create
argument_list|(
literal|"foo"
argument_list|,
literal|1
argument_list|,
literal|'a'
argument_list|,
literal|"bar"
argument_list|,
literal|1
argument_list|,
literal|'b'
argument_list|,
literal|"foo"
argument_list|,
literal|3
argument_list|,
literal|'c'
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|table
operator|.
name|containsValue
argument_list|(
literal|'a'
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|table
operator|.
name|containsValue
argument_list|(
literal|'b'
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|table
operator|.
name|containsValue
argument_list|(
literal|'c'
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|table
operator|.
name|containsValue
argument_list|(
literal|'x'
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|table
operator|.
name|containsValue
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testIsEmpty ()
annotation|@
name|Override
specifier|public
name|void
name|testIsEmpty
parameter_list|()
block|{
name|assertFalse
argument_list|(
name|table
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|table
operator|=
name|create
argument_list|(
literal|"foo"
argument_list|,
literal|1
argument_list|,
literal|'a'
argument_list|,
literal|"bar"
argument_list|,
literal|1
argument_list|,
literal|'b'
argument_list|,
literal|"foo"
argument_list|,
literal|3
argument_list|,
literal|'c'
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|table
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testEquals ()
annotation|@
name|Override
specifier|public
name|void
name|testEquals
parameter_list|()
block|{
name|table
operator|=
name|create
argument_list|(
literal|"foo"
argument_list|,
literal|1
argument_list|,
literal|'a'
argument_list|,
literal|"bar"
argument_list|,
literal|1
argument_list|,
literal|'b'
argument_list|,
literal|"foo"
argument_list|,
literal|3
argument_list|,
literal|'c'
argument_list|)
expr_stmt|;
name|Table
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|,
name|Character
argument_list|>
name|hashCopy
init|=
name|HashBasedTable
operator|.
name|create
argument_list|()
decl_stmt|;
name|hashCopy
operator|.
name|put
argument_list|(
literal|"foo"
argument_list|,
literal|1
argument_list|,
literal|'a'
argument_list|)
expr_stmt|;
name|hashCopy
operator|.
name|put
argument_list|(
literal|"bar"
argument_list|,
literal|1
argument_list|,
literal|'b'
argument_list|)
expr_stmt|;
name|hashCopy
operator|.
name|put
argument_list|(
literal|"foo"
argument_list|,
literal|3
argument_list|,
literal|'c'
argument_list|)
expr_stmt|;
name|Table
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|,
name|Character
argument_list|>
name|reordered
init|=
name|create
argument_list|(
literal|"foo"
argument_list|,
literal|3
argument_list|,
literal|'c'
argument_list|,
literal|"foo"
argument_list|,
literal|1
argument_list|,
literal|'a'
argument_list|,
literal|"bar"
argument_list|,
literal|1
argument_list|,
literal|'b'
argument_list|)
decl_stmt|;
name|Table
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|,
name|Character
argument_list|>
name|smaller
init|=
name|create
argument_list|(
literal|"foo"
argument_list|,
literal|1
argument_list|,
literal|'a'
argument_list|,
literal|"bar"
argument_list|,
literal|1
argument_list|,
literal|'b'
argument_list|)
decl_stmt|;
name|Table
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|,
name|Character
argument_list|>
name|swapOuter
init|=
name|create
argument_list|(
literal|"bar"
argument_list|,
literal|1
argument_list|,
literal|'a'
argument_list|,
literal|"foo"
argument_list|,
literal|1
argument_list|,
literal|'b'
argument_list|,
literal|"bar"
argument_list|,
literal|3
argument_list|,
literal|'c'
argument_list|)
decl_stmt|;
name|Table
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|,
name|Character
argument_list|>
name|swapValues
init|=
name|create
argument_list|(
literal|"foo"
argument_list|,
literal|1
argument_list|,
literal|'c'
argument_list|,
literal|"bar"
argument_list|,
literal|1
argument_list|,
literal|'b'
argument_list|,
literal|"foo"
argument_list|,
literal|3
argument_list|,
literal|'a'
argument_list|)
decl_stmt|;
operator|new
name|EqualsTester
argument_list|()
operator|.
name|addEqualityGroup
argument_list|(
name|table
argument_list|,
name|reordered
argument_list|)
operator|.
name|addEqualityGroup
argument_list|(
name|hashCopy
argument_list|)
operator|.
name|addEqualityGroup
argument_list|(
name|smaller
argument_list|)
operator|.
name|addEqualityGroup
argument_list|(
name|swapOuter
argument_list|)
operator|.
name|addEqualityGroup
argument_list|(
name|swapValues
argument_list|)
operator|.
name|testEquals
argument_list|()
expr_stmt|;
block|}
DECL|method|testHashCode ()
annotation|@
name|Override
specifier|public
name|void
name|testHashCode
parameter_list|()
block|{
name|table
operator|=
name|ArrayTable
operator|.
name|create
argument_list|(
name|asList
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
argument_list|,
name|asList
argument_list|(
literal|1
argument_list|,
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
literal|"foo"
argument_list|,
literal|1
argument_list|,
literal|'a'
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
literal|"bar"
argument_list|,
literal|1
argument_list|,
literal|'b'
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
literal|"foo"
argument_list|,
literal|3
argument_list|,
literal|'c'
argument_list|)
expr_stmt|;
name|int
name|expected
init|=
name|Objects
operator|.
name|hashCode
argument_list|(
literal|"foo"
argument_list|,
literal|1
argument_list|,
literal|'a'
argument_list|)
operator|+
name|Objects
operator|.
name|hashCode
argument_list|(
literal|"bar"
argument_list|,
literal|1
argument_list|,
literal|'b'
argument_list|)
operator|+
name|Objects
operator|.
name|hashCode
argument_list|(
literal|"foo"
argument_list|,
literal|3
argument_list|,
literal|'c'
argument_list|)
operator|+
name|Objects
operator|.
name|hashCode
argument_list|(
literal|"bar"
argument_list|,
literal|3
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|table
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testRow ()
annotation|@
name|Override
specifier|public
name|void
name|testRow
parameter_list|()
block|{
name|table
operator|=
name|create
argument_list|(
literal|"foo"
argument_list|,
literal|1
argument_list|,
literal|'a'
argument_list|,
literal|"bar"
argument_list|,
literal|1
argument_list|,
literal|'b'
argument_list|,
literal|"foo"
argument_list|,
literal|3
argument_list|,
literal|'c'
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|Integer
argument_list|,
name|Character
argument_list|>
name|expected
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
name|expected
operator|.
name|put
argument_list|(
literal|1
argument_list|,
literal|'a'
argument_list|)
expr_stmt|;
name|expected
operator|.
name|put
argument_list|(
literal|3
argument_list|,
literal|'c'
argument_list|)
expr_stmt|;
name|expected
operator|.
name|put
argument_list|(
literal|2
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|table
operator|.
name|row
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testColumn ()
annotation|@
name|Override
specifier|public
name|void
name|testColumn
parameter_list|()
block|{
name|table
operator|=
name|create
argument_list|(
literal|"foo"
argument_list|,
literal|1
argument_list|,
literal|'a'
argument_list|,
literal|"bar"
argument_list|,
literal|1
argument_list|,
literal|'b'
argument_list|,
literal|"foo"
argument_list|,
literal|3
argument_list|,
literal|'c'
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Character
argument_list|>
name|expected
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
name|expected
operator|.
name|put
argument_list|(
literal|"foo"
argument_list|,
literal|'a'
argument_list|)
expr_stmt|;
name|expected
operator|.
name|put
argument_list|(
literal|"bar"
argument_list|,
literal|'b'
argument_list|)
expr_stmt|;
name|expected
operator|.
name|put
argument_list|(
literal|"cat"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|table
operator|.
name|column
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testToStringSize1 ()
annotation|@
name|Override
specifier|public
name|void
name|testToStringSize1
parameter_list|()
block|{
name|table
operator|=
name|ArrayTable
operator|.
name|create
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
literal|"foo"
argument_list|,
literal|1
argument_list|,
literal|'a'
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"{foo={1=a}}"
argument_list|,
name|table
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testCreateDuplicateRows ()
specifier|public
name|void
name|testCreateDuplicateRows
parameter_list|()
block|{
try|try
block|{
name|ArrayTable
operator|.
name|create
argument_list|(
name|asList
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|,
literal|"foo"
argument_list|)
argument_list|,
name|asList
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{}
block|}
DECL|method|testCreateDuplicateColumns ()
specifier|public
name|void
name|testCreateDuplicateColumns
parameter_list|()
block|{
try|try
block|{
name|ArrayTable
operator|.
name|create
argument_list|(
name|asList
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
argument_list|,
name|asList
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{}
block|}
DECL|method|testCreateEmptyRows ()
specifier|public
name|void
name|testCreateEmptyRows
parameter_list|()
block|{
try|try
block|{
name|ArrayTable
operator|.
name|create
argument_list|(
name|Arrays
operator|.
expr|<
name|String
operator|>
name|asList
argument_list|()
argument_list|,
name|asList
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{}
block|}
DECL|method|testCreateEmptyColumns ()
specifier|public
name|void
name|testCreateEmptyColumns
parameter_list|()
block|{
try|try
block|{
name|ArrayTable
operator|.
name|create
argument_list|(
name|asList
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
argument_list|,
name|Arrays
operator|.
expr|<
name|Integer
operator|>
name|asList
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{}
block|}
DECL|method|testCreateCopyArrayTable ()
specifier|public
name|void
name|testCreateCopyArrayTable
parameter_list|()
block|{
name|Table
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|,
name|Character
argument_list|>
name|original
init|=
name|create
argument_list|(
literal|"foo"
argument_list|,
literal|1
argument_list|,
literal|'a'
argument_list|,
literal|"bar"
argument_list|,
literal|1
argument_list|,
literal|'b'
argument_list|,
literal|"foo"
argument_list|,
literal|3
argument_list|,
literal|'c'
argument_list|)
decl_stmt|;
name|Table
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|,
name|Character
argument_list|>
name|copy
init|=
name|ArrayTable
operator|.
name|create
argument_list|(
name|original
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|original
argument_list|,
name|copy
argument_list|)
expr_stmt|;
name|original
operator|.
name|put
argument_list|(
literal|"foo"
argument_list|,
literal|1
argument_list|,
literal|'d'
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
name|Character
operator|)
literal|'d'
argument_list|,
name|original
operator|.
name|get
argument_list|(
literal|"foo"
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
name|Character
operator|)
literal|'a'
argument_list|,
name|copy
operator|.
name|get
argument_list|(
literal|"foo"
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|copy
operator|.
name|rowKeySet
argument_list|()
argument_list|,
name|original
operator|.
name|rowKeySet
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|copy
operator|.
name|columnKeySet
argument_list|()
argument_list|,
name|original
operator|.
name|columnKeySet
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testCreateCopyHashBasedTable ()
specifier|public
name|void
name|testCreateCopyHashBasedTable
parameter_list|()
block|{
name|Table
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|,
name|Character
argument_list|>
name|original
init|=
name|HashBasedTable
operator|.
name|create
argument_list|()
decl_stmt|;
name|original
operator|.
name|put
argument_list|(
literal|"foo"
argument_list|,
literal|1
argument_list|,
literal|'a'
argument_list|)
expr_stmt|;
name|original
operator|.
name|put
argument_list|(
literal|"bar"
argument_list|,
literal|1
argument_list|,
literal|'b'
argument_list|)
expr_stmt|;
name|original
operator|.
name|put
argument_list|(
literal|"foo"
argument_list|,
literal|3
argument_list|,
literal|'c'
argument_list|)
expr_stmt|;
name|Table
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|,
name|Character
argument_list|>
name|copy
init|=
name|ArrayTable
operator|.
name|create
argument_list|(
name|original
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|copy
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
name|Character
operator|)
literal|'a'
argument_list|,
name|copy
operator|.
name|get
argument_list|(
literal|"foo"
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
name|Character
operator|)
literal|'b'
argument_list|,
name|copy
operator|.
name|get
argument_list|(
literal|"bar"
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
name|Character
operator|)
literal|'c'
argument_list|,
name|copy
operator|.
name|get
argument_list|(
literal|"foo"
argument_list|,
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|copy
operator|.
name|get
argument_list|(
literal|"bar"
argument_list|,
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|original
operator|.
name|put
argument_list|(
literal|"foo"
argument_list|,
literal|1
argument_list|,
literal|'d'
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
name|Character
operator|)
literal|'d'
argument_list|,
name|original
operator|.
name|get
argument_list|(
literal|"foo"
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
name|Character
operator|)
literal|'a'
argument_list|,
name|copy
operator|.
name|get
argument_list|(
literal|"foo"
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|copy
operator|.
name|rowKeySet
argument_list|()
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|copy
operator|.
name|columnKeySet
argument_list|()
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|1
argument_list|,
literal|3
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testCreateCopyEmptyTable ()
specifier|public
name|void
name|testCreateCopyEmptyTable
parameter_list|()
block|{
name|Table
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|,
name|Character
argument_list|>
name|original
init|=
name|HashBasedTable
operator|.
name|create
argument_list|()
decl_stmt|;
try|try
block|{
name|ArrayTable
operator|.
name|create
argument_list|(
name|original
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{}
block|}
DECL|method|testSerialization ()
specifier|public
name|void
name|testSerialization
parameter_list|()
block|{
name|table
operator|=
name|create
argument_list|(
literal|"foo"
argument_list|,
literal|1
argument_list|,
literal|'a'
argument_list|,
literal|"bar"
argument_list|,
literal|1
argument_list|,
literal|'b'
argument_list|,
literal|"foo"
argument_list|,
literal|3
argument_list|,
literal|'c'
argument_list|)
expr_stmt|;
name|SerializableTester
operator|.
name|reserializeAndAssert
argument_list|(
name|table
argument_list|)
expr_stmt|;
block|}
DECL|method|testToString_ordered ()
specifier|public
name|void
name|testToString_ordered
parameter_list|()
block|{
name|table
operator|=
name|create
argument_list|(
literal|"foo"
argument_list|,
literal|1
argument_list|,
literal|'a'
argument_list|,
literal|"bar"
argument_list|,
literal|1
argument_list|,
literal|'b'
argument_list|,
literal|"foo"
argument_list|,
literal|3
argument_list|,
literal|'c'
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"{foo={1=a, 2=null, 3=c}, "
operator|+
literal|"bar={1=b, 2=null, 3=null}, "
operator|+
literal|"cat={1=null, 2=null, 3=null}}"
argument_list|,
name|table
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"{foo={1=a, 2=null, 3=c}, "
operator|+
literal|"bar={1=b, 2=null, 3=null}, "
operator|+
literal|"cat={1=null, 2=null, 3=null}}"
argument_list|,
name|table
operator|.
name|rowMap
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testCellSetToString_ordered ()
specifier|public
name|void
name|testCellSetToString_ordered
parameter_list|()
block|{
name|table
operator|=
name|create
argument_list|(
literal|"foo"
argument_list|,
literal|1
argument_list|,
literal|'a'
argument_list|,
literal|"bar"
argument_list|,
literal|1
argument_list|,
literal|'b'
argument_list|,
literal|"foo"
argument_list|,
literal|3
argument_list|,
literal|'c'
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[(foo,1)=a, (foo,2)=null, (foo,3)=c, "
operator|+
literal|"(bar,1)=b, (bar,2)=null, (bar,3)=null, "
operator|+
literal|"(cat,1)=null, (cat,2)=null, (cat,3)=null]"
argument_list|,
name|table
operator|.
name|cellSet
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testRowKeySetToString_ordered ()
specifier|public
name|void
name|testRowKeySetToString_ordered
parameter_list|()
block|{
name|table
operator|=
name|create
argument_list|(
literal|"foo"
argument_list|,
literal|1
argument_list|,
literal|'a'
argument_list|,
literal|"bar"
argument_list|,
literal|1
argument_list|,
literal|'b'
argument_list|,
literal|"foo"
argument_list|,
literal|3
argument_list|,
literal|'c'
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[foo, bar, cat]"
argument_list|,
name|table
operator|.
name|rowKeySet
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testColumnKeySetToString_ordered ()
specifier|public
name|void
name|testColumnKeySetToString_ordered
parameter_list|()
block|{
name|table
operator|=
name|create
argument_list|(
literal|"foo"
argument_list|,
literal|1
argument_list|,
literal|'a'
argument_list|,
literal|"bar"
argument_list|,
literal|1
argument_list|,
literal|'b'
argument_list|,
literal|"foo"
argument_list|,
literal|3
argument_list|,
literal|'c'
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[1, 2, 3]"
argument_list|,
name|table
operator|.
name|columnKeySet
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testValuesToString_ordered ()
specifier|public
name|void
name|testValuesToString_ordered
parameter_list|()
block|{
name|table
operator|=
name|create
argument_list|(
literal|"foo"
argument_list|,
literal|1
argument_list|,
literal|'a'
argument_list|,
literal|"bar"
argument_list|,
literal|1
argument_list|,
literal|'b'
argument_list|,
literal|"foo"
argument_list|,
literal|3
argument_list|,
literal|'c'
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[a, null, c, b, null, null, null, null, null]"
argument_list|,
name|table
operator|.
name|values
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testRowKeyList ()
specifier|public
name|void
name|testRowKeyList
parameter_list|()
block|{
name|ArrayTable
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|,
name|Character
argument_list|>
name|table
init|=
name|create
argument_list|(
literal|"foo"
argument_list|,
literal|1
argument_list|,
literal|'a'
argument_list|,
literal|"bar"
argument_list|,
literal|1
argument_list|,
literal|'b'
argument_list|,
literal|"foo"
argument_list|,
literal|3
argument_list|,
literal|'c'
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|table
operator|.
name|rowKeyList
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|,
literal|"cat"
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
block|}
DECL|method|testColumnKeyList ()
specifier|public
name|void
name|testColumnKeyList
parameter_list|()
block|{
name|ArrayTable
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|,
name|Character
argument_list|>
name|table
init|=
name|create
argument_list|(
literal|"foo"
argument_list|,
literal|1
argument_list|,
literal|'a'
argument_list|,
literal|"bar"
argument_list|,
literal|1
argument_list|,
literal|'b'
argument_list|,
literal|"foo"
argument_list|,
literal|3
argument_list|,
literal|'c'
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|table
operator|.
name|columnKeyList
argument_list|()
argument_list|)
operator|.
name|containsExactly
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
block|}
DECL|method|testGetMissingKeys ()
specifier|public
name|void
name|testGetMissingKeys
parameter_list|()
block|{
name|table
operator|=
name|create
argument_list|(
literal|"foo"
argument_list|,
literal|1
argument_list|,
literal|'a'
argument_list|,
literal|"bar"
argument_list|,
literal|1
argument_list|,
literal|'b'
argument_list|,
literal|"foo"
argument_list|,
literal|3
argument_list|,
literal|'c'
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|table
operator|.
name|get
argument_list|(
literal|"dog"
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|table
operator|.
name|get
argument_list|(
literal|"foo"
argument_list|,
literal|4
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testAt ()
specifier|public
name|void
name|testAt
parameter_list|()
block|{
name|ArrayTable
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|,
name|Character
argument_list|>
name|table
init|=
name|create
argument_list|(
literal|"foo"
argument_list|,
literal|1
argument_list|,
literal|'a'
argument_list|,
literal|"bar"
argument_list|,
literal|1
argument_list|,
literal|'b'
argument_list|,
literal|"foo"
argument_list|,
literal|3
argument_list|,
literal|'c'
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
operator|(
name|Character
operator|)
literal|'b'
argument_list|,
name|table
operator|.
name|at
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
name|Character
operator|)
literal|'c'
argument_list|,
name|table
operator|.
name|at
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|table
operator|.
name|at
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|table
operator|.
name|at
argument_list|(
literal|1
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IndexOutOfBoundsException
name|expected
parameter_list|)
block|{}
try|try
block|{
name|table
operator|.
name|at
argument_list|(
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IndexOutOfBoundsException
name|expected
parameter_list|)
block|{}
try|try
block|{
name|table
operator|.
name|at
argument_list|(
literal|3
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IndexOutOfBoundsException
name|expected
parameter_list|)
block|{}
try|try
block|{
name|table
operator|.
name|at
argument_list|(
operator|-
literal|1
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IndexOutOfBoundsException
name|expected
parameter_list|)
block|{}
block|}
DECL|method|testSet ()
specifier|public
name|void
name|testSet
parameter_list|()
block|{
name|ArrayTable
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|,
name|Character
argument_list|>
name|table
init|=
name|create
argument_list|(
literal|"foo"
argument_list|,
literal|1
argument_list|,
literal|'a'
argument_list|,
literal|"bar"
argument_list|,
literal|1
argument_list|,
literal|'b'
argument_list|,
literal|"foo"
argument_list|,
literal|3
argument_list|,
literal|'c'
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
operator|(
name|Character
operator|)
literal|'b'
argument_list|,
name|table
operator|.
name|set
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|,
literal|'d'
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
name|Character
operator|)
literal|'d'
argument_list|,
name|table
operator|.
name|get
argument_list|(
literal|"bar"
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|table
operator|.
name|set
argument_list|(
literal|2
argument_list|,
literal|0
argument_list|,
literal|'e'
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
name|Character
operator|)
literal|'e'
argument_list|,
name|table
operator|.
name|get
argument_list|(
literal|"cat"
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
name|Character
operator|)
literal|'a'
argument_list|,
name|table
operator|.
name|set
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|table
operator|.
name|get
argument_list|(
literal|"foo"
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|table
operator|.
name|set
argument_list|(
literal|1
argument_list|,
literal|3
argument_list|,
literal|'z'
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IndexOutOfBoundsException
name|expected
parameter_list|)
block|{}
try|try
block|{
name|table
operator|.
name|set
argument_list|(
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
literal|'z'
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IndexOutOfBoundsException
name|expected
parameter_list|)
block|{}
try|try
block|{
name|table
operator|.
name|set
argument_list|(
literal|3
argument_list|,
literal|2
argument_list|,
literal|'z'
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IndexOutOfBoundsException
name|expected
parameter_list|)
block|{}
try|try
block|{
name|table
operator|.
name|set
argument_list|(
operator|-
literal|1
argument_list|,
literal|2
argument_list|,
literal|'z'
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IndexOutOfBoundsException
name|expected
parameter_list|)
block|{}
name|assertFalse
argument_list|(
name|table
operator|.
name|containsValue
argument_list|(
literal|'z'
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testEraseAll ()
specifier|public
name|void
name|testEraseAll
parameter_list|()
block|{
name|ArrayTable
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|,
name|Character
argument_list|>
name|table
init|=
name|create
argument_list|(
literal|"foo"
argument_list|,
literal|1
argument_list|,
literal|'a'
argument_list|,
literal|"bar"
argument_list|,
literal|1
argument_list|,
literal|'b'
argument_list|,
literal|"foo"
argument_list|,
literal|3
argument_list|,
literal|'c'
argument_list|)
decl_stmt|;
name|table
operator|.
name|eraseAll
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|9
argument_list|,
name|table
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|table
operator|.
name|get
argument_list|(
literal|"bar"
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|table
operator|.
name|containsRow
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|table
operator|.
name|containsValue
argument_list|(
literal|'a'
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testPutIllegal ()
specifier|public
name|void
name|testPutIllegal
parameter_list|()
block|{
name|table
operator|=
name|create
argument_list|(
literal|"foo"
argument_list|,
literal|1
argument_list|,
literal|'a'
argument_list|,
literal|"bar"
argument_list|,
literal|1
argument_list|,
literal|'b'
argument_list|,
literal|"foo"
argument_list|,
literal|3
argument_list|,
literal|'c'
argument_list|)
expr_stmt|;
try|try
block|{
name|table
operator|.
name|put
argument_list|(
literal|"dog"
argument_list|,
literal|1
argument_list|,
literal|'d'
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{
name|assertThat
argument_list|(
name|expected
argument_list|)
operator|.
name|hasMessage
argument_list|(
literal|"Row dog not in [foo, bar, cat]"
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|table
operator|.
name|put
argument_list|(
literal|"foo"
argument_list|,
literal|4
argument_list|,
literal|'d'
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{
name|assertThat
argument_list|(
name|expected
argument_list|)
operator|.
name|hasMessage
argument_list|(
literal|"Column 4 not in [1, 2, 3]"
argument_list|)
expr_stmt|;
block|}
name|assertFalse
argument_list|(
name|table
operator|.
name|containsValue
argument_list|(
literal|'d'
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testErase ()
specifier|public
name|void
name|testErase
parameter_list|()
block|{
name|ArrayTable
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|,
name|Character
argument_list|>
name|table
init|=
name|create
argument_list|(
literal|"foo"
argument_list|,
literal|1
argument_list|,
literal|'a'
argument_list|,
literal|"bar"
argument_list|,
literal|1
argument_list|,
literal|'b'
argument_list|,
literal|"foo"
argument_list|,
literal|3
argument_list|,
literal|'c'
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
operator|(
name|Character
operator|)
literal|'b'
argument_list|,
name|table
operator|.
name|erase
argument_list|(
literal|"bar"
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|table
operator|.
name|get
argument_list|(
literal|"bar"
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|9
argument_list|,
name|table
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|table
operator|.
name|erase
argument_list|(
literal|"bar"
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|table
operator|.
name|erase
argument_list|(
literal|"foo"
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|table
operator|.
name|erase
argument_list|(
literal|"dog"
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|table
operator|.
name|erase
argument_list|(
literal|"bar"
argument_list|,
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|table
operator|.
name|erase
argument_list|(
literal|null
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|table
operator|.
name|erase
argument_list|(
literal|"bar"
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testCellReflectsChanges ()
specifier|public
name|void
name|testCellReflectsChanges
parameter_list|()
block|{
name|table
operator|=
name|create
argument_list|(
literal|"foo"
argument_list|,
literal|1
argument_list|,
literal|'a'
argument_list|,
literal|"bar"
argument_list|,
literal|1
argument_list|,
literal|'b'
argument_list|,
literal|"foo"
argument_list|,
literal|3
argument_list|,
literal|'c'
argument_list|)
expr_stmt|;
name|Cell
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|,
name|Character
argument_list|>
name|cell
init|=
name|table
operator|.
name|cellSet
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|Tables
operator|.
name|immutableCell
argument_list|(
literal|"foo"
argument_list|,
literal|1
argument_list|,
literal|'a'
argument_list|)
argument_list|,
name|cell
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
name|Character
operator|)
literal|'a'
argument_list|,
name|table
operator|.
name|put
argument_list|(
literal|"foo"
argument_list|,
literal|1
argument_list|,
literal|'d'
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Tables
operator|.
name|immutableCell
argument_list|(
literal|"foo"
argument_list|,
literal|1
argument_list|,
literal|'d'
argument_list|)
argument_list|,
name|cell
argument_list|)
expr_stmt|;
block|}
DECL|method|testRowMissing ()
specifier|public
name|void
name|testRowMissing
parameter_list|()
block|{
name|table
operator|=
name|create
argument_list|(
literal|"foo"
argument_list|,
literal|1
argument_list|,
literal|'a'
argument_list|,
literal|"bar"
argument_list|,
literal|1
argument_list|,
literal|'b'
argument_list|,
literal|"foo"
argument_list|,
literal|3
argument_list|,
literal|'c'
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|Integer
argument_list|,
name|Character
argument_list|>
name|row
init|=
name|table
operator|.
name|row
argument_list|(
literal|"dog"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|row
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|row
operator|.
name|put
argument_list|(
literal|1
argument_list|,
literal|'d'
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|expected
parameter_list|)
block|{}
block|}
DECL|method|testColumnMissing ()
specifier|public
name|void
name|testColumnMissing
parameter_list|()
block|{
name|table
operator|=
name|create
argument_list|(
literal|"foo"
argument_list|,
literal|1
argument_list|,
literal|'a'
argument_list|,
literal|"bar"
argument_list|,
literal|1
argument_list|,
literal|'b'
argument_list|,
literal|"foo"
argument_list|,
literal|3
argument_list|,
literal|'c'
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Character
argument_list|>
name|column
init|=
name|table
operator|.
name|column
argument_list|(
literal|4
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|column
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|column
operator|.
name|put
argument_list|(
literal|"foo"
argument_list|,
literal|'d'
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|expected
parameter_list|)
block|{}
block|}
DECL|method|testRowPutIllegal ()
specifier|public
name|void
name|testRowPutIllegal
parameter_list|()
block|{
name|table
operator|=
name|create
argument_list|(
literal|"foo"
argument_list|,
literal|1
argument_list|,
literal|'a'
argument_list|,
literal|"bar"
argument_list|,
literal|1
argument_list|,
literal|'b'
argument_list|,
literal|"foo"
argument_list|,
literal|3
argument_list|,
literal|'c'
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|Integer
argument_list|,
name|Character
argument_list|>
name|map
init|=
name|table
operator|.
name|row
argument_list|(
literal|"foo"
argument_list|)
decl_stmt|;
try|try
block|{
name|map
operator|.
name|put
argument_list|(
literal|4
argument_list|,
literal|'d'
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{
name|assertThat
argument_list|(
name|expected
argument_list|)
operator|.
name|hasMessage
argument_list|(
literal|"Column 4 not in [1, 2, 3]"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testColumnPutIllegal ()
specifier|public
name|void
name|testColumnPutIllegal
parameter_list|()
block|{
name|table
operator|=
name|create
argument_list|(
literal|"foo"
argument_list|,
literal|1
argument_list|,
literal|'a'
argument_list|,
literal|"bar"
argument_list|,
literal|1
argument_list|,
literal|'b'
argument_list|,
literal|"foo"
argument_list|,
literal|3
argument_list|,
literal|'c'
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Character
argument_list|>
name|map
init|=
name|table
operator|.
name|column
argument_list|(
literal|3
argument_list|)
decl_stmt|;
try|try
block|{
name|map
operator|.
name|put
argument_list|(
literal|"dog"
argument_list|,
literal|'d'
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{
name|assertThat
argument_list|(
name|expected
argument_list|)
operator|.
name|hasMessage
argument_list|(
literal|"Row dog not in [foo, bar, cat]"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

