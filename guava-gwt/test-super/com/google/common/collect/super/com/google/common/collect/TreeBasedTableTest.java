begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2008 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.collect
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|truth0
operator|.
name|Truth
operator|.
name|ASSERT
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtCompatible
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|SortedMapInterfaceTest
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedMap
import|;
end_import

begin_comment
comment|/**  * Test cases for {@link TreeBasedTable}.  *  * @author Jared Levy  * @author Louis Wasserman  */
end_comment

begin_class
annotation|@
name|GwtCompatible
argument_list|(
name|emulated
operator|=
literal|true
argument_list|)
DECL|class|TreeBasedTableTest
specifier|public
class|class
name|TreeBasedTableTest
extends|extends
name|AbstractTableTest
block|{
DECL|class|TreeRowTest
specifier|public
specifier|static
class|class
name|TreeRowTest
extends|extends
name|SortedMapInterfaceTest
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
block|{
DECL|method|TreeRowTest ()
specifier|public
name|TreeRowTest
parameter_list|()
block|{
name|super
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|makeEmptyMap ()
annotation|@
name|Override
specifier|protected
name|SortedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|makeEmptyMap
parameter_list|()
block|{
name|TreeBasedTable
argument_list|<
name|String
argument_list|,
name|String
argument_list|,
name|String
argument_list|>
name|table
init|=
name|TreeBasedTable
operator|.
name|create
argument_list|()
decl_stmt|;
name|table
operator|.
name|put
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
literal|"c"
argument_list|,
literal|"b"
argument_list|,
literal|"a"
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
literal|"a"
argument_list|,
literal|"a"
argument_list|,
literal|"d"
argument_list|)
expr_stmt|;
return|return
name|table
operator|.
name|row
argument_list|(
literal|"b"
argument_list|)
return|;
block|}
DECL|method|makePopulatedMap ()
annotation|@
name|Override
specifier|protected
name|SortedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|makePopulatedMap
parameter_list|()
block|{
name|TreeBasedTable
argument_list|<
name|String
argument_list|,
name|String
argument_list|,
name|String
argument_list|>
name|table
init|=
name|TreeBasedTable
operator|.
name|create
argument_list|()
decl_stmt|;
name|table
operator|.
name|put
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
literal|"c"
argument_list|,
literal|"b"
argument_list|,
literal|"a"
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
literal|"b"
argument_list|,
literal|"b"
argument_list|,
literal|"x"
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
literal|"b"
argument_list|,
literal|"c"
argument_list|,
literal|"y"
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
literal|"b"
argument_list|,
literal|"x"
argument_list|,
literal|"n"
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
literal|"a"
argument_list|,
literal|"a"
argument_list|,
literal|"d"
argument_list|)
expr_stmt|;
return|return
name|table
operator|.
name|row
argument_list|(
literal|"b"
argument_list|)
return|;
block|}
DECL|method|getKeyNotInPopulatedMap ()
annotation|@
name|Override
specifier|protected
name|String
name|getKeyNotInPopulatedMap
parameter_list|()
block|{
return|return
literal|"q"
return|;
block|}
DECL|method|getValueNotInPopulatedMap ()
annotation|@
name|Override
specifier|protected
name|String
name|getValueNotInPopulatedMap
parameter_list|()
block|{
return|return
literal|"p"
return|;
block|}
DECL|method|testClearSubMapOfRowMap ()
specifier|public
name|void
name|testClearSubMapOfRowMap
parameter_list|()
block|{
name|TreeBasedTable
argument_list|<
name|String
argument_list|,
name|String
argument_list|,
name|String
argument_list|>
name|table
init|=
name|TreeBasedTable
operator|.
name|create
argument_list|()
decl_stmt|;
name|table
operator|.
name|put
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
literal|"c"
argument_list|,
literal|"b"
argument_list|,
literal|"a"
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
literal|"b"
argument_list|,
literal|"b"
argument_list|,
literal|"x"
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
literal|"b"
argument_list|,
literal|"c"
argument_list|,
literal|"y"
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
literal|"b"
argument_list|,
literal|"x"
argument_list|,
literal|"n"
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
literal|"a"
argument_list|,
literal|"a"
argument_list|,
literal|"d"
argument_list|)
expr_stmt|;
name|table
operator|.
name|row
argument_list|(
literal|"b"
argument_list|)
operator|.
name|subMap
argument_list|(
literal|"c"
argument_list|,
literal|"x"
argument_list|)
operator|.
name|clear
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|table
operator|.
name|row
argument_list|(
literal|"b"
argument_list|)
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"b"
argument_list|,
literal|"x"
argument_list|,
literal|"x"
argument_list|,
literal|"n"
argument_list|)
argument_list|)
expr_stmt|;
name|table
operator|.
name|row
argument_list|(
literal|"b"
argument_list|)
operator|.
name|subMap
argument_list|(
literal|"b"
argument_list|,
literal|"y"
argument_list|)
operator|.
name|clear
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|table
operator|.
name|row
argument_list|(
literal|"b"
argument_list|)
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|table
operator|.
name|backingMap
operator|.
name|containsKey
argument_list|(
literal|"b"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|field|sortedTable
specifier|private
name|TreeBasedTable
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|,
name|Character
argument_list|>
name|sortedTable
decl_stmt|;
DECL|method|create ( Comparator<? super String> rowComparator, Comparator<? super Integer> columnComparator, Object... data)
specifier|protected
name|TreeBasedTable
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|,
name|Character
argument_list|>
name|create
parameter_list|(
name|Comparator
argument_list|<
name|?
super|super
name|String
argument_list|>
name|rowComparator
parameter_list|,
name|Comparator
argument_list|<
name|?
super|super
name|Integer
argument_list|>
name|columnComparator
parameter_list|,
name|Object
modifier|...
name|data
parameter_list|)
block|{
name|TreeBasedTable
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|,
name|Character
argument_list|>
name|table
init|=
name|TreeBasedTable
operator|.
name|create
argument_list|(
name|rowComparator
argument_list|,
name|columnComparator
argument_list|)
decl_stmt|;
name|table
operator|.
name|put
argument_list|(
literal|"foo"
argument_list|,
literal|4
argument_list|,
literal|'a'
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
literal|"cat"
argument_list|,
literal|1
argument_list|,
literal|'b'
argument_list|)
expr_stmt|;
name|table
operator|.
name|clear
argument_list|()
expr_stmt|;
name|populate
argument_list|(
name|table
argument_list|,
name|data
argument_list|)
expr_stmt|;
return|return
name|table
return|;
block|}
DECL|method|create ( Object... data)
annotation|@
name|Override
specifier|protected
name|TreeBasedTable
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|,
name|Character
argument_list|>
name|create
parameter_list|(
name|Object
modifier|...
name|data
parameter_list|)
block|{
name|TreeBasedTable
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|,
name|Character
argument_list|>
name|table
init|=
name|TreeBasedTable
operator|.
name|create
argument_list|()
decl_stmt|;
name|table
operator|.
name|put
argument_list|(
literal|"foo"
argument_list|,
literal|4
argument_list|,
literal|'a'
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
literal|"cat"
argument_list|,
literal|1
argument_list|,
literal|'b'
argument_list|)
expr_stmt|;
name|table
operator|.
name|clear
argument_list|()
expr_stmt|;
name|populate
argument_list|(
name|table
argument_list|,
name|data
argument_list|)
expr_stmt|;
return|return
name|table
return|;
block|}
DECL|method|testCreateExplicitComparators ()
specifier|public
name|void
name|testCreateExplicitComparators
parameter_list|()
block|{
name|table
operator|=
name|TreeBasedTable
operator|.
name|create
argument_list|(
name|Collections
operator|.
name|reverseOrder
argument_list|()
argument_list|,
name|Ordering
operator|.
name|usingToString
argument_list|()
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
literal|"foo"
argument_list|,
literal|3
argument_list|,
literal|'a'
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
literal|"foo"
argument_list|,
literal|12
argument_list|,
literal|'b'
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
literal|"bar"
argument_list|,
literal|5
argument_list|,
literal|'c'
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
literal|"cat"
argument_list|,
literal|8
argument_list|,
literal|'d'
argument_list|)
expr_stmt|;
name|ASSERT
operator|.
name|that
argument_list|(
name|table
operator|.
name|rowKeySet
argument_list|()
argument_list|)
operator|.
name|has
argument_list|()
operator|.
name|exactly
argument_list|(
literal|"foo"
argument_list|,
literal|"cat"
argument_list|,
literal|"bar"
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
name|ASSERT
operator|.
name|that
argument_list|(
name|table
operator|.
name|row
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|keySet
argument_list|()
argument_list|)
operator|.
name|has
argument_list|()
operator|.
name|exactly
argument_list|(
literal|12
argument_list|,
literal|3
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
block|}
DECL|method|testCreateCopy ()
specifier|public
name|void
name|testCreateCopy
parameter_list|()
block|{
name|TreeBasedTable
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|,
name|Character
argument_list|>
name|original
init|=
name|TreeBasedTable
operator|.
name|create
argument_list|(
name|Collections
operator|.
name|reverseOrder
argument_list|()
argument_list|,
name|Ordering
operator|.
name|usingToString
argument_list|()
argument_list|)
decl_stmt|;
name|original
operator|.
name|put
argument_list|(
literal|"foo"
argument_list|,
literal|3
argument_list|,
literal|'a'
argument_list|)
expr_stmt|;
name|original
operator|.
name|put
argument_list|(
literal|"foo"
argument_list|,
literal|12
argument_list|,
literal|'b'
argument_list|)
expr_stmt|;
name|original
operator|.
name|put
argument_list|(
literal|"bar"
argument_list|,
literal|5
argument_list|,
literal|'c'
argument_list|)
expr_stmt|;
name|original
operator|.
name|put
argument_list|(
literal|"cat"
argument_list|,
literal|8
argument_list|,
literal|'d'
argument_list|)
expr_stmt|;
name|table
operator|=
name|TreeBasedTable
operator|.
name|create
argument_list|(
name|original
argument_list|)
expr_stmt|;
name|ASSERT
operator|.
name|that
argument_list|(
name|table
operator|.
name|rowKeySet
argument_list|()
argument_list|)
operator|.
name|has
argument_list|()
operator|.
name|exactly
argument_list|(
literal|"foo"
argument_list|,
literal|"cat"
argument_list|,
literal|"bar"
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
name|ASSERT
operator|.
name|that
argument_list|(
name|table
operator|.
name|row
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|keySet
argument_list|()
argument_list|)
operator|.
name|has
argument_list|()
operator|.
name|exactly
argument_list|(
literal|12
argument_list|,
literal|3
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|original
argument_list|,
name|table
argument_list|)
expr_stmt|;
block|}
DECL|method|testToString_ordered ()
specifier|public
name|void
name|testToString_ordered
parameter_list|()
block|{
name|table
operator|=
name|create
argument_list|(
literal|"foo"
argument_list|,
literal|1
argument_list|,
literal|'a'
argument_list|,
literal|"bar"
argument_list|,
literal|1
argument_list|,
literal|'b'
argument_list|,
literal|"foo"
argument_list|,
literal|3
argument_list|,
literal|'c'
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"{bar={1=b}, foo={1=a, 3=c}}"
argument_list|,
name|table
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"{bar={1=b}, foo={1=a, 3=c}}"
argument_list|,
name|table
operator|.
name|rowMap
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testCellSetToString_ordered ()
specifier|public
name|void
name|testCellSetToString_ordered
parameter_list|()
block|{
name|table
operator|=
name|create
argument_list|(
literal|"foo"
argument_list|,
literal|1
argument_list|,
literal|'a'
argument_list|,
literal|"bar"
argument_list|,
literal|1
argument_list|,
literal|'b'
argument_list|,
literal|"foo"
argument_list|,
literal|3
argument_list|,
literal|'c'
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[(bar,1)=b, (foo,1)=a, (foo,3)=c]"
argument_list|,
name|table
operator|.
name|cellSet
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testRowKeySetToString_ordered ()
specifier|public
name|void
name|testRowKeySetToString_ordered
parameter_list|()
block|{
name|table
operator|=
name|create
argument_list|(
literal|"foo"
argument_list|,
literal|1
argument_list|,
literal|'a'
argument_list|,
literal|"bar"
argument_list|,
literal|1
argument_list|,
literal|'b'
argument_list|,
literal|"foo"
argument_list|,
literal|3
argument_list|,
literal|'c'
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[bar, foo]"
argument_list|,
name|table
operator|.
name|rowKeySet
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testValuesToString_ordered ()
specifier|public
name|void
name|testValuesToString_ordered
parameter_list|()
block|{
name|table
operator|=
name|create
argument_list|(
literal|"foo"
argument_list|,
literal|1
argument_list|,
literal|'a'
argument_list|,
literal|"bar"
argument_list|,
literal|1
argument_list|,
literal|'b'
argument_list|,
literal|"foo"
argument_list|,
literal|3
argument_list|,
literal|'c'
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[b, a, c]"
argument_list|,
name|table
operator|.
name|values
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testRowComparator ()
specifier|public
name|void
name|testRowComparator
parameter_list|()
block|{
name|sortedTable
operator|=
name|TreeBasedTable
operator|.
name|create
argument_list|()
expr_stmt|;
name|assertSame
argument_list|(
name|Ordering
operator|.
name|natural
argument_list|()
argument_list|,
name|sortedTable
operator|.
name|rowComparator
argument_list|()
argument_list|)
expr_stmt|;
name|sortedTable
operator|=
name|TreeBasedTable
operator|.
name|create
argument_list|(
name|Collections
operator|.
name|reverseOrder
argument_list|()
argument_list|,
name|Ordering
operator|.
name|usingToString
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|Collections
operator|.
name|reverseOrder
argument_list|()
argument_list|,
name|sortedTable
operator|.
name|rowComparator
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testColumnComparator ()
specifier|public
name|void
name|testColumnComparator
parameter_list|()
block|{
name|sortedTable
operator|=
name|TreeBasedTable
operator|.
name|create
argument_list|()
expr_stmt|;
name|assertSame
argument_list|(
name|Ordering
operator|.
name|natural
argument_list|()
argument_list|,
name|sortedTable
operator|.
name|columnComparator
argument_list|()
argument_list|)
expr_stmt|;
name|sortedTable
operator|=
name|TreeBasedTable
operator|.
name|create
argument_list|(
name|Collections
operator|.
name|reverseOrder
argument_list|()
argument_list|,
name|Ordering
operator|.
name|usingToString
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|Ordering
operator|.
name|usingToString
argument_list|()
argument_list|,
name|sortedTable
operator|.
name|columnComparator
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testRowKeySetComparator ()
specifier|public
name|void
name|testRowKeySetComparator
parameter_list|()
block|{
name|sortedTable
operator|=
name|TreeBasedTable
operator|.
name|create
argument_list|()
expr_stmt|;
name|assertSame
argument_list|(
name|Ordering
operator|.
name|natural
argument_list|()
argument_list|,
name|sortedTable
operator|.
name|rowKeySet
argument_list|()
operator|.
name|comparator
argument_list|()
argument_list|)
expr_stmt|;
name|sortedTable
operator|=
name|TreeBasedTable
operator|.
name|create
argument_list|(
name|Collections
operator|.
name|reverseOrder
argument_list|()
argument_list|,
name|Ordering
operator|.
name|usingToString
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|Collections
operator|.
name|reverseOrder
argument_list|()
argument_list|,
name|sortedTable
operator|.
name|rowKeySet
argument_list|()
operator|.
name|comparator
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testRowKeySetFirst ()
specifier|public
name|void
name|testRowKeySetFirst
parameter_list|()
block|{
name|sortedTable
operator|=
name|create
argument_list|(
literal|"foo"
argument_list|,
literal|1
argument_list|,
literal|'a'
argument_list|,
literal|"bar"
argument_list|,
literal|1
argument_list|,
literal|'b'
argument_list|,
literal|"foo"
argument_list|,
literal|3
argument_list|,
literal|'c'
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
literal|"bar"
argument_list|,
name|sortedTable
operator|.
name|rowKeySet
argument_list|()
operator|.
name|first
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testRowKeySetLast ()
specifier|public
name|void
name|testRowKeySetLast
parameter_list|()
block|{
name|sortedTable
operator|=
name|create
argument_list|(
literal|"foo"
argument_list|,
literal|1
argument_list|,
literal|'a'
argument_list|,
literal|"bar"
argument_list|,
literal|1
argument_list|,
literal|'b'
argument_list|,
literal|"foo"
argument_list|,
literal|3
argument_list|,
literal|'c'
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
literal|"foo"
argument_list|,
name|sortedTable
operator|.
name|rowKeySet
argument_list|()
operator|.
name|last
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testRowKeySetHeadSet ()
specifier|public
name|void
name|testRowKeySetHeadSet
parameter_list|()
block|{
name|sortedTable
operator|=
name|create
argument_list|(
literal|"foo"
argument_list|,
literal|1
argument_list|,
literal|'a'
argument_list|,
literal|"bar"
argument_list|,
literal|1
argument_list|,
literal|'b'
argument_list|,
literal|"foo"
argument_list|,
literal|3
argument_list|,
literal|'c'
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|set
init|=
name|sortedTable
operator|.
name|rowKeySet
argument_list|()
operator|.
name|headSet
argument_list|(
literal|"cat"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
literal|"bar"
argument_list|)
argument_list|,
name|set
argument_list|)
expr_stmt|;
name|set
operator|.
name|clear
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|set
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
name|sortedTable
operator|.
name|rowKeySet
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testRowKeySetTailSet ()
specifier|public
name|void
name|testRowKeySetTailSet
parameter_list|()
block|{
name|sortedTable
operator|=
name|create
argument_list|(
literal|"foo"
argument_list|,
literal|1
argument_list|,
literal|'a'
argument_list|,
literal|"bar"
argument_list|,
literal|1
argument_list|,
literal|'b'
argument_list|,
literal|"foo"
argument_list|,
literal|3
argument_list|,
literal|'c'
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|set
init|=
name|sortedTable
operator|.
name|rowKeySet
argument_list|()
operator|.
name|tailSet
argument_list|(
literal|"cat"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
name|set
argument_list|)
expr_stmt|;
name|set
operator|.
name|clear
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|set
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
literal|"bar"
argument_list|)
argument_list|,
name|sortedTable
operator|.
name|rowKeySet
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testRowKeySetSubSet ()
specifier|public
name|void
name|testRowKeySetSubSet
parameter_list|()
block|{
name|sortedTable
operator|=
name|create
argument_list|(
literal|"foo"
argument_list|,
literal|1
argument_list|,
literal|'a'
argument_list|,
literal|"bar"
argument_list|,
literal|1
argument_list|,
literal|'b'
argument_list|,
literal|"foo"
argument_list|,
literal|3
argument_list|,
literal|'c'
argument_list|,
literal|"dog"
argument_list|,
literal|2
argument_list|,
literal|'d'
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|set
init|=
name|sortedTable
operator|.
name|rowKeySet
argument_list|()
operator|.
name|subSet
argument_list|(
literal|"cat"
argument_list|,
literal|"egg"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
literal|"dog"
argument_list|)
argument_list|,
name|set
argument_list|)
expr_stmt|;
name|set
operator|.
name|clear
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|set
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"bar"
argument_list|,
literal|"foo"
argument_list|)
argument_list|,
name|sortedTable
operator|.
name|rowKeySet
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testRowMapComparator ()
specifier|public
name|void
name|testRowMapComparator
parameter_list|()
block|{
name|sortedTable
operator|=
name|TreeBasedTable
operator|.
name|create
argument_list|()
expr_stmt|;
name|assertSame
argument_list|(
name|Ordering
operator|.
name|natural
argument_list|()
argument_list|,
name|sortedTable
operator|.
name|rowMap
argument_list|()
operator|.
name|comparator
argument_list|()
argument_list|)
expr_stmt|;
name|sortedTable
operator|=
name|TreeBasedTable
operator|.
name|create
argument_list|(
name|Collections
operator|.
name|reverseOrder
argument_list|()
argument_list|,
name|Ordering
operator|.
name|usingToString
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|Collections
operator|.
name|reverseOrder
argument_list|()
argument_list|,
name|sortedTable
operator|.
name|rowMap
argument_list|()
operator|.
name|comparator
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testRowMapFirstKey ()
specifier|public
name|void
name|testRowMapFirstKey
parameter_list|()
block|{
name|sortedTable
operator|=
name|create
argument_list|(
literal|"foo"
argument_list|,
literal|1
argument_list|,
literal|'a'
argument_list|,
literal|"bar"
argument_list|,
literal|1
argument_list|,
literal|'b'
argument_list|,
literal|"foo"
argument_list|,
literal|3
argument_list|,
literal|'c'
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
literal|"bar"
argument_list|,
name|sortedTable
operator|.
name|rowMap
argument_list|()
operator|.
name|firstKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testRowMapLastKey ()
specifier|public
name|void
name|testRowMapLastKey
parameter_list|()
block|{
name|sortedTable
operator|=
name|create
argument_list|(
literal|"foo"
argument_list|,
literal|1
argument_list|,
literal|'a'
argument_list|,
literal|"bar"
argument_list|,
literal|1
argument_list|,
literal|'b'
argument_list|,
literal|"foo"
argument_list|,
literal|3
argument_list|,
literal|'c'
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
literal|"foo"
argument_list|,
name|sortedTable
operator|.
name|rowMap
argument_list|()
operator|.
name|lastKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testRowKeyMapHeadMap ()
specifier|public
name|void
name|testRowKeyMapHeadMap
parameter_list|()
block|{
name|sortedTable
operator|=
name|create
argument_list|(
literal|"foo"
argument_list|,
literal|1
argument_list|,
literal|'a'
argument_list|,
literal|"bar"
argument_list|,
literal|1
argument_list|,
literal|'b'
argument_list|,
literal|"foo"
argument_list|,
literal|3
argument_list|,
literal|'c'
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|Integer
argument_list|,
name|Character
argument_list|>
argument_list|>
name|map
init|=
name|sortedTable
operator|.
name|rowMap
argument_list|()
operator|.
name|headMap
argument_list|(
literal|"cat"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|map
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|1
argument_list|,
literal|'b'
argument_list|)
argument_list|,
name|map
operator|.
name|get
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|clear
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|map
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
name|sortedTable
operator|.
name|rowKeySet
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testRowKeyMapTailMap ()
specifier|public
name|void
name|testRowKeyMapTailMap
parameter_list|()
block|{
name|sortedTable
operator|=
name|create
argument_list|(
literal|"foo"
argument_list|,
literal|1
argument_list|,
literal|'a'
argument_list|,
literal|"bar"
argument_list|,
literal|1
argument_list|,
literal|'b'
argument_list|,
literal|"foo"
argument_list|,
literal|3
argument_list|,
literal|'c'
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|Integer
argument_list|,
name|Character
argument_list|>
argument_list|>
name|map
init|=
name|sortedTable
operator|.
name|rowMap
argument_list|()
operator|.
name|tailMap
argument_list|(
literal|"cat"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|map
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|1
argument_list|,
literal|'a'
argument_list|,
literal|3
argument_list|,
literal|'c'
argument_list|)
argument_list|,
name|map
operator|.
name|get
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|clear
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|map
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
literal|"bar"
argument_list|)
argument_list|,
name|sortedTable
operator|.
name|rowKeySet
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testRowKeyMapSubMap ()
specifier|public
name|void
name|testRowKeyMapSubMap
parameter_list|()
block|{
name|sortedTable
operator|=
name|create
argument_list|(
literal|"foo"
argument_list|,
literal|1
argument_list|,
literal|'a'
argument_list|,
literal|"bar"
argument_list|,
literal|1
argument_list|,
literal|'b'
argument_list|,
literal|"foo"
argument_list|,
literal|3
argument_list|,
literal|'c'
argument_list|,
literal|"dog"
argument_list|,
literal|2
argument_list|,
literal|'d'
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|Integer
argument_list|,
name|Character
argument_list|>
argument_list|>
name|map
init|=
name|sortedTable
operator|.
name|rowMap
argument_list|()
operator|.
name|subMap
argument_list|(
literal|"cat"
argument_list|,
literal|"egg"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|2
argument_list|,
literal|'d'
argument_list|)
argument_list|,
name|map
operator|.
name|get
argument_list|(
literal|"dog"
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|clear
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|map
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"bar"
argument_list|,
literal|"foo"
argument_list|)
argument_list|,
name|sortedTable
operator|.
name|rowKeySet
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testRowMapValuesAreSorted ()
specifier|public
name|void
name|testRowMapValuesAreSorted
parameter_list|()
block|{
name|sortedTable
operator|=
name|create
argument_list|(
literal|"foo"
argument_list|,
literal|1
argument_list|,
literal|'a'
argument_list|,
literal|"bar"
argument_list|,
literal|1
argument_list|,
literal|'b'
argument_list|,
literal|"foo"
argument_list|,
literal|3
argument_list|,
literal|'c'
argument_list|,
literal|"dog"
argument_list|,
literal|2
argument_list|,
literal|'d'
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sortedTable
operator|.
name|rowMap
argument_list|()
operator|.
name|get
argument_list|(
literal|"foo"
argument_list|)
operator|instanceof
name|SortedMap
argument_list|)
expr_stmt|;
block|}
DECL|method|testColumnKeySet_isSorted ()
specifier|public
name|void
name|testColumnKeySet_isSorted
parameter_list|()
block|{
name|table
operator|=
name|create
argument_list|(
literal|"a"
argument_list|,
literal|2
argument_list|,
literal|'X'
argument_list|,
literal|"a"
argument_list|,
literal|2
argument_list|,
literal|'X'
argument_list|,
literal|"b"
argument_list|,
literal|3
argument_list|,
literal|'X'
argument_list|,
literal|"b"
argument_list|,
literal|2
argument_list|,
literal|'X'
argument_list|,
literal|"c"
argument_list|,
literal|10
argument_list|,
literal|'X'
argument_list|,
literal|"c"
argument_list|,
literal|10
argument_list|,
literal|'X'
argument_list|,
literal|"c"
argument_list|,
literal|20
argument_list|,
literal|'X'
argument_list|,
literal|"d"
argument_list|,
literal|15
argument_list|,
literal|'X'
argument_list|,
literal|"d"
argument_list|,
literal|20
argument_list|,
literal|'X'
argument_list|,
literal|"d"
argument_list|,
literal|1
argument_list|,
literal|'X'
argument_list|,
literal|"e"
argument_list|,
literal|5
argument_list|,
literal|'X'
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[1, 2, 3, 5, 10, 15, 20]"
argument_list|,
name|table
operator|.
name|columnKeySet
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testColumnKeySet_isSortedWithRealComparator ()
specifier|public
name|void
name|testColumnKeySet_isSortedWithRealComparator
parameter_list|()
block|{
name|table
operator|=
name|create
argument_list|(
name|String
operator|.
name|CASE_INSENSITIVE_ORDER
argument_list|,
name|Ordering
operator|.
name|natural
argument_list|()
operator|.
name|reverse
argument_list|()
argument_list|,
literal|"a"
argument_list|,
literal|2
argument_list|,
literal|'X'
argument_list|,
literal|"a"
argument_list|,
literal|2
argument_list|,
literal|'X'
argument_list|,
literal|"b"
argument_list|,
literal|3
argument_list|,
literal|'X'
argument_list|,
literal|"b"
argument_list|,
literal|2
argument_list|,
literal|'X'
argument_list|,
literal|"c"
argument_list|,
literal|10
argument_list|,
literal|'X'
argument_list|,
literal|"c"
argument_list|,
literal|10
argument_list|,
literal|'X'
argument_list|,
literal|"c"
argument_list|,
literal|20
argument_list|,
literal|'X'
argument_list|,
literal|"d"
argument_list|,
literal|15
argument_list|,
literal|'X'
argument_list|,
literal|"d"
argument_list|,
literal|20
argument_list|,
literal|'X'
argument_list|,
literal|"d"
argument_list|,
literal|1
argument_list|,
literal|'X'
argument_list|,
literal|"e"
argument_list|,
literal|5
argument_list|,
literal|'X'
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[20, 15, 10, 5, 3, 2, 1]"
argument_list|,
name|table
operator|.
name|columnKeySet
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testColumnKeySet_empty ()
specifier|public
name|void
name|testColumnKeySet_empty
parameter_list|()
block|{
name|table
operator|=
name|create
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[]"
argument_list|,
name|table
operator|.
name|columnKeySet
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testColumnKeySet_oneRow ()
specifier|public
name|void
name|testColumnKeySet_oneRow
parameter_list|()
block|{
name|table
operator|=
name|create
argument_list|(
literal|"a"
argument_list|,
literal|2
argument_list|,
literal|'X'
argument_list|,
literal|"a"
argument_list|,
literal|1
argument_list|,
literal|'X'
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[1, 2]"
argument_list|,
name|table
operator|.
name|columnKeySet
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testColumnKeySet_oneColumn ()
specifier|public
name|void
name|testColumnKeySet_oneColumn
parameter_list|()
block|{
name|table
operator|=
name|create
argument_list|(
literal|"a"
argument_list|,
literal|1
argument_list|,
literal|'X'
argument_list|,
literal|"b"
argument_list|,
literal|1
argument_list|,
literal|'X'
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[1]"
argument_list|,
name|table
operator|.
name|columnKeySet
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testColumnKeySet_oneEntry ()
specifier|public
name|void
name|testColumnKeySet_oneEntry
parameter_list|()
block|{
name|table
operator|=
name|create
argument_list|(
literal|"a"
argument_list|,
literal|1
argument_list|,
literal|'X'
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[1]"
argument_list|,
name|table
operator|.
name|columnKeySet
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testRowEntrySetContains ()
specifier|public
name|void
name|testRowEntrySetContains
parameter_list|()
block|{
name|table
operator|=
name|sortedTable
operator|=
name|create
argument_list|(
literal|"a"
argument_list|,
literal|2
argument_list|,
literal|'X'
argument_list|,
literal|"a"
argument_list|,
literal|2
argument_list|,
literal|'X'
argument_list|,
literal|"b"
argument_list|,
literal|3
argument_list|,
literal|'X'
argument_list|,
literal|"b"
argument_list|,
literal|2
argument_list|,
literal|'X'
argument_list|,
literal|"c"
argument_list|,
literal|10
argument_list|,
literal|'X'
argument_list|,
literal|"c"
argument_list|,
literal|10
argument_list|,
literal|'X'
argument_list|,
literal|"c"
argument_list|,
literal|20
argument_list|,
literal|'X'
argument_list|,
literal|"d"
argument_list|,
literal|15
argument_list|,
literal|'X'
argument_list|,
literal|"d"
argument_list|,
literal|20
argument_list|,
literal|'X'
argument_list|,
literal|"d"
argument_list|,
literal|1
argument_list|,
literal|'X'
argument_list|,
literal|"e"
argument_list|,
literal|5
argument_list|,
literal|'X'
argument_list|)
expr_stmt|;
name|SortedMap
argument_list|<
name|Integer
argument_list|,
name|Character
argument_list|>
name|row
init|=
name|sortedTable
operator|.
name|row
argument_list|(
literal|"c"
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|Integer
argument_list|,
name|Character
argument_list|>
argument_list|>
name|entrySet
init|=
name|row
operator|.
name|entrySet
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|entrySet
operator|.
name|contains
argument_list|(
name|Maps
operator|.
name|immutableEntry
argument_list|(
literal|10
argument_list|,
literal|'X'
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|entrySet
operator|.
name|contains
argument_list|(
name|Maps
operator|.
name|immutableEntry
argument_list|(
literal|20
argument_list|,
literal|'X'
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|entrySet
operator|.
name|contains
argument_list|(
name|Maps
operator|.
name|immutableEntry
argument_list|(
literal|15
argument_list|,
literal|'X'
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|entrySet
operator|=
name|row
operator|.
name|tailMap
argument_list|(
literal|15
argument_list|)
operator|.
name|entrySet
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|entrySet
operator|.
name|contains
argument_list|(
name|Maps
operator|.
name|immutableEntry
argument_list|(
literal|10
argument_list|,
literal|'X'
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|entrySet
operator|.
name|contains
argument_list|(
name|Maps
operator|.
name|immutableEntry
argument_list|(
literal|20
argument_list|,
literal|'X'
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|entrySet
operator|.
name|contains
argument_list|(
name|Maps
operator|.
name|immutableEntry
argument_list|(
literal|15
argument_list|,
literal|'X'
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testRowEntrySetRemove ()
specifier|public
name|void
name|testRowEntrySetRemove
parameter_list|()
block|{
name|table
operator|=
name|sortedTable
operator|=
name|create
argument_list|(
literal|"a"
argument_list|,
literal|2
argument_list|,
literal|'X'
argument_list|,
literal|"a"
argument_list|,
literal|2
argument_list|,
literal|'X'
argument_list|,
literal|"b"
argument_list|,
literal|3
argument_list|,
literal|'X'
argument_list|,
literal|"b"
argument_list|,
literal|2
argument_list|,
literal|'X'
argument_list|,
literal|"c"
argument_list|,
literal|10
argument_list|,
literal|'X'
argument_list|,
literal|"c"
argument_list|,
literal|10
argument_list|,
literal|'X'
argument_list|,
literal|"c"
argument_list|,
literal|20
argument_list|,
literal|'X'
argument_list|,
literal|"d"
argument_list|,
literal|15
argument_list|,
literal|'X'
argument_list|,
literal|"d"
argument_list|,
literal|20
argument_list|,
literal|'X'
argument_list|,
literal|"d"
argument_list|,
literal|1
argument_list|,
literal|'X'
argument_list|,
literal|"e"
argument_list|,
literal|5
argument_list|,
literal|'X'
argument_list|)
expr_stmt|;
name|SortedMap
argument_list|<
name|Integer
argument_list|,
name|Character
argument_list|>
name|row
init|=
name|sortedTable
operator|.
name|row
argument_list|(
literal|"c"
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|Integer
argument_list|,
name|Character
argument_list|>
argument_list|>
name|entrySet
init|=
name|row
operator|.
name|tailMap
argument_list|(
literal|15
argument_list|)
operator|.
name|entrySet
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|entrySet
operator|.
name|remove
argument_list|(
name|Maps
operator|.
name|immutableEntry
argument_list|(
literal|10
argument_list|,
literal|'X'
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|entrySet
operator|.
name|remove
argument_list|(
name|Maps
operator|.
name|immutableEntry
argument_list|(
literal|20
argument_list|,
literal|'X'
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|entrySet
operator|.
name|remove
argument_list|(
name|Maps
operator|.
name|immutableEntry
argument_list|(
literal|15
argument_list|,
literal|'X'
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|entrySet
operator|=
name|row
operator|.
name|entrySet
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|entrySet
operator|.
name|remove
argument_list|(
name|Maps
operator|.
name|immutableEntry
argument_list|(
literal|10
argument_list|,
literal|'X'
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|entrySet
operator|.
name|remove
argument_list|(
name|Maps
operator|.
name|immutableEntry
argument_list|(
literal|20
argument_list|,
literal|'X'
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|entrySet
operator|.
name|remove
argument_list|(
name|Maps
operator|.
name|immutableEntry
argument_list|(
literal|15
argument_list|,
literal|'X'
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testRowSize ()
specifier|public
name|void
name|testRowSize
parameter_list|()
block|{
name|table
operator|=
name|sortedTable
operator|=
name|create
argument_list|(
literal|"a"
argument_list|,
literal|2
argument_list|,
literal|'X'
argument_list|,
literal|"a"
argument_list|,
literal|2
argument_list|,
literal|'X'
argument_list|,
literal|"b"
argument_list|,
literal|3
argument_list|,
literal|'X'
argument_list|,
literal|"b"
argument_list|,
literal|2
argument_list|,
literal|'X'
argument_list|,
literal|"c"
argument_list|,
literal|10
argument_list|,
literal|'X'
argument_list|,
literal|"c"
argument_list|,
literal|10
argument_list|,
literal|'X'
argument_list|,
literal|"c"
argument_list|,
literal|20
argument_list|,
literal|'X'
argument_list|,
literal|"d"
argument_list|,
literal|15
argument_list|,
literal|'X'
argument_list|,
literal|"d"
argument_list|,
literal|20
argument_list|,
literal|'X'
argument_list|,
literal|"d"
argument_list|,
literal|1
argument_list|,
literal|'X'
argument_list|,
literal|"e"
argument_list|,
literal|5
argument_list|,
literal|'X'
argument_list|)
expr_stmt|;
name|SortedMap
argument_list|<
name|Integer
argument_list|,
name|Character
argument_list|>
name|row
init|=
name|sortedTable
operator|.
name|row
argument_list|(
literal|"c"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|row
operator|.
name|size
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|row
operator|.
name|tailMap
argument_list|(
literal|15
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
DECL|method|testSubRowClearAndPut ()
specifier|public
name|void
name|testSubRowClearAndPut
parameter_list|()
block|{
name|table
operator|=
name|create
argument_list|(
literal|"foo"
argument_list|,
literal|1
argument_list|,
literal|'a'
argument_list|,
literal|"bar"
argument_list|,
literal|1
argument_list|,
literal|'b'
argument_list|,
literal|"foo"
argument_list|,
literal|3
argument_list|,
literal|'c'
argument_list|)
expr_stmt|;
name|SortedMap
argument_list|<
name|Integer
argument_list|,
name|Character
argument_list|>
name|row
init|=
operator|(
name|SortedMap
argument_list|<
name|Integer
argument_list|,
name|Character
argument_list|>
operator|)
name|table
operator|.
name|row
argument_list|(
literal|"foo"
argument_list|)
decl_stmt|;
name|SortedMap
argument_list|<
name|Integer
argument_list|,
name|Character
argument_list|>
name|subRow
init|=
name|row
operator|.
name|tailMap
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|1
argument_list|,
literal|'a'
argument_list|,
literal|3
argument_list|,
literal|'c'
argument_list|)
argument_list|,
name|row
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|3
argument_list|,
literal|'c'
argument_list|)
argument_list|,
name|subRow
argument_list|)
expr_stmt|;
name|table
operator|.
name|remove
argument_list|(
literal|"foo"
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|1
argument_list|,
literal|'a'
argument_list|)
argument_list|,
name|row
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|()
argument_list|,
name|subRow
argument_list|)
expr_stmt|;
name|table
operator|.
name|remove
argument_list|(
literal|"foo"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|()
argument_list|,
name|row
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|()
argument_list|,
name|subRow
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
literal|"foo"
argument_list|,
literal|2
argument_list|,
literal|'b'
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|2
argument_list|,
literal|'b'
argument_list|)
argument_list|,
name|row
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|2
argument_list|,
literal|'b'
argument_list|)
argument_list|,
name|subRow
argument_list|)
expr_stmt|;
name|row
operator|.
name|clear
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|()
argument_list|,
name|row
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|()
argument_list|,
name|subRow
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
literal|"foo"
argument_list|,
literal|5
argument_list|,
literal|'x'
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|5
argument_list|,
literal|'x'
argument_list|)
argument_list|,
name|row
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|5
argument_list|,
literal|'x'
argument_list|)
argument_list|,
name|subRow
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

