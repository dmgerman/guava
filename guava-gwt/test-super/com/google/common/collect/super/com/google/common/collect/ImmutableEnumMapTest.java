begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2012 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.collect
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|truth0
operator|.
name|Truth
operator|.
name|ASSERT
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtCompatible
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|AnEnum
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|Helpers
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|TestEnumMapGenerator
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_comment
comment|/**  * Tests for {@code ImmutableEnumMap}.  *  * @author Louis Wasserman  */
end_comment

begin_class
annotation|@
name|GwtCompatible
argument_list|(
name|emulated
operator|=
literal|true
argument_list|)
DECL|class|ImmutableEnumMapTest
specifier|public
class|class
name|ImmutableEnumMapTest
extends|extends
name|TestCase
block|{
DECL|class|ImmutableEnumMapGenerator
specifier|public
specifier|static
class|class
name|ImmutableEnumMapGenerator
extends|extends
name|TestEnumMapGenerator
block|{
annotation|@
name|Override
DECL|method|create (Entry<AnEnum, String>[] entries)
specifier|protected
name|Map
argument_list|<
name|AnEnum
argument_list|,
name|String
argument_list|>
name|create
parameter_list|(
name|Entry
argument_list|<
name|AnEnum
argument_list|,
name|String
argument_list|>
index|[]
name|entries
parameter_list|)
block|{
name|Map
argument_list|<
name|AnEnum
argument_list|,
name|String
argument_list|>
name|map
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|AnEnum
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|entries
control|)
block|{
name|map
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|Maps
operator|.
name|immutableEnumMap
argument_list|(
name|map
argument_list|)
return|;
block|}
block|}
DECL|method|testEmptyImmutableEnumMap ()
specifier|public
name|void
name|testEmptyImmutableEnumMap
parameter_list|()
block|{
name|ImmutableMap
argument_list|<
name|AnEnum
argument_list|,
name|String
argument_list|>
name|map
init|=
name|Maps
operator|.
name|immutableEnumMap
argument_list|(
name|ImmutableMap
operator|.
expr|<
name|AnEnum
argument_list|,
name|String
operator|>
name|of
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|()
argument_list|,
name|map
argument_list|)
expr_stmt|;
block|}
DECL|method|testImmutableEnumMapOrdering ()
specifier|public
name|void
name|testImmutableEnumMapOrdering
parameter_list|()
block|{
name|ImmutableMap
argument_list|<
name|AnEnum
argument_list|,
name|String
argument_list|>
name|map
init|=
name|Maps
operator|.
name|immutableEnumMap
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
name|AnEnum
operator|.
name|C
argument_list|,
literal|"c"
argument_list|,
name|AnEnum
operator|.
name|A
argument_list|,
literal|"a"
argument_list|,
name|AnEnum
operator|.
name|E
argument_list|,
literal|"e"
argument_list|)
argument_list|)
decl_stmt|;
name|ASSERT
operator|.
name|that
argument_list|(
name|map
operator|.
name|entrySet
argument_list|()
argument_list|)
operator|.
name|has
argument_list|()
operator|.
name|allOf
argument_list|(
name|Helpers
operator|.
name|mapEntry
argument_list|(
name|AnEnum
operator|.
name|A
argument_list|,
literal|"a"
argument_list|)
argument_list|,
name|Helpers
operator|.
name|mapEntry
argument_list|(
name|AnEnum
operator|.
name|C
argument_list|,
literal|"c"
argument_list|)
argument_list|,
name|Helpers
operator|.
name|mapEntry
argument_list|(
name|AnEnum
operator|.
name|E
argument_list|,
literal|"e"
argument_list|)
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

