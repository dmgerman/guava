begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2008 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.collect
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|truth0
operator|.
name|Truth
operator|.
name|ASSERT
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtCompatible
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableListMultimap
operator|.
name|Builder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|google
operator|.
name|TestStringListMultimapGenerator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|google
operator|.
name|UnmodifiableCollectionTests
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|testing
operator|.
name|EqualsTester
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_comment
comment|/**  * Tests for {@link ImmutableListMultimap}.  *  * @author Jared Levy  */
end_comment

begin_class
annotation|@
name|GwtCompatible
argument_list|(
name|emulated
operator|=
literal|true
argument_list|)
DECL|class|ImmutableListMultimapTest
specifier|public
class|class
name|ImmutableListMultimapTest
extends|extends
name|TestCase
block|{
DECL|class|ImmutableListMultimapGenerator
specifier|public
specifier|static
class|class
name|ImmutableListMultimapGenerator
extends|extends
name|TestStringListMultimapGenerator
block|{
annotation|@
name|Override
DECL|method|create (Entry<String, String>[] entries)
specifier|protected
name|ListMultimap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|create
parameter_list|(
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
index|[]
name|entries
parameter_list|)
block|{
name|ImmutableListMultimap
operator|.
name|Builder
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|builder
init|=
name|ImmutableListMultimap
operator|.
name|builder
argument_list|()
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|entries
control|)
block|{
name|builder
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
block|}
DECL|method|testBuilder_withImmutableEntry ()
specifier|public
name|void
name|testBuilder_withImmutableEntry
parameter_list|()
block|{
name|ImmutableListMultimap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|multimap
init|=
operator|new
name|Builder
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|()
operator|.
name|put
argument_list|(
name|Maps
operator|.
name|immutableEntry
argument_list|(
literal|"one"
argument_list|,
literal|1
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|1
argument_list|)
argument_list|,
name|multimap
operator|.
name|get
argument_list|(
literal|"one"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testBuilder_withImmutableEntryAndNullContents ()
specifier|public
name|void
name|testBuilder_withImmutableEntryAndNullContents
parameter_list|()
block|{
name|Builder
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|builder
init|=
operator|new
name|Builder
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
try|try
block|{
name|builder
operator|.
name|put
argument_list|(
name|Maps
operator|.
name|immutableEntry
argument_list|(
literal|"one"
argument_list|,
operator|(
name|Integer
operator|)
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|expected
parameter_list|)
block|{     }
try|try
block|{
name|builder
operator|.
name|put
argument_list|(
name|Maps
operator|.
name|immutableEntry
argument_list|(
operator|(
name|String
operator|)
literal|null
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|expected
parameter_list|)
block|{     }
block|}
DECL|class|StringHolder
specifier|private
specifier|static
class|class
name|StringHolder
block|{
DECL|field|string
name|String
name|string
decl_stmt|;
block|}
DECL|method|testBuilder_withMutableEntry ()
specifier|public
name|void
name|testBuilder_withMutableEntry
parameter_list|()
block|{
name|ImmutableListMultimap
operator|.
name|Builder
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|builder
init|=
operator|new
name|Builder
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|StringHolder
name|holder
init|=
operator|new
name|StringHolder
argument_list|()
decl_stmt|;
name|holder
operator|.
name|string
operator|=
literal|"one"
expr_stmt|;
name|Entry
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|entry
init|=
operator|new
name|AbstractMapEntry
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|getKey
parameter_list|()
block|{
return|return
name|holder
operator|.
name|string
return|;
block|}
annotation|@
name|Override
specifier|public
name|Integer
name|getValue
parameter_list|()
block|{
return|return
literal|1
return|;
block|}
block|}
decl_stmt|;
name|builder
operator|.
name|put
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|holder
operator|.
name|string
operator|=
literal|"two"
expr_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|1
argument_list|)
argument_list|,
name|builder
operator|.
name|build
argument_list|()
operator|.
name|get
argument_list|(
literal|"one"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testBuilderPutAllIterable ()
specifier|public
name|void
name|testBuilderPutAllIterable
parameter_list|()
block|{
name|ImmutableListMultimap
operator|.
name|Builder
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|builder
init|=
name|ImmutableListMultimap
operator|.
name|builder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|putAll
argument_list|(
literal|"foo"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|putAll
argument_list|(
literal|"bar"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|4
argument_list|,
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|putAll
argument_list|(
literal|"foo"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|6
argument_list|,
literal|7
argument_list|)
argument_list|)
expr_stmt|;
name|Multimap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|multimap
init|=
name|builder
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|6
argument_list|,
literal|7
argument_list|)
argument_list|,
name|multimap
operator|.
name|get
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|4
argument_list|,
literal|5
argument_list|)
argument_list|,
name|multimap
operator|.
name|get
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|7
argument_list|,
name|multimap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testBuilderPutAllVarargs ()
specifier|public
name|void
name|testBuilderPutAllVarargs
parameter_list|()
block|{
name|ImmutableListMultimap
operator|.
name|Builder
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|builder
init|=
name|ImmutableListMultimap
operator|.
name|builder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|putAll
argument_list|(
literal|"foo"
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|builder
operator|.
name|putAll
argument_list|(
literal|"bar"
argument_list|,
literal|4
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|builder
operator|.
name|putAll
argument_list|(
literal|"foo"
argument_list|,
literal|6
argument_list|,
literal|7
argument_list|)
expr_stmt|;
name|Multimap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|multimap
init|=
name|builder
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|6
argument_list|,
literal|7
argument_list|)
argument_list|,
name|multimap
operator|.
name|get
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|4
argument_list|,
literal|5
argument_list|)
argument_list|,
name|multimap
operator|.
name|get
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|7
argument_list|,
name|multimap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testBuilderPutAllMultimap ()
specifier|public
name|void
name|testBuilderPutAllMultimap
parameter_list|()
block|{
name|Multimap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|toPut
init|=
name|LinkedListMultimap
operator|.
name|create
argument_list|()
decl_stmt|;
name|toPut
operator|.
name|put
argument_list|(
literal|"foo"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|toPut
operator|.
name|put
argument_list|(
literal|"bar"
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|toPut
operator|.
name|put
argument_list|(
literal|"foo"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|toPut
operator|.
name|put
argument_list|(
literal|"foo"
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|Multimap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|moreToPut
init|=
name|LinkedListMultimap
operator|.
name|create
argument_list|()
decl_stmt|;
name|moreToPut
operator|.
name|put
argument_list|(
literal|"foo"
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|moreToPut
operator|.
name|put
argument_list|(
literal|"bar"
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|moreToPut
operator|.
name|put
argument_list|(
literal|"foo"
argument_list|,
literal|7
argument_list|)
expr_stmt|;
name|ImmutableListMultimap
operator|.
name|Builder
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|builder
init|=
name|ImmutableListMultimap
operator|.
name|builder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|putAll
argument_list|(
name|toPut
argument_list|)
expr_stmt|;
name|builder
operator|.
name|putAll
argument_list|(
name|moreToPut
argument_list|)
expr_stmt|;
name|Multimap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|multimap
init|=
name|builder
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|6
argument_list|,
literal|7
argument_list|)
argument_list|,
name|multimap
operator|.
name|get
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|4
argument_list|,
literal|5
argument_list|)
argument_list|,
name|multimap
operator|.
name|get
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|7
argument_list|,
name|multimap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testBuilderPutAllWithDuplicates ()
specifier|public
name|void
name|testBuilderPutAllWithDuplicates
parameter_list|()
block|{
name|ImmutableListMultimap
operator|.
name|Builder
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|builder
init|=
name|ImmutableListMultimap
operator|.
name|builder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|putAll
argument_list|(
literal|"foo"
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|builder
operator|.
name|putAll
argument_list|(
literal|"bar"
argument_list|,
literal|4
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|builder
operator|.
name|putAll
argument_list|(
literal|"foo"
argument_list|,
literal|1
argument_list|,
literal|6
argument_list|,
literal|7
argument_list|)
expr_stmt|;
name|ImmutableListMultimap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|multimap
init|=
name|builder
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|1
argument_list|,
literal|6
argument_list|,
literal|7
argument_list|)
argument_list|,
name|multimap
operator|.
name|get
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|4
argument_list|,
literal|5
argument_list|)
argument_list|,
name|multimap
operator|.
name|get
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|8
argument_list|,
name|multimap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testBuilderPutWithDuplicates ()
specifier|public
name|void
name|testBuilderPutWithDuplicates
parameter_list|()
block|{
name|ImmutableListMultimap
operator|.
name|Builder
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|builder
init|=
name|ImmutableListMultimap
operator|.
name|builder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|putAll
argument_list|(
literal|"foo"
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|builder
operator|.
name|putAll
argument_list|(
literal|"bar"
argument_list|,
literal|4
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|builder
operator|.
name|put
argument_list|(
literal|"foo"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|ImmutableListMultimap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|multimap
init|=
name|builder
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|1
argument_list|)
argument_list|,
name|multimap
operator|.
name|get
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|4
argument_list|,
literal|5
argument_list|)
argument_list|,
name|multimap
operator|.
name|get
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|multimap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testBuilderPutAllMultimapWithDuplicates ()
specifier|public
name|void
name|testBuilderPutAllMultimapWithDuplicates
parameter_list|()
block|{
name|Multimap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|toPut
init|=
name|LinkedListMultimap
operator|.
name|create
argument_list|()
decl_stmt|;
name|toPut
operator|.
name|put
argument_list|(
literal|"foo"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|toPut
operator|.
name|put
argument_list|(
literal|"bar"
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|toPut
operator|.
name|put
argument_list|(
literal|"foo"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|toPut
operator|.
name|put
argument_list|(
literal|"foo"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|toPut
operator|.
name|put
argument_list|(
literal|"bar"
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|Multimap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|moreToPut
init|=
name|LinkedListMultimap
operator|.
name|create
argument_list|()
decl_stmt|;
name|moreToPut
operator|.
name|put
argument_list|(
literal|"foo"
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|moreToPut
operator|.
name|put
argument_list|(
literal|"bar"
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|moreToPut
operator|.
name|put
argument_list|(
literal|"foo"
argument_list|,
literal|7
argument_list|)
expr_stmt|;
name|moreToPut
operator|.
name|put
argument_list|(
literal|"foo"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|ImmutableListMultimap
operator|.
name|Builder
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|builder
init|=
name|ImmutableListMultimap
operator|.
name|builder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|putAll
argument_list|(
name|toPut
argument_list|)
expr_stmt|;
name|builder
operator|.
name|putAll
argument_list|(
name|moreToPut
argument_list|)
expr_stmt|;
name|Multimap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|multimap
init|=
name|builder
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|,
literal|6
argument_list|,
literal|7
argument_list|,
literal|2
argument_list|)
argument_list|,
name|multimap
operator|.
name|get
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|4
argument_list|,
literal|5
argument_list|,
literal|4
argument_list|)
argument_list|,
name|multimap
operator|.
name|get
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|9
argument_list|,
name|multimap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testBuilderPutNullKey ()
specifier|public
name|void
name|testBuilderPutNullKey
parameter_list|()
block|{
name|Multimap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|toPut
init|=
name|LinkedListMultimap
operator|.
name|create
argument_list|()
decl_stmt|;
name|toPut
operator|.
name|put
argument_list|(
literal|"foo"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|ImmutableListMultimap
operator|.
name|Builder
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|builder
init|=
name|ImmutableListMultimap
operator|.
name|builder
argument_list|()
decl_stmt|;
try|try
block|{
name|builder
operator|.
name|put
argument_list|(
literal|null
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|expected
parameter_list|)
block|{}
try|try
block|{
name|builder
operator|.
name|putAll
argument_list|(
literal|null
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|expected
parameter_list|)
block|{}
try|try
block|{
name|builder
operator|.
name|putAll
argument_list|(
literal|null
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|expected
parameter_list|)
block|{}
try|try
block|{
name|builder
operator|.
name|putAll
argument_list|(
name|toPut
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|expected
parameter_list|)
block|{}
block|}
DECL|method|testBuilderPutNullValue ()
specifier|public
name|void
name|testBuilderPutNullValue
parameter_list|()
block|{
name|Multimap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|toPut
init|=
name|LinkedListMultimap
operator|.
name|create
argument_list|()
decl_stmt|;
name|toPut
operator|.
name|put
argument_list|(
literal|null
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|ImmutableListMultimap
operator|.
name|Builder
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|builder
init|=
name|ImmutableListMultimap
operator|.
name|builder
argument_list|()
decl_stmt|;
try|try
block|{
name|builder
operator|.
name|put
argument_list|(
literal|"foo"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|expected
parameter_list|)
block|{}
try|try
block|{
name|builder
operator|.
name|putAll
argument_list|(
literal|"foo"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|1
argument_list|,
literal|null
argument_list|,
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|expected
parameter_list|)
block|{}
try|try
block|{
name|builder
operator|.
name|putAll
argument_list|(
literal|"foo"
argument_list|,
literal|1
argument_list|,
literal|null
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|expected
parameter_list|)
block|{}
try|try
block|{
name|builder
operator|.
name|putAll
argument_list|(
name|toPut
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|expected
parameter_list|)
block|{}
block|}
DECL|method|testBuilderOrderKeysBy ()
specifier|public
name|void
name|testBuilderOrderKeysBy
parameter_list|()
block|{
name|ImmutableListMultimap
operator|.
name|Builder
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|builder
init|=
name|ImmutableListMultimap
operator|.
name|builder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|put
argument_list|(
literal|"b"
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|builder
operator|.
name|put
argument_list|(
literal|"d"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|builder
operator|.
name|put
argument_list|(
literal|"a"
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|builder
operator|.
name|orderKeysBy
argument_list|(
name|Collections
operator|.
name|reverseOrder
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|put
argument_list|(
literal|"c"
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|builder
operator|.
name|put
argument_list|(
literal|"a"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|builder
operator|.
name|put
argument_list|(
literal|"b"
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|ImmutableListMultimap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|multimap
init|=
name|builder
operator|.
name|build
argument_list|()
decl_stmt|;
name|ASSERT
operator|.
name|that
argument_list|(
name|multimap
operator|.
name|keySet
argument_list|()
argument_list|)
operator|.
name|has
argument_list|()
operator|.
name|exactly
argument_list|(
literal|"d"
argument_list|,
literal|"c"
argument_list|,
literal|"b"
argument_list|,
literal|"a"
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
name|ASSERT
operator|.
name|that
argument_list|(
name|multimap
operator|.
name|values
argument_list|()
argument_list|)
operator|.
name|has
argument_list|()
operator|.
name|exactly
argument_list|(
literal|2
argument_list|,
literal|4
argument_list|,
literal|3
argument_list|,
literal|6
argument_list|,
literal|5
argument_list|,
literal|2
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
name|ASSERT
operator|.
name|that
argument_list|(
name|multimap
operator|.
name|get
argument_list|(
literal|"a"
argument_list|)
argument_list|)
operator|.
name|has
argument_list|()
operator|.
name|exactly
argument_list|(
literal|5
argument_list|,
literal|2
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
name|ASSERT
operator|.
name|that
argument_list|(
name|multimap
operator|.
name|get
argument_list|(
literal|"b"
argument_list|)
argument_list|)
operator|.
name|has
argument_list|()
operator|.
name|exactly
argument_list|(
literal|3
argument_list|,
literal|6
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
block|}
DECL|method|testBuilderOrderKeysByDuplicates ()
specifier|public
name|void
name|testBuilderOrderKeysByDuplicates
parameter_list|()
block|{
name|ImmutableListMultimap
operator|.
name|Builder
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|builder
init|=
name|ImmutableListMultimap
operator|.
name|builder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|put
argument_list|(
literal|"bb"
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|builder
operator|.
name|put
argument_list|(
literal|"d"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|builder
operator|.
name|put
argument_list|(
literal|"a"
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|builder
operator|.
name|orderKeysBy
argument_list|(
operator|new
name|Ordering
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|String
name|left
parameter_list|,
name|String
name|right
parameter_list|)
block|{
return|return
name|left
operator|.
name|length
argument_list|()
operator|-
name|right
operator|.
name|length
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|builder
operator|.
name|put
argument_list|(
literal|"cc"
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|builder
operator|.
name|put
argument_list|(
literal|"a"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|builder
operator|.
name|put
argument_list|(
literal|"bb"
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|ImmutableListMultimap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|multimap
init|=
name|builder
operator|.
name|build
argument_list|()
decl_stmt|;
name|ASSERT
operator|.
name|that
argument_list|(
name|multimap
operator|.
name|keySet
argument_list|()
argument_list|)
operator|.
name|has
argument_list|()
operator|.
name|exactly
argument_list|(
literal|"d"
argument_list|,
literal|"a"
argument_list|,
literal|"bb"
argument_list|,
literal|"cc"
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
name|ASSERT
operator|.
name|that
argument_list|(
name|multimap
operator|.
name|values
argument_list|()
argument_list|)
operator|.
name|has
argument_list|()
operator|.
name|exactly
argument_list|(
literal|2
argument_list|,
literal|5
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|6
argument_list|,
literal|4
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
name|ASSERT
operator|.
name|that
argument_list|(
name|multimap
operator|.
name|get
argument_list|(
literal|"a"
argument_list|)
argument_list|)
operator|.
name|has
argument_list|()
operator|.
name|exactly
argument_list|(
literal|5
argument_list|,
literal|2
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
name|ASSERT
operator|.
name|that
argument_list|(
name|multimap
operator|.
name|get
argument_list|(
literal|"bb"
argument_list|)
argument_list|)
operator|.
name|has
argument_list|()
operator|.
name|exactly
argument_list|(
literal|3
argument_list|,
literal|6
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
block|}
DECL|method|testBuilderOrderValuesBy ()
specifier|public
name|void
name|testBuilderOrderValuesBy
parameter_list|()
block|{
name|ImmutableListMultimap
operator|.
name|Builder
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|builder
init|=
name|ImmutableListMultimap
operator|.
name|builder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|put
argument_list|(
literal|"b"
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|builder
operator|.
name|put
argument_list|(
literal|"d"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|builder
operator|.
name|put
argument_list|(
literal|"a"
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|builder
operator|.
name|orderValuesBy
argument_list|(
name|Collections
operator|.
name|reverseOrder
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|put
argument_list|(
literal|"c"
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|builder
operator|.
name|put
argument_list|(
literal|"a"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|builder
operator|.
name|put
argument_list|(
literal|"b"
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|ImmutableListMultimap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|multimap
init|=
name|builder
operator|.
name|build
argument_list|()
decl_stmt|;
name|ASSERT
operator|.
name|that
argument_list|(
name|multimap
operator|.
name|keySet
argument_list|()
argument_list|)
operator|.
name|has
argument_list|()
operator|.
name|exactly
argument_list|(
literal|"b"
argument_list|,
literal|"d"
argument_list|,
literal|"a"
argument_list|,
literal|"c"
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
name|ASSERT
operator|.
name|that
argument_list|(
name|multimap
operator|.
name|values
argument_list|()
argument_list|)
operator|.
name|has
argument_list|()
operator|.
name|exactly
argument_list|(
literal|6
argument_list|,
literal|3
argument_list|,
literal|2
argument_list|,
literal|5
argument_list|,
literal|2
argument_list|,
literal|4
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
name|ASSERT
operator|.
name|that
argument_list|(
name|multimap
operator|.
name|get
argument_list|(
literal|"a"
argument_list|)
argument_list|)
operator|.
name|has
argument_list|()
operator|.
name|exactly
argument_list|(
literal|5
argument_list|,
literal|2
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
name|ASSERT
operator|.
name|that
argument_list|(
name|multimap
operator|.
name|get
argument_list|(
literal|"b"
argument_list|)
argument_list|)
operator|.
name|has
argument_list|()
operator|.
name|exactly
argument_list|(
literal|6
argument_list|,
literal|3
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
block|}
DECL|method|testBuilderOrderKeysAndValuesBy ()
specifier|public
name|void
name|testBuilderOrderKeysAndValuesBy
parameter_list|()
block|{
name|ImmutableListMultimap
operator|.
name|Builder
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|builder
init|=
name|ImmutableListMultimap
operator|.
name|builder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|put
argument_list|(
literal|"b"
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|builder
operator|.
name|put
argument_list|(
literal|"d"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|builder
operator|.
name|put
argument_list|(
literal|"a"
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|builder
operator|.
name|orderKeysBy
argument_list|(
name|Collections
operator|.
name|reverseOrder
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|orderValuesBy
argument_list|(
name|Collections
operator|.
name|reverseOrder
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|put
argument_list|(
literal|"c"
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|builder
operator|.
name|put
argument_list|(
literal|"a"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|builder
operator|.
name|put
argument_list|(
literal|"b"
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|ImmutableListMultimap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|multimap
init|=
name|builder
operator|.
name|build
argument_list|()
decl_stmt|;
name|ASSERT
operator|.
name|that
argument_list|(
name|multimap
operator|.
name|keySet
argument_list|()
argument_list|)
operator|.
name|has
argument_list|()
operator|.
name|exactly
argument_list|(
literal|"d"
argument_list|,
literal|"c"
argument_list|,
literal|"b"
argument_list|,
literal|"a"
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
name|ASSERT
operator|.
name|that
argument_list|(
name|multimap
operator|.
name|values
argument_list|()
argument_list|)
operator|.
name|has
argument_list|()
operator|.
name|exactly
argument_list|(
literal|2
argument_list|,
literal|4
argument_list|,
literal|6
argument_list|,
literal|3
argument_list|,
literal|5
argument_list|,
literal|2
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
name|ASSERT
operator|.
name|that
argument_list|(
name|multimap
operator|.
name|get
argument_list|(
literal|"a"
argument_list|)
argument_list|)
operator|.
name|has
argument_list|()
operator|.
name|exactly
argument_list|(
literal|5
argument_list|,
literal|2
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
name|ASSERT
operator|.
name|that
argument_list|(
name|multimap
operator|.
name|get
argument_list|(
literal|"b"
argument_list|)
argument_list|)
operator|.
name|has
argument_list|()
operator|.
name|exactly
argument_list|(
literal|6
argument_list|,
literal|3
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
block|}
DECL|method|testCopyOf ()
specifier|public
name|void
name|testCopyOf
parameter_list|()
block|{
name|ArrayListMultimap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|input
init|=
name|ArrayListMultimap
operator|.
name|create
argument_list|()
decl_stmt|;
name|input
operator|.
name|put
argument_list|(
literal|"foo"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|input
operator|.
name|put
argument_list|(
literal|"bar"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|input
operator|.
name|put
argument_list|(
literal|"foo"
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|Multimap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|multimap
init|=
name|ImmutableListMultimap
operator|.
name|copyOf
argument_list|(
name|input
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|multimap
argument_list|,
name|input
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|input
argument_list|,
name|multimap
argument_list|)
expr_stmt|;
block|}
DECL|method|testCopyOfWithDuplicates ()
specifier|public
name|void
name|testCopyOfWithDuplicates
parameter_list|()
block|{
name|ArrayListMultimap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|input
init|=
name|ArrayListMultimap
operator|.
name|create
argument_list|()
decl_stmt|;
name|input
operator|.
name|put
argument_list|(
literal|"foo"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|input
operator|.
name|put
argument_list|(
literal|"bar"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|input
operator|.
name|put
argument_list|(
literal|"foo"
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|input
operator|.
name|put
argument_list|(
literal|"foo"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|Multimap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|multimap
init|=
name|ImmutableListMultimap
operator|.
name|copyOf
argument_list|(
name|input
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|multimap
argument_list|,
name|input
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|input
argument_list|,
name|multimap
argument_list|)
expr_stmt|;
block|}
DECL|method|testCopyOfEmpty ()
specifier|public
name|void
name|testCopyOfEmpty
parameter_list|()
block|{
name|ArrayListMultimap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|input
init|=
name|ArrayListMultimap
operator|.
name|create
argument_list|()
decl_stmt|;
name|Multimap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|multimap
init|=
name|ImmutableListMultimap
operator|.
name|copyOf
argument_list|(
name|input
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|multimap
argument_list|,
name|input
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|input
argument_list|,
name|multimap
argument_list|)
expr_stmt|;
block|}
DECL|method|testCopyOfImmutableListMultimap ()
specifier|public
name|void
name|testCopyOfImmutableListMultimap
parameter_list|()
block|{
name|Multimap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|multimap
init|=
name|createMultimap
argument_list|()
decl_stmt|;
name|assertSame
argument_list|(
name|multimap
argument_list|,
name|ImmutableListMultimap
operator|.
name|copyOf
argument_list|(
name|multimap
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testCopyOfNullKey ()
specifier|public
name|void
name|testCopyOfNullKey
parameter_list|()
block|{
name|ArrayListMultimap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|input
init|=
name|ArrayListMultimap
operator|.
name|create
argument_list|()
decl_stmt|;
name|input
operator|.
name|put
argument_list|(
literal|null
argument_list|,
literal|1
argument_list|)
expr_stmt|;
try|try
block|{
name|ImmutableListMultimap
operator|.
name|copyOf
argument_list|(
name|input
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|expected
parameter_list|)
block|{}
block|}
DECL|method|testCopyOfNullValue ()
specifier|public
name|void
name|testCopyOfNullValue
parameter_list|()
block|{
name|ArrayListMultimap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|input
init|=
name|ArrayListMultimap
operator|.
name|create
argument_list|()
decl_stmt|;
name|input
operator|.
name|putAll
argument_list|(
literal|"foo"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|1
argument_list|,
literal|null
argument_list|,
literal|3
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|ImmutableListMultimap
operator|.
name|copyOf
argument_list|(
name|input
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|expected
parameter_list|)
block|{}
block|}
DECL|method|testEmptyMultimapReads ()
specifier|public
name|void
name|testEmptyMultimapReads
parameter_list|()
block|{
name|Multimap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|multimap
init|=
name|ImmutableListMultimap
operator|.
name|of
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|multimap
operator|.
name|containsKey
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|multimap
operator|.
name|containsValue
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|multimap
operator|.
name|containsEntry
argument_list|(
literal|"foo"
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|multimap
operator|.
name|entries
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|multimap
operator|.
name|equals
argument_list|(
name|ArrayListMultimap
operator|.
name|create
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
name|multimap
operator|.
name|get
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|multimap
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|multimap
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|HashMultiset
operator|.
name|create
argument_list|()
argument_list|,
name|multimap
operator|.
name|keys
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|emptySet
argument_list|()
argument_list|,
name|multimap
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|multimap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|multimap
operator|.
name|values
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"{}"
argument_list|,
name|multimap
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testEmptyMultimapWrites ()
specifier|public
name|void
name|testEmptyMultimapWrites
parameter_list|()
block|{
name|Multimap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|multimap
init|=
name|ImmutableListMultimap
operator|.
name|of
argument_list|()
decl_stmt|;
name|UnmodifiableCollectionTests
operator|.
name|assertMultimapIsUnmodifiable
argument_list|(
name|multimap
argument_list|,
literal|"foo"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
DECL|method|createMultimap ()
specifier|private
name|Multimap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|createMultimap
parameter_list|()
block|{
return|return
name|ImmutableListMultimap
operator|.
expr|<
name|String
operator|,
name|Integer
operator|>
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"foo"
argument_list|,
literal|1
argument_list|)
operator|.
name|put
argument_list|(
literal|"bar"
argument_list|,
literal|2
argument_list|)
operator|.
name|put
argument_list|(
literal|"foo"
argument_list|,
literal|3
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|testMultimapReads ()
specifier|public
name|void
name|testMultimapReads
parameter_list|()
block|{
name|Multimap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|multimap
init|=
name|createMultimap
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|multimap
operator|.
name|containsKey
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|multimap
operator|.
name|containsKey
argument_list|(
literal|"cat"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|multimap
operator|.
name|containsValue
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|multimap
operator|.
name|containsValue
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|multimap
operator|.
name|containsEntry
argument_list|(
literal|"foo"
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|multimap
operator|.
name|containsEntry
argument_list|(
literal|"cat"
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|multimap
operator|.
name|containsEntry
argument_list|(
literal|"foo"
argument_list|,
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|multimap
operator|.
name|entries
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|multimap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|multimap
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"{foo=[1, 3], bar=[2]}"
argument_list|,
name|multimap
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testMultimapWrites ()
specifier|public
name|void
name|testMultimapWrites
parameter_list|()
block|{
name|Multimap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|multimap
init|=
name|createMultimap
argument_list|()
decl_stmt|;
name|UnmodifiableCollectionTests
operator|.
name|assertMultimapIsUnmodifiable
argument_list|(
name|multimap
argument_list|,
literal|"bar"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
DECL|method|testMultimapEquals ()
specifier|public
name|void
name|testMultimapEquals
parameter_list|()
block|{
name|Multimap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|multimap
init|=
name|createMultimap
argument_list|()
decl_stmt|;
name|Multimap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|arrayListMultimap
init|=
name|ArrayListMultimap
operator|.
name|create
argument_list|()
decl_stmt|;
name|arrayListMultimap
operator|.
name|putAll
argument_list|(
literal|"foo"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|1
argument_list|,
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|arrayListMultimap
operator|.
name|put
argument_list|(
literal|"bar"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
operator|new
name|EqualsTester
argument_list|()
operator|.
name|addEqualityGroup
argument_list|(
name|multimap
argument_list|,
name|createMultimap
argument_list|()
argument_list|,
name|arrayListMultimap
argument_list|,
name|ImmutableListMultimap
operator|.
expr|<
name|String
argument_list|,
name|Integer
operator|>
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"bar"
argument_list|,
literal|2
argument_list|)
operator|.
name|put
argument_list|(
literal|"foo"
argument_list|,
literal|1
argument_list|)
operator|.
name|put
argument_list|(
literal|"foo"
argument_list|,
literal|3
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|addEqualityGroup
argument_list|(
name|ImmutableListMultimap
operator|.
expr|<
name|String
argument_list|,
name|Integer
operator|>
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"bar"
argument_list|,
literal|2
argument_list|)
operator|.
name|put
argument_list|(
literal|"foo"
argument_list|,
literal|3
argument_list|)
operator|.
name|put
argument_list|(
literal|"foo"
argument_list|,
literal|1
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|addEqualityGroup
argument_list|(
name|ImmutableListMultimap
operator|.
expr|<
name|String
argument_list|,
name|Integer
operator|>
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"foo"
argument_list|,
literal|2
argument_list|)
operator|.
name|put
argument_list|(
literal|"foo"
argument_list|,
literal|3
argument_list|)
operator|.
name|put
argument_list|(
literal|"foo"
argument_list|,
literal|1
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|addEqualityGroup
argument_list|(
name|ImmutableListMultimap
operator|.
expr|<
name|String
argument_list|,
name|Integer
operator|>
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"bar"
argument_list|,
literal|2
argument_list|)
operator|.
name|put
argument_list|(
literal|"foo"
argument_list|,
literal|3
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|testEquals
argument_list|()
expr_stmt|;
block|}
DECL|method|testOf ()
specifier|public
name|void
name|testOf
parameter_list|()
block|{
name|assertMultimapEquals
argument_list|(
name|ImmutableListMultimap
operator|.
name|of
argument_list|(
literal|"one"
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|"one"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertMultimapEquals
argument_list|(
name|ImmutableListMultimap
operator|.
name|of
argument_list|(
literal|"one"
argument_list|,
literal|1
argument_list|,
literal|"two"
argument_list|,
literal|2
argument_list|)
argument_list|,
literal|"one"
argument_list|,
literal|1
argument_list|,
literal|"two"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertMultimapEquals
argument_list|(
name|ImmutableListMultimap
operator|.
name|of
argument_list|(
literal|"one"
argument_list|,
literal|1
argument_list|,
literal|"two"
argument_list|,
literal|2
argument_list|,
literal|"three"
argument_list|,
literal|3
argument_list|)
argument_list|,
literal|"one"
argument_list|,
literal|1
argument_list|,
literal|"two"
argument_list|,
literal|2
argument_list|,
literal|"three"
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|assertMultimapEquals
argument_list|(
name|ImmutableListMultimap
operator|.
name|of
argument_list|(
literal|"one"
argument_list|,
literal|1
argument_list|,
literal|"two"
argument_list|,
literal|2
argument_list|,
literal|"three"
argument_list|,
literal|3
argument_list|,
literal|"four"
argument_list|,
literal|4
argument_list|)
argument_list|,
literal|"one"
argument_list|,
literal|1
argument_list|,
literal|"two"
argument_list|,
literal|2
argument_list|,
literal|"three"
argument_list|,
literal|3
argument_list|,
literal|"four"
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|assertMultimapEquals
argument_list|(
name|ImmutableListMultimap
operator|.
name|of
argument_list|(
literal|"one"
argument_list|,
literal|1
argument_list|,
literal|"two"
argument_list|,
literal|2
argument_list|,
literal|"three"
argument_list|,
literal|3
argument_list|,
literal|"four"
argument_list|,
literal|4
argument_list|,
literal|"five"
argument_list|,
literal|5
argument_list|)
argument_list|,
literal|"one"
argument_list|,
literal|1
argument_list|,
literal|"two"
argument_list|,
literal|2
argument_list|,
literal|"three"
argument_list|,
literal|3
argument_list|,
literal|"four"
argument_list|,
literal|4
argument_list|,
literal|"five"
argument_list|,
literal|5
argument_list|)
expr_stmt|;
block|}
DECL|method|testInverse ()
specifier|public
name|void
name|testInverse
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|ImmutableListMultimap
operator|.
expr|<
name|Integer
argument_list|,
name|String
operator|>
name|of
argument_list|()
argument_list|,
name|ImmutableListMultimap
operator|.
expr|<
name|String
argument_list|,
name|Integer
operator|>
name|of
argument_list|()
operator|.
name|inverse
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableListMultimap
operator|.
name|of
argument_list|(
literal|1
argument_list|,
literal|"one"
argument_list|)
argument_list|,
name|ImmutableListMultimap
operator|.
name|of
argument_list|(
literal|"one"
argument_list|,
literal|1
argument_list|)
operator|.
name|inverse
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableListMultimap
operator|.
name|of
argument_list|(
literal|1
argument_list|,
literal|"one"
argument_list|,
literal|2
argument_list|,
literal|"two"
argument_list|)
argument_list|,
name|ImmutableListMultimap
operator|.
name|of
argument_list|(
literal|"one"
argument_list|,
literal|1
argument_list|,
literal|"two"
argument_list|,
literal|2
argument_list|)
operator|.
name|inverse
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableListMultimap
operator|.
name|of
argument_list|(
literal|"of"
argument_list|,
literal|'o'
argument_list|,
literal|"of"
argument_list|,
literal|'f'
argument_list|,
literal|"to"
argument_list|,
literal|'t'
argument_list|,
literal|"to"
argument_list|,
literal|'o'
argument_list|)
operator|.
name|inverse
argument_list|()
argument_list|,
name|ImmutableListMultimap
operator|.
name|of
argument_list|(
literal|'o'
argument_list|,
literal|"of"
argument_list|,
literal|'f'
argument_list|,
literal|"of"
argument_list|,
literal|'t'
argument_list|,
literal|"to"
argument_list|,
literal|'o'
argument_list|,
literal|"to"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableListMultimap
operator|.
name|of
argument_list|(
literal|'f'
argument_list|,
literal|"foo"
argument_list|,
literal|'o'
argument_list|,
literal|"foo"
argument_list|,
literal|'o'
argument_list|,
literal|"foo"
argument_list|)
argument_list|,
name|ImmutableListMultimap
operator|.
name|of
argument_list|(
literal|"foo"
argument_list|,
literal|'f'
argument_list|,
literal|"foo"
argument_list|,
literal|'o'
argument_list|,
literal|"foo"
argument_list|,
literal|'o'
argument_list|)
operator|.
name|inverse
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testInverseMinimizesWork ()
specifier|public
name|void
name|testInverseMinimizesWork
parameter_list|()
block|{
name|ImmutableListMultimap
argument_list|<
name|String
argument_list|,
name|Character
argument_list|>
name|multimap
init|=
name|ImmutableListMultimap
operator|.
expr|<
name|String
decl_stmt|,
name|Character
decl|>
name|builder
argument_list|()
decl|.
name|put
argument_list|(
literal|"foo"
argument_list|,
literal|'f'
argument_list|)
decl|.
name|put
argument_list|(
literal|"foo"
argument_list|,
literal|'o'
argument_list|)
decl|.
name|put
argument_list|(
literal|"foo"
argument_list|,
literal|'o'
argument_list|)
decl|.
name|put
argument_list|(
literal|"poo"
argument_list|,
literal|'p'
argument_list|)
decl|.
name|put
argument_list|(
literal|"poo"
argument_list|,
literal|'o'
argument_list|)
decl|.
name|put
argument_list|(
literal|"poo"
argument_list|,
literal|'o'
argument_list|)
decl|.
name|build
argument_list|()
decl_stmt|;
name|assertSame
argument_list|(
name|multimap
operator|.
name|inverse
argument_list|()
argument_list|,
name|multimap
operator|.
name|inverse
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|multimap
argument_list|,
name|multimap
operator|.
name|inverse
argument_list|()
operator|.
name|inverse
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|assertMultimapEquals (Multimap<K, V> multimap, Object... alternatingKeysAndValues)
specifier|private
specifier|static
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
name|void
name|assertMultimapEquals
parameter_list|(
name|Multimap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|multimap
parameter_list|,
name|Object
modifier|...
name|alternatingKeysAndValues
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|multimap
operator|.
name|size
argument_list|()
argument_list|,
name|alternatingKeysAndValues
operator|.
name|length
operator|/
literal|2
argument_list|)
expr_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|entry
range|:
name|multimap
operator|.
name|entries
argument_list|()
control|)
block|{
name|assertEquals
argument_list|(
name|alternatingKeysAndValues
index|[
name|i
operator|++
index|]
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|alternatingKeysAndValues
index|[
name|i
operator|++
index|]
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

