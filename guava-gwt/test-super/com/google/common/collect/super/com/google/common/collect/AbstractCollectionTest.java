begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2007 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.collect
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
package|;
end_package

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Arrays
operator|.
name|asList
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|truth0
operator|.
name|Truth
operator|.
name|ASSERT
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtCompatible
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_comment
comment|/**  * Common tests for a {@code Collection}.  *  * @author Kevin Bourrillion  * @author Mike Bostock  */
end_comment

begin_class
annotation|@
name|GwtCompatible
argument_list|(
name|emulated
operator|=
literal|true
argument_list|)
DECL|class|AbstractCollectionTest
specifier|public
specifier|abstract
class|class
name|AbstractCollectionTest
extends|extends
name|TestCase
block|{
DECL|method|create ()
specifier|protected
specifier|abstract
parameter_list|<
name|E
parameter_list|>
name|Collection
argument_list|<
name|E
argument_list|>
name|create
parameter_list|()
function_decl|;
DECL|field|c
specifier|protected
name|Collection
argument_list|<
name|String
argument_list|>
name|c
decl_stmt|;
comment|// public for GWT
DECL|method|setUp ()
annotation|@
name|Override
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|c
operator|=
name|create
argument_list|()
expr_stmt|;
block|}
DECL|method|testIsEmptyYes ()
specifier|public
name|void
name|testIsEmptyYes
parameter_list|()
block|{
name|assertTrue
argument_list|(
name|c
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testIsEmptyNo ()
specifier|public
name|void
name|testIsEmptyNo
parameter_list|()
block|{
name|c
operator|.
name|add
argument_list|(
literal|"a"
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|c
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testAddOne ()
specifier|public
name|void
name|testAddOne
parameter_list|()
block|{
name|assertTrue
argument_list|(
name|c
operator|.
name|add
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|assertContents
argument_list|(
literal|"a"
argument_list|)
expr_stmt|;
block|}
DECL|method|testAddSeveralTimes ()
specifier|public
name|void
name|testAddSeveralTimes
parameter_list|()
block|{
name|assertTrue
argument_list|(
name|c
operator|.
name|add
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|c
operator|.
name|add
argument_list|(
literal|"b"
argument_list|)
argument_list|)
expr_stmt|;
name|c
operator|.
name|add
argument_list|(
literal|"a"
argument_list|)
expr_stmt|;
name|c
operator|.
name|add
argument_list|(
literal|"b"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|c
operator|.
name|contains
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|c
operator|.
name|contains
argument_list|(
literal|"b"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testRemoveOneFromNoneStandard ()
specifier|public
name|void
name|testRemoveOneFromNoneStandard
parameter_list|()
block|{
name|assertFalse
argument_list|(
name|c
operator|.
name|remove
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|assertContents
argument_list|()
expr_stmt|;
block|}
DECL|method|testRemoveOneFromOneStandard ()
specifier|public
name|void
name|testRemoveOneFromOneStandard
parameter_list|()
block|{
name|c
operator|.
name|add
argument_list|(
literal|"a"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|c
operator|.
name|remove
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|assertContents
argument_list|()
expr_stmt|;
block|}
DECL|method|testContainsNo ()
specifier|public
name|void
name|testContainsNo
parameter_list|()
block|{
name|c
operator|.
name|add
argument_list|(
literal|"a"
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|c
operator|.
name|contains
argument_list|(
literal|"b"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testContainsOne ()
specifier|public
name|void
name|testContainsOne
parameter_list|()
block|{
name|c
operator|.
name|add
argument_list|(
literal|"a"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|c
operator|.
name|contains
argument_list|(
operator|new
name|String
argument_list|(
literal|"a"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testContainsAfterRemoval ()
specifier|public
name|void
name|testContainsAfterRemoval
parameter_list|()
block|{
name|c
operator|.
name|add
argument_list|(
literal|"a"
argument_list|)
expr_stmt|;
name|c
operator|.
name|remove
argument_list|(
literal|"a"
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|c
operator|.
name|contains
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testContainsAllVacuous ()
specifier|public
name|void
name|testContainsAllVacuous
parameter_list|()
block|{
name|assertTrue
argument_list|(
name|c
operator|.
name|containsAll
argument_list|(
name|Collections
operator|.
name|emptySet
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testRemoveAllVacuous ()
specifier|public
name|void
name|testRemoveAllVacuous
parameter_list|()
block|{
name|assertFalse
argument_list|(
name|c
operator|.
name|removeAll
argument_list|(
name|Collections
operator|.
name|emptySet
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testRetainAllVacuous ()
specifier|public
name|void
name|testRetainAllVacuous
parameter_list|()
block|{
name|assertFalse
argument_list|(
name|c
operator|.
name|retainAll
argument_list|(
name|asList
argument_list|(
literal|"a"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertContents
argument_list|()
expr_stmt|;
block|}
DECL|method|testRetainAllOfNothing ()
specifier|public
name|void
name|testRetainAllOfNothing
parameter_list|()
block|{
name|c
operator|.
name|add
argument_list|(
literal|"a"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|c
operator|.
name|retainAll
argument_list|(
name|Collections
operator|.
name|emptySet
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertContents
argument_list|()
expr_stmt|;
block|}
DECL|method|testClearNothing ()
specifier|public
name|void
name|testClearNothing
parameter_list|()
block|{
name|c
operator|.
name|clear
argument_list|()
expr_stmt|;
name|assertContents
argument_list|()
expr_stmt|;
block|}
DECL|method|testClear ()
specifier|public
name|void
name|testClear
parameter_list|()
block|{
name|c
operator|=
name|createSample
argument_list|()
expr_stmt|;
name|c
operator|.
name|clear
argument_list|()
expr_stmt|;
name|assertContents
argument_list|()
expr_stmt|;
block|}
DECL|method|testEqualsNo ()
specifier|public
name|void
name|testEqualsNo
parameter_list|()
block|{
name|c
operator|.
name|add
argument_list|(
literal|"a"
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|String
argument_list|>
name|c2
init|=
name|create
argument_list|()
decl_stmt|;
name|c2
operator|.
name|add
argument_list|(
literal|"b"
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|c
operator|.
name|equals
argument_list|(
name|c2
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testEqualsYes ()
specifier|public
name|void
name|testEqualsYes
parameter_list|()
block|{
name|c
operator|.
name|add
argument_list|(
literal|"a"
argument_list|)
expr_stmt|;
name|c
operator|.
name|add
argument_list|(
literal|"b"
argument_list|)
expr_stmt|;
name|c
operator|.
name|add
argument_list|(
literal|"b"
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|String
argument_list|>
name|c2
init|=
name|create
argument_list|()
decl_stmt|;
name|c2
operator|.
name|add
argument_list|(
literal|"a"
argument_list|)
expr_stmt|;
name|c2
operator|.
name|add
argument_list|(
literal|"b"
argument_list|)
expr_stmt|;
name|c2
operator|.
name|add
argument_list|(
literal|"b"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|c
argument_list|,
name|c2
argument_list|)
expr_stmt|;
block|}
DECL|method|testEqualsSelf ()
specifier|public
name|void
name|testEqualsSelf
parameter_list|()
block|{
name|c
operator|.
name|add
argument_list|(
literal|"a"
argument_list|)
expr_stmt|;
name|c
operator|.
name|add
argument_list|(
literal|"b"
argument_list|)
expr_stmt|;
name|c
operator|.
name|add
argument_list|(
literal|"b"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|c
argument_list|,
name|c
argument_list|)
expr_stmt|;
block|}
DECL|method|testEqualsTricky ()
specifier|public
name|void
name|testEqualsTricky
parameter_list|()
block|{
name|c
operator|.
name|add
argument_list|(
literal|"a"
argument_list|)
expr_stmt|;
name|c
operator|.
name|add
argument_list|(
literal|"a"
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|String
argument_list|>
name|c2
init|=
name|create
argument_list|()
decl_stmt|;
name|c2
operator|.
name|add
argument_list|(
literal|"a"
argument_list|)
expr_stmt|;
name|c2
operator|.
name|add
argument_list|(
literal|"a"
argument_list|)
expr_stmt|;
name|c2
operator|.
name|add
argument_list|(
literal|"b"
argument_list|)
expr_stmt|;
name|c2
operator|.
name|add
argument_list|(
literal|"b"
argument_list|)
expr_stmt|;
name|c2
operator|.
name|remove
argument_list|(
literal|"b"
argument_list|)
expr_stmt|;
name|c2
operator|.
name|remove
argument_list|(
literal|"b"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|c
argument_list|,
name|c2
argument_list|)
expr_stmt|;
block|}
DECL|method|testEqualsPartial ()
specifier|public
name|void
name|testEqualsPartial
parameter_list|()
block|{
name|c
operator|.
name|add
argument_list|(
literal|"a"
argument_list|)
expr_stmt|;
name|c
operator|.
name|add
argument_list|(
literal|"b"
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|String
argument_list|>
name|c2
init|=
name|create
argument_list|()
decl_stmt|;
name|c2
operator|.
name|add
argument_list|(
literal|"a"
argument_list|)
expr_stmt|;
name|c2
operator|.
name|add
argument_list|(
literal|"c"
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|c
operator|.
name|equals
argument_list|(
name|c2
argument_list|)
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|String
argument_list|>
name|c3
init|=
name|create
argument_list|()
decl_stmt|;
name|c2
operator|.
name|add
argument_list|(
literal|"b"
argument_list|)
expr_stmt|;
name|c2
operator|.
name|add
argument_list|(
literal|"c"
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|c2
operator|.
name|equals
argument_list|(
name|c3
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testEqualsDifferentTypes ()
specifier|public
name|void
name|testEqualsDifferentTypes
parameter_list|()
block|{
name|c
operator|.
name|add
argument_list|(
literal|"a"
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|c
operator|.
name|equals
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testToArrayOne ()
specifier|public
name|void
name|testToArrayOne
parameter_list|()
block|{
name|c
operator|.
name|add
argument_list|(
literal|"a"
argument_list|)
expr_stmt|;
name|String
index|[]
name|array
init|=
operator|new
name|String
index|[
literal|3
index|]
decl_stmt|;
name|assertSame
argument_list|(
name|array
argument_list|,
name|c
operator|.
name|toArray
argument_list|(
name|array
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a"
argument_list|,
name|array
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|array
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
DECL|method|createSample ()
specifier|protected
name|Collection
argument_list|<
name|String
argument_list|>
name|createSample
parameter_list|()
block|{
name|Collection
argument_list|<
name|String
argument_list|>
name|c
init|=
name|create
argument_list|()
decl_stmt|;
name|c
operator|.
name|add
argument_list|(
literal|"a"
argument_list|)
expr_stmt|;
name|c
operator|.
name|add
argument_list|(
literal|"b"
argument_list|)
expr_stmt|;
name|c
operator|.
name|add
argument_list|(
literal|"b"
argument_list|)
expr_stmt|;
name|c
operator|.
name|add
argument_list|(
literal|"c"
argument_list|)
expr_stmt|;
name|c
operator|.
name|add
argument_list|(
literal|"d"
argument_list|)
expr_stmt|;
name|c
operator|.
name|add
argument_list|(
literal|"d"
argument_list|)
expr_stmt|;
name|c
operator|.
name|add
argument_list|(
literal|"d"
argument_list|)
expr_stmt|;
return|return
name|c
return|;
block|}
DECL|method|assertContents (String... expected)
specifier|protected
name|void
name|assertContents
parameter_list|(
name|String
modifier|...
name|expected
parameter_list|)
block|{
name|ASSERT
operator|.
name|that
argument_list|(
name|c
argument_list|)
operator|.
name|has
argument_list|()
operator|.
name|allFrom
argument_list|(
name|asList
argument_list|(
name|expected
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

