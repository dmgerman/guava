begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2008 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.primitives
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|primitives
package|;
end_package

begin_import
import|import static
name|java
operator|.
name|lang
operator|.
name|Double
operator|.
name|NaN
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|truth0
operator|.
name|Truth
operator|.
name|ASSERT
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtCompatible
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|testing
operator|.
name|Helpers
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Unit test for {@link Doubles}.  *  * @author Kevin Bourrillion  */
end_comment

begin_class
annotation|@
name|GwtCompatible
argument_list|(
name|emulated
operator|=
literal|true
argument_list|)
annotation|@
name|SuppressWarnings
argument_list|(
literal|"cast"
argument_list|)
comment|// redundant casts are intentional and harmless
DECL|class|DoublesTest
specifier|public
class|class
name|DoublesTest
extends|extends
name|TestCase
block|{
DECL|field|EMPTY
specifier|private
specifier|static
specifier|final
name|double
index|[]
name|EMPTY
init|=
block|{}
decl_stmt|;
DECL|field|ARRAY1
specifier|private
specifier|static
specifier|final
name|double
index|[]
name|ARRAY1
init|=
block|{
operator|(
name|double
operator|)
literal|1
block|}
decl_stmt|;
DECL|field|ARRAY234
specifier|private
specifier|static
specifier|final
name|double
index|[]
name|ARRAY234
init|=
block|{
operator|(
name|double
operator|)
literal|2
block|,
operator|(
name|double
operator|)
literal|3
block|,
operator|(
name|double
operator|)
literal|4
block|}
decl_stmt|;
DECL|field|LEAST
specifier|private
specifier|static
specifier|final
name|double
name|LEAST
init|=
name|Double
operator|.
name|NEGATIVE_INFINITY
decl_stmt|;
DECL|field|GREATEST
specifier|private
specifier|static
specifier|final
name|double
name|GREATEST
init|=
name|Double
operator|.
name|POSITIVE_INFINITY
decl_stmt|;
DECL|field|NUMBERS
specifier|private
specifier|static
specifier|final
name|double
index|[]
name|NUMBERS
init|=
operator|new
name|double
index|[]
block|{
name|LEAST
block|,
operator|-
name|Double
operator|.
name|MAX_VALUE
block|,
operator|-
literal|1.0
block|,
operator|-
literal|0.5
block|,
operator|-
literal|0.1
block|,
operator|-
literal|0.0
block|,
literal|0.0
block|,
literal|0.1
block|,
literal|0.5
block|,
literal|1.0
block|,
name|Double
operator|.
name|MAX_VALUE
block|,
name|GREATEST
block|,
name|Double
operator|.
name|MIN_NORMAL
block|,
operator|-
name|Double
operator|.
name|MIN_NORMAL
block|,
name|Double
operator|.
name|MIN_VALUE
block|,
operator|-
name|Double
operator|.
name|MIN_VALUE
block|,
name|Integer
operator|.
name|MIN_VALUE
block|,
name|Integer
operator|.
name|MAX_VALUE
block|,
name|Long
operator|.
name|MIN_VALUE
block|,
name|Long
operator|.
name|MAX_VALUE
block|}
decl_stmt|;
DECL|field|VALUES
specifier|private
specifier|static
specifier|final
name|double
index|[]
name|VALUES
init|=
name|Doubles
operator|.
name|concat
argument_list|(
name|NUMBERS
argument_list|,
operator|new
name|double
index|[]
block|{
name|NaN
block|}
argument_list|)
decl_stmt|;
DECL|method|testHashCode ()
specifier|public
name|void
name|testHashCode
parameter_list|()
block|{
for|for
control|(
name|double
name|value
range|:
name|VALUES
control|)
block|{
name|assertEquals
argument_list|(
operator|(
operator|(
name|Double
operator|)
name|value
operator|)
operator|.
name|hashCode
argument_list|()
argument_list|,
name|Doubles
operator|.
name|hashCode
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testIsFinite ()
specifier|public
name|void
name|testIsFinite
parameter_list|()
block|{
for|for
control|(
name|double
name|value
range|:
name|NUMBERS
control|)
block|{
name|assertEquals
argument_list|(
operator|!
operator|(
name|Double
operator|.
name|isNaN
argument_list|(
name|value
argument_list|)
operator|||
name|Double
operator|.
name|isInfinite
argument_list|(
name|value
argument_list|)
operator|)
argument_list|,
name|Doubles
operator|.
name|isFinite
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testCompare ()
specifier|public
name|void
name|testCompare
parameter_list|()
block|{
for|for
control|(
name|double
name|x
range|:
name|VALUES
control|)
block|{
for|for
control|(
name|double
name|y
range|:
name|VALUES
control|)
block|{
comment|// note: spec requires only that the sign is the same
name|assertEquals
argument_list|(
name|x
operator|+
literal|", "
operator|+
name|y
argument_list|,
name|Double
operator|.
name|valueOf
argument_list|(
name|x
argument_list|)
operator|.
name|compareTo
argument_list|(
name|y
argument_list|)
argument_list|,
name|Doubles
operator|.
name|compare
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|testContains ()
specifier|public
name|void
name|testContains
parameter_list|()
block|{
name|assertFalse
argument_list|(
name|Doubles
operator|.
name|contains
argument_list|(
name|EMPTY
argument_list|,
operator|(
name|double
operator|)
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|Doubles
operator|.
name|contains
argument_list|(
name|ARRAY1
argument_list|,
operator|(
name|double
operator|)
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|Doubles
operator|.
name|contains
argument_list|(
name|ARRAY234
argument_list|,
operator|(
name|double
operator|)
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Doubles
operator|.
name|contains
argument_list|(
operator|new
name|double
index|[]
block|{
operator|(
name|double
operator|)
operator|-
literal|1
block|}
argument_list|,
operator|(
name|double
operator|)
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Doubles
operator|.
name|contains
argument_list|(
name|ARRAY234
argument_list|,
operator|(
name|double
operator|)
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Doubles
operator|.
name|contains
argument_list|(
name|ARRAY234
argument_list|,
operator|(
name|double
operator|)
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Doubles
operator|.
name|contains
argument_list|(
name|ARRAY234
argument_list|,
operator|(
name|double
operator|)
literal|4
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|double
name|value
range|:
name|NUMBERS
control|)
block|{
name|assertTrue
argument_list|(
literal|""
operator|+
name|value
argument_list|,
name|Doubles
operator|.
name|contains
argument_list|(
operator|new
name|double
index|[]
block|{
literal|5.0
block|,
name|value
block|}
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertFalse
argument_list|(
name|Doubles
operator|.
name|contains
argument_list|(
operator|new
name|double
index|[]
block|{
literal|5.0
block|,
name|NaN
block|}
argument_list|,
name|NaN
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testIndexOf ()
specifier|public
name|void
name|testIndexOf
parameter_list|()
block|{
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|Doubles
operator|.
name|indexOf
argument_list|(
name|EMPTY
argument_list|,
operator|(
name|double
operator|)
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|Doubles
operator|.
name|indexOf
argument_list|(
name|ARRAY1
argument_list|,
operator|(
name|double
operator|)
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|Doubles
operator|.
name|indexOf
argument_list|(
name|ARRAY234
argument_list|,
operator|(
name|double
operator|)
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|Doubles
operator|.
name|indexOf
argument_list|(
operator|new
name|double
index|[]
block|{
operator|(
name|double
operator|)
operator|-
literal|1
block|}
argument_list|,
operator|(
name|double
operator|)
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|Doubles
operator|.
name|indexOf
argument_list|(
name|ARRAY234
argument_list|,
operator|(
name|double
operator|)
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|Doubles
operator|.
name|indexOf
argument_list|(
name|ARRAY234
argument_list|,
operator|(
name|double
operator|)
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|Doubles
operator|.
name|indexOf
argument_list|(
name|ARRAY234
argument_list|,
operator|(
name|double
operator|)
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|Doubles
operator|.
name|indexOf
argument_list|(
operator|new
name|double
index|[]
block|{
operator|(
name|double
operator|)
literal|2
block|,
operator|(
name|double
operator|)
literal|3
block|,
operator|(
name|double
operator|)
literal|2
block|,
operator|(
name|double
operator|)
literal|3
block|}
argument_list|,
operator|(
name|double
operator|)
literal|3
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|double
name|value
range|:
name|NUMBERS
control|)
block|{
name|assertEquals
argument_list|(
literal|""
operator|+
name|value
argument_list|,
literal|1
argument_list|,
name|Doubles
operator|.
name|indexOf
argument_list|(
operator|new
name|double
index|[]
block|{
literal|5.0
block|,
name|value
block|}
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|Doubles
operator|.
name|indexOf
argument_list|(
operator|new
name|double
index|[]
block|{
literal|5.0
block|,
name|NaN
block|}
argument_list|,
name|NaN
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testIndexOf_arrayTarget ()
specifier|public
name|void
name|testIndexOf_arrayTarget
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|Doubles
operator|.
name|indexOf
argument_list|(
name|EMPTY
argument_list|,
name|EMPTY
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|Doubles
operator|.
name|indexOf
argument_list|(
name|ARRAY234
argument_list|,
name|EMPTY
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|Doubles
operator|.
name|indexOf
argument_list|(
name|EMPTY
argument_list|,
name|ARRAY234
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|Doubles
operator|.
name|indexOf
argument_list|(
name|ARRAY234
argument_list|,
name|ARRAY1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|Doubles
operator|.
name|indexOf
argument_list|(
name|ARRAY1
argument_list|,
name|ARRAY234
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|Doubles
operator|.
name|indexOf
argument_list|(
name|ARRAY1
argument_list|,
name|ARRAY1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|Doubles
operator|.
name|indexOf
argument_list|(
name|ARRAY234
argument_list|,
name|ARRAY234
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|Doubles
operator|.
name|indexOf
argument_list|(
name|ARRAY234
argument_list|,
operator|new
name|double
index|[]
block|{
operator|(
name|double
operator|)
literal|2
block|,
operator|(
name|double
operator|)
literal|3
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|Doubles
operator|.
name|indexOf
argument_list|(
name|ARRAY234
argument_list|,
operator|new
name|double
index|[]
block|{
operator|(
name|double
operator|)
literal|3
block|,
operator|(
name|double
operator|)
literal|4
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|Doubles
operator|.
name|indexOf
argument_list|(
name|ARRAY234
argument_list|,
operator|new
name|double
index|[]
block|{
operator|(
name|double
operator|)
literal|3
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|Doubles
operator|.
name|indexOf
argument_list|(
name|ARRAY234
argument_list|,
operator|new
name|double
index|[]
block|{
operator|(
name|double
operator|)
literal|4
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|Doubles
operator|.
name|indexOf
argument_list|(
operator|new
name|double
index|[]
block|{
operator|(
name|double
operator|)
literal|2
block|,
operator|(
name|double
operator|)
literal|3
block|,
operator|(
name|double
operator|)
literal|3
block|,
operator|(
name|double
operator|)
literal|3
block|,
operator|(
name|double
operator|)
literal|3
block|}
argument_list|,
operator|new
name|double
index|[]
block|{
operator|(
name|double
operator|)
literal|3
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|Doubles
operator|.
name|indexOf
argument_list|(
operator|new
name|double
index|[]
block|{
operator|(
name|double
operator|)
literal|2
block|,
operator|(
name|double
operator|)
literal|3
block|,
operator|(
name|double
operator|)
literal|2
block|,
operator|(
name|double
operator|)
literal|3
block|,
operator|(
name|double
operator|)
literal|4
block|,
operator|(
name|double
operator|)
literal|2
block|,
operator|(
name|double
operator|)
literal|3
block|}
argument_list|,
operator|new
name|double
index|[]
block|{
operator|(
name|double
operator|)
literal|2
block|,
operator|(
name|double
operator|)
literal|3
block|,
operator|(
name|double
operator|)
literal|4
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|Doubles
operator|.
name|indexOf
argument_list|(
operator|new
name|double
index|[]
block|{
operator|(
name|double
operator|)
literal|2
block|,
operator|(
name|double
operator|)
literal|2
block|,
operator|(
name|double
operator|)
literal|3
block|,
operator|(
name|double
operator|)
literal|4
block|,
operator|(
name|double
operator|)
literal|2
block|,
operator|(
name|double
operator|)
literal|3
block|,
operator|(
name|double
operator|)
literal|4
block|}
argument_list|,
operator|new
name|double
index|[]
block|{
operator|(
name|double
operator|)
literal|2
block|,
operator|(
name|double
operator|)
literal|3
block|,
operator|(
name|double
operator|)
literal|4
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|Doubles
operator|.
name|indexOf
argument_list|(
operator|new
name|double
index|[]
block|{
operator|(
name|double
operator|)
literal|4
block|,
operator|(
name|double
operator|)
literal|3
block|,
operator|(
name|double
operator|)
literal|2
block|}
argument_list|,
operator|new
name|double
index|[]
block|{
operator|(
name|double
operator|)
literal|2
block|,
operator|(
name|double
operator|)
literal|3
block|,
operator|(
name|double
operator|)
literal|4
block|}
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|double
name|value
range|:
name|NUMBERS
control|)
block|{
name|assertEquals
argument_list|(
literal|""
operator|+
name|value
argument_list|,
literal|1
argument_list|,
name|Doubles
operator|.
name|indexOf
argument_list|(
operator|new
name|double
index|[]
block|{
literal|5.0
block|,
name|value
block|,
name|value
block|,
literal|5.0
block|}
argument_list|,
operator|new
name|double
index|[]
block|{
name|value
block|,
name|value
block|}
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|Doubles
operator|.
name|indexOf
argument_list|(
operator|new
name|double
index|[]
block|{
literal|5.0
block|,
name|NaN
block|,
name|NaN
block|,
literal|5.0
block|}
argument_list|,
operator|new
name|double
index|[]
block|{
name|NaN
block|,
name|NaN
block|}
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testLastIndexOf ()
specifier|public
name|void
name|testLastIndexOf
parameter_list|()
block|{
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|Doubles
operator|.
name|lastIndexOf
argument_list|(
name|EMPTY
argument_list|,
operator|(
name|double
operator|)
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|Doubles
operator|.
name|lastIndexOf
argument_list|(
name|ARRAY1
argument_list|,
operator|(
name|double
operator|)
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|Doubles
operator|.
name|lastIndexOf
argument_list|(
name|ARRAY234
argument_list|,
operator|(
name|double
operator|)
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|Doubles
operator|.
name|lastIndexOf
argument_list|(
operator|new
name|double
index|[]
block|{
operator|(
name|double
operator|)
operator|-
literal|1
block|}
argument_list|,
operator|(
name|double
operator|)
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|Doubles
operator|.
name|lastIndexOf
argument_list|(
name|ARRAY234
argument_list|,
operator|(
name|double
operator|)
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|Doubles
operator|.
name|lastIndexOf
argument_list|(
name|ARRAY234
argument_list|,
operator|(
name|double
operator|)
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|Doubles
operator|.
name|lastIndexOf
argument_list|(
name|ARRAY234
argument_list|,
operator|(
name|double
operator|)
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|Doubles
operator|.
name|lastIndexOf
argument_list|(
operator|new
name|double
index|[]
block|{
operator|(
name|double
operator|)
literal|2
block|,
operator|(
name|double
operator|)
literal|3
block|,
operator|(
name|double
operator|)
literal|2
block|,
operator|(
name|double
operator|)
literal|3
block|}
argument_list|,
operator|(
name|double
operator|)
literal|3
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|double
name|value
range|:
name|NUMBERS
control|)
block|{
name|assertEquals
argument_list|(
literal|""
operator|+
name|value
argument_list|,
literal|0
argument_list|,
name|Doubles
operator|.
name|lastIndexOf
argument_list|(
operator|new
name|double
index|[]
block|{
name|value
block|,
literal|5.0
block|}
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|Doubles
operator|.
name|lastIndexOf
argument_list|(
operator|new
name|double
index|[]
block|{
name|NaN
block|,
literal|5.0
block|}
argument_list|,
name|NaN
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testMax_noArgs ()
specifier|public
name|void
name|testMax_noArgs
parameter_list|()
block|{
try|try
block|{
name|Doubles
operator|.
name|max
argument_list|()
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testMax ()
specifier|public
name|void
name|testMax
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|LEAST
argument_list|,
name|Doubles
operator|.
name|max
argument_list|(
name|LEAST
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|GREATEST
argument_list|,
name|Doubles
operator|.
name|max
argument_list|(
name|GREATEST
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
name|double
operator|)
literal|9
argument_list|,
name|Doubles
operator|.
name|max
argument_list|(
operator|(
name|double
operator|)
literal|8
argument_list|,
operator|(
name|double
operator|)
literal|6
argument_list|,
operator|(
name|double
operator|)
literal|7
argument_list|,
operator|(
name|double
operator|)
literal|5
argument_list|,
operator|(
name|double
operator|)
literal|3
argument_list|,
operator|(
name|double
operator|)
literal|0
argument_list|,
operator|(
name|double
operator|)
literal|9
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0.0
argument_list|,
name|Doubles
operator|.
name|max
argument_list|(
operator|-
literal|0.0
argument_list|,
literal|0.0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0.0
argument_list|,
name|Doubles
operator|.
name|max
argument_list|(
literal|0.0
argument_list|,
operator|-
literal|0.0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|GREATEST
argument_list|,
name|Doubles
operator|.
name|max
argument_list|(
name|NUMBERS
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Double
operator|.
name|isNaN
argument_list|(
name|Doubles
operator|.
name|max
argument_list|(
name|VALUES
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testMin_noArgs ()
specifier|public
name|void
name|testMin_noArgs
parameter_list|()
block|{
try|try
block|{
name|Doubles
operator|.
name|min
argument_list|()
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testMin ()
specifier|public
name|void
name|testMin
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|LEAST
argument_list|,
name|Doubles
operator|.
name|min
argument_list|(
name|LEAST
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|GREATEST
argument_list|,
name|Doubles
operator|.
name|min
argument_list|(
name|GREATEST
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
name|double
operator|)
literal|0
argument_list|,
name|Doubles
operator|.
name|min
argument_list|(
operator|(
name|double
operator|)
literal|8
argument_list|,
operator|(
name|double
operator|)
literal|6
argument_list|,
operator|(
name|double
operator|)
literal|7
argument_list|,
operator|(
name|double
operator|)
literal|5
argument_list|,
operator|(
name|double
operator|)
literal|3
argument_list|,
operator|(
name|double
operator|)
literal|0
argument_list|,
operator|(
name|double
operator|)
literal|9
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|0.0
argument_list|,
name|Doubles
operator|.
name|min
argument_list|(
operator|-
literal|0.0
argument_list|,
literal|0.0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|0.0
argument_list|,
name|Doubles
operator|.
name|min
argument_list|(
literal|0.0
argument_list|,
operator|-
literal|0.0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|LEAST
argument_list|,
name|Doubles
operator|.
name|min
argument_list|(
name|NUMBERS
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Double
operator|.
name|isNaN
argument_list|(
name|Doubles
operator|.
name|min
argument_list|(
name|VALUES
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testConcat ()
specifier|public
name|void
name|testConcat
parameter_list|()
block|{
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|EMPTY
argument_list|,
name|Doubles
operator|.
name|concat
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|EMPTY
argument_list|,
name|Doubles
operator|.
name|concat
argument_list|(
name|EMPTY
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|EMPTY
argument_list|,
name|Doubles
operator|.
name|concat
argument_list|(
name|EMPTY
argument_list|,
name|EMPTY
argument_list|,
name|EMPTY
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|ARRAY1
argument_list|,
name|Doubles
operator|.
name|concat
argument_list|(
name|ARRAY1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotSame
argument_list|(
name|ARRAY1
argument_list|,
name|Doubles
operator|.
name|concat
argument_list|(
name|ARRAY1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|ARRAY1
argument_list|,
name|Doubles
operator|.
name|concat
argument_list|(
name|EMPTY
argument_list|,
name|ARRAY1
argument_list|,
name|EMPTY
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
operator|new
name|double
index|[]
block|{
operator|(
name|double
operator|)
literal|1
block|,
operator|(
name|double
operator|)
literal|1
block|,
operator|(
name|double
operator|)
literal|1
block|}
argument_list|,
name|Doubles
operator|.
name|concat
argument_list|(
name|ARRAY1
argument_list|,
name|ARRAY1
argument_list|,
name|ARRAY1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
operator|new
name|double
index|[]
block|{
operator|(
name|double
operator|)
literal|1
block|,
operator|(
name|double
operator|)
literal|2
block|,
operator|(
name|double
operator|)
literal|3
block|,
operator|(
name|double
operator|)
literal|4
block|}
argument_list|,
name|Doubles
operator|.
name|concat
argument_list|(
name|ARRAY1
argument_list|,
name|ARRAY234
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testEnsureCapacity ()
specifier|public
name|void
name|testEnsureCapacity
parameter_list|()
block|{
name|assertSame
argument_list|(
name|EMPTY
argument_list|,
name|Doubles
operator|.
name|ensureCapacity
argument_list|(
name|EMPTY
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|ARRAY1
argument_list|,
name|Doubles
operator|.
name|ensureCapacity
argument_list|(
name|ARRAY1
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|ARRAY1
argument_list|,
name|Doubles
operator|.
name|ensureCapacity
argument_list|(
name|ARRAY1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
operator|new
name|double
index|[]
block|{
operator|(
name|double
operator|)
literal|1
block|,
operator|(
name|double
operator|)
literal|0
block|,
operator|(
name|double
operator|)
literal|0
block|}
argument_list|,
name|Doubles
operator|.
name|ensureCapacity
argument_list|(
name|ARRAY1
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testEnsureCapacity_fail ()
specifier|public
name|void
name|testEnsureCapacity_fail
parameter_list|()
block|{
try|try
block|{
name|Doubles
operator|.
name|ensureCapacity
argument_list|(
name|ARRAY1
argument_list|,
operator|-
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{     }
try|try
block|{
comment|// notice that this should even fail when no growth was needed
name|Doubles
operator|.
name|ensureCapacity
argument_list|(
name|ARRAY1
argument_list|,
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testJoinNonTrivialDoubles ()
specifier|public
name|void
name|testJoinNonTrivialDoubles
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|Doubles
operator|.
name|join
argument_list|(
literal|","
argument_list|,
name|EMPTY
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1.2"
argument_list|,
name|Doubles
operator|.
name|join
argument_list|(
literal|","
argument_list|,
literal|1.2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1.3,2.4"
argument_list|,
name|Doubles
operator|.
name|join
argument_list|(
literal|","
argument_list|,
literal|1.3
argument_list|,
literal|2.4
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1.42.53.6"
argument_list|,
name|Doubles
operator|.
name|join
argument_list|(
literal|""
argument_list|,
literal|1.4
argument_list|,
literal|2.5
argument_list|,
literal|3.6
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testLexicographicalComparator ()
specifier|public
name|void
name|testLexicographicalComparator
parameter_list|()
block|{
name|List
argument_list|<
name|double
index|[]
argument_list|>
name|ordered
init|=
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|double
index|[]
block|{}
argument_list|,
operator|new
name|double
index|[]
block|{
name|LEAST
block|}
argument_list|,
operator|new
name|double
index|[]
block|{
name|LEAST
block|,
name|LEAST
block|}
argument_list|,
operator|new
name|double
index|[]
block|{
name|LEAST
block|,
operator|(
name|double
operator|)
literal|1
block|}
argument_list|,
operator|new
name|double
index|[]
block|{
operator|(
name|double
operator|)
literal|1
block|}
argument_list|,
operator|new
name|double
index|[]
block|{
operator|(
name|double
operator|)
literal|1
block|,
name|LEAST
block|}
argument_list|,
operator|new
name|double
index|[]
block|{
name|GREATEST
block|,
name|Double
operator|.
name|MAX_VALUE
block|}
argument_list|,
operator|new
name|double
index|[]
block|{
name|GREATEST
block|,
name|GREATEST
block|}
argument_list|,
operator|new
name|double
index|[]
block|{
name|GREATEST
block|,
name|GREATEST
block|,
name|GREATEST
block|}
argument_list|)
decl_stmt|;
name|Comparator
argument_list|<
name|double
index|[]
argument_list|>
name|comparator
init|=
name|Doubles
operator|.
name|lexicographicalComparator
argument_list|()
decl_stmt|;
name|Helpers
operator|.
name|testComparator
argument_list|(
name|comparator
argument_list|,
name|ordered
argument_list|)
expr_stmt|;
block|}
DECL|method|testToArray ()
specifier|public
name|void
name|testToArray
parameter_list|()
block|{
comment|// need explicit type parameter to avoid javac warning!?
name|List
argument_list|<
name|Double
argument_list|>
name|none
init|=
name|Arrays
operator|.
expr|<
name|Double
operator|>
name|asList
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|EMPTY
argument_list|,
name|Doubles
operator|.
name|toArray
argument_list|(
name|none
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Double
argument_list|>
name|one
init|=
name|Arrays
operator|.
name|asList
argument_list|(
operator|(
name|double
operator|)
literal|1
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|ARRAY1
argument_list|,
name|Doubles
operator|.
name|toArray
argument_list|(
name|one
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|double
index|[]
name|array
init|=
block|{
operator|(
name|double
operator|)
literal|0
block|,
operator|(
name|double
operator|)
literal|1
block|,
name|Math
operator|.
name|PI
block|}
decl_stmt|;
name|List
argument_list|<
name|Double
argument_list|>
name|three
init|=
name|Arrays
operator|.
name|asList
argument_list|(
operator|(
name|double
operator|)
literal|0
argument_list|,
operator|(
name|double
operator|)
literal|1
argument_list|,
name|Math
operator|.
name|PI
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|array
argument_list|,
name|Doubles
operator|.
name|toArray
argument_list|(
name|three
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|array
argument_list|,
name|Doubles
operator|.
name|toArray
argument_list|(
name|Doubles
operator|.
name|asList
argument_list|(
name|array
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testToArray_threadSafe ()
specifier|public
name|void
name|testToArray_threadSafe
parameter_list|()
block|{
for|for
control|(
name|int
name|delta
range|:
operator|new
name|int
index|[]
block|{
operator|+
literal|1
block|,
literal|0
block|,
operator|-
literal|1
block|}
control|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|VALUES
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|List
argument_list|<
name|Double
argument_list|>
name|list
init|=
name|Doubles
operator|.
name|asList
argument_list|(
name|VALUES
argument_list|)
operator|.
name|subList
argument_list|(
literal|0
argument_list|,
name|i
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|Double
argument_list|>
name|misleadingSize
init|=
name|Helpers
operator|.
name|misleadingSizeCollection
argument_list|(
name|delta
argument_list|)
decl_stmt|;
name|misleadingSize
operator|.
name|addAll
argument_list|(
name|list
argument_list|)
expr_stmt|;
name|double
index|[]
name|arr
init|=
name|Doubles
operator|.
name|toArray
argument_list|(
name|misleadingSize
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|i
argument_list|,
name|arr
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|i
condition|;
name|j
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|VALUES
index|[
name|j
index|]
argument_list|,
name|arr
index|[
name|j
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|testToArray_withNull ()
specifier|public
name|void
name|testToArray_withNull
parameter_list|()
block|{
name|List
argument_list|<
name|Double
argument_list|>
name|list
init|=
name|Arrays
operator|.
name|asList
argument_list|(
operator|(
name|double
operator|)
literal|0
argument_list|,
operator|(
name|double
operator|)
literal|1
argument_list|,
literal|null
argument_list|)
decl_stmt|;
try|try
block|{
name|Doubles
operator|.
name|toArray
argument_list|(
name|list
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testToArray_withConversion ()
specifier|public
name|void
name|testToArray_withConversion
parameter_list|()
block|{
name|double
index|[]
name|array
init|=
block|{
operator|(
name|double
operator|)
literal|0
block|,
operator|(
name|double
operator|)
literal|1
block|,
operator|(
name|double
operator|)
literal|2
block|}
decl_stmt|;
name|List
argument_list|<
name|Byte
argument_list|>
name|bytes
init|=
name|Arrays
operator|.
name|asList
argument_list|(
operator|(
name|byte
operator|)
literal|0
argument_list|,
operator|(
name|byte
operator|)
literal|1
argument_list|,
operator|(
name|byte
operator|)
literal|2
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Short
argument_list|>
name|shorts
init|=
name|Arrays
operator|.
name|asList
argument_list|(
operator|(
name|short
operator|)
literal|0
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|ints
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Float
argument_list|>
name|floats
init|=
name|Arrays
operator|.
name|asList
argument_list|(
operator|(
name|float
operator|)
literal|0
argument_list|,
operator|(
name|float
operator|)
literal|1
argument_list|,
operator|(
name|float
operator|)
literal|2
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Long
argument_list|>
name|longs
init|=
name|Arrays
operator|.
name|asList
argument_list|(
operator|(
name|long
operator|)
literal|0
argument_list|,
operator|(
name|long
operator|)
literal|1
argument_list|,
operator|(
name|long
operator|)
literal|2
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Double
argument_list|>
name|doubles
init|=
name|Arrays
operator|.
name|asList
argument_list|(
operator|(
name|double
operator|)
literal|0
argument_list|,
operator|(
name|double
operator|)
literal|1
argument_list|,
operator|(
name|double
operator|)
literal|2
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|array
argument_list|,
name|Doubles
operator|.
name|toArray
argument_list|(
name|bytes
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|array
argument_list|,
name|Doubles
operator|.
name|toArray
argument_list|(
name|shorts
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|array
argument_list|,
name|Doubles
operator|.
name|toArray
argument_list|(
name|ints
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|array
argument_list|,
name|Doubles
operator|.
name|toArray
argument_list|(
name|floats
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|array
argument_list|,
name|Doubles
operator|.
name|toArray
argument_list|(
name|longs
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|array
argument_list|,
name|Doubles
operator|.
name|toArray
argument_list|(
name|doubles
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testAsList_isAView ()
specifier|public
name|void
name|testAsList_isAView
parameter_list|()
block|{
name|double
index|[]
name|array
init|=
block|{
operator|(
name|double
operator|)
literal|0
block|,
operator|(
name|double
operator|)
literal|1
block|}
decl_stmt|;
name|List
argument_list|<
name|Double
argument_list|>
name|list
init|=
name|Doubles
operator|.
name|asList
argument_list|(
name|array
argument_list|)
decl_stmt|;
name|list
operator|.
name|set
argument_list|(
literal|0
argument_list|,
operator|(
name|double
operator|)
literal|2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
operator|new
name|double
index|[]
block|{
operator|(
name|double
operator|)
literal|2
block|,
operator|(
name|double
operator|)
literal|1
block|}
argument_list|,
name|array
argument_list|)
argument_list|)
expr_stmt|;
name|array
index|[
literal|1
index|]
operator|=
operator|(
name|double
operator|)
literal|3
expr_stmt|;
name|ASSERT
operator|.
name|that
argument_list|(
name|list
argument_list|)
operator|.
name|has
argument_list|()
operator|.
name|allOf
argument_list|(
operator|(
name|double
operator|)
literal|2
argument_list|,
operator|(
name|double
operator|)
literal|3
argument_list|)
operator|.
name|inOrder
argument_list|()
expr_stmt|;
block|}
DECL|method|testAsList_toArray_roundTrip ()
specifier|public
name|void
name|testAsList_toArray_roundTrip
parameter_list|()
block|{
name|double
index|[]
name|array
init|=
block|{
operator|(
name|double
operator|)
literal|0
block|,
operator|(
name|double
operator|)
literal|1
block|,
operator|(
name|double
operator|)
literal|2
block|}
decl_stmt|;
name|List
argument_list|<
name|Double
argument_list|>
name|list
init|=
name|Doubles
operator|.
name|asList
argument_list|(
name|array
argument_list|)
decl_stmt|;
name|double
index|[]
name|newArray
init|=
name|Doubles
operator|.
name|toArray
argument_list|(
name|list
argument_list|)
decl_stmt|;
comment|// Make sure it returned a copy
name|list
operator|.
name|set
argument_list|(
literal|0
argument_list|,
operator|(
name|double
operator|)
literal|4
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
operator|new
name|double
index|[]
block|{
operator|(
name|double
operator|)
literal|0
block|,
operator|(
name|double
operator|)
literal|1
block|,
operator|(
name|double
operator|)
literal|2
block|}
argument_list|,
name|newArray
argument_list|)
argument_list|)
expr_stmt|;
name|newArray
index|[
literal|1
index|]
operator|=
operator|(
name|double
operator|)
literal|5
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
name|double
operator|)
literal|1
argument_list|,
operator|(
name|double
operator|)
name|list
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// This test stems from a real bug found by andrewk
DECL|method|testAsList_subList_toArray_roundTrip ()
specifier|public
name|void
name|testAsList_subList_toArray_roundTrip
parameter_list|()
block|{
name|double
index|[]
name|array
init|=
block|{
operator|(
name|double
operator|)
literal|0
block|,
operator|(
name|double
operator|)
literal|1
block|,
operator|(
name|double
operator|)
literal|2
block|,
operator|(
name|double
operator|)
literal|3
block|}
decl_stmt|;
name|List
argument_list|<
name|Double
argument_list|>
name|list
init|=
name|Doubles
operator|.
name|asList
argument_list|(
name|array
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
operator|new
name|double
index|[]
block|{
operator|(
name|double
operator|)
literal|1
block|,
operator|(
name|double
operator|)
literal|2
block|}
argument_list|,
name|Doubles
operator|.
name|toArray
argument_list|(
name|list
operator|.
name|subList
argument_list|(
literal|1
argument_list|,
literal|3
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
operator|new
name|double
index|[]
block|{}
argument_list|,
name|Doubles
operator|.
name|toArray
argument_list|(
name|list
operator|.
name|subList
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testAsListEmpty ()
specifier|public
name|void
name|testAsListEmpty
parameter_list|()
block|{
name|assertSame
argument_list|(
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
name|Doubles
operator|.
name|asList
argument_list|(
name|EMPTY
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * A reference implementation for {@code tryParse} that just catches the exception from    * {@link Double#valueOf}.    */
DECL|method|referenceTryParse (String input)
specifier|private
specifier|static
name|Double
name|referenceTryParse
parameter_list|(
name|String
name|input
parameter_list|)
block|{
if|if
condition|(
name|input
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|<
name|input
operator|.
name|length
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
try|try
block|{
return|return
name|Double
operator|.
name|valueOf
argument_list|(
name|input
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
DECL|field|BAD_TRY_PARSE_INPUTS
specifier|private
specifier|static
specifier|final
name|String
index|[]
name|BAD_TRY_PARSE_INPUTS
init|=
block|{
literal|""
block|,
literal|"+-"
block|,
literal|"+-0"
block|,
literal|" 5"
block|,
literal|"32 "
block|,
literal|" 55 "
block|,
literal|"infinity"
block|,
literal|"POSITIVE_INFINITY"
block|,
literal|"0x9A"
block|,
literal|"0x9A.bE-5"
block|,
literal|"."
block|,
literal|".e5"
block|,
literal|"NaNd"
block|,
literal|"InfinityF"
block|}
decl_stmt|;
block|}
end_class

end_unit

