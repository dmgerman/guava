begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2012 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.cache
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|MoreObjects
operator|.
name|firstNonNull
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkState
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Equivalence
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Ticker
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|AbstractCache
operator|.
name|StatsCounter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionError
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|UncheckedExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|AbstractCollection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|AbstractSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NoSuchElementException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|checkerframework
operator|.
name|checker
operator|.
name|nullness
operator|.
name|qual
operator|.
name|Nullable
import|;
end_import

begin_comment
comment|/**  * LocalCache emulation for GWT.  *  * @param<K> the base key type  * @param<V> the base value type  * @author Charles Fry  * @author Jon Donovan  */
end_comment

begin_class
DECL|class|LocalCache
specifier|public
class|class
name|LocalCache
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
implements|implements
name|ConcurrentMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
block|{
DECL|field|UNSET_INT
specifier|private
specifier|static
specifier|final
name|int
name|UNSET_INT
init|=
name|CacheBuilder
operator|.
name|UNSET_INT
decl_stmt|;
DECL|field|cachingHashMap
specifier|private
specifier|final
name|LinkedHashMap
argument_list|<
name|K
argument_list|,
name|Timestamped
argument_list|<
name|V
argument_list|>
argument_list|>
name|cachingHashMap
decl_stmt|;
DECL|field|loader
specifier|private
specifier|final
name|CacheLoader
argument_list|<
name|?
super|super
name|K
argument_list|,
name|V
argument_list|>
name|loader
decl_stmt|;
DECL|field|removalListener
specifier|private
specifier|final
name|RemovalListener
name|removalListener
decl_stmt|;
DECL|field|statsCounter
specifier|private
specifier|final
name|StatsCounter
name|statsCounter
decl_stmt|;
DECL|field|ticker
specifier|private
specifier|final
name|Ticker
name|ticker
decl_stmt|;
DECL|field|expireAfterWrite
specifier|private
specifier|final
name|long
name|expireAfterWrite
decl_stmt|;
DECL|field|expireAfterAccess
specifier|private
specifier|final
name|long
name|expireAfterAccess
decl_stmt|;
DECL|method|LocalCache (CacheBuilder<? super K, ? super V> builder, CacheLoader<? super K, V> loader)
name|LocalCache
parameter_list|(
name|CacheBuilder
argument_list|<
name|?
super|super
name|K
argument_list|,
name|?
super|super
name|V
argument_list|>
name|builder
parameter_list|,
name|CacheLoader
argument_list|<
name|?
super|super
name|K
argument_list|,
name|V
argument_list|>
name|loader
parameter_list|)
block|{
name|this
operator|.
name|loader
operator|=
name|loader
expr_stmt|;
name|this
operator|.
name|removalListener
operator|=
name|builder
operator|.
name|removalListener
expr_stmt|;
name|this
operator|.
name|expireAfterAccess
operator|=
name|builder
operator|.
name|expireAfterAccessNanos
expr_stmt|;
name|this
operator|.
name|expireAfterWrite
operator|=
name|builder
operator|.
name|expireAfterWriteNanos
expr_stmt|;
name|this
operator|.
name|statsCounter
operator|=
name|builder
operator|.
name|getStatsCounterSupplier
argument_list|()
operator|.
name|get
argument_list|()
expr_stmt|;
comment|/* Implements size-capped LinkedHashMap */
specifier|final
name|long
name|maximumSize
init|=
name|builder
operator|.
name|maximumSize
decl_stmt|;
name|this
operator|.
name|cachingHashMap
operator|=
operator|new
name|CapacityEnforcingLinkedHashMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|(
name|builder
operator|.
name|getInitialCapacity
argument_list|()
argument_list|,
literal|0.75f
argument_list|,
operator|(
name|builder
operator|.
name|maximumSize
operator|!=
name|UNSET_INT
operator|)
argument_list|,
name|builder
operator|.
name|maximumSize
argument_list|,
name|statsCounter
argument_list|,
name|removalListener
argument_list|)
expr_stmt|;
name|this
operator|.
name|ticker
operator|=
name|firstNonNull
argument_list|(
name|builder
operator|.
name|ticker
argument_list|,
name|Ticker
operator|.
name|systemTicker
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|size ()
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|cachingHashMap
operator|.
name|size
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|isEmpty ()
specifier|public
name|boolean
name|isEmpty
parameter_list|()
block|{
return|return
name|cachingHashMap
operator|.
name|isEmpty
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|get (Object key)
specifier|public
name|V
name|get
parameter_list|(
name|Object
name|key
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|Timestamped
argument_list|<
name|V
argument_list|>
name|value
init|=
name|cachingHashMap
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|statsCounter
operator|.
name|recordMisses
argument_list|(
literal|1
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
elseif|else
if|if
condition|(
operator|!
name|isExpired
argument_list|(
name|value
argument_list|)
condition|)
block|{
name|statsCounter
operator|.
name|recordHits
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|value
operator|.
name|updateTimestamp
argument_list|()
expr_stmt|;
return|return
name|value
operator|.
name|getValue
argument_list|()
return|;
block|}
else|else
block|{
name|statsCounter
operator|.
name|recordEviction
argument_list|()
expr_stmt|;
name|statsCounter
operator|.
name|recordMisses
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|alertListenerIfPresent
argument_list|(
name|key
argument_list|,
name|value
operator|.
name|getValue
argument_list|()
argument_list|,
name|RemovalCause
operator|.
name|EXPIRED
argument_list|)
expr_stmt|;
name|cachingHashMap
operator|.
name|remove
argument_list|(
name|key
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|put (K key, V value)
specifier|public
name|V
name|put
parameter_list|(
name|K
name|key
parameter_list|,
name|V
name|value
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|checkNotNull
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|Timestamped
argument_list|<
name|V
argument_list|>
name|oldValue
init|=
name|cachingHashMap
operator|.
name|put
argument_list|(
name|key
argument_list|,
operator|new
name|Timestamped
argument_list|<
name|V
argument_list|>
argument_list|(
name|value
argument_list|,
name|ticker
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldValue
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|alertListenerIfPresent
argument_list|(
name|key
argument_list|,
name|oldValue
operator|.
name|getValue
argument_list|()
argument_list|,
name|RemovalCause
operator|.
name|REPLACED
argument_list|)
expr_stmt|;
return|return
name|oldValue
operator|.
name|getValue
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|remove (Object key)
specifier|public
name|V
name|remove
parameter_list|(
name|Object
name|key
parameter_list|)
block|{
name|Timestamped
argument_list|<
name|V
argument_list|>
name|stamped
init|=
name|cachingHashMap
operator|.
name|remove
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|stamped
operator|!=
literal|null
condition|)
block|{
name|V
name|value
init|=
name|stamped
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|isExpired
argument_list|(
name|stamped
argument_list|)
condition|)
block|{
name|alertListenerIfPresent
argument_list|(
name|key
argument_list|,
name|value
argument_list|,
name|RemovalCause
operator|.
name|EXPLICIT
argument_list|)
expr_stmt|;
return|return
name|value
return|;
block|}
name|alertListenerIfPresent
argument_list|(
name|key
argument_list|,
name|value
argument_list|,
name|RemovalCause
operator|.
name|EXPIRED
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|putAll (Map<? extends K, ? extends V> m)
specifier|public
name|void
name|putAll
parameter_list|(
name|Map
argument_list|<
name|?
extends|extends
name|K
argument_list|,
name|?
extends|extends
name|V
argument_list|>
name|m
parameter_list|)
block|{
for|for
control|(
name|Entry
argument_list|<
name|?
extends|extends
name|K
argument_list|,
name|?
extends|extends
name|V
argument_list|>
name|entry
range|:
name|m
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|clear ()
specifier|public
name|void
name|clear
parameter_list|()
block|{
if|if
condition|(
name|removalListener
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Entry
argument_list|<
name|K
argument_list|,
name|Timestamped
argument_list|<
name|V
argument_list|>
argument_list|>
name|entry
range|:
name|cachingHashMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|alertListenerIfPresent
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|,
name|RemovalCause
operator|.
name|EXPLICIT
argument_list|)
expr_stmt|;
block|}
block|}
name|cachingHashMap
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|putIfAbsent (K key, V value)
specifier|public
name|V
name|putIfAbsent
parameter_list|(
name|K
name|key
parameter_list|,
name|V
name|value
parameter_list|)
block|{
name|V
name|currentValue
init|=
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|currentValue
operator|!=
literal|null
condition|)
block|{
return|return
name|currentValue
return|;
block|}
return|return
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|remove (Object key, Object value)
specifier|public
name|boolean
name|remove
parameter_list|(
name|Object
name|key
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|.
name|equals
argument_list|(
name|get
argument_list|(
name|key
argument_list|)
argument_list|)
condition|)
block|{
name|alertListenerIfPresent
argument_list|(
name|key
argument_list|,
name|value
argument_list|,
name|RemovalCause
operator|.
name|EXPLICIT
argument_list|)
expr_stmt|;
name|remove
argument_list|(
name|key
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|replace (K key, V oldValue, V newValue)
specifier|public
name|boolean
name|replace
parameter_list|(
name|K
name|key
parameter_list|,
name|V
name|oldValue
parameter_list|,
name|V
name|newValue
parameter_list|)
block|{
if|if
condition|(
name|oldValue
operator|.
name|equals
argument_list|(
name|get
argument_list|(
name|key
argument_list|)
argument_list|)
condition|)
block|{
name|alertListenerIfPresent
argument_list|(
name|key
argument_list|,
name|oldValue
argument_list|,
name|RemovalCause
operator|.
name|REPLACED
argument_list|)
expr_stmt|;
name|put
argument_list|(
name|key
argument_list|,
name|newValue
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|replace (K key, V value)
specifier|public
name|V
name|replace
parameter_list|(
name|K
name|key
parameter_list|,
name|V
name|value
parameter_list|)
block|{
name|V
name|currentValue
init|=
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|currentValue
operator|!=
literal|null
condition|)
block|{
name|alertListenerIfPresent
argument_list|(
name|key
argument_list|,
name|currentValue
argument_list|,
name|RemovalCause
operator|.
name|REPLACED
argument_list|)
expr_stmt|;
return|return
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|containsKey (Object key)
specifier|public
name|boolean
name|containsKey
parameter_list|(
name|Object
name|key
parameter_list|)
block|{
return|return
name|cachingHashMap
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
operator|&&
operator|!
name|isExpired
argument_list|(
name|cachingHashMap
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|containsValue (Object value)
specifier|public
name|boolean
name|containsValue
parameter_list|(
name|Object
name|value
parameter_list|)
block|{
for|for
control|(
name|Timestamped
argument_list|<
name|V
argument_list|>
name|val
range|:
name|cachingHashMap
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|val
operator|.
name|getValue
argument_list|()
operator|.
name|equals
argument_list|(
name|value
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|isExpired
argument_list|(
name|val
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
return|return
literal|false
return|;
block|}
DECL|method|isExpired (Timestamped<V> stamped)
specifier|private
name|boolean
name|isExpired
parameter_list|(
name|Timestamped
argument_list|<
name|V
argument_list|>
name|stamped
parameter_list|)
block|{
if|if
condition|(
operator|(
name|expireAfterAccess
operator|==
name|UNSET_INT
operator|)
operator|&&
operator|(
name|expireAfterWrite
operator|==
name|UNSET_INT
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|boolean
name|expireWrite
init|=
operator|(
name|stamped
operator|.
name|getWriteTimestamp
argument_list|()
operator|+
name|expireAfterWrite
operator|<=
name|currentTimeNanos
argument_list|()
operator|)
decl_stmt|;
name|boolean
name|expireAccess
init|=
operator|(
name|stamped
operator|.
name|getAccessTimestamp
argument_list|()
operator|+
name|expireAfterAccess
operator|<=
name|currentTimeNanos
argument_list|()
operator|)
decl_stmt|;
if|if
condition|(
name|expireAfterAccess
operator|==
name|UNSET_INT
condition|)
block|{
return|return
name|expireWrite
return|;
block|}
if|if
condition|(
name|expireAfterWrite
operator|==
name|UNSET_INT
condition|)
block|{
return|return
name|expireAccess
return|;
block|}
return|return
name|expireWrite
operator|||
name|expireAccess
return|;
block|}
DECL|method|currentTimeNanos ()
specifier|private
name|long
name|currentTimeNanos
parameter_list|()
block|{
return|return
name|ticker
operator|.
name|read
argument_list|()
return|;
block|}
DECL|method|alertListenerIfPresent (Object key, Object value, RemovalCause cause)
specifier|private
name|void
name|alertListenerIfPresent
parameter_list|(
name|Object
name|key
parameter_list|,
name|Object
name|value
parameter_list|,
name|RemovalCause
name|cause
parameter_list|)
block|{
if|if
condition|(
name|removalListener
operator|!=
literal|null
condition|)
block|{
name|removalListener
operator|.
name|onRemoval
argument_list|(
name|RemovalNotification
operator|.
name|create
argument_list|(
name|key
argument_list|,
name|value
argument_list|,
name|cause
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|load (Object key)
specifier|private
name|V
name|load
parameter_list|(
name|Object
name|key
parameter_list|)
throws|throws
name|ExecutionException
block|{
name|long
name|startTime
init|=
name|ticker
operator|.
name|read
argument_list|()
decl_stmt|;
name|V
name|calculatedValue
decl_stmt|;
try|try
block|{
comment|/*        * This cast isn't safe, but we can rely on the fact that K is almost always passed to        * Map.get(), and tools like IDEs and Findbugs can catch situations where this isn't the        * case.        *        * The alternative is to add an overloaded method, but the chances of a user calling get()        * instead of the new API and the risks inherent in adding a new API outweigh this little        * hole.        */
name|K
name|castKey
init|=
operator|(
name|K
operator|)
name|key
decl_stmt|;
name|calculatedValue
operator|=
name|loader
operator|.
name|load
argument_list|(
name|castKey
argument_list|)
expr_stmt|;
name|put
argument_list|(
name|castKey
argument_list|,
name|calculatedValue
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
name|statsCounter
operator|.
name|recordLoadException
argument_list|(
name|ticker
operator|.
name|read
argument_list|()
operator|-
name|startTime
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|UncheckedExecutionException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|statsCounter
operator|.
name|recordLoadException
argument_list|(
name|ticker
operator|.
name|read
argument_list|()
operator|-
name|startTime
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ExecutionException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|Error
name|e
parameter_list|)
block|{
name|statsCounter
operator|.
name|recordLoadException
argument_list|(
name|ticker
operator|.
name|read
argument_list|()
operator|-
name|startTime
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ExecutionError
argument_list|(
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|calculatedValue
operator|==
literal|null
condition|)
block|{
name|String
name|message
init|=
name|loader
operator|+
literal|" returned null for key "
operator|+
name|key
operator|+
literal|"."
decl_stmt|;
throw|throw
operator|new
name|CacheLoader
operator|.
name|InvalidCacheLoadException
argument_list|(
name|message
argument_list|)
throw|;
block|}
name|statsCounter
operator|.
name|recordLoadSuccess
argument_list|(
name|ticker
operator|.
name|read
argument_list|()
operator|-
name|startTime
argument_list|)
expr_stmt|;
return|return
name|calculatedValue
return|;
block|}
DECL|method|getIfPresent (Object key)
specifier|private
name|V
name|getIfPresent
parameter_list|(
name|Object
name|key
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|Timestamped
argument_list|<
name|V
argument_list|>
name|value
init|=
name|cachingHashMap
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
elseif|else
if|if
condition|(
operator|!
name|isExpired
argument_list|(
name|value
argument_list|)
condition|)
block|{
name|value
operator|.
name|updateTimestamp
argument_list|()
expr_stmt|;
return|return
name|value
operator|.
name|getValue
argument_list|()
return|;
block|}
else|else
block|{
name|alertListenerIfPresent
argument_list|(
name|key
argument_list|,
name|value
operator|.
name|getValue
argument_list|()
argument_list|,
name|RemovalCause
operator|.
name|EXPIRED
argument_list|)
expr_stmt|;
name|cachingHashMap
operator|.
name|remove
argument_list|(
name|key
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
DECL|method|getOrLoad (K key)
specifier|private
name|V
name|getOrLoad
parameter_list|(
name|K
name|key
parameter_list|)
throws|throws
name|ExecutionException
block|{
name|V
name|value
init|=
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
return|return
name|value
return|;
block|}
return|return
name|load
argument_list|(
name|key
argument_list|)
return|;
block|}
DECL|class|Timestamped
specifier|private
specifier|static
class|class
name|Timestamped
parameter_list|<
name|V
parameter_list|>
block|{
DECL|field|value
specifier|private
specifier|final
name|V
name|value
decl_stmt|;
DECL|field|ticker
specifier|private
specifier|final
name|Ticker
name|ticker
decl_stmt|;
DECL|field|writeTimestamp
specifier|private
name|long
name|writeTimestamp
decl_stmt|;
DECL|field|accessTimestamp
specifier|private
name|long
name|accessTimestamp
decl_stmt|;
DECL|method|Timestamped (V value, Ticker ticker)
specifier|public
name|Timestamped
parameter_list|(
name|V
name|value
parameter_list|,
name|Ticker
name|ticker
parameter_list|)
block|{
name|this
operator|.
name|value
operator|=
name|checkNotNull
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|this
operator|.
name|ticker
operator|=
name|checkNotNull
argument_list|(
name|ticker
argument_list|)
expr_stmt|;
name|this
operator|.
name|writeTimestamp
operator|=
name|ticker
operator|.
name|read
argument_list|()
expr_stmt|;
name|this
operator|.
name|accessTimestamp
operator|=
name|this
operator|.
name|writeTimestamp
expr_stmt|;
block|}
DECL|method|getValue ()
specifier|public
name|V
name|getValue
parameter_list|()
block|{
return|return
name|value
return|;
block|}
DECL|method|updateTimestamp ()
specifier|public
name|void
name|updateTimestamp
parameter_list|()
block|{
name|accessTimestamp
operator|=
name|ticker
operator|.
name|read
argument_list|()
expr_stmt|;
block|}
DECL|method|getAccessTimestamp ()
specifier|public
name|long
name|getAccessTimestamp
parameter_list|()
block|{
return|return
name|accessTimestamp
return|;
block|}
DECL|method|getWriteTimestamp ()
specifier|public
name|long
name|getWriteTimestamp
parameter_list|()
block|{
return|return
name|writeTimestamp
return|;
block|}
DECL|method|equals (Object o)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
return|return
name|value
operator|.
name|equals
argument_list|(
name|o
argument_list|)
return|;
block|}
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|value
operator|.
name|hashCode
argument_list|()
return|;
block|}
block|}
comment|/**    * LocalManualCache is a wrapper around LocalCache for a cache without loading.    *    * @param<K> the base key type    * @param<V> the base value type    */
DECL|class|LocalManualCache
specifier|public
specifier|static
class|class
name|LocalManualCache
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
extends|extends
name|AbstractCache
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
block|{
DECL|field|localCache
specifier|final
name|LocalCache
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|localCache
decl_stmt|;
DECL|method|LocalManualCache (CacheBuilder<? super K, ? super V> builder)
name|LocalManualCache
parameter_list|(
name|CacheBuilder
argument_list|<
name|?
super|super
name|K
argument_list|,
name|?
super|super
name|V
argument_list|>
name|builder
parameter_list|)
block|{
name|this
argument_list|(
name|builder
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|LocalManualCache ( CacheBuilder<? super K, ? super V> builder, CacheLoader<? super K, V> loader)
specifier|protected
name|LocalManualCache
parameter_list|(
name|CacheBuilder
argument_list|<
name|?
super|super
name|K
argument_list|,
name|?
super|super
name|V
argument_list|>
name|builder
parameter_list|,
name|CacheLoader
argument_list|<
name|?
super|super
name|K
argument_list|,
name|V
argument_list|>
name|loader
parameter_list|)
block|{
name|this
operator|.
name|localCache
operator|=
operator|new
name|LocalCache
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|(
name|builder
argument_list|,
name|loader
argument_list|)
expr_stmt|;
block|}
comment|// Cache methods
annotation|@
name|Override
DECL|method|get (K key, Callable<? extends V> valueLoader)
specifier|public
name|V
name|get
parameter_list|(
name|K
name|key
parameter_list|,
name|Callable
argument_list|<
name|?
extends|extends
name|V
argument_list|>
name|valueLoader
parameter_list|)
throws|throws
name|ExecutionException
block|{
name|V
name|value
init|=
name|localCache
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
return|return
name|value
return|;
block|}
try|try
block|{
name|V
name|newValue
init|=
name|valueLoader
operator|.
name|call
argument_list|()
decl_stmt|;
name|localCache
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|newValue
argument_list|)
expr_stmt|;
return|return
name|newValue
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ExecutionException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
annotation|@
name|Nullable
DECL|method|getIfPresent (Object key)
specifier|public
name|V
name|getIfPresent
parameter_list|(
name|Object
name|key
parameter_list|)
block|{
return|return
name|localCache
operator|.
name|getIfPresent
argument_list|(
name|key
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|put (K key, V value)
specifier|public
name|void
name|put
parameter_list|(
name|K
name|key
parameter_list|,
name|V
name|value
parameter_list|)
block|{
name|localCache
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|invalidate (Object key)
specifier|public
name|void
name|invalidate
parameter_list|(
name|Object
name|key
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|localCache
operator|.
name|remove
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|invalidateAll ()
specifier|public
name|void
name|invalidateAll
parameter_list|()
block|{
name|localCache
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|size ()
specifier|public
name|long
name|size
parameter_list|()
block|{
return|return
name|localCache
operator|.
name|size
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|asMap ()
specifier|public
name|ConcurrentMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|asMap
parameter_list|()
block|{
return|return
name|localCache
return|;
block|}
block|}
comment|/**    * LocalLoadingCache is a wrapper around LocalCache for a cache with loading.    *    * @param<K> the base key type    * @param<V> the base value type    */
DECL|class|LocalLoadingCache
specifier|public
specifier|static
class|class
name|LocalLoadingCache
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
extends|extends
name|LocalManualCache
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
implements|implements
name|LoadingCache
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
block|{
DECL|method|LocalLoadingCache ( CacheBuilder<? super K, ? super V> builder, CacheLoader<? super K, V> loader)
name|LocalLoadingCache
parameter_list|(
name|CacheBuilder
argument_list|<
name|?
super|super
name|K
argument_list|,
name|?
super|super
name|V
argument_list|>
name|builder
parameter_list|,
name|CacheLoader
argument_list|<
name|?
super|super
name|K
argument_list|,
name|V
argument_list|>
name|loader
parameter_list|)
block|{
name|super
argument_list|(
name|builder
argument_list|,
name|checkNotNull
argument_list|(
name|loader
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Cache methods
annotation|@
name|Override
DECL|method|get (K key)
specifier|public
name|V
name|get
parameter_list|(
name|K
name|key
parameter_list|)
throws|throws
name|ExecutionException
block|{
return|return
name|localCache
operator|.
name|getOrLoad
argument_list|(
name|key
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getUnchecked (K key)
specifier|public
name|V
name|getUnchecked
parameter_list|(
name|K
name|key
parameter_list|)
block|{
try|try
block|{
return|return
name|get
argument_list|(
name|key
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|UncheckedExecutionException
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|apply (K key)
specifier|public
specifier|final
name|V
name|apply
parameter_list|(
name|K
name|key
parameter_list|)
block|{
return|return
name|getUnchecked
argument_list|(
name|key
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getAll (Iterable<? extends K> keys)
specifier|public
name|ImmutableMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|getAll
parameter_list|(
name|Iterable
argument_list|<
name|?
extends|extends
name|K
argument_list|>
name|keys
parameter_list|)
throws|throws
name|ExecutionException
block|{
name|Map
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|K
name|key
range|:
name|keys
control|)
block|{
name|map
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|localCache
operator|.
name|getOrLoad
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|ImmutableMap
operator|.
name|copyOf
argument_list|(
name|map
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|refresh (K key)
specifier|public
name|void
name|refresh
parameter_list|(
name|K
name|key
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
comment|/**    * LinkedHashMap that enforces it's maximum size and logs events in a StatsCounter object and an    * optional RemovalListener.    *    * @param<K> the base key type    * @param<V> the base value type    */
DECL|class|CapacityEnforcingLinkedHashMap
specifier|private
class|class
name|CapacityEnforcingLinkedHashMap
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
extends|extends
name|LinkedHashMap
argument_list|<
name|K
argument_list|,
name|Timestamped
argument_list|<
name|V
argument_list|>
argument_list|>
block|{
DECL|field|statsCounter
specifier|private
specifier|final
name|StatsCounter
name|statsCounter
decl_stmt|;
DECL|field|removalListener
specifier|private
specifier|final
name|RemovalListener
name|removalListener
decl_stmt|;
DECL|field|maximumSize
specifier|private
specifier|final
name|long
name|maximumSize
decl_stmt|;
DECL|method|CapacityEnforcingLinkedHashMap ( int initialCapacity, float loadFactor, boolean accessOrder, long maximumSize, StatsCounter statsCounter, @Nullable RemovalListener removalListener)
specifier|public
name|CapacityEnforcingLinkedHashMap
parameter_list|(
name|int
name|initialCapacity
parameter_list|,
name|float
name|loadFactor
parameter_list|,
name|boolean
name|accessOrder
parameter_list|,
name|long
name|maximumSize
parameter_list|,
name|StatsCounter
name|statsCounter
parameter_list|,
annotation|@
name|Nullable
name|RemovalListener
name|removalListener
parameter_list|)
block|{
name|super
argument_list|(
name|initialCapacity
argument_list|,
name|loadFactor
argument_list|,
name|accessOrder
argument_list|)
expr_stmt|;
name|this
operator|.
name|maximumSize
operator|=
name|maximumSize
expr_stmt|;
name|this
operator|.
name|statsCounter
operator|=
name|statsCounter
expr_stmt|;
name|this
operator|.
name|removalListener
operator|=
name|removalListener
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|removeEldestEntry (Entry<K, Timestamped<V>> ignored)
specifier|protected
name|boolean
name|removeEldestEntry
parameter_list|(
name|Entry
argument_list|<
name|K
argument_list|,
name|Timestamped
argument_list|<
name|V
argument_list|>
argument_list|>
name|ignored
parameter_list|)
block|{
name|boolean
name|removal
init|=
operator|(
name|maximumSize
operator|==
name|UNSET_INT
operator|)
condition|?
literal|false
else|:
operator|(
name|size
argument_list|()
operator|>
name|maximumSize
operator|)
decl_stmt|;
if|if
condition|(
operator|(
name|removalListener
operator|!=
literal|null
operator|)
operator|&&
name|removal
condition|)
block|{
name|removalListener
operator|.
name|onRemoval
argument_list|(
name|RemovalNotification
operator|.
name|create
argument_list|(
name|ignored
operator|.
name|getKey
argument_list|()
argument_list|,
name|ignored
operator|.
name|getValue
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|,
name|RemovalCause
operator|.
name|SIZE
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|statsCounter
operator|.
name|recordEviction
argument_list|()
expr_stmt|;
return|return
name|removal
return|;
block|}
block|}
comment|/**    * Any updates to LocalCache.Strength used in CacheBuilder need to be matched in this class for    * compilation purposes.    */
DECL|enum|Strength
enum|enum
name|Strength
block|{
comment|/*      * TODO(kevinb): If we strongly reference the value and aren't loading, we needn't wrap the      * value. This could save ~8 bytes per entry.      */
DECL|enumConstant|STRONG
name|STRONG
block|{
annotation|@
name|Override
name|Equivalence
argument_list|<
name|Object
argument_list|>
name|defaultEquivalence
parameter_list|()
block|{
return|return
name|Equivalence
operator|.
name|equals
argument_list|()
return|;
block|}
block|}
block|,
DECL|enumConstant|SOFT
name|SOFT
block|{
annotation|@
name|Override
name|Equivalence
argument_list|<
name|Object
argument_list|>
name|defaultEquivalence
parameter_list|()
block|{
return|return
name|Equivalence
operator|.
name|identity
argument_list|()
return|;
block|}
block|}
block|,
DECL|enumConstant|WEAK
name|WEAK
block|{
annotation|@
name|Override
name|Equivalence
argument_list|<
name|Object
argument_list|>
name|defaultEquivalence
parameter_list|()
block|{
return|return
name|Equivalence
operator|.
name|identity
argument_list|()
return|;
block|}
block|}
block|;
DECL|method|defaultEquivalence ()
specifier|abstract
name|Equivalence
argument_list|<
name|Object
argument_list|>
name|defaultEquivalence
parameter_list|()
function_decl|;
block|}
comment|/**    * Implementation for the EntryIterator, which is used to build Key and Value iterators.    *    *<p>Expiration is only checked on hasNext(), so as to ensure that a next() call never returns    * null when hasNext() has already been called.    */
DECL|class|EntryIterator
class|class
name|EntryIterator
implements|implements
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
block|{
DECL|field|iterator
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|K
argument_list|,
name|Timestamped
argument_list|<
name|V
argument_list|>
argument_list|>
argument_list|>
name|iterator
decl_stmt|;
DECL|field|lastEntry
name|Entry
argument_list|<
name|K
argument_list|,
name|Timestamped
argument_list|<
name|V
argument_list|>
argument_list|>
name|lastEntry
decl_stmt|;
DECL|field|nextEntry
name|Entry
argument_list|<
name|K
argument_list|,
name|Timestamped
argument_list|<
name|V
argument_list|>
argument_list|>
name|nextEntry
decl_stmt|;
DECL|method|EntryIterator ()
name|EntryIterator
parameter_list|()
block|{
name|this
operator|.
name|iterator
operator|=
name|LocalCache
operator|.
name|this
operator|.
name|cachingHashMap
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|next ()
specifier|public
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|next
parameter_list|()
block|{
if|if
condition|(
name|nextEntry
operator|==
literal|null
condition|)
block|{
name|hasNext
argument_list|()
expr_stmt|;
if|if
condition|(
name|nextEntry
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NoSuchElementException
argument_list|()
throw|;
block|}
block|}
name|lastEntry
operator|=
name|nextEntry
expr_stmt|;
name|nextEntry
operator|=
literal|null
expr_stmt|;
return|return
operator|new
name|WriteThroughEntry
argument_list|(
name|lastEntry
operator|.
name|getKey
argument_list|()
argument_list|,
name|lastEntry
operator|.
name|getValue
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|hasNext ()
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
if|if
condition|(
name|nextEntry
operator|==
literal|null
condition|)
block|{
while|while
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Entry
argument_list|<
name|K
argument_list|,
name|Timestamped
argument_list|<
name|V
argument_list|>
argument_list|>
name|next
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|isExpired
argument_list|(
name|next
operator|.
name|getValue
argument_list|()
argument_list|)
condition|)
block|{
name|nextEntry
operator|=
name|next
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|remove ()
specifier|public
name|void
name|remove
parameter_list|()
block|{
name|checkState
argument_list|(
name|lastEntry
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|LocalCache
operator|.
name|this
operator|.
name|remove
argument_list|(
name|lastEntry
operator|.
name|getKey
argument_list|()
argument_list|,
name|lastEntry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|lastEntry
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|/** KeyIterator build on top of EntryIterator. */
DECL|class|KeyIterator
specifier|final
class|class
name|KeyIterator
implements|implements
name|Iterator
argument_list|<
name|K
argument_list|>
block|{
DECL|field|iterator
specifier|private
name|EntryIterator
name|iterator
decl_stmt|;
DECL|method|KeyIterator ()
name|KeyIterator
parameter_list|()
block|{
name|iterator
operator|=
operator|new
name|EntryIterator
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|hasNext ()
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|iterator
operator|.
name|hasNext
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|next ()
specifier|public
name|K
name|next
parameter_list|()
block|{
return|return
name|iterator
operator|.
name|next
argument_list|()
operator|.
name|getKey
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|remove ()
specifier|public
name|void
name|remove
parameter_list|()
block|{
name|iterator
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
comment|/** ValueIterator build on top of EntryIterator. */
DECL|class|ValueIterator
specifier|final
class|class
name|ValueIterator
implements|implements
name|Iterator
argument_list|<
name|V
argument_list|>
block|{
DECL|field|iterator
specifier|private
name|EntryIterator
name|iterator
decl_stmt|;
DECL|method|ValueIterator ()
name|ValueIterator
parameter_list|()
block|{
name|iterator
operator|=
operator|new
name|EntryIterator
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|hasNext ()
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|iterator
operator|.
name|hasNext
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|next ()
specifier|public
name|V
name|next
parameter_list|()
block|{
return|return
name|iterator
operator|.
name|next
argument_list|()
operator|.
name|getValue
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|remove ()
specifier|public
name|void
name|remove
parameter_list|()
block|{
name|iterator
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
DECL|field|keySet
name|Set
argument_list|<
name|K
argument_list|>
name|keySet
decl_stmt|;
annotation|@
name|Override
DECL|method|keySet ()
specifier|public
name|Set
argument_list|<
name|K
argument_list|>
name|keySet
parameter_list|()
block|{
comment|// does not impact recency ordering
name|Set
argument_list|<
name|K
argument_list|>
name|ks
init|=
name|keySet
decl_stmt|;
return|return
operator|(
name|ks
operator|!=
literal|null
operator|)
condition|?
name|ks
else|:
operator|(
name|keySet
operator|=
operator|new
name|KeySet
argument_list|(
name|this
argument_list|)
operator|)
return|;
block|}
DECL|field|values
name|Collection
argument_list|<
name|V
argument_list|>
name|values
decl_stmt|;
annotation|@
name|Override
DECL|method|values ()
specifier|public
name|Collection
argument_list|<
name|V
argument_list|>
name|values
parameter_list|()
block|{
comment|// does not impact recency ordering
name|Collection
argument_list|<
name|V
argument_list|>
name|vs
init|=
name|values
decl_stmt|;
return|return
operator|(
name|vs
operator|!=
literal|null
operator|)
condition|?
name|vs
else|:
operator|(
name|values
operator|=
operator|new
name|Values
argument_list|(
name|this
argument_list|)
operator|)
return|;
block|}
DECL|field|entrySet
name|Set
argument_list|<
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|entrySet
decl_stmt|;
annotation|@
name|Override
DECL|method|entrySet ()
specifier|public
name|Set
argument_list|<
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|entrySet
parameter_list|()
block|{
comment|// does not impact recency ordering
name|Set
argument_list|<
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|es
init|=
name|entrySet
decl_stmt|;
return|return
operator|(
name|es
operator|!=
literal|null
operator|)
condition|?
name|es
else|:
operator|(
name|entrySet
operator|=
operator|new
name|EntrySet
argument_list|(
name|this
argument_list|)
operator|)
return|;
block|}
comment|/**    * Custom Entry class used by EntryIterator.next(), that relays setValue changes to the underlying    * map.    */
DECL|class|WriteThroughEntry
specifier|private
specifier|final
class|class
name|WriteThroughEntry
implements|implements
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
block|{
DECL|field|key
specifier|final
name|K
name|key
decl_stmt|;
DECL|field|value
name|V
name|value
decl_stmt|;
DECL|method|WriteThroughEntry (K key, V value)
name|WriteThroughEntry
parameter_list|(
name|K
name|key
parameter_list|,
name|V
name|value
parameter_list|)
block|{
name|this
operator|.
name|key
operator|=
name|checkNotNull
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|this
operator|.
name|value
operator|=
name|checkNotNull
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getKey ()
specifier|public
name|K
name|getKey
parameter_list|()
block|{
return|return
name|key
return|;
block|}
annotation|@
name|Override
DECL|method|getValue ()
specifier|public
name|V
name|getValue
parameter_list|()
block|{
return|return
name|value
return|;
block|}
annotation|@
name|Override
DECL|method|equals (@ullable Object object)
specifier|public
name|boolean
name|equals
parameter_list|(
annotation|@
name|Nullable
name|Object
name|object
parameter_list|)
block|{
comment|// Cannot use key and value equivalence
if|if
condition|(
name|object
operator|instanceof
name|Entry
condition|)
block|{
name|Entry
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|that
init|=
operator|(
name|Entry
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|object
decl_stmt|;
return|return
name|key
operator|.
name|equals
argument_list|(
name|that
operator|.
name|getKey
argument_list|()
argument_list|)
operator|&&
name|value
operator|.
name|equals
argument_list|(
name|that
operator|.
name|getValue
argument_list|()
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
comment|// Cannot use key and value equivalence
return|return
name|key
operator|.
name|hashCode
argument_list|()
operator|^
name|value
operator|.
name|hashCode
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|setValue (V newValue)
specifier|public
name|V
name|setValue
parameter_list|(
name|V
name|newValue
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|getKey
argument_list|()
operator|+
literal|"="
operator|+
name|getValue
argument_list|()
return|;
block|}
block|}
comment|// TODO(fry): Separate logic for consistency between emul and nonemul implementation.
comment|// TODO(fry): Look into Maps.KeySet and Maps.Values, which can ideally be reused here but are
comment|// currently only package visible.
DECL|class|AbstractCacheSet
specifier|abstract
class|class
name|AbstractCacheSet
parameter_list|<
name|T
parameter_list|>
extends|extends
name|AbstractSet
argument_list|<
name|T
argument_list|>
block|{
DECL|field|map
specifier|final
name|ConcurrentMap
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|map
decl_stmt|;
DECL|method|AbstractCacheSet (ConcurrentMap<?, ?> map)
name|AbstractCacheSet
parameter_list|(
name|ConcurrentMap
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|map
parameter_list|)
block|{
name|this
operator|.
name|map
operator|=
name|map
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|size ()
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|map
operator|.
name|size
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|isEmpty ()
specifier|public
name|boolean
name|isEmpty
parameter_list|()
block|{
return|return
name|map
operator|.
name|isEmpty
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|clear ()
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|map
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
DECL|class|KeySet
specifier|private
specifier|final
class|class
name|KeySet
extends|extends
name|AbstractCacheSet
argument_list|<
name|K
argument_list|>
block|{
DECL|method|KeySet (ConcurrentMap<?, ?> map)
name|KeySet
parameter_list|(
name|ConcurrentMap
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|map
parameter_list|)
block|{
name|super
argument_list|(
name|map
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|iterator ()
specifier|public
name|Iterator
argument_list|<
name|K
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
operator|new
name|KeyIterator
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|contains (Object o)
specifier|public
name|boolean
name|contains
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
return|return
name|map
operator|.
name|containsKey
argument_list|(
name|o
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|remove (Object o)
specifier|public
name|boolean
name|remove
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
return|return
name|map
operator|.
name|remove
argument_list|(
name|o
argument_list|)
operator|!=
literal|null
return|;
block|}
block|}
DECL|class|Values
specifier|private
specifier|final
class|class
name|Values
extends|extends
name|AbstractCollection
argument_list|<
name|V
argument_list|>
block|{
DECL|field|map
specifier|final
name|ConcurrentMap
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|map
decl_stmt|;
DECL|method|Values (ConcurrentMap<?, ?> map)
name|Values
parameter_list|(
name|ConcurrentMap
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|map
parameter_list|)
block|{
name|this
operator|.
name|map
operator|=
name|map
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|iterator ()
specifier|public
name|Iterator
argument_list|<
name|V
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
operator|new
name|ValueIterator
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|contains (Object o)
specifier|public
name|boolean
name|contains
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
return|return
name|map
operator|.
name|containsValue
argument_list|(
name|o
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|size ()
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|map
operator|.
name|size
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|isEmpty ()
specifier|public
name|boolean
name|isEmpty
parameter_list|()
block|{
return|return
name|map
operator|.
name|isEmpty
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|clear ()
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|map
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
DECL|class|EntrySet
specifier|private
specifier|final
class|class
name|EntrySet
extends|extends
name|AbstractCacheSet
argument_list|<
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
block|{
DECL|method|EntrySet (ConcurrentMap<?, ?> map)
name|EntrySet
parameter_list|(
name|ConcurrentMap
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|map
parameter_list|)
block|{
name|super
argument_list|(
name|map
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|iterator ()
specifier|public
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
operator|new
name|EntryIterator
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|contains (Object o)
specifier|public
name|boolean
name|contains
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|o
operator|instanceof
name|Entry
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|Entry
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|e
init|=
operator|(
name|Entry
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|o
decl_stmt|;
name|Object
name|key
init|=
name|e
operator|.
name|getKey
argument_list|()
decl_stmt|;
if|if
condition|(
name|key
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
name|V
name|v
init|=
name|LocalCache
operator|.
name|this
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
return|return
operator|(
name|v
operator|!=
literal|null
operator|)
operator|&&
name|e
operator|.
name|getValue
argument_list|()
operator|.
name|equals
argument_list|(
name|v
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|remove (Object o)
specifier|public
name|boolean
name|remove
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|o
operator|instanceof
name|Entry
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|Entry
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|e
init|=
operator|(
name|Entry
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|o
decl_stmt|;
name|Object
name|key
init|=
name|e
operator|.
name|getKey
argument_list|()
decl_stmt|;
return|return
operator|(
name|key
operator|!=
literal|null
operator|)
operator|&&
name|LocalCache
operator|.
name|this
operator|.
name|remove
argument_list|(
name|key
argument_list|,
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

