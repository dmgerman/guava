begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2009 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except  * in compliance with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software distributed under the  * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either  * express or implied. See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.collect
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtCompatible
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_comment
comment|/**  * List returned by {@code ImmutableSortedSet.asList()} when the set isn't empty.  *  * @author Jared Levy  * @author Louis Wasserman  */
end_comment

begin_class
annotation|@
name|GwtCompatible
argument_list|(
name|emulated
operator|=
literal|true
argument_list|)
annotation|@
name|SuppressWarnings
argument_list|(
literal|"serial"
argument_list|)
DECL|class|ImmutableSortedAsList
specifier|final
class|class
name|ImmutableSortedAsList
parameter_list|<
name|E
parameter_list|>
extends|extends
name|RegularImmutableAsList
argument_list|<
name|E
argument_list|>
implements|implements
name|SortedIterable
argument_list|<
name|E
argument_list|>
block|{
DECL|method|ImmutableSortedAsList ( ImmutableSortedSet<E> backingSet, ImmutableList<E> backingList)
name|ImmutableSortedAsList
parameter_list|(
name|ImmutableSortedSet
argument_list|<
name|E
argument_list|>
name|backingSet
parameter_list|,
name|ImmutableList
argument_list|<
name|E
argument_list|>
name|backingList
parameter_list|)
block|{
name|super
argument_list|(
name|backingSet
argument_list|,
name|backingList
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|delegateCollection ()
name|ImmutableSortedSet
argument_list|<
name|E
argument_list|>
name|delegateCollection
parameter_list|()
block|{
return|return
operator|(
name|ImmutableSortedSet
argument_list|<
name|E
argument_list|>
operator|)
name|super
operator|.
name|delegateCollection
argument_list|()
return|;
block|}
DECL|method|comparator ()
annotation|@
name|Override
specifier|public
name|Comparator
argument_list|<
name|?
super|super
name|E
argument_list|>
name|comparator
parameter_list|()
block|{
return|return
name|delegateCollection
argument_list|()
operator|.
name|comparator
argument_list|()
return|;
block|}
comment|// Override indexOf() and lastIndexOf() to be O(log N) instead of O(N).
annotation|@
name|Override
DECL|method|contains (Object target)
specifier|public
name|boolean
name|contains
parameter_list|(
name|Object
name|target
parameter_list|)
block|{
comment|// Necessary for ISS's with comparators inconsistent with equals.
return|return
name|indexOf
argument_list|(
name|target
argument_list|)
operator|>=
literal|0
return|;
block|}
block|}
end_class

end_unit

