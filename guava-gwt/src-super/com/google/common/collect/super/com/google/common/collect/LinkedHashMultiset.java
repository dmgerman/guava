begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2007 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.collect
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtCompatible
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_comment
comment|/**  * A {@code Multiset} implementation with predictable iteration order. Its  * iterator orders elements according to when the first occurrence of the  * element was added. When the multiset contains multiple instances of an  * element, those instances are consecutive in the iteration order. If all  * occurrences of an element are removed, after which that element is added to  * the multiset, the element will appear at the end of the iteration.  *  * @author Kevin Bourrillion  * @author Jared Levy  * @since 2.0 (imported from Google Collections Library)  */
end_comment

begin_class
annotation|@
name|GwtCompatible
argument_list|(
name|serializable
operator|=
literal|true
argument_list|,
name|emulated
operator|=
literal|true
argument_list|)
annotation|@
name|SuppressWarnings
argument_list|(
literal|"serial"
argument_list|)
comment|// we're overriding default serialization
DECL|class|LinkedHashMultiset
specifier|public
specifier|final
class|class
name|LinkedHashMultiset
parameter_list|<
name|E
parameter_list|>
extends|extends
name|AbstractMapBasedMultiset
argument_list|<
name|E
argument_list|>
block|{
comment|/**    * Creates a new, empty {@code LinkedHashMultiset} using the default initial    * capacity.    */
DECL|method|create ()
specifier|public
specifier|static
parameter_list|<
name|E
parameter_list|>
name|LinkedHashMultiset
argument_list|<
name|E
argument_list|>
name|create
parameter_list|()
block|{
return|return
operator|new
name|LinkedHashMultiset
argument_list|<
name|E
argument_list|>
argument_list|()
return|;
block|}
comment|/**    * Creates a new, empty {@code LinkedHashMultiset} with the specified expected    * number of distinct elements.    *    * @param distinctElements the expected number of distinct elements    * @throws IllegalArgumentException if {@code distinctElements} is negative    */
DECL|method|create (int distinctElements)
specifier|public
specifier|static
parameter_list|<
name|E
parameter_list|>
name|LinkedHashMultiset
argument_list|<
name|E
argument_list|>
name|create
parameter_list|(
name|int
name|distinctElements
parameter_list|)
block|{
return|return
operator|new
name|LinkedHashMultiset
argument_list|<
name|E
argument_list|>
argument_list|(
name|distinctElements
argument_list|)
return|;
block|}
comment|/**    * Creates a new {@code LinkedHashMultiset} containing the specified elements.    *    *<p>This implementation is highly efficient when {@code elements} is itself    * a {@link Multiset}.    *    * @param elements the elements that the multiset should contain    */
DECL|method|create ( Iterable<? extends E> elements)
specifier|public
specifier|static
parameter_list|<
name|E
parameter_list|>
name|LinkedHashMultiset
argument_list|<
name|E
argument_list|>
name|create
parameter_list|(
name|Iterable
argument_list|<
name|?
extends|extends
name|E
argument_list|>
name|elements
parameter_list|)
block|{
name|LinkedHashMultiset
argument_list|<
name|E
argument_list|>
name|multiset
init|=
name|create
argument_list|(
name|Multisets
operator|.
name|inferDistinctElements
argument_list|(
name|elements
argument_list|)
argument_list|)
decl_stmt|;
name|Iterables
operator|.
name|addAll
argument_list|(
name|multiset
argument_list|,
name|elements
argument_list|)
expr_stmt|;
return|return
name|multiset
return|;
block|}
DECL|method|LinkedHashMultiset ()
specifier|private
name|LinkedHashMultiset
parameter_list|()
block|{
name|super
argument_list|(
operator|new
name|LinkedHashMap
argument_list|<
name|E
argument_list|,
name|Count
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|LinkedHashMultiset (int distinctElements)
specifier|private
name|LinkedHashMultiset
parameter_list|(
name|int
name|distinctElements
parameter_list|)
block|{
comment|// Could use newLinkedHashMapWithExpectedSize() if it existed
name|super
argument_list|(
operator|new
name|LinkedHashMap
argument_list|<
name|E
argument_list|,
name|Count
argument_list|>
argument_list|(
name|Maps
operator|.
name|capacity
argument_list|(
name|distinctElements
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

