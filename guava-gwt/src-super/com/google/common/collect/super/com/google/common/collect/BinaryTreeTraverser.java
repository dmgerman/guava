begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2012 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.collect
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_comment
comment|/**  * A variant of {@link TreeTraverser} for binary trees, providing additional traversals specific to  * binary trees.  *  * @author Louis Wasserman  */
end_comment

begin_class
DECL|class|BinaryTreeTraverser
specifier|public
specifier|abstract
class|class
name|BinaryTreeTraverser
parameter_list|<
name|T
parameter_list|>
extends|extends
name|TreeTraverser
argument_list|<
name|T
argument_list|>
block|{
comment|// TODO(lowasser): make this GWT-compatible when we've checked in ArrayDeque and BitSet emulation
comment|/**    * Returns the left child of the specified node, or {@link Optional#absent()} if the specified    * node has no left child.    */
DECL|method|leftChild (T root)
specifier|public
specifier|abstract
name|Optional
argument_list|<
name|T
argument_list|>
name|leftChild
parameter_list|(
name|T
name|root
parameter_list|)
function_decl|;
comment|/**    * Returns the right child of the specified node, or {@link Optional#absent()} if the specified    * node has no right child.    */
DECL|method|rightChild (T root)
specifier|public
specifier|abstract
name|Optional
argument_list|<
name|T
argument_list|>
name|rightChild
parameter_list|(
name|T
name|root
parameter_list|)
function_decl|;
comment|/**    * Returns the children of this node, in left-to-right order.    */
annotation|@
name|Override
DECL|method|children (final T root)
specifier|public
specifier|final
name|Iterable
argument_list|<
name|T
argument_list|>
name|children
parameter_list|(
specifier|final
name|T
name|root
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|root
argument_list|)
expr_stmt|;
return|return
operator|new
name|FluentIterable
argument_list|<
name|T
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|T
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
operator|new
name|AbstractIterator
argument_list|<
name|T
argument_list|>
argument_list|()
block|{
name|boolean
name|doneLeft
decl_stmt|;
name|boolean
name|doneRight
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|T
name|computeNext
parameter_list|()
block|{
if|if
condition|(
operator|!
name|doneLeft
condition|)
block|{
name|doneLeft
operator|=
literal|true
expr_stmt|;
name|Optional
argument_list|<
name|T
argument_list|>
name|left
init|=
name|leftChild
argument_list|(
name|root
argument_list|)
decl_stmt|;
if|if
condition|(
name|left
operator|.
name|isPresent
argument_list|()
condition|)
block|{
return|return
name|left
operator|.
name|get
argument_list|()
return|;
block|}
block|}
if|if
condition|(
operator|!
name|doneRight
condition|)
block|{
name|doneRight
operator|=
literal|true
expr_stmt|;
name|Optional
argument_list|<
name|T
argument_list|>
name|right
init|=
name|rightChild
argument_list|(
name|root
argument_list|)
decl_stmt|;
if|if
condition|(
name|right
operator|.
name|isPresent
argument_list|()
condition|)
block|{
return|return
name|right
operator|.
name|get
argument_list|()
return|;
block|}
block|}
return|return
name|endOfData
argument_list|()
return|;
block|}
block|}
return|;
block|}
block|}
return|;
block|}
comment|// TODO(lowasser): see if any significant optimizations are possible for breadthFirstIterator
DECL|method|inOrderTraversal (final T root)
specifier|public
specifier|final
name|FluentIterable
argument_list|<
name|T
argument_list|>
name|inOrderTraversal
parameter_list|(
specifier|final
name|T
name|root
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|root
argument_list|)
expr_stmt|;
return|return
operator|new
name|FluentIterable
argument_list|<
name|T
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|UnmodifiableIterator
argument_list|<
name|T
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
operator|new
name|InOrderIterator
argument_list|(
name|root
argument_list|)
return|;
block|}
block|}
return|;
block|}
DECL|class|InOrderNode
specifier|private
specifier|static
specifier|final
class|class
name|InOrderNode
parameter_list|<
name|T
parameter_list|>
block|{
DECL|field|node
specifier|final
name|T
name|node
decl_stmt|;
DECL|field|hasExpandedLeft
name|boolean
name|hasExpandedLeft
decl_stmt|;
DECL|method|InOrderNode (T node)
name|InOrderNode
parameter_list|(
name|T
name|node
parameter_list|)
block|{
name|this
operator|.
name|node
operator|=
name|checkNotNull
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|this
operator|.
name|hasExpandedLeft
operator|=
literal|false
expr_stmt|;
block|}
block|}
DECL|class|InOrderIterator
specifier|private
specifier|final
class|class
name|InOrderIterator
extends|extends
name|AbstractIterator
argument_list|<
name|T
argument_list|>
block|{
DECL|field|stack
specifier|private
specifier|final
name|LinkedList
argument_list|<
name|InOrderNode
argument_list|<
name|T
argument_list|>
argument_list|>
name|stack
decl_stmt|;
DECL|method|InOrderIterator (T root)
name|InOrderIterator
parameter_list|(
name|T
name|root
parameter_list|)
block|{
name|this
operator|.
name|stack
operator|=
name|Lists
operator|.
name|newLinkedList
argument_list|()
expr_stmt|;
name|stack
operator|.
name|addLast
argument_list|(
operator|new
name|InOrderNode
argument_list|<
name|T
argument_list|>
argument_list|(
name|root
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|computeNext ()
specifier|protected
name|T
name|computeNext
parameter_list|()
block|{
while|while
condition|(
operator|!
name|stack
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|InOrderNode
argument_list|<
name|T
argument_list|>
name|inOrderNode
init|=
name|stack
operator|.
name|getLast
argument_list|()
decl_stmt|;
if|if
condition|(
name|inOrderNode
operator|.
name|hasExpandedLeft
condition|)
block|{
name|stack
operator|.
name|removeLast
argument_list|()
expr_stmt|;
name|pushIfPresent
argument_list|(
name|rightChild
argument_list|(
name|inOrderNode
operator|.
name|node
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|inOrderNode
operator|.
name|node
return|;
block|}
else|else
block|{
name|inOrderNode
operator|.
name|hasExpandedLeft
operator|=
literal|true
expr_stmt|;
name|pushIfPresent
argument_list|(
name|leftChild
argument_list|(
name|inOrderNode
operator|.
name|node
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|endOfData
argument_list|()
return|;
block|}
DECL|method|pushIfPresent (Optional<T> node)
specifier|private
name|void
name|pushIfPresent
parameter_list|(
name|Optional
argument_list|<
name|T
argument_list|>
name|node
parameter_list|)
block|{
if|if
condition|(
name|node
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|stack
operator|.
name|addLast
argument_list|(
operator|new
name|InOrderNode
argument_list|<
name|T
argument_list|>
argument_list|(
name|node
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

