begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2007 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.collect
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|GwtCompatible
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ListIterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|RandomAccess
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedSet
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_comment
comment|/**  * Synchronized collection views. The returned synchronized collection views are  * serializable if the backing collection and the mutex are serializable.  *  *<p>If {@code null} is passed as the {@code mutex} parameter to any of this  * class's top-level methods or inner class constructors, the created object  * uses itself as the synchronization mutex.  *  *<p>This class should be used by other collection classes only.  *  * @author Mike Bostock  * @author Jared Levy  */
end_comment

begin_class
annotation|@
name|GwtCompatible
argument_list|(
name|emulated
operator|=
literal|true
argument_list|)
DECL|class|Synchronized
specifier|final
class|class
name|Synchronized
block|{
DECL|method|Synchronized ()
specifier|private
name|Synchronized
parameter_list|()
block|{}
DECL|class|SynchronizedObject
specifier|static
class|class
name|SynchronizedObject
implements|implements
name|Serializable
block|{
DECL|field|delegate
specifier|final
name|Object
name|delegate
decl_stmt|;
DECL|field|mutex
specifier|final
name|Object
name|mutex
decl_stmt|;
DECL|method|SynchronizedObject (Object delegate, @Nullable Object mutex)
name|SynchronizedObject
parameter_list|(
name|Object
name|delegate
parameter_list|,
annotation|@
name|Nullable
name|Object
name|mutex
parameter_list|)
block|{
name|this
operator|.
name|delegate
operator|=
name|checkNotNull
argument_list|(
name|delegate
argument_list|)
expr_stmt|;
name|this
operator|.
name|mutex
operator|=
operator|(
name|mutex
operator|==
literal|null
operator|)
condition|?
name|this
else|:
name|mutex
expr_stmt|;
block|}
DECL|method|delegate ()
name|Object
name|delegate
parameter_list|()
block|{
return|return
name|delegate
return|;
block|}
comment|// No equals and hashCode; see ForwardingObject for details.
DECL|method|toString ()
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|delegate
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
comment|// Serialization invokes writeObject only when it's private.
comment|// The SynchronizedObject subclasses don't need a writeObject method since
comment|// they don't contain any non-transient member variables, while the
comment|// following writeObject() handles the SynchronizedObject members.
block|}
DECL|method|collection ( Collection<E> collection, @Nullable Object mutex)
specifier|private
specifier|static
parameter_list|<
name|E
parameter_list|>
name|Collection
argument_list|<
name|E
argument_list|>
name|collection
parameter_list|(
name|Collection
argument_list|<
name|E
argument_list|>
name|collection
parameter_list|,
annotation|@
name|Nullable
name|Object
name|mutex
parameter_list|)
block|{
return|return
operator|new
name|SynchronizedCollection
argument_list|<
name|E
argument_list|>
argument_list|(
name|collection
argument_list|,
name|mutex
argument_list|)
return|;
block|}
DECL|class|SynchronizedCollection
annotation|@
name|VisibleForTesting
specifier|static
class|class
name|SynchronizedCollection
parameter_list|<
name|E
parameter_list|>
extends|extends
name|SynchronizedObject
implements|implements
name|Collection
argument_list|<
name|E
argument_list|>
block|{
DECL|method|SynchronizedCollection ( Collection<E> delegate, @Nullable Object mutex)
specifier|private
name|SynchronizedCollection
parameter_list|(
name|Collection
argument_list|<
name|E
argument_list|>
name|delegate
parameter_list|,
annotation|@
name|Nullable
name|Object
name|mutex
parameter_list|)
block|{
name|super
argument_list|(
name|delegate
argument_list|,
name|mutex
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|delegate ()
annotation|@
name|Override
name|Collection
argument_list|<
name|E
argument_list|>
name|delegate
parameter_list|()
block|{
return|return
operator|(
name|Collection
argument_list|<
name|E
argument_list|>
operator|)
name|super
operator|.
name|delegate
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|add (E e)
specifier|public
name|boolean
name|add
parameter_list|(
name|E
name|e
parameter_list|)
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|delegate
argument_list|()
operator|.
name|add
argument_list|(
name|e
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|addAll (Collection<? extends E> c)
specifier|public
name|boolean
name|addAll
parameter_list|(
name|Collection
argument_list|<
name|?
extends|extends
name|E
argument_list|>
name|c
parameter_list|)
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|delegate
argument_list|()
operator|.
name|addAll
argument_list|(
name|c
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|clear ()
specifier|public
name|void
name|clear
parameter_list|()
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
name|delegate
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|contains (Object o)
specifier|public
name|boolean
name|contains
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|delegate
argument_list|()
operator|.
name|contains
argument_list|(
name|o
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|containsAll (Collection<?> c)
specifier|public
name|boolean
name|containsAll
parameter_list|(
name|Collection
argument_list|<
name|?
argument_list|>
name|c
parameter_list|)
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|delegate
argument_list|()
operator|.
name|containsAll
argument_list|(
name|c
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|isEmpty ()
specifier|public
name|boolean
name|isEmpty
parameter_list|()
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|delegate
argument_list|()
operator|.
name|isEmpty
argument_list|()
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|iterator ()
specifier|public
name|Iterator
argument_list|<
name|E
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
name|delegate
argument_list|()
operator|.
name|iterator
argument_list|()
return|;
comment|// manually synchronized
block|}
annotation|@
name|Override
DECL|method|remove (Object o)
specifier|public
name|boolean
name|remove
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|delegate
argument_list|()
operator|.
name|remove
argument_list|(
name|o
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|removeAll (Collection<?> c)
specifier|public
name|boolean
name|removeAll
parameter_list|(
name|Collection
argument_list|<
name|?
argument_list|>
name|c
parameter_list|)
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|delegate
argument_list|()
operator|.
name|removeAll
argument_list|(
name|c
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|retainAll (Collection<?> c)
specifier|public
name|boolean
name|retainAll
parameter_list|(
name|Collection
argument_list|<
name|?
argument_list|>
name|c
parameter_list|)
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|delegate
argument_list|()
operator|.
name|retainAll
argument_list|(
name|c
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|size ()
specifier|public
name|int
name|size
parameter_list|()
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|delegate
argument_list|()
operator|.
name|size
argument_list|()
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|toArray ()
specifier|public
name|Object
index|[]
name|toArray
parameter_list|()
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|delegate
argument_list|()
operator|.
name|toArray
argument_list|()
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|toArray (T[] a)
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
index|[]
name|toArray
parameter_list|(
name|T
index|[]
name|a
parameter_list|)
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|delegate
argument_list|()
operator|.
name|toArray
argument_list|(
name|a
argument_list|)
return|;
block|}
block|}
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|0
decl_stmt|;
block|}
DECL|method|set (Set<E> set, @Nullable Object mutex)
annotation|@
name|VisibleForTesting
specifier|static
parameter_list|<
name|E
parameter_list|>
name|Set
argument_list|<
name|E
argument_list|>
name|set
parameter_list|(
name|Set
argument_list|<
name|E
argument_list|>
name|set
parameter_list|,
annotation|@
name|Nullable
name|Object
name|mutex
parameter_list|)
block|{
return|return
operator|new
name|SynchronizedSet
argument_list|<
name|E
argument_list|>
argument_list|(
name|set
argument_list|,
name|mutex
argument_list|)
return|;
block|}
DECL|class|SynchronizedSet
specifier|static
class|class
name|SynchronizedSet
parameter_list|<
name|E
parameter_list|>
extends|extends
name|SynchronizedCollection
argument_list|<
name|E
argument_list|>
implements|implements
name|Set
argument_list|<
name|E
argument_list|>
block|{
DECL|method|SynchronizedSet (Set<E> delegate, @Nullable Object mutex)
name|SynchronizedSet
parameter_list|(
name|Set
argument_list|<
name|E
argument_list|>
name|delegate
parameter_list|,
annotation|@
name|Nullable
name|Object
name|mutex
parameter_list|)
block|{
name|super
argument_list|(
name|delegate
argument_list|,
name|mutex
argument_list|)
expr_stmt|;
block|}
DECL|method|delegate ()
annotation|@
name|Override
name|Set
argument_list|<
name|E
argument_list|>
name|delegate
parameter_list|()
block|{
return|return
operator|(
name|Set
argument_list|<
name|E
argument_list|>
operator|)
name|super
operator|.
name|delegate
argument_list|()
return|;
block|}
DECL|method|equals (Object o)
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|==
name|this
condition|)
block|{
return|return
literal|true
return|;
block|}
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|delegate
argument_list|()
operator|.
name|equals
argument_list|(
name|o
argument_list|)
return|;
block|}
block|}
DECL|method|hashCode ()
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|delegate
argument_list|()
operator|.
name|hashCode
argument_list|()
return|;
block|}
block|}
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|0
decl_stmt|;
block|}
DECL|method|sortedSet ( SortedSet<E> set, @Nullable Object mutex)
specifier|private
specifier|static
parameter_list|<
name|E
parameter_list|>
name|SortedSet
argument_list|<
name|E
argument_list|>
name|sortedSet
parameter_list|(
name|SortedSet
argument_list|<
name|E
argument_list|>
name|set
parameter_list|,
annotation|@
name|Nullable
name|Object
name|mutex
parameter_list|)
block|{
return|return
operator|new
name|SynchronizedSortedSet
argument_list|<
name|E
argument_list|>
argument_list|(
name|set
argument_list|,
name|mutex
argument_list|)
return|;
block|}
DECL|class|SynchronizedSortedSet
specifier|static
class|class
name|SynchronizedSortedSet
parameter_list|<
name|E
parameter_list|>
extends|extends
name|SynchronizedSet
argument_list|<
name|E
argument_list|>
implements|implements
name|SortedSet
argument_list|<
name|E
argument_list|>
block|{
DECL|method|SynchronizedSortedSet (SortedSet<E> delegate, @Nullable Object mutex)
name|SynchronizedSortedSet
parameter_list|(
name|SortedSet
argument_list|<
name|E
argument_list|>
name|delegate
parameter_list|,
annotation|@
name|Nullable
name|Object
name|mutex
parameter_list|)
block|{
name|super
argument_list|(
name|delegate
argument_list|,
name|mutex
argument_list|)
expr_stmt|;
block|}
DECL|method|delegate ()
annotation|@
name|Override
name|SortedSet
argument_list|<
name|E
argument_list|>
name|delegate
parameter_list|()
block|{
return|return
operator|(
name|SortedSet
argument_list|<
name|E
argument_list|>
operator|)
name|super
operator|.
name|delegate
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|comparator ()
specifier|public
name|Comparator
argument_list|<
name|?
super|super
name|E
argument_list|>
name|comparator
parameter_list|()
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|delegate
argument_list|()
operator|.
name|comparator
argument_list|()
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|subSet (E fromElement, E toElement)
specifier|public
name|SortedSet
argument_list|<
name|E
argument_list|>
name|subSet
parameter_list|(
name|E
name|fromElement
parameter_list|,
name|E
name|toElement
parameter_list|)
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|sortedSet
argument_list|(
name|delegate
argument_list|()
operator|.
name|subSet
argument_list|(
name|fromElement
argument_list|,
name|toElement
argument_list|)
argument_list|,
name|mutex
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|headSet (E toElement)
specifier|public
name|SortedSet
argument_list|<
name|E
argument_list|>
name|headSet
parameter_list|(
name|E
name|toElement
parameter_list|)
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|sortedSet
argument_list|(
name|delegate
argument_list|()
operator|.
name|headSet
argument_list|(
name|toElement
argument_list|)
argument_list|,
name|mutex
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|tailSet (E fromElement)
specifier|public
name|SortedSet
argument_list|<
name|E
argument_list|>
name|tailSet
parameter_list|(
name|E
name|fromElement
parameter_list|)
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|sortedSet
argument_list|(
name|delegate
argument_list|()
operator|.
name|tailSet
argument_list|(
name|fromElement
argument_list|)
argument_list|,
name|mutex
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|first ()
specifier|public
name|E
name|first
parameter_list|()
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|delegate
argument_list|()
operator|.
name|first
argument_list|()
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|last ()
specifier|public
name|E
name|last
parameter_list|()
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|delegate
argument_list|()
operator|.
name|last
argument_list|()
return|;
block|}
block|}
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|0
decl_stmt|;
block|}
DECL|method|list (List<E> list, @Nullable Object mutex)
specifier|private
specifier|static
parameter_list|<
name|E
parameter_list|>
name|List
argument_list|<
name|E
argument_list|>
name|list
parameter_list|(
name|List
argument_list|<
name|E
argument_list|>
name|list
parameter_list|,
annotation|@
name|Nullable
name|Object
name|mutex
parameter_list|)
block|{
return|return
operator|(
name|list
operator|instanceof
name|RandomAccess
operator|)
condition|?
operator|new
name|SynchronizedRandomAccessList
argument_list|<
name|E
argument_list|>
argument_list|(
name|list
argument_list|,
name|mutex
argument_list|)
else|:
operator|new
name|SynchronizedList
argument_list|<
name|E
argument_list|>
argument_list|(
name|list
argument_list|,
name|mutex
argument_list|)
return|;
block|}
DECL|class|SynchronizedList
specifier|private
specifier|static
class|class
name|SynchronizedList
parameter_list|<
name|E
parameter_list|>
extends|extends
name|SynchronizedCollection
argument_list|<
name|E
argument_list|>
implements|implements
name|List
argument_list|<
name|E
argument_list|>
block|{
DECL|method|SynchronizedList (List<E> delegate, @Nullable Object mutex)
name|SynchronizedList
parameter_list|(
name|List
argument_list|<
name|E
argument_list|>
name|delegate
parameter_list|,
annotation|@
name|Nullable
name|Object
name|mutex
parameter_list|)
block|{
name|super
argument_list|(
name|delegate
argument_list|,
name|mutex
argument_list|)
expr_stmt|;
block|}
DECL|method|delegate ()
annotation|@
name|Override
name|List
argument_list|<
name|E
argument_list|>
name|delegate
parameter_list|()
block|{
return|return
operator|(
name|List
argument_list|<
name|E
argument_list|>
operator|)
name|super
operator|.
name|delegate
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|add (int index, E element)
specifier|public
name|void
name|add
parameter_list|(
name|int
name|index
parameter_list|,
name|E
name|element
parameter_list|)
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
name|delegate
argument_list|()
operator|.
name|add
argument_list|(
name|index
argument_list|,
name|element
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|addAll (int index, Collection<? extends E> c)
specifier|public
name|boolean
name|addAll
parameter_list|(
name|int
name|index
parameter_list|,
name|Collection
argument_list|<
name|?
extends|extends
name|E
argument_list|>
name|c
parameter_list|)
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|delegate
argument_list|()
operator|.
name|addAll
argument_list|(
name|index
argument_list|,
name|c
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|get (int index)
specifier|public
name|E
name|get
parameter_list|(
name|int
name|index
parameter_list|)
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|delegate
argument_list|()
operator|.
name|get
argument_list|(
name|index
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|indexOf (Object o)
specifier|public
name|int
name|indexOf
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|delegate
argument_list|()
operator|.
name|indexOf
argument_list|(
name|o
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|lastIndexOf (Object o)
specifier|public
name|int
name|lastIndexOf
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|delegate
argument_list|()
operator|.
name|lastIndexOf
argument_list|(
name|o
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|listIterator ()
specifier|public
name|ListIterator
argument_list|<
name|E
argument_list|>
name|listIterator
parameter_list|()
block|{
return|return
name|delegate
argument_list|()
operator|.
name|listIterator
argument_list|()
return|;
comment|// manually synchronized
block|}
annotation|@
name|Override
DECL|method|listIterator (int index)
specifier|public
name|ListIterator
argument_list|<
name|E
argument_list|>
name|listIterator
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
name|delegate
argument_list|()
operator|.
name|listIterator
argument_list|(
name|index
argument_list|)
return|;
comment|// manually synchronized
block|}
annotation|@
name|Override
DECL|method|remove (int index)
specifier|public
name|E
name|remove
parameter_list|(
name|int
name|index
parameter_list|)
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|delegate
argument_list|()
operator|.
name|remove
argument_list|(
name|index
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|set (int index, E element)
specifier|public
name|E
name|set
parameter_list|(
name|int
name|index
parameter_list|,
name|E
name|element
parameter_list|)
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|delegate
argument_list|()
operator|.
name|set
argument_list|(
name|index
argument_list|,
name|element
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|subList (int fromIndex, int toIndex)
specifier|public
name|List
argument_list|<
name|E
argument_list|>
name|subList
parameter_list|(
name|int
name|fromIndex
parameter_list|,
name|int
name|toIndex
parameter_list|)
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|list
argument_list|(
name|delegate
argument_list|()
operator|.
name|subList
argument_list|(
name|fromIndex
argument_list|,
name|toIndex
argument_list|)
argument_list|,
name|mutex
argument_list|)
return|;
block|}
block|}
DECL|method|equals (Object o)
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|==
name|this
condition|)
block|{
return|return
literal|true
return|;
block|}
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|delegate
argument_list|()
operator|.
name|equals
argument_list|(
name|o
argument_list|)
return|;
block|}
block|}
DECL|method|hashCode ()
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|delegate
argument_list|()
operator|.
name|hashCode
argument_list|()
return|;
block|}
block|}
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|0
decl_stmt|;
block|}
DECL|class|SynchronizedRandomAccessList
specifier|private
specifier|static
class|class
name|SynchronizedRandomAccessList
parameter_list|<
name|E
parameter_list|>
extends|extends
name|SynchronizedList
argument_list|<
name|E
argument_list|>
implements|implements
name|RandomAccess
block|{
DECL|method|SynchronizedRandomAccessList (List<E> list, @Nullable Object mutex)
name|SynchronizedRandomAccessList
parameter_list|(
name|List
argument_list|<
name|E
argument_list|>
name|list
parameter_list|,
annotation|@
name|Nullable
name|Object
name|mutex
parameter_list|)
block|{
name|super
argument_list|(
name|list
argument_list|,
name|mutex
argument_list|)
expr_stmt|;
block|}
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|0
decl_stmt|;
block|}
DECL|method|multiset ( Multiset<E> multiset, @Nullable Object mutex)
specifier|static
parameter_list|<
name|E
parameter_list|>
name|Multiset
argument_list|<
name|E
argument_list|>
name|multiset
parameter_list|(
name|Multiset
argument_list|<
name|E
argument_list|>
name|multiset
parameter_list|,
annotation|@
name|Nullable
name|Object
name|mutex
parameter_list|)
block|{
if|if
condition|(
name|multiset
operator|instanceof
name|SynchronizedMultiset
operator|||
name|multiset
operator|instanceof
name|ImmutableMultiset
condition|)
block|{
return|return
name|multiset
return|;
block|}
return|return
operator|new
name|SynchronizedMultiset
argument_list|<
name|E
argument_list|>
argument_list|(
name|multiset
argument_list|,
name|mutex
argument_list|)
return|;
block|}
DECL|class|SynchronizedMultiset
specifier|private
specifier|static
class|class
name|SynchronizedMultiset
parameter_list|<
name|E
parameter_list|>
extends|extends
name|SynchronizedCollection
argument_list|<
name|E
argument_list|>
implements|implements
name|Multiset
argument_list|<
name|E
argument_list|>
block|{
DECL|field|elementSet
specifier|transient
name|Set
argument_list|<
name|E
argument_list|>
name|elementSet
decl_stmt|;
DECL|field|entrySet
specifier|transient
name|Set
argument_list|<
name|Entry
argument_list|<
name|E
argument_list|>
argument_list|>
name|entrySet
decl_stmt|;
DECL|method|SynchronizedMultiset (Multiset<E> delegate, @Nullable Object mutex)
name|SynchronizedMultiset
parameter_list|(
name|Multiset
argument_list|<
name|E
argument_list|>
name|delegate
parameter_list|,
annotation|@
name|Nullable
name|Object
name|mutex
parameter_list|)
block|{
name|super
argument_list|(
name|delegate
argument_list|,
name|mutex
argument_list|)
expr_stmt|;
block|}
DECL|method|delegate ()
annotation|@
name|Override
name|Multiset
argument_list|<
name|E
argument_list|>
name|delegate
parameter_list|()
block|{
return|return
operator|(
name|Multiset
argument_list|<
name|E
argument_list|>
operator|)
name|super
operator|.
name|delegate
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|count (Object o)
specifier|public
name|int
name|count
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|delegate
argument_list|()
operator|.
name|count
argument_list|(
name|o
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|add (E e, int n)
specifier|public
name|int
name|add
parameter_list|(
name|E
name|e
parameter_list|,
name|int
name|n
parameter_list|)
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|delegate
argument_list|()
operator|.
name|add
argument_list|(
name|e
argument_list|,
name|n
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|remove (Object o, int n)
specifier|public
name|int
name|remove
parameter_list|(
name|Object
name|o
parameter_list|,
name|int
name|n
parameter_list|)
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|delegate
argument_list|()
operator|.
name|remove
argument_list|(
name|o
argument_list|,
name|n
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|setCount (E element, int count)
specifier|public
name|int
name|setCount
parameter_list|(
name|E
name|element
parameter_list|,
name|int
name|count
parameter_list|)
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|delegate
argument_list|()
operator|.
name|setCount
argument_list|(
name|element
argument_list|,
name|count
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|setCount (E element, int oldCount, int newCount)
specifier|public
name|boolean
name|setCount
parameter_list|(
name|E
name|element
parameter_list|,
name|int
name|oldCount
parameter_list|,
name|int
name|newCount
parameter_list|)
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|delegate
argument_list|()
operator|.
name|setCount
argument_list|(
name|element
argument_list|,
name|oldCount
argument_list|,
name|newCount
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|elementSet ()
specifier|public
name|Set
argument_list|<
name|E
argument_list|>
name|elementSet
parameter_list|()
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
if|if
condition|(
name|elementSet
operator|==
literal|null
condition|)
block|{
name|elementSet
operator|=
name|typePreservingSet
argument_list|(
name|delegate
argument_list|()
operator|.
name|elementSet
argument_list|()
argument_list|,
name|mutex
argument_list|)
expr_stmt|;
block|}
return|return
name|elementSet
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|entrySet ()
specifier|public
name|Set
argument_list|<
name|Entry
argument_list|<
name|E
argument_list|>
argument_list|>
name|entrySet
parameter_list|()
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
if|if
condition|(
name|entrySet
operator|==
literal|null
condition|)
block|{
name|entrySet
operator|=
name|typePreservingSet
argument_list|(
name|delegate
argument_list|()
operator|.
name|entrySet
argument_list|()
argument_list|,
name|mutex
argument_list|)
expr_stmt|;
block|}
return|return
name|entrySet
return|;
block|}
block|}
DECL|method|equals (Object o)
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|==
name|this
condition|)
block|{
return|return
literal|true
return|;
block|}
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|delegate
argument_list|()
operator|.
name|equals
argument_list|(
name|o
argument_list|)
return|;
block|}
block|}
DECL|method|hashCode ()
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|delegate
argument_list|()
operator|.
name|hashCode
argument_list|()
return|;
block|}
block|}
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|0
decl_stmt|;
block|}
DECL|method|multimap ( Multimap<K, V> multimap, @Nullable Object mutex)
specifier|static
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
name|Multimap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|multimap
parameter_list|(
name|Multimap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|multimap
parameter_list|,
annotation|@
name|Nullable
name|Object
name|mutex
parameter_list|)
block|{
if|if
condition|(
name|multimap
operator|instanceof
name|SynchronizedMultimap
operator|||
name|multimap
operator|instanceof
name|ImmutableMultimap
condition|)
block|{
return|return
name|multimap
return|;
block|}
return|return
operator|new
name|SynchronizedMultimap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|(
name|multimap
argument_list|,
name|mutex
argument_list|)
return|;
block|}
DECL|class|SynchronizedMultimap
specifier|private
specifier|static
class|class
name|SynchronizedMultimap
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
extends|extends
name|SynchronizedObject
implements|implements
name|Multimap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
block|{
DECL|field|keySet
specifier|transient
name|Set
argument_list|<
name|K
argument_list|>
name|keySet
decl_stmt|;
DECL|field|valuesCollection
specifier|transient
name|Collection
argument_list|<
name|V
argument_list|>
name|valuesCollection
decl_stmt|;
DECL|field|entries
specifier|transient
name|Collection
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|entries
decl_stmt|;
DECL|field|asMap
specifier|transient
name|Map
argument_list|<
name|K
argument_list|,
name|Collection
argument_list|<
name|V
argument_list|>
argument_list|>
name|asMap
decl_stmt|;
DECL|field|keys
specifier|transient
name|Multiset
argument_list|<
name|K
argument_list|>
name|keys
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|delegate ()
annotation|@
name|Override
name|Multimap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|delegate
parameter_list|()
block|{
return|return
operator|(
name|Multimap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
operator|)
name|super
operator|.
name|delegate
argument_list|()
return|;
block|}
DECL|method|SynchronizedMultimap (Multimap<K, V> delegate, @Nullable Object mutex)
name|SynchronizedMultimap
parameter_list|(
name|Multimap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|delegate
parameter_list|,
annotation|@
name|Nullable
name|Object
name|mutex
parameter_list|)
block|{
name|super
argument_list|(
name|delegate
argument_list|,
name|mutex
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|size ()
specifier|public
name|int
name|size
parameter_list|()
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|delegate
argument_list|()
operator|.
name|size
argument_list|()
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|isEmpty ()
specifier|public
name|boolean
name|isEmpty
parameter_list|()
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|delegate
argument_list|()
operator|.
name|isEmpty
argument_list|()
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|containsKey (Object key)
specifier|public
name|boolean
name|containsKey
parameter_list|(
name|Object
name|key
parameter_list|)
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|delegate
argument_list|()
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|containsValue (Object value)
specifier|public
name|boolean
name|containsValue
parameter_list|(
name|Object
name|value
parameter_list|)
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|delegate
argument_list|()
operator|.
name|containsValue
argument_list|(
name|value
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|containsEntry (Object key, Object value)
specifier|public
name|boolean
name|containsEntry
parameter_list|(
name|Object
name|key
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|delegate
argument_list|()
operator|.
name|containsEntry
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|get (K key)
specifier|public
name|Collection
argument_list|<
name|V
argument_list|>
name|get
parameter_list|(
name|K
name|key
parameter_list|)
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|typePreservingCollection
argument_list|(
name|delegate
argument_list|()
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|,
name|mutex
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|put (K key, V value)
specifier|public
name|boolean
name|put
parameter_list|(
name|K
name|key
parameter_list|,
name|V
name|value
parameter_list|)
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|delegate
argument_list|()
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|putAll (K key, Iterable<? extends V> values)
specifier|public
name|boolean
name|putAll
parameter_list|(
name|K
name|key
parameter_list|,
name|Iterable
argument_list|<
name|?
extends|extends
name|V
argument_list|>
name|values
parameter_list|)
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|delegate
argument_list|()
operator|.
name|putAll
argument_list|(
name|key
argument_list|,
name|values
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|putAll (Multimap<? extends K, ? extends V> multimap)
specifier|public
name|boolean
name|putAll
parameter_list|(
name|Multimap
argument_list|<
name|?
extends|extends
name|K
argument_list|,
name|?
extends|extends
name|V
argument_list|>
name|multimap
parameter_list|)
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|delegate
argument_list|()
operator|.
name|putAll
argument_list|(
name|multimap
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|replaceValues (K key, Iterable<? extends V> values)
specifier|public
name|Collection
argument_list|<
name|V
argument_list|>
name|replaceValues
parameter_list|(
name|K
name|key
parameter_list|,
name|Iterable
argument_list|<
name|?
extends|extends
name|V
argument_list|>
name|values
parameter_list|)
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|delegate
argument_list|()
operator|.
name|replaceValues
argument_list|(
name|key
argument_list|,
name|values
argument_list|)
return|;
comment|// copy not synchronized
block|}
block|}
annotation|@
name|Override
DECL|method|remove (Object key, Object value)
specifier|public
name|boolean
name|remove
parameter_list|(
name|Object
name|key
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|delegate
argument_list|()
operator|.
name|remove
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|removeAll (Object key)
specifier|public
name|Collection
argument_list|<
name|V
argument_list|>
name|removeAll
parameter_list|(
name|Object
name|key
parameter_list|)
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|delegate
argument_list|()
operator|.
name|removeAll
argument_list|(
name|key
argument_list|)
return|;
comment|// copy not synchronized
block|}
block|}
annotation|@
name|Override
DECL|method|clear ()
specifier|public
name|void
name|clear
parameter_list|()
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
name|delegate
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|keySet ()
specifier|public
name|Set
argument_list|<
name|K
argument_list|>
name|keySet
parameter_list|()
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
if|if
condition|(
name|keySet
operator|==
literal|null
condition|)
block|{
name|keySet
operator|=
name|typePreservingSet
argument_list|(
name|delegate
argument_list|()
operator|.
name|keySet
argument_list|()
argument_list|,
name|mutex
argument_list|)
expr_stmt|;
block|}
return|return
name|keySet
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|values ()
specifier|public
name|Collection
argument_list|<
name|V
argument_list|>
name|values
parameter_list|()
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
if|if
condition|(
name|valuesCollection
operator|==
literal|null
condition|)
block|{
name|valuesCollection
operator|=
name|collection
argument_list|(
name|delegate
argument_list|()
operator|.
name|values
argument_list|()
argument_list|,
name|mutex
argument_list|)
expr_stmt|;
block|}
return|return
name|valuesCollection
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|entries ()
specifier|public
name|Collection
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|entries
parameter_list|()
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
if|if
condition|(
name|entries
operator|==
literal|null
condition|)
block|{
name|entries
operator|=
name|typePreservingCollection
argument_list|(
name|delegate
argument_list|()
operator|.
name|entries
argument_list|()
argument_list|,
name|mutex
argument_list|)
expr_stmt|;
block|}
return|return
name|entries
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|asMap ()
specifier|public
name|Map
argument_list|<
name|K
argument_list|,
name|Collection
argument_list|<
name|V
argument_list|>
argument_list|>
name|asMap
parameter_list|()
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
if|if
condition|(
name|asMap
operator|==
literal|null
condition|)
block|{
name|asMap
operator|=
operator|new
name|SynchronizedAsMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|(
name|delegate
argument_list|()
operator|.
name|asMap
argument_list|()
argument_list|,
name|mutex
argument_list|)
expr_stmt|;
block|}
return|return
name|asMap
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|keys ()
specifier|public
name|Multiset
argument_list|<
name|K
argument_list|>
name|keys
parameter_list|()
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
if|if
condition|(
name|keys
operator|==
literal|null
condition|)
block|{
name|keys
operator|=
name|multiset
argument_list|(
name|delegate
argument_list|()
operator|.
name|keys
argument_list|()
argument_list|,
name|mutex
argument_list|)
expr_stmt|;
block|}
return|return
name|keys
return|;
block|}
block|}
DECL|method|equals (Object o)
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|==
name|this
condition|)
block|{
return|return
literal|true
return|;
block|}
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|delegate
argument_list|()
operator|.
name|equals
argument_list|(
name|o
argument_list|)
return|;
block|}
block|}
DECL|method|hashCode ()
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|delegate
argument_list|()
operator|.
name|hashCode
argument_list|()
return|;
block|}
block|}
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|0
decl_stmt|;
block|}
DECL|method|listMultimap ( ListMultimap<K, V> multimap, @Nullable Object mutex)
specifier|static
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
name|ListMultimap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|listMultimap
parameter_list|(
name|ListMultimap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|multimap
parameter_list|,
annotation|@
name|Nullable
name|Object
name|mutex
parameter_list|)
block|{
if|if
condition|(
name|multimap
operator|instanceof
name|SynchronizedListMultimap
operator|||
name|multimap
operator|instanceof
name|ImmutableListMultimap
condition|)
block|{
return|return
name|multimap
return|;
block|}
return|return
operator|new
name|SynchronizedListMultimap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|(
name|multimap
argument_list|,
name|mutex
argument_list|)
return|;
block|}
DECL|class|SynchronizedListMultimap
specifier|private
specifier|static
class|class
name|SynchronizedListMultimap
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
extends|extends
name|SynchronizedMultimap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
implements|implements
name|ListMultimap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
block|{
DECL|method|SynchronizedListMultimap ( ListMultimap<K, V> delegate, @Nullable Object mutex)
name|SynchronizedListMultimap
parameter_list|(
name|ListMultimap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|delegate
parameter_list|,
annotation|@
name|Nullable
name|Object
name|mutex
parameter_list|)
block|{
name|super
argument_list|(
name|delegate
argument_list|,
name|mutex
argument_list|)
expr_stmt|;
block|}
DECL|method|delegate ()
annotation|@
name|Override
name|ListMultimap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|delegate
parameter_list|()
block|{
return|return
operator|(
name|ListMultimap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
operator|)
name|super
operator|.
name|delegate
argument_list|()
return|;
block|}
DECL|method|get (K key)
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|V
argument_list|>
name|get
parameter_list|(
name|K
name|key
parameter_list|)
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|list
argument_list|(
name|delegate
argument_list|()
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|,
name|mutex
argument_list|)
return|;
block|}
block|}
DECL|method|removeAll (Object key)
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|V
argument_list|>
name|removeAll
parameter_list|(
name|Object
name|key
parameter_list|)
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|delegate
argument_list|()
operator|.
name|removeAll
argument_list|(
name|key
argument_list|)
return|;
comment|// copy not synchronized
block|}
block|}
DECL|method|replaceValues ( K key, Iterable<? extends V> values)
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|V
argument_list|>
name|replaceValues
parameter_list|(
name|K
name|key
parameter_list|,
name|Iterable
argument_list|<
name|?
extends|extends
name|V
argument_list|>
name|values
parameter_list|)
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|delegate
argument_list|()
operator|.
name|replaceValues
argument_list|(
name|key
argument_list|,
name|values
argument_list|)
return|;
comment|// copy not synchronized
block|}
block|}
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|0
decl_stmt|;
block|}
DECL|method|setMultimap ( SetMultimap<K, V> multimap, @Nullable Object mutex)
specifier|static
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
name|SetMultimap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|setMultimap
parameter_list|(
name|SetMultimap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|multimap
parameter_list|,
annotation|@
name|Nullable
name|Object
name|mutex
parameter_list|)
block|{
if|if
condition|(
name|multimap
operator|instanceof
name|SynchronizedSetMultimap
operator|||
name|multimap
operator|instanceof
name|ImmutableSetMultimap
condition|)
block|{
return|return
name|multimap
return|;
block|}
return|return
operator|new
name|SynchronizedSetMultimap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|(
name|multimap
argument_list|,
name|mutex
argument_list|)
return|;
block|}
DECL|class|SynchronizedSetMultimap
specifier|private
specifier|static
class|class
name|SynchronizedSetMultimap
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
extends|extends
name|SynchronizedMultimap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
implements|implements
name|SetMultimap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
block|{
DECL|field|entrySet
specifier|transient
name|Set
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|entrySet
decl_stmt|;
DECL|method|SynchronizedSetMultimap ( SetMultimap<K, V> delegate, @Nullable Object mutex)
name|SynchronizedSetMultimap
parameter_list|(
name|SetMultimap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|delegate
parameter_list|,
annotation|@
name|Nullable
name|Object
name|mutex
parameter_list|)
block|{
name|super
argument_list|(
name|delegate
argument_list|,
name|mutex
argument_list|)
expr_stmt|;
block|}
DECL|method|delegate ()
annotation|@
name|Override
name|SetMultimap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|delegate
parameter_list|()
block|{
return|return
operator|(
name|SetMultimap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
operator|)
name|super
operator|.
name|delegate
argument_list|()
return|;
block|}
DECL|method|get (K key)
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|V
argument_list|>
name|get
parameter_list|(
name|K
name|key
parameter_list|)
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|set
argument_list|(
name|delegate
argument_list|()
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|,
name|mutex
argument_list|)
return|;
block|}
block|}
DECL|method|removeAll (Object key)
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|V
argument_list|>
name|removeAll
parameter_list|(
name|Object
name|key
parameter_list|)
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|delegate
argument_list|()
operator|.
name|removeAll
argument_list|(
name|key
argument_list|)
return|;
comment|// copy not synchronized
block|}
block|}
DECL|method|replaceValues ( K key, Iterable<? extends V> values)
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|V
argument_list|>
name|replaceValues
parameter_list|(
name|K
name|key
parameter_list|,
name|Iterable
argument_list|<
name|?
extends|extends
name|V
argument_list|>
name|values
parameter_list|)
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|delegate
argument_list|()
operator|.
name|replaceValues
argument_list|(
name|key
argument_list|,
name|values
argument_list|)
return|;
comment|// copy not synchronized
block|}
block|}
DECL|method|entries ()
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|entries
parameter_list|()
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
if|if
condition|(
name|entrySet
operator|==
literal|null
condition|)
block|{
name|entrySet
operator|=
name|set
argument_list|(
name|delegate
argument_list|()
operator|.
name|entries
argument_list|()
argument_list|,
name|mutex
argument_list|)
expr_stmt|;
block|}
return|return
name|entrySet
return|;
block|}
block|}
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|0
decl_stmt|;
block|}
DECL|method|sortedSetMultimap ( SortedSetMultimap<K, V> multimap, @Nullable Object mutex)
specifier|static
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
name|SortedSetMultimap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|sortedSetMultimap
parameter_list|(
name|SortedSetMultimap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|multimap
parameter_list|,
annotation|@
name|Nullable
name|Object
name|mutex
parameter_list|)
block|{
if|if
condition|(
name|multimap
operator|instanceof
name|SynchronizedSortedSetMultimap
condition|)
block|{
return|return
name|multimap
return|;
block|}
return|return
operator|new
name|SynchronizedSortedSetMultimap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|(
name|multimap
argument_list|,
name|mutex
argument_list|)
return|;
block|}
DECL|class|SynchronizedSortedSetMultimap
specifier|private
specifier|static
class|class
name|SynchronizedSortedSetMultimap
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
extends|extends
name|SynchronizedSetMultimap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
implements|implements
name|SortedSetMultimap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
block|{
DECL|method|SynchronizedSortedSetMultimap ( SortedSetMultimap<K, V> delegate, @Nullable Object mutex)
name|SynchronizedSortedSetMultimap
parameter_list|(
name|SortedSetMultimap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|delegate
parameter_list|,
annotation|@
name|Nullable
name|Object
name|mutex
parameter_list|)
block|{
name|super
argument_list|(
name|delegate
argument_list|,
name|mutex
argument_list|)
expr_stmt|;
block|}
DECL|method|delegate ()
annotation|@
name|Override
name|SortedSetMultimap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|delegate
parameter_list|()
block|{
return|return
operator|(
name|SortedSetMultimap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
operator|)
name|super
operator|.
name|delegate
argument_list|()
return|;
block|}
DECL|method|get (K key)
annotation|@
name|Override
specifier|public
name|SortedSet
argument_list|<
name|V
argument_list|>
name|get
parameter_list|(
name|K
name|key
parameter_list|)
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|sortedSet
argument_list|(
name|delegate
argument_list|()
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|,
name|mutex
argument_list|)
return|;
block|}
block|}
DECL|method|removeAll (Object key)
annotation|@
name|Override
specifier|public
name|SortedSet
argument_list|<
name|V
argument_list|>
name|removeAll
parameter_list|(
name|Object
name|key
parameter_list|)
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|delegate
argument_list|()
operator|.
name|removeAll
argument_list|(
name|key
argument_list|)
return|;
comment|// copy not synchronized
block|}
block|}
DECL|method|replaceValues ( K key, Iterable<? extends V> values)
annotation|@
name|Override
specifier|public
name|SortedSet
argument_list|<
name|V
argument_list|>
name|replaceValues
parameter_list|(
name|K
name|key
parameter_list|,
name|Iterable
argument_list|<
name|?
extends|extends
name|V
argument_list|>
name|values
parameter_list|)
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|delegate
argument_list|()
operator|.
name|replaceValues
argument_list|(
name|key
argument_list|,
name|values
argument_list|)
return|;
comment|// copy not synchronized
block|}
block|}
annotation|@
name|Override
DECL|method|valueComparator ()
specifier|public
name|Comparator
argument_list|<
name|?
super|super
name|V
argument_list|>
name|valueComparator
parameter_list|()
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|delegate
argument_list|()
operator|.
name|valueComparator
argument_list|()
return|;
block|}
block|}
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|0
decl_stmt|;
block|}
DECL|method|typePreservingCollection ( Collection<E> collection, @Nullable Object mutex)
specifier|private
specifier|static
parameter_list|<
name|E
parameter_list|>
name|Collection
argument_list|<
name|E
argument_list|>
name|typePreservingCollection
parameter_list|(
name|Collection
argument_list|<
name|E
argument_list|>
name|collection
parameter_list|,
annotation|@
name|Nullable
name|Object
name|mutex
parameter_list|)
block|{
if|if
condition|(
name|collection
operator|instanceof
name|SortedSet
condition|)
block|{
return|return
name|sortedSet
argument_list|(
operator|(
name|SortedSet
argument_list|<
name|E
argument_list|>
operator|)
name|collection
argument_list|,
name|mutex
argument_list|)
return|;
block|}
if|if
condition|(
name|collection
operator|instanceof
name|Set
condition|)
block|{
return|return
name|set
argument_list|(
operator|(
name|Set
argument_list|<
name|E
argument_list|>
operator|)
name|collection
argument_list|,
name|mutex
argument_list|)
return|;
block|}
if|if
condition|(
name|collection
operator|instanceof
name|List
condition|)
block|{
return|return
name|list
argument_list|(
operator|(
name|List
argument_list|<
name|E
argument_list|>
operator|)
name|collection
argument_list|,
name|mutex
argument_list|)
return|;
block|}
return|return
name|collection
argument_list|(
name|collection
argument_list|,
name|mutex
argument_list|)
return|;
block|}
DECL|method|typePreservingSet ( Set<E> set, @Nullable Object mutex)
specifier|private
specifier|static
parameter_list|<
name|E
parameter_list|>
name|Set
argument_list|<
name|E
argument_list|>
name|typePreservingSet
parameter_list|(
name|Set
argument_list|<
name|E
argument_list|>
name|set
parameter_list|,
annotation|@
name|Nullable
name|Object
name|mutex
parameter_list|)
block|{
if|if
condition|(
name|set
operator|instanceof
name|SortedSet
condition|)
block|{
return|return
name|sortedSet
argument_list|(
operator|(
name|SortedSet
argument_list|<
name|E
argument_list|>
operator|)
name|set
argument_list|,
name|mutex
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|set
argument_list|(
name|set
argument_list|,
name|mutex
argument_list|)
return|;
block|}
block|}
DECL|class|SynchronizedAsMapEntries
specifier|private
specifier|static
class|class
name|SynchronizedAsMapEntries
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
extends|extends
name|SynchronizedSet
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|K
argument_list|,
name|Collection
argument_list|<
name|V
argument_list|>
argument_list|>
argument_list|>
block|{
DECL|method|SynchronizedAsMapEntries ( Set<Map.Entry<K, Collection<V>>> delegate, @Nullable Object mutex)
name|SynchronizedAsMapEntries
parameter_list|(
name|Set
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|K
argument_list|,
name|Collection
argument_list|<
name|V
argument_list|>
argument_list|>
argument_list|>
name|delegate
parameter_list|,
annotation|@
name|Nullable
name|Object
name|mutex
parameter_list|)
block|{
name|super
argument_list|(
name|delegate
argument_list|,
name|mutex
argument_list|)
expr_stmt|;
block|}
DECL|method|iterator ()
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|K
argument_list|,
name|Collection
argument_list|<
name|V
argument_list|>
argument_list|>
argument_list|>
name|iterator
parameter_list|()
block|{
comment|// Must be manually synchronized.
specifier|final
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|K
argument_list|,
name|Collection
argument_list|<
name|V
argument_list|>
argument_list|>
argument_list|>
name|iterator
init|=
name|super
operator|.
name|iterator
argument_list|()
decl_stmt|;
return|return
operator|new
name|ForwardingIterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|K
argument_list|,
name|Collection
argument_list|<
name|V
argument_list|>
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|K
argument_list|,
name|Collection
argument_list|<
name|V
argument_list|>
argument_list|>
argument_list|>
name|delegate
parameter_list|()
block|{
return|return
name|iterator
return|;
block|}
annotation|@
name|Override
specifier|public
name|Map
operator|.
name|Entry
argument_list|<
name|K
argument_list|,
name|Collection
argument_list|<
name|V
argument_list|>
argument_list|>
name|next
parameter_list|()
block|{
specifier|final
name|Map
operator|.
name|Entry
argument_list|<
name|K
argument_list|,
name|Collection
argument_list|<
name|V
argument_list|>
argument_list|>
name|entry
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
return|return
operator|new
name|ForwardingMapEntry
argument_list|<
name|K
argument_list|,
name|Collection
argument_list|<
name|V
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|Map
operator|.
name|Entry
argument_list|<
name|K
argument_list|,
name|Collection
argument_list|<
name|V
argument_list|>
argument_list|>
name|delegate
parameter_list|()
block|{
return|return
name|entry
return|;
block|}
annotation|@
name|Override
specifier|public
name|Collection
argument_list|<
name|V
argument_list|>
name|getValue
parameter_list|()
block|{
return|return
name|typePreservingCollection
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|,
name|mutex
argument_list|)
return|;
block|}
block|}
return|;
block|}
block|}
return|;
block|}
comment|// See Collections.CheckedMap.CheckedEntrySet for details on attacks.
DECL|method|toArray ()
annotation|@
name|Override
specifier|public
name|Object
index|[]
name|toArray
parameter_list|()
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|ObjectArrays
operator|.
name|toArrayImpl
argument_list|(
name|delegate
argument_list|()
argument_list|)
return|;
block|}
block|}
DECL|method|toArray (T[] array)
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
index|[]
name|toArray
parameter_list|(
name|T
index|[]
name|array
parameter_list|)
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|ObjectArrays
operator|.
name|toArrayImpl
argument_list|(
name|delegate
argument_list|()
argument_list|,
name|array
argument_list|)
return|;
block|}
block|}
DECL|method|contains (Object o)
annotation|@
name|Override
specifier|public
name|boolean
name|contains
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|Maps
operator|.
name|containsEntryImpl
argument_list|(
name|delegate
argument_list|()
argument_list|,
name|o
argument_list|)
return|;
block|}
block|}
DECL|method|containsAll (Collection<?> c)
annotation|@
name|Override
specifier|public
name|boolean
name|containsAll
parameter_list|(
name|Collection
argument_list|<
name|?
argument_list|>
name|c
parameter_list|)
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|Collections2
operator|.
name|containsAllImpl
argument_list|(
name|delegate
argument_list|()
argument_list|,
name|c
argument_list|)
return|;
block|}
block|}
DECL|method|equals (Object o)
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|==
name|this
condition|)
block|{
return|return
literal|true
return|;
block|}
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|Sets
operator|.
name|equalsImpl
argument_list|(
name|delegate
argument_list|()
argument_list|,
name|o
argument_list|)
return|;
block|}
block|}
DECL|method|remove (Object o)
annotation|@
name|Override
specifier|public
name|boolean
name|remove
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|Maps
operator|.
name|removeEntryImpl
argument_list|(
name|delegate
argument_list|()
argument_list|,
name|o
argument_list|)
return|;
block|}
block|}
DECL|method|removeAll (Collection<?> c)
annotation|@
name|Override
specifier|public
name|boolean
name|removeAll
parameter_list|(
name|Collection
argument_list|<
name|?
argument_list|>
name|c
parameter_list|)
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|Iterators
operator|.
name|removeAll
argument_list|(
name|delegate
argument_list|()
operator|.
name|iterator
argument_list|()
argument_list|,
name|c
argument_list|)
return|;
block|}
block|}
DECL|method|retainAll (Collection<?> c)
annotation|@
name|Override
specifier|public
name|boolean
name|retainAll
parameter_list|(
name|Collection
argument_list|<
name|?
argument_list|>
name|c
parameter_list|)
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|Iterators
operator|.
name|retainAll
argument_list|(
name|delegate
argument_list|()
operator|.
name|iterator
argument_list|()
argument_list|,
name|c
argument_list|)
return|;
block|}
block|}
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|0
decl_stmt|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|map (Map<K, V> map, @Nullable Object mutex)
specifier|static
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
name|Map
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|map
parameter_list|(
name|Map
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|map
parameter_list|,
annotation|@
name|Nullable
name|Object
name|mutex
parameter_list|)
block|{
return|return
operator|new
name|SynchronizedMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|(
name|map
argument_list|,
name|mutex
argument_list|)
return|;
block|}
DECL|class|SynchronizedMap
specifier|private
specifier|static
class|class
name|SynchronizedMap
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
extends|extends
name|SynchronizedObject
implements|implements
name|Map
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
block|{
DECL|field|keySet
specifier|transient
name|Set
argument_list|<
name|K
argument_list|>
name|keySet
decl_stmt|;
DECL|field|values
specifier|transient
name|Collection
argument_list|<
name|V
argument_list|>
name|values
decl_stmt|;
DECL|field|entrySet
specifier|transient
name|Set
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|entrySet
decl_stmt|;
DECL|method|SynchronizedMap (Map<K, V> delegate, @Nullable Object mutex)
name|SynchronizedMap
parameter_list|(
name|Map
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|delegate
parameter_list|,
annotation|@
name|Nullable
name|Object
name|mutex
parameter_list|)
block|{
name|super
argument_list|(
name|delegate
argument_list|,
name|mutex
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|delegate ()
annotation|@
name|Override
name|Map
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|delegate
parameter_list|()
block|{
return|return
operator|(
name|Map
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
operator|)
name|super
operator|.
name|delegate
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|clear ()
specifier|public
name|void
name|clear
parameter_list|()
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
name|delegate
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|containsKey (Object key)
specifier|public
name|boolean
name|containsKey
parameter_list|(
name|Object
name|key
parameter_list|)
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|delegate
argument_list|()
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|containsValue (Object value)
specifier|public
name|boolean
name|containsValue
parameter_list|(
name|Object
name|value
parameter_list|)
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|delegate
argument_list|()
operator|.
name|containsValue
argument_list|(
name|value
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|entrySet ()
specifier|public
name|Set
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|entrySet
parameter_list|()
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
if|if
condition|(
name|entrySet
operator|==
literal|null
condition|)
block|{
name|entrySet
operator|=
name|set
argument_list|(
name|delegate
argument_list|()
operator|.
name|entrySet
argument_list|()
argument_list|,
name|mutex
argument_list|)
expr_stmt|;
block|}
return|return
name|entrySet
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|get (Object key)
specifier|public
name|V
name|get
parameter_list|(
name|Object
name|key
parameter_list|)
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|delegate
argument_list|()
operator|.
name|get
argument_list|(
name|key
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|isEmpty ()
specifier|public
name|boolean
name|isEmpty
parameter_list|()
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|delegate
argument_list|()
operator|.
name|isEmpty
argument_list|()
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|keySet ()
specifier|public
name|Set
argument_list|<
name|K
argument_list|>
name|keySet
parameter_list|()
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
if|if
condition|(
name|keySet
operator|==
literal|null
condition|)
block|{
name|keySet
operator|=
name|set
argument_list|(
name|delegate
argument_list|()
operator|.
name|keySet
argument_list|()
argument_list|,
name|mutex
argument_list|)
expr_stmt|;
block|}
return|return
name|keySet
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|put (K key, V value)
specifier|public
name|V
name|put
parameter_list|(
name|K
name|key
parameter_list|,
name|V
name|value
parameter_list|)
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|delegate
argument_list|()
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|putAll (Map<? extends K, ? extends V> map)
specifier|public
name|void
name|putAll
parameter_list|(
name|Map
argument_list|<
name|?
extends|extends
name|K
argument_list|,
name|?
extends|extends
name|V
argument_list|>
name|map
parameter_list|)
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
name|delegate
argument_list|()
operator|.
name|putAll
argument_list|(
name|map
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|remove (Object key)
specifier|public
name|V
name|remove
parameter_list|(
name|Object
name|key
parameter_list|)
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|delegate
argument_list|()
operator|.
name|remove
argument_list|(
name|key
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|size ()
specifier|public
name|int
name|size
parameter_list|()
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|delegate
argument_list|()
operator|.
name|size
argument_list|()
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|values ()
specifier|public
name|Collection
argument_list|<
name|V
argument_list|>
name|values
parameter_list|()
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
if|if
condition|(
name|values
operator|==
literal|null
condition|)
block|{
name|values
operator|=
name|collection
argument_list|(
name|delegate
argument_list|()
operator|.
name|values
argument_list|()
argument_list|,
name|mutex
argument_list|)
expr_stmt|;
block|}
return|return
name|values
return|;
block|}
block|}
DECL|method|equals (Object o)
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|==
name|this
condition|)
block|{
return|return
literal|true
return|;
block|}
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|delegate
argument_list|()
operator|.
name|equals
argument_list|(
name|o
argument_list|)
return|;
block|}
block|}
DECL|method|hashCode ()
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|delegate
argument_list|()
operator|.
name|hashCode
argument_list|()
return|;
block|}
block|}
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|0
decl_stmt|;
block|}
DECL|method|sortedMap ( SortedMap<K, V> sortedMap, @Nullable Object mutex)
specifier|static
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
name|SortedMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|sortedMap
parameter_list|(
name|SortedMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|sortedMap
parameter_list|,
annotation|@
name|Nullable
name|Object
name|mutex
parameter_list|)
block|{
return|return
operator|new
name|SynchronizedSortedMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|(
name|sortedMap
argument_list|,
name|mutex
argument_list|)
return|;
block|}
DECL|class|SynchronizedSortedMap
specifier|static
class|class
name|SynchronizedSortedMap
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
extends|extends
name|SynchronizedMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
implements|implements
name|SortedMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
block|{
DECL|method|SynchronizedSortedMap (SortedMap<K, V> delegate, @Nullable Object mutex)
name|SynchronizedSortedMap
parameter_list|(
name|SortedMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|delegate
parameter_list|,
annotation|@
name|Nullable
name|Object
name|mutex
parameter_list|)
block|{
name|super
argument_list|(
name|delegate
argument_list|,
name|mutex
argument_list|)
expr_stmt|;
block|}
DECL|method|delegate ()
annotation|@
name|Override
name|SortedMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|delegate
parameter_list|()
block|{
return|return
operator|(
name|SortedMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
operator|)
name|super
operator|.
name|delegate
argument_list|()
return|;
block|}
DECL|method|comparator ()
annotation|@
name|Override
specifier|public
name|Comparator
argument_list|<
name|?
super|super
name|K
argument_list|>
name|comparator
parameter_list|()
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|delegate
argument_list|()
operator|.
name|comparator
argument_list|()
return|;
block|}
block|}
DECL|method|firstKey ()
annotation|@
name|Override
specifier|public
name|K
name|firstKey
parameter_list|()
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|delegate
argument_list|()
operator|.
name|firstKey
argument_list|()
return|;
block|}
block|}
DECL|method|headMap (K toKey)
annotation|@
name|Override
specifier|public
name|SortedMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|headMap
parameter_list|(
name|K
name|toKey
parameter_list|)
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|sortedMap
argument_list|(
name|delegate
argument_list|()
operator|.
name|headMap
argument_list|(
name|toKey
argument_list|)
argument_list|,
name|mutex
argument_list|)
return|;
block|}
block|}
DECL|method|lastKey ()
annotation|@
name|Override
specifier|public
name|K
name|lastKey
parameter_list|()
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|delegate
argument_list|()
operator|.
name|lastKey
argument_list|()
return|;
block|}
block|}
DECL|method|subMap (K fromKey, K toKey)
annotation|@
name|Override
specifier|public
name|SortedMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|subMap
parameter_list|(
name|K
name|fromKey
parameter_list|,
name|K
name|toKey
parameter_list|)
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|sortedMap
argument_list|(
name|delegate
argument_list|()
operator|.
name|subMap
argument_list|(
name|fromKey
argument_list|,
name|toKey
argument_list|)
argument_list|,
name|mutex
argument_list|)
return|;
block|}
block|}
DECL|method|tailMap (K fromKey)
annotation|@
name|Override
specifier|public
name|SortedMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|tailMap
parameter_list|(
name|K
name|fromKey
parameter_list|)
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|sortedMap
argument_list|(
name|delegate
argument_list|()
operator|.
name|tailMap
argument_list|(
name|fromKey
argument_list|)
argument_list|,
name|mutex
argument_list|)
return|;
block|}
block|}
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|0
decl_stmt|;
block|}
DECL|method|biMap (BiMap<K, V> bimap, @Nullable Object mutex)
specifier|static
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
name|BiMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|biMap
parameter_list|(
name|BiMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|bimap
parameter_list|,
annotation|@
name|Nullable
name|Object
name|mutex
parameter_list|)
block|{
if|if
condition|(
name|bimap
operator|instanceof
name|SynchronizedBiMap
operator|||
name|bimap
operator|instanceof
name|ImmutableBiMap
condition|)
block|{
return|return
name|bimap
return|;
block|}
return|return
operator|new
name|SynchronizedBiMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|(
name|bimap
argument_list|,
name|mutex
argument_list|,
literal|null
argument_list|)
return|;
block|}
DECL|class|SynchronizedBiMap
annotation|@
name|VisibleForTesting
specifier|static
class|class
name|SynchronizedBiMap
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
extends|extends
name|SynchronizedMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
implements|implements
name|BiMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
implements|,
name|Serializable
block|{
DECL|field|valueSet
specifier|private
specifier|transient
name|Set
argument_list|<
name|V
argument_list|>
name|valueSet
decl_stmt|;
DECL|field|inverse
specifier|private
specifier|transient
name|BiMap
argument_list|<
name|V
argument_list|,
name|K
argument_list|>
name|inverse
decl_stmt|;
DECL|method|SynchronizedBiMap (BiMap<K, V> delegate, @Nullable Object mutex, @Nullable BiMap<V, K> inverse)
specifier|private
name|SynchronizedBiMap
parameter_list|(
name|BiMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|delegate
parameter_list|,
annotation|@
name|Nullable
name|Object
name|mutex
parameter_list|,
annotation|@
name|Nullable
name|BiMap
argument_list|<
name|V
argument_list|,
name|K
argument_list|>
name|inverse
parameter_list|)
block|{
name|super
argument_list|(
name|delegate
argument_list|,
name|mutex
argument_list|)
expr_stmt|;
name|this
operator|.
name|inverse
operator|=
name|inverse
expr_stmt|;
block|}
DECL|method|delegate ()
annotation|@
name|Override
name|BiMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|delegate
parameter_list|()
block|{
return|return
operator|(
name|BiMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
operator|)
name|super
operator|.
name|delegate
argument_list|()
return|;
block|}
DECL|method|values ()
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|V
argument_list|>
name|values
parameter_list|()
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
if|if
condition|(
name|valueSet
operator|==
literal|null
condition|)
block|{
name|valueSet
operator|=
name|set
argument_list|(
name|delegate
argument_list|()
operator|.
name|values
argument_list|()
argument_list|,
name|mutex
argument_list|)
expr_stmt|;
block|}
return|return
name|valueSet
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|forcePut (K key, V value)
specifier|public
name|V
name|forcePut
parameter_list|(
name|K
name|key
parameter_list|,
name|V
name|value
parameter_list|)
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|delegate
argument_list|()
operator|.
name|forcePut
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|inverse ()
specifier|public
name|BiMap
argument_list|<
name|V
argument_list|,
name|K
argument_list|>
name|inverse
parameter_list|()
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
if|if
condition|(
name|inverse
operator|==
literal|null
condition|)
block|{
name|inverse
operator|=
operator|new
name|SynchronizedBiMap
argument_list|<
name|V
argument_list|,
name|K
argument_list|>
argument_list|(
name|delegate
argument_list|()
operator|.
name|inverse
argument_list|()
argument_list|,
name|mutex
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
return|return
name|inverse
return|;
block|}
block|}
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|0
decl_stmt|;
block|}
DECL|class|SynchronizedAsMap
specifier|private
specifier|static
class|class
name|SynchronizedAsMap
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
extends|extends
name|SynchronizedMap
argument_list|<
name|K
argument_list|,
name|Collection
argument_list|<
name|V
argument_list|>
argument_list|>
block|{
DECL|field|asMapEntrySet
specifier|transient
name|Set
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|K
argument_list|,
name|Collection
argument_list|<
name|V
argument_list|>
argument_list|>
argument_list|>
name|asMapEntrySet
decl_stmt|;
DECL|field|asMapValues
specifier|transient
name|Collection
argument_list|<
name|Collection
argument_list|<
name|V
argument_list|>
argument_list|>
name|asMapValues
decl_stmt|;
DECL|method|SynchronizedAsMap (Map<K, Collection<V>> delegate, @Nullable Object mutex)
name|SynchronizedAsMap
parameter_list|(
name|Map
argument_list|<
name|K
argument_list|,
name|Collection
argument_list|<
name|V
argument_list|>
argument_list|>
name|delegate
parameter_list|,
annotation|@
name|Nullable
name|Object
name|mutex
parameter_list|)
block|{
name|super
argument_list|(
name|delegate
argument_list|,
name|mutex
argument_list|)
expr_stmt|;
block|}
DECL|method|get (Object key)
annotation|@
name|Override
specifier|public
name|Collection
argument_list|<
name|V
argument_list|>
name|get
parameter_list|(
name|Object
name|key
parameter_list|)
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
name|Collection
argument_list|<
name|V
argument_list|>
name|collection
init|=
name|super
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
return|return
operator|(
name|collection
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|typePreservingCollection
argument_list|(
name|collection
argument_list|,
name|mutex
argument_list|)
return|;
block|}
block|}
DECL|method|entrySet ()
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|K
argument_list|,
name|Collection
argument_list|<
name|V
argument_list|>
argument_list|>
argument_list|>
name|entrySet
parameter_list|()
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
if|if
condition|(
name|asMapEntrySet
operator|==
literal|null
condition|)
block|{
name|asMapEntrySet
operator|=
operator|new
name|SynchronizedAsMapEntries
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|(
name|delegate
argument_list|()
operator|.
name|entrySet
argument_list|()
argument_list|,
name|mutex
argument_list|)
expr_stmt|;
block|}
return|return
name|asMapEntrySet
return|;
block|}
block|}
DECL|method|values ()
annotation|@
name|Override
specifier|public
name|Collection
argument_list|<
name|Collection
argument_list|<
name|V
argument_list|>
argument_list|>
name|values
parameter_list|()
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
if|if
condition|(
name|asMapValues
operator|==
literal|null
condition|)
block|{
name|asMapValues
operator|=
operator|new
name|SynchronizedAsMapValues
argument_list|<
name|V
argument_list|>
argument_list|(
name|delegate
argument_list|()
operator|.
name|values
argument_list|()
argument_list|,
name|mutex
argument_list|)
expr_stmt|;
block|}
return|return
name|asMapValues
return|;
block|}
block|}
DECL|method|containsValue (Object o)
annotation|@
name|Override
specifier|public
name|boolean
name|containsValue
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
comment|// values() and its contains() method are both synchronized.
return|return
name|values
argument_list|()
operator|.
name|contains
argument_list|(
name|o
argument_list|)
return|;
block|}
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|0
decl_stmt|;
block|}
DECL|class|SynchronizedAsMapValues
specifier|private
specifier|static
class|class
name|SynchronizedAsMapValues
parameter_list|<
name|V
parameter_list|>
extends|extends
name|SynchronizedCollection
argument_list|<
name|Collection
argument_list|<
name|V
argument_list|>
argument_list|>
block|{
DECL|method|SynchronizedAsMapValues ( Collection<Collection<V>> delegate, @Nullable Object mutex)
name|SynchronizedAsMapValues
parameter_list|(
name|Collection
argument_list|<
name|Collection
argument_list|<
name|V
argument_list|>
argument_list|>
name|delegate
parameter_list|,
annotation|@
name|Nullable
name|Object
name|mutex
parameter_list|)
block|{
name|super
argument_list|(
name|delegate
argument_list|,
name|mutex
argument_list|)
expr_stmt|;
block|}
DECL|method|iterator ()
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|Collection
argument_list|<
name|V
argument_list|>
argument_list|>
name|iterator
parameter_list|()
block|{
comment|// Must be manually synchronized.
specifier|final
name|Iterator
argument_list|<
name|Collection
argument_list|<
name|V
argument_list|>
argument_list|>
name|iterator
init|=
name|super
operator|.
name|iterator
argument_list|()
decl_stmt|;
return|return
operator|new
name|ForwardingIterator
argument_list|<
name|Collection
argument_list|<
name|V
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|Iterator
argument_list|<
name|Collection
argument_list|<
name|V
argument_list|>
argument_list|>
name|delegate
parameter_list|()
block|{
return|return
name|iterator
return|;
block|}
annotation|@
name|Override
specifier|public
name|Collection
argument_list|<
name|V
argument_list|>
name|next
parameter_list|()
block|{
return|return
name|typePreservingCollection
argument_list|(
name|iterator
operator|.
name|next
argument_list|()
argument_list|,
name|mutex
argument_list|)
return|;
block|}
block|}
return|;
block|}
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|0
decl_stmt|;
block|}
block|}
end_class

end_unit

