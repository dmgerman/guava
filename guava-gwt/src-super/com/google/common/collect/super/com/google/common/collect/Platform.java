begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2008 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.collect
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
operator|.
name|EntryTransformer
import|;
end_import

begin_import
import|import
name|jsinterop
operator|.
name|annotations
operator|.
name|JsPackage
import|;
end_import

begin_import
import|import
name|jsinterop
operator|.
name|annotations
operator|.
name|JsProperty
import|;
end_import

begin_import
import|import
name|jsinterop
operator|.
name|annotations
operator|.
name|JsType
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Deque
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedSet
import|;
end_import

begin_comment
comment|/**  * Minimal GWT emulation of {@code com.google.common.collect.Platform}.  *  *<p><strong>This .java file should never be consumed by javac.</strong>  *  * @author Hayward Chan  */
end_comment

begin_class
DECL|class|Platform
specifier|final
class|class
name|Platform
block|{
DECL|method|newArray (T[] reference, int length)
specifier|static
parameter_list|<
name|T
parameter_list|>
name|T
index|[]
name|newArray
parameter_list|(
name|T
index|[]
name|reference
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|T
index|[]
name|clone
init|=
name|Arrays
operator|.
name|copyOf
argument_list|(
name|reference
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|resizeArray
argument_list|(
name|clone
argument_list|,
name|length
argument_list|)
expr_stmt|;
return|return
name|clone
return|;
block|}
DECL|method|resizeArray (Object array, int newSize)
specifier|private
specifier|static
name|void
name|resizeArray
parameter_list|(
name|Object
name|array
parameter_list|,
name|int
name|newSize
parameter_list|)
block|{
operator|(
operator|(
name|NativeArray
operator|)
name|array
operator|)
operator|.
name|setLength
argument_list|(
name|newSize
argument_list|)
expr_stmt|;
block|}
comment|// TODO(user): Move this logic to a utility class.
annotation|@
name|JsType
argument_list|(
name|isNative
operator|=
literal|true
argument_list|,
name|name
operator|=
literal|"Array"
argument_list|,
name|namespace
operator|=
name|JsPackage
operator|.
name|GLOBAL
argument_list|)
DECL|interface|NativeArray
specifier|private
interface|interface
name|NativeArray
block|{
annotation|@
name|JsProperty
DECL|method|setLength (int length)
name|void
name|setLength
parameter_list|(
name|int
name|length
parameter_list|)
function_decl|;
block|}
DECL|method|tryWeakKeys (MapMaker mapMaker)
specifier|static
name|MapMaker
name|tryWeakKeys
parameter_list|(
name|MapMaker
name|mapMaker
parameter_list|)
block|{
return|return
name|mapMaker
return|;
block|}
DECL|method|mapsTransformEntriesSortedMap ( SortedMap<K, V1> fromMap, EntryTransformer<? super K, ? super V1, V2> transformer)
specifier|static
parameter_list|<
name|K
parameter_list|,
name|V1
parameter_list|,
name|V2
parameter_list|>
name|SortedMap
argument_list|<
name|K
argument_list|,
name|V2
argument_list|>
name|mapsTransformEntriesSortedMap
parameter_list|(
name|SortedMap
argument_list|<
name|K
argument_list|,
name|V1
argument_list|>
name|fromMap
parameter_list|,
name|EntryTransformer
argument_list|<
name|?
super|super
name|K
argument_list|,
name|?
super|super
name|V1
argument_list|,
name|V2
argument_list|>
name|transformer
parameter_list|)
block|{
return|return
name|Maps
operator|.
name|transformEntriesIgnoreNavigable
argument_list|(
name|fromMap
argument_list|,
name|transformer
argument_list|)
return|;
block|}
DECL|method|mapsAsMapSortedSet ( SortedSet<K> set, Function<? super K, V> function)
specifier|static
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
name|SortedMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|mapsAsMapSortedSet
parameter_list|(
name|SortedSet
argument_list|<
name|K
argument_list|>
name|set
parameter_list|,
name|Function
argument_list|<
name|?
super|super
name|K
argument_list|,
name|V
argument_list|>
name|function
parameter_list|)
block|{
return|return
name|Maps
operator|.
name|asMapSortedIgnoreNavigable
argument_list|(
name|set
argument_list|,
name|function
argument_list|)
return|;
block|}
DECL|method|setsFilterSortedSet ( SortedSet<E> unfiltered, Predicate<? super E> predicate)
specifier|static
parameter_list|<
name|E
parameter_list|>
name|SortedSet
argument_list|<
name|E
argument_list|>
name|setsFilterSortedSet
parameter_list|(
name|SortedSet
argument_list|<
name|E
argument_list|>
name|unfiltered
parameter_list|,
name|Predicate
argument_list|<
name|?
super|super
name|E
argument_list|>
name|predicate
parameter_list|)
block|{
return|return
name|Sets
operator|.
name|filterSortedIgnoreNavigable
argument_list|(
name|unfiltered
argument_list|,
name|predicate
argument_list|)
return|;
block|}
DECL|method|mapsFilterSortedMap ( SortedMap<K, V> unfiltered, Predicate<? super Map.Entry<K, V>> predicate)
specifier|static
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
name|SortedMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|mapsFilterSortedMap
parameter_list|(
name|SortedMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|unfiltered
parameter_list|,
name|Predicate
argument_list|<
name|?
super|super
name|Map
operator|.
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|predicate
parameter_list|)
block|{
return|return
name|Maps
operator|.
name|filterSortedIgnoreNavigable
argument_list|(
name|unfiltered
argument_list|,
name|predicate
argument_list|)
return|;
block|}
DECL|method|newFastestDeque (int ignored)
specifier|static
parameter_list|<
name|E
parameter_list|>
name|Deque
argument_list|<
name|E
argument_list|>
name|newFastestDeque
parameter_list|(
name|int
name|ignored
parameter_list|)
block|{
return|return
operator|new
name|LinkedList
argument_list|<
name|E
argument_list|>
argument_list|()
return|;
block|}
DECL|method|Platform ()
specifier|private
name|Platform
parameter_list|()
block|{}
block|}
end_class

end_unit

