begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2015 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.util.concurrent
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|RunnableFuture
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_comment
comment|/**  * Emulation for TrustedListenableFutureTask in GWT.  */
end_comment

begin_class
DECL|class|TrustedListenableFutureTask
specifier|public
class|class
name|TrustedListenableFutureTask
parameter_list|<
name|V
parameter_list|>
extends|extends
name|AbstractFuture
operator|.
name|TrustedFuture
argument_list|<
name|V
argument_list|>
implements|implements
name|RunnableFuture
argument_list|<
name|V
argument_list|>
block|{
DECL|method|create (Callable<V> callable)
specifier|static
parameter_list|<
name|V
parameter_list|>
name|TrustedListenableFutureTask
argument_list|<
name|V
argument_list|>
name|create
parameter_list|(
name|Callable
argument_list|<
name|V
argument_list|>
name|callable
parameter_list|)
block|{
return|return
operator|new
name|TrustedListenableFutureTask
argument_list|<
name|V
argument_list|>
argument_list|(
name|callable
argument_list|)
return|;
block|}
DECL|method|create ( Runnable runnable, @Nullable V result)
specifier|static
parameter_list|<
name|V
parameter_list|>
name|TrustedListenableFutureTask
argument_list|<
name|V
argument_list|>
name|create
parameter_list|(
name|Runnable
name|runnable
parameter_list|,
annotation|@
name|Nullable
name|V
name|result
parameter_list|)
block|{
return|return
operator|new
name|TrustedListenableFutureTask
argument_list|<
name|V
argument_list|>
argument_list|(
name|Executors
operator|.
name|callable
argument_list|(
name|runnable
argument_list|,
name|result
argument_list|)
argument_list|)
return|;
block|}
DECL|field|task
specifier|private
name|Callable
argument_list|<
name|V
argument_list|>
name|task
decl_stmt|;
DECL|method|TrustedListenableFutureTask (Callable<V> callable)
name|TrustedListenableFutureTask
parameter_list|(
name|Callable
argument_list|<
name|V
argument_list|>
name|callable
parameter_list|)
block|{
name|this
operator|.
name|task
operator|=
name|checkNotNull
argument_list|(
name|callable
argument_list|)
expr_stmt|;
block|}
DECL|method|run ()
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
comment|// Ensure we haven't been cancelled or already run.
if|if
condition|(
operator|!
name|isDone
argument_list|()
condition|)
block|{
name|doRun
argument_list|(
name|task
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|setException
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|task
operator|=
literal|null
expr_stmt|;
block|}
block|}
DECL|method|cancel (boolean mayInterruptIfRunning)
annotation|@
name|Override
specifier|public
name|boolean
name|cancel
parameter_list|(
name|boolean
name|mayInterruptIfRunning
parameter_list|)
block|{
if|if
condition|(
name|super
operator|.
name|cancel
argument_list|(
name|mayInterruptIfRunning
argument_list|)
condition|)
block|{
name|task
operator|=
literal|null
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
DECL|method|doRun (Callable<V> localTask)
name|void
name|doRun
parameter_list|(
name|Callable
argument_list|<
name|V
argument_list|>
name|localTask
parameter_list|)
throws|throws
name|Exception
block|{
name|set
argument_list|(
name|localTask
operator|.
name|call
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

