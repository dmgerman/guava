begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2007 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except  * in compliance with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software distributed under the License  * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express  * or implied. See the License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|com.google.common.util.concurrent
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
package|;
end_package

begin_import
import|import
name|elemental2
operator|.
name|promise
operator|.
name|IThenable
import|;
end_import

begin_import
import|import
name|elemental2
operator|.
name|promise
operator|.
name|Promise
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|jsinterop
operator|.
name|annotations
operator|.
name|JsMethod
import|;
end_import

begin_import
import|import
name|jsinterop
operator|.
name|annotations
operator|.
name|JsOptional
import|;
end_import

begin_comment
comment|/**  * Java super source for ListenableFuture, implementing a structural thenable via a default method.  * For restrictions, please refer to the documentation of the then() method.  *  *<p>This class is not (explicitly) implementing IThenable<V> because "then" is overloaded there  * and the single parameter version would need to be marked native, which does not seem to be  * feasible in interfaces (see "subclassing a class with overloaded methods" in jsinterop  * documentation).  */
end_comment

begin_interface
DECL|interface|ListenableFuture
specifier|public
interface|interface
name|ListenableFuture
parameter_list|<
name|V
parameter_list|>
extends|extends
name|Future
argument_list|<
name|V
argument_list|>
extends|,
name|Thenable
argument_list|<
name|V
argument_list|>
block|{
DECL|method|addListener (Runnable listener, Executor executor)
name|void
name|addListener
parameter_list|(
name|Runnable
name|listener
parameter_list|,
name|Executor
name|executor
parameter_list|)
function_decl|;
comment|/** Note that this method is not expected to be overridden. */
annotation|@
name|JsMethod
annotation|@
name|Override
DECL|method|then ( @sOptional ThenOnFulfilledCallbackFn<? super V, ? extends R> onFulfilled, @JsOptional ThenOnRejectedCallbackFn<? extends R> onRejected)
specifier|default
parameter_list|<
name|R
parameter_list|>
name|IThenable
argument_list|<
name|R
argument_list|>
name|then
parameter_list|(
annotation|@
name|JsOptional
name|ThenOnFulfilledCallbackFn
argument_list|<
name|?
super|super
name|V
argument_list|,
name|?
extends|extends
name|R
argument_list|>
name|onFulfilled
parameter_list|,
annotation|@
name|JsOptional
name|ThenOnRejectedCallbackFn
argument_list|<
name|?
extends|extends
name|R
argument_list|>
name|onRejected
parameter_list|)
block|{
return|return
operator|new
name|Promise
argument_list|<
name|V
argument_list|>
argument_list|(
parameter_list|(
name|resolve
parameter_list|,
name|reject
parameter_list|)
lambda|->
block|{
name|Futures
operator|.
name|addCallback
argument_list|(
name|this
argument_list|,
operator|new
name|FutureCallback
argument_list|<
name|V
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|V
name|value
parameter_list|)
block|{
name|resolve
operator|.
name|onInvoke
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|throwable
parameter_list|)
block|{
name|reject
operator|.
name|onInvoke
argument_list|(
name|throwable
operator|.
name|getBackingJsObject
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|,
name|MoreExecutors
operator|.
name|directExecutor
argument_list|()
argument_list|)
expr_stmt|;
block|}
argument_list|)
operator|.
name|then
argument_list|(
operator|(
name|IThenable
operator|.
name|ThenOnFulfilledCallbackFn
operator|)
name|onFulfilled
argument_list|,
operator|(
name|IThenable
operator|.
name|ThenOnRejectedCallbackFn
operator|)
name|onRejected
argument_list|)
return|;
block|}
comment|// TODO(b/141673833): If this would work, it would allow us to implement IThenable properly:
comment|// default<R> Promise<R> then(IThenable.ThenOnFulfilledCallbackFn<? super V, ? extends R>
comment|// onFulfilled) {
comment|//   return then(onFulfilled, null);
comment|// }
block|}
end_interface

end_unit

