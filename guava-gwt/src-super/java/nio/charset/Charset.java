begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2012 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|java.nio.charset
package|package
name|java
operator|.
name|nio
operator|.
name|charset
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_comment
comment|/**  * A minimal GWT emulation of {@link Charset}.  *  * @author Gregory Kick  */
end_comment

begin_class
DECL|class|Charset
specifier|public
specifier|abstract
class|class
name|Charset
implements|implements
name|Comparable
argument_list|<
name|Charset
argument_list|>
block|{
DECL|field|UTF_8
specifier|private
specifier|static
specifier|final
name|Charset
name|UTF_8
init|=
operator|new
name|Charset
argument_list|(
literal|"UTF-8"
argument_list|)
block|{}
decl_stmt|;
DECL|field|AVAILABLE_CHARSETS
specifier|private
specifier|static
specifier|final
name|SortedMap
argument_list|<
name|String
argument_list|,
name|Charset
argument_list|>
name|AVAILABLE_CHARSETS
init|=
operator|new
name|TreeMap
argument_list|<
name|String
argument_list|,
name|Charset
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
name|AVAILABLE_CHARSETS
operator|.
name|put
argument_list|(
name|UTF_8
operator|.
name|name
argument_list|()
argument_list|,
name|UTF_8
argument_list|)
expr_stmt|;
block|}
DECL|method|availableCharsets ()
specifier|public
specifier|static
name|SortedMap
argument_list|<
name|String
argument_list|,
name|Charset
argument_list|>
name|availableCharsets
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableSortedMap
argument_list|(
name|AVAILABLE_CHARSETS
argument_list|)
return|;
block|}
DECL|method|forName (String charsetName)
specifier|public
specifier|static
name|Charset
name|forName
parameter_list|(
name|String
name|charsetName
parameter_list|)
block|{
if|if
condition|(
name|charsetName
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Null charset name"
argument_list|)
throw|;
block|}
name|int
name|length
init|=
name|charsetName
operator|.
name|length
argument_list|()
decl_stmt|;
if|if
condition|(
name|length
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalCharsetNameException
argument_list|(
name|charsetName
argument_list|)
throw|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
name|i
operator|++
control|)
block|{
name|char
name|c
init|=
name|charsetName
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|c
operator|>=
literal|'A'
operator|&&
name|c
operator|<=
literal|'Z'
operator|)
operator|||
operator|(
name|c
operator|>=
literal|'a'
operator|&&
name|c
operator|<=
literal|'z'
operator|)
operator|||
operator|(
name|c
operator|>=
literal|'0'
operator|&&
name|c
operator|<=
literal|'9'
operator|)
operator|||
operator|(
name|c
operator|==
literal|'-'
operator|&&
name|i
operator|!=
literal|0
operator|)
operator|||
operator|(
name|c
operator|==
literal|':'
operator|&&
name|i
operator|!=
literal|0
operator|)
operator|||
operator|(
name|c
operator|==
literal|'_'
operator|&&
name|i
operator|!=
literal|0
operator|)
operator|||
operator|(
name|c
operator|==
literal|'.'
operator|&&
name|i
operator|!=
literal|0
operator|)
condition|)
block|{
continue|continue;
block|}
throw|throw
operator|new
name|IllegalCharsetNameException
argument_list|(
name|charsetName
argument_list|)
throw|;
block|}
name|Charset
name|charset
init|=
name|AVAILABLE_CHARSETS
operator|.
name|get
argument_list|(
name|charsetName
operator|.
name|toUpperCase
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|charset
operator|!=
literal|null
condition|)
block|{
return|return
name|charset
return|;
block|}
throw|throw
operator|new
name|UnsupportedCharsetException
argument_list|(
name|charsetName
argument_list|)
throw|;
block|}
DECL|field|name
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
DECL|method|Charset (String name)
specifier|private
name|Charset
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
DECL|method|name ()
specifier|public
specifier|final
name|String
name|name
parameter_list|()
block|{
return|return
name|name
return|;
block|}
DECL|method|compareTo (Charset that)
specifier|public
specifier|final
name|int
name|compareTo
parameter_list|(
name|Charset
name|that
parameter_list|)
block|{
return|return
name|this
operator|.
name|name
operator|.
name|compareToIgnoreCase
argument_list|(
name|that
operator|.
name|name
argument_list|)
return|;
block|}
DECL|method|hashCode ()
specifier|public
specifier|final
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|name
operator|.
name|hashCode
argument_list|()
return|;
block|}
DECL|method|equals (Object o)
specifier|public
specifier|final
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|==
name|this
condition|)
block|{
return|return
literal|true
return|;
block|}
elseif|else
if|if
condition|(
name|o
operator|instanceof
name|Charset
condition|)
block|{
name|Charset
name|that
init|=
operator|(
name|Charset
operator|)
name|o
decl_stmt|;
return|return
name|this
operator|.
name|name
operator|.
name|equals
argument_list|(
name|that
operator|.
name|name
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
DECL|method|toString ()
specifier|public
specifier|final
name|String
name|toString
parameter_list|()
block|{
return|return
name|name
return|;
block|}
block|}
end_class

end_unit

