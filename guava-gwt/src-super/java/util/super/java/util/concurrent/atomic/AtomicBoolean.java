begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2015 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_comment
comment|/**  * Atomically sets the value to the given updated value  * if the current value {@code ==} the expected value.  *  *<p>May<a href="package-summary.html#Spurious">fail spuriously</a>  * and does not provide ordering guarantees, so is only rarely an  * appropriate alternative to {@code compareAndSet}.  *  * @param expect the expected value  * @param update the new value  * @return true if successful.  */
end_comment

begin_package
DECL|package|java.util.concurrent.atomic
package|package
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
package|;
end_package

begin_comment
comment|/**  * GWT emulation of AtomicBoolean.  */
end_comment

begin_class
DECL|class|AtomicBoolean
specifier|public
class|class
name|AtomicBoolean
implements|implements
name|java
operator|.
name|io
operator|.
name|Serializable
block|{
DECL|field|value
specifier|private
name|boolean
name|value
decl_stmt|;
DECL|method|AtomicBoolean (boolean initialValue)
specifier|public
name|AtomicBoolean
parameter_list|(
name|boolean
name|initialValue
parameter_list|)
block|{
name|value
operator|=
name|initialValue
expr_stmt|;
block|}
DECL|method|AtomicBoolean ()
specifier|public
name|AtomicBoolean
parameter_list|()
block|{   }
DECL|method|get ()
specifier|public
specifier|final
name|boolean
name|get
parameter_list|()
block|{
return|return
name|value
return|;
block|}
DECL|method|compareAndSet (boolean expect, boolean update)
specifier|public
specifier|final
name|boolean
name|compareAndSet
parameter_list|(
name|boolean
name|expect
parameter_list|,
name|boolean
name|update
parameter_list|)
block|{
if|if
condition|(
name|get
argument_list|()
operator|==
name|expect
condition|)
block|{
name|set
argument_list|(
name|update
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
DECL|method|weakCompareAndSet (boolean expect, boolean update)
specifier|public
name|boolean
name|weakCompareAndSet
parameter_list|(
name|boolean
name|expect
parameter_list|,
name|boolean
name|update
parameter_list|)
block|{
return|return
name|compareAndSet
argument_list|(
name|expect
argument_list|,
name|update
argument_list|)
return|;
block|}
DECL|method|set (boolean newValue)
specifier|public
specifier|final
name|void
name|set
parameter_list|(
name|boolean
name|newValue
parameter_list|)
block|{
name|value
operator|=
name|newValue
expr_stmt|;
block|}
DECL|method|lazySet (boolean newValue)
specifier|public
specifier|final
name|void
name|lazySet
parameter_list|(
name|boolean
name|newValue
parameter_list|)
block|{
name|set
argument_list|(
name|newValue
argument_list|)
expr_stmt|;
block|}
DECL|method|getAndSet (boolean newValue)
specifier|public
specifier|final
name|boolean
name|getAndSet
parameter_list|(
name|boolean
name|newValue
parameter_list|)
block|{
name|boolean
name|current
init|=
name|get
argument_list|()
decl_stmt|;
name|set
argument_list|(
name|newValue
argument_list|)
expr_stmt|;
return|return
name|current
return|;
block|}
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|Boolean
operator|.
name|toString
argument_list|(
name|get
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

