begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2008 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.collect
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
package|;
end_package

begin_class
DECL|class|OrderingTest_gwt
specifier|public
class|class
name|OrderingTest_gwt
extends|extends
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|junit
operator|.
name|client
operator|.
name|GWTTestCase
block|{
DECL|method|getModuleName ()
annotation|@
name|Override
specifier|public
name|String
name|getModuleName
parameter_list|()
block|{
return|return
literal|"com.google.common.collect.testModule"
return|;
block|}
DECL|method|testAllEqual ()
specifier|public
name|void
name|testAllEqual
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|OrderingTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|OrderingTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testAllEqual
argument_list|()
expr_stmt|;
block|}
DECL|method|testArbitrary_withCollisions ()
specifier|public
name|void
name|testArbitrary_withCollisions
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|OrderingTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|OrderingTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testArbitrary_withCollisions
argument_list|()
expr_stmt|;
block|}
DECL|method|testArbitrary_withoutCollisions ()
specifier|public
name|void
name|testArbitrary_withoutCollisions
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|OrderingTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|OrderingTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testArbitrary_withoutCollisions
argument_list|()
expr_stmt|;
block|}
DECL|method|testBinarySearch ()
specifier|public
name|void
name|testBinarySearch
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|OrderingTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|OrderingTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testBinarySearch
argument_list|()
expr_stmt|;
block|}
DECL|method|testCombinationsExhaustively_startingFromNatural ()
specifier|public
name|void
name|testCombinationsExhaustively_startingFromNatural
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|OrderingTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|OrderingTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testCombinationsExhaustively_startingFromNatural
argument_list|()
expr_stmt|;
block|}
DECL|method|testComplicatedOrderingExample ()
specifier|public
name|void
name|testComplicatedOrderingExample
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|OrderingTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|OrderingTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testComplicatedOrderingExample
argument_list|()
expr_stmt|;
block|}
DECL|method|testCompound_instance ()
specifier|public
name|void
name|testCompound_instance
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|OrderingTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|OrderingTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testCompound_instance
argument_list|()
expr_stmt|;
block|}
DECL|method|testCompound_instance_generics ()
specifier|public
name|void
name|testCompound_instance_generics
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|OrderingTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|OrderingTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testCompound_instance_generics
argument_list|()
expr_stmt|;
block|}
DECL|method|testCompound_static ()
specifier|public
name|void
name|testCompound_static
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|OrderingTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|OrderingTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testCompound_static
argument_list|()
expr_stmt|;
block|}
DECL|method|testExplicit_none ()
specifier|public
name|void
name|testExplicit_none
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|OrderingTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|OrderingTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testExplicit_none
argument_list|()
expr_stmt|;
block|}
DECL|method|testExplicit_one ()
specifier|public
name|void
name|testExplicit_one
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|OrderingTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|OrderingTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testExplicit_one
argument_list|()
expr_stmt|;
block|}
DECL|method|testExplicit_sortingExample ()
specifier|public
name|void
name|testExplicit_sortingExample
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|OrderingTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|OrderingTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testExplicit_sortingExample
argument_list|()
expr_stmt|;
block|}
DECL|method|testExplicit_two ()
specifier|public
name|void
name|testExplicit_two
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|OrderingTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|OrderingTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testExplicit_two
argument_list|()
expr_stmt|;
block|}
DECL|method|testExplicit_withDuplicates ()
specifier|public
name|void
name|testExplicit_withDuplicates
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|OrderingTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|OrderingTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testExplicit_withDuplicates
argument_list|()
expr_stmt|;
block|}
DECL|method|testFrom ()
specifier|public
name|void
name|testFrom
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|OrderingTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|OrderingTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testFrom
argument_list|()
expr_stmt|;
block|}
DECL|method|testGreatestOfIterable_simple ()
specifier|public
name|void
name|testGreatestOfIterable_simple
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|OrderingTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|OrderingTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testGreatestOfIterable_simple
argument_list|()
expr_stmt|;
block|}
DECL|method|testGreatestOfIterator_simple ()
specifier|public
name|void
name|testGreatestOfIterator_simple
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|OrderingTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|OrderingTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testGreatestOfIterator_simple
argument_list|()
expr_stmt|;
block|}
DECL|method|testImmutableSortedCopy ()
specifier|public
name|void
name|testImmutableSortedCopy
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|OrderingTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|OrderingTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testImmutableSortedCopy
argument_list|()
expr_stmt|;
block|}
DECL|method|testIsOrdered ()
specifier|public
name|void
name|testIsOrdered
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|OrderingTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|OrderingTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testIsOrdered
argument_list|()
expr_stmt|;
block|}
DECL|method|testIsStrictlyOrdered ()
specifier|public
name|void
name|testIsStrictlyOrdered
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|OrderingTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|OrderingTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testIsStrictlyOrdered
argument_list|()
expr_stmt|;
block|}
DECL|method|testIterableMinAndMax ()
specifier|public
name|void
name|testIterableMinAndMax
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|OrderingTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|OrderingTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testIterableMinAndMax
argument_list|()
expr_stmt|;
block|}
DECL|method|testIteratorMaxExhaustsIterator ()
specifier|public
name|void
name|testIteratorMaxExhaustsIterator
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|OrderingTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|OrderingTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testIteratorMaxExhaustsIterator
argument_list|()
expr_stmt|;
block|}
DECL|method|testIteratorMinAndMax ()
specifier|public
name|void
name|testIteratorMinAndMax
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|OrderingTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|OrderingTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testIteratorMinAndMax
argument_list|()
expr_stmt|;
block|}
DECL|method|testIteratorMinExhaustsIterator ()
specifier|public
name|void
name|testIteratorMinExhaustsIterator
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|OrderingTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|OrderingTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testIteratorMinExhaustsIterator
argument_list|()
expr_stmt|;
block|}
DECL|method|testLeastOfIterableLargeK ()
specifier|public
name|void
name|testLeastOfIterableLargeK
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|OrderingTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|OrderingTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testLeastOfIterableLargeK
argument_list|()
expr_stmt|;
block|}
DECL|method|testLeastOfIterable_empty_0 ()
specifier|public
name|void
name|testLeastOfIterable_empty_0
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|OrderingTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|OrderingTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testLeastOfIterable_empty_0
argument_list|()
expr_stmt|;
block|}
DECL|method|testLeastOfIterable_empty_1 ()
specifier|public
name|void
name|testLeastOfIterable_empty_1
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|OrderingTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|OrderingTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testLeastOfIterable_empty_1
argument_list|()
expr_stmt|;
block|}
DECL|method|testLeastOfIterable_simple_0 ()
specifier|public
name|void
name|testLeastOfIterable_simple_0
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|OrderingTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|OrderingTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testLeastOfIterable_simple_0
argument_list|()
expr_stmt|;
block|}
DECL|method|testLeastOfIterable_simple_1 ()
specifier|public
name|void
name|testLeastOfIterable_simple_1
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|OrderingTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|OrderingTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testLeastOfIterable_simple_1
argument_list|()
expr_stmt|;
block|}
DECL|method|testLeastOfIterable_simple_n ()
specifier|public
name|void
name|testLeastOfIterable_simple_n
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|OrderingTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|OrderingTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testLeastOfIterable_simple_n
argument_list|()
expr_stmt|;
block|}
DECL|method|testLeastOfIterable_simple_nMinusOne ()
specifier|public
name|void
name|testLeastOfIterable_simple_nMinusOne
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|OrderingTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|OrderingTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testLeastOfIterable_simple_nMinusOne
argument_list|()
expr_stmt|;
block|}
DECL|method|testLeastOfIterable_simple_nMinusOne_withNullElement ()
specifier|public
name|void
name|testLeastOfIterable_simple_nMinusOne_withNullElement
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|OrderingTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|OrderingTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testLeastOfIterable_simple_nMinusOne_withNullElement
argument_list|()
expr_stmt|;
block|}
DECL|method|testLeastOfIterable_simple_nPlusOne ()
specifier|public
name|void
name|testLeastOfIterable_simple_nPlusOne
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|OrderingTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|OrderingTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testLeastOfIterable_simple_nPlusOne
argument_list|()
expr_stmt|;
block|}
DECL|method|testLeastOfIterable_simple_n_withNullElement ()
specifier|public
name|void
name|testLeastOfIterable_simple_n_withNullElement
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|OrderingTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|OrderingTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testLeastOfIterable_simple_n_withNullElement
argument_list|()
expr_stmt|;
block|}
DECL|method|testLeastOfIterable_simple_negativeOne ()
specifier|public
name|void
name|testLeastOfIterable_simple_negativeOne
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|OrderingTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|OrderingTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testLeastOfIterable_simple_negativeOne
argument_list|()
expr_stmt|;
block|}
DECL|method|testLeastOfIterable_singleton_0 ()
specifier|public
name|void
name|testLeastOfIterable_singleton_0
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|OrderingTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|OrderingTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testLeastOfIterable_singleton_0
argument_list|()
expr_stmt|;
block|}
DECL|method|testLeastOfIterable_ties ()
specifier|public
name|void
name|testLeastOfIterable_ties
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|OrderingTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|OrderingTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testLeastOfIterable_ties
argument_list|()
expr_stmt|;
block|}
DECL|method|testLeastOfIteratorLargeK ()
specifier|public
name|void
name|testLeastOfIteratorLargeK
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|OrderingTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|OrderingTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testLeastOfIteratorLargeK
argument_list|()
expr_stmt|;
block|}
DECL|method|testLeastOfIterator_empty_0 ()
specifier|public
name|void
name|testLeastOfIterator_empty_0
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|OrderingTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|OrderingTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testLeastOfIterator_empty_0
argument_list|()
expr_stmt|;
block|}
DECL|method|testLeastOfIterator_empty_1 ()
specifier|public
name|void
name|testLeastOfIterator_empty_1
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|OrderingTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|OrderingTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testLeastOfIterator_empty_1
argument_list|()
expr_stmt|;
block|}
DECL|method|testLeastOfIterator_simple_0 ()
specifier|public
name|void
name|testLeastOfIterator_simple_0
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|OrderingTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|OrderingTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testLeastOfIterator_simple_0
argument_list|()
expr_stmt|;
block|}
DECL|method|testLeastOfIterator_simple_1 ()
specifier|public
name|void
name|testLeastOfIterator_simple_1
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|OrderingTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|OrderingTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testLeastOfIterator_simple_1
argument_list|()
expr_stmt|;
block|}
DECL|method|testLeastOfIterator_simple_n ()
specifier|public
name|void
name|testLeastOfIterator_simple_n
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|OrderingTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|OrderingTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testLeastOfIterator_simple_n
argument_list|()
expr_stmt|;
block|}
DECL|method|testLeastOfIterator_simple_nMinusOne ()
specifier|public
name|void
name|testLeastOfIterator_simple_nMinusOne
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|OrderingTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|OrderingTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testLeastOfIterator_simple_nMinusOne
argument_list|()
expr_stmt|;
block|}
DECL|method|testLeastOfIterator_simple_nMinusOne_withNullElement ()
specifier|public
name|void
name|testLeastOfIterator_simple_nMinusOne_withNullElement
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|OrderingTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|OrderingTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testLeastOfIterator_simple_nMinusOne_withNullElement
argument_list|()
expr_stmt|;
block|}
DECL|method|testLeastOfIterator_simple_nPlusOne ()
specifier|public
name|void
name|testLeastOfIterator_simple_nPlusOne
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|OrderingTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|OrderingTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testLeastOfIterator_simple_nPlusOne
argument_list|()
expr_stmt|;
block|}
DECL|method|testLeastOfIterator_simple_n_withNullElement ()
specifier|public
name|void
name|testLeastOfIterator_simple_n_withNullElement
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|OrderingTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|OrderingTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testLeastOfIterator_simple_n_withNullElement
argument_list|()
expr_stmt|;
block|}
DECL|method|testLeastOfIterator_simple_negativeOne ()
specifier|public
name|void
name|testLeastOfIterator_simple_negativeOne
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|OrderingTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|OrderingTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testLeastOfIterator_simple_negativeOne
argument_list|()
expr_stmt|;
block|}
DECL|method|testLeastOfIterator_singleton_0 ()
specifier|public
name|void
name|testLeastOfIterator_singleton_0
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|OrderingTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|OrderingTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testLeastOfIterator_singleton_0
argument_list|()
expr_stmt|;
block|}
DECL|method|testLeastOfIterator_ties ()
specifier|public
name|void
name|testLeastOfIterator_ties
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|OrderingTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|OrderingTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testLeastOfIterator_ties
argument_list|()
expr_stmt|;
block|}
DECL|method|testLeastOf_reconcileAgainstSortAndSublistSmall ()
specifier|public
name|void
name|testLeastOf_reconcileAgainstSortAndSublistSmall
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|OrderingTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|OrderingTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testLeastOf_reconcileAgainstSortAndSublistSmall
argument_list|()
expr_stmt|;
block|}
DECL|method|testLexicographical ()
specifier|public
name|void
name|testLexicographical
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|OrderingTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|OrderingTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testLexicographical
argument_list|()
expr_stmt|;
block|}
DECL|method|testNatural ()
specifier|public
name|void
name|testNatural
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|OrderingTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|OrderingTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testNatural
argument_list|()
expr_stmt|;
block|}
DECL|method|testNullsFirst ()
specifier|public
name|void
name|testNullsFirst
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|OrderingTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|OrderingTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testNullsFirst
argument_list|()
expr_stmt|;
block|}
DECL|method|testNullsLast ()
specifier|public
name|void
name|testNullsLast
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|OrderingTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|OrderingTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testNullsLast
argument_list|()
expr_stmt|;
block|}
DECL|method|testOnResultOf_chained ()
specifier|public
name|void
name|testOnResultOf_chained
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|OrderingTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|OrderingTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testOnResultOf_chained
argument_list|()
expr_stmt|;
block|}
DECL|method|testOnResultOf_natural ()
specifier|public
name|void
name|testOnResultOf_natural
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|OrderingTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|OrderingTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testOnResultOf_natural
argument_list|()
expr_stmt|;
block|}
DECL|method|testParameterMinAndMax ()
specifier|public
name|void
name|testParameterMinAndMax
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|OrderingTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|OrderingTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testParameterMinAndMax
argument_list|()
expr_stmt|;
block|}
DECL|method|testReverse ()
specifier|public
name|void
name|testReverse
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|OrderingTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|OrderingTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testReverse
argument_list|()
expr_stmt|;
block|}
DECL|method|testReverseOfReverseSameAsForward ()
specifier|public
name|void
name|testReverseOfReverseSameAsForward
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|OrderingTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|OrderingTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testReverseOfReverseSameAsForward
argument_list|()
expr_stmt|;
block|}
DECL|method|testSortedCopy ()
specifier|public
name|void
name|testSortedCopy
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|OrderingTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|OrderingTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testSortedCopy
argument_list|()
expr_stmt|;
block|}
DECL|method|testUsingToString ()
specifier|public
name|void
name|testUsingToString
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|OrderingTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|OrderingTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testUsingToString
argument_list|()
expr_stmt|;
block|}
DECL|method|testVarargsMinAndMax ()
specifier|public
name|void
name|testVarargsMinAndMax
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|OrderingTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|OrderingTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testVarargsMinAndMax
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

