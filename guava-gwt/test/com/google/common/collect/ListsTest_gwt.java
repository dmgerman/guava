begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2008 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.collect
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
package|;
end_package

begin_class
DECL|class|ListsTest_gwt
specifier|public
class|class
name|ListsTest_gwt
extends|extends
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|junit
operator|.
name|client
operator|.
name|GWTTestCase
block|{
DECL|method|getModuleName ()
annotation|@
name|Override
specifier|public
name|String
name|getModuleName
parameter_list|()
block|{
return|return
literal|"com.google.common.collect.testModule"
return|;
block|}
DECL|method|testArraysAsList ()
specifier|public
name|void
name|testArraysAsList
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ListsTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ListsTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testArraysAsList
argument_list|()
expr_stmt|;
block|}
DECL|method|testAsList1Small ()
specifier|public
name|void
name|testAsList1Small
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ListsTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ListsTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testAsList1Small
argument_list|()
expr_stmt|;
block|}
DECL|method|testAsList2 ()
specifier|public
name|void
name|testAsList2
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ListsTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ListsTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testAsList2
argument_list|()
expr_stmt|;
block|}
DECL|method|testCartesianProductTooBig ()
specifier|public
name|void
name|testCartesianProductTooBig
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ListsTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ListsTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testCartesianProductTooBig
argument_list|()
expr_stmt|;
block|}
DECL|method|testCartesianProduct_2x2x2 ()
specifier|public
name|void
name|testCartesianProduct_2x2x2
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ListsTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ListsTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testCartesianProduct_2x2x2
argument_list|()
expr_stmt|;
block|}
DECL|method|testCartesianProduct_binary1x1 ()
specifier|public
name|void
name|testCartesianProduct_binary1x1
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ListsTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ListsTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testCartesianProduct_binary1x1
argument_list|()
expr_stmt|;
block|}
DECL|method|testCartesianProduct_binary1x2 ()
specifier|public
name|void
name|testCartesianProduct_binary1x2
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ListsTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ListsTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testCartesianProduct_binary1x2
argument_list|()
expr_stmt|;
block|}
DECL|method|testCartesianProduct_binary2x2 ()
specifier|public
name|void
name|testCartesianProduct_binary2x2
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ListsTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ListsTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testCartesianProduct_binary2x2
argument_list|()
expr_stmt|;
block|}
DECL|method|testCartesianProduct_contains ()
specifier|public
name|void
name|testCartesianProduct_contains
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ListsTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ListsTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testCartesianProduct_contains
argument_list|()
expr_stmt|;
block|}
DECL|method|testCartesianProduct_indexOf ()
specifier|public
name|void
name|testCartesianProduct_indexOf
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ListsTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ListsTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testCartesianProduct_indexOf
argument_list|()
expr_stmt|;
block|}
DECL|method|testCartesianProduct_unrelatedTypes ()
specifier|public
name|void
name|testCartesianProduct_unrelatedTypes
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ListsTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ListsTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testCartesianProduct_unrelatedTypes
argument_list|()
expr_stmt|;
block|}
DECL|method|testCharactersOfIsView ()
specifier|public
name|void
name|testCharactersOfIsView
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ListsTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ListsTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testCharactersOfIsView
argument_list|()
expr_stmt|;
block|}
DECL|method|testComputeArrayListCapacity ()
specifier|public
name|void
name|testComputeArrayListCapacity
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ListsTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ListsTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testComputeArrayListCapacity
argument_list|()
expr_stmt|;
block|}
DECL|method|testNewArrayListEmpty ()
specifier|public
name|void
name|testNewArrayListEmpty
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ListsTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ListsTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testNewArrayListEmpty
argument_list|()
expr_stmt|;
block|}
DECL|method|testNewArrayListFromCollection ()
specifier|public
name|void
name|testNewArrayListFromCollection
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ListsTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ListsTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testNewArrayListFromCollection
argument_list|()
expr_stmt|;
block|}
DECL|method|testNewArrayListFromIterable ()
specifier|public
name|void
name|testNewArrayListFromIterable
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ListsTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ListsTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testNewArrayListFromIterable
argument_list|()
expr_stmt|;
block|}
DECL|method|testNewArrayListFromIterator ()
specifier|public
name|void
name|testNewArrayListFromIterator
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ListsTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ListsTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testNewArrayListFromIterator
argument_list|()
expr_stmt|;
block|}
DECL|method|testNewArrayListVarArgs ()
specifier|public
name|void
name|testNewArrayListVarArgs
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ListsTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ListsTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testNewArrayListVarArgs
argument_list|()
expr_stmt|;
block|}
DECL|method|testNewArrayListWithCapacity ()
specifier|public
name|void
name|testNewArrayListWithCapacity
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ListsTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ListsTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testNewArrayListWithCapacity
argument_list|()
expr_stmt|;
block|}
DECL|method|testNewArrayListWithCapacity_negative ()
specifier|public
name|void
name|testNewArrayListWithCapacity_negative
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ListsTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ListsTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testNewArrayListWithCapacity_negative
argument_list|()
expr_stmt|;
block|}
DECL|method|testNewArrayListWithExpectedSize ()
specifier|public
name|void
name|testNewArrayListWithExpectedSize
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ListsTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ListsTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testNewArrayListWithExpectedSize
argument_list|()
expr_stmt|;
block|}
DECL|method|testNewArrayListWithExpectedSize_negative ()
specifier|public
name|void
name|testNewArrayListWithExpectedSize_negative
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ListsTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ListsTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testNewArrayListWithExpectedSize_negative
argument_list|()
expr_stmt|;
block|}
DECL|method|testNewLinkedListEmpty ()
specifier|public
name|void
name|testNewLinkedListEmpty
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ListsTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ListsTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testNewLinkedListEmpty
argument_list|()
expr_stmt|;
block|}
DECL|method|testNewLinkedListFromCollection ()
specifier|public
name|void
name|testNewLinkedListFromCollection
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ListsTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ListsTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testNewLinkedListFromCollection
argument_list|()
expr_stmt|;
block|}
DECL|method|testNewLinkedListFromIterable ()
specifier|public
name|void
name|testNewLinkedListFromIterable
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ListsTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ListsTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testNewLinkedListFromIterable
argument_list|()
expr_stmt|;
block|}
DECL|method|testPartitionRandomAccessFalse ()
specifier|public
name|void
name|testPartitionRandomAccessFalse
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ListsTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ListsTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testPartitionRandomAccessFalse
argument_list|()
expr_stmt|;
block|}
DECL|method|testPartitionSize_1 ()
specifier|public
name|void
name|testPartitionSize_1
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ListsTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ListsTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testPartitionSize_1
argument_list|()
expr_stmt|;
block|}
DECL|method|testPartition_1_1 ()
specifier|public
name|void
name|testPartition_1_1
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ListsTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ListsTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testPartition_1_1
argument_list|()
expr_stmt|;
block|}
DECL|method|testPartition_1_2 ()
specifier|public
name|void
name|testPartition_1_2
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ListsTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ListsTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testPartition_1_2
argument_list|()
expr_stmt|;
block|}
DECL|method|testPartition_2_1 ()
specifier|public
name|void
name|testPartition_2_1
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ListsTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ListsTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testPartition_2_1
argument_list|()
expr_stmt|;
block|}
DECL|method|testPartition_3_2 ()
specifier|public
name|void
name|testPartition_3_2
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ListsTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ListsTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testPartition_3_2
argument_list|()
expr_stmt|;
block|}
DECL|method|testPartition_badSize ()
specifier|public
name|void
name|testPartition_badSize
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ListsTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ListsTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testPartition_badSize
argument_list|()
expr_stmt|;
block|}
DECL|method|testPartition_empty ()
specifier|public
name|void
name|testPartition_empty
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ListsTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ListsTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testPartition_empty
argument_list|()
expr_stmt|;
block|}
DECL|method|testPartition_view ()
specifier|public
name|void
name|testPartition_view
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ListsTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ListsTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testPartition_view
argument_list|()
expr_stmt|;
block|}
DECL|method|testReverseViewRandomAccess ()
specifier|public
name|void
name|testReverseViewRandomAccess
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ListsTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ListsTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testReverseViewRandomAccess
argument_list|()
expr_stmt|;
block|}
DECL|method|testReverseViewSequential ()
specifier|public
name|void
name|testReverseViewSequential
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ListsTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ListsTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testReverseViewSequential
argument_list|()
expr_stmt|;
block|}
DECL|method|testTransformHashCodeRandomAccess ()
specifier|public
name|void
name|testTransformHashCodeRandomAccess
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ListsTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ListsTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testTransformHashCodeRandomAccess
argument_list|()
expr_stmt|;
block|}
DECL|method|testTransformHashCodeSequential ()
specifier|public
name|void
name|testTransformHashCodeSequential
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ListsTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ListsTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testTransformHashCodeSequential
argument_list|()
expr_stmt|;
block|}
DECL|method|testTransformIteratorRandomAccess ()
specifier|public
name|void
name|testTransformIteratorRandomAccess
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ListsTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ListsTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testTransformIteratorRandomAccess
argument_list|()
expr_stmt|;
block|}
DECL|method|testTransformIteratorSequential ()
specifier|public
name|void
name|testTransformIteratorSequential
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ListsTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ListsTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testTransformIteratorSequential
argument_list|()
expr_stmt|;
block|}
DECL|method|testTransformListIteratorRandomAccess ()
specifier|public
name|void
name|testTransformListIteratorRandomAccess
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ListsTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ListsTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testTransformListIteratorRandomAccess
argument_list|()
expr_stmt|;
block|}
DECL|method|testTransformListIteratorSequential ()
specifier|public
name|void
name|testTransformListIteratorSequential
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ListsTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ListsTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testTransformListIteratorSequential
argument_list|()
expr_stmt|;
block|}
DECL|method|testTransformModifiableRandomAccess ()
specifier|public
name|void
name|testTransformModifiableRandomAccess
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ListsTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ListsTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testTransformModifiableRandomAccess
argument_list|()
expr_stmt|;
block|}
DECL|method|testTransformModifiableSequential ()
specifier|public
name|void
name|testTransformModifiableSequential
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ListsTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ListsTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testTransformModifiableSequential
argument_list|()
expr_stmt|;
block|}
DECL|method|testTransformPreservesIOOBEsThrownByFunction ()
specifier|public
name|void
name|testTransformPreservesIOOBEsThrownByFunction
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ListsTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ListsTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testTransformPreservesIOOBEsThrownByFunction
argument_list|()
expr_stmt|;
block|}
DECL|method|testTransformRandomAccess ()
specifier|public
name|void
name|testTransformRandomAccess
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ListsTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ListsTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testTransformRandomAccess
argument_list|()
expr_stmt|;
block|}
DECL|method|testTransformSequential ()
specifier|public
name|void
name|testTransformSequential
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ListsTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ListsTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testTransformSequential
argument_list|()
expr_stmt|;
block|}
DECL|method|testTransformViewRandomAccess ()
specifier|public
name|void
name|testTransformViewRandomAccess
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ListsTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ListsTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testTransformViewRandomAccess
argument_list|()
expr_stmt|;
block|}
DECL|method|testTransformViewSequential ()
specifier|public
name|void
name|testTransformViewSequential
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ListsTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ListsTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testTransformViewSequential
argument_list|()
expr_stmt|;
block|}
DECL|method|testTransformedSequentialIterationUsesBackingListIterationOnly ()
specifier|public
name|void
name|testTransformedSequentialIterationUsesBackingListIterationOnly
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ListsTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ListsTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testTransformedSequentialIterationUsesBackingListIterationOnly
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

