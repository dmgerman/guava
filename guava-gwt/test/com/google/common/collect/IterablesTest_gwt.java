begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2008 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.collect
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
package|;
end_package

begin_class
DECL|class|IterablesTest_gwt
specifier|public
class|class
name|IterablesTest_gwt
extends|extends
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|junit
operator|.
name|client
operator|.
name|GWTTestCase
block|{
DECL|method|getModuleName ()
annotation|@
name|Override
specifier|public
name|String
name|getModuleName
parameter_list|()
block|{
return|return
literal|"com.google.common.collect.testModule"
return|;
block|}
DECL|method|testAddAllToList ()
specifier|public
name|void
name|testAddAllToList
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|IterablesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|IterablesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testAddAllToList
argument_list|()
expr_stmt|;
block|}
DECL|method|testAll ()
specifier|public
name|void
name|testAll
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|IterablesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|IterablesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testAll
argument_list|()
expr_stmt|;
block|}
DECL|method|testAny ()
specifier|public
name|void
name|testAny
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|IterablesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|IterablesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testAny
argument_list|()
expr_stmt|;
block|}
DECL|method|testConcatIterable ()
specifier|public
name|void
name|testConcatIterable
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|IterablesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|IterablesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testConcatIterable
argument_list|()
expr_stmt|;
block|}
DECL|method|testConcatNullPointerException ()
specifier|public
name|void
name|testConcatNullPointerException
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|IterablesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|IterablesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testConcatNullPointerException
argument_list|()
expr_stmt|;
block|}
DECL|method|testConcatPeformingFiniteCycle ()
specifier|public
name|void
name|testConcatPeformingFiniteCycle
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|IterablesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|IterablesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testConcatPeformingFiniteCycle
argument_list|()
expr_stmt|;
block|}
DECL|method|testConcatVarargs ()
specifier|public
name|void
name|testConcatVarargs
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|IterablesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|IterablesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testConcatVarargs
argument_list|()
expr_stmt|;
block|}
DECL|method|testConsumingIterable ()
specifier|public
name|void
name|testConsumingIterable
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|IterablesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|IterablesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testConsumingIterable
argument_list|()
expr_stmt|;
block|}
DECL|method|testConsumingIterable_noIteratorCall ()
specifier|public
name|void
name|testConsumingIterable_noIteratorCall
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|IterablesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|IterablesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testConsumingIterable_noIteratorCall
argument_list|()
expr_stmt|;
block|}
DECL|method|testConsumingIterable_queue_iterator ()
specifier|public
name|void
name|testConsumingIterable_queue_iterator
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|IterablesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|IterablesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testConsumingIterable_queue_iterator
argument_list|()
expr_stmt|;
block|}
DECL|method|testConsumingIterable_queue_removesFromQueue ()
specifier|public
name|void
name|testConsumingIterable_queue_removesFromQueue
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|IterablesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|IterablesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testConsumingIterable_queue_removesFromQueue
argument_list|()
expr_stmt|;
block|}
DECL|method|testCycle ()
specifier|public
name|void
name|testCycle
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|IterablesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|IterablesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testCycle
argument_list|()
expr_stmt|;
block|}
DECL|method|testElementsEqual ()
specifier|public
name|void
name|testElementsEqual
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|IterablesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|IterablesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testElementsEqual
argument_list|()
expr_stmt|;
block|}
DECL|method|testFind ()
specifier|public
name|void
name|testFind
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|IterablesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|IterablesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testFind
argument_list|()
expr_stmt|;
block|}
DECL|method|testFind_withDefault ()
specifier|public
name|void
name|testFind_withDefault
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|IterablesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|IterablesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testFind_withDefault
argument_list|()
expr_stmt|;
block|}
DECL|method|testFrequency_list ()
specifier|public
name|void
name|testFrequency_list
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|IterablesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|IterablesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testFrequency_list
argument_list|()
expr_stmt|;
block|}
DECL|method|testFrequency_multiset ()
specifier|public
name|void
name|testFrequency_multiset
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|IterablesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|IterablesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testFrequency_multiset
argument_list|()
expr_stmt|;
block|}
DECL|method|testFrequency_set ()
specifier|public
name|void
name|testFrequency_set
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|IterablesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|IterablesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testFrequency_set
argument_list|()
expr_stmt|;
block|}
DECL|method|testGetFirst_withDefault_empty ()
specifier|public
name|void
name|testGetFirst_withDefault_empty
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|IterablesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|IterablesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testGetFirst_withDefault_empty
argument_list|()
expr_stmt|;
block|}
DECL|method|testGetFirst_withDefault_empty_null ()
specifier|public
name|void
name|testGetFirst_withDefault_empty_null
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|IterablesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|IterablesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testGetFirst_withDefault_empty_null
argument_list|()
expr_stmt|;
block|}
DECL|method|testGetFirst_withDefault_multiple ()
specifier|public
name|void
name|testGetFirst_withDefault_multiple
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|IterablesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|IterablesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testGetFirst_withDefault_multiple
argument_list|()
expr_stmt|;
block|}
DECL|method|testGetFirst_withDefault_singleton ()
specifier|public
name|void
name|testGetFirst_withDefault_singleton
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|IterablesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|IterablesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testGetFirst_withDefault_singleton
argument_list|()
expr_stmt|;
block|}
DECL|method|testGetLast_emptyIterable ()
specifier|public
name|void
name|testGetLast_emptyIterable
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|IterablesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|IterablesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testGetLast_emptyIterable
argument_list|()
expr_stmt|;
block|}
DECL|method|testGetLast_emptyList ()
specifier|public
name|void
name|testGetLast_emptyList
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|IterablesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|IterablesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testGetLast_emptyList
argument_list|()
expr_stmt|;
block|}
DECL|method|testGetLast_emptySortedSet ()
specifier|public
name|void
name|testGetLast_emptySortedSet
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|IterablesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|IterablesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testGetLast_emptySortedSet
argument_list|()
expr_stmt|;
block|}
DECL|method|testGetLast_iterable ()
specifier|public
name|void
name|testGetLast_iterable
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|IterablesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|IterablesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testGetLast_iterable
argument_list|()
expr_stmt|;
block|}
DECL|method|testGetLast_list ()
specifier|public
name|void
name|testGetLast_list
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|IterablesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|IterablesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testGetLast_list
argument_list|()
expr_stmt|;
block|}
DECL|method|testGetLast_sortedSet ()
specifier|public
name|void
name|testGetLast_sortedSet
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|IterablesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|IterablesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testGetLast_sortedSet
argument_list|()
expr_stmt|;
block|}
DECL|method|testGetLast_withDefault_empty ()
specifier|public
name|void
name|testGetLast_withDefault_empty
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|IterablesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|IterablesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testGetLast_withDefault_empty
argument_list|()
expr_stmt|;
block|}
DECL|method|testGetLast_withDefault_empty_null ()
specifier|public
name|void
name|testGetLast_withDefault_empty_null
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|IterablesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|IterablesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testGetLast_withDefault_empty_null
argument_list|()
expr_stmt|;
block|}
DECL|method|testGetLast_withDefault_multiple ()
specifier|public
name|void
name|testGetLast_withDefault_multiple
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|IterablesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|IterablesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testGetLast_withDefault_multiple
argument_list|()
expr_stmt|;
block|}
DECL|method|testGetLast_withDefault_not_empty_list ()
specifier|public
name|void
name|testGetLast_withDefault_not_empty_list
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|IterablesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|IterablesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testGetLast_withDefault_not_empty_list
argument_list|()
expr_stmt|;
block|}
DECL|method|testGetLast_withDefault_singleton ()
specifier|public
name|void
name|testGetLast_withDefault_singleton
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|IterablesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|IterablesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testGetLast_withDefault_singleton
argument_list|()
expr_stmt|;
block|}
DECL|method|testGetOnlyElement_noDefault_empty ()
specifier|public
name|void
name|testGetOnlyElement_noDefault_empty
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|IterablesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|IterablesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testGetOnlyElement_noDefault_empty
argument_list|()
expr_stmt|;
block|}
DECL|method|testGetOnlyElement_noDefault_multiple ()
specifier|public
name|void
name|testGetOnlyElement_noDefault_multiple
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|IterablesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|IterablesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testGetOnlyElement_noDefault_multiple
argument_list|()
expr_stmt|;
block|}
DECL|method|testGetOnlyElement_noDefault_valid ()
specifier|public
name|void
name|testGetOnlyElement_noDefault_valid
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|IterablesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|IterablesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testGetOnlyElement_noDefault_valid
argument_list|()
expr_stmt|;
block|}
DECL|method|testGetOnlyElement_withDefault_empty ()
specifier|public
name|void
name|testGetOnlyElement_withDefault_empty
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|IterablesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|IterablesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testGetOnlyElement_withDefault_empty
argument_list|()
expr_stmt|;
block|}
DECL|method|testGetOnlyElement_withDefault_empty_null ()
specifier|public
name|void
name|testGetOnlyElement_withDefault_empty_null
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|IterablesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|IterablesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testGetOnlyElement_withDefault_empty_null
argument_list|()
expr_stmt|;
block|}
DECL|method|testGetOnlyElement_withDefault_multiple ()
specifier|public
name|void
name|testGetOnlyElement_withDefault_multiple
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|IterablesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|IterablesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testGetOnlyElement_withDefault_multiple
argument_list|()
expr_stmt|;
block|}
DECL|method|testGetOnlyElement_withDefault_singleton ()
specifier|public
name|void
name|testGetOnlyElement_withDefault_singleton
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|IterablesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|IterablesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testGetOnlyElement_withDefault_singleton
argument_list|()
expr_stmt|;
block|}
DECL|method|testGet_emptyIterable ()
specifier|public
name|void
name|testGet_emptyIterable
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|IterablesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|IterablesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testGet_emptyIterable
argument_list|()
expr_stmt|;
block|}
DECL|method|testGet_emptyList ()
specifier|public
name|void
name|testGet_emptyList
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|IterablesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|IterablesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testGet_emptyList
argument_list|()
expr_stmt|;
block|}
DECL|method|testGet_emptySortedSet ()
specifier|public
name|void
name|testGet_emptySortedSet
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|IterablesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|IterablesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testGet_emptySortedSet
argument_list|()
expr_stmt|;
block|}
DECL|method|testGet_iterable ()
specifier|public
name|void
name|testGet_iterable
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|IterablesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|IterablesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testGet_iterable
argument_list|()
expr_stmt|;
block|}
DECL|method|testGet_list ()
specifier|public
name|void
name|testGet_list
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|IterablesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|IterablesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testGet_list
argument_list|()
expr_stmt|;
block|}
DECL|method|testGet_sortedSet ()
specifier|public
name|void
name|testGet_sortedSet
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|IterablesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|IterablesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testGet_sortedSet
argument_list|()
expr_stmt|;
block|}
DECL|method|testGet_withDefault_doesntIterate ()
specifier|public
name|void
name|testGet_withDefault_doesntIterate
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|IterablesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|IterablesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testGet_withDefault_doesntIterate
argument_list|()
expr_stmt|;
block|}
DECL|method|testGet_withDefault_iterable ()
specifier|public
name|void
name|testGet_withDefault_iterable
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|IterablesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|IterablesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testGet_withDefault_iterable
argument_list|()
expr_stmt|;
block|}
DECL|method|testGet_withDefault_last ()
specifier|public
name|void
name|testGet_withDefault_last
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|IterablesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|IterablesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testGet_withDefault_last
argument_list|()
expr_stmt|;
block|}
DECL|method|testGet_withDefault_lastPlusOne ()
specifier|public
name|void
name|testGet_withDefault_lastPlusOne
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|IterablesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|IterablesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testGet_withDefault_lastPlusOne
argument_list|()
expr_stmt|;
block|}
DECL|method|testGet_withDefault_negativePosition ()
specifier|public
name|void
name|testGet_withDefault_negativePosition
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|IterablesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|IterablesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testGet_withDefault_negativePosition
argument_list|()
expr_stmt|;
block|}
DECL|method|testGet_withDefault_simple ()
specifier|public
name|void
name|testGet_withDefault_simple
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|IterablesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|IterablesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testGet_withDefault_simple
argument_list|()
expr_stmt|;
block|}
DECL|method|testIndexOf_empty ()
specifier|public
name|void
name|testIndexOf_empty
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|IterablesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|IterablesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testIndexOf_empty
argument_list|()
expr_stmt|;
block|}
DECL|method|testIndexOf_genericPredicate ()
specifier|public
name|void
name|testIndexOf_genericPredicate
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|IterablesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|IterablesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testIndexOf_genericPredicate
argument_list|()
expr_stmt|;
block|}
DECL|method|testIndexOf_genericPredicate2 ()
specifier|public
name|void
name|testIndexOf_genericPredicate2
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|IterablesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|IterablesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testIndexOf_genericPredicate2
argument_list|()
expr_stmt|;
block|}
DECL|method|testIndexOf_oneElement ()
specifier|public
name|void
name|testIndexOf_oneElement
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|IterablesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|IterablesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testIndexOf_oneElement
argument_list|()
expr_stmt|;
block|}
DECL|method|testIndexOf_twoElements ()
specifier|public
name|void
name|testIndexOf_twoElements
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|IterablesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|IterablesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testIndexOf_twoElements
argument_list|()
expr_stmt|;
block|}
DECL|method|testIndexOf_withDuplicates ()
specifier|public
name|void
name|testIndexOf_withDuplicates
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|IterablesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|IterablesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testIndexOf_withDuplicates
argument_list|()
expr_stmt|;
block|}
DECL|method|testIsEmpty ()
specifier|public
name|void
name|testIsEmpty
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|IterablesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|IterablesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testIsEmpty
argument_list|()
expr_stmt|;
block|}
DECL|method|testIterableWithToString ()
specifier|public
name|void
name|testIterableWithToString
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|IterablesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|IterablesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testIterableWithToString
argument_list|()
expr_stmt|;
block|}
DECL|method|testIterableWithToStringNull ()
specifier|public
name|void
name|testIterableWithToStringNull
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|IterablesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|IterablesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testIterableWithToStringNull
argument_list|()
expr_stmt|;
block|}
DECL|method|testLimit ()
specifier|public
name|void
name|testLimit
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|IterablesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|IterablesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testLimit
argument_list|()
expr_stmt|;
block|}
DECL|method|testLimit_illegalArgument ()
specifier|public
name|void
name|testLimit_illegalArgument
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|IterablesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|IterablesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testLimit_illegalArgument
argument_list|()
expr_stmt|;
block|}
DECL|method|testMergeSorted_empty ()
specifier|public
name|void
name|testMergeSorted_empty
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|IterablesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|IterablesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testMergeSorted_empty
argument_list|()
expr_stmt|;
block|}
DECL|method|testMergeSorted_pyramid ()
specifier|public
name|void
name|testMergeSorted_pyramid
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|IterablesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|IterablesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testMergeSorted_pyramid
argument_list|()
expr_stmt|;
block|}
DECL|method|testMergeSorted_single ()
specifier|public
name|void
name|testMergeSorted_single
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|IterablesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|IterablesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testMergeSorted_single
argument_list|()
expr_stmt|;
block|}
DECL|method|testMergeSorted_single_empty ()
specifier|public
name|void
name|testMergeSorted_single_empty
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|IterablesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|IterablesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testMergeSorted_single_empty
argument_list|()
expr_stmt|;
block|}
DECL|method|testMergeSorted_skipping_pyramid ()
specifier|public
name|void
name|testMergeSorted_skipping_pyramid
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|IterablesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|IterablesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testMergeSorted_skipping_pyramid
argument_list|()
expr_stmt|;
block|}
DECL|method|testNullFriendlyTransform ()
specifier|public
name|void
name|testNullFriendlyTransform
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|IterablesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|IterablesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testNullFriendlyTransform
argument_list|()
expr_stmt|;
block|}
DECL|method|testPaddedPartitionNonRandomAccessInput ()
specifier|public
name|void
name|testPaddedPartitionNonRandomAccessInput
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|IterablesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|IterablesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testPaddedPartitionNonRandomAccessInput
argument_list|()
expr_stmt|;
block|}
DECL|method|testPaddedPartitionRandomAccessInput ()
specifier|public
name|void
name|testPaddedPartitionRandomAccessInput
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|IterablesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|IterablesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testPaddedPartitionRandomAccessInput
argument_list|()
expr_stmt|;
block|}
DECL|method|testPaddedPartition_basic ()
specifier|public
name|void
name|testPaddedPartition_basic
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|IterablesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|IterablesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testPaddedPartition_basic
argument_list|()
expr_stmt|;
block|}
DECL|method|testPartition_badSize ()
specifier|public
name|void
name|testPartition_badSize
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|IterablesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|IterablesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testPartition_badSize
argument_list|()
expr_stmt|;
block|}
DECL|method|testPartition_empty ()
specifier|public
name|void
name|testPartition_empty
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|IterablesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|IterablesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testPartition_empty
argument_list|()
expr_stmt|;
block|}
DECL|method|testPartition_singleton1 ()
specifier|public
name|void
name|testPartition_singleton1
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|IterablesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|IterablesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testPartition_singleton1
argument_list|()
expr_stmt|;
block|}
DECL|method|testPartition_view ()
specifier|public
name|void
name|testPartition_view
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|IterablesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|IterablesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testPartition_view
argument_list|()
expr_stmt|;
block|}
DECL|method|testPoorlyBehavedTransform ()
specifier|public
name|void
name|testPoorlyBehavedTransform
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|IterablesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|IterablesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testPoorlyBehavedTransform
argument_list|()
expr_stmt|;
block|}
DECL|method|testRemoveAll_collection ()
specifier|public
name|void
name|testRemoveAll_collection
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|IterablesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|IterablesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testRemoveAll_collection
argument_list|()
expr_stmt|;
block|}
DECL|method|testRemoveAll_iterable ()
specifier|public
name|void
name|testRemoveAll_iterable
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|IterablesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|IterablesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testRemoveAll_iterable
argument_list|()
expr_stmt|;
block|}
DECL|method|testRemoveIf_iterable ()
specifier|public
name|void
name|testRemoveIf_iterable
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|IterablesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|IterablesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testRemoveIf_iterable
argument_list|()
expr_stmt|;
block|}
DECL|method|testRemoveIf_noRandomAccess ()
specifier|public
name|void
name|testRemoveIf_noRandomAccess
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|IterablesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|IterablesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testRemoveIf_noRandomAccess
argument_list|()
expr_stmt|;
block|}
DECL|method|testRemoveIf_randomAccess ()
specifier|public
name|void
name|testRemoveIf_randomAccess
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|IterablesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|IterablesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testRemoveIf_randomAccess
argument_list|()
expr_stmt|;
block|}
DECL|method|testRemoveIf_randomAccess_notPermittingDuplicates ()
specifier|public
name|void
name|testRemoveIf_randomAccess_notPermittingDuplicates
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|IterablesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|IterablesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testRemoveIf_randomAccess_notPermittingDuplicates
argument_list|()
expr_stmt|;
block|}
DECL|method|testRemoveIf_transformedList ()
specifier|public
name|void
name|testRemoveIf_transformedList
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|IterablesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|IterablesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testRemoveIf_transformedList
argument_list|()
expr_stmt|;
block|}
DECL|method|testRetainAll_collection ()
specifier|public
name|void
name|testRetainAll_collection
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|IterablesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|IterablesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testRetainAll_collection
argument_list|()
expr_stmt|;
block|}
DECL|method|testRetainAll_iterable ()
specifier|public
name|void
name|testRetainAll_iterable
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|IterablesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|IterablesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testRetainAll_iterable
argument_list|()
expr_stmt|;
block|}
DECL|method|testSize0 ()
specifier|public
name|void
name|testSize0
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|IterablesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|IterablesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testSize0
argument_list|()
expr_stmt|;
block|}
DECL|method|testSize1Collection ()
specifier|public
name|void
name|testSize1Collection
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|IterablesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|IterablesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testSize1Collection
argument_list|()
expr_stmt|;
block|}
DECL|method|testSize2NonCollection ()
specifier|public
name|void
name|testSize2NonCollection
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|IterablesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|IterablesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testSize2NonCollection
argument_list|()
expr_stmt|;
block|}
DECL|method|testSize_collection_doesntIterate ()
specifier|public
name|void
name|testSize_collection_doesntIterate
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|IterablesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|IterablesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testSize_collection_doesntIterate
argument_list|()
expr_stmt|;
block|}
DECL|method|testSkip_allOfImmutableList_modifiable ()
specifier|public
name|void
name|testSkip_allOfImmutableList_modifiable
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|IterablesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|IterablesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testSkip_allOfImmutableList_modifiable
argument_list|()
expr_stmt|;
block|}
DECL|method|testSkip_allOfMutableList_modifiable ()
specifier|public
name|void
name|testSkip_allOfMutableList_modifiable
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|IterablesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|IterablesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testSkip_allOfMutableList_modifiable
argument_list|()
expr_stmt|;
block|}
DECL|method|testSkip_illegalArgument ()
specifier|public
name|void
name|testSkip_illegalArgument
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|IterablesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|IterablesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testSkip_illegalArgument
argument_list|()
expr_stmt|;
block|}
DECL|method|testSkip_nonStructurallyModifiedList ()
specifier|public
name|void
name|testSkip_nonStructurallyModifiedList
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|IterablesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|IterablesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testSkip_nonStructurallyModifiedList
argument_list|()
expr_stmt|;
block|}
DECL|method|testSkip_pastEnd ()
specifier|public
name|void
name|testSkip_pastEnd
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|IterablesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|IterablesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testSkip_pastEnd
argument_list|()
expr_stmt|;
block|}
DECL|method|testSkip_pastEndList ()
specifier|public
name|void
name|testSkip_pastEndList
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|IterablesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|IterablesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testSkip_pastEndList
argument_list|()
expr_stmt|;
block|}
DECL|method|testSkip_removal ()
specifier|public
name|void
name|testSkip_removal
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|IterablesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|IterablesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testSkip_removal
argument_list|()
expr_stmt|;
block|}
DECL|method|testSkip_simple ()
specifier|public
name|void
name|testSkip_simple
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|IterablesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|IterablesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testSkip_simple
argument_list|()
expr_stmt|;
block|}
DECL|method|testSkip_simpleList ()
specifier|public
name|void
name|testSkip_simpleList
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|IterablesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|IterablesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testSkip_simpleList
argument_list|()
expr_stmt|;
block|}
DECL|method|testSkip_skipNone ()
specifier|public
name|void
name|testSkip_skipNone
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|IterablesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|IterablesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testSkip_skipNone
argument_list|()
expr_stmt|;
block|}
DECL|method|testSkip_skipNoneList ()
specifier|public
name|void
name|testSkip_skipNoneList
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|IterablesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|IterablesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testSkip_skipNoneList
argument_list|()
expr_stmt|;
block|}
DECL|method|testSkip_structurallyModifiedSkipAll ()
specifier|public
name|void
name|testSkip_structurallyModifiedSkipAll
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|IterablesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|IterablesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testSkip_structurallyModifiedSkipAll
argument_list|()
expr_stmt|;
block|}
DECL|method|testSkip_structurallyModifiedSkipAllList ()
specifier|public
name|void
name|testSkip_structurallyModifiedSkipAllList
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|IterablesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|IterablesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testSkip_structurallyModifiedSkipAllList
argument_list|()
expr_stmt|;
block|}
DECL|method|testSkip_structurallyModifiedSkipSome ()
specifier|public
name|void
name|testSkip_structurallyModifiedSkipSome
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|IterablesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|IterablesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testSkip_structurallyModifiedSkipSome
argument_list|()
expr_stmt|;
block|}
DECL|method|testSkip_structurallyModifiedSkipSomeList ()
specifier|public
name|void
name|testSkip_structurallyModifiedSkipSomeList
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|IterablesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|IterablesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testSkip_structurallyModifiedSkipSomeList
argument_list|()
expr_stmt|;
block|}
DECL|method|testToString ()
specifier|public
name|void
name|testToString
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|IterablesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|IterablesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testToString
argument_list|()
expr_stmt|;
block|}
DECL|method|testTransform ()
specifier|public
name|void
name|testTransform
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|IterablesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|IterablesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testTransform
argument_list|()
expr_stmt|;
block|}
DECL|method|testTryFind ()
specifier|public
name|void
name|testTryFind
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|IterablesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|IterablesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testTryFind
argument_list|()
expr_stmt|;
block|}
DECL|method|testUnmodifiableIterable ()
specifier|public
name|void
name|testUnmodifiableIterable
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|IterablesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|IterablesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testUnmodifiableIterable
argument_list|()
expr_stmt|;
block|}
DECL|method|testUnmodifiableIterableShortCircuit ()
specifier|public
name|void
name|testUnmodifiableIterableShortCircuit
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|IterablesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|IterablesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testUnmodifiableIterableShortCircuit
argument_list|()
expr_stmt|;
block|}
DECL|method|test_contains_nonnull_iterable_no ()
specifier|public
name|void
name|test_contains_nonnull_iterable_no
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|IterablesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|IterablesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|test_contains_nonnull_iterable_no
argument_list|()
expr_stmt|;
block|}
DECL|method|test_contains_nonnull_iterable_yes ()
specifier|public
name|void
name|test_contains_nonnull_iterable_yes
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|IterablesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|IterablesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|test_contains_nonnull_iterable_yes
argument_list|()
expr_stmt|;
block|}
DECL|method|test_contains_nonnull_set_no ()
specifier|public
name|void
name|test_contains_nonnull_set_no
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|IterablesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|IterablesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|test_contains_nonnull_set_no
argument_list|()
expr_stmt|;
block|}
DECL|method|test_contains_nonnull_set_yes ()
specifier|public
name|void
name|test_contains_nonnull_set_yes
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|IterablesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|IterablesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|test_contains_nonnull_set_yes
argument_list|()
expr_stmt|;
block|}
DECL|method|test_contains_null_iterable_no ()
specifier|public
name|void
name|test_contains_null_iterable_no
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|IterablesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|IterablesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|test_contains_null_iterable_no
argument_list|()
expr_stmt|;
block|}
DECL|method|test_contains_null_iterable_yes ()
specifier|public
name|void
name|test_contains_null_iterable_yes
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|IterablesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|IterablesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|test_contains_null_iterable_yes
argument_list|()
expr_stmt|;
block|}
DECL|method|test_contains_null_set_no ()
specifier|public
name|void
name|test_contains_null_set_no
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|IterablesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|IterablesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|test_contains_null_set_no
argument_list|()
expr_stmt|;
block|}
DECL|method|test_contains_null_set_yes ()
specifier|public
name|void
name|test_contains_null_set_yes
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|IterablesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|IterablesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|test_contains_null_set_yes
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

