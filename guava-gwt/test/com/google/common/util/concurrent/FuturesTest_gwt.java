begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2008 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.util.concurrent
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
package|;
end_package

begin_class
DECL|class|FuturesTest_gwt
specifier|public
class|class
name|FuturesTest_gwt
extends|extends
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|junit
operator|.
name|client
operator|.
name|GWTTestCase
block|{
DECL|method|getModuleName ()
annotation|@
name|Override
specifier|public
name|String
name|getModuleName
parameter_list|()
block|{
return|return
literal|"com.google.common.util.concurrent.testModule"
return|;
block|}
DECL|method|testAllAsList ()
specifier|public
name|void
name|testAllAsList
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|Throwable
name|failure
init|=
literal|null
decl_stmt|;
try|try
block|{
name|testCase
operator|.
name|testAllAsList
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
try|try
block|{
name|testCase
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
if|if
condition|(
name|failure
operator|==
literal|null
condition|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Exception
condition|)
block|{
throw|throw
operator|(
name|Exception
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Error
condition|)
block|{
throw|throw
operator|(
name|Error
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|failure
argument_list|)
throw|;
block|}
block|}
DECL|method|testAllAsList_cancelled ()
specifier|public
name|void
name|testAllAsList_cancelled
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|Throwable
name|failure
init|=
literal|null
decl_stmt|;
try|try
block|{
name|testCase
operator|.
name|testAllAsList_cancelled
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
try|try
block|{
name|testCase
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
if|if
condition|(
name|failure
operator|==
literal|null
condition|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Exception
condition|)
block|{
throw|throw
operator|(
name|Exception
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Error
condition|)
block|{
throw|throw
operator|(
name|Error
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|failure
argument_list|)
throw|;
block|}
block|}
DECL|method|testAllAsList_doneFutures ()
specifier|public
name|void
name|testAllAsList_doneFutures
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|Throwable
name|failure
init|=
literal|null
decl_stmt|;
try|try
block|{
name|testCase
operator|.
name|testAllAsList_doneFutures
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
try|try
block|{
name|testCase
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
if|if
condition|(
name|failure
operator|==
literal|null
condition|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Exception
condition|)
block|{
throw|throw
operator|(
name|Exception
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Error
condition|)
block|{
throw|throw
operator|(
name|Error
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|failure
argument_list|)
throw|;
block|}
block|}
DECL|method|testAllAsList_emptyArray ()
specifier|public
name|void
name|testAllAsList_emptyArray
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|Throwable
name|failure
init|=
literal|null
decl_stmt|;
try|try
block|{
name|testCase
operator|.
name|testAllAsList_emptyArray
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
try|try
block|{
name|testCase
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
if|if
condition|(
name|failure
operator|==
literal|null
condition|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Exception
condition|)
block|{
throw|throw
operator|(
name|Exception
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Error
condition|)
block|{
throw|throw
operator|(
name|Error
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|failure
argument_list|)
throw|;
block|}
block|}
DECL|method|testAllAsList_emptyList ()
specifier|public
name|void
name|testAllAsList_emptyList
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|Throwable
name|failure
init|=
literal|null
decl_stmt|;
try|try
block|{
name|testCase
operator|.
name|testAllAsList_emptyList
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
try|try
block|{
name|testCase
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
if|if
condition|(
name|failure
operator|==
literal|null
condition|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Exception
condition|)
block|{
throw|throw
operator|(
name|Exception
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Error
condition|)
block|{
throw|throw
operator|(
name|Error
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|failure
argument_list|)
throw|;
block|}
block|}
DECL|method|testAllAsList_error ()
specifier|public
name|void
name|testAllAsList_error
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|Throwable
name|failure
init|=
literal|null
decl_stmt|;
try|try
block|{
name|testCase
operator|.
name|testAllAsList_error
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
try|try
block|{
name|testCase
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
if|if
condition|(
name|failure
operator|==
literal|null
condition|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Exception
condition|)
block|{
throw|throw
operator|(
name|Exception
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Error
condition|)
block|{
throw|throw
operator|(
name|Error
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|failure
argument_list|)
throw|;
block|}
block|}
DECL|method|testAllAsList_failure ()
specifier|public
name|void
name|testAllAsList_failure
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|Throwable
name|failure
init|=
literal|null
decl_stmt|;
try|try
block|{
name|testCase
operator|.
name|testAllAsList_failure
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
try|try
block|{
name|testCase
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
if|if
condition|(
name|failure
operator|==
literal|null
condition|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Exception
condition|)
block|{
throw|throw
operator|(
name|Exception
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Error
condition|)
block|{
throw|throw
operator|(
name|Error
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|failure
argument_list|)
throw|;
block|}
block|}
DECL|method|testAllAsList_immediateFailure ()
specifier|public
name|void
name|testAllAsList_immediateFailure
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|Throwable
name|failure
init|=
literal|null
decl_stmt|;
try|try
block|{
name|testCase
operator|.
name|testAllAsList_immediateFailure
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
try|try
block|{
name|testCase
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
if|if
condition|(
name|failure
operator|==
literal|null
condition|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Exception
condition|)
block|{
throw|throw
operator|(
name|Exception
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Error
condition|)
block|{
throw|throw
operator|(
name|Error
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|failure
argument_list|)
throw|;
block|}
block|}
DECL|method|testAllAsList_logging_error ()
specifier|public
name|void
name|testAllAsList_logging_error
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|Throwable
name|failure
init|=
literal|null
decl_stmt|;
try|try
block|{
name|testCase
operator|.
name|testAllAsList_logging_error
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
try|try
block|{
name|testCase
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
if|if
condition|(
name|failure
operator|==
literal|null
condition|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Exception
condition|)
block|{
throw|throw
operator|(
name|Exception
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Error
condition|)
block|{
throw|throw
operator|(
name|Error
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|failure
argument_list|)
throw|;
block|}
block|}
DECL|method|testAllAsList_logging_exception ()
specifier|public
name|void
name|testAllAsList_logging_exception
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|Throwable
name|failure
init|=
literal|null
decl_stmt|;
try|try
block|{
name|testCase
operator|.
name|testAllAsList_logging_exception
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
try|try
block|{
name|testCase
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
if|if
condition|(
name|failure
operator|==
literal|null
condition|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Exception
condition|)
block|{
throw|throw
operator|(
name|Exception
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Error
condition|)
block|{
throw|throw
operator|(
name|Error
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|failure
argument_list|)
throw|;
block|}
block|}
DECL|method|testAllAsList_logging_multipleExceptions_alreadyDone ()
specifier|public
name|void
name|testAllAsList_logging_multipleExceptions_alreadyDone
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|Throwable
name|failure
init|=
literal|null
decl_stmt|;
try|try
block|{
name|testCase
operator|.
name|testAllAsList_logging_multipleExceptions_alreadyDone
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
try|try
block|{
name|testCase
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
if|if
condition|(
name|failure
operator|==
literal|null
condition|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Exception
condition|)
block|{
throw|throw
operator|(
name|Exception
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Error
condition|)
block|{
throw|throw
operator|(
name|Error
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|failure
argument_list|)
throw|;
block|}
block|}
DECL|method|testAllAsList_logging_multipleExceptions_doneLater ()
specifier|public
name|void
name|testAllAsList_logging_multipleExceptions_doneLater
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|Throwable
name|failure
init|=
literal|null
decl_stmt|;
try|try
block|{
name|testCase
operator|.
name|testAllAsList_logging_multipleExceptions_doneLater
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
try|try
block|{
name|testCase
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
if|if
condition|(
name|failure
operator|==
literal|null
condition|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Exception
condition|)
block|{
throw|throw
operator|(
name|Exception
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Error
condition|)
block|{
throw|throw
operator|(
name|Error
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|failure
argument_list|)
throw|;
block|}
block|}
DECL|method|testAllAsList_logging_same_cause ()
specifier|public
name|void
name|testAllAsList_logging_same_cause
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|Throwable
name|failure
init|=
literal|null
decl_stmt|;
try|try
block|{
name|testCase
operator|.
name|testAllAsList_logging_same_cause
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
try|try
block|{
name|testCase
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
if|if
condition|(
name|failure
operator|==
literal|null
condition|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Exception
condition|)
block|{
throw|throw
operator|(
name|Exception
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Error
condition|)
block|{
throw|throw
operator|(
name|Error
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|failure
argument_list|)
throw|;
block|}
block|}
DECL|method|testAllAsList_logging_same_exception ()
specifier|public
name|void
name|testAllAsList_logging_same_exception
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|Throwable
name|failure
init|=
literal|null
decl_stmt|;
try|try
block|{
name|testCase
operator|.
name|testAllAsList_logging_same_exception
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
try|try
block|{
name|testCase
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
if|if
condition|(
name|failure
operator|==
literal|null
condition|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Exception
condition|)
block|{
throw|throw
operator|(
name|Exception
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Error
condition|)
block|{
throw|throw
operator|(
name|Error
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|failure
argument_list|)
throw|;
block|}
block|}
DECL|method|testAllAsList_logging_seenExceptionUpdateCancelRace ()
specifier|public
name|void
name|testAllAsList_logging_seenExceptionUpdateCancelRace
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|Throwable
name|failure
init|=
literal|null
decl_stmt|;
try|try
block|{
name|testCase
operator|.
name|testAllAsList_logging_seenExceptionUpdateCancelRace
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
try|try
block|{
name|testCase
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
if|if
condition|(
name|failure
operator|==
literal|null
condition|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Exception
condition|)
block|{
throw|throw
operator|(
name|Exception
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Error
condition|)
block|{
throw|throw
operator|(
name|Error
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|failure
argument_list|)
throw|;
block|}
block|}
DECL|method|testAllAsList_logging_seenExceptionUpdateRace ()
specifier|public
name|void
name|testAllAsList_logging_seenExceptionUpdateRace
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|Throwable
name|failure
init|=
literal|null
decl_stmt|;
try|try
block|{
name|testCase
operator|.
name|testAllAsList_logging_seenExceptionUpdateRace
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
try|try
block|{
name|testCase
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
if|if
condition|(
name|failure
operator|==
literal|null
condition|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Exception
condition|)
block|{
throw|throw
operator|(
name|Exception
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Error
condition|)
block|{
throw|throw
operator|(
name|Error
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|failure
argument_list|)
throw|;
block|}
block|}
DECL|method|testAllAsList_resultCancelled ()
specifier|public
name|void
name|testAllAsList_resultCancelled
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|Throwable
name|failure
init|=
literal|null
decl_stmt|;
try|try
block|{
name|testCase
operator|.
name|testAllAsList_resultCancelled
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
try|try
block|{
name|testCase
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
if|if
condition|(
name|failure
operator|==
literal|null
condition|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Exception
condition|)
block|{
throw|throw
operator|(
name|Exception
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Error
condition|)
block|{
throw|throw
operator|(
name|Error
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|failure
argument_list|)
throw|;
block|}
block|}
DECL|method|testAllAsList_resultCancelledInterrupted_withSecondaryListFuture ()
specifier|public
name|void
name|testAllAsList_resultCancelledInterrupted_withSecondaryListFuture
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|Throwable
name|failure
init|=
literal|null
decl_stmt|;
try|try
block|{
name|testCase
operator|.
name|testAllAsList_resultCancelledInterrupted_withSecondaryListFuture
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
try|try
block|{
name|testCase
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
if|if
condition|(
name|failure
operator|==
literal|null
condition|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Exception
condition|)
block|{
throw|throw
operator|(
name|Exception
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Error
condition|)
block|{
throw|throw
operator|(
name|Error
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|failure
argument_list|)
throw|;
block|}
block|}
DECL|method|testAllAsList_resultCancelled_withSecondaryListFuture ()
specifier|public
name|void
name|testAllAsList_resultCancelled_withSecondaryListFuture
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|Throwable
name|failure
init|=
literal|null
decl_stmt|;
try|try
block|{
name|testCase
operator|.
name|testAllAsList_resultCancelled_withSecondaryListFuture
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
try|try
block|{
name|testCase
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
if|if
condition|(
name|failure
operator|==
literal|null
condition|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Exception
condition|)
block|{
throw|throw
operator|(
name|Exception
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Error
condition|)
block|{
throw|throw
operator|(
name|Error
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|failure
argument_list|)
throw|;
block|}
block|}
DECL|method|testAllAsList_resultInterrupted ()
specifier|public
name|void
name|testAllAsList_resultInterrupted
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|Throwable
name|failure
init|=
literal|null
decl_stmt|;
try|try
block|{
name|testCase
operator|.
name|testAllAsList_resultInterrupted
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
try|try
block|{
name|testCase
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
if|if
condition|(
name|failure
operator|==
literal|null
condition|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Exception
condition|)
block|{
throw|throw
operator|(
name|Exception
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Error
condition|)
block|{
throw|throw
operator|(
name|Error
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|failure
argument_list|)
throw|;
block|}
block|}
DECL|method|testAllAsList_singleFailure ()
specifier|public
name|void
name|testAllAsList_singleFailure
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|Throwable
name|failure
init|=
literal|null
decl_stmt|;
try|try
block|{
name|testCase
operator|.
name|testAllAsList_singleFailure
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
try|try
block|{
name|testCase
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
if|if
condition|(
name|failure
operator|==
literal|null
condition|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Exception
condition|)
block|{
throw|throw
operator|(
name|Exception
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Error
condition|)
block|{
throw|throw
operator|(
name|Error
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|failure
argument_list|)
throw|;
block|}
block|}
DECL|method|testCancellingADelegatePropagates ()
specifier|public
name|void
name|testCancellingADelegatePropagates
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|Throwable
name|failure
init|=
literal|null
decl_stmt|;
try|try
block|{
name|testCase
operator|.
name|testCancellingADelegatePropagates
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
try|try
block|{
name|testCase
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
if|if
condition|(
name|failure
operator|==
literal|null
condition|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Exception
condition|)
block|{
throw|throw
operator|(
name|Exception
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Error
condition|)
block|{
throw|throw
operator|(
name|Error
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|failure
argument_list|)
throw|;
block|}
block|}
DECL|method|testCancellingAllDelegatesIsNotQuadratic ()
specifier|public
name|void
name|testCancellingAllDelegatesIsNotQuadratic
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|Throwable
name|failure
init|=
literal|null
decl_stmt|;
try|try
block|{
name|testCase
operator|.
name|testCancellingAllDelegatesIsNotQuadratic
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
try|try
block|{
name|testCase
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
if|if
condition|(
name|failure
operator|==
literal|null
condition|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Exception
condition|)
block|{
throw|throw
operator|(
name|Exception
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Error
condition|)
block|{
throw|throw
operator|(
name|Error
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|failure
argument_list|)
throw|;
block|}
block|}
DECL|method|testCatchingAsync_ErrorAfterCancellation ()
specifier|public
name|void
name|testCatchingAsync_ErrorAfterCancellation
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|Throwable
name|failure
init|=
literal|null
decl_stmt|;
try|try
block|{
name|testCase
operator|.
name|testCatchingAsync_ErrorAfterCancellation
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
try|try
block|{
name|testCase
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
if|if
condition|(
name|failure
operator|==
literal|null
condition|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Exception
condition|)
block|{
throw|throw
operator|(
name|Exception
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Error
condition|)
block|{
throw|throw
operator|(
name|Error
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|failure
argument_list|)
throw|;
block|}
block|}
DECL|method|testCatchingAsync_ExceptionAfterCancellation ()
specifier|public
name|void
name|testCatchingAsync_ExceptionAfterCancellation
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|Throwable
name|failure
init|=
literal|null
decl_stmt|;
try|try
block|{
name|testCase
operator|.
name|testCatchingAsync_ExceptionAfterCancellation
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
try|try
block|{
name|testCase
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
if|if
condition|(
name|failure
operator|==
literal|null
condition|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Exception
condition|)
block|{
throw|throw
operator|(
name|Exception
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Error
condition|)
block|{
throw|throw
operator|(
name|Error
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|failure
argument_list|)
throw|;
block|}
block|}
DECL|method|testCatchingAsync_Throwable ()
specifier|public
name|void
name|testCatchingAsync_Throwable
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|Throwable
name|failure
init|=
literal|null
decl_stmt|;
try|try
block|{
name|testCase
operator|.
name|testCatchingAsync_Throwable
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
try|try
block|{
name|testCase
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
if|if
condition|(
name|failure
operator|==
literal|null
condition|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Exception
condition|)
block|{
throw|throw
operator|(
name|Exception
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Error
condition|)
block|{
throw|throw
operator|(
name|Error
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|failure
argument_list|)
throw|;
block|}
block|}
DECL|method|testCatchingAsync_fallbackGeneratesCheckedException ()
specifier|public
name|void
name|testCatchingAsync_fallbackGeneratesCheckedException
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|Throwable
name|failure
init|=
literal|null
decl_stmt|;
try|try
block|{
name|testCase
operator|.
name|testCatchingAsync_fallbackGeneratesCheckedException
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
try|try
block|{
name|testCase
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
if|if
condition|(
name|failure
operator|==
literal|null
condition|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Exception
condition|)
block|{
throw|throw
operator|(
name|Exception
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Error
condition|)
block|{
throw|throw
operator|(
name|Error
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|failure
argument_list|)
throw|;
block|}
block|}
DECL|method|testCatchingAsync_fallbackGeneratesError ()
specifier|public
name|void
name|testCatchingAsync_fallbackGeneratesError
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|Throwable
name|failure
init|=
literal|null
decl_stmt|;
try|try
block|{
name|testCase
operator|.
name|testCatchingAsync_fallbackGeneratesError
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
try|try
block|{
name|testCase
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
if|if
condition|(
name|failure
operator|==
literal|null
condition|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Exception
condition|)
block|{
throw|throw
operator|(
name|Exception
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Error
condition|)
block|{
throw|throw
operator|(
name|Error
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|failure
argument_list|)
throw|;
block|}
block|}
DECL|method|testCatchingAsync_fallbackGeneratesRuntimeException ()
specifier|public
name|void
name|testCatchingAsync_fallbackGeneratesRuntimeException
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|Throwable
name|failure
init|=
literal|null
decl_stmt|;
try|try
block|{
name|testCase
operator|.
name|testCatchingAsync_fallbackGeneratesRuntimeException
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
try|try
block|{
name|testCase
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
if|if
condition|(
name|failure
operator|==
literal|null
condition|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Exception
condition|)
block|{
throw|throw
operator|(
name|Exception
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Error
condition|)
block|{
throw|throw
operator|(
name|Error
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|failure
argument_list|)
throw|;
block|}
block|}
DECL|method|testCatchingAsync_fallbackNotReady ()
specifier|public
name|void
name|testCatchingAsync_fallbackNotReady
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|Throwable
name|failure
init|=
literal|null
decl_stmt|;
try|try
block|{
name|testCase
operator|.
name|testCatchingAsync_fallbackNotReady
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
try|try
block|{
name|testCase
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
if|if
condition|(
name|failure
operator|==
literal|null
condition|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Exception
condition|)
block|{
throw|throw
operator|(
name|Exception
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Error
condition|)
block|{
throw|throw
operator|(
name|Error
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|failure
argument_list|)
throw|;
block|}
block|}
DECL|method|testCatchingAsync_fallbackReturnsCheckedException ()
specifier|public
name|void
name|testCatchingAsync_fallbackReturnsCheckedException
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|Throwable
name|failure
init|=
literal|null
decl_stmt|;
try|try
block|{
name|testCase
operator|.
name|testCatchingAsync_fallbackReturnsCheckedException
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
try|try
block|{
name|testCase
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
if|if
condition|(
name|failure
operator|==
literal|null
condition|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Exception
condition|)
block|{
throw|throw
operator|(
name|Exception
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Error
condition|)
block|{
throw|throw
operator|(
name|Error
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|failure
argument_list|)
throw|;
block|}
block|}
DECL|method|testCatchingAsync_fallbackReturnsRuntimeException ()
specifier|public
name|void
name|testCatchingAsync_fallbackReturnsRuntimeException
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|Throwable
name|failure
init|=
literal|null
decl_stmt|;
try|try
block|{
name|testCase
operator|.
name|testCatchingAsync_fallbackReturnsRuntimeException
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
try|try
block|{
name|testCase
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
if|if
condition|(
name|failure
operator|==
literal|null
condition|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Exception
condition|)
block|{
throw|throw
operator|(
name|Exception
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Error
condition|)
block|{
throw|throw
operator|(
name|Error
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|failure
argument_list|)
throw|;
block|}
block|}
DECL|method|testCatchingAsync_futureToString ()
specifier|public
name|void
name|testCatchingAsync_futureToString
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|Throwable
name|failure
init|=
literal|null
decl_stmt|;
try|try
block|{
name|testCase
operator|.
name|testCatchingAsync_futureToString
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
try|try
block|{
name|testCase
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
if|if
condition|(
name|failure
operator|==
literal|null
condition|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Exception
condition|)
block|{
throw|throw
operator|(
name|Exception
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Error
condition|)
block|{
throw|throw
operator|(
name|Error
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|failure
argument_list|)
throw|;
block|}
block|}
DECL|method|testCatchingAsync_getThrowsError ()
specifier|public
name|void
name|testCatchingAsync_getThrowsError
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|Throwable
name|failure
init|=
literal|null
decl_stmt|;
try|try
block|{
name|testCase
operator|.
name|testCatchingAsync_getThrowsError
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
try|try
block|{
name|testCase
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
if|if
condition|(
name|failure
operator|==
literal|null
condition|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Exception
condition|)
block|{
throw|throw
operator|(
name|Exception
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Error
condition|)
block|{
throw|throw
operator|(
name|Error
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|failure
argument_list|)
throw|;
block|}
block|}
DECL|method|testCatchingAsync_getThrowsRuntimeException ()
specifier|public
name|void
name|testCatchingAsync_getThrowsRuntimeException
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|Throwable
name|failure
init|=
literal|null
decl_stmt|;
try|try
block|{
name|testCase
operator|.
name|testCatchingAsync_getThrowsRuntimeException
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
try|try
block|{
name|testCase
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
if|if
condition|(
name|failure
operator|==
literal|null
condition|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Exception
condition|)
block|{
throw|throw
operator|(
name|Exception
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Error
condition|)
block|{
throw|throw
operator|(
name|Error
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|failure
argument_list|)
throw|;
block|}
block|}
DECL|method|testCatchingAsync_inputDoesNotRaiseException ()
specifier|public
name|void
name|testCatchingAsync_inputDoesNotRaiseException
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|Throwable
name|failure
init|=
literal|null
decl_stmt|;
try|try
block|{
name|testCase
operator|.
name|testCatchingAsync_inputDoesNotRaiseException
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
try|try
block|{
name|testCase
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
if|if
condition|(
name|failure
operator|==
literal|null
condition|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Exception
condition|)
block|{
throw|throw
operator|(
name|Exception
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Error
condition|)
block|{
throw|throw
operator|(
name|Error
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|failure
argument_list|)
throw|;
block|}
block|}
DECL|method|testCatchingAsync_inputRaisesException ()
specifier|public
name|void
name|testCatchingAsync_inputRaisesException
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|Throwable
name|failure
init|=
literal|null
decl_stmt|;
try|try
block|{
name|testCase
operator|.
name|testCatchingAsync_inputRaisesException
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
try|try
block|{
name|testCase
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
if|if
condition|(
name|failure
operator|==
literal|null
condition|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Exception
condition|)
block|{
throw|throw
operator|(
name|Exception
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Error
condition|)
block|{
throw|throw
operator|(
name|Error
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|failure
argument_list|)
throw|;
block|}
block|}
DECL|method|testCatchingAsync_listenerThrowsError ()
specifier|public
name|void
name|testCatchingAsync_listenerThrowsError
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|Throwable
name|failure
init|=
literal|null
decl_stmt|;
try|try
block|{
name|testCase
operator|.
name|testCatchingAsync_listenerThrowsError
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
try|try
block|{
name|testCase
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
if|if
condition|(
name|failure
operator|==
literal|null
condition|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Exception
condition|)
block|{
throw|throw
operator|(
name|Exception
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Error
condition|)
block|{
throw|throw
operator|(
name|Error
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|failure
argument_list|)
throw|;
block|}
block|}
DECL|method|testCatchingAsync_nullInsteadOfFuture ()
specifier|public
name|void
name|testCatchingAsync_nullInsteadOfFuture
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|Throwable
name|failure
init|=
literal|null
decl_stmt|;
try|try
block|{
name|testCase
operator|.
name|testCatchingAsync_nullInsteadOfFuture
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
try|try
block|{
name|testCase
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
if|if
condition|(
name|failure
operator|==
literal|null
condition|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Exception
condition|)
block|{
throw|throw
operator|(
name|Exception
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Error
condition|)
block|{
throw|throw
operator|(
name|Error
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|failure
argument_list|)
throw|;
block|}
block|}
DECL|method|testCatchingAsync_rejectionPropagatesToOutput ()
specifier|public
name|void
name|testCatchingAsync_rejectionPropagatesToOutput
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|Throwable
name|failure
init|=
literal|null
decl_stmt|;
try|try
block|{
name|testCase
operator|.
name|testCatchingAsync_rejectionPropagatesToOutput
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
try|try
block|{
name|testCase
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
if|if
condition|(
name|failure
operator|==
literal|null
condition|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Exception
condition|)
block|{
throw|throw
operator|(
name|Exception
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Error
condition|)
block|{
throw|throw
operator|(
name|Error
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|failure
argument_list|)
throw|;
block|}
block|}
DECL|method|testCatchingAsync_resultCancelledBeforeFallback ()
specifier|public
name|void
name|testCatchingAsync_resultCancelledBeforeFallback
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|Throwable
name|failure
init|=
literal|null
decl_stmt|;
try|try
block|{
name|testCase
operator|.
name|testCatchingAsync_resultCancelledBeforeFallback
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
try|try
block|{
name|testCase
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
if|if
condition|(
name|failure
operator|==
literal|null
condition|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Exception
condition|)
block|{
throw|throw
operator|(
name|Exception
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Error
condition|)
block|{
throw|throw
operator|(
name|Error
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|failure
argument_list|)
throw|;
block|}
block|}
DECL|method|testCatchingAsync_resultInterruptedBeforeFallback ()
specifier|public
name|void
name|testCatchingAsync_resultInterruptedBeforeFallback
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|Throwable
name|failure
init|=
literal|null
decl_stmt|;
try|try
block|{
name|testCase
operator|.
name|testCatchingAsync_resultInterruptedBeforeFallback
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
try|try
block|{
name|testCase
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
if|if
condition|(
name|failure
operator|==
literal|null
condition|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Exception
condition|)
block|{
throw|throw
operator|(
name|Exception
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Error
condition|)
block|{
throw|throw
operator|(
name|Error
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|failure
argument_list|)
throw|;
block|}
block|}
DECL|method|testCatching_ErrorAfterCancellation ()
specifier|public
name|void
name|testCatching_ErrorAfterCancellation
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|Throwable
name|failure
init|=
literal|null
decl_stmt|;
try|try
block|{
name|testCase
operator|.
name|testCatching_ErrorAfterCancellation
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
try|try
block|{
name|testCase
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
if|if
condition|(
name|failure
operator|==
literal|null
condition|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Exception
condition|)
block|{
throw|throw
operator|(
name|Exception
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Error
condition|)
block|{
throw|throw
operator|(
name|Error
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|failure
argument_list|)
throw|;
block|}
block|}
DECL|method|testCatching_ExceptionAfterCancellation ()
specifier|public
name|void
name|testCatching_ExceptionAfterCancellation
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|Throwable
name|failure
init|=
literal|null
decl_stmt|;
try|try
block|{
name|testCase
operator|.
name|testCatching_ExceptionAfterCancellation
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
try|try
block|{
name|testCase
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
if|if
condition|(
name|failure
operator|==
literal|null
condition|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Exception
condition|)
block|{
throw|throw
operator|(
name|Exception
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Error
condition|)
block|{
throw|throw
operator|(
name|Error
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|failure
argument_list|)
throw|;
block|}
block|}
DECL|method|testCatching_Throwable ()
specifier|public
name|void
name|testCatching_Throwable
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|Throwable
name|failure
init|=
literal|null
decl_stmt|;
try|try
block|{
name|testCase
operator|.
name|testCatching_Throwable
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
try|try
block|{
name|testCase
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
if|if
condition|(
name|failure
operator|==
literal|null
condition|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Exception
condition|)
block|{
throw|throw
operator|(
name|Exception
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Error
condition|)
block|{
throw|throw
operator|(
name|Error
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|failure
argument_list|)
throw|;
block|}
block|}
DECL|method|testCatching_fallbackGeneratesError ()
specifier|public
name|void
name|testCatching_fallbackGeneratesError
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|Throwable
name|failure
init|=
literal|null
decl_stmt|;
try|try
block|{
name|testCase
operator|.
name|testCatching_fallbackGeneratesError
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
try|try
block|{
name|testCase
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
if|if
condition|(
name|failure
operator|==
literal|null
condition|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Exception
condition|)
block|{
throw|throw
operator|(
name|Exception
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Error
condition|)
block|{
throw|throw
operator|(
name|Error
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|failure
argument_list|)
throw|;
block|}
block|}
DECL|method|testCatching_fallbackGeneratesRuntimeException ()
specifier|public
name|void
name|testCatching_fallbackGeneratesRuntimeException
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|Throwable
name|failure
init|=
literal|null
decl_stmt|;
try|try
block|{
name|testCase
operator|.
name|testCatching_fallbackGeneratesRuntimeException
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
try|try
block|{
name|testCase
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
if|if
condition|(
name|failure
operator|==
literal|null
condition|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Exception
condition|)
block|{
throw|throw
operator|(
name|Exception
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Error
condition|)
block|{
throw|throw
operator|(
name|Error
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|failure
argument_list|)
throw|;
block|}
block|}
DECL|method|testCatching_getThrowsError ()
specifier|public
name|void
name|testCatching_getThrowsError
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|Throwable
name|failure
init|=
literal|null
decl_stmt|;
try|try
block|{
name|testCase
operator|.
name|testCatching_getThrowsError
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
try|try
block|{
name|testCase
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
if|if
condition|(
name|failure
operator|==
literal|null
condition|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Exception
condition|)
block|{
throw|throw
operator|(
name|Exception
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Error
condition|)
block|{
throw|throw
operator|(
name|Error
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|failure
argument_list|)
throw|;
block|}
block|}
DECL|method|testCatching_getThrowsRuntimeException ()
specifier|public
name|void
name|testCatching_getThrowsRuntimeException
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|Throwable
name|failure
init|=
literal|null
decl_stmt|;
try|try
block|{
name|testCase
operator|.
name|testCatching_getThrowsRuntimeException
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
try|try
block|{
name|testCase
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
if|if
condition|(
name|failure
operator|==
literal|null
condition|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Exception
condition|)
block|{
throw|throw
operator|(
name|Exception
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Error
condition|)
block|{
throw|throw
operator|(
name|Error
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|failure
argument_list|)
throw|;
block|}
block|}
DECL|method|testCatching_inputDoesNotRaiseException ()
specifier|public
name|void
name|testCatching_inputDoesNotRaiseException
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|Throwable
name|failure
init|=
literal|null
decl_stmt|;
try|try
block|{
name|testCase
operator|.
name|testCatching_inputDoesNotRaiseException
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
try|try
block|{
name|testCase
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
if|if
condition|(
name|failure
operator|==
literal|null
condition|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Exception
condition|)
block|{
throw|throw
operator|(
name|Exception
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Error
condition|)
block|{
throw|throw
operator|(
name|Error
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|failure
argument_list|)
throw|;
block|}
block|}
DECL|method|testCatching_inputRaisesException ()
specifier|public
name|void
name|testCatching_inputRaisesException
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|Throwable
name|failure
init|=
literal|null
decl_stmt|;
try|try
block|{
name|testCase
operator|.
name|testCatching_inputRaisesException
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
try|try
block|{
name|testCase
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
if|if
condition|(
name|failure
operator|==
literal|null
condition|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Exception
condition|)
block|{
throw|throw
operator|(
name|Exception
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Error
condition|)
block|{
throw|throw
operator|(
name|Error
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|failure
argument_list|)
throw|;
block|}
block|}
DECL|method|testCatching_listenerThrowsError ()
specifier|public
name|void
name|testCatching_listenerThrowsError
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|Throwable
name|failure
init|=
literal|null
decl_stmt|;
try|try
block|{
name|testCase
operator|.
name|testCatching_listenerThrowsError
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
try|try
block|{
name|testCase
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
if|if
condition|(
name|failure
operator|==
literal|null
condition|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Exception
condition|)
block|{
throw|throw
operator|(
name|Exception
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Error
condition|)
block|{
throw|throw
operator|(
name|Error
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|failure
argument_list|)
throw|;
block|}
block|}
DECL|method|testCatching_rejectionPropagatesToOutput ()
specifier|public
name|void
name|testCatching_rejectionPropagatesToOutput
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|Throwable
name|failure
init|=
literal|null
decl_stmt|;
try|try
block|{
name|testCase
operator|.
name|testCatching_rejectionPropagatesToOutput
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
try|try
block|{
name|testCase
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
if|if
condition|(
name|failure
operator|==
literal|null
condition|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Exception
condition|)
block|{
throw|throw
operator|(
name|Exception
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Error
condition|)
block|{
throw|throw
operator|(
name|Error
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|failure
argument_list|)
throw|;
block|}
block|}
DECL|method|testCatching_resultCancelledBeforeFallback ()
specifier|public
name|void
name|testCatching_resultCancelledBeforeFallback
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|Throwable
name|failure
init|=
literal|null
decl_stmt|;
try|try
block|{
name|testCase
operator|.
name|testCatching_resultCancelledBeforeFallback
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
try|try
block|{
name|testCase
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
if|if
condition|(
name|failure
operator|==
literal|null
condition|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Exception
condition|)
block|{
throw|throw
operator|(
name|Exception
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Error
condition|)
block|{
throw|throw
operator|(
name|Error
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|failure
argument_list|)
throw|;
block|}
block|}
DECL|method|testCatching_resultInterruptedBeforeFallback ()
specifier|public
name|void
name|testCatching_resultInterruptedBeforeFallback
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|Throwable
name|failure
init|=
literal|null
decl_stmt|;
try|try
block|{
name|testCase
operator|.
name|testCatching_resultInterruptedBeforeFallback
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
try|try
block|{
name|testCase
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
if|if
condition|(
name|failure
operator|==
literal|null
condition|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Exception
condition|)
block|{
throw|throw
operator|(
name|Exception
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Error
condition|)
block|{
throw|throw
operator|(
name|Error
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|failure
argument_list|)
throw|;
block|}
block|}
DECL|method|testCompletionOrder ()
specifier|public
name|void
name|testCompletionOrder
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|Throwable
name|failure
init|=
literal|null
decl_stmt|;
try|try
block|{
name|testCase
operator|.
name|testCompletionOrder
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
try|try
block|{
name|testCase
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
if|if
condition|(
name|failure
operator|==
literal|null
condition|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Exception
condition|)
block|{
throw|throw
operator|(
name|Exception
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Error
condition|)
block|{
throw|throw
operator|(
name|Error
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|failure
argument_list|)
throw|;
block|}
block|}
DECL|method|testCompletionOrderExceptionThrown ()
specifier|public
name|void
name|testCompletionOrderExceptionThrown
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|Throwable
name|failure
init|=
literal|null
decl_stmt|;
try|try
block|{
name|testCase
operator|.
name|testCompletionOrderExceptionThrown
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
try|try
block|{
name|testCase
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
if|if
condition|(
name|failure
operator|==
literal|null
condition|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Exception
condition|)
block|{
throw|throw
operator|(
name|Exception
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Error
condition|)
block|{
throw|throw
operator|(
name|Error
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|failure
argument_list|)
throw|;
block|}
block|}
DECL|method|testCompletionOrderFutureCancelled ()
specifier|public
name|void
name|testCompletionOrderFutureCancelled
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|Throwable
name|failure
init|=
literal|null
decl_stmt|;
try|try
block|{
name|testCase
operator|.
name|testCompletionOrderFutureCancelled
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
try|try
block|{
name|testCase
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
if|if
condition|(
name|failure
operator|==
literal|null
condition|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Exception
condition|)
block|{
throw|throw
operator|(
name|Exception
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Error
condition|)
block|{
throw|throw
operator|(
name|Error
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|failure
argument_list|)
throw|;
block|}
block|}
DECL|method|testCompletionOrderFutureInterruption ()
specifier|public
name|void
name|testCompletionOrderFutureInterruption
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|Throwable
name|failure
init|=
literal|null
decl_stmt|;
try|try
block|{
name|testCase
operator|.
name|testCompletionOrderFutureInterruption
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
try|try
block|{
name|testCase
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
if|if
condition|(
name|failure
operator|==
literal|null
condition|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Exception
condition|)
block|{
throw|throw
operator|(
name|Exception
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Error
condition|)
block|{
throw|throw
operator|(
name|Error
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|failure
argument_list|)
throw|;
block|}
block|}
DECL|method|testCompletionOrderMixedBagOTypes ()
specifier|public
name|void
name|testCompletionOrderMixedBagOTypes
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|Throwable
name|failure
init|=
literal|null
decl_stmt|;
try|try
block|{
name|testCase
operator|.
name|testCompletionOrderMixedBagOTypes
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
try|try
block|{
name|testCase
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
if|if
condition|(
name|failure
operator|==
literal|null
condition|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Exception
condition|)
block|{
throw|throw
operator|(
name|Exception
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Error
condition|)
block|{
throw|throw
operator|(
name|Error
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|failure
argument_list|)
throw|;
block|}
block|}
DECL|method|testImmediateCancelledFutureBasic ()
specifier|public
name|void
name|testImmediateCancelledFutureBasic
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|Throwable
name|failure
init|=
literal|null
decl_stmt|;
try|try
block|{
name|testCase
operator|.
name|testImmediateCancelledFutureBasic
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
try|try
block|{
name|testCase
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
if|if
condition|(
name|failure
operator|==
literal|null
condition|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Exception
condition|)
block|{
throw|throw
operator|(
name|Exception
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Error
condition|)
block|{
throw|throw
operator|(
name|Error
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|failure
argument_list|)
throw|;
block|}
block|}
DECL|method|testImmediateFailedFuture ()
specifier|public
name|void
name|testImmediateFailedFuture
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|Throwable
name|failure
init|=
literal|null
decl_stmt|;
try|try
block|{
name|testCase
operator|.
name|testImmediateFailedFuture
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
try|try
block|{
name|testCase
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
if|if
condition|(
name|failure
operator|==
literal|null
condition|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Exception
condition|)
block|{
throw|throw
operator|(
name|Exception
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Error
condition|)
block|{
throw|throw
operator|(
name|Error
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|failure
argument_list|)
throw|;
block|}
block|}
DECL|method|testImmediateFailedFuture_cancellationException ()
specifier|public
name|void
name|testImmediateFailedFuture_cancellationException
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|Throwable
name|failure
init|=
literal|null
decl_stmt|;
try|try
block|{
name|testCase
operator|.
name|testImmediateFailedFuture_cancellationException
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
try|try
block|{
name|testCase
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
if|if
condition|(
name|failure
operator|==
literal|null
condition|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Exception
condition|)
block|{
throw|throw
operator|(
name|Exception
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Error
condition|)
block|{
throw|throw
operator|(
name|Error
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|failure
argument_list|)
throw|;
block|}
block|}
DECL|method|testImmediateFuture ()
specifier|public
name|void
name|testImmediateFuture
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|Throwable
name|failure
init|=
literal|null
decl_stmt|;
try|try
block|{
name|testCase
operator|.
name|testImmediateFuture
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
try|try
block|{
name|testCase
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
if|if
condition|(
name|failure
operator|==
literal|null
condition|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Exception
condition|)
block|{
throw|throw
operator|(
name|Exception
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Error
condition|)
block|{
throw|throw
operator|(
name|Error
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|failure
argument_list|)
throw|;
block|}
block|}
DECL|method|testNonCancellationPropagating_delegateCancelled ()
specifier|public
name|void
name|testNonCancellationPropagating_delegateCancelled
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|Throwable
name|failure
init|=
literal|null
decl_stmt|;
try|try
block|{
name|testCase
operator|.
name|testNonCancellationPropagating_delegateCancelled
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
try|try
block|{
name|testCase
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
if|if
condition|(
name|failure
operator|==
literal|null
condition|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Exception
condition|)
block|{
throw|throw
operator|(
name|Exception
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Error
condition|)
block|{
throw|throw
operator|(
name|Error
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|failure
argument_list|)
throw|;
block|}
block|}
DECL|method|testNonCancellationPropagating_doesNotPropagate ()
specifier|public
name|void
name|testNonCancellationPropagating_doesNotPropagate
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|Throwable
name|failure
init|=
literal|null
decl_stmt|;
try|try
block|{
name|testCase
operator|.
name|testNonCancellationPropagating_doesNotPropagate
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
try|try
block|{
name|testCase
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
if|if
condition|(
name|failure
operator|==
literal|null
condition|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Exception
condition|)
block|{
throw|throw
operator|(
name|Exception
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Error
condition|)
block|{
throw|throw
operator|(
name|Error
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|failure
argument_list|)
throw|;
block|}
block|}
DECL|method|testNonCancellationPropagating_failure ()
specifier|public
name|void
name|testNonCancellationPropagating_failure
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|Throwable
name|failure
init|=
literal|null
decl_stmt|;
try|try
block|{
name|testCase
operator|.
name|testNonCancellationPropagating_failure
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
try|try
block|{
name|testCase
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
if|if
condition|(
name|failure
operator|==
literal|null
condition|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Exception
condition|)
block|{
throw|throw
operator|(
name|Exception
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Error
condition|)
block|{
throw|throw
operator|(
name|Error
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|failure
argument_list|)
throw|;
block|}
block|}
DECL|method|testNonCancellationPropagating_successful ()
specifier|public
name|void
name|testNonCancellationPropagating_successful
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|Throwable
name|failure
init|=
literal|null
decl_stmt|;
try|try
block|{
name|testCase
operator|.
name|testNonCancellationPropagating_successful
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
try|try
block|{
name|testCase
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
if|if
condition|(
name|failure
operator|==
literal|null
condition|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Exception
condition|)
block|{
throw|throw
operator|(
name|Exception
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Error
condition|)
block|{
throw|throw
operator|(
name|Error
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|failure
argument_list|)
throw|;
block|}
block|}
DECL|method|testSubmitAsync_asyncCallable_error ()
specifier|public
name|void
name|testSubmitAsync_asyncCallable_error
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|Throwable
name|failure
init|=
literal|null
decl_stmt|;
try|try
block|{
name|testCase
operator|.
name|testSubmitAsync_asyncCallable_error
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
try|try
block|{
name|testCase
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
if|if
condition|(
name|failure
operator|==
literal|null
condition|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Exception
condition|)
block|{
throw|throw
operator|(
name|Exception
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Error
condition|)
block|{
throw|throw
operator|(
name|Error
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|failure
argument_list|)
throw|;
block|}
block|}
DECL|method|testSubmitAsync_asyncCallable_nullInsteadOfFuture ()
specifier|public
name|void
name|testSubmitAsync_asyncCallable_nullInsteadOfFuture
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|Throwable
name|failure
init|=
literal|null
decl_stmt|;
try|try
block|{
name|testCase
operator|.
name|testSubmitAsync_asyncCallable_nullInsteadOfFuture
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
try|try
block|{
name|testCase
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
if|if
condition|(
name|failure
operator|==
literal|null
condition|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Exception
condition|)
block|{
throw|throw
operator|(
name|Exception
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Error
condition|)
block|{
throw|throw
operator|(
name|Error
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|failure
argument_list|)
throw|;
block|}
block|}
DECL|method|testSuccessfulAsList ()
specifier|public
name|void
name|testSuccessfulAsList
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|Throwable
name|failure
init|=
literal|null
decl_stmt|;
try|try
block|{
name|testCase
operator|.
name|testSuccessfulAsList
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
try|try
block|{
name|testCase
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
if|if
condition|(
name|failure
operator|==
literal|null
condition|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Exception
condition|)
block|{
throw|throw
operator|(
name|Exception
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Error
condition|)
block|{
throw|throw
operator|(
name|Error
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|failure
argument_list|)
throw|;
block|}
block|}
DECL|method|testSuccessfulAsList_cancelled ()
specifier|public
name|void
name|testSuccessfulAsList_cancelled
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|Throwable
name|failure
init|=
literal|null
decl_stmt|;
try|try
block|{
name|testCase
operator|.
name|testSuccessfulAsList_cancelled
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
try|try
block|{
name|testCase
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
if|if
condition|(
name|failure
operator|==
literal|null
condition|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Exception
condition|)
block|{
throw|throw
operator|(
name|Exception
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Error
condition|)
block|{
throw|throw
operator|(
name|Error
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|failure
argument_list|)
throw|;
block|}
block|}
DECL|method|testSuccessfulAsList_emptyArray ()
specifier|public
name|void
name|testSuccessfulAsList_emptyArray
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|Throwable
name|failure
init|=
literal|null
decl_stmt|;
try|try
block|{
name|testCase
operator|.
name|testSuccessfulAsList_emptyArray
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
try|try
block|{
name|testCase
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
if|if
condition|(
name|failure
operator|==
literal|null
condition|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Exception
condition|)
block|{
throw|throw
operator|(
name|Exception
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Error
condition|)
block|{
throw|throw
operator|(
name|Error
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|failure
argument_list|)
throw|;
block|}
block|}
DECL|method|testSuccessfulAsList_emptyList ()
specifier|public
name|void
name|testSuccessfulAsList_emptyList
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|Throwable
name|failure
init|=
literal|null
decl_stmt|;
try|try
block|{
name|testCase
operator|.
name|testSuccessfulAsList_emptyList
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
try|try
block|{
name|testCase
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
if|if
condition|(
name|failure
operator|==
literal|null
condition|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Exception
condition|)
block|{
throw|throw
operator|(
name|Exception
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Error
condition|)
block|{
throw|throw
operator|(
name|Error
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|failure
argument_list|)
throw|;
block|}
block|}
DECL|method|testSuccessfulAsList_failureLoggedEvenAfterOutputCancelled ()
specifier|public
name|void
name|testSuccessfulAsList_failureLoggedEvenAfterOutputCancelled
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|Throwable
name|failure
init|=
literal|null
decl_stmt|;
try|try
block|{
name|testCase
operator|.
name|testSuccessfulAsList_failureLoggedEvenAfterOutputCancelled
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
try|try
block|{
name|testCase
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
if|if
condition|(
name|failure
operator|==
literal|null
condition|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Exception
condition|)
block|{
throw|throw
operator|(
name|Exception
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Error
condition|)
block|{
throw|throw
operator|(
name|Error
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|failure
argument_list|)
throw|;
block|}
block|}
DECL|method|testSuccessfulAsList_logging_error ()
specifier|public
name|void
name|testSuccessfulAsList_logging_error
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|Throwable
name|failure
init|=
literal|null
decl_stmt|;
try|try
block|{
name|testCase
operator|.
name|testSuccessfulAsList_logging_error
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
try|try
block|{
name|testCase
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
if|if
condition|(
name|failure
operator|==
literal|null
condition|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Exception
condition|)
block|{
throw|throw
operator|(
name|Exception
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Error
condition|)
block|{
throw|throw
operator|(
name|Error
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|failure
argument_list|)
throw|;
block|}
block|}
DECL|method|testSuccessfulAsList_logging_exception ()
specifier|public
name|void
name|testSuccessfulAsList_logging_exception
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|Throwable
name|failure
init|=
literal|null
decl_stmt|;
try|try
block|{
name|testCase
operator|.
name|testSuccessfulAsList_logging_exception
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
try|try
block|{
name|testCase
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
if|if
condition|(
name|failure
operator|==
literal|null
condition|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Exception
condition|)
block|{
throw|throw
operator|(
name|Exception
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Error
condition|)
block|{
throw|throw
operator|(
name|Error
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|failure
argument_list|)
throw|;
block|}
block|}
DECL|method|testSuccessfulAsList_mixed ()
specifier|public
name|void
name|testSuccessfulAsList_mixed
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|Throwable
name|failure
init|=
literal|null
decl_stmt|;
try|try
block|{
name|testCase
operator|.
name|testSuccessfulAsList_mixed
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
try|try
block|{
name|testCase
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
if|if
condition|(
name|failure
operator|==
literal|null
condition|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Exception
condition|)
block|{
throw|throw
operator|(
name|Exception
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Error
condition|)
block|{
throw|throw
operator|(
name|Error
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|failure
argument_list|)
throw|;
block|}
block|}
DECL|method|testSuccessfulAsList_partialFailure ()
specifier|public
name|void
name|testSuccessfulAsList_partialFailure
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|Throwable
name|failure
init|=
literal|null
decl_stmt|;
try|try
block|{
name|testCase
operator|.
name|testSuccessfulAsList_partialFailure
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
try|try
block|{
name|testCase
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
if|if
condition|(
name|failure
operator|==
literal|null
condition|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Exception
condition|)
block|{
throw|throw
operator|(
name|Exception
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Error
condition|)
block|{
throw|throw
operator|(
name|Error
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|failure
argument_list|)
throw|;
block|}
block|}
DECL|method|testSuccessfulAsList_resultCancelled ()
specifier|public
name|void
name|testSuccessfulAsList_resultCancelled
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|Throwable
name|failure
init|=
literal|null
decl_stmt|;
try|try
block|{
name|testCase
operator|.
name|testSuccessfulAsList_resultCancelled
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
try|try
block|{
name|testCase
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
if|if
condition|(
name|failure
operator|==
literal|null
condition|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Exception
condition|)
block|{
throw|throw
operator|(
name|Exception
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Error
condition|)
block|{
throw|throw
operator|(
name|Error
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|failure
argument_list|)
throw|;
block|}
block|}
DECL|method|testSuccessfulAsList_resultCancelledRacingInputDone ()
specifier|public
name|void
name|testSuccessfulAsList_resultCancelledRacingInputDone
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|Throwable
name|failure
init|=
literal|null
decl_stmt|;
try|try
block|{
name|testCase
operator|.
name|testSuccessfulAsList_resultCancelledRacingInputDone
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
try|try
block|{
name|testCase
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
if|if
condition|(
name|failure
operator|==
literal|null
condition|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Exception
condition|)
block|{
throw|throw
operator|(
name|Exception
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Error
condition|)
block|{
throw|throw
operator|(
name|Error
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|failure
argument_list|)
throw|;
block|}
block|}
DECL|method|testSuccessfulAsList_resultInterrupted ()
specifier|public
name|void
name|testSuccessfulAsList_resultInterrupted
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|Throwable
name|failure
init|=
literal|null
decl_stmt|;
try|try
block|{
name|testCase
operator|.
name|testSuccessfulAsList_resultInterrupted
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
try|try
block|{
name|testCase
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
if|if
condition|(
name|failure
operator|==
literal|null
condition|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Exception
condition|)
block|{
throw|throw
operator|(
name|Exception
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Error
condition|)
block|{
throw|throw
operator|(
name|Error
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|failure
argument_list|)
throw|;
block|}
block|}
DECL|method|testSuccessfulAsList_totalFailure ()
specifier|public
name|void
name|testSuccessfulAsList_totalFailure
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|Throwable
name|failure
init|=
literal|null
decl_stmt|;
try|try
block|{
name|testCase
operator|.
name|testSuccessfulAsList_totalFailure
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
try|try
block|{
name|testCase
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
if|if
condition|(
name|failure
operator|==
literal|null
condition|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Exception
condition|)
block|{
throw|throw
operator|(
name|Exception
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Error
condition|)
block|{
throw|throw
operator|(
name|Error
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|failure
argument_list|)
throw|;
block|}
block|}
DECL|method|testTransformAsync_ErrorAfterCancellation ()
specifier|public
name|void
name|testTransformAsync_ErrorAfterCancellation
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|Throwable
name|failure
init|=
literal|null
decl_stmt|;
try|try
block|{
name|testCase
operator|.
name|testTransformAsync_ErrorAfterCancellation
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
try|try
block|{
name|testCase
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
if|if
condition|(
name|failure
operator|==
literal|null
condition|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Exception
condition|)
block|{
throw|throw
operator|(
name|Exception
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Error
condition|)
block|{
throw|throw
operator|(
name|Error
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|failure
argument_list|)
throw|;
block|}
block|}
DECL|method|testTransformAsync_ExceptionAfterCancellation ()
specifier|public
name|void
name|testTransformAsync_ExceptionAfterCancellation
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|Throwable
name|failure
init|=
literal|null
decl_stmt|;
try|try
block|{
name|testCase
operator|.
name|testTransformAsync_ExceptionAfterCancellation
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
try|try
block|{
name|testCase
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
if|if
condition|(
name|failure
operator|==
literal|null
condition|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Exception
condition|)
block|{
throw|throw
operator|(
name|Exception
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Error
condition|)
block|{
throw|throw
operator|(
name|Error
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|failure
argument_list|)
throw|;
block|}
block|}
DECL|method|testTransformAsync_asyncFunction_error ()
specifier|public
name|void
name|testTransformAsync_asyncFunction_error
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|Throwable
name|failure
init|=
literal|null
decl_stmt|;
try|try
block|{
name|testCase
operator|.
name|testTransformAsync_asyncFunction_error
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
try|try
block|{
name|testCase
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
if|if
condition|(
name|failure
operator|==
literal|null
condition|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Exception
condition|)
block|{
throw|throw
operator|(
name|Exception
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Error
condition|)
block|{
throw|throw
operator|(
name|Error
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|failure
argument_list|)
throw|;
block|}
block|}
DECL|method|testTransformAsync_asyncFunction_nullInsteadOfFuture ()
specifier|public
name|void
name|testTransformAsync_asyncFunction_nullInsteadOfFuture
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|Throwable
name|failure
init|=
literal|null
decl_stmt|;
try|try
block|{
name|testCase
operator|.
name|testTransformAsync_asyncFunction_nullInsteadOfFuture
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
try|try
block|{
name|testCase
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
if|if
condition|(
name|failure
operator|==
literal|null
condition|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Exception
condition|)
block|{
throw|throw
operator|(
name|Exception
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Error
condition|)
block|{
throw|throw
operator|(
name|Error
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|failure
argument_list|)
throw|;
block|}
block|}
DECL|method|testTransformAsync_cancelPropagatesToAsyncOutput ()
specifier|public
name|void
name|testTransformAsync_cancelPropagatesToAsyncOutput
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|Throwable
name|failure
init|=
literal|null
decl_stmt|;
try|try
block|{
name|testCase
operator|.
name|testTransformAsync_cancelPropagatesToAsyncOutput
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
try|try
block|{
name|testCase
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
if|if
condition|(
name|failure
operator|==
literal|null
condition|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Exception
condition|)
block|{
throw|throw
operator|(
name|Exception
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Error
condition|)
block|{
throw|throw
operator|(
name|Error
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|failure
argument_list|)
throw|;
block|}
block|}
DECL|method|testTransformAsync_cancelPropagatesToInput ()
specifier|public
name|void
name|testTransformAsync_cancelPropagatesToInput
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|Throwable
name|failure
init|=
literal|null
decl_stmt|;
try|try
block|{
name|testCase
operator|.
name|testTransformAsync_cancelPropagatesToInput
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
try|try
block|{
name|testCase
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
if|if
condition|(
name|failure
operator|==
literal|null
condition|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Exception
condition|)
block|{
throw|throw
operator|(
name|Exception
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Error
condition|)
block|{
throw|throw
operator|(
name|Error
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|failure
argument_list|)
throw|;
block|}
block|}
DECL|method|testTransformAsync_genericsHierarchy_AsyncFunction ()
specifier|public
name|void
name|testTransformAsync_genericsHierarchy_AsyncFunction
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|Throwable
name|failure
init|=
literal|null
decl_stmt|;
try|try
block|{
name|testCase
operator|.
name|testTransformAsync_genericsHierarchy_AsyncFunction
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
try|try
block|{
name|testCase
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
if|if
condition|(
name|failure
operator|==
literal|null
condition|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Exception
condition|)
block|{
throw|throw
operator|(
name|Exception
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Error
condition|)
block|{
throw|throw
operator|(
name|Error
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|failure
argument_list|)
throw|;
block|}
block|}
DECL|method|testTransformAsync_genericsWildcard_AsyncFunction ()
specifier|public
name|void
name|testTransformAsync_genericsWildcard_AsyncFunction
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|Throwable
name|failure
init|=
literal|null
decl_stmt|;
try|try
block|{
name|testCase
operator|.
name|testTransformAsync_genericsWildcard_AsyncFunction
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
try|try
block|{
name|testCase
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
if|if
condition|(
name|failure
operator|==
literal|null
condition|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Exception
condition|)
block|{
throw|throw
operator|(
name|Exception
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Error
condition|)
block|{
throw|throw
operator|(
name|Error
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|failure
argument_list|)
throw|;
block|}
block|}
DECL|method|testTransformAsync_getThrowsError ()
specifier|public
name|void
name|testTransformAsync_getThrowsError
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|Throwable
name|failure
init|=
literal|null
decl_stmt|;
try|try
block|{
name|testCase
operator|.
name|testTransformAsync_getThrowsError
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
try|try
block|{
name|testCase
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
if|if
condition|(
name|failure
operator|==
literal|null
condition|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Exception
condition|)
block|{
throw|throw
operator|(
name|Exception
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Error
condition|)
block|{
throw|throw
operator|(
name|Error
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|failure
argument_list|)
throw|;
block|}
block|}
DECL|method|testTransformAsync_getThrowsRuntimeException ()
specifier|public
name|void
name|testTransformAsync_getThrowsRuntimeException
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|Throwable
name|failure
init|=
literal|null
decl_stmt|;
try|try
block|{
name|testCase
operator|.
name|testTransformAsync_getThrowsRuntimeException
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
try|try
block|{
name|testCase
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
if|if
condition|(
name|failure
operator|==
literal|null
condition|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Exception
condition|)
block|{
throw|throw
operator|(
name|Exception
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Error
condition|)
block|{
throw|throw
operator|(
name|Error
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|failure
argument_list|)
throw|;
block|}
block|}
DECL|method|testTransformAsync_inputCancelButNotInterruptPropagatesToOutput ()
specifier|public
name|void
name|testTransformAsync_inputCancelButNotInterruptPropagatesToOutput
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|Throwable
name|failure
init|=
literal|null
decl_stmt|;
try|try
block|{
name|testCase
operator|.
name|testTransformAsync_inputCancelButNotInterruptPropagatesToOutput
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
try|try
block|{
name|testCase
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
if|if
condition|(
name|failure
operator|==
literal|null
condition|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Exception
condition|)
block|{
throw|throw
operator|(
name|Exception
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Error
condition|)
block|{
throw|throw
operator|(
name|Error
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|failure
argument_list|)
throw|;
block|}
block|}
DECL|method|testTransformAsync_interruptPropagatesToAsyncOutput ()
specifier|public
name|void
name|testTransformAsync_interruptPropagatesToAsyncOutput
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|Throwable
name|failure
init|=
literal|null
decl_stmt|;
try|try
block|{
name|testCase
operator|.
name|testTransformAsync_interruptPropagatesToAsyncOutput
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
try|try
block|{
name|testCase
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
if|if
condition|(
name|failure
operator|==
literal|null
condition|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Exception
condition|)
block|{
throw|throw
operator|(
name|Exception
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Error
condition|)
block|{
throw|throw
operator|(
name|Error
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|failure
argument_list|)
throw|;
block|}
block|}
DECL|method|testTransformAsync_interruptPropagatesToInput ()
specifier|public
name|void
name|testTransformAsync_interruptPropagatesToInput
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|Throwable
name|failure
init|=
literal|null
decl_stmt|;
try|try
block|{
name|testCase
operator|.
name|testTransformAsync_interruptPropagatesToInput
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
try|try
block|{
name|testCase
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
if|if
condition|(
name|failure
operator|==
literal|null
condition|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Exception
condition|)
block|{
throw|throw
operator|(
name|Exception
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Error
condition|)
block|{
throw|throw
operator|(
name|Error
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|failure
argument_list|)
throw|;
block|}
block|}
DECL|method|testTransformAsync_listenerThrowsError ()
specifier|public
name|void
name|testTransformAsync_listenerThrowsError
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|Throwable
name|failure
init|=
literal|null
decl_stmt|;
try|try
block|{
name|testCase
operator|.
name|testTransformAsync_listenerThrowsError
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
try|try
block|{
name|testCase
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
if|if
condition|(
name|failure
operator|==
literal|null
condition|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Exception
condition|)
block|{
throw|throw
operator|(
name|Exception
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Error
condition|)
block|{
throw|throw
operator|(
name|Error
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|failure
argument_list|)
throw|;
block|}
block|}
DECL|method|testTransformAsync_rejectionPropagatesToOutput ()
specifier|public
name|void
name|testTransformAsync_rejectionPropagatesToOutput
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|Throwable
name|failure
init|=
literal|null
decl_stmt|;
try|try
block|{
name|testCase
operator|.
name|testTransformAsync_rejectionPropagatesToOutput
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
try|try
block|{
name|testCase
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
if|if
condition|(
name|failure
operator|==
literal|null
condition|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Exception
condition|)
block|{
throw|throw
operator|(
name|Exception
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Error
condition|)
block|{
throw|throw
operator|(
name|Error
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|failure
argument_list|)
throw|;
block|}
block|}
DECL|method|testTransformValueRemainsMemoized ()
specifier|public
name|void
name|testTransformValueRemainsMemoized
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|Throwable
name|failure
init|=
literal|null
decl_stmt|;
try|try
block|{
name|testCase
operator|.
name|testTransformValueRemainsMemoized
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
try|try
block|{
name|testCase
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
if|if
condition|(
name|failure
operator|==
literal|null
condition|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Exception
condition|)
block|{
throw|throw
operator|(
name|Exception
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Error
condition|)
block|{
throw|throw
operator|(
name|Error
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|failure
argument_list|)
throw|;
block|}
block|}
DECL|method|testTransform_ErrorAfterCancellation ()
specifier|public
name|void
name|testTransform_ErrorAfterCancellation
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|Throwable
name|failure
init|=
literal|null
decl_stmt|;
try|try
block|{
name|testCase
operator|.
name|testTransform_ErrorAfterCancellation
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
try|try
block|{
name|testCase
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
if|if
condition|(
name|failure
operator|==
literal|null
condition|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Exception
condition|)
block|{
throw|throw
operator|(
name|Exception
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Error
condition|)
block|{
throw|throw
operator|(
name|Error
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|failure
argument_list|)
throw|;
block|}
block|}
DECL|method|testTransform_ExceptionAfterCancellation ()
specifier|public
name|void
name|testTransform_ExceptionAfterCancellation
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|Throwable
name|failure
init|=
literal|null
decl_stmt|;
try|try
block|{
name|testCase
operator|.
name|testTransform_ExceptionAfterCancellation
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
try|try
block|{
name|testCase
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
if|if
condition|(
name|failure
operator|==
literal|null
condition|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Exception
condition|)
block|{
throw|throw
operator|(
name|Exception
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Error
condition|)
block|{
throw|throw
operator|(
name|Error
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|failure
argument_list|)
throw|;
block|}
block|}
DECL|method|testTransform_Executor ()
specifier|public
name|void
name|testTransform_Executor
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|Throwable
name|failure
init|=
literal|null
decl_stmt|;
try|try
block|{
name|testCase
operator|.
name|testTransform_Executor
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
try|try
block|{
name|testCase
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
if|if
condition|(
name|failure
operator|==
literal|null
condition|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Exception
condition|)
block|{
throw|throw
operator|(
name|Exception
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Error
condition|)
block|{
throw|throw
operator|(
name|Error
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|failure
argument_list|)
throw|;
block|}
block|}
DECL|method|testTransform_genericsHierarchy ()
specifier|public
name|void
name|testTransform_genericsHierarchy
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|Throwable
name|failure
init|=
literal|null
decl_stmt|;
try|try
block|{
name|testCase
operator|.
name|testTransform_genericsHierarchy
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
try|try
block|{
name|testCase
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
if|if
condition|(
name|failure
operator|==
literal|null
condition|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Exception
condition|)
block|{
throw|throw
operator|(
name|Exception
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Error
condition|)
block|{
throw|throw
operator|(
name|Error
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|failure
argument_list|)
throw|;
block|}
block|}
DECL|method|testTransform_genericsNull ()
specifier|public
name|void
name|testTransform_genericsNull
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|Throwable
name|failure
init|=
literal|null
decl_stmt|;
try|try
block|{
name|testCase
operator|.
name|testTransform_genericsNull
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
try|try
block|{
name|testCase
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
if|if
condition|(
name|failure
operator|==
literal|null
condition|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Exception
condition|)
block|{
throw|throw
operator|(
name|Exception
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Error
condition|)
block|{
throw|throw
operator|(
name|Error
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|failure
argument_list|)
throw|;
block|}
block|}
DECL|method|testTransform_getThrowsError ()
specifier|public
name|void
name|testTransform_getThrowsError
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|Throwable
name|failure
init|=
literal|null
decl_stmt|;
try|try
block|{
name|testCase
operator|.
name|testTransform_getThrowsError
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
try|try
block|{
name|testCase
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
if|if
condition|(
name|failure
operator|==
literal|null
condition|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Exception
condition|)
block|{
throw|throw
operator|(
name|Exception
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Error
condition|)
block|{
throw|throw
operator|(
name|Error
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|failure
argument_list|)
throw|;
block|}
block|}
DECL|method|testTransform_getThrowsRuntimeException ()
specifier|public
name|void
name|testTransform_getThrowsRuntimeException
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|Throwable
name|failure
init|=
literal|null
decl_stmt|;
try|try
block|{
name|testCase
operator|.
name|testTransform_getThrowsRuntimeException
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
try|try
block|{
name|testCase
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
if|if
condition|(
name|failure
operator|==
literal|null
condition|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Exception
condition|)
block|{
throw|throw
operator|(
name|Exception
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Error
condition|)
block|{
throw|throw
operator|(
name|Error
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|failure
argument_list|)
throw|;
block|}
block|}
DECL|method|testTransform_listenerThrowsError ()
specifier|public
name|void
name|testTransform_listenerThrowsError
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|Throwable
name|failure
init|=
literal|null
decl_stmt|;
try|try
block|{
name|testCase
operator|.
name|testTransform_listenerThrowsError
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
try|try
block|{
name|testCase
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
if|if
condition|(
name|failure
operator|==
literal|null
condition|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Exception
condition|)
block|{
throw|throw
operator|(
name|Exception
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Error
condition|)
block|{
throw|throw
operator|(
name|Error
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|failure
argument_list|)
throw|;
block|}
block|}
DECL|method|testTransform_rejectionPropagatesToOutput ()
specifier|public
name|void
name|testTransform_rejectionPropagatesToOutput
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|Throwable
name|failure
init|=
literal|null
decl_stmt|;
try|try
block|{
name|testCase
operator|.
name|testTransform_rejectionPropagatesToOutput
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
try|try
block|{
name|testCase
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
if|if
condition|(
name|failure
operator|==
literal|null
condition|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Exception
condition|)
block|{
throw|throw
operator|(
name|Exception
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Error
condition|)
block|{
throw|throw
operator|(
name|Error
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|failure
argument_list|)
throw|;
block|}
block|}
DECL|method|testWhenAllComplete_asyncError ()
specifier|public
name|void
name|testWhenAllComplete_asyncError
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|Throwable
name|failure
init|=
literal|null
decl_stmt|;
try|try
block|{
name|testCase
operator|.
name|testWhenAllComplete_asyncError
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
try|try
block|{
name|testCase
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
if|if
condition|(
name|failure
operator|==
literal|null
condition|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Exception
condition|)
block|{
throw|throw
operator|(
name|Exception
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Error
condition|)
block|{
throw|throw
operator|(
name|Error
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|failure
argument_list|)
throw|;
block|}
block|}
DECL|method|testWhenAllComplete_asyncResult ()
specifier|public
name|void
name|testWhenAllComplete_asyncResult
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|Throwable
name|failure
init|=
literal|null
decl_stmt|;
try|try
block|{
name|testCase
operator|.
name|testWhenAllComplete_asyncResult
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
try|try
block|{
name|testCase
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
if|if
condition|(
name|failure
operator|==
literal|null
condition|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Exception
condition|)
block|{
throw|throw
operator|(
name|Exception
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Error
condition|)
block|{
throw|throw
operator|(
name|Error
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|failure
argument_list|)
throw|;
block|}
block|}
DECL|method|testWhenAllComplete_runnableError ()
specifier|public
name|void
name|testWhenAllComplete_runnableError
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|Throwable
name|failure
init|=
literal|null
decl_stmt|;
try|try
block|{
name|testCase
operator|.
name|testWhenAllComplete_runnableError
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
try|try
block|{
name|testCase
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
if|if
condition|(
name|failure
operator|==
literal|null
condition|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Exception
condition|)
block|{
throw|throw
operator|(
name|Exception
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Error
condition|)
block|{
throw|throw
operator|(
name|Error
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|failure
argument_list|)
throw|;
block|}
block|}
DECL|method|testWhenAllComplete_runnableResult ()
specifier|public
name|void
name|testWhenAllComplete_runnableResult
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|Throwable
name|failure
init|=
literal|null
decl_stmt|;
try|try
block|{
name|testCase
operator|.
name|testWhenAllComplete_runnableResult
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
try|try
block|{
name|testCase
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
if|if
condition|(
name|failure
operator|==
literal|null
condition|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Exception
condition|)
block|{
throw|throw
operator|(
name|Exception
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Error
condition|)
block|{
throw|throw
operator|(
name|Error
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|failure
argument_list|)
throw|;
block|}
block|}
DECL|method|testWhenAllComplete_wildcard ()
specifier|public
name|void
name|testWhenAllComplete_wildcard
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|Throwable
name|failure
init|=
literal|null
decl_stmt|;
try|try
block|{
name|testCase
operator|.
name|testWhenAllComplete_wildcard
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
try|try
block|{
name|testCase
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
if|if
condition|(
name|failure
operator|==
literal|null
condition|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Exception
condition|)
block|{
throw|throw
operator|(
name|Exception
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Error
condition|)
block|{
throw|throw
operator|(
name|Error
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|failure
argument_list|)
throw|;
block|}
block|}
DECL|method|testWhenAllSucceed ()
specifier|public
name|void
name|testWhenAllSucceed
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|Throwable
name|failure
init|=
literal|null
decl_stmt|;
try|try
block|{
name|testCase
operator|.
name|testWhenAllSucceed
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
try|try
block|{
name|testCase
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
if|if
condition|(
name|failure
operator|==
literal|null
condition|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Exception
condition|)
block|{
throw|throw
operator|(
name|Exception
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Error
condition|)
block|{
throw|throw
operator|(
name|Error
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|failure
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

