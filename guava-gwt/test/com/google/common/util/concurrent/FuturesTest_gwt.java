begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2008 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.util.concurrent
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
package|;
end_package

begin_class
DECL|class|FuturesTest_gwt
specifier|public
class|class
name|FuturesTest_gwt
extends|extends
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|junit
operator|.
name|client
operator|.
name|GWTTestCase
block|{
DECL|method|getModuleName ()
annotation|@
name|Override
specifier|public
name|String
name|getModuleName
parameter_list|()
block|{
return|return
literal|"com.google.common.util.concurrent.testModule"
return|;
block|}
DECL|method|testDereference_genericsHierarchy ()
specifier|public
name|void
name|testDereference_genericsHierarchy
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|Throwable
name|failure
init|=
literal|null
decl_stmt|;
try|try
block|{
name|testCase
operator|.
name|testDereference_genericsHierarchy
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
try|try
block|{
name|testCase
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
if|if
condition|(
name|failure
operator|==
literal|null
condition|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Exception
condition|)
block|{
throw|throw
operator|(
name|Exception
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Error
condition|)
block|{
throw|throw
operator|(
name|Error
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|failure
argument_list|)
throw|;
block|}
block|}
DECL|method|testDereference_genericsWildcard ()
specifier|public
name|void
name|testDereference_genericsWildcard
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|Throwable
name|failure
init|=
literal|null
decl_stmt|;
try|try
block|{
name|testCase
operator|.
name|testDereference_genericsWildcard
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
try|try
block|{
name|testCase
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
if|if
condition|(
name|failure
operator|==
literal|null
condition|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Exception
condition|)
block|{
throw|throw
operator|(
name|Exception
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Error
condition|)
block|{
throw|throw
operator|(
name|Error
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|failure
argument_list|)
throw|;
block|}
block|}
DECL|method|testDereference_innerCancelsResult ()
specifier|public
name|void
name|testDereference_innerCancelsResult
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|Throwable
name|failure
init|=
literal|null
decl_stmt|;
try|try
block|{
name|testCase
operator|.
name|testDereference_innerCancelsResult
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
try|try
block|{
name|testCase
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
if|if
condition|(
name|failure
operator|==
literal|null
condition|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Exception
condition|)
block|{
throw|throw
operator|(
name|Exception
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Error
condition|)
block|{
throw|throw
operator|(
name|Error
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|failure
argument_list|)
throw|;
block|}
block|}
DECL|method|testDereference_outerCancelsResult ()
specifier|public
name|void
name|testDereference_outerCancelsResult
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|Throwable
name|failure
init|=
literal|null
decl_stmt|;
try|try
block|{
name|testCase
operator|.
name|testDereference_outerCancelsResult
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
try|try
block|{
name|testCase
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
if|if
condition|(
name|failure
operator|==
literal|null
condition|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Exception
condition|)
block|{
throw|throw
operator|(
name|Exception
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Error
condition|)
block|{
throw|throw
operator|(
name|Error
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|failure
argument_list|)
throw|;
block|}
block|}
DECL|method|testDereference_resultCancelsInner ()
specifier|public
name|void
name|testDereference_resultCancelsInner
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|Throwable
name|failure
init|=
literal|null
decl_stmt|;
try|try
block|{
name|testCase
operator|.
name|testDereference_resultCancelsInner
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
try|try
block|{
name|testCase
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
if|if
condition|(
name|failure
operator|==
literal|null
condition|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Exception
condition|)
block|{
throw|throw
operator|(
name|Exception
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Error
condition|)
block|{
throw|throw
operator|(
name|Error
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|failure
argument_list|)
throw|;
block|}
block|}
DECL|method|testDereference_resultCancelsOuter ()
specifier|public
name|void
name|testDereference_resultCancelsOuter
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|Throwable
name|failure
init|=
literal|null
decl_stmt|;
try|try
block|{
name|testCase
operator|.
name|testDereference_resultCancelsOuter
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
try|try
block|{
name|testCase
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
if|if
condition|(
name|failure
operator|==
literal|null
condition|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Exception
condition|)
block|{
throw|throw
operator|(
name|Exception
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Error
condition|)
block|{
throw|throw
operator|(
name|Error
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|failure
argument_list|)
throw|;
block|}
block|}
DECL|method|testImmediateFuture ()
specifier|public
name|void
name|testImmediateFuture
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|Throwable
name|failure
init|=
literal|null
decl_stmt|;
try|try
block|{
name|testCase
operator|.
name|testImmediateFuture
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
try|try
block|{
name|testCase
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
if|if
condition|(
name|failure
operator|==
literal|null
condition|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Exception
condition|)
block|{
throw|throw
operator|(
name|Exception
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Error
condition|)
block|{
throw|throw
operator|(
name|Error
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|failure
argument_list|)
throw|;
block|}
block|}
DECL|method|testMultipleImmediateFutures ()
specifier|public
name|void
name|testMultipleImmediateFutures
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|Throwable
name|failure
init|=
literal|null
decl_stmt|;
try|try
block|{
name|testCase
operator|.
name|testMultipleImmediateFutures
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
try|try
block|{
name|testCase
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
if|if
condition|(
name|failure
operator|==
literal|null
condition|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Exception
condition|)
block|{
throw|throw
operator|(
name|Exception
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Error
condition|)
block|{
throw|throw
operator|(
name|Error
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|failure
argument_list|)
throw|;
block|}
block|}
DECL|method|testTransformValueRemainsMemoized ()
specifier|public
name|void
name|testTransformValueRemainsMemoized
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|Throwable
name|failure
init|=
literal|null
decl_stmt|;
try|try
block|{
name|testCase
operator|.
name|testTransformValueRemainsMemoized
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
try|try
block|{
name|testCase
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
if|if
condition|(
name|failure
operator|==
literal|null
condition|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Exception
condition|)
block|{
throw|throw
operator|(
name|Exception
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Error
condition|)
block|{
throw|throw
operator|(
name|Error
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|failure
argument_list|)
throw|;
block|}
block|}
DECL|method|testTransform_Executor ()
specifier|public
name|void
name|testTransform_Executor
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|Throwable
name|failure
init|=
literal|null
decl_stmt|;
try|try
block|{
name|testCase
operator|.
name|testTransform_Executor
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
try|try
block|{
name|testCase
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
if|if
condition|(
name|failure
operator|==
literal|null
condition|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Exception
condition|)
block|{
throw|throw
operator|(
name|Exception
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Error
condition|)
block|{
throw|throw
operator|(
name|Error
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|failure
argument_list|)
throw|;
block|}
block|}
DECL|method|testTransform_asyncFunction_error ()
specifier|public
name|void
name|testTransform_asyncFunction_error
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|Throwable
name|failure
init|=
literal|null
decl_stmt|;
try|try
block|{
name|testCase
operator|.
name|testTransform_asyncFunction_error
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
try|try
block|{
name|testCase
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
if|if
condition|(
name|failure
operator|==
literal|null
condition|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Exception
condition|)
block|{
throw|throw
operator|(
name|Exception
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Error
condition|)
block|{
throw|throw
operator|(
name|Error
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|failure
argument_list|)
throw|;
block|}
block|}
DECL|method|testTransform_asyncFunction_nullInsteadOfFuture ()
specifier|public
name|void
name|testTransform_asyncFunction_nullInsteadOfFuture
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|Throwable
name|failure
init|=
literal|null
decl_stmt|;
try|try
block|{
name|testCase
operator|.
name|testTransform_asyncFunction_nullInsteadOfFuture
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
try|try
block|{
name|testCase
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
if|if
condition|(
name|failure
operator|==
literal|null
condition|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Exception
condition|)
block|{
throw|throw
operator|(
name|Exception
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Error
condition|)
block|{
throw|throw
operator|(
name|Error
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|failure
argument_list|)
throw|;
block|}
block|}
DECL|method|testTransform_cancelPropagatesToAsyncOutput ()
specifier|public
name|void
name|testTransform_cancelPropagatesToAsyncOutput
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|Throwable
name|failure
init|=
literal|null
decl_stmt|;
try|try
block|{
name|testCase
operator|.
name|testTransform_cancelPropagatesToAsyncOutput
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
try|try
block|{
name|testCase
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
if|if
condition|(
name|failure
operator|==
literal|null
condition|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Exception
condition|)
block|{
throw|throw
operator|(
name|Exception
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Error
condition|)
block|{
throw|throw
operator|(
name|Error
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|failure
argument_list|)
throw|;
block|}
block|}
DECL|method|testTransform_cancelPropagatesToInput ()
specifier|public
name|void
name|testTransform_cancelPropagatesToInput
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|Throwable
name|failure
init|=
literal|null
decl_stmt|;
try|try
block|{
name|testCase
operator|.
name|testTransform_cancelPropagatesToInput
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
try|try
block|{
name|testCase
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
if|if
condition|(
name|failure
operator|==
literal|null
condition|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Exception
condition|)
block|{
throw|throw
operator|(
name|Exception
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Error
condition|)
block|{
throw|throw
operator|(
name|Error
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|failure
argument_list|)
throw|;
block|}
block|}
DECL|method|testTransform_genericsHierarchy ()
specifier|public
name|void
name|testTransform_genericsHierarchy
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|Throwable
name|failure
init|=
literal|null
decl_stmt|;
try|try
block|{
name|testCase
operator|.
name|testTransform_genericsHierarchy
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
try|try
block|{
name|testCase
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
if|if
condition|(
name|failure
operator|==
literal|null
condition|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Exception
condition|)
block|{
throw|throw
operator|(
name|Exception
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Error
condition|)
block|{
throw|throw
operator|(
name|Error
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|failure
argument_list|)
throw|;
block|}
block|}
DECL|method|testTransform_genericsHierarchy_AsyncFunction ()
specifier|public
name|void
name|testTransform_genericsHierarchy_AsyncFunction
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|Throwable
name|failure
init|=
literal|null
decl_stmt|;
try|try
block|{
name|testCase
operator|.
name|testTransform_genericsHierarchy_AsyncFunction
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
try|try
block|{
name|testCase
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
if|if
condition|(
name|failure
operator|==
literal|null
condition|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Exception
condition|)
block|{
throw|throw
operator|(
name|Exception
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Error
condition|)
block|{
throw|throw
operator|(
name|Error
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|failure
argument_list|)
throw|;
block|}
block|}
DECL|method|testTransform_genericsNull ()
specifier|public
name|void
name|testTransform_genericsNull
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|Throwable
name|failure
init|=
literal|null
decl_stmt|;
try|try
block|{
name|testCase
operator|.
name|testTransform_genericsNull
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
try|try
block|{
name|testCase
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
if|if
condition|(
name|failure
operator|==
literal|null
condition|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Exception
condition|)
block|{
throw|throw
operator|(
name|Exception
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Error
condition|)
block|{
throw|throw
operator|(
name|Error
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|failure
argument_list|)
throw|;
block|}
block|}
DECL|method|testTransform_genericsWildcard_AsyncFunction ()
specifier|public
name|void
name|testTransform_genericsWildcard_AsyncFunction
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|Throwable
name|failure
init|=
literal|null
decl_stmt|;
try|try
block|{
name|testCase
operator|.
name|testTransform_genericsWildcard_AsyncFunction
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
try|try
block|{
name|testCase
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
if|if
condition|(
name|failure
operator|==
literal|null
condition|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Exception
condition|)
block|{
throw|throw
operator|(
name|Exception
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Error
condition|)
block|{
throw|throw
operator|(
name|Error
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|failure
argument_list|)
throw|;
block|}
block|}
DECL|method|testTransform_interruptPropagatesToAsyncOutput ()
specifier|public
name|void
name|testTransform_interruptPropagatesToAsyncOutput
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|Throwable
name|failure
init|=
literal|null
decl_stmt|;
try|try
block|{
name|testCase
operator|.
name|testTransform_interruptPropagatesToAsyncOutput
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
try|try
block|{
name|testCase
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
if|if
condition|(
name|failure
operator|==
literal|null
condition|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Exception
condition|)
block|{
throw|throw
operator|(
name|Exception
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Error
condition|)
block|{
throw|throw
operator|(
name|Error
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|failure
argument_list|)
throw|;
block|}
block|}
DECL|method|testTransform_interruptPropagatesToInput ()
specifier|public
name|void
name|testTransform_interruptPropagatesToInput
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FuturesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|Throwable
name|failure
init|=
literal|null
decl_stmt|;
try|try
block|{
name|testCase
operator|.
name|testTransform_interruptPropagatesToInput
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
try|try
block|{
name|testCase
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
if|if
condition|(
name|failure
operator|==
literal|null
condition|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Exception
condition|)
block|{
throw|throw
operator|(
name|Exception
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|instanceof
name|Error
condition|)
block|{
throw|throw
operator|(
name|Error
operator|)
name|failure
throw|;
block|}
if|if
condition|(
name|failure
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|failure
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

