begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2008 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.base
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
package|;
end_package

begin_class
DECL|class|SplitterTest_gwt
specifier|public
class|class
name|SplitterTest_gwt
extends|extends
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|junit
operator|.
name|client
operator|.
name|GWTTestCase
block|{
DECL|method|getModuleName ()
annotation|@
name|Override
specifier|public
name|String
name|getModuleName
parameter_list|()
block|{
return|return
literal|"com.google.common.base.testModule"
return|;
block|}
DECL|method|testCharacterSimpleSplit ()
specifier|public
name|void
name|testCharacterSimpleSplit
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|SplitterTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|SplitterTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testCharacterSimpleSplit
argument_list|()
expr_stmt|;
block|}
DECL|method|testCharacterSimpleSplitToList ()
specifier|public
name|void
name|testCharacterSimpleSplitToList
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|SplitterTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|SplitterTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testCharacterSimpleSplitToList
argument_list|()
expr_stmt|;
block|}
DECL|method|testCharacterSimpleSplitWithNoDelimiter ()
specifier|public
name|void
name|testCharacterSimpleSplitWithNoDelimiter
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|SplitterTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|SplitterTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testCharacterSimpleSplitWithNoDelimiter
argument_list|()
expr_stmt|;
block|}
DECL|method|testCharacterSplitEmptyToken ()
specifier|public
name|void
name|testCharacterSplitEmptyToken
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|SplitterTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|SplitterTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testCharacterSplitEmptyToken
argument_list|()
expr_stmt|;
block|}
DECL|method|testCharacterSplitEmptyTokenOmitEmptyStrings ()
specifier|public
name|void
name|testCharacterSplitEmptyTokenOmitEmptyStrings
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|SplitterTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|SplitterTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testCharacterSplitEmptyTokenOmitEmptyStrings
argument_list|()
expr_stmt|;
block|}
DECL|method|testCharacterSplitOnEmptyString ()
specifier|public
name|void
name|testCharacterSplitOnEmptyString
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|SplitterTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|SplitterTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testCharacterSplitOnEmptyString
argument_list|()
expr_stmt|;
block|}
DECL|method|testCharacterSplitOnEmptyStringOmitEmptyStrings ()
specifier|public
name|void
name|testCharacterSplitOnEmptyStringOmitEmptyStrings
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|SplitterTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|SplitterTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testCharacterSplitOnEmptyStringOmitEmptyStrings
argument_list|()
expr_stmt|;
block|}
DECL|method|testCharacterSplitOnOnlyDelimiter ()
specifier|public
name|void
name|testCharacterSplitOnOnlyDelimiter
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|SplitterTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|SplitterTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testCharacterSplitOnOnlyDelimiter
argument_list|()
expr_stmt|;
block|}
DECL|method|testCharacterSplitOnOnlyDelimitersOmitEmptyStrings ()
specifier|public
name|void
name|testCharacterSplitOnOnlyDelimitersOmitEmptyStrings
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|SplitterTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|SplitterTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testCharacterSplitOnOnlyDelimitersOmitEmptyStrings
argument_list|()
expr_stmt|;
block|}
DECL|method|testCharacterSplitWithDoubleDelimiter ()
specifier|public
name|void
name|testCharacterSplitWithDoubleDelimiter
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|SplitterTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|SplitterTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testCharacterSplitWithDoubleDelimiter
argument_list|()
expr_stmt|;
block|}
DECL|method|testCharacterSplitWithDoubleDelimiterAndSpace ()
specifier|public
name|void
name|testCharacterSplitWithDoubleDelimiterAndSpace
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|SplitterTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|SplitterTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testCharacterSplitWithDoubleDelimiterAndSpace
argument_list|()
expr_stmt|;
block|}
DECL|method|testCharacterSplitWithDoubleDelimiterOmitEmptyStrings ()
specifier|public
name|void
name|testCharacterSplitWithDoubleDelimiterOmitEmptyStrings
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|SplitterTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|SplitterTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testCharacterSplitWithDoubleDelimiterOmitEmptyStrings
argument_list|()
expr_stmt|;
block|}
DECL|method|testCharacterSplitWithLeadingDelimiter ()
specifier|public
name|void
name|testCharacterSplitWithLeadingDelimiter
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|SplitterTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|SplitterTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testCharacterSplitWithLeadingDelimiter
argument_list|()
expr_stmt|;
block|}
DECL|method|testCharacterSplitWithMatcherDelimiter ()
specifier|public
name|void
name|testCharacterSplitWithMatcherDelimiter
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|SplitterTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|SplitterTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testCharacterSplitWithMatcherDelimiter
argument_list|()
expr_stmt|;
block|}
DECL|method|testCharacterSplitWithMultipleLetters ()
specifier|public
name|void
name|testCharacterSplitWithMultipleLetters
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|SplitterTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|SplitterTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testCharacterSplitWithMultipleLetters
argument_list|()
expr_stmt|;
block|}
DECL|method|testCharacterSplitWithTrailingDelimiter ()
specifier|public
name|void
name|testCharacterSplitWithTrailingDelimiter
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|SplitterTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|SplitterTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testCharacterSplitWithTrailingDelimiter
argument_list|()
expr_stmt|;
block|}
DECL|method|testCharacterSplitWithTrim ()
specifier|public
name|void
name|testCharacterSplitWithTrim
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|SplitterTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|SplitterTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testCharacterSplitWithTrim
argument_list|()
expr_stmt|;
block|}
DECL|method|testFixedLengthSimpleSplit ()
specifier|public
name|void
name|testFixedLengthSimpleSplit
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|SplitterTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|SplitterTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testFixedLengthSimpleSplit
argument_list|()
expr_stmt|;
block|}
DECL|method|testFixedLengthSplitEmptyString ()
specifier|public
name|void
name|testFixedLengthSplitEmptyString
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|SplitterTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|SplitterTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testFixedLengthSplitEmptyString
argument_list|()
expr_stmt|;
block|}
DECL|method|testFixedLengthSplitEmptyStringWithOmitEmptyStrings ()
specifier|public
name|void
name|testFixedLengthSplitEmptyStringWithOmitEmptyStrings
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|SplitterTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|SplitterTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testFixedLengthSplitEmptyStringWithOmitEmptyStrings
argument_list|()
expr_stmt|;
block|}
DECL|method|testFixedLengthSplitEqualChunkLength ()
specifier|public
name|void
name|testFixedLengthSplitEqualChunkLength
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|SplitterTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|SplitterTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testFixedLengthSplitEqualChunkLength
argument_list|()
expr_stmt|;
block|}
DECL|method|testFixedLengthSplitIntoChars ()
specifier|public
name|void
name|testFixedLengthSplitIntoChars
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|SplitterTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|SplitterTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testFixedLengthSplitIntoChars
argument_list|()
expr_stmt|;
block|}
DECL|method|testFixedLengthSplitNegativeChunkLen ()
specifier|public
name|void
name|testFixedLengthSplitNegativeChunkLen
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|SplitterTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|SplitterTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testFixedLengthSplitNegativeChunkLen
argument_list|()
expr_stmt|;
block|}
DECL|method|testFixedLengthSplitOnlyOneChunk ()
specifier|public
name|void
name|testFixedLengthSplitOnlyOneChunk
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|SplitterTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|SplitterTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testFixedLengthSplitOnlyOneChunk
argument_list|()
expr_stmt|;
block|}
DECL|method|testFixedLengthSplitSmallerString ()
specifier|public
name|void
name|testFixedLengthSplitSmallerString
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|SplitterTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|SplitterTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testFixedLengthSplitSmallerString
argument_list|()
expr_stmt|;
block|}
DECL|method|testFixedLengthSplitZeroChunkLen ()
specifier|public
name|void
name|testFixedLengthSplitZeroChunkLen
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|SplitterTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|SplitterTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testFixedLengthSplitZeroChunkLen
argument_list|()
expr_stmt|;
block|}
DECL|method|testInvalidZeroLimit ()
specifier|public
name|void
name|testInvalidZeroLimit
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|SplitterTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|SplitterTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testInvalidZeroLimit
argument_list|()
expr_stmt|;
block|}
DECL|method|testLimitExtraSeparators ()
specifier|public
name|void
name|testLimitExtraSeparators
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|SplitterTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|SplitterTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testLimitExtraSeparators
argument_list|()
expr_stmt|;
block|}
DECL|method|testLimitExtraSeparatorsOmitEmpty ()
specifier|public
name|void
name|testLimitExtraSeparatorsOmitEmpty
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|SplitterTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|SplitterTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testLimitExtraSeparatorsOmitEmpty
argument_list|()
expr_stmt|;
block|}
DECL|method|testLimitExtraSeparatorsOmitEmpty3 ()
specifier|public
name|void
name|testLimitExtraSeparatorsOmitEmpty3
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|SplitterTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|SplitterTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testLimitExtraSeparatorsOmitEmpty3
argument_list|()
expr_stmt|;
block|}
DECL|method|testLimitExtraSeparatorsTrim ()
specifier|public
name|void
name|testLimitExtraSeparatorsTrim
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|SplitterTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|SplitterTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testLimitExtraSeparatorsTrim
argument_list|()
expr_stmt|;
block|}
DECL|method|testLimitExtraSeparatorsTrim1 ()
specifier|public
name|void
name|testLimitExtraSeparatorsTrim1
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|SplitterTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|SplitterTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testLimitExtraSeparatorsTrim1
argument_list|()
expr_stmt|;
block|}
DECL|method|testLimitExtraSeparatorsTrim1Empty ()
specifier|public
name|void
name|testLimitExtraSeparatorsTrim1Empty
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|SplitterTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|SplitterTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testLimitExtraSeparatorsTrim1Empty
argument_list|()
expr_stmt|;
block|}
DECL|method|testLimitExtraSeparatorsTrim1EmptyOmit ()
specifier|public
name|void
name|testLimitExtraSeparatorsTrim1EmptyOmit
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|SplitterTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|SplitterTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testLimitExtraSeparatorsTrim1EmptyOmit
argument_list|()
expr_stmt|;
block|}
DECL|method|testLimitExtraSeparatorsTrim1NoOmit ()
specifier|public
name|void
name|testLimitExtraSeparatorsTrim1NoOmit
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|SplitterTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|SplitterTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testLimitExtraSeparatorsTrim1NoOmit
argument_list|()
expr_stmt|;
block|}
DECL|method|testLimitExtraSeparatorsTrim3 ()
specifier|public
name|void
name|testLimitExtraSeparatorsTrim3
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|SplitterTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|SplitterTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testLimitExtraSeparatorsTrim3
argument_list|()
expr_stmt|;
block|}
DECL|method|testLimitFixedLength ()
specifier|public
name|void
name|testLimitFixedLength
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|SplitterTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|SplitterTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testLimitFixedLength
argument_list|()
expr_stmt|;
block|}
DECL|method|testLimitLarge ()
specifier|public
name|void
name|testLimitLarge
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|SplitterTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|SplitterTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testLimitLarge
argument_list|()
expr_stmt|;
block|}
DECL|method|testLimitOne ()
specifier|public
name|void
name|testLimitOne
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|SplitterTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|SplitterTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testLimitOne
argument_list|()
expr_stmt|;
block|}
DECL|method|testLimitSeparator ()
specifier|public
name|void
name|testLimitSeparator
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|SplitterTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|SplitterTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testLimitSeparator
argument_list|()
expr_stmt|;
block|}
DECL|method|testMapSplitter_CharacterSeparator ()
specifier|public
name|void
name|testMapSplitter_CharacterSeparator
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|SplitterTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|SplitterTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testMapSplitter_CharacterSeparator
argument_list|()
expr_stmt|;
block|}
DECL|method|testMapSplitter_duplicateKeys ()
specifier|public
name|void
name|testMapSplitter_duplicateKeys
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|SplitterTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|SplitterTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testMapSplitter_duplicateKeys
argument_list|()
expr_stmt|;
block|}
DECL|method|testMapSplitter_emptySeparator ()
specifier|public
name|void
name|testMapSplitter_emptySeparator
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|SplitterTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|SplitterTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testMapSplitter_emptySeparator
argument_list|()
expr_stmt|;
block|}
DECL|method|testMapSplitter_malformedEntry ()
specifier|public
name|void
name|testMapSplitter_malformedEntry
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|SplitterTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|SplitterTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testMapSplitter_malformedEntry
argument_list|()
expr_stmt|;
block|}
DECL|method|testMapSplitter_multiCharacterSeparator ()
specifier|public
name|void
name|testMapSplitter_multiCharacterSeparator
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|SplitterTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|SplitterTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testMapSplitter_multiCharacterSeparator
argument_list|()
expr_stmt|;
block|}
DECL|method|testMapSplitter_notTrimmed ()
specifier|public
name|void
name|testMapSplitter_notTrimmed
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|SplitterTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|SplitterTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testMapSplitter_notTrimmed
argument_list|()
expr_stmt|;
block|}
DECL|method|testMapSplitter_orderedResults ()
specifier|public
name|void
name|testMapSplitter_orderedResults
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|SplitterTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|SplitterTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testMapSplitter_orderedResults
argument_list|()
expr_stmt|;
block|}
DECL|method|testMapSplitter_trimmedBoth ()
specifier|public
name|void
name|testMapSplitter_trimmedBoth
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|SplitterTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|SplitterTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testMapSplitter_trimmedBoth
argument_list|()
expr_stmt|;
block|}
DECL|method|testMapSplitter_trimmedEntries ()
specifier|public
name|void
name|testMapSplitter_trimmedEntries
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|SplitterTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|SplitterTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testMapSplitter_trimmedEntries
argument_list|()
expr_stmt|;
block|}
DECL|method|testMapSplitter_trimmedKeyValue ()
specifier|public
name|void
name|testMapSplitter_trimmedKeyValue
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|SplitterTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|SplitterTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testMapSplitter_trimmedKeyValue
argument_list|()
expr_stmt|;
block|}
DECL|method|testMapSplitter_varyingTrimLevels ()
specifier|public
name|void
name|testMapSplitter_varyingTrimLevels
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|SplitterTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|SplitterTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testMapSplitter_varyingTrimLevels
argument_list|()
expr_stmt|;
block|}
DECL|method|testSplitNullString ()
specifier|public
name|void
name|testSplitNullString
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|SplitterTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|SplitterTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testSplitNullString
argument_list|()
expr_stmt|;
block|}
DECL|method|testSplitterIterableIsLazy_char ()
specifier|public
name|void
name|testSplitterIterableIsLazy_char
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|SplitterTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|SplitterTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testSplitterIterableIsLazy_char
argument_list|()
expr_stmt|;
block|}
DECL|method|testSplitterIterableIsLazy_string ()
specifier|public
name|void
name|testSplitterIterableIsLazy_string
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|SplitterTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|SplitterTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testSplitterIterableIsLazy_string
argument_list|()
expr_stmt|;
block|}
DECL|method|testSplitterIterableIsUnmodifiable_char ()
specifier|public
name|void
name|testSplitterIterableIsUnmodifiable_char
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|SplitterTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|SplitterTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testSplitterIterableIsUnmodifiable_char
argument_list|()
expr_stmt|;
block|}
DECL|method|testSplitterIterableIsUnmodifiable_string ()
specifier|public
name|void
name|testSplitterIterableIsUnmodifiable_string
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|SplitterTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|SplitterTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testSplitterIterableIsUnmodifiable_string
argument_list|()
expr_stmt|;
block|}
DECL|method|testStringSimpleSplit ()
specifier|public
name|void
name|testStringSimpleSplit
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|SplitterTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|SplitterTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testStringSimpleSplit
argument_list|()
expr_stmt|;
block|}
DECL|method|testStringSimpleSplitWithNoDelimiter ()
specifier|public
name|void
name|testStringSimpleSplitWithNoDelimiter
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|SplitterTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|SplitterTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testStringSimpleSplitWithNoDelimiter
argument_list|()
expr_stmt|;
block|}
DECL|method|testStringSplitEmptyToken ()
specifier|public
name|void
name|testStringSplitEmptyToken
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|SplitterTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|SplitterTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testStringSplitEmptyToken
argument_list|()
expr_stmt|;
block|}
DECL|method|testStringSplitEmptyTokenOmitEmptyStrings ()
specifier|public
name|void
name|testStringSplitEmptyTokenOmitEmptyStrings
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|SplitterTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|SplitterTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testStringSplitEmptyTokenOmitEmptyStrings
argument_list|()
expr_stmt|;
block|}
DECL|method|testStringSplitOnEmptyString ()
specifier|public
name|void
name|testStringSplitOnEmptyString
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|SplitterTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|SplitterTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testStringSplitOnEmptyString
argument_list|()
expr_stmt|;
block|}
DECL|method|testStringSplitOnEmptyStringOmitEmptyString ()
specifier|public
name|void
name|testStringSplitOnEmptyStringOmitEmptyString
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|SplitterTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|SplitterTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testStringSplitOnEmptyStringOmitEmptyString
argument_list|()
expr_stmt|;
block|}
DECL|method|testStringSplitOnOnlyDelimiter ()
specifier|public
name|void
name|testStringSplitOnOnlyDelimiter
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|SplitterTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|SplitterTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testStringSplitOnOnlyDelimiter
argument_list|()
expr_stmt|;
block|}
DECL|method|testStringSplitOnOnlyDelimitersOmitEmptyStrings ()
specifier|public
name|void
name|testStringSplitOnOnlyDelimitersOmitEmptyStrings
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|SplitterTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|SplitterTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testStringSplitOnOnlyDelimitersOmitEmptyStrings
argument_list|()
expr_stmt|;
block|}
DECL|method|testStringSplitWithDelimiterSubstringInValue ()
specifier|public
name|void
name|testStringSplitWithDelimiterSubstringInValue
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|SplitterTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|SplitterTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testStringSplitWithDelimiterSubstringInValue
argument_list|()
expr_stmt|;
block|}
DECL|method|testStringSplitWithDoubleDelimiter ()
specifier|public
name|void
name|testStringSplitWithDoubleDelimiter
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|SplitterTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|SplitterTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testStringSplitWithDoubleDelimiter
argument_list|()
expr_stmt|;
block|}
DECL|method|testStringSplitWithDoubleDelimiterAndSpace ()
specifier|public
name|void
name|testStringSplitWithDoubleDelimiterAndSpace
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|SplitterTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|SplitterTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testStringSplitWithDoubleDelimiterAndSpace
argument_list|()
expr_stmt|;
block|}
DECL|method|testStringSplitWithDoubleDelimiterOmitEmptyStrings ()
specifier|public
name|void
name|testStringSplitWithDoubleDelimiterOmitEmptyStrings
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|SplitterTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|SplitterTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testStringSplitWithDoubleDelimiterOmitEmptyStrings
argument_list|()
expr_stmt|;
block|}
DECL|method|testStringSplitWithEmptyString ()
specifier|public
name|void
name|testStringSplitWithEmptyString
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|SplitterTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|SplitterTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testStringSplitWithEmptyString
argument_list|()
expr_stmt|;
block|}
DECL|method|testStringSplitWithLeadingDelimiter ()
specifier|public
name|void
name|testStringSplitWithLeadingDelimiter
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|SplitterTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|SplitterTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testStringSplitWithLeadingDelimiter
argument_list|()
expr_stmt|;
block|}
DECL|method|testStringSplitWithLongDelimiter ()
specifier|public
name|void
name|testStringSplitWithLongDelimiter
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|SplitterTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|SplitterTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testStringSplitWithLongDelimiter
argument_list|()
expr_stmt|;
block|}
DECL|method|testStringSplitWithLongLeadingDelimiter ()
specifier|public
name|void
name|testStringSplitWithLongLeadingDelimiter
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|SplitterTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|SplitterTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testStringSplitWithLongLeadingDelimiter
argument_list|()
expr_stmt|;
block|}
DECL|method|testStringSplitWithLongTrailingDelimiter ()
specifier|public
name|void
name|testStringSplitWithLongTrailingDelimiter
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|SplitterTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|SplitterTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testStringSplitWithLongTrailingDelimiter
argument_list|()
expr_stmt|;
block|}
DECL|method|testStringSplitWithMultipleLetters ()
specifier|public
name|void
name|testStringSplitWithMultipleLetters
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|SplitterTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|SplitterTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testStringSplitWithMultipleLetters
argument_list|()
expr_stmt|;
block|}
DECL|method|testStringSplitWithTrailingDelimiter ()
specifier|public
name|void
name|testStringSplitWithTrailingDelimiter
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|SplitterTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|SplitterTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testStringSplitWithTrailingDelimiter
argument_list|()
expr_stmt|;
block|}
DECL|method|testStringSplitWithTrim ()
specifier|public
name|void
name|testStringSplitWithTrim
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|SplitterTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|SplitterTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testStringSplitWithTrim
argument_list|()
expr_stmt|;
block|}
DECL|method|testToString ()
specifier|public
name|void
name|testToString
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|SplitterTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|SplitterTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testToString
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

