begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2008 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.base
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
package|;
end_package

begin_class
DECL|class|PredicatesTest_gwt
specifier|public
class|class
name|PredicatesTest_gwt
extends|extends
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|junit
operator|.
name|client
operator|.
name|GWTTestCase
block|{
DECL|method|getModuleName ()
annotation|@
name|Override
specifier|public
name|String
name|getModuleName
parameter_list|()
block|{
return|return
literal|"com.google.common.base.testModule"
return|;
block|}
DECL|method|testAlwaysFalse_apply ()
specifier|public
name|void
name|testAlwaysFalse_apply
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|PredicatesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|PredicatesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testAlwaysFalse_apply
argument_list|()
expr_stmt|;
block|}
DECL|method|testAlwaysFalse_equality ()
specifier|public
name|void
name|testAlwaysFalse_equality
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|PredicatesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|PredicatesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testAlwaysFalse_equality
argument_list|()
expr_stmt|;
block|}
DECL|method|testAlwaysTrue_apply ()
specifier|public
name|void
name|testAlwaysTrue_apply
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|PredicatesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|PredicatesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testAlwaysTrue_apply
argument_list|()
expr_stmt|;
block|}
DECL|method|testAlwaysTrue_equality ()
specifier|public
name|void
name|testAlwaysTrue_equality
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|PredicatesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|PredicatesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testAlwaysTrue_equality
argument_list|()
expr_stmt|;
block|}
DECL|method|testAnd_applyBinary ()
specifier|public
name|void
name|testAnd_applyBinary
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|PredicatesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|PredicatesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testAnd_applyBinary
argument_list|()
expr_stmt|;
block|}
DECL|method|testAnd_applyIterable ()
specifier|public
name|void
name|testAnd_applyIterable
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|PredicatesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|PredicatesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testAnd_applyIterable
argument_list|()
expr_stmt|;
block|}
DECL|method|testAnd_applyNoArgs ()
specifier|public
name|void
name|testAnd_applyNoArgs
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|PredicatesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|PredicatesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testAnd_applyNoArgs
argument_list|()
expr_stmt|;
block|}
DECL|method|testAnd_applyOneArg ()
specifier|public
name|void
name|testAnd_applyOneArg
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|PredicatesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|PredicatesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testAnd_applyOneArg
argument_list|()
expr_stmt|;
block|}
DECL|method|testAnd_applyTernary ()
specifier|public
name|void
name|testAnd_applyTernary
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|PredicatesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|PredicatesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testAnd_applyTernary
argument_list|()
expr_stmt|;
block|}
DECL|method|testAnd_arrayDefensivelyCopied ()
specifier|public
name|void
name|testAnd_arrayDefensivelyCopied
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|PredicatesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|PredicatesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testAnd_arrayDefensivelyCopied
argument_list|()
expr_stmt|;
block|}
DECL|method|testAnd_equalityBinary ()
specifier|public
name|void
name|testAnd_equalityBinary
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|PredicatesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|PredicatesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testAnd_equalityBinary
argument_list|()
expr_stmt|;
block|}
DECL|method|testAnd_equalityIterable ()
specifier|public
name|void
name|testAnd_equalityIterable
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|PredicatesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|PredicatesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testAnd_equalityIterable
argument_list|()
expr_stmt|;
block|}
DECL|method|testAnd_equalityNoArgs ()
specifier|public
name|void
name|testAnd_equalityNoArgs
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|PredicatesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|PredicatesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testAnd_equalityNoArgs
argument_list|()
expr_stmt|;
block|}
DECL|method|testAnd_equalityOneArg ()
specifier|public
name|void
name|testAnd_equalityOneArg
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|PredicatesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|PredicatesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testAnd_equalityOneArg
argument_list|()
expr_stmt|;
block|}
DECL|method|testAnd_equalityTernary ()
specifier|public
name|void
name|testAnd_equalityTernary
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|PredicatesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|PredicatesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testAnd_equalityTernary
argument_list|()
expr_stmt|;
block|}
DECL|method|testAnd_iterableDefensivelyCopied ()
specifier|public
name|void
name|testAnd_iterableDefensivelyCopied
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|PredicatesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|PredicatesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testAnd_iterableDefensivelyCopied
argument_list|()
expr_stmt|;
block|}
DECL|method|testAnd_listDefensivelyCopied ()
specifier|public
name|void
name|testAnd_listDefensivelyCopied
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|PredicatesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|PredicatesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testAnd_listDefensivelyCopied
argument_list|()
expr_stmt|;
block|}
DECL|method|testCompose ()
specifier|public
name|void
name|testCompose
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|PredicatesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|PredicatesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testCompose
argument_list|()
expr_stmt|;
block|}
DECL|method|testHashCodeForBooleanOperations ()
specifier|public
name|void
name|testHashCodeForBooleanOperations
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|PredicatesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|PredicatesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testHashCodeForBooleanOperations
argument_list|()
expr_stmt|;
block|}
DECL|method|testIn_apply ()
specifier|public
name|void
name|testIn_apply
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|PredicatesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|PredicatesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testIn_apply
argument_list|()
expr_stmt|;
block|}
DECL|method|testIn_compilesWithExplicitSupertype ()
specifier|public
name|void
name|testIn_compilesWithExplicitSupertype
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|PredicatesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|PredicatesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testIn_compilesWithExplicitSupertype
argument_list|()
expr_stmt|;
block|}
DECL|method|testIn_equality ()
specifier|public
name|void
name|testIn_equality
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|PredicatesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|PredicatesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testIn_equality
argument_list|()
expr_stmt|;
block|}
DECL|method|testIn_handlesClassCastException ()
specifier|public
name|void
name|testIn_handlesClassCastException
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|PredicatesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|PredicatesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testIn_handlesClassCastException
argument_list|()
expr_stmt|;
block|}
DECL|method|testIn_handlesNullPointerException ()
specifier|public
name|void
name|testIn_handlesNullPointerException
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|PredicatesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|PredicatesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testIn_handlesNullPointerException
argument_list|()
expr_stmt|;
block|}
DECL|method|testIsEqualToNull_apply ()
specifier|public
name|void
name|testIsEqualToNull_apply
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|PredicatesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|PredicatesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testIsEqualToNull_apply
argument_list|()
expr_stmt|;
block|}
DECL|method|testIsEqualToNull_equality ()
specifier|public
name|void
name|testIsEqualToNull_equality
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|PredicatesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|PredicatesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testIsEqualToNull_equality
argument_list|()
expr_stmt|;
block|}
DECL|method|testIsEqualTo_apply ()
specifier|public
name|void
name|testIsEqualTo_apply
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|PredicatesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|PredicatesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testIsEqualTo_apply
argument_list|()
expr_stmt|;
block|}
DECL|method|testIsEqualTo_equality ()
specifier|public
name|void
name|testIsEqualTo_equality
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|PredicatesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|PredicatesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testIsEqualTo_equality
argument_list|()
expr_stmt|;
block|}
DECL|method|testIsNull_apply ()
specifier|public
name|void
name|testIsNull_apply
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|PredicatesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|PredicatesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testIsNull_apply
argument_list|()
expr_stmt|;
block|}
DECL|method|testIsNull_equality ()
specifier|public
name|void
name|testIsNull_equality
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|PredicatesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|PredicatesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testIsNull_equality
argument_list|()
expr_stmt|;
block|}
DECL|method|testNotNull_apply ()
specifier|public
name|void
name|testNotNull_apply
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|PredicatesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|PredicatesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testNotNull_apply
argument_list|()
expr_stmt|;
block|}
DECL|method|testNotNull_equality ()
specifier|public
name|void
name|testNotNull_equality
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|PredicatesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|PredicatesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testNotNull_equality
argument_list|()
expr_stmt|;
block|}
DECL|method|testNot_apply ()
specifier|public
name|void
name|testNot_apply
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|PredicatesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|PredicatesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testNot_apply
argument_list|()
expr_stmt|;
block|}
DECL|method|testNot_equality ()
specifier|public
name|void
name|testNot_equality
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|PredicatesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|PredicatesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testNot_equality
argument_list|()
expr_stmt|;
block|}
DECL|method|testNot_equalityForNotOfKnownValues ()
specifier|public
name|void
name|testNot_equalityForNotOfKnownValues
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|PredicatesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|PredicatesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testNot_equalityForNotOfKnownValues
argument_list|()
expr_stmt|;
block|}
DECL|method|testOr_applyBinary ()
specifier|public
name|void
name|testOr_applyBinary
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|PredicatesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|PredicatesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testOr_applyBinary
argument_list|()
expr_stmt|;
block|}
DECL|method|testOr_applyIterable ()
specifier|public
name|void
name|testOr_applyIterable
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|PredicatesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|PredicatesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testOr_applyIterable
argument_list|()
expr_stmt|;
block|}
DECL|method|testOr_applyNoArgs ()
specifier|public
name|void
name|testOr_applyNoArgs
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|PredicatesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|PredicatesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testOr_applyNoArgs
argument_list|()
expr_stmt|;
block|}
DECL|method|testOr_applyOneArg ()
specifier|public
name|void
name|testOr_applyOneArg
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|PredicatesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|PredicatesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testOr_applyOneArg
argument_list|()
expr_stmt|;
block|}
DECL|method|testOr_applyTernary ()
specifier|public
name|void
name|testOr_applyTernary
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|PredicatesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|PredicatesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testOr_applyTernary
argument_list|()
expr_stmt|;
block|}
DECL|method|testOr_arrayDefensivelyCopied ()
specifier|public
name|void
name|testOr_arrayDefensivelyCopied
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|PredicatesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|PredicatesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testOr_arrayDefensivelyCopied
argument_list|()
expr_stmt|;
block|}
DECL|method|testOr_equalityBinary ()
specifier|public
name|void
name|testOr_equalityBinary
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|PredicatesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|PredicatesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testOr_equalityBinary
argument_list|()
expr_stmt|;
block|}
DECL|method|testOr_equalityIterable ()
specifier|public
name|void
name|testOr_equalityIterable
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|PredicatesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|PredicatesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testOr_equalityIterable
argument_list|()
expr_stmt|;
block|}
DECL|method|testOr_equalityNoArgs ()
specifier|public
name|void
name|testOr_equalityNoArgs
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|PredicatesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|PredicatesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testOr_equalityNoArgs
argument_list|()
expr_stmt|;
block|}
DECL|method|testOr_equalityOneArg ()
specifier|public
name|void
name|testOr_equalityOneArg
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|PredicatesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|PredicatesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testOr_equalityOneArg
argument_list|()
expr_stmt|;
block|}
DECL|method|testOr_equalityTernary ()
specifier|public
name|void
name|testOr_equalityTernary
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|PredicatesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|PredicatesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testOr_equalityTernary
argument_list|()
expr_stmt|;
block|}
DECL|method|testOr_iterableDefensivelyCopied ()
specifier|public
name|void
name|testOr_iterableDefensivelyCopied
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|PredicatesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|PredicatesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testOr_iterableDefensivelyCopied
argument_list|()
expr_stmt|;
block|}
DECL|method|testOr_listDefensivelyCopied ()
specifier|public
name|void
name|testOr_listDefensivelyCopied
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|PredicatesTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|PredicatesTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testOr_listDefensivelyCopied
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

