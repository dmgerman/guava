begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2008 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.base
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
package|;
end_package

begin_class
DECL|class|OptionalTest_gwt
specifier|public
class|class
name|OptionalTest_gwt
extends|extends
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|junit
operator|.
name|client
operator|.
name|GWTTestCase
block|{
DECL|method|getModuleName ()
annotation|@
name|Override
specifier|public
name|String
name|getModuleName
parameter_list|()
block|{
return|return
literal|"com.google.common.base.testModule"
return|;
block|}
DECL|method|testAbsent ()
specifier|public
name|void
name|testAbsent
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|OptionalTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|OptionalTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testAbsent
argument_list|()
expr_stmt|;
block|}
DECL|method|testAsSet_absent ()
specifier|public
name|void
name|testAsSet_absent
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|OptionalTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|OptionalTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testAsSet_absent
argument_list|()
expr_stmt|;
block|}
DECL|method|testAsSet_absentIsImmutable ()
specifier|public
name|void
name|testAsSet_absentIsImmutable
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|OptionalTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|OptionalTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testAsSet_absentIsImmutable
argument_list|()
expr_stmt|;
block|}
DECL|method|testAsSet_present ()
specifier|public
name|void
name|testAsSet_present
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|OptionalTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|OptionalTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testAsSet_present
argument_list|()
expr_stmt|;
block|}
DECL|method|testAsSet_presentIsImmutable ()
specifier|public
name|void
name|testAsSet_presentIsImmutable
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|OptionalTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|OptionalTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testAsSet_presentIsImmutable
argument_list|()
expr_stmt|;
block|}
DECL|method|testEqualsAndHashCode_absent ()
specifier|public
name|void
name|testEqualsAndHashCode_absent
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|OptionalTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|OptionalTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testEqualsAndHashCode_absent
argument_list|()
expr_stmt|;
block|}
DECL|method|testEqualsAndHashCode_present ()
specifier|public
name|void
name|testEqualsAndHashCode_present
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|OptionalTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|OptionalTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testEqualsAndHashCode_present
argument_list|()
expr_stmt|;
block|}
DECL|method|testFromNullable ()
specifier|public
name|void
name|testFromNullable
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|OptionalTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|OptionalTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testFromNullable
argument_list|()
expr_stmt|;
block|}
DECL|method|testFromNullable_null ()
specifier|public
name|void
name|testFromNullable_null
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|OptionalTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|OptionalTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testFromNullable_null
argument_list|()
expr_stmt|;
block|}
DECL|method|testGet_absent ()
specifier|public
name|void
name|testGet_absent
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|OptionalTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|OptionalTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testGet_absent
argument_list|()
expr_stmt|;
block|}
DECL|method|testGet_present ()
specifier|public
name|void
name|testGet_present
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|OptionalTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|OptionalTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testGet_present
argument_list|()
expr_stmt|;
block|}
DECL|method|testIsPresent_no ()
specifier|public
name|void
name|testIsPresent_no
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|OptionalTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|OptionalTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testIsPresent_no
argument_list|()
expr_stmt|;
block|}
DECL|method|testIsPresent_yes ()
specifier|public
name|void
name|testIsPresent_yes
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|OptionalTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|OptionalTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testIsPresent_yes
argument_list|()
expr_stmt|;
block|}
DECL|method|testOf ()
specifier|public
name|void
name|testOf
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|OptionalTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|OptionalTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testOf
argument_list|()
expr_stmt|;
block|}
DECL|method|testOf_null ()
specifier|public
name|void
name|testOf_null
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|OptionalTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|OptionalTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testOf_null
argument_list|()
expr_stmt|;
block|}
DECL|method|testOrNull_absent ()
specifier|public
name|void
name|testOrNull_absent
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|OptionalTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|OptionalTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testOrNull_absent
argument_list|()
expr_stmt|;
block|}
DECL|method|testOrNull_present ()
specifier|public
name|void
name|testOrNull_present
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|OptionalTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|OptionalTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testOrNull_present
argument_list|()
expr_stmt|;
block|}
DECL|method|testOr_Optional_absent ()
specifier|public
name|void
name|testOr_Optional_absent
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|OptionalTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|OptionalTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testOr_Optional_absent
argument_list|()
expr_stmt|;
block|}
DECL|method|testOr_Optional_present ()
specifier|public
name|void
name|testOr_Optional_present
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|OptionalTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|OptionalTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testOr_Optional_present
argument_list|()
expr_stmt|;
block|}
DECL|method|testOr_T_absent ()
specifier|public
name|void
name|testOr_T_absent
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|OptionalTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|OptionalTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testOr_T_absent
argument_list|()
expr_stmt|;
block|}
DECL|method|testOr_T_present ()
specifier|public
name|void
name|testOr_T_present
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|OptionalTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|OptionalTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testOr_T_present
argument_list|()
expr_stmt|;
block|}
DECL|method|testOr_nullSupplier_absent ()
specifier|public
name|void
name|testOr_nullSupplier_absent
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|OptionalTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|OptionalTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testOr_nullSupplier_absent
argument_list|()
expr_stmt|;
block|}
DECL|method|testOr_nullSupplier_present ()
specifier|public
name|void
name|testOr_nullSupplier_present
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|OptionalTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|OptionalTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testOr_nullSupplier_present
argument_list|()
expr_stmt|;
block|}
DECL|method|testOr_supplier_absent ()
specifier|public
name|void
name|testOr_supplier_absent
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|OptionalTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|OptionalTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testOr_supplier_absent
argument_list|()
expr_stmt|;
block|}
DECL|method|testOr_supplier_present ()
specifier|public
name|void
name|testOr_supplier_present
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|OptionalTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|OptionalTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testOr_supplier_present
argument_list|()
expr_stmt|;
block|}
DECL|method|testPresentInstances_allAbsent ()
specifier|public
name|void
name|testPresentInstances_allAbsent
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|OptionalTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|OptionalTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testPresentInstances_allAbsent
argument_list|()
expr_stmt|;
block|}
DECL|method|testPresentInstances_allPresent ()
specifier|public
name|void
name|testPresentInstances_allPresent
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|OptionalTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|OptionalTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testPresentInstances_allPresent
argument_list|()
expr_stmt|;
block|}
DECL|method|testPresentInstances_callingIteratorTwice ()
specifier|public
name|void
name|testPresentInstances_callingIteratorTwice
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|OptionalTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|OptionalTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testPresentInstances_callingIteratorTwice
argument_list|()
expr_stmt|;
block|}
DECL|method|testPresentInstances_somePresent ()
specifier|public
name|void
name|testPresentInstances_somePresent
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|OptionalTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|OptionalTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testPresentInstances_somePresent
argument_list|()
expr_stmt|;
block|}
DECL|method|testPresentInstances_wildcards ()
specifier|public
name|void
name|testPresentInstances_wildcards
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|OptionalTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|OptionalTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testPresentInstances_wildcards
argument_list|()
expr_stmt|;
block|}
DECL|method|testSampleCodeError1 ()
specifier|public
name|void
name|testSampleCodeError1
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|OptionalTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|OptionalTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testSampleCodeError1
argument_list|()
expr_stmt|;
block|}
DECL|method|testSampleCodeError2 ()
specifier|public
name|void
name|testSampleCodeError2
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|OptionalTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|OptionalTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testSampleCodeError2
argument_list|()
expr_stmt|;
block|}
DECL|method|testSampleCodeFine1 ()
specifier|public
name|void
name|testSampleCodeFine1
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|OptionalTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|OptionalTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testSampleCodeFine1
argument_list|()
expr_stmt|;
block|}
DECL|method|testSampleCodeFine2 ()
specifier|public
name|void
name|testSampleCodeFine2
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|OptionalTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|OptionalTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testSampleCodeFine2
argument_list|()
expr_stmt|;
block|}
DECL|method|testToString_absent ()
specifier|public
name|void
name|testToString_absent
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|OptionalTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|OptionalTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testToString_absent
argument_list|()
expr_stmt|;
block|}
DECL|method|testToString_present ()
specifier|public
name|void
name|testToString_present
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|OptionalTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|OptionalTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testToString_present
argument_list|()
expr_stmt|;
block|}
DECL|method|testTransform_absent ()
specifier|public
name|void
name|testTransform_absent
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|OptionalTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|OptionalTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testTransform_absent
argument_list|()
expr_stmt|;
block|}
DECL|method|testTransform_abssent_functionReturnsNull ()
specifier|public
name|void
name|testTransform_abssent_functionReturnsNull
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|OptionalTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|OptionalTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testTransform_abssent_functionReturnsNull
argument_list|()
expr_stmt|;
block|}
DECL|method|testTransform_presentIdentity ()
specifier|public
name|void
name|testTransform_presentIdentity
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|OptionalTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|OptionalTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testTransform_presentIdentity
argument_list|()
expr_stmt|;
block|}
DECL|method|testTransform_presentToString ()
specifier|public
name|void
name|testTransform_presentToString
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|OptionalTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|OptionalTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testTransform_presentToString
argument_list|()
expr_stmt|;
block|}
DECL|method|testTransform_present_functionReturnsNull ()
specifier|public
name|void
name|testTransform_present_functionReturnsNull
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|OptionalTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|OptionalTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testTransform_present_functionReturnsNull
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

