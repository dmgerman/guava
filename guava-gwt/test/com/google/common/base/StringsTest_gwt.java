begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2008 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.base
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
package|;
end_package

begin_class
DECL|class|StringsTest_gwt
specifier|public
class|class
name|StringsTest_gwt
extends|extends
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|junit
operator|.
name|client
operator|.
name|GWTTestCase
block|{
DECL|method|getModuleName ()
annotation|@
name|Override
specifier|public
name|String
name|getModuleName
parameter_list|()
block|{
return|return
literal|"com.google.common.base.testModule"
return|;
block|}
DECL|method|testCommonPrefix ()
specifier|public
name|void
name|testCommonPrefix
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|StringsTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|StringsTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testCommonPrefix
argument_list|()
expr_stmt|;
block|}
DECL|method|testCommonSuffix ()
specifier|public
name|void
name|testCommonSuffix
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|StringsTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|StringsTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testCommonSuffix
argument_list|()
expr_stmt|;
block|}
DECL|method|testEmptyToNull ()
specifier|public
name|void
name|testEmptyToNull
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|StringsTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|StringsTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testEmptyToNull
argument_list|()
expr_stmt|;
block|}
DECL|method|testIsNullOrEmpty ()
specifier|public
name|void
name|testIsNullOrEmpty
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|StringsTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|StringsTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testIsNullOrEmpty
argument_list|()
expr_stmt|;
block|}
DECL|method|testLenientFormat ()
specifier|public
name|void
name|testLenientFormat
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|StringsTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|StringsTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testLenientFormat
argument_list|()
expr_stmt|;
block|}
DECL|method|testLenientFormat_badArgumentToString_gwtFriendly ()
specifier|public
name|void
name|testLenientFormat_badArgumentToString_gwtFriendly
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|StringsTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|StringsTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testLenientFormat_badArgumentToString_gwtFriendly
argument_list|()
expr_stmt|;
block|}
DECL|method|testNullToEmpty ()
specifier|public
name|void
name|testNullToEmpty
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|StringsTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|StringsTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testNullToEmpty
argument_list|()
expr_stmt|;
block|}
DECL|method|testPadEnd_negativeMinLength ()
specifier|public
name|void
name|testPadEnd_negativeMinLength
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|StringsTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|StringsTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testPadEnd_negativeMinLength
argument_list|()
expr_stmt|;
block|}
DECL|method|testPadEnd_noPadding ()
specifier|public
name|void
name|testPadEnd_noPadding
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|StringsTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|StringsTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testPadEnd_noPadding
argument_list|()
expr_stmt|;
block|}
DECL|method|testPadEnd_null ()
specifier|public
name|void
name|testPadEnd_null
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|StringsTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|StringsTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testPadEnd_null
argument_list|()
expr_stmt|;
block|}
DECL|method|testPadEnd_somePadding ()
specifier|public
name|void
name|testPadEnd_somePadding
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|StringsTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|StringsTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testPadEnd_somePadding
argument_list|()
expr_stmt|;
block|}
DECL|method|testPadStart_negativeMinLength ()
specifier|public
name|void
name|testPadStart_negativeMinLength
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|StringsTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|StringsTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testPadStart_negativeMinLength
argument_list|()
expr_stmt|;
block|}
DECL|method|testPadStart_noPadding ()
specifier|public
name|void
name|testPadStart_noPadding
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|StringsTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|StringsTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testPadStart_noPadding
argument_list|()
expr_stmt|;
block|}
DECL|method|testPadStart_null ()
specifier|public
name|void
name|testPadStart_null
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|StringsTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|StringsTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testPadStart_null
argument_list|()
expr_stmt|;
block|}
DECL|method|testPadStart_somePadding ()
specifier|public
name|void
name|testPadStart_somePadding
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|StringsTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|StringsTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testPadStart_somePadding
argument_list|()
expr_stmt|;
block|}
DECL|method|testRepeat ()
specifier|public
name|void
name|testRepeat
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|StringsTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|StringsTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testRepeat
argument_list|()
expr_stmt|;
block|}
DECL|method|testRepeat_null ()
specifier|public
name|void
name|testRepeat_null
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|StringsTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|StringsTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testRepeat_null
argument_list|()
expr_stmt|;
block|}
DECL|method|testValidSurrogatePairAt ()
specifier|public
name|void
name|testValidSurrogatePairAt
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|StringsTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|StringsTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testValidSurrogatePairAt
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

