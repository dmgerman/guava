begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2008 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.base
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
package|;
end_package

begin_class
DECL|class|CharMatcherTest_gwt
specifier|public
class|class
name|CharMatcherTest_gwt
extends|extends
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|junit
operator|.
name|client
operator|.
name|GWTTestCase
block|{
DECL|method|getModuleName ()
annotation|@
name|Override
specifier|public
name|String
name|getModuleName
parameter_list|()
block|{
return|return
literal|"com.google.common.base.testModule"
return|;
block|}
DECL|method|testAllMatches ()
specifier|public
name|void
name|testAllMatches
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|CharMatcherTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|CharMatcherTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testAllMatches
argument_list|()
expr_stmt|;
block|}
DECL|method|testAnyAndNone_logicalOps ()
specifier|public
name|void
name|testAnyAndNone_logicalOps
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|CharMatcherTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|CharMatcherTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testAnyAndNone_logicalOps
argument_list|()
expr_stmt|;
block|}
DECL|method|testCollapse ()
specifier|public
name|void
name|testCollapse
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|CharMatcherTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|CharMatcherTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testCollapse
argument_list|()
expr_stmt|;
block|}
DECL|method|testCollapse_any ()
specifier|public
name|void
name|testCollapse_any
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|CharMatcherTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|CharMatcherTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testCollapse_any
argument_list|()
expr_stmt|;
block|}
DECL|method|testEmpty ()
specifier|public
name|void
name|testEmpty
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|CharMatcherTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|CharMatcherTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testEmpty
argument_list|()
expr_stmt|;
block|}
DECL|method|testGeneral ()
specifier|public
name|void
name|testGeneral
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|CharMatcherTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|CharMatcherTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testGeneral
argument_list|()
expr_stmt|;
block|}
DECL|method|testNoMatches ()
specifier|public
name|void
name|testNoMatches
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|CharMatcherTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|CharMatcherTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testNoMatches
argument_list|()
expr_stmt|;
block|}
DECL|method|testPrecomputedOptimizations ()
specifier|public
name|void
name|testPrecomputedOptimizations
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|CharMatcherTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|CharMatcherTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testPrecomputedOptimizations
argument_list|()
expr_stmt|;
block|}
DECL|method|testReplaceFrom ()
specifier|public
name|void
name|testReplaceFrom
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|CharMatcherTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|CharMatcherTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testReplaceFrom
argument_list|()
expr_stmt|;
block|}
DECL|method|testToString ()
specifier|public
name|void
name|testToString
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|CharMatcherTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|CharMatcherTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testToString
argument_list|()
expr_stmt|;
block|}
DECL|method|testTrimAndCollapse ()
specifier|public
name|void
name|testTrimAndCollapse
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|CharMatcherTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|CharMatcherTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testTrimAndCollapse
argument_list|()
expr_stmt|;
block|}
DECL|method|testTrimFrom ()
specifier|public
name|void
name|testTrimFrom
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|CharMatcherTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|CharMatcherTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testTrimFrom
argument_list|()
expr_stmt|;
block|}
DECL|method|testTrimLeadingFrom ()
specifier|public
name|void
name|testTrimLeadingFrom
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|CharMatcherTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|CharMatcherTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testTrimLeadingFrom
argument_list|()
expr_stmt|;
block|}
DECL|method|testTrimTrailingFrom ()
specifier|public
name|void
name|testTrimTrailingFrom
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|CharMatcherTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|CharMatcherTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testTrimTrailingFrom
argument_list|()
expr_stmt|;
block|}
DECL|method|testWhitespaceBreakingWhitespaceSubset ()
specifier|public
name|void
name|testWhitespaceBreakingWhitespaceSubset
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|CharMatcherTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|CharMatcherTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testWhitespaceBreakingWhitespaceSubset
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

