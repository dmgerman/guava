begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2008 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.math
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
package|;
end_package

begin_class
DECL|class|IntMathTest_gwt
specifier|public
class|class
name|IntMathTest_gwt
extends|extends
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|junit
operator|.
name|client
operator|.
name|GWTTestCase
block|{
DECL|method|getModuleName ()
annotation|@
name|Override
specifier|public
name|String
name|getModuleName
parameter_list|()
block|{
return|return
literal|"com.google.common.math.testModule"
return|;
block|}
DECL|method|testBinomial ()
specifier|public
name|void
name|testBinomial
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|IntMathTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|IntMathTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testBinomial
argument_list|()
expr_stmt|;
block|}
DECL|method|testBinomialNegative ()
specifier|public
name|void
name|testBinomialNegative
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|IntMathTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|IntMathTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testBinomialNegative
argument_list|()
expr_stmt|;
block|}
DECL|method|testBinomialOutside ()
specifier|public
name|void
name|testBinomialOutside
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|IntMathTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|IntMathTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testBinomialOutside
argument_list|()
expr_stmt|;
block|}
DECL|method|testCeilingPowerOfTwo ()
specifier|public
name|void
name|testCeilingPowerOfTwo
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|IntMathTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|IntMathTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testCeilingPowerOfTwo
argument_list|()
expr_stmt|;
block|}
DECL|method|testCeilingPowerOfTwoNegative ()
specifier|public
name|void
name|testCeilingPowerOfTwoNegative
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|IntMathTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|IntMathTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testCeilingPowerOfTwoNegative
argument_list|()
expr_stmt|;
block|}
DECL|method|testCeilingPowerOfTwoZero ()
specifier|public
name|void
name|testCeilingPowerOfTwoZero
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|IntMathTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|IntMathTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testCeilingPowerOfTwoZero
argument_list|()
expr_stmt|;
block|}
DECL|method|testCheckedAdd ()
specifier|public
name|void
name|testCheckedAdd
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|IntMathTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|IntMathTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testCheckedAdd
argument_list|()
expr_stmt|;
block|}
DECL|method|testCheckedMultiply ()
specifier|public
name|void
name|testCheckedMultiply
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|IntMathTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|IntMathTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testCheckedMultiply
argument_list|()
expr_stmt|;
block|}
DECL|method|testCheckedPow ()
specifier|public
name|void
name|testCheckedPow
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|IntMathTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|IntMathTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testCheckedPow
argument_list|()
expr_stmt|;
block|}
DECL|method|testCheckedSubtract ()
specifier|public
name|void
name|testCheckedSubtract
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|IntMathTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|IntMathTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testCheckedSubtract
argument_list|()
expr_stmt|;
block|}
DECL|method|testConstantsBiggestBinomials ()
specifier|public
name|void
name|testConstantsBiggestBinomials
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|IntMathTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|IntMathTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testConstantsBiggestBinomials
argument_list|()
expr_stmt|;
block|}
DECL|method|testDivByZeroAlwaysFails ()
specifier|public
name|void
name|testDivByZeroAlwaysFails
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|IntMathTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|IntMathTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testDivByZeroAlwaysFails
argument_list|()
expr_stmt|;
block|}
DECL|method|testDivNonZero ()
specifier|public
name|void
name|testDivNonZero
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|IntMathTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|IntMathTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testDivNonZero
argument_list|()
expr_stmt|;
block|}
DECL|method|testDivNonZeroExact ()
specifier|public
name|void
name|testDivNonZeroExact
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|IntMathTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|IntMathTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testDivNonZeroExact
argument_list|()
expr_stmt|;
block|}
DECL|method|testFactorial ()
specifier|public
name|void
name|testFactorial
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|IntMathTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|IntMathTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testFactorial
argument_list|()
expr_stmt|;
block|}
DECL|method|testFactorialNegative ()
specifier|public
name|void
name|testFactorialNegative
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|IntMathTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|IntMathTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testFactorialNegative
argument_list|()
expr_stmt|;
block|}
DECL|method|testFloorPowerOfTwo ()
specifier|public
name|void
name|testFloorPowerOfTwo
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|IntMathTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|IntMathTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testFloorPowerOfTwo
argument_list|()
expr_stmt|;
block|}
DECL|method|testFloorPowerOfTwoNegative ()
specifier|public
name|void
name|testFloorPowerOfTwoNegative
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|IntMathTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|IntMathTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testFloorPowerOfTwoNegative
argument_list|()
expr_stmt|;
block|}
DECL|method|testFloorPowerOfTwoZero ()
specifier|public
name|void
name|testFloorPowerOfTwoZero
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|IntMathTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|IntMathTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testFloorPowerOfTwoZero
argument_list|()
expr_stmt|;
block|}
DECL|method|testGCD ()
specifier|public
name|void
name|testGCD
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|IntMathTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|IntMathTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testGCD
argument_list|()
expr_stmt|;
block|}
DECL|method|testGCDNegativePositiveThrows ()
specifier|public
name|void
name|testGCDNegativePositiveThrows
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|IntMathTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|IntMathTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testGCDNegativePositiveThrows
argument_list|()
expr_stmt|;
block|}
DECL|method|testGCDNegativeZeroThrows ()
specifier|public
name|void
name|testGCDNegativeZeroThrows
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|IntMathTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|IntMathTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testGCDNegativeZeroThrows
argument_list|()
expr_stmt|;
block|}
DECL|method|testGCDZero ()
specifier|public
name|void
name|testGCDZero
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|IntMathTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|IntMathTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testGCDZero
argument_list|()
expr_stmt|;
block|}
DECL|method|testLessThanBranchFree ()
specifier|public
name|void
name|testLessThanBranchFree
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|IntMathTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|IntMathTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testLessThanBranchFree
argument_list|()
expr_stmt|;
block|}
DECL|method|testLog2Exact ()
specifier|public
name|void
name|testLog2Exact
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|IntMathTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|IntMathTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testLog2Exact
argument_list|()
expr_stmt|;
block|}
DECL|method|testLog2MatchesBigInteger ()
specifier|public
name|void
name|testLog2MatchesBigInteger
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|IntMathTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|IntMathTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testLog2MatchesBigInteger
argument_list|()
expr_stmt|;
block|}
DECL|method|testLog2NegativeAlwaysThrows ()
specifier|public
name|void
name|testLog2NegativeAlwaysThrows
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|IntMathTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|IntMathTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testLog2NegativeAlwaysThrows
argument_list|()
expr_stmt|;
block|}
DECL|method|testLog2ZeroAlwaysThrows ()
specifier|public
name|void
name|testLog2ZeroAlwaysThrows
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|IntMathTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|IntMathTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testLog2ZeroAlwaysThrows
argument_list|()
expr_stmt|;
block|}
DECL|method|testMaxSignedPowerOfTwo ()
specifier|public
name|void
name|testMaxSignedPowerOfTwo
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|IntMathTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|IntMathTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testMaxSignedPowerOfTwo
argument_list|()
expr_stmt|;
block|}
DECL|method|testMod ()
specifier|public
name|void
name|testMod
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|IntMathTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|IntMathTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testMod
argument_list|()
expr_stmt|;
block|}
DECL|method|testModNegativeModulusFails ()
specifier|public
name|void
name|testModNegativeModulusFails
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|IntMathTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|IntMathTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testModNegativeModulusFails
argument_list|()
expr_stmt|;
block|}
DECL|method|testModZeroModulusFails ()
specifier|public
name|void
name|testModZeroModulusFails
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|IntMathTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|IntMathTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testModZeroModulusFails
argument_list|()
expr_stmt|;
block|}
DECL|method|testZeroDivIsAlwaysZero ()
specifier|public
name|void
name|testZeroDivIsAlwaysZero
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|IntMathTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|math
operator|.
name|IntMathTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testZeroDivIsAlwaysZero
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

