begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2008 The Guava Authors  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.common.net
package|package
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|net
package|;
end_package

begin_class
DECL|class|InternetDomainNameTest_gwt
specifier|public
class|class
name|InternetDomainNameTest_gwt
extends|extends
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|junit
operator|.
name|client
operator|.
name|GWTTestCase
block|{
DECL|method|getModuleName ()
annotation|@
name|Override
specifier|public
name|String
name|getModuleName
parameter_list|()
block|{
return|return
literal|"com.google.common.net.testModule"
return|;
block|}
DECL|method|testChild ()
specifier|public
name|void
name|testChild
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|net
operator|.
name|InternetDomainNameTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|net
operator|.
name|InternetDomainNameTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testChild
argument_list|()
expr_stmt|;
block|}
DECL|method|testEquality ()
specifier|public
name|void
name|testEquality
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|net
operator|.
name|InternetDomainNameTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|net
operator|.
name|InternetDomainNameTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testEquality
argument_list|()
expr_stmt|;
block|}
DECL|method|testExclusion ()
specifier|public
name|void
name|testExclusion
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|net
operator|.
name|InternetDomainNameTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|net
operator|.
name|InternetDomainNameTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testExclusion
argument_list|()
expr_stmt|;
block|}
DECL|method|testInvalid ()
specifier|public
name|void
name|testInvalid
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|net
operator|.
name|InternetDomainNameTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|net
operator|.
name|InternetDomainNameTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testInvalid
argument_list|()
expr_stmt|;
block|}
DECL|method|testInvalidTopPrivateDomain ()
specifier|public
name|void
name|testInvalidTopPrivateDomain
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|net
operator|.
name|InternetDomainNameTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|net
operator|.
name|InternetDomainNameTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testInvalidTopPrivateDomain
argument_list|()
expr_stmt|;
block|}
DECL|method|testIsValid ()
specifier|public
name|void
name|testIsValid
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|net
operator|.
name|InternetDomainNameTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|net
operator|.
name|InternetDomainNameTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testIsValid
argument_list|()
expr_stmt|;
block|}
DECL|method|testMultipleUnders ()
specifier|public
name|void
name|testMultipleUnders
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|net
operator|.
name|InternetDomainNameTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|net
operator|.
name|InternetDomainNameTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testMultipleUnders
argument_list|()
expr_stmt|;
block|}
DECL|method|testParent ()
specifier|public
name|void
name|testParent
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|net
operator|.
name|InternetDomainNameTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|net
operator|.
name|InternetDomainNameTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testParent
argument_list|()
expr_stmt|;
block|}
DECL|method|testParentChild ()
specifier|public
name|void
name|testParentChild
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|net
operator|.
name|InternetDomainNameTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|net
operator|.
name|InternetDomainNameTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testParentChild
argument_list|()
expr_stmt|;
block|}
DECL|method|testPublicSuffix ()
specifier|public
name|void
name|testPublicSuffix
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|net
operator|.
name|InternetDomainNameTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|net
operator|.
name|InternetDomainNameTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testPublicSuffix
argument_list|()
expr_stmt|;
block|}
DECL|method|testToString ()
specifier|public
name|void
name|testToString
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|net
operator|.
name|InternetDomainNameTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|net
operator|.
name|InternetDomainNameTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testToString
argument_list|()
expr_stmt|;
block|}
DECL|method|testTopPrivateDomain ()
specifier|public
name|void
name|testTopPrivateDomain
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|net
operator|.
name|InternetDomainNameTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|net
operator|.
name|InternetDomainNameTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testTopPrivateDomain
argument_list|()
expr_stmt|;
block|}
DECL|method|testUnderPrivateDomain ()
specifier|public
name|void
name|testUnderPrivateDomain
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|net
operator|.
name|InternetDomainNameTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|net
operator|.
name|InternetDomainNameTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testUnderPrivateDomain
argument_list|()
expr_stmt|;
block|}
DECL|method|testUnderPublicSuffix ()
specifier|public
name|void
name|testUnderPublicSuffix
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|net
operator|.
name|InternetDomainNameTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|net
operator|.
name|InternetDomainNameTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testUnderPublicSuffix
argument_list|()
expr_stmt|;
block|}
DECL|method|testValid ()
specifier|public
name|void
name|testValid
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|net
operator|.
name|InternetDomainNameTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|net
operator|.
name|InternetDomainNameTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testValid
argument_list|()
expr_stmt|;
block|}
DECL|method|testValidTopPrivateDomain ()
specifier|public
name|void
name|testValidTopPrivateDomain
parameter_list|()
throws|throws
name|Exception
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|net
operator|.
name|InternetDomainNameTest
name|testCase
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|net
operator|.
name|InternetDomainNameTest
argument_list|()
decl_stmt|;
name|testCase
operator|.
name|testValidTopPrivateDomain
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

